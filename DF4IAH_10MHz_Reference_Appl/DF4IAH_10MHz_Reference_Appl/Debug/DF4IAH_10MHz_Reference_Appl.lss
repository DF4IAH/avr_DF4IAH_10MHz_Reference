
DF4IAH_10MHz_Reference_Appl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00006be0  00006c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006be0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ff  00800114  00800114  00006c88  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006c88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000468  00000000  00000000  00006d28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000097d5  00000000  00000000  00007190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000209c  00000000  00000000  00010965  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000046ad  00000000  00000000  00012a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d50  00000000  00000000  000170b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b8a  00000000  00000000  00017e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000054ca  00000000  00000000  0001a98a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  0001fe54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__ctors_end>
       4:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_1>
       8:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
       c:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      10:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      14:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      18:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__vector_6>
      1c:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      20:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      24:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      28:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_10>
      2c:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__vector_11>
      30:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      34:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      38:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      3c:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      40:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__vector_16>
      44:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      48:	0c 94 ca 22 	jmp	0x4594	; 0x4594 <__vector_18>
      4c:	0c 94 59 23 	jmp	0x46b2	; 0x46b2 <__vector_19>
      50:	0c 94 99 23 	jmp	0x4732	; 0x4732 <__vector_20>
      54:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_21>
      58:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      5c:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      60:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <__vector_24>
      64:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__bad_interrupt>
      68:	99 10       	cpse	r9, r9
      6a:	a7 10       	cpse	r10, r7
      6c:	b5 10       	cpse	r11, r5
      6e:	c3 10       	cpse	r12, r3
      70:	d1 10       	cpse	r13, r1
      72:	df 10       	cpse	r13, r15
      74:	ed 10       	cpse	r14, r13
      76:	fb 10       	cpse	r15, r11
      78:	09 11       	cpse	r16, r9
      7a:	17 11       	cpse	r17, r7
      7c:	25 11       	cpse	r18, r5
      7e:	33 11       	cpse	r19, r3
      80:	41 11       	cpse	r20, r1
      82:	07 63       	ori	r16, 0x37	; 55
      84:	42 36       	cpi	r20, 0x62	; 98
      86:	b7 9b       	sbis	0x16, 7	; 22
      88:	d8 a7       	std	Y+40, r29	; 0x28
      8a:	1a 39       	cpi	r17, 0x9A	; 154
      8c:	68 56       	subi	r22, 0x68	; 104
      8e:	18 ae       	std	Y+56, r1	; 0x38
      90:	ba ab       	std	Y+50, r27	; 0x32
      92:	55 8c       	ldd	r5, Z+29	; 0x1d
      94:	1d 3c       	cpi	r17, 0xCD	; 205
      96:	b7 cc       	rjmp	.-1682   	; 0xfffffa06 <__eeprom_end+0xff7efa06>
      98:	57 63       	ori	r21, 0x37	; 55
      9a:	bd 6d       	ori	r27, 0xDD	; 221
      9c:	ed fd       	.word	0xfded	; ????
      9e:	75 3e       	cpi	r23, 0xE5	; 229
      a0:	f6 17       	cp	r31, r22
      a2:	72 31       	cpi	r23, 0x12	; 18
      a4:	bf 00       	.word	0x00bf	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240
      aa:	08 00       	.word	0x0008	; ????
      ac:	00 00       	nop
      ae:	be 92       	st	-X, r11
      b0:	24 49       	sbci	r18, 0x94	; 148
      b2:	12 3e       	cpi	r17, 0xE2	; 226
      b4:	ab aa       	std	Y+51, r10	; 0x33
      b6:	aa 2a       	or	r10, r26
      b8:	be cd       	rjmp	.-1156   	; 0xfffffc36 <__eeprom_end+0xff7efc36>
      ba:	cc cc       	rjmp	.-1640   	; 0xfffffa54 <__eeprom_end+0xff7efa54>
      bc:	4c 3e       	cpi	r20, 0xEC	; 236
      be:	00 00       	nop
      c0:	00 80       	ld	r0, Z
      c2:	be ab       	std	Y+54, r27	; 0x36
      c4:	aa aa       	std	Y+50, r10	; 0x32
      c6:	aa 3e       	cpi	r26, 0xEA	; 234
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	00 08       	sbc	r0, r0
      d8:	41 78       	andi	r20, 0x81	; 129
      da:	d3 bb       	out	0x13, r29	; 19
      dc:	43 87       	std	Z+11, r20	; 0x0b
      de:	d1 13       	cpse	r29, r17
      e0:	3d 19       	sub	r19, r13
      e2:	0e 3c       	cpi	r16, 0xCE	; 206
      e4:	c3 bd       	out	0x23, r28	; 35
      e6:	42 82       	std	Z+2, r4	; 0x02
      e8:	ad 2b       	or	r26, r29
      ea:	3e 68       	ori	r19, 0x8E	; 142
      ec:	ec 82       	std	Y+4, r14	; 0x04
      ee:	76 be       	out	0x36, r7	; 54
      f0:	d9 8f       	std	Y+25, r29	; 0x19
      f2:	e1 a9       	ldd	r30, Z+49	; 0x31
      f4:	3e 4c       	sbci	r19, 0xCE	; 206
      f6:	80 ef       	ldi	r24, 0xF0	; 240
      f8:	ff be       	out	0x3f, r15	; 63
      fa:	01 c4       	rjmp	.+2050   	; 0x8fe <PM_INTERPRETER_HELP12+0x32>
      fc:	ff 7f       	andi	r31, 0xFF	; 255
      fe:	3f 00       	.word	0x003f	; ????
     100:	00 00       	nop
	...

00000104 <__trampolines_end>:
     104:	63 64       	ori	r22, 0x43	; 67
     106:	69 6e       	ori	r22, 0xE9	; 233
     108:	6f 70       	andi	r22, 0x0F	; 15
     10a:	73 75       	andi	r23, 0x53	; 83
     10c:	78 58       	subi	r23, 0x88	; 136
     10e:	5b 00       	.word	0x005b	; ????

00000110 <PM_PARSE_NMEA_MSG41>:
     110:	24 47 4c 47 53 56 2c 25 2a 64 2c 31 2c 25 64 2c     $GLGSV,%*d,1,%d,
	...

00000121 <PM_PARSE_NMEA_MSG31>:
     121:	24 47 50 47 53 56 2c 25 2a 64 2c 31 2c 25 64 2c     $GPGSV,%*d,1,%d,
	...

00000132 <PM_PARSE_NMEA_MSG21>:
     132:	24 47 50 52 4d 43 2c 25 6c 64 2e 25 64 2c 25 2a     $GPRMC,%ld.%d,%*
     142:	63 2c 25 66 2c 25 63 2c 25 66 2c 25 63 2c 25 2a     c,%f,%c,%f,%c,%*
     152:	66 2c 25 2a 66 2c 25 6c 64 2c 2c 2c 25 2a 63 2a     f,%*f,%ld,,,%*c*
     162:	25 64 00                                            %d.

00000165 <PM_PARSE_NMEA_MSG12>:
     165:	25 66 2c 25 66 2c 25 66 2a 25 64 00                 %f,%f,%f*%d.

00000171 <PM_PARSE_NMEA_MSG11>:
     171:	24 47 50 47 53 41 2c 25 2a 63 2c 25 64 2c 00        $GPGSA,%*c,%d,.

00000180 <PM_PARSE_NMEA_MSG01>:
     180:	24 47 50 47 47 41 2c 25 6c 64 2e 25 64 2c 25 66     $GPGGA,%ld.%d,%f
     190:	2c 25 63 2c 25 66 2c 25 63 2c 25 64 2c 25 64 2c     ,%c,%f,%c,%d,%d,
     1a0:	25 66 2c 25 66 2c 25 2a 63 2c 25 2a 66 2c 25 2a     %f,%f,%*c,%*f,%*
     1b0:	63 2c 25 2a 64 2c 25 2a 64 2a 25 64 00              c,%*d,%*d*%d.

000001bd <PM_FORMAT_SET_BAUD>:
     1bd:	43 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e 20 62 61     Communication ba
     1cd:	75 64 20 72 61 74 65 20 73 65 74 20 74 6f 20 25     ud rate set to %
     1dd:	35 75 20 62 61 75 64 2e 0a 00                       5u baud...

000001e7 <PM_FORMAT_GPIB_SCM_IDN>:
     1e7:	44 46 34 49 41 48 2c 25 73 2c 25 30 35 75 2c 56     DF4IAH,%s,%05u,V
     1f7:	32 30 25 30 33 75 25 30 33 75 2e 00                 20%03u%03u..

00000203 <PM_FORMAT_SC02>:
     203:	23 53 43 30 32 3a 20 73 3d 30 78 25 30 32 78 2c     #SC02: s=0x%02x,
     213:	64 53 3d 25 75 2c 69 50 3d 25 75 2c 65 53 3d 25     dS=%u,iP=%u,eS=%
     223:	75 2c 61 41 3d 25 75 2c 61 41 56 3d 25 75 2c 64     u,aA=%u,aAV=%u,d
     233:	41 3d 25 75 2c 64 41 56 3d 25 75 0a 00              A=%u,dAV=%u..

00000240 <PM_FORMAT_SC01>:
     240:	23 53 43 30 31 3a 20 53 74 61 63 6b 2d 43 68 65     #SC01: Stack-Che
     250:	63 6b 3a 20 6d 75 6e 67 2d 77 61 6c 6c 20 61 64     ck: mung-wall ad
     260:	64 72 65 73 73 3a 20 30 78 25 30 34 78 2c 20 6c     dress: 0x%04x, l
     270:	6f 77 65 73 74 2d 73 74 61 63 6b 3a 20 30 78 25     owest-stack: 0x%
     280:	30 34 78 0a 00                                      04x..

00000285 <PM_FORMAT_LC23>:
     285:	25 63 25 30 37 2e 33 66 20 25 63 25 35 2e 33 66     %c%07.3f %c%5.3f
     295:	56 20 00                                            V .

00000298 <PM_FORMAT_LC22>:
     298:	25 63 25 31 75 20 25 63 25 31 75 20 25 33 2e 31     %c%1u %c%1u %3.1
     2a8:	66 20 25 63 25 30 32 75 25 63 25 30 32 75 20 00     f %c%02u%c%02u .

000002b8 <PM_FORMAT_LC21>:
     2b8:	25 30 34 75 25 30 32 75 25 30 32 75 20 55 25 30     %04u%02u%02u U%0
     2c8:	32 75 25 30 32 75 25 30 32 75 20 00                 2u%02u%02u .

000002d4 <PM_FORMAT_LC12>:
     2d4:	62 20 2d 2d 2d 2e 2d 2d 2d 20 25 63 25 31 58 20     b ---.--- %c%1X 
     2e4:	25 63 25 30 32 75 20 00                             %c%02u .

000002ec <PM_FORMAT_LC11>:
     2ec:	25 63 25 20 30 38 2e 33 66 20 25 63 25 31 58 20     %c% 08.3f %c%1X 
     2fc:	25 63 25 30 32 75 20 00                             %c%02u .

00000304 <PM_FORMAT_LC02>:
     304:	31 30 4d 48 7a 52 65 66 4f 73 63 20 56 32 2e 78     10MHzRefOsc V2.x
	...

00000315 <PM_FORMAT_LC01>:
     315:	2b 3d 3d 3d 20 44 46 34 49 41 48 20 3d 3d 3d 2b     +=== DF4IAH ===+
	...

00000326 <PM_FORMAT_IA12>:
     326:	23 49 41 31 32 3a 20 50 48 41 53 45 20 66 61 73     #IA12: PHASE fas
     336:	74 50 77 6d 53 69 6e 67 6c 65 44 69 66 66 5f 73     tPwmSingleDiff_s
     346:	74 65 70 73 20 3d 20 25 2b 30 33 2e 33 66 0a 00     teps = %+03.3f..

00000356 <PM_FORMAT_IA11>:
     356:	23 49 41 31 31 3a 20 50 48 41 53 45 20 70 68 61     #IA11: PHASE pha
     366:	73 65 45 72 72 20 20 3d 20 25 30 33 2e 33 66 c2     seErr  = %03.3f.
     376:	b0 2c 20 09 20 70 68 61 73 65 53 74 65 70 73 46     ., . phaseStepsF
     386:	72 65 71 75 65 6e 63 79 20 3d 20 25 2b 30 33 2e     requency = %+03.
     396:	33 66 2c 20 09 70 68 61 73 65 53 74 65 70 73 50     3f, .phaseStepsP
     3a6:	68 61 73 65 20 3d 20 25 2b 30 33 2e 33 66 0a 00     hase = %+03.3f..

000003b6 <PM_FORMAT_IA03>:
     3b6:	23 49 41 30 33 3a 20 51 52 47 20 20 20 6e 65 77     #IA03: QRG   new
     3c6:	50 77 6d 56 61 6c 20 3d 20 25 30 33 2e 33 66 2c     PwmVal = %03.3f,
     3d6:	20 09 70 77 6d 43 6f 72 53 74 65 70 73 20 20 20      .pwmCorSteps   
     3e6:	20 20 20 20 20 20 3d 20 25 2b 30 33 2e 33 66 0a           = %+03.3f.
	...

000003f7 <PM_FORMAT_IA02>:
     3f7:	23 49 41 30 32 3a 20 43 6c 6f 63 6b 20 6c 6f 63     #IA02: Clock loc
     407:	61 6c 4d 65 61 6e 46 6c 6f 61 74 43 6c 6f 63 6b     alMeanFloatClock
     417:	44 69 66 66 20 3d 20 25 2b 30 33 2e 33 66 48 7a     Diff = %+03.3fHz
     427:	20 40 32 30 4d 48 7a 2c 20 09 71 72 67 44 65 76      @20MHz, .qrgDev
     437:	5f 48 7a 20 3d 20 25 2b 30 33 2e 33 66 48 7a 20     _Hz = %+03.3fHz 
     447:	40 31 30 4d 48 7a 2c 20 09 70 70 6d 20 3d 20 25     @10MHz, .ppm = %
     457:	2b 30 32 2e 36 66 0a 00                             +02.6f..

0000045f <PM_FORMAT_IA01>:
     45f:	23 49 41 30 31 3a 20 43 6c 6f 63 6b 20 69 6e 74     #IA01: Clock int
     46f:	32 30 4d 48 7a 43 6c 6f 63 6b 44 69 66 66 20 20     20MHzClockDiff  
     47f:	20 20 20 20 20 3d 20 20 20 25 2b 30 34 6c 69 48          =   %+04liH
     48f:	7a 20 40 32 30 4d 48 7a 0a 00                       z @20MHz..

00000499 <PM_FORMAT_ID02>:
     499:	23 49 44 30 32 3a 20 2b 2f 2d 20 4b 45 59 20 09     #ID02: +/- KEY .
     4a9:	6d 61 69 6e 50 77 6d 54 65 72 6d 69 6e 61 6c 41     mainPwmTerminalA
     4b9:	64 6a 20 3d 20 25 66 2c 20 09 6c 6f 63 61 6c 46     dj = %f, .localF
     4c9:	61 73 74 50 77 6d 56 61 6c 4e 65 78 74 20 3d 20     astPwmValNext = 
     4d9:	25 30 33 75 20 2b 20 6c 6f 63 61 6c 46 61 73 74     %03u + localFast
     4e9:	50 77 6d 53 75 62 43 6d 70 4e 65 78 74 20 3d 20     PwmSubCmpNext = 
     4f9:	25 30 33 75 0a 00                                   %03u..

000004ff <PM_FORMAT_ID01>:
     4ff:	23 49 44 30 31 3a 20 2b 2f 2d 20 4b 45 59 20 09     #ID01: +/- KEY .
     50f:	6d 61 69 6e 50 77 6d 54 65 72 6d 69 6e 61 6c 41     mainPwmTerminalA
     51f:	64 6a 20 3d 20 25 66 2c 20 09 70 75 6c 6c 50 77     dj = %f, .pullPw
     52f:	6d 56 61 6c 42 65 66 6f 72 65 20 20 20 20 3d 20     mValBefore    = 
     53f:	25 30 33 75 20 2b 20 66 61 73 74 50 77 6d 53 75     %03u + fastPwmSu
     54f:	62 43 6d 70 42 65 66 6f 72 65 20 20 20 20 3d 20     bCmpBefore    = 
     55f:	25 30 33 75 0a 00                                   %03u..

00000565 <PM_FORMAT_TA14>:
     565:	23 54 41 31 34 3a 20 6d 61 69 6e 52 65 66 43 6c     #TA14: mainRefCl
     575:	6b 53 74 61 74 65 20 3d 20 30 78 25 31 58 0a 00     kState = 0x%1X..

00000585 <PM_FORMAT_TA13>:
     585:	23 54 41 31 33 3a 20 50 57 4d 20 3d 20 25 30 33     #TA13: PWM = %03
     595:	75 2c 20 09 53 75 62 2d 50 57 4d 20 3d 20 25 30     u, .Sub-PWM = %0
     5a5:	33 75 0a 00                                         3u..

000005a9 <PM_FORMAT_TA12>:
     5a9:	23 54 41 31 32 3a 20 70 70 73 53 74 61 6d 70 43     #TA12: ppsStampC
     5b9:	74 72 31 6d 73 20 20 3d 20 25 30 39 6c 75 2c 20     tr1ms  = %09lu, 
     5c9:	09 70 70 73 53 74 61 6d 70 49 43 52 31 20 20 20     .ppsStampICR1   
     5d9:	3d 20 25 30 35 75 2c 20 09 70 70 73 53 74 61 6d     = %05u, .ppsStam
     5e9:	70 43 74 72 31 6d 73 5f 6c 61 73 74 20 20 3d 20     pCtr1ms_last  = 
     5f9:	25 30 39 6c 75 2c 20 09 70 70 73 53 74 61 6d 70     %09lu, .ppsStamp
     609:	49 43 52 31 5f 6c 61 73 74 20 20 20 3d 20 25 30     ICR1_last   = %0
     619:	35 75 0a 00                                         5u..

0000061d <PM_FORMAT_TA11>:
     61d:	23 54 41 31 31 3a 20 6c 6f 63 61 6c 46 61 73 74     #TA11: localFast
     62d:	43 74 72 31 6d 73 20 3d 20 25 30 39 6c 75 2c 20     Ctr1ms = %09lu, 
     63d:	09 6c 6f 63 61 6c 46 61 73 74 54 43 4e 54 31 20     .localFastTCNT1 
     64d:	3d 20 25 30 35 75 0a 00                             = %05u..

00000655 <PM_FORMAT_TA03>:
     655:	23 54 41 30 33 3a 20 54 65 6d 70 20 3d 20 25 30     #TA03: Temp = %0
     665:	34 75 20 28 25 30 2e 31 66 43 29 0a 00              4u (%0.1fC)..

00000672 <PM_FORMAT_TA02>:
     672:	23 54 41 30 32 3a 20 41 44 43 31 20 3d 20 25 30     #TA02: ADC1 = %0
     682:	34 75 20 28 25 30 2e 33 66 56 29 0a 00              4u (%0.3fV)..

0000068f <PM_FORMAT_TA01>:
     68f:	23 54 41 30 31 3a 20 41 44 43 30 20 3d 20 25 30     #TA01: ADC0 = %0
     69f:	34 75 20 28 25 30 2e 33 66 56 29 0a 00              4u (%0.3fV)..

000006ac <PM_FORMAT_GP05>:
     6ac:	23 47 50 30 35 3a 20 4c 61 74 20 3d 20 25 63 20     #GP05: Lat = %c 
     6bc:	25 30 39 2e 34 66 2c 20 4c 6f 6e 20 3d 20 25 63     %09.4f, Lon = %c
     6cc:	20 25 30 31 30 2e 34 66 2c 20 48 65 69 67 68 74      %010.4f, Height
     6dc:	20 3d 20 25 2e 31 66 20 6d 0a 00                     = %.1f m..

000006e7 <PM_FORMAT_GP04>:
     6e7:	23 47 50 30 34 3a 20 50 44 4f 50 20 3d 20 25 2e     #GP04: PDOP = %.
     6f7:	32 66 2c 20 48 44 4f 50 20 3d 20 25 2e 32 66 2c     2f, HDOP = %.2f,
     707:	20 56 44 4f 50 20 3d 20 25 2e 32 66 2c 0a 00         VDOP = %.2f,..

00000716 <PM_FORMAT_GP03>:
     716:	23 47 50 30 33 3a 20 53 61 74 73 55 73 65 64 20     #GP03: SatsUsed 
     726:	3d 20 25 30 32 64 2c 20 53 61 74 73 45 70 68 69     = %02d, SatsEphi
     736:	6d 5f 47 70 73 47 61 6c 69 6c 65 6f 51 7a 73 73     m_GpsGalileoQzss
     746:	20 3d 20 25 30 32 64 2c 20 53 61 74 73 45 70 68      = %02d, SatsEph
     756:	69 6d 5f 47 6c 6f 6e 61 73 73 20 3d 20 25 30 32     im_Glonass = %02
     766:	64 0a 00                                            d..

00000769 <PM_FORMAT_GP02>:
     769:	23 47 50 30 32 3a 20 4d 6f 64 65 32 20 3d 20 25     #GP02: Mode2 = %
     779:	31 64 2c 20 50 6f 73 46 69 78 49 6e 64 20 3d 20     1d, PosFixInd = 
     789:	25 31 64 0a 00                                      %1d..

0000078e <PM_FORMAT_GP01>:
     78e:	23 47 50 30 31 3a 20 44 61 74 65 20 3d 20 25 30     #GP01: Date = %0
     79e:	38 6c 64 2c 20 54 69 6d 65 20 3d 20 25 30 36 6c     8ld, Time = %06l
     7ae:	64 2e 25 30 33 64 0a 00                             d.%03d..

000007b6 <PM_FORMAT_GP00>:
     7b6:	0a 23 47 50 30 30 3a 20 3d 3d 3d 3d 3d 3d 3d 00     .#GP00: =======.

000007c6 <PM_FORMAT_GPS_WEST1_EAST1>:
     7c6:	24 50 4d 54 4b 33 35 33 2c 31 2c 31 2a 33 37 0d     $PMTK353,1,1*37.
     7d6:	0a 00                                               ..

000007d8 <PM_FORMAT_GPS_WEST1_EAST0>:
     7d8:	24 50 4d 54 4b 33 35 33 2c 31 2c 30 2a 33 36 0d     $PMTK353,1,0*36.
     7e8:	0a 00                                               ..

000007ea <PM_FORMAT_GPS_WEST0_EAST0>:
     7ea:	24 50 4d 54 4b 33 35 33 2c 30 2c 30 2a 33 37 0d     $PMTK353,0,0*37.
     7fa:	0a 00                                               ..

000007fc <PM_FORMAT_GPS_STBY>:
     7fc:	24 50 4d 54 4b 31 36 31 2c 30 2a 32 38 0d 0a 00     $PMTK161,0*28...

0000080c <PM_FORMAT_GPS_WARM_RESTART>:
     80c:	24 50 4d 54 4b 31 30 32 2a 33 31 0d 0a 00           $PMTK102*31...

0000081a <PM_FORMAT_VERSION>:
     81a:	0a 3d 3d 3d 20 44 46 34 49 41 48 20 2d 20 31 30     .=== DF4IAH - 10
     82a:	20 4d 48 7a 20 52 65 66 65 72 65 6e 63 65 20 4f      MHz Reference O
     83a:	73 63 69 6c 6c 61 74 6f 72 20 3d 3d 3d 0a 3d 3d     scillator ===.==
     84a:	3d 20 56 65 72 3a 20 32 30 25 30 33 64 25 30 33     = Ver: 20%03d%03
     85a:	64 00                                               d.

0000085c <PM_INTERPRETER_UNKNOWN>:
     85c:	0a 2a 3f 2a 20 20 75 6e 6b 6e 6f 77 6e 20 63 6f     .*?*  unknown co
     86c:	6d 6d 61 6e 64 20 27 25 73 27 20 72 65 63 65 69     mmand '%s' recei
     87c:	76 65 64 2c 20 74 72 79 20 48 45 4c 50 2e 0a 3e     ved, try HELP..>
	...

0000088d <PM_INTERPRETER_HELP14>:
     88d:	0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 3e 00        .===========.>.

0000089c <PM_INTERPRETER_HELP13>:
     89c:	0a 2b 2f 2d 20 3c 50 57 4d 20 76 61 6c 75 65 3e     .+/- <PWM value>
     8ac:	09 09 63 6f 72 72 65 63 74 69 6f 6e 20 76 61 6c     ..correction val
     8bc:	75 65 20 74 6f 20 62 65 20 61 64 64 65 64 2e 00     ue to be added..

000008cc <PM_INTERPRETER_HELP12>:
     8cc:	0a 57 52 49 54 45 50 57 4d 09 09 09 73 74 6f 72     .WRITEPWM...stor
     8dc:	65 20 63 75 72 72 65 6e 74 20 50 57 4d 20 61 73     e current PWM as
     8ec:	20 64 65 66 61 75 6c 74 20 76 61 6c 75 65 2e 0a      default value..
     8fc:	57 52 49 54 45 54 45 4d 50 20 3c 54 45 4d 50 20     WRITETEMP <TEMP 
     90c:	76 61 6c 75 65 3e 09 09 77 72 69 74 65 20 63 75     value>..write cu
     91c:	72 72 65 6e 74 20 74 65 6d 70 65 72 61 74 75 72     rrent temperatur
     92c:	65 20 61 73 20 64 65 66 61 75 6c 74 20 76 61 6c     e as default val
     93c:	75 65 2e 00                                         ue..

00000940 <PM_INTERPRETER_HELP11>:
     940:	0a 54 45 53 54 09 09 09 09 74 6f 67 67 6c 65 73     .TEST....toggles
     950:	20 63 6f 75 6e 74 65 72 20 74 65 73 74 2e 00         counter test..

0000095f <PM_INTERPRETER_HELP10>:
     95f:	0a 53 54 41 43 4b 09 09 09 09 74 6f 67 67 6c 65     .STACK....toggle
     96f:	73 20 73 74 61 63 6b 20 6d 75 6e 67 2d 77 61 6c     s stack mung-wal
     97f:	6c 20 74 65 73 74 2e 00                             l test..

00000987 <PM_INTERPRETER_HELP09>:
     987:	0a 53 45 52 4f 46 46 09 09 09 09 73 77 69 74 63     .SEROFF....switc
     997:	68 20 73 65 72 69 61 6c 20 63 6f 6d 6d 75 6e 69     h serial communi
     9a7:	63 61 74 69 6f 6e 20 4f 46 46 2e 0a 53 45 52 4f     cation OFF..SERO
     9b7:	4e 09 09 09 09 73 77 69 74 63 68 20 73 65 72 69     N....switch seri
     9c7:	61 6c 20 63 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e     al communication
     9d7:	20 4f 4e 2e 00                                       ON..

000009dc <PM_INTERPRETER_HELP08>:
     9dc:	0a 53 45 52 42 41 55 44 20 3c 62 61 75 64 3e 09     .SERBAUD <baud>.
     9ec:	09 09 73 65 74 74 69 6e 67 20 73 65 72 69 61 6c     ..setting serial
     9fc:	20 62 61 75 64 20 72 61 74 65 2e 00                  baud rate..

00000a08 <PM_INTERPRETER_HELP07>:
     a08:	0a 4c 45 44 4f 46 46 09 09 09 09 73 77 69 74 63     .LEDOFF....switc
     a18:	68 20 62 61 63 6b 6c 69 67 68 74 20 4f 46 46 2e     h backlight OFF.
     a28:	0a 4c 45 44 4f 4e 09 09 09 09 73 77 69 74 63 68     .LEDON....switch
     a38:	20 62 61 63 6b 6c 69 67 68 74 20 4f 4e 2e 00         backlight ON..

00000a47 <PM_INTERPRETER_HELP06>:
     a47:	0a 49 4e 46 4f 09 09 09 09 74 6f 67 67 6c 65 73     .INFO....toggles
     a57:	20 61 64 64 69 74 69 6f 6e 61 6c 20 70 72 69 6e      additional prin
     a67:	74 65 64 20 69 6e 66 6f 73 2e 00                    ted infos..

00000a72 <PM_INTERPRETER_HELP05>:
     a72:	0a 48 45 4c 50 09 09 09 09 74 68 69 73 20 6d 65     .HELP....this me
     a82:	73 73 61 67 65 2e 00                                ssage..

00000a89 <PM_INTERPRETER_HELP04>:
     a89:	0a 48 41 4c 54 09 09 09 09 70 6f 77 65 72 73 20     .HALT....powers 
     a99:	74 68 65 20 64 65 76 69 63 65 20 64 6f 77 6e 20     the device down 
     aa9:	28 73 6c 65 65 70 20 6d 6f 64 65 29 2e 00           (sleep mode)..

00000ab7 <PM_INTERPRETER_HELP03>:
     ab7:	0a 41 50 43 4f 46 46 09 09 09 09 73 77 69 74 63     .APCOFF....switc
     ac7:	68 20 41 50 43 20 28 61 75 74 6f 6d 61 74 69 63     h APC (automatic
     ad7:	20 70 68 61 73 65 20 63 6f 6e 74 72 6f 6c 29 20      phase control) 
     ae7:	6f 66 66 2e 0a 41 50 43 4f 4e 09 09 09 09 73 77     off..APCON....sw
     af7:	69 74 63 68 20 41 50 43 20 28 61 75 74 6f 6d 61     itch APC (automa
     b07:	74 69 63 20 70 68 61 73 65 20 63 6f 6e 74 72 6f     tic phase contro
     b17:	6c 29 20 6f 6e 2e 00                                l) on..

00000b1e <PM_INTERPRETER_HELP02>:
     b1e:	0a 41 46 43 4f 46 46 09 09 09 09 73 77 69 74 63     .AFCOFF....switc
     b2e:	68 20 41 46 43 20 28 61 75 74 6f 6d 61 74 69 63     h AFC (automatic
     b3e:	20 66 72 65 71 75 65 6e 63 79 20 63 6f 6e 74 72      frequency contr
     b4e:	6f 6c 29 20 6f 66 66 2e 0a 41 46 43 4f 4e 09 09     ol) off..AFCON..
     b5e:	09 09 73 77 69 74 63 68 20 41 46 43 20 28 61 75     ..switch AFC (au
     b6e:	74 6f 6d 61 74 69 63 20 66 72 65 71 75 65 6e 63     tomatic frequenc
     b7e:	79 20 63 6f 6e 74 72 6f 6c 29 20 6f 6e 2e 00        y control) on..

00000b8d <PM_INTERPRETER_HELP01>:
     b8d:	0a 3d 3d 3d 20 48 45 4c 50 20 3d 3d 3d 0a 0a 24     .=== HELP ===..$
     b9d:	20 3c 4e 4d 45 41 2d 4d 65 73 73 61 67 65 3e 09      <NMEA-Message>.
     bad:	09 73 65 6e 64 73 20 6d 65 73 73 61 67 65 20 74     .sends message t
     bbd:	6f 20 74 68 65 20 47 50 53 20 6d 6f 64 75 6c 65     o the GPS module
     bcd:	2e 00                                               ..

00000bcf <PM_GPIB_SCM_IDN>:
     bcf:	2a 49 44 4e 3f 00                                   *IDN?.

00000bd5 <PM_COMMAND_WRITETEMP>:
     bd5:	57 52 49 54 45 54 45 4d 50 00                       WRITETEMP.

00000bdf <PM_COMMAND_WRITEPWM>:
     bdf:	57 52 49 54 45 50 57 4d 00                          WRITEPWM.

00000be8 <PM_COMMAND_TEST>:
     be8:	54 45 53 54 00                                      TEST.

00000bed <PM_COMMAND_STACK>:
     bed:	53 54 41 43 4b 00                                   STACK.

00000bf3 <PM_COMMAND_SERON>:
     bf3:	53 45 52 4f 4e 00                                   SERON.

00000bf9 <PM_COMMAND_SEROFF>:
     bf9:	53 45 52 4f 46 46 00                                SEROFF.

00000c00 <PM_COMMAND_SERBAUD>:
     c00:	53 45 52 42 41 55 44 00                             SERBAUD.

00000c08 <PM_COMMAND_LEDON>:
     c08:	4c 45 44 4f 4e 00                                   LEDON.

00000c0e <PM_COMMAND_LEDOFF>:
     c0e:	4c 45 44 4f 46 46 00                                LEDOFF.

00000c15 <PM_COMMAND_INFO>:
     c15:	49 4e 46 4f 00                                      INFO.

00000c1a <PM_COMMAND_HELP>:
     c1a:	48 45 4c 50 00                                      HELP.

00000c1f <PM_COMMAND_HALT>:
     c1f:	48 41 4c 54 00                                      HALT.

00000c24 <PM_COMMAND_APCON>:
     c24:	41 50 43 4f 4e 00                                   APCON.

00000c2a <PM_COMMAND_APCOFF>:
     c2a:	41 50 43 4f 46 46 00                                APCOFF.

00000c31 <PM_COMMAND_AFCON>:
     c31:	41 46 43 4f 4e 00                                   AFCON.

00000c37 <PM_COMMAND_AFCOFF>:
     c37:	41 46 43 4f 46 46 00                                AFCOFF.

00000c3e <eeprom_defaultValues_content>:
     c3e:	44 46 34 49 41 48 20 31 30 4d 68 7a 2d 52 65 66     DF4IAH 10Mhz-Ref
     c4e:	ad 97 00 00 01 ff ff ff ff ff ff ff 00 00 0c b0     ................
     c5e:	a5 2c 8f 40 48 e1 8a 3f 00 00 ad 43 00 a0 87 3f     .,.@H..?...C...?
     c6e:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 1c b0     ................
     c7e:	cd cc 94 c0 5c 8f c2 3f 50 8d 17 3d ff ff ff ff     ....\..?P..=....
     c8e:	ff ff 71 3d 8a 3f 33 33 13 40 9b 00 00 00 2c b0     ..q=.?33.@....,.
     c9e:	80 25 08 01 00 00 00 00 ff ff ff ff ff ff ff ff     .%..............
     cae:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 3c b0     ..............<.
     cbe:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
     cce:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 4c b0     ..............L.

00000cde <usbDescriptorConfiguration>:
     cde:	09 02 19 00 01 01 00 80 69 09 04 00 00 01 ff 00     ........i.......
     cee:	00 00 07 05 81 03 08 00 0a                          .........

00000cf7 <usbDescriptorDevice>:
     cf7:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
     d07:	03 01                                               ..

00000d09 <usbDescriptorStringSerialNumber>:
     d09:	10 03 50 00 72 00 6f 00 74 00 6f 00 2d 00 31 00     ..P.r.o.t.o.-.1.

00000d19 <usbDescriptorStringDevice>:
     d19:	2a 03 44 00 46 00 34 00 49 00 41 00 48 00 2d 00     *.D.F.4.I.A.H.-.
     d29:	31 00 30 00 4d 00 48 00 7a 00 2d 00 52 00 65 00     1.0.M.H.z.-.R.e.
     d39:	66 00 2d 00 4f 00 73 00 63 00                       f.-.O.s.c.

00000d43 <usbDescriptorStringVendor>:
     d43:	0e 03 44 00 46 00 34 00 49 00 41 00 48 00           ..D.F.4.I.A.H.

00000d51 <usbDescriptorString0>:
     d51:	04 03 09 04 00                                      .....

00000d56 <__ctors_end>:
     d56:	11 24       	eor	r1, r1
     d58:	1f be       	out	0x3f, r1	; 63
     d5a:	cf ef       	ldi	r28, 0xFF	; 255
     d5c:	d8 e0       	ldi	r29, 0x08	; 8
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	cd bf       	out	0x3d, r28	; 61

00000d62 <__do_copy_data>:
     d62:	11 e0       	ldi	r17, 0x01	; 1
     d64:	a0 e0       	ldi	r26, 0x00	; 0
     d66:	b1 e0       	ldi	r27, 0x01	; 1
     d68:	e0 ee       	ldi	r30, 0xE0	; 224
     d6a:	fb e6       	ldi	r31, 0x6B	; 107
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <__do_copy_data+0x10>
     d6e:	05 90       	lpm	r0, Z+
     d70:	0d 92       	st	X+, r0
     d72:	a4 31       	cpi	r26, 0x14	; 20
     d74:	b1 07       	cpc	r27, r17
     d76:	d9 f7       	brne	.-10     	; 0xd6e <__do_copy_data+0xc>

00000d78 <__do_clear_bss>:
     d78:	28 e0       	ldi	r18, 0x08	; 8
     d7a:	a4 e1       	ldi	r26, 0x14	; 20
     d7c:	b1 e0       	ldi	r27, 0x01	; 1
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <.do_clear_bss_start>

00000d80 <.do_clear_bss_loop>:
     d80:	1d 92       	st	X+, r1

00000d82 <.do_clear_bss_start>:
     d82:	a3 31       	cpi	r26, 0x13	; 19
     d84:	b2 07       	cpc	r27, r18
     d86:	e1 f7       	brne	.-8      	; 0xd80 <.do_clear_bss_loop>
     d88:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <main>
     d8c:	0c 94 ee 35 	jmp	0x6bdc	; 0x6bdc <_exit>

00000d90 <__bad_interrupt>:
     d90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d94 <usbCrc16>:
;   byte    r18 / r22
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     d94:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     d96:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xFF
     d98:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xFF
     d9a:	9f ef       	ldi	r25, 0xFF	; 255
    rjmp    usbCrc16LoopTest
     d9c:	1b c0       	rjmp	.+54     	; 0xdd4 <usbCrc16LoopTest>

00000d9e <usbCrc16ByteLoop>:
usbCrc16ByteLoop:
    ld      byte, ptr+
     d9e:	2d 91       	ld	r18, X+
    eor     resCrcL, byte   ; resCrcL is now 'x' in table()
     da0:	82 27       	eor	r24, r18
    mov     byte, resCrcL   ; compute parity of 'x'
     da2:	28 2f       	mov	r18, r24
    swap    byte
     da4:	22 95       	swap	r18
    eor     byte, resCrcL
     da6:	28 27       	eor	r18, r24
    mov     scratch, byte
     da8:	72 2f       	mov	r23, r18
    lsr     byte
     daa:	26 95       	lsr	r18
    lsr     byte
     dac:	26 95       	lsr	r18
    eor     byte, scratch
     dae:	27 27       	eor	r18, r23
    inc     byte
     db0:	23 95       	inc	r18
    lsr     byte
     db2:	26 95       	lsr	r18
    andi    byte, 1         ; byte is now parity(x)
     db4:	21 70       	andi	r18, 0x01	; 1
    mov     scratch, resCrcL
     db6:	78 2f       	mov	r23, r24
    mov     resCrcL, resCrcH
     db8:	89 2f       	mov	r24, r25
    eor     resCrcL, byte   ; low byte of if(parity(x)) value ^= 0xc001;
     dba:	82 27       	eor	r24, r18
    neg     byte
     dbc:	21 95       	neg	r18
    andi    byte, 0xc0
     dbe:	20 7c       	andi	r18, 0xC0	; 192
    mov     resCrcH, byte   ; high byte of if(parity(x)) value ^= 0xc001;
     dc0:	92 2f       	mov	r25, r18
    clr     byte
     dc2:	22 27       	eor	r18, r18
    lsr     scratch
     dc4:	76 95       	lsr	r23
    ror     byte
     dc6:	27 95       	ror	r18
    eor     resCrcH, scratch
     dc8:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     dca:	82 27       	eor	r24, r18
    lsr     scratch
     dcc:	76 95       	lsr	r23
    ror     byte
     dce:	27 95       	ror	r18
    eor     resCrcH, scratch
     dd0:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     dd2:	82 27       	eor	r24, r18

00000dd4 <usbCrc16LoopTest>:
usbCrc16LoopTest:
    subi    argLen, 1
     dd4:	61 50       	subi	r22, 0x01	; 1
    brsh    usbCrc16ByteLoop
     dd6:	18 f7       	brcc	.-58     	; 0xd9e <usbCrc16ByteLoop>
    com     resCrcL
     dd8:	80 95       	com	r24
    com     resCrcH
     dda:	90 95       	com	r25
    ret
     ddc:	08 95       	ret

00000dde <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     dde:	da df       	rcall	.-76     	; 0xd94 <usbCrc16>
    st      ptr+, resCrcL
     de0:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     de2:	9d 93       	st	X+, r25
    ret
     de4:	08 95       	ret

00000de6 <__vector_1>:
; bitcnt is used to determine when a stuff bit is due
; cnt holds the number of bytes left in the receive buffer

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-28] push only what is necessary to sync with edge ASAP
     de6:	cf 93       	push	r28
    in      YL, SREG            ;[-26]
     de8:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-25]
     dea:	cf 93       	push	r28
    push    YH                  ;[-23]
     dec:	df 93       	push	r29

00000dee <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     dee:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     df0:	33 9b       	sbis	0x06, 3	; 6
    brne    waitForJ        ; just make sure we have ANY timeout
     df2:	e9 f7       	brne	.-6      	; 0xdee <waitForJ>

00000df4 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-19]
     df4:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK              ;[-18]
     df6:	11 c0       	rjmp	.+34     	; 0xe1a <foundK>
    sbis    USBIN, USBMINUS
     df8:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <foundK>
    sbis    USBIN, USBMINUS
     dfc:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <foundK>
    sbis    USBIN, USBMINUS
     e00:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e02:	0b c0       	rjmp	.+22     	; 0xe1a <foundK>
    sbis    USBIN, USBMINUS
     e04:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <foundK>
    sbis    USBIN, USBMINUS
     e08:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e0a:	07 c0       	rjmp	.+14     	; 0xe1a <foundK>
    sbis    USBIN, USBMINUS
     e0c:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <foundK>
    sbis    USBIN, USBMINUS
     e10:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <foundK>
    sbis    USBIN, USBMINUS
     e14:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     e18:	83 c0       	rjmp	.+262    	; 0xf20 <sofError>

00000e1a <foundK>:
foundK:                         ;[-16]
;{3, 5} after falling D- edge, average delay: 4 cycles
;bit0 should be at 34 for center sampling. Currently at 4 so 30 cylces till bit 0 sample
;use 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-16]
     e1a:	6f 93       	push	r22
;   [---]                       ;[-15]
    lds     YL, usbInputBufOffset;[-14]
     e1c:	c0 91 f6 07 	lds	r28, 0x07F6	; 0x8007f6 <usbInputBufOffset>
;   [---]                       ;[-13]
    clr     YH                  ;[-12]
     e20:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-11] [rx loop init]
     e22:	c3 50       	subi	r28, 0x03	; 3
    sbci    YH, hi8(-(usbRxBuf));[-10] [rx loop init]
     e24:	d8 4f       	sbci	r29, 0xF8	; 248
    push    shift               ;[-9]
     e26:	2f 93       	push	r18
;   [---]                       ;[-8]
    ldi     shift,0x40          ;[-7] set msb to "1" so processing bit7 can be detected
     e28:	20 e4       	ldi	r18, 0x40	; 64
    nop2                        ;[-6]
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <foundK+0x12>
;   [---]                       ;[-5]
    ldi     bitcnt, 5           ;[-4] [rx loop init]
     e2c:	65 e0       	ldi	r22, 0x05	; 5
    sbis    USBIN, USBMINUS     ;[-3] we want two bits K (sample 3 cycles too early)
     e2e:	33 9b       	sbis	0x06, 3	; 6
    rjmp    haveTwoBitsK        ;[-2]
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <haveTwoBitsK>
    pop     shift               ;[-1] undo the push from before
     e32:	2f 91       	pop	r18
    pop     bitcnt              ;[1] 
     e34:	6f 91       	pop	r22
    rjmp    waitForK            ;[3] this was not the end of sync, retry
     e36:	de cf       	rjmp	.-68     	; 0xdf4 <waitForK>

00000e38 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1                  ;[0]
     e38:	0f 93       	push	r16
    push    x2                  ;[2]
     e3a:	1f 93       	push	r17
    push    x3                  ;[4] (leap2)
     e3c:	4f 93       	push	r20
    ldi     leap2, 0x55         ;[6] add leap cycle on 2nd,5th,8th,... stuff bit
     e3e:	45 e5       	ldi	r20, 0x55	; 85
    push    x4                  ;[7] == leap
     e40:	5f 93       	push	r21
    ldi     leap, 0x55          ;[9] skip leap cycle on 2nd,5th,8th,... byte received
     e42:	55 e5       	ldi	r21, 0x55	; 85
    push    cnt                 ;[10]
     e44:	3f 93       	push	r19
    ldi     cnt, USB_BUFSIZE    ;[12] [rx loop init]
     e46:	3b e0       	ldi	r19, 0x0B	; 11
    ldi     x2, 1<<USBPLUS      ;[13] current line state is K state. D+=="1", D-=="0"
     e48:	14 e0       	ldi	r17, 0x04	; 4

00000e4a <bit0>:
bit0:       
    in      x1, USBIN           ;[0] sample line state
     e4a:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     e4c:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;[2] make bit0 14 cycles long
     e4e:	2e c0       	rjmp	.+92     	; 0xeac <handleBit>

00000e50 <b6checkUnstuff>:
;----------------------------------------------------------------------------
; Process bit7. However, bit 6 still may need unstuffing.
;----------------------------------------------------------------------------

b6checkUnstuff:
    dec     bitcnt              ;[9]
     e50:	6a 95       	dec	r22
    breq    unstuff6            ;[10]
     e52:	c9 f0       	breq	.+50     	; 0xe86 <unstuff6>

00000e54 <bit7>:
bit7:
    subi    cnt, 1              ;[11] cannot use dec becaus it does not affect the carry flag
     e54:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow            ;[12] Too many bytes received. Ignore packet
     e56:	d8 f1       	brcs	.+118    	; 0xece <overflow>
    in      x1, USBIN           ;[0] sample line state
     e58:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     e5a:	0c 70       	andi	r16, 0x0C	; 12
    cpse    x1, x2              ;[2] when previous line state equals current line state, handle "1"
     e5c:	01 13       	cpse	r16, r17
    rjmp    b7handle0           ;[3] when line state differs, handle "0"
     e5e:	0b c0       	rjmp	.+22     	; 0xe76 <b7handle0>
    sec                         ;[4]
     e60:	08 94       	sec
    ror     shift               ;[5] shift "1" into the data
     e62:	27 95       	ror	r18
    st      y+, shift           ;[6] store the data into the buffer
     e64:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[7] reset data for receiving the next byte
     e66:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[9] trick to introduce a leap cycle every 3 bytes
     e68:	55 55       	subi	r21, 0x55	; 85
    brcc    nextInst            ;[10 or 11] it will fail after 85 bytes. However low speed can only receive 11
     e6a:	00 f4       	brcc	.+0      	; 0xe6c <bit7+0x18>
    dec     bitcnt              ;[11 or 12]
     e6c:	6a 95       	dec	r22
    brne    bit0                ;[12 or 13]
     e6e:	69 f7       	brne	.-38     	; 0xe4a <bit0>
    ldi     x1, 1               ;[13 or 14] unstuffing bit 7
     e70:	01 e0       	ldi	r16, 0x01	; 1
    in      bitcnt, USBIN       ;[0] sample stuff bit
     e72:	66 b1       	in	r22, 0x06	; 6
    rjmp    unstuff             ;[1]
     e74:	0b c0       	rjmp	.+22     	; 0xe8c <unstuff>

00000e76 <b7handle0>:

b7handle0:
    mov     x2,x1               ;[5] Set x2 to current line state
     e76:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[6]
     e78:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[7] shift "0" into the data
     e7a:	26 95       	lsr	r18
    st      y+, shift           ;[8] store data into the buffer
     e7c:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[10] reset data for receiving the next byte
     e7e:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[11] trick to introduce a leap cycle every 3 bytes
     e80:	55 55       	subi	r21, 0x55	; 85
    brcs    bit0                ;[12] it will fail after 85 bytes. However low speed can only receive 11
     e82:	18 f3       	brcs	.-58     	; 0xe4a <bit0>
    rjmp    bit0                ;[13]
     e84:	e2 cf       	rjmp	.-60     	; 0xe4a <bit0>

00000e86 <unstuff6>:
; Handle unstuff
; x1==0xFF indicate unstuffing bit6
;----------------------------------------------------------------------------

unstuff6:
    ldi     x1,0xFF             ;[12] indicate unstuffing bit 6
     e86:	0f ef       	ldi	r16, 0xFF	; 255
    in      bitcnt, USBIN       ;[0]  sample stuff bit
     e88:	66 b1       	in	r22, 0x06	; 6
	...

00000e8c <unstuff>:
    nop                         ;[1]  fix timing
unstuff:                        ;b0-5  b6   b7
    mov     x2,bitcnt           ;[3]  [2]  [3]  Set x2 to match line state
     e8c:	16 2f       	mov	r17, r22
    subi    leap2, 0x55         ;[4]  [3]  [4]  delay loop
     e8e:	45 55       	subi	r20, 0x55	; 85
    brcs    nextInst            ;[5]  [4]  [5]  add one cycle every three stuff bits
     e90:	00 f0       	brcs	.+0      	; 0xe92 <unstuff+0x6>
    sbci    leap2,0             ;[6]  [5]  [6]
     e92:	40 40       	sbci	r20, 0x00	; 0
    ldi     bitcnt,6            ;[7]  [6]  [7]  reset bit stuff counter
     e94:	66 e0       	ldi	r22, 0x06	; 6
    andi    x2, USBMASK         ;[8]  [7]  [8] only keep D+ and D-
     e96:	1c 70       	andi	r17, 0x0C	; 12
    cpi     x1,0                ;[9]  [8]  [9]
     e98:	00 30       	cpi	r16, 0x00	; 0
    brmi    bit7                ;[10] [9]  [10] finished unstuffing bit6 When x1<0
     e9a:	e2 f2       	brmi	.-72     	; 0xe54 <bit7>
    breq    bitloop             ;[11] ---  [11] finished unstuffing bit0-5 when x1=0
     e9c:	21 f0       	breq	.+8      	; 0xea6 <bitloop>
    nop                         ;---  ---  [12]
     e9e:	00 00       	nop
    in      x1, USBIN           ;---  ---  [0] sample line state for bit0
     ea0:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;---  ---  [1] filter only D+ and D- bits
     ea2:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;---  ---  [2] make bit0 14 cycles long
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <handleBit>

00000ea6 <bitloop>:

;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------
bitloop:
    in      x1, USBIN           ;[0] sample line state
     ea6:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     ea8:	0c 70       	andi	r16, 0x0C	; 12
    breq    se0                 ;[2] both lines are low so handle se0
     eaa:	a9 f0       	breq	.+42     	; 0xed6 <se0>

00000eac <handleBit>:
handleBit:
    cpse    x1, x2              ;[3] when previous line state equals current line state, handle "1"
     eac:	01 13       	cpse	r16, r17
    rjmp    handle0             ;[4] when line state differs, handle "0"
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <handle0>
    sec                         ;[5]
     eb0:	08 94       	sec
    ror     shift               ;[6] shift "1" into the data
     eb2:	27 95       	ror	r18
    brcs    b6checkUnstuff      ;[7] When after shift C is set, next bit is bit7
     eb4:	68 f2       	brcs	.-102    	; 0xe50 <b6checkUnstuff>
    nop2                        ;[8]
     eb6:	00 c0       	rjmp	.+0      	; 0xeb8 <handleBit+0xc>
    dec     bitcnt              ;[10]
     eb8:	6a 95       	dec	r22
    brne    bitloop             ;[11]
     eba:	a9 f7       	brne	.-22     	; 0xea6 <bitloop>
    ldi     x1,0                ;[12] indicate unstuff for bit other than bit6 or bit7
     ebc:	00 e0       	ldi	r16, 0x00	; 0
    in      bitcnt, USBIN       ;[0] sample stuff bit
     ebe:	66 b1       	in	r22, 0x06	; 6
    rjmp    unstuff             ;[1]
     ec0:	e5 cf       	rjmp	.-54     	; 0xe8c <unstuff>

00000ec2 <handle0>:

handle0:
    mov     x2, x1              ;[6] Set x2 to current line state
     ec2:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[7] reset unstuff counter. 
     ec4:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[8] shift "0" into the data
     ec6:	26 95       	lsr	r18
    brcs    bit7                ;[9] When after shift C is set, next bit is bit7
     ec8:	28 f2       	brcs	.-118    	; 0xe54 <bit7>
    nop                         ;[10]
     eca:	00 00       	nop
    rjmp    bitloop             ;[11] 
     ecc:	ec cf       	rjmp	.-40     	; 0xea6 <bitloop>

00000ece <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     ece:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     ed0:	1c bb       	out	0x1c, r17	; 28

00000ed2 <ignorePacket>:
ignorePacket:
    clr     token
     ed2:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     ed4:	19 c0       	rjmp	.+50     	; 0xf08 <handleSetupOrOut>

00000ed6 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     ed6:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     ed8:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     eda:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     edc:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     ede:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     ee0:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
     ee2:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     ee4:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     ee6:	09 f1       	breq	.+66     	; 0xf2a <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     ee8:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     eea:	f9 f0       	breq	.+62     	; 0xf2a <handleData>
    lds     shift, usbDeviceAddr;[17]
     eec:	20 91 f4 07 	lds	r18, 0x07F4	; 0x8007f4 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     ef0:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     ef2:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     ef4:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     ef6:	ed cf       	rjmp	.-38     	; 0xed2 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     ef8:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     efa:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     efc:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     efe:	51 f1       	breq	.+84     	; 0xf54 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     f00:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     f02:	11 f0       	breq	.+4      	; 0xf08 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     f04:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     f06:	29 f7       	brne	.-54     	; 0xed2 <ignorePacket>

00000f08 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     f08:	00 93 fb 07 	sts	0x07FB, r16	; 0x8007fb <usbCurrentTok>

00000f0c <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     f0c:	3f 91       	pop	r19
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	2f 91       	pop	r18
     f18:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
     f1a:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     f1c:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     f1e:	67 cf       	rjmp	.-306    	; 0xdee <waitForJ>

00000f20 <sofError>:
sofError:
    POP_RETI                    ;macro call
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	cf bf       	out	0x3f, r28	; 63
     f26:	cf 91       	pop	r28
    reti
     f28:	18 95       	reti

00000f2a <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     f2a:	20 91 fb 07 	lds	r18, 0x07FB	; 0x8007fb <usbCurrentTok>
    tst     shift               ;[20]
     f2e:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     f30:	69 f3       	breq	.-38     	; 0xf0c <doReturn>
    lds     x2, usbRxLen        ;[22]
     f32:	10 91 f9 07 	lds	r17, 0x07F9	; 0x8007f9 <usbRxLen>
    tst     x2                  ;[24]
     f36:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     f38:	81 f5       	brne	.+96     	; 0xf9a <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     f3a:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     f3c:	82 f1       	brmi	.+96     	; 0xf9e <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     f3e:	30 93 f9 07 	sts	0x07F9, r19	; 0x8007f9 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
     f42:	20 93 f5 07 	sts	0x07F5, r18	; 0x8007f5 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
     f46:	10 91 f6 07 	lds	r17, 0x07F6	; 0x8007f6 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
     f4a:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     f4c:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     f4e:	30 93 f6 07 	sts	0x07F6, r19	; 0x8007f6 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     f52:	25 c0       	rjmp	.+74     	; 0xf9e <sendAckAndReti>

00000f54 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     f54:	00 91 f9 07 	lds	r16, 0x07F9	; 0x8007f9 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     f58:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     f5a:	fc f4       	brge	.+62     	; 0xf9a <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     f5c:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     f5e:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     f60:	49 f4       	brne	.+18     	; 0xf74 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     f62:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     f66:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     f68:	1b c0       	rjmp	.+54     	; 0xfa0 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     f6a:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
     f6e:	c9 ee       	ldi	r28, 0xE9	; 233
    ldi     YH, hi8(usbTxBuf)   ;[44]
     f70:	d7 e0       	ldi	r29, 0x07	; 7
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     f72:	1a c0       	rjmp	.+52     	; 0xfa8 <usbSendAndReti>

00000f74 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     f74:	30 91 7c 05 	lds	r19, 0x057C	; 0x80057c <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     f78:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     f7a:	12 c0       	rjmp	.+36     	; 0xfa0 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     f7c:	00 93 7c 05 	sts	0x057C, r16	; 0x80057c <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     f80:	cd e7       	ldi	r28, 0x7D	; 125
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     f82:	d5 e0       	ldi	r29, 0x05	; 5
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     f84:	11 c0       	rjmp	.+34     	; 0xfa8 <usbSendAndReti>

00000f86 <bitstuffN>:
; Spec allows 7.5 bit times from EOP to SOP for replies
; 7.5 bit times is 100 cycles. This implementation arrives a bit later at se0
; then specified in the include file but there is plenty of time

bitstuffN:
    eor     x1, x4          ;[8]
     f86:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[9]
     f88:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[10]
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <bitstuffN+0x6>
    out     USBOUT, x1      ;[12] <-- out
     f8c:	08 b9       	out	0x08, r16	; 8
    rjmp    didStuffN       ;[0]
     f8e:	19 c0       	rjmp	.+50     	; 0xfc2 <didStuffN>

00000f90 <bitstuff7>:
    
bitstuff7:
    eor     x1, x4          ;[6]
     f90:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[7] Carry is zero due to brcc
     f92:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[8] compensate for ror shift at branch destination
     f94:	22 1f       	adc	r18, r18
    nop2                    ;[9]
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <bitstuff7+0x8>
    rjmp    didStuff7       ;[11]
     f98:	1d c0       	rjmp	.+58     	; 0xfd4 <didStuff7>

00000f9a <sendNakAndReti>:

sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
     f9a:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <sendX3AndReti>

00000f9e <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     f9e:	32 ed       	ldi	r19, 0xD2	; 210

00000fa0 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
     fa0:	43 2f       	mov	r20, r19

00000fa2 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
     fa2:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
     fa4:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     fa6:	32 e0       	ldi	r19, 0x02	; 2

00000fa8 <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     fa8:	17 b1       	in	r17, 0x07	; 7
    ori     x2, USBMASK     ;[-11]
     faa:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     fac:	43 9a       	sbi	0x08, 3	; 8
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     fae:	08 b1       	in	r16, 0x08	; 8
    out     USBDDR, x2      ;[-7] <- acquire bus
     fb0:	17 b9       	out	0x07, r17	; 7
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     fb2:	5c e0       	ldi	r21, 0x0C	; 12
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     fb4:	20 e8       	ldi	r18, 0x80	; 128

00000fb6 <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x49    ;[-4]        [10] binary 01001001
     fb6:	69 e4       	ldi	r22, 0x49	; 73

00000fb8 <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [10]   [11]
     fb8:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [11]   [12]
     fba:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [12]   [13]   <-- out N
     fbc:	08 b9       	out	0x08, r16	; 8
    ror     shift           ;[0]  [13]   [14]
     fbe:	27 95       	ror	r18
    ror     x2              ;[1]
     fc0:	17 95       	ror	r17

00000fc2 <didStuffN>:
didStuffN:
    nop2                    ;[2]
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <didStuffN+0x2>
    nop                     ;[4]
     fc4:	00 00       	nop
    cpi     x2, 0xfc        ;[5]
     fc6:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[6]
     fc8:	f0 f6       	brcc	.-68     	; 0xf86 <bitstuffN>
    lsr     bitcnt          ;[7]
     fca:	66 95       	lsr	r22
    brcc    txBitLoop       ;[8]
     fcc:	a8 f7       	brcc	.-22     	; 0xfb8 <txBitLoop>
    brne    txBitLoop       ;[9]
     fce:	a1 f7       	brne	.-24     	; 0xfb8 <txBitLoop>

    sbrs    shift, 0        ;[10]
     fd0:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[11]
     fd2:	05 27       	eor	r16, r21

00000fd4 <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[-1] [13] <-- out 7
     fd4:	08 b9       	out	0x08, r16	; 8
    ror     shift           ;[0] [14]
     fd6:	27 95       	ror	r18
    ror     x2              ;[1]
     fd8:	17 95       	ror	r17
    nop                     ;[2]
     fda:	00 00       	nop
    cpi     x2, 0xfc        ;[3]
     fdc:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[4]
     fde:	c0 f6       	brcc	.-80     	; 0xf90 <bitstuff7>
    ld      shift, y+       ;[5]
     fe0:	29 91       	ld	r18, Y+
    dec     cnt             ;[7]
     fe2:	3a 95       	dec	r19
    brne    txByteLoop      ;[8]
     fe4:	41 f7       	brne	.-48     	; 0xfb6 <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[9] prepare SE0 [spec says EOP may be 25 to 30 cycles]
     fe6:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[10]
     fe8:	10 91 fa 07 	lds	r17, 0x07FA	; 0x8007fa <usbNewDeviceAddr>
    lsl     x2              ;[12] we compare with left shifted address
     fec:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[13] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
     fee:	08 b9       	out	0x08, r16	; 8
    subi    YL, 20 + 2      ;[0] Only assign address on data packets, not ACK/NAK in x3
     ff0:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[1]
     ff2:	d0 40       	sbci	r29, 0x00	; 0
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[2]
     ff4:	11 f0       	breq	.+4      	; 0xffa <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
     ff6:	10 93 f4 07 	sts	0x07F4, r17	; 0x8007f4 <usbDeviceAddr>

00000ffa <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
     ffa:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)   ;[5]
     ffc:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     ;[6]
     ffe:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR      ;[7]
    1000:	17 b1       	in	r17, 0x07	; 7
    cbr     x2, USBMASK     ;[8] set both pins to input
    1002:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1          ;[9]
    1004:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
    1006:	43 7f       	andi	r20, 0xF3	; 243
    ldi     x4, 5           ;[11]
    1008:	55 e0       	ldi	r21, 0x05	; 5

0000100a <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21] [24]
    100a:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22] [25]
    100c:	f1 f7       	brne	.-4      	; 0x100a <se0Delay>
    out     USBOUT, x1      ;[26] <-- out J (idle) -- end of SE0 (EOP signal)
    100e:	08 b9       	out	0x08, r16	; 8
    out     USBDDR, x2      ;[27] <-- release bus now
    1010:	17 b9       	out	0x07, r17	; 7
    out     USBOUT, x3      ;[28] <-- ensure no pull-up resistors are active
    1012:	48 b9       	out	0x08, r20	; 8
    rjmp    doReturn
    1014:	7b cf       	rjmp	.-266    	; 0xf0c <doReturn>

00001016 <memory_bl_readFlashPage>:

#ifdef RELEASE
__attribute__((section(".df4iah_bl_memory"), aligned(2)))
#endif
void memory_bl_readFlashPage(uint8_t target[], pagebuf_t size, uint32_t baddr)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	ec 01       	movw	r28, r24
	const uint32_t C_app_end = APP_END;
	uint16_t data;
	uint8_t idx = 0;
    101c:	80 e0       	ldi	r24, 0x00	; 0
#else
			data = pgm_read_word_near(baddr);
#endif
		}
		else {
			data = 0xFFFF; 									// fake empty, no access to the bootloader
    101e:	7f ef       	ldi	r23, 0xFF	; 255
{
	const uint32_t C_app_end = APP_END;
	uint16_t data;
	uint8_t idx = 0;

	while (size) {
    1020:	20 c0       	rjmp	.+64     	; 0x1062 <memory_bl_readFlashPage+0x4c>
#ifndef READ_PROTECT_BOOTLOADER
# warning "Bootloader not read-protected"
		if (true) {
#else
		// don't read bootloader
		if (baddr < C_app_end) {
    1022:	2f 3f       	cpi	r18, 0xFF	; 255
    1024:	97 e7       	ldi	r25, 0x77	; 119
    1026:	39 07       	cpc	r19, r25
    1028:	41 05       	cpc	r20, r1
    102a:	51 05       	cpc	r21, r1
    102c:	30 f4       	brcc	.+12     	; 0x103a <memory_bl_readFlashPage+0x24>
#if defined(RAMPZ)
			data = pgm_read_word_far(baddr);
#else
			data = pgm_read_word_near(baddr);
    102e:	f9 01       	movw	r30, r18
    1030:	a5 91       	lpm	r26, Z+
    1032:	b4 91       	lpm	r27, Z
    1034:	9a 2f       	mov	r25, r26
    1036:	ab 2f       	mov	r26, r27
    1038:	02 c0       	rjmp	.+4      	; 0x103e <memory_bl_readFlashPage+0x28>
#endif
		}
		else {
			data = 0xFFFF; 									// fake empty, no access to the bootloader
    103a:	97 2f       	mov	r25, r23
    103c:	a7 2f       	mov	r26, r23
		}
#endif
		target[idx++] = data & 0xff;						// store LSB
    103e:	fe 01       	movw	r30, r28
    1040:	e8 0f       	add	r30, r24
    1042:	f1 1d       	adc	r31, r1
    1044:	90 83       	st	Z, r25
		if (--size) {
    1046:	61 30       	cpi	r22, 0x01	; 1
    1048:	71 f0       	breq	.+28     	; 0x1066 <memory_bl_readFlashPage+0x50>
		}
		else {
			data = 0xFFFF; 									// fake empty, no access to the bootloader
		}
#endif
		target[idx++] = data & 0xff;						// store LSB
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	98 0f       	add	r25, r24
		if (--size) {
			target[idx++] = data >> 8;						// store MSB
    104e:	fe 01       	movw	r30, r28
    1050:	e9 0f       	add	r30, r25
    1052:	f1 1d       	adc	r31, r1
    1054:	a0 83       	st	Z, r26
			baddr += 2;										// select next word in memory
    1056:	2e 5f       	subi	r18, 0xFE	; 254
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
    105a:	4f 4f       	sbci	r20, 0xFF	; 255
    105c:	5f 4f       	sbci	r21, 0xFF	; 255
			--size;											// subtract two bytes from number of bytes to read
    105e:	62 50       	subi	r22, 0x02	; 2
			data = 0xFFFF; 									// fake empty, no access to the bootloader
		}
#endif
		target[idx++] = data & 0xff;						// store LSB
		if (--size) {
			target[idx++] = data >> 8;						// store MSB
    1060:	8e 5f       	subi	r24, 0xFE	; 254
{
	const uint32_t C_app_end = APP_END;
	uint16_t data;
	uint8_t idx = 0;

	while (size) {
    1062:	61 11       	cpse	r22, r1
    1064:	de cf       	rjmp	.-68     	; 0x1022 <memory_bl_readFlashPage+0xc>
			target[idx++] = data >> 8;						// store MSB
			baddr += 2;										// select next word in memory
			--size;											// subtract two bytes from number of bytes to read
		}
	}														// repeat until block has been read
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <anlgComp_fw_init>:


void anlgComp_fw_init()
{
	/* enable power for ADC, reference voltage and analog comparator */
	PRR &= ~(_BV(PRADC));
    106c:	e4 e6       	ldi	r30, 0x64	; 100
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8e 7f       	andi	r24, 0xFE	; 254
    1074:	80 83       	st	Z, r24

	/* init the ADC counter */
	acAdcConvertNowCntr = 0;
    1076:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <acAdcConvertNowCntr>

	/* disable digital input buffers on AIN0, AIN1, ADC0 and ADC1 */
	DIDR1 |= (0b11 << AIN0D);
    107a:	ef e7       	ldi	r30, 0x7F	; 127
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	83 60       	ori	r24, 0x03	; 3
    1082:	80 83       	st	Z, r24
	DIDR0  = (0b000011 << ADC0D);
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	/* enable comparator AIN1 pin */
	ADCSRB &= ~(_BV(ACME));									// disable Analog Comparator Multiplex Enable
    108a:	eb e7       	ldi	r30, 0x7B	; 123
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8f 7b       	andi	r24, 0xBF	; 191
    1092:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN) | (0b111 << ADPS0);					// AD enable, use 128/1 prescaler for ADC clock = 156250 Hz
    1094:	ea e7       	ldi	r30, 0x7A	; 122
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	87 68       	ori	r24, 0x87	; 135
    109c:	80 83       	st	Z, r24

	/* enable comparator AIN0 pin */
	ACSR  = (ACSR &  ~(_BV(ACBG) | _BV(ACD)	|	 		  	// disable bandgap reference voltage, switch off Analog Comparator Disable
    109e:	80 b7       	in	r24, 0x30	; 48
    10a0:	87 e1       	ldi	r24, 0x17	; 23
    10a2:	80 bf       	out	0x30, r24	; 48
			_BV(ACI)						|				// clear any pending interrupt
			(0b11 << ACIS0);								// disable ACIE for interrupt as long interrupt source is changed, interrupt on Rising Edge
	// ACSR |= _BV(ACIE);									// now set ACIE for interrupt (disabled --> done within Timer1)

	/* ADC reference set to AREF */
	acAdcConvertNowState = 0x11;							// set FSM address to "discard next conversion"
    10a4:	81 e1       	ldi	r24, 0x11	; 17
    10a6:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <acAdcConvertNowState>
	ADMUX = (0b01 << REFS0) | 0x1;							// keep ADLAR off, switch to channel ADC1 (phase input)
    10aa:	81 e4       	ldi	r24, 0x41	; 65
    10ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	/* start the initial conversion */
	ADCSRA |= _BV(ADSC) | _BV(ADIF);						// start first conversion of the conversion train and clear pending interrupt flag
    10b0:	80 81       	ld	r24, Z
    10b2:	80 65       	ori	r24, 0x50	; 80
    10b4:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);									// enable ADC interrupt
    10b6:	80 81       	ld	r24, Z
    10b8:	88 60       	ori	r24, 0x08	; 8
    10ba:	80 83       	st	Z, r24
    10bc:	08 95       	ret

000010be <anlgComp_fw_close>:
}

void anlgComp_fw_close()
{
	/* disable interrupt, disable analog comparator */
	ACSR = (ACSR & ~(_BV(ACIE))) | _BV(ACD);
    10be:	80 b7       	in	r24, 0x30	; 48
    10c0:	87 77       	andi	r24, 0x77	; 119
    10c2:	80 68       	ori	r24, 0x80	; 128
    10c4:	80 bf       	out	0x30, r24	; 48

	/* turn off ADC and Analog Comparator */
	ADCSRA = (0b111 << ADPS0);								// disable but keep the prescaler output at the lowest frequency
    10c6:	87 e0       	ldi	r24, 0x07	; 7
    10c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0;												// disable Analog Comparator Multiplex Enable
    10cc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

	/* turn off reference voltage at selection */
	ADMUX = 0;
    10d0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	/* disable power for ADC, reference voltage and analog comparator */
	PRR |= _BV(PRADC);
    10d4:	e4 e6       	ldi	r30, 0x64	; 100
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	81 60       	ori	r24, 0x01	; 1
    10dc:	80 83       	st	Z, r24
    10de:	08 95       	ret

000010e0 <anlgComp_fw_startAdcConvertion>:
#if 0
	set_sleep_mode(SLEEP_MODE_ADC);							// do not use SLEEP_MODE_ADC due to the fact that the timers are stopped
	sleep_enable();
	sleep_cpu();
#else
	ADCSRA |= _BV(ADSC);									// start conversion
    10e0:	ea e7       	ldi	r30, 0x7A	; 122
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 64       	ori	r24, 0x40	; 64
    10e8:	80 83       	st	Z, r24
    10ea:	08 95       	ret

000010ec <__vector_21>:
 *
 * = 19 clocks --> 0.95 µs until sei() is done
 */
//void anlgComp_fw_ISR_ADC() - __vector_21
ISR(ADC_vect, ISR_BLOCK)
{
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	2f 93       	push	r18
    10f8:	3f 93       	push	r19
    10fa:	4f 93       	push	r20
    10fc:	5f 93       	push	r21
    10fe:	6f 93       	push	r22
    1100:	7f 93       	push	r23
    1102:	8f 93       	push	r24
    1104:	9f 93       	push	r25
    1106:	af 93       	push	r26
    1108:	bf 93       	push	r27
    110a:	ef 93       	push	r30
    110c:	ff 93       	push	r31
	//sleep_disable();

	/* read the ADC value */
	uint8_t localADCL = ADCL;								// read LSB first
    110e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint8_t localADCH = ADCH;
    1112:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	sei();
    1116:	78 94       	sei

	uint16_t adVal  =  localADCL | (localADCH << 8);
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	92 2b       	or	r25, r18

	switch (acAdcConvertNowState)
    111c:	20 91 18 05 	lds	r18, 0x0518	; 0x800518 <acAdcConvertNowState>
    1120:	28 30       	cpi	r18, 0x08	; 8
    1122:	91 f1       	breq	.+100    	; 0x1188 <__vector_21+0x9c>
    1124:	28 f4       	brcc	.+10     	; 0x1130 <__vector_21+0x44>
    1126:	22 23       	and	r18, r18
    1128:	e1 f0       	breq	.+56     	; 0x1162 <__vector_21+0x76>
    112a:	21 30       	cpi	r18, 0x01	; 1
    112c:	41 f0       	breq	.+16     	; 0x113e <__vector_21+0x52>
    112e:	30 c0       	rjmp	.+96     	; 0x1190 <__vector_21+0xa4>
    1130:	21 31       	cpi	r18, 0x11	; 17
    1132:	b9 f1       	breq	.+110    	; 0x11a2 <__vector_21+0xb6>
    1134:	28 31       	cpi	r18, 0x18	; 24
    1136:	11 f1       	breq	.+68     	; 0x117c <__vector_21+0x90>
    1138:	20 31       	cpi	r18, 0x10	; 16
    113a:	51 f5       	brne	.+84     	; 0x1190 <__vector_21+0xa4>
    113c:	0d c0       	rjmp	.+26     	; 0x1158 <__vector_21+0x6c>
	{
	case 0x01:
		/* store PHASE value */
		acAdcCh[1] = adVal;
    113e:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <acAdcCh+0x3>
    1142:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <acAdcCh+0x2>

		/* switch to ADC input channel 0 - PWM analog value */
		acAdcConvertNowState = 0x10;
    1146:	80 e1       	ldi	r24, 0x10	; 16
    1148:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <acAdcConvertNowState>
		ADMUX = 0b01000000;  								// = (0b01 << REFS0) | ((ac_adc_convertNowCh & 0x07) << MUX0);
    114c:	80 e4       	ldi	r24, 0x40	; 64
    114e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1152:	0e 94 70 08 	call	0x10e0	; 0x10e0 <anlgComp_fw_startAdcConvertion>
		break;
    1156:	2d c0       	rjmp	.+90     	; 0x11b2 <__vector_21+0xc6>

	case 0x10:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x00;
    1158:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <acAdcConvertNowState>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    115c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <anlgComp_fw_startAdcConvertion>
		break;
    1160:	28 c0       	rjmp	.+80     	; 0x11b2 <__vector_21+0xc6>

	case 0x00:
		/* store PWM analog value */
		acAdcCh[0] = adVal;
    1162:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <acAdcCh+0x1>
    1166:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <acAdcCh>

		/* switch to ADC input channel for temperature */
		acAdcConvertNowState = 0x18;
    116a:	88 e1       	ldi	r24, 0x18	; 24
    116c:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <acAdcConvertNowState>

		/* switch over to temperature conversion */
		ADMUX = 0b11001000;  								// = (0b11 << REFS0) | (0x08 << MUX0);
    1170:	88 ec       	ldi	r24, 0xC8	; 200
    1172:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1176:	0e 94 70 08 	call	0x10e0	; 0x10e0 <anlgComp_fw_startAdcConvertion>
		break;
    117a:	1b c0       	rjmp	.+54     	; 0x11b2 <__vector_21+0xc6>

	case 0x18:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x08;
    117c:	88 e0       	ldi	r24, 0x08	; 8
    117e:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <acAdcConvertNowState>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1182:	0e 94 70 08 	call	0x10e0	; 0x10e0 <anlgComp_fw_startAdcConvertion>
		break;
    1186:	15 c0       	rjmp	.+42     	; 0x11b2 <__vector_21+0xc6>

	case 0x08:
		acAdcCh[2] = adVal;
    1188:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <acAdcCh+0x5>
    118c:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <acAdcCh+0x4>
		// no break
	default:
		/* switch to ADC input channel 1 - PHASE value */
		acAdcConvertNowState = 0x11;
    1190:	81 e1       	ldi	r24, 0x11	; 17
    1192:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <acAdcConvertNowState>
		ADMUX = 0b01000000 | 1;  							// = (0b01 << REFS0) | ((ac_adc_convertNowCh & 0x07) << MUX0);
    1196:	81 e4       	ldi	r24, 0x41	; 65
    1198:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    119c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <anlgComp_fw_startAdcConvertion>
		break;
    11a0:	08 c0       	rjmp	.+16     	; 0x11b2 <__vector_21+0xc6>

	case 0x11:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x01;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <acAdcConvertNowState>

		/* update ADC counter to inform about a new conversion train is ready to be read */
		acAdcConvertNowCntr++;
    11a8:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <acAdcConvertNowCntr>
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <acAdcConvertNowCntr>

		/* end of conversion train - no more ADSC. Woken up by the next rising edge of PPS in ISR(ANALOG_COMP_vect, ISR_BLOCK) */
		break;
	}
}
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <clkFastCtr_fw_init>:


void clkFastCtr_fw_init()
{
	/* power up this module */
	PRR &= ~(_BV(PRTIM1));
    11d4:	e4 e6       	ldi	r30, 0x64	; 100
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	87 7f       	andi	r24, 0xF7	; 247
    11dc:	80 83       	st	Z, r24

	/* clear the timer */
	TCNT1H = 0;												// write high byte first
    11de:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
    11e2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	/* set the timer top value for 20.000 clocks @ 20MHz --> 1ms */
	OCR1AH = (OCR1_TOP_VALUE >> 8);							// write high byte first
    11e6:	8e e4       	ldi	r24, 0x4E	; 78
    11e8:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = (OCR1_TOP_VALUE & 0xff);
    11ec:	8f e1       	ldi	r24, 0x1F	; 31
    11ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	/* set the timer-1 mode of operation: 0x4 = CTC, counting up, TOP := OCR1A [. . WGM01 WGM00] */
	TCCR1A = (0b00<<WGM10);
    11f2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	/* set the timer-1 mode of operation: 0x4 = CTC, counting up, TOP := OCR1A [WGM03 WGM02 . .] */
	/* no ICNC1 input filtering */
	/* ICES is set to trigger on the rising edge of the Comparator output --> rising edge of AIN0 */
	/* set the timer-1 clock source to 20 MHz XTAL */
	TCCR1B = _BV(ICES1)						|				// select rising edge of the ICP1/AIN0 input to trigger
    11f6:	89 e4       	ldi	r24, 0x49	; 73
    11f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			 (0b01<<WGM12)					|				// WGM03 WGM02
			 (0b001<<CS10);									// since now the timer runs

	/* ICF1 and OCF1A interrupt enable */
	TIMSK1 = _BV(ICIE1) 					|				// ICF1   - GPS PPS rising edge event
    11fc:	82 e2       	ldi	r24, 0x22	; 34
    11fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1202:	08 95       	ret

00001204 <clkFastCtr_fw_close>:
	PCICR  &= ~(PCIE2);
	PCMSK2 &= ~(PCINT20);
#endif

	/* switch off interrupts */
	TIMSK1 = 0;
    1204:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	/* switch clock source to halted */
	TCCR1B = 0;
    1208:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	/* no more power is needed for this module */
	PRR |= _BV(PRTIM1);
    120c:	e4 e6       	ldi	r30, 0x64	; 100
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	88 60       	ori	r24, 0x08	; 8
    1214:	80 83       	st	Z, r24
    1216:	08 95       	ret

00001218 <__vector_11>:
 *
 * = 54 clocks --> 2.70 µs until sei() is done
 */
//void clkFastCtr_fw_ISR_T1_CompA() - __vector_11
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    1218:	1f 92       	push	r1
    121a:	0f 92       	push	r0
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	0f 92       	push	r0
    1220:	11 24       	eor	r1, r1
    1222:	2f 93       	push	r18
    1224:	3f 93       	push	r19
    1226:	8f 93       	push	r24
    1228:	9f 93       	push	r25
    122a:	af 93       	push	r26
    122c:	bf 93       	push	r27
	/* this ISR is called every 20.000 clocks - repeating each ms again */

	/* the 32 bit timer overflows every 3 1/4 year */
	fastCtr1ms++;
    122e:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <fastCtr1ms>
    1232:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <fastCtr1ms+0x1>
    1236:	a0 91 26 05 	lds	r26, 0x0526	; 0x800526 <fastCtr1ms+0x2>
    123a:	b0 91 27 05 	lds	r27, 0x0527	; 0x800527 <fastCtr1ms+0x3>
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	a1 1d       	adc	r26, r1
    1242:	b1 1d       	adc	r27, r1
    1244:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <fastCtr1ms>
    1248:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <fastCtr1ms+0x1>
    124c:	a0 93 26 05 	sts	0x0526, r26	; 0x800526 <fastCtr1ms+0x2>
    1250:	b0 93 27 05 	sts	0x0527, r27	; 0x800527 <fastCtr1ms+0x3>

	sei();													// since here we can accept interruptions
    1254:	78 94       	sei

	if (main_bf.mainStackCheck) {
    1256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    125a:	86 ff       	sbrs	r24, 6
    125c:	11 c0       	rjmp	.+34     	; 0x1280 <__vector_11+0x68>
		cli();
    125e:	f8 94       	cli
		uint8_t localStackLo = SPL;
    1260:	8d b7       	in	r24, 0x3d	; 61
		uint8_t localStackHi = SPH;
    1262:	2e b7       	in	r18, 0x3e	; 62
		sei();
    1264:	78 94       	sei

		uint16_t localStackAddr = (localStackHi << 8) | localStackLo;
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	92 2b       	or	r25, r18
		if (mainSCStackAddr > localStackAddr) {
    126a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <mainSCStackAddr>
    126e:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <mainSCStackAddr+0x1>
    1272:	82 17       	cp	r24, r18
    1274:	93 07       	cpc	r25, r19
    1276:	20 f4       	brcc	.+8      	; 0x1280 <__vector_11+0x68>
			mainSCStackAddr = localStackAddr;
    1278:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <mainSCStackAddr+0x1>
    127c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <mainSCStackAddr>
		}
	}
}
    1280:	bf 91       	pop	r27
    1282:	af 91       	pop	r26
    1284:	9f 91       	pop	r25
    1286:	8f 91       	pop	r24
    1288:	3f 91       	pop	r19
    128a:	2f 91       	pop	r18
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	0f 90       	pop	r0
    1292:	1f 90       	pop	r1
    1294:	18 95       	reti

00001296 <__vector_10>:
 *
 * = 39 clocks --> 1.95 µs until sei() is done
 */
//void clkFastCtr_fw_ISR_T1_Capt() - __vector_10
ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	2f 93       	push	r18
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	ef 93       	push	r30
    12b0:	ff 93       	push	r31
	/* rising edge of the PPS signal from df4iah_fw_anlgComp.c detected */

	/* take the current timestamp of the free floating 20 MHz timer */
	register uint8_t  localICR1L = ICR1L;					// capture timer value - low byte first
    12b2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	register uint8_t  localICR1H = ICR1H;
    12b6:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
	register uint32_t localFastCtr1ms = fastCtr1ms;
    12ba:	40 91 24 05 	lds	r20, 0x0524	; 0x800524 <fastCtr1ms>
    12be:	50 91 25 05 	lds	r21, 0x0525	; 0x800525 <fastCtr1ms+0x1>
    12c2:	60 91 26 05 	lds	r22, 0x0526	; 0x800526 <fastCtr1ms+0x2>
    12c6:	70 91 27 05 	lds	r23, 0x0527	; 0x800527 <fastCtr1ms+0x3>

	sei();
    12ca:	78 94       	sei

	//anlgComp_fw_startAdcConvertion();
	ADCSRA |= _BV(ADSC);									// start conversion
    12cc:	ea e7       	ldi	r30, 0x7A	; 122
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	90 81       	ld	r25, Z
    12d2:	90 64       	ori	r25, 0x40	; 64
    12d4:	90 83       	st	Z, r25

	cli();
    12d6:	f8 94       	cli
	fastStampTCNT1  = localICR1L | (localICR1H << 8);
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	92 2b       	or	r25, r18
    12dc:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <fastStampTCNT1+0x1>
    12e0:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <fastStampTCNT1>
	fastStampCtr1ms = localFastCtr1ms;
    12e4:	40 93 28 05 	sts	0x0528, r20	; 0x800528 <fastStampCtr1ms>
    12e8:	50 93 29 05 	sts	0x0529, r21	; 0x800529 <fastStampCtr1ms+0x1>
    12ec:	60 93 2a 05 	sts	0x052A, r22	; 0x80052a <fastStampCtr1ms+0x2>
    12f0:	70 93 2b 05 	sts	0x052B, r23	; 0x80052b <fastStampCtr1ms+0x3>
	sei();
    12f4:	78 94       	sei
}
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	9f 91       	pop	r25
    12fc:	8f 91       	pop	r24
    12fe:	7f 91       	pop	r23
    1300:	6f 91       	pop	r22
    1302:	5f 91       	pop	r21
    1304:	4f 91       	pop	r20
    1306:	2f 91       	pop	r18
    1308:	0f 90       	pop	r0
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	0f 90       	pop	r0
    130e:	1f 90       	pop	r1
    1310:	18 95       	reti

00001312 <clkPullPwm_fw_init>:


void clkPullPwm_fw_init()
{
	// power up this module
	PRR &= ~(_BV(PRTIM0));
    1312:	e4 e6       	ldi	r30, 0x64	; 100
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8f 7d       	andi	r24, 0xDF	; 223
    131a:	80 83       	st	Z, r24

	// set the timer-0 counter to zero.
	TCNT0 = 0x00;
    131c:	16 bc       	out	0x26, r1	; 38

	// set the timer-0 PWM-B compare register
	OCR0B = DEFAULT_PWM_COUNT;
    131e:	8a e5       	ldi	r24, 0x5A	; 90
    1320:	88 bd       	out	0x28, r24	; 40

	// set the timer-0 mode of operation: 0x3 = Fast PWM, counting up, TOP := MAX [. . WGM01 WGM00]
	// set the timer-0 compare-B waveform generator to: PWM, 1 at >= match, 0 else
	TCCR0A = (0b10<<COM0B0) | (0b11<<WGM00);
    1322:	83 e2       	ldi	r24, 0x23	; 35
    1324:	84 bd       	out	0x24, r24	; 36

	// set the timer-0 mode of operation: 0x3 = Fast PWM, counting up, TOP := MAX [WGM02 . .]
	// set the timer-0 clock source to 20 MHz XTAL.
	TCCR0B = (0b0<<WGM02) | (0b001<<CS00);
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	85 bd       	out	0x25, r24	; 37

	// set the timer-0 PWM-B compare output: setting data port for output
	DDR_OC0B_REG |= _BV(DDR_OC0B);
    132a:	55 9a       	sbi	0x0a, 5	; 10


	/* single memory access */
	if (memory_fw_isEepromBlockValid(BLOCK_REFOSC_NR)) {
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <memory_fw_isEepromBlockValid>
    1332:	88 23       	and	r24, r24
    1334:	c9 f0       	breq	.+50     	; 0x1368 <clkPullPwm_fw_init+0x56>
		memory_fw_readEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial));
    1336:	4a e5       	ldi	r20, 0x5A	; 90
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	8f e2       	ldi	r24, 0x2F	; 47
    133e:	95 e0       	ldi	r25, 0x05	; 5
    1340:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <memory_fw_readEEpromPage>
		memory_fw_readEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial_sub, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial_sub));
    1344:	4b e5       	ldi	r20, 0x5B	; 91
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	8e e2       	ldi	r24, 0x2E	; 46
    134c:	95 e0       	ldi	r25, 0x05	; 5
    134e:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <memory_fw_readEEpromPage>

		uint8_t sreg = SREG;
    1352:	8f b7       	in	r24, 0x3f	; 63
		cli();
    1354:	f8 94       	cli
		fastPwmLoopVal		= pullCoef_b02_pwm_initial;
    1356:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <pullCoef_b02_pwm_initial>
    135a:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <fastPwmLoopVal>
		fastPwmSubLoopVal	= pullCoef_b02_pwm_initial_sub;
    135e:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <pullCoef_b02_pwm_initial_sub>
    1362:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <fastPwmSubLoopVal>
		SREG = sreg;
    1366:	8f bf       	out	0x3f, r24	; 63
	}

	/* init interrupt */
	TIFR0  |= _BV(TOV0);
    1368:	a8 9a       	sbi	0x15, 0	; 21
	TIMSK0 |= _BV(TOIE0);
    136a:	ee e6       	ldi	r30, 0x6E	; 110
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	81 60       	ori	r24, 0x01	; 1
    1372:	80 83       	st	Z, r24
    1374:	08 95       	ret

00001376 <clkPullPwm_fw_close>:
}

void clkPullPwm_fw_close()
{
	/* disable interrupts */
	TIMSK0 = 0;
    1376:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

	// reset timer-0 PWM-B compare output port
	DDR_OC0B_REG &= ~(_BV(DDR_OC0B));
    137a:	55 98       	cbi	0x0a, 5	; 10

	// stop timer-0
	TCCR0B = (0b00<<WGM02)  | (0b000<<CS00);
    137c:	15 bc       	out	0x25, r1	; 37

	// stop timer-0 compare output
	TCCR0A = (0b00<<COM0B0) | (0b00<<WGM00);
    137e:	14 bc       	out	0x24, r1	; 36

	// set the timer-0 compare-B value to zero.
	OCR0B = 0x00;
    1380:	18 bc       	out	0x28, r1	; 40

	// set the timer-0 counter to zero.
	TCNT0 = 0x00;
    1382:	16 bc       	out	0x26, r1	; 38

	// no more power is needed for this module
	PRR |= _BV(PRTIM0);
    1384:	e4 e6       	ldi	r30, 0x64	; 100
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	80 62       	ori	r24, 0x20	; 32
    138c:	80 83       	st	Z, r24
    138e:	08 95       	ret

00001390 <__vector_16>:
 *
 * = 13 clocks --> 0.65 µs until sei() is done
 */
//void clkPullPwm_fw_ISR_T0_OVF() - __vector_16
ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    1390:	1f 92       	push	r1
    1392:	0f 92       	push	r0
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	0f 92       	push	r0
    1398:	11 24       	eor	r1, r1
    139a:	8f 93       	push	r24
    139c:	9f 93       	push	r25
	sei();
    139e:	78 94       	sei

	/* minimal Sub-PWM value for its FAST_PWM_SUB_BITCNT */
	const uint8_t localSubPwmInc = (1 << (8 - FAST_PWM_SUB_BITCNT));

	if (fastPwmSingleLoad) {
    13a0:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <fastPwmSingleLoad>
    13a4:	88 23       	and	r24, r24
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <__vector_16+0x30>
		cli();
    13a8:	f8 94       	cli
		OCR0B			= fastPwmSingleVal;
    13aa:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <fastPwmSingleVal>
    13ae:	88 bd       	out	0x28, r24	; 40
		fastPwmSubCmp	= fastPwmSubSingleVal;
    13b0:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <fastPwmSubSingleVal>
    13b4:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <fastPwmSubCmp>
		sei();
    13b8:	78 94       	sei

		/* single value loaded */
		fastPwmSingleLoad = 0;
    13ba:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <fastPwmSingleLoad>
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <__vector_16+0x42>

	} else {
		/* set the T0 compare B register with the current setting of the integer PWM value */
		cli();
    13c0:	f8 94       	cli
		OCR0B			= fastPwmLoopVal;
    13c2:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <fastPwmLoopVal>
    13c6:	88 bd       	out	0x28, r24	; 40
		fastPwmSubCmp	= fastPwmSubLoopVal;
    13c8:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <fastPwmSubLoopVal>
    13cc:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <fastPwmSubCmp>
		sei();
    13d0:	78 94       	sei
	}

	/* increment if counter is lower than the sub-compare value to get a Sub-PWM (fractional part) */
	cli();
    13d2:	f8 94       	cli
	if (fastPwmSubCnt < fastPwmSubCmp) {
    13d4:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <fastPwmSubCnt>
    13d8:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <fastPwmSubCmp>
    13dc:	98 17       	cp	r25, r24
    13de:	18 f4       	brcc	.+6      	; 0x13e6 <__vector_16+0x56>
		OCR0B++;
    13e0:	88 b5       	in	r24, 0x28	; 40
    13e2:	8f 5f       	subi	r24, 0xFF	; 255
    13e4:	88 bd       	out	0x28, r24	; 40
	}
	sei();
    13e6:	78 94       	sei

	/* sub-counter increment */
	fastPwmSubCnt += localSubPwmInc;						// overflowing is intended
    13e8:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <fastPwmSubCnt>
    13ec:	8f 5f       	subi	r24, 0xFF	; 255
    13ee:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <fastPwmSubCnt>
}
    13f2:	9f 91       	pop	r25
    13f4:	8f 91       	pop	r24
    13f6:	0f 90       	pop	r0
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	0f 90       	pop	r0
    13fc:	1f 90       	pop	r1
    13fe:	18 95       	reti

00001400 <recalcEepromCrc>:

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
}
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	00 d0       	rcall	.+0      	; 0x140c <recalcEepromCrc+0xc>
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	18 2f       	mov	r17, r24
    1412:	7b 01       	movw	r14, r22
    1414:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <memory_fw_getSealMarker>
    1418:	9a 83       	std	Y+2, r25	; 0x02
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	a7 01       	movw	r20, r14
    141e:	62 e0       	ldi	r22, 0x02	; 2
    1420:	ce 01       	movw	r24, r28
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <memory_fw_writeEEpromPage>
    1428:	81 2f       	mov	r24, r17
    142a:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <memory_fw_checkAndInitBlock>
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	08 95       	ret

0000143e <__vector_6>:
    143e:	18 95       	reti

00001440 <main_fw_calcTimerAdj>:

float main_fw_calcTimerAdj(float pwmAdjust, uint8_t* intVal, uint8_t* intSubVal)
{
    1440:	4f 92       	push	r4
    1442:	5f 92       	push	r5
    1444:	6f 92       	push	r6
    1446:	7f 92       	push	r7
    1448:	8f 92       	push	r8
    144a:	9f 92       	push	r9
    144c:	af 92       	push	r10
    144e:	bf 92       	push	r11
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	4b 01       	movw	r8, r22
    1462:	5c 01       	movw	r10, r24
    1464:	7a 01       	movw	r14, r20
    1466:	69 01       	movw	r12, r18
}

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    1468:	fa 01       	movw	r30, r20
    146a:	60 81       	ld	r22, Z
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    1476:	2b 01       	movw	r4, r22
    1478:	3c 01       	movw	r6, r24
    147a:	f6 01       	movw	r30, r12
    147c:	60 81       	ld	r22, Z
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5b e3       	ldi	r21, 0x3B	; 59
    1490:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    1494:	9b 01       	movw	r18, r22
    1496:	ac 01       	movw	r20, r24
    1498:	c3 01       	movw	r24, r6
    149a:	b2 01       	movw	r22, r4
    149c:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    14a0:	9b 01       	movw	r18, r22
    14a2:	ac 01       	movw	r20, r24
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
	const float maxLimit = 255.0f - (1.0f / (1 << FAST_PWM_SUB_BITCNT));	// NOT 256.0f due to the compare unit that catches not around the overflow value

	/* add the time offset to the current PWM settings */
	fltTime += pwmAdjust;
    14a4:	c5 01       	movw	r24, r10
    14a6:	b4 01       	movw	r22, r8
    14a8:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    14ac:	06 2f       	mov	r16, r22
    14ae:	d7 2f       	mov	r29, r23
    14b0:	c8 2f       	mov	r28, r24
    14b2:	19 2f       	mov	r17, r25

	/* windowing the next value into the 8-Bit range */
	if (fltTime < 0.0f) {
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	a9 01       	movw	r20, r18
    14ba:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__cmpsf2>
    14be:	88 23       	and	r24, r24
    14c0:	fc f0       	brlt	.+62     	; 0x1500 <main_fw_calcTimerAdj+0xc0>
		residue = fltTime;
		fltTime = 0.0f;

	} else if (fltTime > maxLimit) {
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	3f ef       	ldi	r19, 0xFF	; 255
    14c6:	4e e7       	ldi	r20, 0x7E	; 126
    14c8:	53 e4       	ldi	r21, 0x43	; 67
    14ca:	60 2f       	mov	r22, r16
    14cc:	7d 2f       	mov	r23, r29
    14ce:	8c 2f       	mov	r24, r28
    14d0:	91 2f       	mov	r25, r17
    14d2:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__gesf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	e4 f4       	brge	.+56     	; 0x1512 <main_fw_calcTimerAdj+0xd2>
		residue = fltTime - maxLimit;
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	3f ef       	ldi	r19, 0xFF	; 255
    14de:	4e e7       	ldi	r20, 0x7E	; 126
    14e0:	53 e4       	ldi	r21, 0x43	; 67
    14e2:	60 2f       	mov	r22, r16
    14e4:	7d 2f       	mov	r23, r29
    14e6:	8c 2f       	mov	r24, r28
    14e8:	91 2f       	mov	r25, r17
    14ea:	0e 94 10 2b 	call	0x5620	; 0x5620 <__subsf3>
    14ee:	96 2e       	mov	r9, r22
    14f0:	a7 2e       	mov	r10, r23
    14f2:	b8 2e       	mov	r11, r24
    14f4:	89 2e       	mov	r8, r25
		fltTime = maxLimit;
    14f6:	00 e0       	ldi	r16, 0x00	; 0
    14f8:	df ef       	ldi	r29, 0xFF	; 255
    14fa:	ce e7       	ldi	r28, 0x7E	; 126
    14fc:	13 e4       	ldi	r17, 0x43	; 67
    14fe:	0d c0       	rjmp	.+26     	; 0x151a <main_fw_calcTimerAdj+0xda>
	/* add the time offset to the current PWM settings */
	fltTime += pwmAdjust;

	/* windowing the next value into the 8-Bit range */
	if (fltTime < 0.0f) {
		residue = fltTime;
    1500:	90 2e       	mov	r9, r16
    1502:	ad 2e       	mov	r10, r29
    1504:	bc 2e       	mov	r11, r28
    1506:	81 2e       	mov	r8, r17
		fltTime = 0.0f;
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	d0 e0       	ldi	r29, 0x00	; 0
    150c:	c0 e0       	ldi	r28, 0x00	; 0
    150e:	10 e0       	ldi	r17, 0x00	; 0
    1510:	04 c0       	rjmp	.+8      	; 0x151a <main_fw_calcTimerAdj+0xda>
}

float main_fw_calcTimerAdj(float pwmAdjust, uint8_t* intVal, uint8_t* intSubVal)
{
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
    1512:	91 2c       	mov	r9, r1
    1514:	a1 2c       	mov	r10, r1
    1516:	b1 2c       	mov	r11, r1
    1518:	81 2c       	mov	r8, r1
		residue = fltTime - maxLimit;
		fltTime = maxLimit;
	}

	/* add rounding value */
	fltTime += 1.0f / 512.0f;
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e0       	ldi	r20, 0x00	; 0
    1520:	5b e3       	ldi	r21, 0x3B	; 59
    1522:	60 2f       	mov	r22, r16
    1524:	7d 2f       	mov	r23, r29
    1526:	8c 2f       	mov	r24, r28
    1528:	91 2f       	mov	r25, r17
    152a:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    152e:	2b 01       	movw	r4, r22
    1530:	3c 01       	movw	r6, r24

	/* break up into integer and fractional parts */
	*intVal		= (uint8_t) fltTime;
    1532:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <__fixunssfsi>
    1536:	f7 01       	movw	r30, r14
    1538:	60 83       	st	Z, r22
	*intSubVal	= (uint8_t) ((fltTime - floorf(fltTime)) * 256.0f);
    153a:	c3 01       	movw	r24, r6
    153c:	b2 01       	movw	r22, r4
    153e:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <floor>
    1542:	9b 01       	movw	r18, r22
    1544:	ac 01       	movw	r20, r24
    1546:	c3 01       	movw	r24, r6
    1548:	b2 01       	movw	r22, r4
    154a:	0e 94 10 2b 	call	0x5620	; 0x5620 <__subsf3>
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	53 e4       	ldi	r21, 0x43	; 67
    1556:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    155a:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <__fixunssfsi>
    155e:	f6 01       	movw	r30, r12
    1560:	60 83       	st	Z, r22
	return residue;
}
    1562:	69 2d       	mov	r22, r9
    1564:	7a 2d       	mov	r23, r10
    1566:	8b 2d       	mov	r24, r11
    1568:	98 2d       	mov	r25, r8
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	bf 90       	pop	r11
    157c:	af 90       	pop	r10
    157e:	9f 90       	pop	r9
    1580:	8f 90       	pop	r8
    1582:	7f 90       	pop	r7
    1584:	6f 90       	pop	r6
    1586:	5f 90       	pop	r5
    1588:	4f 90       	pop	r4
    158a:	08 95       	ret

0000158c <calcPhaseResidue>:
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
	}
}

static void calcPhaseResidue()
{
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	00 d0       	rcall	.+0      	; 0x1594 <calcPhaseResidue+0x8>
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	uint8_t localFastPwmSingleLoad;
	uint8_t localFastPwmSingleVal;
	uint8_t localFastPwmSubSingleVal;

	uint8_t sreg = SREG;
    1598:	8f b7       	in	r24, 0x3f	; 63
	cli();
    159a:	f8 94       	cli
	localFastPwmSingleLoad = fastPwmSingleLoad;
    159c:	10 91 21 05 	lds	r17, 0x0521	; 0x800521 <fastPwmSingleLoad>
	SREG = sreg;
    15a0:	8f bf       	out	0x3f, r24	; 63

	if (fastPwmSingleDiffSum && (!localFastPwmSingleLoad)) {  // enter only if an offset is accumulated and the last phase correction is loaded
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	60 91 19 05 	lds	r22, 0x0519	; 0x800519 <fastPwmSingleDiffSum>
    15ac:	70 91 1a 05 	lds	r23, 0x051A	; 0x80051a <fastPwmSingleDiffSum+0x1>
    15b0:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <fastPwmSingleDiffSum+0x2>
    15b4:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <fastPwmSingleDiffSum+0x3>
    15b8:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__cmpsf2>
    15bc:	88 23       	and	r24, r24
    15be:	79 f1       	breq	.+94     	; 0x161e <calcPhaseResidue+0x92>
    15c0:	11 11       	cpse	r17, r1
    15c2:	2d c0       	rjmp	.+90     	; 0x161e <calcPhaseResidue+0x92>
		/* set PWM corrected impulse for one PWM cycle - no frequency corrections done */
		sreg = SREG;
    15c4:	8f b7       	in	r24, 0x3f	; 63
		cli();
    15c6:	f8 94       	cli
		localFastPwmSingleVal		= fastPwmLoopVal;		// make a copy from the current loop settings
    15c8:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <fastPwmLoopVal>
    15cc:	99 83       	std	Y+1, r25	; 0x01
		localFastPwmSubSingleVal	= fastPwmSubLoopVal;
    15ce:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <fastPwmSubLoopVal>
    15d2:	9a 83       	std	Y+2, r25	; 0x02
		SREG = sreg;
    15d4:	8f bf       	out	0x3f, r24	; 63

		/* calculation with saturation and residue */
		fastPwmSingleDiffSum = main_fw_calcTimerAdj(fastPwmSingleDiffSum, &localFastPwmSingleVal, &localFastPwmSubSingleVal);
    15d6:	60 91 19 05 	lds	r22, 0x0519	; 0x800519 <fastPwmSingleDiffSum>
    15da:	70 91 1a 05 	lds	r23, 0x051A	; 0x80051a <fastPwmSingleDiffSum+0x1>
    15de:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <fastPwmSingleDiffSum+0x2>
    15e2:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <fastPwmSingleDiffSum+0x3>
    15e6:	9e 01       	movw	r18, r28
    15e8:	2e 5f       	subi	r18, 0xFE	; 254
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	ae 01       	movw	r20, r28
    15ee:	4f 5f       	subi	r20, 0xFF	; 255
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255
    15f2:	0e 94 20 0a 	call	0x1440	; 0x1440 <main_fw_calcTimerAdj>
    15f6:	60 93 19 05 	sts	0x0519, r22	; 0x800519 <fastPwmSingleDiffSum>
    15fa:	70 93 1a 05 	sts	0x051A, r23	; 0x80051a <fastPwmSingleDiffSum+0x1>
    15fe:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <fastPwmSingleDiffSum+0x2>
    1602:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <fastPwmSingleDiffSum+0x3>

		/* single phase correction */
		sreg = SREG;
    1606:	8f b7       	in	r24, 0x3f	; 63
		cli();
    1608:	f8 94       	cli
		fastPwmSingleVal	= localFastPwmSingleVal;
    160a:	99 81       	ldd	r25, Y+1	; 0x01
    160c:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <fastPwmSingleVal>
		fastPwmSubSingleVal	= localFastPwmSubSingleVal;
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <fastPwmSubSingleVal>
		fastPwmSingleLoad	= true;
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <fastPwmSingleLoad>
		SREG = sreg;
    161c:	8f bf       	out	0x3f, r24	; 63
	}
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	08 95       	ret

0000162a <main_fw_strncmp>:

int main_fw_strncmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	8c 01       	movw	r16, r24
    1634:	ea 01       	movw	r28, r20
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
    1636:	9a 01       	movw	r18, r20
    1638:	ab 01       	movw	r20, r22
    163a:	6d e7       	ldi	r22, 0x7D	; 125
    163c:	73 e0       	ldi	r23, 0x03	; 3
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
	return strncmp((const char*) msg, (const char*) mainFormatBuffer, size);
    1644:	ae 01       	movw	r20, r28
    1646:	6d e7       	ldi	r22, 0x7D	; 125
    1648:	73 e0       	ldi	r23, 0x03	; 3
    164a:	c8 01       	movw	r24, r16
    164c:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <strncmp>
}
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	08 95       	ret

0000165a <main_fw_memcmp>:

int main_fw_memcmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	8c 01       	movw	r16, r24
    1664:	ea 01       	movw	r28, r20
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
    1666:	9a 01       	movw	r18, r20
    1668:	ab 01       	movw	r20, r22
    166a:	6d e7       	ldi	r22, 0x7D	; 125
    166c:	73 e0       	ldi	r23, 0x03	; 3
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
	return memcmp((const char*) msg, (const char*) mainFormatBuffer, size);
    1674:	ae 01       	movw	r20, r28
    1676:	6d e7       	ldi	r22, 0x7D	; 125
    1678:	73 e0       	ldi	r23, 0x03	; 3
    167a:	c8 01       	movw	r24, r16
    167c:	0e 94 77 2f 	call	0x5eee	; 0x5eee <memcmp>
}
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	08 95       	ret

0000168a <main_fw_nmeaUtcPlusOneSec>:

void main_fw_nmeaUtcPlusOneSec() {
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
	++main_nmeaTimeUtcInt;
    1692:	c0 90 42 05 	lds	r12, 0x0542	; 0x800542 <main_nmeaTimeUtcInt>
    1696:	d0 90 43 05 	lds	r13, 0x0543	; 0x800543 <main_nmeaTimeUtcInt+0x1>
    169a:	e0 90 44 05 	lds	r14, 0x0544	; 0x800544 <main_nmeaTimeUtcInt+0x2>
    169e:	f0 90 45 05 	lds	r15, 0x0545	; 0x800545 <main_nmeaTimeUtcInt+0x3>
    16a2:	2f ef       	ldi	r18, 0xFF	; 255
    16a4:	c2 1a       	sub	r12, r18
    16a6:	d2 0a       	sbc	r13, r18
    16a8:	e2 0a       	sbc	r14, r18
    16aa:	f2 0a       	sbc	r15, r18

	if ((main_nmeaTimeUtcInt % 100) > 59) {
    16ac:	c7 01       	movw	r24, r14
    16ae:	b6 01       	movw	r22, r12
    16b0:	24 e6       	ldi	r18, 0x64	; 100
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divmodsi4>
    16bc:	6c 33       	cpi	r22, 0x3C	; 60
    16be:	71 05       	cpc	r23, r1
    16c0:	81 05       	cpc	r24, r1
    16c2:	91 05       	cpc	r25, r1
    16c4:	4c f4       	brge	.+18     	; 0x16d8 <main_fw_nmeaUtcPlusOneSec+0x4e>
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
	return memcmp((const char*) msg, (const char*) mainFormatBuffer, size);
}

void main_fw_nmeaUtcPlusOneSec() {
	++main_nmeaTimeUtcInt;
    16c6:	c0 92 42 05 	sts	0x0542, r12	; 0x800542 <main_nmeaTimeUtcInt>
    16ca:	d0 92 43 05 	sts	0x0543, r13	; 0x800543 <main_nmeaTimeUtcInt+0x1>
    16ce:	e0 92 44 05 	sts	0x0544, r14	; 0x800544 <main_nmeaTimeUtcInt+0x2>
    16d2:	f0 92 45 05 	sts	0x0545, r15	; 0x800545 <main_nmeaTimeUtcInt+0x3>
    16d6:	11 c0       	rjmp	.+34     	; 0x16fa <main_fw_nmeaUtcPlusOneSec+0x70>

	if ((main_nmeaTimeUtcInt % 100) > 59) {
		main_nmeaTimeUtcInt -= main_nmeaTimeUtcInt % 100;
    16d8:	c6 1a       	sub	r12, r22
    16da:	d7 0a       	sbc	r13, r23
    16dc:	e8 0a       	sbc	r14, r24
    16de:	f9 0a       	sbc	r15, r25
		main_nmeaTimeUtcInt += 100;
    16e0:	84 e6       	ldi	r24, 0x64	; 100
    16e2:	c8 0e       	add	r12, r24
    16e4:	d1 1c       	adc	r13, r1
    16e6:	e1 1c       	adc	r14, r1
    16e8:	f1 1c       	adc	r15, r1
    16ea:	c0 92 42 05 	sts	0x0542, r12	; 0x800542 <main_nmeaTimeUtcInt>
    16ee:	d0 92 43 05 	sts	0x0543, r13	; 0x800543 <main_nmeaTimeUtcInt+0x1>
    16f2:	e0 92 44 05 	sts	0x0544, r14	; 0x800544 <main_nmeaTimeUtcInt+0x2>
    16f6:	f0 92 45 05 	sts	0x0545, r15	; 0x800545 <main_nmeaTimeUtcInt+0x3>
	}

	if ((main_nmeaTimeUtcInt % 10000) > 5959) {
    16fa:	c0 90 42 05 	lds	r12, 0x0542	; 0x800542 <main_nmeaTimeUtcInt>
    16fe:	d0 90 43 05 	lds	r13, 0x0543	; 0x800543 <main_nmeaTimeUtcInt+0x1>
    1702:	e0 90 44 05 	lds	r14, 0x0544	; 0x800544 <main_nmeaTimeUtcInt+0x2>
    1706:	f0 90 45 05 	lds	r15, 0x0545	; 0x800545 <main_nmeaTimeUtcInt+0x3>
    170a:	c7 01       	movw	r24, r14
    170c:	b6 01       	movw	r22, r12
    170e:	20 e1       	ldi	r18, 0x10	; 16
    1710:	37 e2       	ldi	r19, 0x27	; 39
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divmodsi4>
    171a:	68 34       	cpi	r22, 0x48	; 72
    171c:	27 e1       	ldi	r18, 0x17	; 23
    171e:	72 07       	cpc	r23, r18
    1720:	81 05       	cpc	r24, r1
    1722:	91 05       	cpc	r25, r1
    1724:	94 f0       	brlt	.+36     	; 0x174a <main_fw_nmeaUtcPlusOneSec+0xc0>
		main_nmeaTimeUtcInt -= (main_nmeaTimeUtcInt % 10000)  /* - (main_nmeaTimeUtcSec % 100) */ ;  // with +1 this can be cut out
    1726:	c6 1a       	sub	r12, r22
    1728:	d7 0a       	sbc	r13, r23
    172a:	e8 0a       	sbc	r14, r24
    172c:	f9 0a       	sbc	r15, r25
		main_nmeaTimeUtcInt +=  10000;
    172e:	80 e1       	ldi	r24, 0x10	; 16
    1730:	c8 0e       	add	r12, r24
    1732:	87 e2       	ldi	r24, 0x27	; 39
    1734:	d8 1e       	adc	r13, r24
    1736:	e1 1c       	adc	r14, r1
    1738:	f1 1c       	adc	r15, r1
    173a:	c0 92 42 05 	sts	0x0542, r12	; 0x800542 <main_nmeaTimeUtcInt>
    173e:	d0 92 43 05 	sts	0x0543, r13	; 0x800543 <main_nmeaTimeUtcInt+0x1>
    1742:	e0 92 44 05 	sts	0x0544, r14	; 0x800544 <main_nmeaTimeUtcInt+0x2>
    1746:	f0 92 45 05 	sts	0x0545, r15	; 0x800545 <main_nmeaTimeUtcInt+0x3>
	}
}
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	cf 90       	pop	r12
    1752:	08 95       	ret

00001754 <main_fw_parseNmeaLineData>:

void main_fw_parseNmeaLineData() {
    1754:	8f 92       	push	r8
    1756:	9f 92       	push	r9
    1758:	af 92       	push	r10
    175a:	bf 92       	push	r11
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG01, sizeof(PM_PARSE_NMEA_MSG01));
    176c:	2d e3       	ldi	r18, 0x3D	; 61
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e8       	ldi	r20, 0x80	; 128
    1772:	51 e0       	ldi	r21, 0x01	; 1
    1774:	6d e7       	ldi	r22, 0x7D	; 125
    1776:	73 e0       	ldi	r23, 0x03	; 3
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
	int len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    177e:	80 e3       	ldi	r24, 0x30	; 48
    1780:	95 e0       	ldi	r25, 0x05	; 5
    1782:	9f 93       	push	r25
    1784:	8f 93       	push	r24
    1786:	82 e3       	ldi	r24, 0x32	; 50
    1788:	95 e0       	ldi	r25, 0x05	; 5
    178a:	9f 93       	push	r25
    178c:	8f 93       	push	r24
    178e:	8e e4       	ldi	r24, 0x4E	; 78
    1790:	95 e0       	ldi	r25, 0x05	; 5
    1792:	9f 93       	push	r25
    1794:	8f 93       	push	r24
    1796:	86 e5       	ldi	r24, 0x56	; 86
    1798:	95 e0       	ldi	r25, 0x05	; 5
    179a:	9f 93       	push	r25
    179c:	8f 93       	push	r24
    179e:	8c e5       	ldi	r24, 0x5C	; 92
    17a0:	95 e0       	ldi	r25, 0x05	; 5
    17a2:	9f 93       	push	r25
    17a4:	8f 93       	push	r24
    17a6:	86 e3       	ldi	r24, 0x36	; 54
    17a8:	95 e0       	ldi	r25, 0x05	; 5
    17aa:	9f 93       	push	r25
    17ac:	8f 93       	push	r24
    17ae:	87 e3       	ldi	r24, 0x37	; 55
    17b0:	95 e0       	ldi	r25, 0x05	; 5
    17b2:	9f 93       	push	r25
    17b4:	8f 93       	push	r24
    17b6:	8b e3       	ldi	r24, 0x3B	; 59
    17b8:	95 e0       	ldi	r25, 0x05	; 5
    17ba:	9f 93       	push	r25
    17bc:	8f 93       	push	r24
    17be:	8c e3       	ldi	r24, 0x3C	; 60
    17c0:	95 e0       	ldi	r25, 0x05	; 5
    17c2:	9f 93       	push	r25
    17c4:	8f 93       	push	r24
    17c6:	80 e4       	ldi	r24, 0x40	; 64
    17c8:	95 e0       	ldi	r25, 0x05	; 5
    17ca:	9f 93       	push	r25
    17cc:	8f 93       	push	r24
    17ce:	82 e4       	ldi	r24, 0x42	; 66
    17d0:	95 e0       	ldi	r25, 0x05	; 5
    17d2:	9f 93       	push	r25
    17d4:	8f 93       	push	r24
    17d6:	0d e7       	ldi	r16, 0x7D	; 125
    17d8:	13 e0       	ldi	r17, 0x03	; 3
    17da:	1f 93       	push	r17
    17dc:	0f 93       	push	r16
    17de:	cf ef       	ldi	r28, 0xFF	; 255
    17e0:	d1 e0       	ldi	r29, 0x01	; 1
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <sscanf>
			&main_nmeaSatsUsed,
			&main_nmeaHdop,
			&main_nmeaAltitudeM,
			&main_checksum);

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG11, sizeof(PM_PARSE_NMEA_MSG11));
    17ea:	2f e0       	ldi	r18, 0x0F	; 15
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	41 e7       	ldi	r20, 0x71	; 113
    17f0:	51 e0       	ldi	r21, 0x01	; 1
    17f2:	b8 01       	movw	r22, r16
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    17fa:	8e e5       	ldi	r24, 0x5E	; 94
    17fc:	95 e0       	ldi	r25, 0x05	; 5
    17fe:	9f 93       	push	r25
    1800:	8f 93       	push	r24
    1802:	1f 93       	push	r17
    1804:	0f 93       	push	r16
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <sscanf>
			&main_nmeaMode2);
	if (len > 0) {
    180e:	2d b7       	in	r18, 0x3d	; 61
    1810:	3e b7       	in	r19, 0x3e	; 62
    1812:	20 5e       	subi	r18, 0xE0	; 224
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	3e bf       	out	0x3e, r19	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	2d bf       	out	0x3d, r18	; 61
    1820:	18 16       	cp	r1, r24
    1822:	19 06       	cpc	r1, r25
    1824:	0c f0       	brlt	.+2      	; 0x1828 <main_fw_parseNmeaLineData+0xd4>
    1826:	5b c0       	rjmp	.+182    	; 0x18de <main_fw_parseNmeaLineData+0x18a>
		main_fw_nmeaUtcPlusOneSec();
    1828:	0e 94 45 0b 	call	0x168a	; 0x168a <main_fw_nmeaUtcPlusOneSec>

		int ofs = 0, commaCnt = 0;
		for (int idx = serialCtxtRxBufferLen - 1; idx; --idx) {
    182c:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <serialCtxtRxBufferLen>
    1830:	ce 2f       	mov	r28, r30
    1832:	d0 e0       	ldi	r29, 0x00	; 0
    1834:	21 97       	sbiw	r28, 0x01	; 1
    1836:	39 f1       	breq	.+78     	; 0x1886 <main_fw_parseNmeaLineData+0x132>
			if (serialCtxtRxBuffer[idx] == '*') {
    1838:	de 01       	movw	r26, r28
    183a:	a1 50       	subi	r26, 0x01	; 1
    183c:	be 4f       	sbci	r27, 0xFE	; 254
    183e:	8c 91       	ld	r24, X
    1840:	8a 32       	cpi	r24, 0x2A	; 42
    1842:	41 f4       	brne	.+16     	; 0x1854 <main_fw_parseNmeaLineData+0x100>
    1844:	03 c0       	rjmp	.+6      	; 0x184c <main_fw_parseNmeaLineData+0xf8>
    1846:	82 91       	ld	r24, -Z
    1848:	8a 32       	cpi	r24, 0x2A	; 42
    184a:	39 f4       	brne	.+14     	; 0x185a <main_fw_parseNmeaLineData+0x106>
				ofs = idx;
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    184c:	1c 16       	cp	r1, r28
    184e:	1d 06       	cpc	r1, r29
    1850:	3c f0       	brlt	.+14     	; 0x1860 <main_fw_parseNmeaLineData+0x10c>
    1852:	19 c0       	rjmp	.+50     	; 0x1886 <main_fw_parseNmeaLineData+0x132>
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	e2 50       	subi	r30, 0x02	; 2
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
			&main_nmeaMode2);
	if (len > 0) {
		main_fw_nmeaUtcPlusOneSec();

		int ofs = 0, commaCnt = 0;
		for (int idx = serialCtxtRxBufferLen - 1; idx; --idx) {
    185a:	21 97       	sbiw	r28, 0x01	; 1
    185c:	a1 f7       	brne	.-24     	; 0x1846 <main_fw_parseNmeaLineData+0xf2>
    185e:	13 c0       	rjmp	.+38     	; 0x1886 <main_fw_parseNmeaLineData+0x132>
    1860:	fe 01       	movw	r30, r28
    1862:	e0 50       	subi	r30, 0x00	; 0
    1864:	fe 4f       	sbci	r31, 0xFE	; 254
			if (serialCtxtRxBuffer[idx] == '*') {
				ofs = idx;
    1866:	ce 01       	movw	r24, r28
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e0       	ldi	r21, 0x00	; 0
			if (serialCtxtRxBuffer[idx] == ',') {
    186c:	22 91       	ld	r18, -Z
    186e:	2c 32       	cpi	r18, 0x2C	; 44
    1870:	41 f4       	brne	.+16     	; 0x1882 <main_fw_parseNmeaLineData+0x12e>
				if (++commaCnt == 3) {
    1872:	4f 5f       	subi	r20, 0xFF	; 255
    1874:	5f 4f       	sbci	r21, 0xFF	; 255
    1876:	43 30       	cpi	r20, 0x03	; 3
    1878:	51 05       	cpc	r21, r1
    187a:	19 f4       	brne	.+6      	; 0x1882 <main_fw_parseNmeaLineData+0x12e>
					ofs = ++idx;
    187c:	ec 01       	movw	r28, r24
    187e:	21 96       	adiw	r28, 0x01	; 1
					break;
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <main_fw_parseNmeaLineData+0x132>
			if (serialCtxtRxBuffer[idx] == '*') {
				ofs = idx;
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	99 f7       	brne	.-26     	; 0x186c <main_fw_parseNmeaLineData+0x118>
					ofs = ++idx;
					break;
				}
			}
		}
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG12, sizeof(PM_PARSE_NMEA_MSG12));
    1886:	2c e0       	ldi	r18, 0x0C	; 12
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	45 e6       	ldi	r20, 0x65	; 101
    188c:	51 e0       	ldi	r21, 0x01	; 1
    188e:	6d e7       	ldi	r22, 0x7D	; 125
    1890:	73 e0       	ldi	r23, 0x03	; 3
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		sscanf((char*) serialCtxtRxBuffer + ofs, (char*) mainFormatBuffer,
    1898:	80 e3       	ldi	r24, 0x30	; 48
    189a:	95 e0       	ldi	r25, 0x05	; 5
    189c:	9f 93       	push	r25
    189e:	8f 93       	push	r24
    18a0:	8a e4       	ldi	r24, 0x4A	; 74
    18a2:	95 e0       	ldi	r25, 0x05	; 5
    18a4:	9f 93       	push	r25
    18a6:	8f 93       	push	r24
    18a8:	8e e4       	ldi	r24, 0x4E	; 78
    18aa:	95 e0       	ldi	r25, 0x05	; 5
    18ac:	9f 93       	push	r25
    18ae:	8f 93       	push	r24
    18b0:	82 e5       	ldi	r24, 0x52	; 82
    18b2:	95 e0       	ldi	r25, 0x05	; 5
    18b4:	9f 93       	push	r25
    18b6:	8f 93       	push	r24
    18b8:	8d e7       	ldi	r24, 0x7D	; 125
    18ba:	93 e0       	ldi	r25, 0x03	; 3
    18bc:	9f 93       	push	r25
    18be:	8f 93       	push	r24
    18c0:	c1 50       	subi	r28, 0x01	; 1
    18c2:	de 4f       	sbci	r29, 0xFE	; 254
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <sscanf>
    18cc:	2d b7       	in	r18, 0x3d	; 61
    18ce:	3e b7       	in	r19, 0x3e	; 62
    18d0:	24 5f       	subi	r18, 0xF4	; 244
    18d2:	3f 4f       	sbci	r19, 0xFF	; 255
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	3e bf       	out	0x3e, r19	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	2d bf       	out	0x3d, r18	; 61
				&main_nmeaHdop,
				&main_nmeaVdop,
				&main_checksum);
	}

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG21, sizeof(PM_PARSE_NMEA_MSG21));
    18de:	23 e3       	ldi	r18, 0x33	; 51
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	42 e3       	ldi	r20, 0x32	; 50
    18e4:	51 e0       	ldi	r21, 0x01	; 1
    18e6:	6d e7       	ldi	r22, 0x7D	; 125
    18e8:	73 e0       	ldi	r23, 0x03	; 3
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    18f0:	80 e3       	ldi	r24, 0x30	; 48
    18f2:	95 e0       	ldi	r25, 0x05	; 5
    18f4:	9f 93       	push	r25
    18f6:	8f 93       	push	r24
    18f8:	86 e4       	ldi	r24, 0x46	; 70
    18fa:	95 e0       	ldi	r25, 0x05	; 5
    18fc:	9f 93       	push	r25
    18fe:	8f 93       	push	r24
    1900:	86 e3       	ldi	r24, 0x36	; 54
    1902:	95 e0       	ldi	r25, 0x05	; 5
    1904:	9f 93       	push	r25
    1906:	8f 93       	push	r24
    1908:	87 e3       	ldi	r24, 0x37	; 55
    190a:	95 e0       	ldi	r25, 0x05	; 5
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	8b e3       	ldi	r24, 0x3B	; 59
    1912:	95 e0       	ldi	r25, 0x05	; 5
    1914:	9f 93       	push	r25
    1916:	8f 93       	push	r24
    1918:	8c e3       	ldi	r24, 0x3C	; 60
    191a:	95 e0       	ldi	r25, 0x05	; 5
    191c:	9f 93       	push	r25
    191e:	8f 93       	push	r24
    1920:	80 e4       	ldi	r24, 0x40	; 64
    1922:	95 e0       	ldi	r25, 0x05	; 5
    1924:	9f 93       	push	r25
    1926:	8f 93       	push	r24
    1928:	82 e4       	ldi	r24, 0x42	; 66
    192a:	95 e0       	ldi	r25, 0x05	; 5
    192c:	9f 93       	push	r25
    192e:	8f 93       	push	r24
    1930:	8d e7       	ldi	r24, 0x7D	; 125
    1932:	93 e0       	ldi	r25, 0x03	; 3
    1934:	9f 93       	push	r25
    1936:	8f 93       	push	r24
    1938:	8f ef       	ldi	r24, 0xFF	; 255
    193a:	91 e0       	ldi	r25, 0x01	; 1
    193c:	9f 93       	push	r25
    193e:	8f 93       	push	r24
    1940:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <sscanf>
			&main_nmeaPosLatSign,
			&main_nmeaPosLon,
			&main_nmeaPosLonSign,
			&main_nmeaDate,
			&main_checksum);
	if (len > 0) {
    1944:	2d b7       	in	r18, 0x3d	; 61
    1946:	3e b7       	in	r19, 0x3e	; 62
    1948:	2c 5e       	subi	r18, 0xEC	; 236
    194a:	3f 4f       	sbci	r19, 0xFF	; 255
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	3e bf       	out	0x3e, r19	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	2d bf       	out	0x3d, r18	; 61
    1956:	18 16       	cp	r1, r24
    1958:	19 06       	cpc	r1, r25
    195a:	0c f0       	brlt	.+2      	; 0x195e <main_fw_parseNmeaLineData+0x20a>
    195c:	44 c0       	rjmp	.+136    	; 0x19e6 <main_fw_parseNmeaLineData+0x292>
		main_fw_nmeaUtcPlusOneSec();
    195e:	0e 94 45 0b 	call	0x168a	; 0x168a <main_fw_nmeaUtcPlusOneSec>

		if ((main_nmeaDate >= 010100) && (main_nmeaDate < 311299)) {
    1962:	c0 90 46 05 	lds	r12, 0x0546	; 0x800546 <main_nmeaDate>
    1966:	d0 90 47 05 	lds	r13, 0x0547	; 0x800547 <main_nmeaDate+0x1>
    196a:	e0 90 48 05 	lds	r14, 0x0548	; 0x800548 <main_nmeaDate+0x2>
    196e:	f0 90 49 05 	lds	r15, 0x0549	; 0x800549 <main_nmeaDate+0x3>
    1972:	d7 01       	movw	r26, r14
    1974:	c6 01       	movw	r24, r12
    1976:	80 54       	subi	r24, 0x40	; 64
    1978:	90 41       	sbci	r25, 0x10	; 16
    197a:	a1 09       	sbc	r26, r1
    197c:	b1 09       	sbc	r27, r1
    197e:	83 3c       	cpi	r24, 0xC3	; 195
    1980:	9f 4a       	sbci	r25, 0xAF	; 175
    1982:	a4 40       	sbci	r26, 0x04	; 4
    1984:	b1 05       	cpc	r27, r1
    1986:	38 f5       	brcc	.+78     	; 0x19d6 <main_fw_parseNmeaLineData+0x282>
			main_nmeaDate = ((main_nmeaDate - (main_nmeaDate % 100)) * 100) + 2000 + (main_nmeaDate % 100);
    1988:	c7 01       	movw	r24, r14
    198a:	b6 01       	movw	r22, r12
    198c:	24 e6       	ldi	r18, 0x64	; 100
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	50 e0       	ldi	r21, 0x00	; 0
    1994:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divmodsi4>
    1998:	4b 01       	movw	r8, r22
    199a:	5c 01       	movw	r10, r24
    199c:	a7 01       	movw	r20, r14
    199e:	96 01       	movw	r18, r12
    19a0:	26 1b       	sub	r18, r22
    19a2:	37 0b       	sbc	r19, r23
    19a4:	48 0b       	sbc	r20, r24
    19a6:	59 0b       	sbc	r21, r25
    19a8:	a4 e6       	ldi	r26, 0x64	; 100
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <__muluhisi3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	80 53       	subi	r24, 0x30	; 48
    19b6:	98 4f       	sbci	r25, 0xF8	; 248
    19b8:	af 4f       	sbci	r26, 0xFF	; 255
    19ba:	bf 4f       	sbci	r27, 0xFF	; 255
    19bc:	88 0d       	add	r24, r8
    19be:	99 1d       	adc	r25, r9
    19c0:	aa 1d       	adc	r26, r10
    19c2:	bb 1d       	adc	r27, r11
    19c4:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <main_nmeaDate>
    19c8:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <main_nmeaDate+0x1>
    19cc:	a0 93 48 05 	sts	0x0548, r26	; 0x800548 <main_nmeaDate+0x2>
    19d0:	b0 93 49 05 	sts	0x0549, r27	; 0x800549 <main_nmeaDate+0x3>
    19d4:	08 c0       	rjmp	.+16     	; 0x19e6 <main_fw_parseNmeaLineData+0x292>
		} else {
			main_nmeaDate = 0;
    19d6:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <main_nmeaDate>
    19da:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <main_nmeaDate+0x1>
    19de:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <main_nmeaDate+0x2>
    19e2:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <main_nmeaDate+0x3>
		}
	}

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG31, sizeof(PM_PARSE_NMEA_MSG31));
    19e6:	21 e1       	ldi	r18, 0x11	; 17
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	41 e2       	ldi	r20, 0x21	; 33
    19ec:	51 e0       	ldi	r21, 0x01	; 1
    19ee:	6d e7       	ldi	r22, 0x7D	; 125
    19f0:	73 e0       	ldi	r23, 0x03	; 3
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    19f8:	8a e5       	ldi	r24, 0x5A	; 90
    19fa:	95 e0       	ldi	r25, 0x05	; 5
    19fc:	9f 93       	push	r25
    19fe:	8f 93       	push	r24
    1a00:	0d e7       	ldi	r16, 0x7D	; 125
    1a02:	13 e0       	ldi	r17, 0x03	; 3
    1a04:	1f 93       	push	r17
    1a06:	0f 93       	push	r16
    1a08:	cf ef       	ldi	r28, 0xFF	; 255
    1a0a:	d1 e0       	ldi	r29, 0x01	; 1
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <sscanf>
			&main_nmeaSatsEphemerisGpsGalileoQzss);

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG41, sizeof(PM_PARSE_NMEA_MSG41));
    1a14:	21 e1       	ldi	r18, 0x11	; 17
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e1       	ldi	r20, 0x10	; 16
    1a1a:	51 e0       	ldi	r21, 0x01	; 1
    1a1c:	b8 01       	movw	r22, r16
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1a24:	88 e5       	ldi	r24, 0x58	; 88
    1a26:	95 e0       	ldi	r25, 0x05	; 5
    1a28:	9f 93       	push	r25
    1a2a:	8f 93       	push	r24
    1a2c:	1f 93       	push	r17
    1a2e:	0f 93       	push	r16
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <sscanf>
    1a38:	8d b7       	in	r24, 0x3d	; 61
    1a3a:	9e b7       	in	r25, 0x3e	; 62
    1a3c:	0c 96       	adiw	r24, 0x0c	; 12
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	9e bf       	out	0x3e, r25	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	8d bf       	out	0x3d, r24	; 61
			&main_nmeaSatsEphemerisGlonass);
}
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	ff 90       	pop	r15
    1a52:	ef 90       	pop	r14
    1a54:	df 90       	pop	r13
    1a56:	cf 90       	pop	r12
    1a58:	bf 90       	pop	r11
    1a5a:	af 90       	pop	r10
    1a5c:	9f 90       	pop	r9
    1a5e:	8f 90       	pop	r8
    1a60:	08 95       	ret

00001a62 <main_fw_sendInitialHelp>:
}

void main_fw_sendInitialHelp()
{
#if 1
	ringbuffer_fw_ringBufferWaitAppend(true, true, PM_COMMAND_HELP, sizeof(PM_COMMAND_HELP));
    1a62:	25 e0       	ldi	r18, 0x05	; 5
    1a64:	4a e1       	ldi	r20, 0x1A	; 26
    1a66:	5c e0       	ldi	r21, 0x0C	; 12
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
    1a70:	08 95       	ret

00001a72 <main_fw_giveAway>:
	}
#endif
}

void main_fw_giveAway(void)
{
    1a72:	2f 92       	push	r2
    1a74:	3f 92       	push	r3
    1a76:	4f 92       	push	r4
    1a78:	5f 92       	push	r5
    1a7a:	6f 92       	push	r6
    1a7c:	7f 92       	push	r7
    1a7e:	8f 92       	push	r8
    1a80:	9f 92       	push	r9
    1a82:	af 92       	push	r10
    1a84:	bf 92       	push	r11
    1a86:	cf 92       	push	r12
    1a88:	df 92       	push	r13
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	60 97       	sbiw	r28, 0x10	; 16
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    wdt_reset();
    1aa6:	a8 95       	wdr
	usbPoll();
    1aa8:	0e 94 86 29 	call	0x530c	; 0x530c <usbPoll>

	usb_fw_sendInInterrupt();
    1aac:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <usb_fw_sendInInterrupt>
	}
}

static void workInQueue()
{
	if (ringbuffer_fw_getSemaphore(true)) {
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <ringbuffer_fw_getSemaphore>
    1ab6:	88 23       	and	r24, r24
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <main_fw_giveAway+0x4a>
    1aba:	ef c3       	rjmp	.+2014   	; 0x229a <main_fw_giveAway+0x828>
		uint8_t isLocked = true;
		enum RINGBUFFER_MSG_STATUS_t statusSend = ringbuffer_fw_getStatusNextMsg(true);
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <ringbuffer_fw_getStatusNextMsg>
    1ac2:	18 2f       	mov	r17, r24
		enum RINGBUFFER_MSG_STATUS_t statusRcv  = ringbuffer_fw_getStatusNextMsg(false);
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <ringbuffer_fw_getStatusNextMsg>

		if (!(main_bf.mainHelpConcatNr) && (statusSend & RINGBUFFER_MSG_STATUS_AVAIL)) {		// if any message is available and not during help printing
    1aca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1ace:	9f 70       	andi	r25, 0x0F	; 15
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <main_fw_giveAway+0x62>
    1ad2:	15 c3       	rjmp	.+1578   	; 0x20fe <main_fw_giveAway+0x68c>
    1ad4:	10 ff       	sbrs	r17, 0
    1ad6:	13 c3       	rjmp	.+1574   	; 0x20fe <main_fw_giveAway+0x68c>
			if (statusSend & RINGBUFFER_MSG_STATUS_IS_NMEA) {
    1ad8:	14 ff       	sbrs	r17, 4
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <main_fw_giveAway+0x72>
				serial_fw_pullAndSendNmea_havingSemaphore(true); isLocked = false;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	0e 94 82 22 	call	0x4504	; 0x4504 <serial_fw_pullAndSendNmea_havingSemaphore>
    1ae2:	db c3       	rjmp	.+1974   	; 0x229a <main_fw_giveAway+0x828>

			} else if ((statusSend & RINGBUFFER_MSG_STATUS_IS_MASK) == 0) {						// message from firmware state machine
    1ae4:	10 7f       	andi	r17, 0xF0	; 240
    1ae6:	11 f0       	breq	.+4      	; 0x1aec <main_fw_giveAway+0x7a>
    1ae8:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <main_fw_giveAway+0x1f98>
				uint8_t localMsgLen = ringbuffer_fw_ringBufferPull(true, mainInterpreterBuffer, (uint8_t) (sizeof(mainInterpreterBuffer) - 1));
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	6d e7       	ldi	r22, 0x7D	; 125
    1af0:	74 e0       	ldi	r23, 0x04	; 4
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	0e 94 c8 20 	call	0x4190	; 0x4190 <ringbuffer_fw_ringBufferPull>
				ringbuffer_fw_freeSemaphore(true); isLocked = false;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	0e 94 10 20 	call	0x4020	; 0x4020 <ringbuffer_fw_freeSemaphore>
			&main_nmeaSatsEphemerisGlonass);
}

static void doInterpret(uchar msg[], uint8_t len)
{
	if (!main_fw_strncmp(msg, PM_GPIB_SCM_IDN, sizeof(PM_GPIB_SCM_IDN))) {
    1afe:	46 e0       	ldi	r20, 0x06	; 6
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	6f ec       	ldi	r22, 0xCF	; 207
    1b04:	7b e0       	ldi	r23, 0x0B	; 11
    1b06:	8d e7       	ldi	r24, 0x7D	; 125
    1b08:	94 e0       	ldi	r25, 0x04	; 4
    1b0a:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1b0e:	89 2b       	or	r24, r25
    1b10:	a1 f5       	brne	.+104    	; 0x1b7a <main_fw_giveAway+0x108>
		/* GPIB commands - SCPI/SCM - *IDN? */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GPIB_SCM_IDN, sizeof(PM_FORMAT_GPIB_SCM_IDN));
    1b12:	2c e1       	ldi	r18, 0x1C	; 28
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	47 ee       	ldi	r20, 0xE7	; 231
    1b18:	51 e0       	ldi	r21, 0x01	; 1
    1b1a:	6d e7       	ldi	r22, 0x7D	; 125
    1b1c:	73 e0       	ldi	r23, 0x03	; 3
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1b24:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <mainCoef_b00_dev_version>
    1b28:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <mainCoef_b00_dev_version+0x1>
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	33 27       	eor	r19, r19
    1b30:	3f 93       	push	r19
    1b32:	2f 93       	push	r18
    1b34:	1f 92       	push	r1
    1b36:	9f 93       	push	r25
    1b38:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <mainCoef_b00_dev_serial+0x1>
    1b3c:	8f 93       	push	r24
    1b3e:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <mainCoef_b00_dev_serial>
    1b42:	8f 93       	push	r24
    1b44:	85 eb       	ldi	r24, 0xB5	; 181
    1b46:	95 e0       	ldi	r25, 0x05	; 5
    1b48:	9f 93       	push	r25
    1b4a:	8f 93       	push	r24
    1b4c:	8d e7       	ldi	r24, 0x7D	; 125
    1b4e:	93 e0       	ldi	r25, 0x03	; 3
    1b50:	9f 93       	push	r25
    1b52:	8f 93       	push	r24
    1b54:	8d ef       	ldi	r24, 0xFD	; 253
    1b56:	93 e0       	ldi	r25, 0x03	; 3
    1b58:	9f 93       	push	r25
    1b5a:	8f 93       	push	r24
    1b5c:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				&(mainCoef_b00_dev_header[0]),
				mainCoef_b00_dev_serial,
				mainCoef_b00_dev_version >> 8,
				mainCoef_b00_dev_version & 0xff);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    1b60:	28 2f       	mov	r18, r24
    1b62:	4d ef       	ldi	r20, 0xFD	; 253
    1b64:	53 e0       	ldi	r21, 0x03	; 3
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	90 c3       	rjmp	.+1824   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_AFCOFF, sizeof(PM_COMMAND_AFCOFF))) {
    1b7a:	47 e0       	ldi	r20, 0x07	; 7
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	67 e3       	ldi	r22, 0x37	; 55
    1b80:	7c e0       	ldi	r23, 0x0C	; 12
    1b82:	8d e7       	ldi	r24, 0x7D	; 125
    1b84:	94 e0       	ldi	r25, 0x04	; 4
    1b86:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1b8a:	89 2b       	or	r24, r25
    1b8c:	31 f4       	brne	.+12     	; 0x1b9a <main_fw_giveAway+0x128>
		/* automatic frequency control OFF */
		main_bf.mainIsAFC = false;
    1b8e:	e0 e0       	ldi	r30, 0x00	; 0
    1b90:	f1 e0       	ldi	r31, 0x01	; 1
    1b92:	80 81       	ld	r24, Z
    1b94:	8e 7f       	andi	r24, 0xFE	; 254
    1b96:	80 83       	st	Z, r24
    1b98:	80 c3       	rjmp	.+1792   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_AFCON, sizeof(PM_COMMAND_AFCON))) {
    1b9a:	46 e0       	ldi	r20, 0x06	; 6
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	61 e3       	ldi	r22, 0x31	; 49
    1ba0:	7c e0       	ldi	r23, 0x0C	; 12
    1ba2:	8d e7       	ldi	r24, 0x7D	; 125
    1ba4:	94 e0       	ldi	r25, 0x04	; 4
    1ba6:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1baa:	89 2b       	or	r24, r25
    1bac:	31 f4       	brne	.+12     	; 0x1bba <main_fw_giveAway+0x148>
		/* automatic frequency control ON */
		main_bf.mainIsAFC = true;
    1bae:	e0 e0       	ldi	r30, 0x00	; 0
    1bb0:	f1 e0       	ldi	r31, 0x01	; 1
    1bb2:	80 81       	ld	r24, Z
    1bb4:	81 60       	ori	r24, 0x01	; 1
    1bb6:	80 83       	st	Z, r24
    1bb8:	70 c3       	rjmp	.+1760   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_APCOFF, sizeof(PM_COMMAND_APCOFF))) {
    1bba:	47 e0       	ldi	r20, 0x07	; 7
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	6a e2       	ldi	r22, 0x2A	; 42
    1bc0:	7c e0       	ldi	r23, 0x0C	; 12
    1bc2:	8d e7       	ldi	r24, 0x7D	; 125
    1bc4:	94 e0       	ldi	r25, 0x04	; 4
    1bc6:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1bca:	89 2b       	or	r24, r25
    1bcc:	31 f4       	brne	.+12     	; 0x1bda <main_fw_giveAway+0x168>
		/* automatic phase control OFF */
		main_bf.mainIsAPC = false;
    1bce:	e0 e0       	ldi	r30, 0x00	; 0
    1bd0:	f1 e0       	ldi	r31, 0x01	; 1
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8d 7f       	andi	r24, 0xFD	; 253
    1bd6:	80 83       	st	Z, r24
    1bd8:	60 c3       	rjmp	.+1728   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_APCON, sizeof(PM_COMMAND_APCON))) {
    1bda:	46 e0       	ldi	r20, 0x06	; 6
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	64 e2       	ldi	r22, 0x24	; 36
    1be0:	7c e0       	ldi	r23, 0x0C	; 12
    1be2:	8d e7       	ldi	r24, 0x7D	; 125
    1be4:	94 e0       	ldi	r25, 0x04	; 4
    1be6:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1bea:	89 2b       	or	r24, r25
    1bec:	31 f4       	brne	.+12     	; 0x1bfa <main_fw_giveAway+0x188>
		/* automatic phase control ON */
		main_bf.mainIsAPC = true;
    1bee:	e0 e0       	ldi	r30, 0x00	; 0
    1bf0:	f1 e0       	ldi	r31, 0x01	; 1
    1bf2:	80 81       	ld	r24, Z
    1bf4:	82 60       	ori	r24, 0x02	; 2
    1bf6:	80 83       	st	Z, r24
    1bf8:	50 c3       	rjmp	.+1696   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_HALT, sizeof(PM_COMMAND_HALT))) {
    1bfa:	45 e0       	ldi	r20, 0x05	; 5
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	6f e1       	ldi	r22, 0x1F	; 31
    1c00:	7c e0       	ldi	r23, 0x0C	; 12
    1c02:	8d e7       	ldi	r24, 0x7D	; 125
    1c04:	94 e0       	ldi	r25, 0x04	; 4
    1c06:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1c0a:	89 2b       	or	r24, r25
    1c0c:	71 f5       	brne	.+92     	; 0x1c6a <main_fw_giveAway+0x1f8>
		/* stop AVR controller and enter sleep state */
		uint8_t cnt = 250;
		main_bf.mainIsTimerTest = false;
    1c0e:	e0 e0       	ldi	r30, 0x00	; 0
    1c10:	f1 e0       	ldi	r31, 0x01	; 1
    1c12:	80 81       	ld	r24, Z
    1c14:	8b 7f       	andi	r24, 0xFB	; 251
    1c16:	80 83       	st	Z, r24
		main_bf.mainIsUsbCommTest = false;
    1c18:	80 81       	ld	r24, Z
    1c1a:	8f 7e       	andi	r24, 0xEF	; 239
    1c1c:	80 83       	st	Z, r24
		main_bf.mainIsSerComm = true;
    1c1e:	80 81       	ld	r24, Z
    1c20:	88 60       	ori	r24, 0x08	; 8
    1c22:	80 83       	st	Z, r24
		serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_STBY, sizeof(PM_FORMAT_GPS_STBY));
    1c24:	40 e1       	ldi	r20, 0x10	; 16
    1c26:	6c ef       	ldi	r22, 0xFC	; 252
    1c28:	77 e0       	ldi	r23, 0x07	; 7
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	0e 94 6f 22 	call	0x44de	; 0x44de <serial_fw_copyAndSendNmea>
    1c30:	03 c0       	rjmp	.+6      	; 0x1c38 <main_fw_giveAway+0x1c6>

		/* send message until the send buffer is clear */
		while (serial_fw_isTxRunning()) {
			wdt_reset();
    1c32:	a8 95       	wdr
			usbPoll();
    1c34:	0e 94 86 29 	call	0x530c	; 0x530c <usbPoll>
		main_bf.mainIsUsbCommTest = false;
		main_bf.mainIsSerComm = true;
		serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_STBY, sizeof(PM_FORMAT_GPS_STBY));

		/* send message until the send buffer is clear */
		while (serial_fw_isTxRunning()) {
    1c38:	0e 94 68 22 	call	0x44d0	; 0x44d0 <serial_fw_isTxRunning>
    1c3c:	81 11       	cpse	r24, r1
    1c3e:	f9 cf       	rjmp	.-14     	; 0x1c32 <main_fw_giveAway+0x1c0>
    1c40:	19 ef       	ldi	r17, 0xF9	; 249
			usbPoll();
		};

		/* give some time for the GPS module before powering down */
		while (--cnt) {
			wdt_reset();
    1c42:	a8 95       	wdr
			usbPoll();
    1c44:	0e 94 86 29 	call	0x530c	; 0x530c <usbPoll>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c48:	87 e8       	ldi	r24, 0x87	; 135
    1c4a:	93 e1       	ldi	r25, 0x13	; 19
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <main_fw_giveAway+0x1da>
    1c50:	00 c0       	rjmp	.+0      	; 0x1c52 <main_fw_giveAway+0x1e0>
    1c52:	00 00       	nop
    1c54:	11 50       	subi	r17, 0x01	; 1
			wdt_reset();
			usbPoll();
		};

		/* give some time for the GPS module before powering down */
		while (--cnt) {
    1c56:	a9 f7       	brne	.-22     	; 0x1c42 <main_fw_giveAway+0x1d0>
			wdt_reset();
			usbPoll();
			_delay_ms(1);
		}

		main_bf.mainIsSerComm = false;
    1c58:	e0 e0       	ldi	r30, 0x00	; 0
    1c5a:	f1 e0       	ldi	r31, 0x01	; 1
    1c5c:	80 81       	ld	r24, Z
    1c5e:	87 7f       	andi	r24, 0xF7	; 247
    1c60:	80 83       	st	Z, r24
		main_bf.mainStopAvr = true;
    1c62:	80 81       	ld	r24, Z
    1c64:	80 62       	ori	r24, 0x20	; 32
    1c66:	80 83       	st	Z, r24
    1c68:	18 c3       	rjmp	.+1584   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_HELP, sizeof(PM_COMMAND_HELP))) {
    1c6a:	45 e0       	ldi	r20, 0x05	; 5
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	6a e1       	ldi	r22, 0x1A	; 26
    1c70:	7c e0       	ldi	r23, 0x0C	; 12
    1c72:	8d e7       	ldi	r24, 0x7D	; 125
    1c74:	94 e0       	ldi	r25, 0x04	; 4
    1c76:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1c7a:	89 2b       	or	r24, r25
    1c7c:	e1 f5       	brne	.+120    	; 0x1cf6 <main_fw_giveAway+0x284>
		/* help information */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_VERSION, sizeof(PM_FORMAT_VERSION));
    1c7e:	22 e4       	ldi	r18, 0x42	; 66
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a e1       	ldi	r20, 0x1A	; 26
    1c84:	58 e0       	ldi	r21, 0x08	; 8
    1c86:	6d e7       	ldi	r22, 0x7D	; 125
    1c88:	73 e0       	ldi	r23, 0x03	; 3
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		int len = snprintf((char*) mainPrepareBuffer, sizeof(mainPrepareBuffer) - 1, (char*) mainFormatBuffer, VERSION_HIGH, VERSION_LOW);
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	8f 93       	push	r24
    1c94:	8d ea       	ldi	r24, 0xAD	; 173
    1c96:	8f 93       	push	r24
    1c98:	1f 92       	push	r1
    1c9a:	86 e9       	ldi	r24, 0x96	; 150
    1c9c:	8f 93       	push	r24
    1c9e:	8d e7       	ldi	r24, 0x7D	; 125
    1ca0:	93 e0       	ldi	r25, 0x03	; 3
    1ca2:	9f 93       	push	r25
    1ca4:	8f 93       	push	r24
    1ca6:	1f 92       	push	r1
    1ca8:	8f e7       	ldi	r24, 0x7F	; 127
    1caa:	8f 93       	push	r24
    1cac:	8d ef       	ldi	r24, 0xFD	; 253
    1cae:	93 e0       	ldi	r25, 0x03	; 3
    1cb0:	9f 93       	push	r25
    1cb2:	8f 93       	push	r24
    1cb4:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <snprintf>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    1cb8:	28 2f       	mov	r18, r24
    1cba:	4d ef       	ldi	r20, 0xFD	; 253
    1cbc:	53 e0       	ldi	r21, 0x03	; 3
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
		ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP01, sizeof(PM_INTERPRETER_HELP01));
    1cc6:	22 e4       	ldi	r18, 0x42	; 66
    1cc8:	4d e8       	ldi	r20, 0x8D	; 141
    1cca:	5b e0       	ldi	r21, 0x0B	; 11
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
		main_bf.mainHelpConcatNr = 1;
    1cd4:	e1 e0       	ldi	r30, 0x01	; 1
    1cd6:	f1 e0       	ldi	r31, 0x01	; 1
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 7f       	andi	r24, 0xF0	; 240
    1cdc:	81 60       	ori	r24, 0x01	; 1
    1cde:	80 83       	st	Z, r24
		main_bf.mainIsUsbCommTest = false;
    1ce0:	e0 e0       	ldi	r30, 0x00	; 0
    1ce2:	f1 e0       	ldi	r31, 0x01	; 1
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8f 7e       	andi	r24, 0xEF	; 239
    1ce8:	80 83       	st	Z, r24
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	d2 c2       	rjmp	.+1444   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_INFO, sizeof(PM_COMMAND_INFO))) {
    1cf6:	45 e0       	ldi	r20, 0x05	; 5
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	65 e1       	ldi	r22, 0x15	; 21
    1cfc:	7c e0       	ldi	r23, 0x0C	; 12
    1cfe:	8d e7       	ldi	r24, 0x7D	; 125
    1d00:	94 e0       	ldi	r25, 0x04	; 4
    1d02:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1d06:	89 2b       	or	r24, r25
    1d08:	b1 f4       	brne	.+44     	; 0x1d36 <main_fw_giveAway+0x2c4>
		/* timer 2 overflow counter TEST */
		main_bf.mainIsTimerTest = !(main_bf.mainIsTimerTest);
    1d0a:	e0 e0       	ldi	r30, 0x00	; 0
    1d0c:	f1 e0       	ldi	r31, 0x01	; 1
    1d0e:	80 81       	ld	r24, Z
    1d10:	82 fb       	bst	r24, 2
    1d12:	99 27       	eor	r25, r25
    1d14:	90 f9       	bld	r25, 0
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	89 27       	eor	r24, r25
    1d1a:	90 81       	ld	r25, Z
    1d1c:	80 fb       	bst	r24, 0
    1d1e:	92 f9       	bld	r25, 2
    1d20:	90 83       	st	Z, r25
		if (main_bf.mainIsTimerTest) {
    1d22:	80 81       	ld	r24, Z
    1d24:	82 ff       	sbrs	r24, 2
    1d26:	b9 c2       	rjmp	.+1394   	; 0x229a <main_fw_giveAway+0x828>
			main_bf.mainIsSerComm = false;
    1d28:	80 81       	ld	r24, Z
    1d2a:	87 7f       	andi	r24, 0xF7	; 247
    1d2c:	80 83       	st	Z, r24
			main_bf.mainIsUsbCommTest = false;
    1d2e:	80 81       	ld	r24, Z
    1d30:	8f 7e       	andi	r24, 0xEF	; 239
    1d32:	80 83       	st	Z, r24
    1d34:	b2 c2       	rjmp	.+1380   	; 0x229a <main_fw_giveAway+0x828>
		}

	} else if (!main_fw_strncmp(msg, PM_COMMAND_LEDOFF, sizeof(PM_COMMAND_LEDOFF))) {
    1d36:	47 e0       	ldi	r20, 0x07	; 7
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	6e e0       	ldi	r22, 0x0E	; 14
    1d3c:	7c e0       	ldi	r23, 0x0C	; 12
    1d3e:	8d e7       	ldi	r24, 0x7D	; 125
    1d40:	94 e0       	ldi	r25, 0x04	; 4
    1d42:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1d46:	89 2b       	or	r24, r25
    1d48:	99 f4       	brne	.+38     	; 0x1d70 <main_fw_giveAway+0x2fe>
		/* backlight of the LCD module OFF */
		const uint8_t lcdLedMode = LCD_LED_MODE_OFF;
    1d4a:	19 82       	std	Y+1, r1	; 0x01
		main_bf.mainLcdLedMode = lcdLedMode;
    1d4c:	e1 e0       	ldi	r30, 0x01	; 1
    1d4e:	f1 e0       	ldi	r31, 0x01	; 1
    1d50:	80 81       	ld	r24, Z
    1d52:	8f 78       	andi	r24, 0x8F	; 143
    1d54:	80 83       	st	Z, r24

		memory_fw_writeEEpromPage((uint8_t*) &lcdLedMode, sizeof(uint8_t), offsetof(eeprom_layout_t, b00.b00_lcdLedMode));
    1d56:	44 e1       	ldi	r20, 0x14	; 20
    1d58:	50 e0       	ldi	r21, 0x00	; 0
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	01 96       	adiw	r24, 0x01	; 1
    1d60:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_HEADER_NR, offsetof(eeprom_layout_t, b00.b00_crc));
    1d64:	6e e1       	ldi	r22, 0x1E	; 30
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	0e 94 00 0a 	call	0x1400	; 0x1400 <recalcEepromCrc>
    1d6e:	95 c2       	rjmp	.+1322   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_LEDON, sizeof(PM_COMMAND_LEDON))) {
    1d70:	46 e0       	ldi	r20, 0x06	; 6
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	68 e0       	ldi	r22, 0x08	; 8
    1d76:	7c e0       	ldi	r23, 0x0C	; 12
    1d78:	8d e7       	ldi	r24, 0x7D	; 125
    1d7a:	94 e0       	ldi	r25, 0x04	; 4
    1d7c:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1d80:	89 2b       	or	r24, r25
    1d82:	a9 f4       	brne	.+42     	; 0x1dae <main_fw_giveAway+0x33c>
		/* backlight of the LCD module ON */
		const uint8_t lcdLedMode = LCD_LED_MODE_ON;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	89 83       	std	Y+1, r24	; 0x01
		main_bf.mainLcdLedMode = lcdLedMode;
    1d88:	e1 e0       	ldi	r30, 0x01	; 1
    1d8a:	f1 e0       	ldi	r31, 0x01	; 1
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 78       	andi	r24, 0x8F	; 143
    1d90:	80 61       	ori	r24, 0x10	; 16
    1d92:	80 83       	st	Z, r24

		memory_fw_writeEEpromPage((uint8_t*) &lcdLedMode, sizeof(uint8_t), offsetof(eeprom_layout_t, b00.b00_lcdLedMode));
    1d94:	44 e1       	ldi	r20, 0x14	; 20
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	61 e0       	ldi	r22, 0x01	; 1
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_HEADER_NR, offsetof(eeprom_layout_t, b00.b00_crc));
    1da2:	6e e1       	ldi	r22, 0x1E	; 30
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	0e 94 00 0a 	call	0x1400	; 0x1400 <recalcEepromCrc>
    1dac:	76 c2       	rjmp	.+1260   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_SEROFF, sizeof(PM_COMMAND_SEROFF))) {
    1dae:	47 e0       	ldi	r20, 0x07	; 7
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	69 ef       	ldi	r22, 0xF9	; 249
    1db4:	7b e0       	ldi	r23, 0x0B	; 11
    1db6:	8d e7       	ldi	r24, 0x7D	; 125
    1db8:	94 e0       	ldi	r25, 0x04	; 4
    1dba:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1dbe:	89 2b       	or	r24, r25
    1dc0:	31 f4       	brne	.+12     	; 0x1dce <main_fw_giveAway+0x35c>
		/* serial communication OFF */
		main_bf.mainIsSerComm = false;
    1dc2:	e0 e0       	ldi	r30, 0x00	; 0
    1dc4:	f1 e0       	ldi	r31, 0x01	; 1
    1dc6:	80 81       	ld	r24, Z
    1dc8:	87 7f       	andi	r24, 0xF7	; 247
    1dca:	80 83       	st	Z, r24
    1dcc:	66 c2       	rjmp	.+1228   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_SERON, sizeof(PM_COMMAND_SERON))) {
    1dce:	46 e0       	ldi	r20, 0x06	; 6
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	63 ef       	ldi	r22, 0xF3	; 243
    1dd4:	7b e0       	ldi	r23, 0x0B	; 11
    1dd6:	8d e7       	ldi	r24, 0x7D	; 125
    1dd8:	94 e0       	ldi	r25, 0x04	; 4
    1dda:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1dde:	89 2b       	or	r24, r25
    1de0:	61 f4       	brne	.+24     	; 0x1dfa <main_fw_giveAway+0x388>
		/* serial communication ON */
		main_bf.mainIsSerComm = true;
    1de2:	e0 e0       	ldi	r30, 0x00	; 0
    1de4:	f1 e0       	ldi	r31, 0x01	; 1
    1de6:	80 81       	ld	r24, Z
    1de8:	88 60       	ori	r24, 0x08	; 8
    1dea:	80 83       	st	Z, r24
		main_bf.mainIsTimerTest = false;
    1dec:	80 81       	ld	r24, Z
    1dee:	8b 7f       	andi	r24, 0xFB	; 251
    1df0:	80 83       	st	Z, r24
		main_bf.mainIsUsbCommTest = false;
    1df2:	80 81       	ld	r24, Z
    1df4:	8f 7e       	andi	r24, 0xEF	; 239
    1df6:	80 83       	st	Z, r24
    1df8:	50 c2       	rjmp	.+1184   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_memcmp(msg, PM_COMMAND_SERBAUD, sizeof(PM_COMMAND_SERBAUD) - 1)) {
    1dfa:	47 e0       	ldi	r20, 0x07	; 7
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	7c e0       	ldi	r23, 0x0C	; 12
    1e02:	8d e7       	ldi	r24, 0x7D	; 125
    1e04:	94 e0       	ldi	r25, 0x04	; 4
    1e06:	0e 94 2d 0b 	call	0x165a	; 0x165a <main_fw_memcmp>
    1e0a:	89 2b       	or	r24, r25
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <main_fw_giveAway+0x39e>
    1e0e:	46 c0       	rjmp	.+140    	; 0x1e9c <main_fw_giveAway+0x42a>
		/* serial communication baud parameter */
		sscanf((char*) msg + sizeof(PM_COMMAND_SERBAUD) - 1, "%d", &serialCoef_b03_serial_baud);
    1e10:	8f e0       	ldi	r24, 0x0F	; 15
    1e12:	95 e0       	ldi	r25, 0x05	; 5
    1e14:	9f 93       	push	r25
    1e16:	8f 93       	push	r24
    1e18:	8e e0       	ldi	r24, 0x0E	; 14
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	9f 93       	push	r25
    1e1e:	8f 93       	push	r24
    1e20:	84 e8       	ldi	r24, 0x84	; 132
    1e22:	94 e0       	ldi	r25, 0x04	; 4
    1e24:	9f 93       	push	r25
    1e26:	8f 93       	push	r24
    1e28:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <sscanf>
		serial_fw_setCommBaud(serialCoef_b03_serial_baud);
    1e2c:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <serialCoef_b03_serial_baud>
    1e30:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <serialCoef_b03_serial_baud+0x1>
    1e34:	0e 94 fe 21 	call	0x43fc	; 0x43fc <serial_fw_setCommBaud>

		/* write current baud rate as the default/startup value to the EEPROM */
		memory_fw_writeEEpromPage((uint8_t*) &serialCoef_b03_serial_baud, sizeof(uint16_t), offsetof(eeprom_layout_t, b03.b03_serial_baud));
    1e38:	40 e6       	ldi	r20, 0x60	; 96
    1e3a:	50 e0       	ldi	r21, 0x00	; 0
    1e3c:	62 e0       	ldi	r22, 0x02	; 2
    1e3e:	8f e0       	ldi	r24, 0x0F	; 15
    1e40:	95 e0       	ldi	r25, 0x05	; 5
    1e42:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_GPS_NR, offsetof(eeprom_layout_t, b03.b03_crc));
    1e46:	6e e7       	ldi	r22, 0x7E	; 126
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	83 e0       	ldi	r24, 0x03	; 3
    1e4c:	0e 94 00 0a 	call	0x1400	; 0x1400 <recalcEepromCrc>

		/* user information */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SET_BAUD, sizeof(PM_FORMAT_SET_BAUD));
    1e50:	2a e2       	ldi	r18, 0x2A	; 42
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4d eb       	ldi	r20, 0xBD	; 189
    1e56:	51 e0       	ldi	r21, 0x01	; 1
    1e58:	6d e7       	ldi	r22, 0x7D	; 125
    1e5a:	73 e0       	ldi	r23, 0x03	; 3
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1e62:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <serialCoef_b03_serial_baud+0x1>
    1e66:	8f 93       	push	r24
    1e68:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <serialCoef_b03_serial_baud>
    1e6c:	8f 93       	push	r24
    1e6e:	8d e7       	ldi	r24, 0x7D	; 125
    1e70:	93 e0       	ldi	r25, 0x03	; 3
    1e72:	9f 93       	push	r25
    1e74:	8f 93       	push	r24
    1e76:	8d ef       	ldi	r24, 0xFD	; 253
    1e78:	93 e0       	ldi	r25, 0x03	; 3
    1e7a:	9f 93       	push	r25
    1e7c:	8f 93       	push	r24
    1e7e:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				serialCoef_b03_serial_baud);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    1e82:	28 2f       	mov	r18, r24
    1e84:	4d ef       	ldi	r20, 0xFD	; 253
    1e86:	53 e0       	ldi	r21, 0x03	; 3
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	ff c1       	rjmp	.+1022   	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_STACK, sizeof(PM_COMMAND_STACK))) {
    1e9c:	46 e0       	ldi	r20, 0x06	; 6
    1e9e:	50 e0       	ldi	r21, 0x00	; 0
    1ea0:	6d ee       	ldi	r22, 0xED	; 237
    1ea2:	7b e0       	ldi	r23, 0x0B	; 11
    1ea4:	8d e7       	ldi	r24, 0x7D	; 125
    1ea6:	94 e0       	ldi	r25, 0x04	; 4
    1ea8:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1eac:	89 2b       	or	r24, r25
    1eae:	69 f4       	brne	.+26     	; 0x1eca <main_fw_giveAway+0x458>
		/* Stack Check facility */
		main_bf.mainStackCheck = !(main_bf.mainStackCheck);
    1eb0:	e0 e0       	ldi	r30, 0x00	; 0
    1eb2:	f1 e0       	ldi	r31, 0x01	; 1
    1eb4:	80 81       	ld	r24, Z
    1eb6:	86 fb       	bst	r24, 6
    1eb8:	99 27       	eor	r25, r25
    1eba:	90 f9       	bld	r25, 0
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	89 27       	eor	r24, r25
    1ec0:	90 81       	ld	r25, Z
    1ec2:	80 fb       	bst	r24, 0
    1ec4:	96 f9       	bld	r25, 6
    1ec6:	90 83       	st	Z, r25
    1ec8:	e8 c1       	rjmp	.+976    	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_TEST, sizeof(PM_COMMAND_TEST))) {
    1eca:	45 e0       	ldi	r20, 0x05	; 5
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	68 ee       	ldi	r22, 0xE8	; 232
    1ed0:	7b e0       	ldi	r23, 0x0B	; 11
    1ed2:	8d e7       	ldi	r24, 0x7D	; 125
    1ed4:	94 e0       	ldi	r25, 0x04	; 4
    1ed6:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1eda:	89 2b       	or	r24, r25
    1edc:	b1 f4       	brne	.+44     	; 0x1f0a <main_fw_giveAway+0x498>
		/* special communication TEST */
		main_bf.mainIsUsbCommTest = !(main_bf.mainIsUsbCommTest);
    1ede:	e0 e0       	ldi	r30, 0x00	; 0
    1ee0:	f1 e0       	ldi	r31, 0x01	; 1
    1ee2:	80 81       	ld	r24, Z
    1ee4:	84 fb       	bst	r24, 4
    1ee6:	99 27       	eor	r25, r25
    1ee8:	90 f9       	bld	r25, 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	89 27       	eor	r24, r25
    1eee:	90 81       	ld	r25, Z
    1ef0:	80 fb       	bst	r24, 0
    1ef2:	94 f9       	bld	r25, 4
    1ef4:	90 83       	st	Z, r25
		if (main_bf.mainIsUsbCommTest) {
    1ef6:	80 81       	ld	r24, Z
    1ef8:	84 ff       	sbrs	r24, 4
    1efa:	cf c1       	rjmp	.+926    	; 0x229a <main_fw_giveAway+0x828>
			main_bf.mainIsSerComm = false;
    1efc:	80 81       	ld	r24, Z
    1efe:	87 7f       	andi	r24, 0xF7	; 247
    1f00:	80 83       	st	Z, r24
			main_bf.mainIsTimerTest = false;
    1f02:	80 81       	ld	r24, Z
    1f04:	8b 7f       	andi	r24, 0xFB	; 251
    1f06:	80 83       	st	Z, r24
    1f08:	c8 c1       	rjmp	.+912    	; 0x229a <main_fw_giveAway+0x828>
		}

	} else if (!main_fw_strncmp(msg, PM_COMMAND_WRITEPWM, sizeof(PM_COMMAND_WRITEPWM))) {
    1f0a:	49 e0       	ldi	r20, 0x09	; 9
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	6f ed       	ldi	r22, 0xDF	; 223
    1f10:	7b e0       	ldi	r23, 0x0B	; 11
    1f12:	8d e7       	ldi	r24, 0x7D	; 125
    1f14:	94 e0       	ldi	r25, 0x04	; 4
    1f16:	0e 94 15 0b 	call	0x162a	; 0x162a <main_fw_strncmp>
    1f1a:	89 2b       	or	r24, r25
    1f1c:	f9 f4       	brne	.+62     	; 0x1f5c <main_fw_giveAway+0x4ea>
		/* write current PWM value as the default/startup value to the EEPROM */
		uint8_t sreg = SREG;
    1f1e:	8f b7       	in	r24, 0x3f	; 63
		cli();
    1f20:	f8 94       	cli
		pullCoef_b02_pwm_initial		= fastPwmLoopVal;
    1f22:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <fastPwmLoopVal>
    1f26:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <pullCoef_b02_pwm_initial>
		pullCoef_b02_pwm_initial_sub	= fastPwmSubLoopVal;
    1f2a:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <fastPwmSubLoopVal>
    1f2e:	90 93 2e 05 	sts	0x052E, r25	; 0x80052e <pullCoef_b02_pwm_initial_sub>
		SREG = sreg;
    1f32:	8f bf       	out	0x3f, r24	; 63

		memory_fw_writeEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial));
    1f34:	4a e5       	ldi	r20, 0x5A	; 90
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	8f e2       	ldi	r24, 0x2F	; 47
    1f3c:	95 e0       	ldi	r25, 0x05	; 5
    1f3e:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <memory_fw_writeEEpromPage>
		memory_fw_writeEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial_sub, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial_sub));
    1f42:	4b e5       	ldi	r20, 0x5B	; 91
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	61 e0       	ldi	r22, 0x01	; 1
    1f48:	8e e2       	ldi	r24, 0x2E	; 46
    1f4a:	95 e0       	ldi	r25, 0x05	; 5
    1f4c:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_REFOSC_NR, offsetof(eeprom_layout_t, b02.b02_crc));
    1f50:	6e e5       	ldi	r22, 0x5E	; 94
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	82 e0       	ldi	r24, 0x02	; 2
    1f56:	0e 94 00 0a 	call	0x1400	; 0x1400 <recalcEepromCrc>
    1f5a:	9f c1       	rjmp	.+830    	; 0x229a <main_fw_giveAway+0x828>

	} else if (!main_fw_memcmp(msg, PM_COMMAND_WRITETEMP, sizeof(PM_COMMAND_WRITETEMP) - 1)) {
    1f5c:	49 e0       	ldi	r20, 0x09	; 9
    1f5e:	50 e0       	ldi	r21, 0x00	; 0
    1f60:	65 ed       	ldi	r22, 0xD5	; 213
    1f62:	7b e0       	ldi	r23, 0x0B	; 11
    1f64:	8d e7       	ldi	r24, 0x7D	; 125
    1f66:	94 e0       	ldi	r25, 0x04	; 4
    1f68:	0e 94 2d 0b 	call	0x165a	; 0x165a <main_fw_memcmp>
    1f6c:	89 2b       	or	r24, r25
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <main_fw_giveAway+0x500>
    1f70:	5e c0       	rjmp	.+188    	; 0x202e <main_fw_giveAway+0x5bc>
		float localTemp = 0.0f;
    1f72:	19 82       	std	Y+1, r1	; 0x01
    1f74:	1a 82       	std	Y+2, r1	; 0x02
    1f76:	1b 82       	std	Y+3, r1	; 0x03
    1f78:	1c 82       	std	Y+4, r1	; 0x04
		/* take current temperature value to correct the displayed values */
		sscanf(((char*) msg) + sizeof(PM_COMMAND_WRITETEMP) - 1, "%f", &localTemp);
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	9f 93       	push	r25
    1f80:	8f 93       	push	r24
    1f82:	81 e1       	ldi	r24, 0x11	; 17
    1f84:	91 e0       	ldi	r25, 0x01	; 1
    1f86:	9f 93       	push	r25
    1f88:	8f 93       	push	r24
    1f8a:	86 e8       	ldi	r24, 0x86	; 134
    1f8c:	94 e0       	ldi	r25, 0x04	; 4
    1f8e:	9f 93       	push	r25
    1f90:	8f 93       	push	r24
    1f92:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <sscanf>
		if (localTemp) {
    1f96:	c9 80       	ldd	r12, Y+1	; 0x01
    1f98:	da 80       	ldd	r13, Y+2	; 0x02
    1f9a:	eb 80       	ldd	r14, Y+3	; 0x03
    1f9c:	fc 80       	ldd	r15, Y+4	; 0x04
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	a9 01       	movw	r20, r18
    1fb0:	c7 01       	movw	r24, r14
    1fb2:	b6 01       	movw	r22, r12
    1fb4:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__cmpsf2>
    1fb8:	88 23       	and	r24, r24
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <main_fw_giveAway+0x54c>
    1fbc:	6e c1       	rjmp	.+732    	; 0x229a <main_fw_giveAway+0x828>
			/* calculate the new correction value */
			mainCoef_b01_temp_ofs_adc_25C_steps = (acAdcCh[ADC_CH_TEMP] - ((localTemp - 25.0f) / mainCoef_b01_temp_k_p1step_adc_K));
    1fbe:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <acAdcCh+0x4>
    1fc2:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <acAdcCh+0x5>
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 94 23 2c 	call	0x5846	; 0x5846 <__floatunsisf>
    1fd0:	4b 01       	movw	r8, r22
    1fd2:	5c 01       	movw	r10, r24
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	48 ec       	ldi	r20, 0xC8	; 200
    1fda:	51 e4       	ldi	r21, 0x41	; 65
    1fdc:	c7 01       	movw	r24, r14
    1fde:	b6 01       	movw	r22, r12
    1fe0:	0e 94 10 2b 	call	0x5620	; 0x5620 <__subsf3>
    1fe4:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <mainCoef_b01_temp_k_p1step_adc_K>
    1fe8:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    1fec:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    1ff0:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
    1ff4:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    1ff8:	9b 01       	movw	r18, r22
    1ffa:	ac 01       	movw	r20, r24
    1ffc:	c5 01       	movw	r24, r10
    1ffe:	b4 01       	movw	r22, r8
    2000:	0e 94 10 2b 	call	0x5620	; 0x5620 <__subsf3>
    2004:	60 93 a5 05 	sts	0x05A5, r22	; 0x8005a5 <mainCoef_b01_temp_ofs_adc_25C_steps>
    2008:	70 93 a6 05 	sts	0x05A6, r23	; 0x8005a6 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    200c:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    2010:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>

			/* write the correction value to the EEPROM */
			memory_fw_writeEEpromPage((uint8_t*) &mainCoef_b01_temp_ofs_adc_25C_steps, sizeof(float), offsetof(eeprom_layout_t, b01.b01_temp_ofs_adc_25C_steps));
    2014:	48 e2       	ldi	r20, 0x28	; 40
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	64 e0       	ldi	r22, 0x04	; 4
    201a:	85 ea       	ldi	r24, 0xA5	; 165
    201c:	95 e0       	ldi	r25, 0x05	; 5
    201e:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <memory_fw_writeEEpromPage>
			recalcEepromCrc(BLOCK_MEASURING_NR, offsetof(eeprom_layout_t, b01.b01_crc));
    2022:	6e e3       	ldi	r22, 0x3E	; 62
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	0e 94 00 0a 	call	0x1400	; 0x1400 <recalcEepromCrc>
    202c:	36 c1       	rjmp	.+620    	; 0x229a <main_fw_giveAway+0x828>
		}
	} else if (msg[0] == PM_COMMAND_PLUSSIGN[0]) {
    202e:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <mainInterpreterBuffer>
    2032:	8b 32       	cpi	r24, 0x2B	; 43
    2034:	a9 f4       	brne	.+42     	; 0x2060 <main_fw_giveAway+0x5ee>
		/* correct the PWM value up */
		sscanf(((char*) msg) + 1, "%f", &mainPwmTerminalAdj);
    2036:	88 e8       	ldi	r24, 0x88	; 136
    2038:	95 e0       	ldi	r25, 0x05	; 5
    203a:	9f 93       	push	r25
    203c:	8f 93       	push	r24
    203e:	81 e1       	ldi	r24, 0x11	; 17
    2040:	91 e0       	ldi	r25, 0x01	; 1
    2042:	9f 93       	push	r25
    2044:	8f 93       	push	r24
    2046:	8e e7       	ldi	r24, 0x7E	; 126
    2048:	94 e0       	ldi	r25, 0x04	; 4
    204a:	9f 93       	push	r25
    204c:	8f 93       	push	r24
    204e:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <sscanf>
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	1d c1       	rjmp	.+570    	; 0x229a <main_fw_giveAway+0x828>

	} else if (msg[0] == PM_COMMAND_MINUSSIGN[0]) {
    2060:	8d 32       	cpi	r24, 0x2D	; 45
    2062:	31 f5       	brne	.+76     	; 0x20b0 <main_fw_giveAway+0x63e>
		/* correct the PWM value down */
		sscanf(((char*) msg) + 1, "%f", &mainPwmTerminalAdj);
    2064:	88 e8       	ldi	r24, 0x88	; 136
    2066:	95 e0       	ldi	r25, 0x05	; 5
    2068:	9f 93       	push	r25
    206a:	8f 93       	push	r24
    206c:	81 e1       	ldi	r24, 0x11	; 17
    206e:	91 e0       	ldi	r25, 0x01	; 1
    2070:	9f 93       	push	r25
    2072:	8f 93       	push	r24
    2074:	8e e7       	ldi	r24, 0x7E	; 126
    2076:	94 e0       	ldi	r25, 0x04	; 4
    2078:	9f 93       	push	r25
    207a:	8f 93       	push	r24
    207c:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <sscanf>
		mainPwmTerminalAdj = -mainPwmTerminalAdj;
    2080:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <mainPwmTerminalAdj>
    2084:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <mainPwmTerminalAdj+0x1>
    2088:	a0 91 8a 05 	lds	r26, 0x058A	; 0x80058a <mainPwmTerminalAdj+0x2>
    208c:	b0 91 8b 05 	lds	r27, 0x058B	; 0x80058b <mainPwmTerminalAdj+0x3>
    2090:	b0 58       	subi	r27, 0x80	; 128
    2092:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <mainPwmTerminalAdj>
    2096:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <mainPwmTerminalAdj+0x1>
    209a:	a0 93 8a 05 	sts	0x058A, r26	; 0x80058a <mainPwmTerminalAdj+0x2>
    209e:	b0 93 8b 05 	sts	0x058B, r27	; 0x80058b <mainPwmTerminalAdj+0x3>
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	f5 c0       	rjmp	.+490    	; 0x229a <main_fw_giveAway+0x828>

	} else {
		/* unknown command */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_INTERPRETER_UNKNOWN, sizeof(PM_INTERPRETER_UNKNOWN));
    20b0:	21 e3       	ldi	r18, 0x31	; 49
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	4c e5       	ldi	r20, 0x5C	; 92
    20b6:	58 e0       	ldi	r21, 0x08	; 8
    20b8:	6d e7       	ldi	r22, 0x7D	; 125
    20ba:	73 e0       	ldi	r23, 0x03	; 3
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		int len = snprintf((char*) mainPrepareBuffer, sizeof(mainPrepareBuffer) - 1, (char*) mainFormatBuffer, msg);
    20c2:	8d e7       	ldi	r24, 0x7D	; 125
    20c4:	94 e0       	ldi	r25, 0x04	; 4
    20c6:	9f 93       	push	r25
    20c8:	8f 93       	push	r24
    20ca:	8d e7       	ldi	r24, 0x7D	; 125
    20cc:	93 e0       	ldi	r25, 0x03	; 3
    20ce:	9f 93       	push	r25
    20d0:	8f 93       	push	r24
    20d2:	1f 92       	push	r1
    20d4:	8f e7       	ldi	r24, 0x7F	; 127
    20d6:	8f 93       	push	r24
    20d8:	8d ef       	ldi	r24, 0xFD	; 253
    20da:	93 e0       	ldi	r25, 0x03	; 3
    20dc:	9f 93       	push	r25
    20de:	8f 93       	push	r24
    20e0:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <snprintf>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    20e4:	28 2f       	mov	r18, r24
    20e6:	4d ef       	ldi	r20, 0xFD	; 253
    20e8:	53 e0       	ldi	r21, 0x03	; 3
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	ce c0       	rjmp	.+412    	; 0x229a <main_fw_giveAway+0x828>
#endif

				doInterpret(mainInterpreterBuffer, localMsgLen);								// message is clean to process
			}

		} else if (main_bf.mainHelpConcatNr && !(statusRcv & RINGBUFFER_MSG_STATUS_AVAIL)) {	// during help printing, go ahead when receive buffer is empty again
    20fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2102:	9f 70       	andi	r25, 0x0F	; 15
    2104:	11 f4       	brne	.+4      	; 0x210a <main_fw_giveAway+0x698>
    2106:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <main_fw_giveAway+0x1f98>
    210a:	80 ff       	sbrs	r24, 0
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <main_fw_giveAway+0x6a0>
    210e:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <main_fw_giveAway+0x1f98>
			ringbuffer_fw_freeSemaphore(true); isLocked = false;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	0e 94 10 20 	call	0x4020	; 0x4020 <ringbuffer_fw_freeSemaphore>

			switch (main_bf.mainHelpConcatNr) {
    2118:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    211c:	ef 70       	andi	r30, 0x0F	; 15
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	31 97       	sbiw	r30, 0x01	; 1
    2122:	ed 30       	cpi	r30, 0x0D	; 13
    2124:	f1 05       	cpc	r31, r1
    2126:	08 f0       	brcs	.+2      	; 0x212a <main_fw_giveAway+0x6b8>
    2128:	b3 c0       	rjmp	.+358    	; 0x2290 <main_fw_giveAway+0x81e>
    212a:	ec 5c       	subi	r30, 0xCC	; 204
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	0c 94 57 2f 	jmp	0x5eae	; 0x5eae <__tablejump2__>
			case 1:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP02, sizeof(PM_INTERPRETER_HELP02));
    2132:	2f e6       	ldi	r18, 0x6F	; 111
    2134:	4e e1       	ldi	r20, 0x1E	; 30
    2136:	5b e0       	ldi	r21, 0x0B	; 11
    2138:	61 e0       	ldi	r22, 0x01	; 1
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 2;
    2140:	e1 e0       	ldi	r30, 0x01	; 1
    2142:	f1 e0       	ldi	r31, 0x01	; 1
    2144:	80 81       	ld	r24, Z
    2146:	80 7f       	andi	r24, 0xF0	; 240
    2148:	82 60       	ori	r24, 0x02	; 2
    214a:	80 83       	st	Z, r24
    214c:	a6 c0       	rjmp	.+332    	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 2:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP03, sizeof(PM_INTERPRETER_HELP03));
    214e:	27 e6       	ldi	r18, 0x67	; 103
    2150:	47 eb       	ldi	r20, 0xB7	; 183
    2152:	5a e0       	ldi	r21, 0x0A	; 10
    2154:	61 e0       	ldi	r22, 0x01	; 1
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 3;
    215c:	e1 e0       	ldi	r30, 0x01	; 1
    215e:	f1 e0       	ldi	r31, 0x01	; 1
    2160:	80 81       	ld	r24, Z
    2162:	80 7f       	andi	r24, 0xF0	; 240
    2164:	83 60       	ori	r24, 0x03	; 3
    2166:	80 83       	st	Z, r24
    2168:	98 c0       	rjmp	.+304    	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 3:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP04, sizeof(PM_INTERPRETER_HELP04));
    216a:	2e e2       	ldi	r18, 0x2E	; 46
    216c:	49 e8       	ldi	r20, 0x89	; 137
    216e:	5a e0       	ldi	r21, 0x0A	; 10
    2170:	61 e0       	ldi	r22, 0x01	; 1
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 4;
    2178:	e1 e0       	ldi	r30, 0x01	; 1
    217a:	f1 e0       	ldi	r31, 0x01	; 1
    217c:	80 81       	ld	r24, Z
    217e:	80 7f       	andi	r24, 0xF0	; 240
    2180:	84 60       	ori	r24, 0x04	; 4
    2182:	80 83       	st	Z, r24
    2184:	8a c0       	rjmp	.+276    	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 4:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP05, sizeof(PM_INTERPRETER_HELP05));
    2186:	27 e1       	ldi	r18, 0x17	; 23
    2188:	42 e7       	ldi	r20, 0x72	; 114
    218a:	5a e0       	ldi	r21, 0x0A	; 10
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 5;
    2194:	e1 e0       	ldi	r30, 0x01	; 1
    2196:	f1 e0       	ldi	r31, 0x01	; 1
    2198:	80 81       	ld	r24, Z
    219a:	80 7f       	andi	r24, 0xF0	; 240
    219c:	85 60       	ori	r24, 0x05	; 5
    219e:	80 83       	st	Z, r24
    21a0:	7c c0       	rjmp	.+248    	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 5:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP06, sizeof(PM_INTERPRETER_HELP06));
    21a2:	2b e2       	ldi	r18, 0x2B	; 43
    21a4:	47 e4       	ldi	r20, 0x47	; 71
    21a6:	5a e0       	ldi	r21, 0x0A	; 10
    21a8:	61 e0       	ldi	r22, 0x01	; 1
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 6;
    21b0:	e1 e0       	ldi	r30, 0x01	; 1
    21b2:	f1 e0       	ldi	r31, 0x01	; 1
    21b4:	80 81       	ld	r24, Z
    21b6:	80 7f       	andi	r24, 0xF0	; 240
    21b8:	86 60       	ori	r24, 0x06	; 6
    21ba:	80 83       	st	Z, r24
    21bc:	6e c0       	rjmp	.+220    	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 6:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP07, sizeof(PM_INTERPRETER_HELP07));
    21be:	2f e3       	ldi	r18, 0x3F	; 63
    21c0:	48 e0       	ldi	r20, 0x08	; 8
    21c2:	5a e0       	ldi	r21, 0x0A	; 10
    21c4:	61 e0       	ldi	r22, 0x01	; 1
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 7;
    21cc:	e1 e0       	ldi	r30, 0x01	; 1
    21ce:	f1 e0       	ldi	r31, 0x01	; 1
    21d0:	80 81       	ld	r24, Z
    21d2:	80 7f       	andi	r24, 0xF0	; 240
    21d4:	87 60       	ori	r24, 0x07	; 7
    21d6:	80 83       	st	Z, r24
    21d8:	60 c0       	rjmp	.+192    	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 7:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP08, sizeof(PM_INTERPRETER_HELP08));
    21da:	2c e2       	ldi	r18, 0x2C	; 44
    21dc:	4c ed       	ldi	r20, 0xDC	; 220
    21de:	59 e0       	ldi	r21, 0x09	; 9
    21e0:	61 e0       	ldi	r22, 0x01	; 1
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 8;
    21e8:	e1 e0       	ldi	r30, 0x01	; 1
    21ea:	f1 e0       	ldi	r31, 0x01	; 1
    21ec:	80 81       	ld	r24, Z
    21ee:	80 7f       	andi	r24, 0xF0	; 240
    21f0:	88 60       	ori	r24, 0x08	; 8
    21f2:	80 83       	st	Z, r24
    21f4:	52 c0       	rjmp	.+164    	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 8:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP09, sizeof(PM_INTERPRETER_HELP09));
    21f6:	25 e5       	ldi	r18, 0x55	; 85
    21f8:	47 e8       	ldi	r20, 0x87	; 135
    21fa:	59 e0       	ldi	r21, 0x09	; 9
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 9;
    2204:	e1 e0       	ldi	r30, 0x01	; 1
    2206:	f1 e0       	ldi	r31, 0x01	; 1
    2208:	80 81       	ld	r24, Z
    220a:	80 7f       	andi	r24, 0xF0	; 240
    220c:	89 60       	ori	r24, 0x09	; 9
    220e:	80 83       	st	Z, r24
    2210:	44 c0       	rjmp	.+136    	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 9:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP10, sizeof(PM_INTERPRETER_HELP10));
    2212:	28 e2       	ldi	r18, 0x28	; 40
    2214:	4f e5       	ldi	r20, 0x5F	; 95
    2216:	59 e0       	ldi	r21, 0x09	; 9
    2218:	61 e0       	ldi	r22, 0x01	; 1
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 10;
    2220:	e1 e0       	ldi	r30, 0x01	; 1
    2222:	f1 e0       	ldi	r31, 0x01	; 1
    2224:	80 81       	ld	r24, Z
    2226:	80 7f       	andi	r24, 0xF0	; 240
    2228:	8a 60       	ori	r24, 0x0A	; 10
    222a:	80 83       	st	Z, r24
    222c:	36 c0       	rjmp	.+108    	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 10:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP11, sizeof(PM_INTERPRETER_HELP11));
    222e:	2f e1       	ldi	r18, 0x1F	; 31
    2230:	40 e4       	ldi	r20, 0x40	; 64
    2232:	59 e0       	ldi	r21, 0x09	; 9
    2234:	61 e0       	ldi	r22, 0x01	; 1
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 11;
    223c:	e1 e0       	ldi	r30, 0x01	; 1
    223e:	f1 e0       	ldi	r31, 0x01	; 1
    2240:	80 81       	ld	r24, Z
    2242:	80 7f       	andi	r24, 0xF0	; 240
    2244:	8b 60       	ori	r24, 0x0B	; 11
    2246:	80 83       	st	Z, r24
    2248:	28 c0       	rjmp	.+80     	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 11:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP12, sizeof(PM_INTERPRETER_HELP12));
    224a:	24 e7       	ldi	r18, 0x74	; 116
    224c:	4c ec       	ldi	r20, 0xCC	; 204
    224e:	58 e0       	ldi	r21, 0x08	; 8
    2250:	61 e0       	ldi	r22, 0x01	; 1
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 12;
    2258:	e1 e0       	ldi	r30, 0x01	; 1
    225a:	f1 e0       	ldi	r31, 0x01	; 1
    225c:	80 81       	ld	r24, Z
    225e:	80 7f       	andi	r24, 0xF0	; 240
    2260:	8c 60       	ori	r24, 0x0C	; 12
    2262:	80 83       	st	Z, r24
    2264:	1a c0       	rjmp	.+52     	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 12:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP13, sizeof(PM_INTERPRETER_HELP13));
    2266:	20 e3       	ldi	r18, 0x30	; 48
    2268:	4c e9       	ldi	r20, 0x9C	; 156
    226a:	58 e0       	ldi	r21, 0x08	; 8
    226c:	61 e0       	ldi	r22, 0x01	; 1
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 13;
    2274:	e1 e0       	ldi	r30, 0x01	; 1
    2276:	f1 e0       	ldi	r31, 0x01	; 1
    2278:	80 81       	ld	r24, Z
    227a:	80 7f       	andi	r24, 0xF0	; 240
    227c:	8d 60       	ori	r24, 0x0D	; 13
    227e:	80 83       	st	Z, r24
    2280:	0c c0       	rjmp	.+24     	; 0x229a <main_fw_giveAway+0x828>
				break;

			case 13:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP14, sizeof(PM_INTERPRETER_HELP14));
    2282:	2f e0       	ldi	r18, 0x0F	; 15
    2284:	4d e8       	ldi	r20, 0x8D	; 141
    2286:	58 e0       	ldi	r21, 0x08	; 8
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
				// no break
			default:
				main_bf.mainHelpConcatNr = 0;
    2290:	e1 e0       	ldi	r30, 0x01	; 1
    2292:	f1 e0       	ldi	r31, 0x01	; 1
    2294:	80 81       	ld	r24, Z
    2296:	80 7f       	andi	r24, 0xF0	; 240
    2298:	80 83       	st	Z, r24
	uint16_t localStampICR1;
	uint8_t len = 0;

	{
		/* get the timers */
		uint8_t sreg = SREG;
    229a:	9f b7       	in	r25, 0x3f	; 63
		cli();
    229c:	f8 94       	cli

		/* get the current ms and ticks timer */
		uint8_t localTCNT1L = TCNT1L;						// low byte first
    229e:	70 90 84 00 	lds	r7, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		uint8_t localTCNT1H = TCNT1H;
    22a2:	60 90 85 00 	lds	r6, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		localFastCtr1ms = fastCtr1ms;						// make a copy of the running clock
    22a6:	c0 90 24 05 	lds	r12, 0x0524	; 0x800524 <fastCtr1ms>
    22aa:	d0 90 25 05 	lds	r13, 0x0525	; 0x800525 <fastCtr1ms+0x1>
    22ae:	e0 90 26 05 	lds	r14, 0x0526	; 0x800526 <fastCtr1ms+0x2>
    22b2:	f0 90 27 05 	lds	r15, 0x0527	; 0x800527 <fastCtr1ms+0x3>

		/* get the last stamped time as ms and ticks */
		uint8_t localICR1L = ICR1L;							// low byte first
    22b6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		uint8_t localICR1H = ICR1H;
    22ba:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock
    22be:	40 91 28 05 	lds	r20, 0x0528	; 0x800528 <fastStampCtr1ms>
    22c2:	50 91 29 05 	lds	r21, 0x0529	; 0x800529 <fastStampCtr1ms+0x1>
    22c6:	60 91 2a 05 	lds	r22, 0x052A	; 0x80052a <fastStampCtr1ms+0x2>
    22ca:	70 91 2b 05 	lds	r23, 0x052B	; 0x80052b <fastStampCtr1ms+0x3>

		SREG = sreg;
    22ce:	9f bf       	out	0x3f, r25	; 63

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
		localStampICR1	= localICR1L  | (localICR1H  << 8);
	}

	if (localAdcConvertNowCntrLast != acAdcConvertNowCntr) {  // a new PPS impulse has arrived
    22d0:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <acAdcConvertNowCntr>
    22d4:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <localAdcConvertNowCntrLast.2841>
    22d8:	29 17       	cp	r18, r25
    22da:	d9 f1       	breq	.+118    	; 0x2352 <main_fw_giveAway+0x8e0>
		localAdcConvertNowCntrLast = acAdcConvertNowCntr;
    22dc:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <localAdcConvertNowCntrLast.2841>
		localNoPpsCnt = 0;
    22e0:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <localNoPpsCnt.2843>

		ppsStampCtr1ms_last = ppsStampCtr1ms;
    22e4:	80 90 78 05 	lds	r8, 0x0578	; 0x800578 <ppsStampCtr1ms>
    22e8:	90 90 79 05 	lds	r9, 0x0579	; 0x800579 <ppsStampCtr1ms+0x1>
    22ec:	a0 90 7a 05 	lds	r10, 0x057A	; 0x80057a <ppsStampCtr1ms+0x2>
    22f0:	b0 90 7b 05 	lds	r11, 0x057B	; 0x80057b <ppsStampCtr1ms+0x3>
    22f4:	80 92 72 05 	sts	0x0572, r8	; 0x800572 <ppsStampCtr1ms_last>
    22f8:	90 92 73 05 	sts	0x0573, r9	; 0x800573 <ppsStampCtr1ms_last+0x1>
    22fc:	a0 92 74 05 	sts	0x0574, r10	; 0x800574 <ppsStampCtr1ms_last+0x2>
    2300:	b0 92 75 05 	sts	0x0575, r11	; 0x800575 <ppsStampCtr1ms_last+0x3>
		ppsStampICR1_last   = ppsStampICR1;
    2304:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <ppsStampICR1>
    2308:	f0 91 77 05 	lds	r31, 0x0577	; 0x800577 <ppsStampICR1+0x1>
    230c:	f0 93 71 05 	sts	0x0571, r31	; 0x800571 <ppsStampICR1_last+0x1>
    2310:	e0 93 70 05 	sts	0x0570, r30	; 0x800570 <ppsStampICR1_last>

		ppsStampCtr1ms = localStampCtr1ms;
    2314:	66 27       	eor	r22, r22
    2316:	77 27       	eor	r23, r23
    2318:	40 93 78 05 	sts	0x0578, r20	; 0x800578 <ppsStampCtr1ms>
    231c:	50 93 79 05 	sts	0x0579, r21	; 0x800579 <ppsStampCtr1ms+0x1>
    2320:	60 93 7a 05 	sts	0x057A, r22	; 0x80057a <ppsStampCtr1ms+0x2>
    2324:	70 93 7b 05 	sts	0x057B, r23	; 0x80057b <ppsStampCtr1ms+0x3>
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock

		SREG = sreg;

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
		localStampICR1	= localICR1L  | (localICR1H  << 8);
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	93 2b       	or	r25, r19

		ppsStampCtr1ms_last = ppsStampCtr1ms;
		ppsStampICR1_last   = ppsStampICR1;

		ppsStampCtr1ms = localStampCtr1ms;
		ppsStampICR1   = localStampICR1;
    232c:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <ppsStampICR1+0x1>
    2330:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <ppsStampICR1>

		/* reload timer */
		localFastCtr1ms_next = localFastCtr1ms + LocalCtr1sSpanMs + LocalCtr250msBorderMs;
    2334:	d7 01       	movw	r26, r14
    2336:	c6 01       	movw	r24, r12
    2338:	8e 51       	subi	r24, 0x1E	; 30
    233a:	9b 4f       	sbci	r25, 0xFB	; 251
    233c:	af 4f       	sbci	r26, 0xFF	; 255
    233e:	bf 4f       	sbci	r27, 0xFF	; 255
    2340:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <localFastCtr1ms_next.2842>
    2344:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <localFastCtr1ms_next.2842+0x1>
    2348:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <localFastCtr1ms_next.2842+0x2>
    234c:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <localFastCtr1ms_next.2842+0x3>
    2350:	5f c0       	rjmp	.+190    	; 0x2410 <main_fw_giveAway+0x99e>

	} else if (localFastCtr1ms >= localFastCtr1ms_next) {  	// the timer has elapsed without a PPS impulse
    2352:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <localFastCtr1ms_next.2842>
    2356:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <localFastCtr1ms_next.2842+0x1>
    235a:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <localFastCtr1ms_next.2842+0x2>
    235e:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <localFastCtr1ms_next.2842+0x3>
    2362:	c8 16       	cp	r12, r24
    2364:	d9 06       	cpc	r13, r25
    2366:	ea 06       	cpc	r14, r26
    2368:	fb 06       	cpc	r15, r27
    236a:	c0 f1       	brcs	.+112    	; 0x23dc <main_fw_giveAway+0x96a>
		if (++localNoPpsCnt > 180) {
    236c:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <localNoPpsCnt.2843>
    2370:	2f 5f       	subi	r18, 0xFF	; 255
    2372:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <localNoPpsCnt.2843>
    2376:	25 3b       	cpi	r18, 0xB5	; 181
    2378:	20 f0       	brcs	.+8      	; 0x2382 <main_fw_giveAway+0x910>
			localNoPpsCnt = 180;							// clamp to 3 minutes
    237a:	24 eb       	ldi	r18, 0xB4	; 180
    237c:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <localNoPpsCnt.2843>
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <main_fw_giveAway+0x914>
		}
		if (localNoPpsCnt >= 5) {
    2382:	25 30       	cpi	r18, 0x05	; 5
    2384:	50 f0       	brcs	.+20     	; 0x239a <main_fw_giveAway+0x928>
			mainRefClkState = REFCLK_STATE_NOSYNC;			// reset clock state when at least 5 seconds without a reference signal
    2386:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <mainRefClkState>
			mainPpm = 0.0f;
    238a:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <mainPpm>
    238e:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <mainPpm+0x1>
    2392:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <mainPpm+0x2>
    2396:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <mainPpm+0x3>
		}

		if ((localFastCtr1ms_next + LocalCtr1sSpanMs) > localFastCtr1ms) {
    239a:	88 51       	subi	r24, 0x18	; 24
    239c:	9c 4f       	sbci	r25, 0xFC	; 252
    239e:	af 4f       	sbci	r26, 0xFF	; 255
    23a0:	bf 4f       	sbci	r27, 0xFF	; 255
    23a2:	c8 16       	cp	r12, r24
    23a4:	d9 06       	cpc	r13, r25
    23a6:	ea 06       	cpc	r14, r26
    23a8:	fb 06       	cpc	r15, r27
    23aa:	48 f4       	brcc	.+18     	; 0x23be <main_fw_giveAway+0x94c>
			/* adjust */
			localFastCtr1ms_next += LocalCtr1sSpanMs;		// +1 second
    23ac:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <localFastCtr1ms_next.2842>
    23b0:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <localFastCtr1ms_next.2842+0x1>
    23b4:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <localFastCtr1ms_next.2842+0x2>
    23b8:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <localFastCtr1ms_next.2842+0x3>
    23bc:	29 c0       	rjmp	.+82     	; 0x2410 <main_fw_giveAway+0x99e>

		} else {
			/* reload / initial timer */
			localFastCtr1ms_next = localFastCtr1ms + LocalCtr1sSpanMs + LocalCtr250msBorderMs;
    23be:	d7 01       	movw	r26, r14
    23c0:	c6 01       	movw	r24, r12
    23c2:	8e 51       	subi	r24, 0x1E	; 30
    23c4:	9b 4f       	sbci	r25, 0xFB	; 251
    23c6:	af 4f       	sbci	r26, 0xFF	; 255
    23c8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ca:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <localFastCtr1ms_next.2842>
    23ce:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <localFastCtr1ms_next.2842+0x1>
    23d2:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <localFastCtr1ms_next.2842+0x2>
    23d6:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <localFastCtr1ms_next.2842+0x3>
    23da:	1a c0       	rjmp	.+52     	; 0x2410 <main_fw_giveAway+0x99e>
		}

	} else {
		/* nothing has happened - do some bulk data if a job is ready to be done */

		if (serialCtxtBufferState == SERIAL_CTXT_BUFFER_STATE_SEND) {
    23dc:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <serialCtxtBufferState>
    23e0:	82 30       	cpi	r24, 0x02	; 2
    23e2:	91 f4       	brne	.+36     	; 0x2408 <main_fw_giveAway+0x996>
			main_fw_parseNmeaLineData();
    23e4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <main_fw_parseNmeaLineData>

			/* if serial data from the GPS module is required, send it to USB in-port */
			if (main_bf.mainIsSerComm) {
    23e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    23ec:	83 ff       	sbrs	r24, 3
    23ee:	08 c0       	rjmp	.+16     	; 0x2400 <main_fw_giveAway+0x98e>
				ringbuffer_fw_ringBufferWaitAppend(false, false, serialCtxtRxBuffer, serialCtxtRxBufferLen);
    23f0:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <serialCtxtRxBufferLen>
    23f4:	4f ef       	ldi	r20, 0xFF	; 255
    23f6:	51 e0       	ldi	r21, 0x01	; 1
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
			}

			/* mark the serial buffer as to be ready again for receiving GPS data */
			serialCtxtRxBufferLen = 0;
    2400:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <serialCtxtRxBufferLen>
			serialCtxtBufferState = 0;
    2404:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <serialCtxtBufferState>
		}

		/* PWM offset due to phase accumulator */
		calcPhaseResidue();
    2408:	0e 94 c6 0a 	call	0x158c	; 0x158c <calcPhaseResidue>
    240c:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <main_fw_giveAway+0x2070>
	 *
	 * 1)	Linker option:		--Wl,-u,vfprintf  --Wl,-u,vfscanf
	 * 2)	Linker libraries:	-lm  -lprintf_flt  -lscanf_flt
	 */

	if (mainGpsInitVal) {
    2410:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mainGpsInitVal>
    2414:	88 23       	and	r24, r24
    2416:	91 f1       	breq	.+100    	; 0x247c <main_fw_giveAway+0xa0a>
		/* activate GPS module for GPS / GALILEO / QZSS as well as GLONASS reception */

		mainGpsInitVal++;
    2418:	8f 5f       	subi	r24, 0xFF	; 255
    241a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mainGpsInitVal>
		if (5 == mainGpsInitVal) {  // XXX init of GPS-Module is here
    241e:	85 30       	cpi	r24, 0x05	; 5
    2420:	39 f4       	brne	.+14     	; 0x2430 <main_fw_giveAway+0x9be>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WARM_RESTART, sizeof(PM_FORMAT_GPS_WARM_RESTART));
    2422:	4e e0       	ldi	r20, 0x0E	; 14
    2424:	6c e0       	ldi	r22, 0x0C	; 12
    2426:	78 e0       	ldi	r23, 0x08	; 8
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 6f 22 	call	0x44de	; 0x44de <serial_fw_copyAndSendNmea>
    242e:	26 c0       	rjmp	.+76     	; 0x247c <main_fw_giveAway+0xa0a>

		} else if (10 == mainGpsInitVal) {
    2430:	8a 30       	cpi	r24, 0x0A	; 10
    2432:	39 f4       	brne	.+14     	; 0x2442 <main_fw_giveAway+0x9d0>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST0_EAST0, sizeof(PM_FORMAT_GPS_WEST0_EAST0));  // disable all GNSS systems
    2434:	42 e1       	ldi	r20, 0x12	; 18
    2436:	6a ee       	ldi	r22, 0xEA	; 234
    2438:	77 e0       	ldi	r23, 0x07	; 7
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	0e 94 6f 22 	call	0x44de	; 0x44de <serial_fw_copyAndSendNmea>
    2440:	1d c0       	rjmp	.+58     	; 0x247c <main_fw_giveAway+0xa0a>

		} else if (11 == mainGpsInitVal) {
    2442:	8b 30       	cpi	r24, 0x0B	; 11
    2444:	39 f4       	brne	.+14     	; 0x2454 <main_fw_giveAway+0x9e2>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST0, sizeof(PM_FORMAT_GPS_WEST1_EAST0));  // activate GPS, QZSS & Galileo
    2446:	42 e1       	ldi	r20, 0x12	; 18
    2448:	68 ed       	ldi	r22, 0xD8	; 216
    244a:	77 e0       	ldi	r23, 0x07	; 7
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	0e 94 6f 22 	call	0x44de	; 0x44de <serial_fw_copyAndSendNmea>
    2452:	14 c0       	rjmp	.+40     	; 0x247c <main_fw_giveAway+0xa0a>

		} else if (12 == mainGpsInitVal) {
    2454:	8c 30       	cpi	r24, 0x0C	; 12
    2456:	39 f4       	brne	.+14     	; 0x2466 <main_fw_giveAway+0x9f4>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST1, sizeof(PM_FORMAT_GPS_WEST1_EAST1));  // activate GLONASS also
    2458:	42 e1       	ldi	r20, 0x12	; 18
    245a:	66 ec       	ldi	r22, 0xC6	; 198
    245c:	77 e0       	ldi	r23, 0x07	; 7
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	0e 94 6f 22 	call	0x44de	; 0x44de <serial_fw_copyAndSendNmea>
    2464:	0b c0       	rjmp	.+22     	; 0x247c <main_fw_giveAway+0xa0a>

		} else if (70 == mainGpsInitVal) {
    2466:	86 34       	cpi	r24, 0x46	; 70
    2468:	49 f4       	brne	.+18     	; 0x247c <main_fw_giveAway+0xa0a>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST1, sizeof(PM_FORMAT_GPS_WEST1_EAST1));  // activate GLONASS also (sent every minute)
    246a:	42 e1       	ldi	r20, 0x12	; 18
    246c:	66 ec       	ldi	r22, 0xC6	; 198
    246e:	77 e0       	ldi	r23, 0x07	; 7
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	0e 94 6f 22 	call	0x44de	; 0x44de <serial_fw_copyAndSendNmea>
			mainGpsInitVal = 10;
    2476:	8a e0       	ldi	r24, 0x0A	; 10
    2478:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mainGpsInitVal>
		}
	}

	mainAdcPullVolts	= ( acAdcCh[ADC_CH_PWMPULL] * mainCoef_b01_ref_AREF_V) / 1024.0f;
    247c:	07 e7       	ldi	r16, 0x77	; 119
    247e:	13 e0       	ldi	r17, 0x03	; 3
    2480:	d8 01       	movw	r26, r16
    2482:	6d 91       	ld	r22, X+
    2484:	7c 91       	ld	r23, X
    2486:	80 90 ad 05 	lds	r8, 0x05AD	; 0x8005ad <mainCoef_b01_ref_AREF_V>
    248a:	90 90 ae 05 	lds	r9, 0x05AE	; 0x8005ae <mainCoef_b01_ref_AREF_V+0x1>
    248e:	a0 90 af 05 	lds	r10, 0x05AF	; 0x8005af <mainCoef_b01_ref_AREF_V+0x2>
    2492:	b0 90 b0 05 	lds	r11, 0x05B0	; 0x8005b0 <mainCoef_b01_ref_AREF_V+0x3>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 23 2c 	call	0x5846	; 0x5846 <__floatunsisf>
    249e:	a5 01       	movw	r20, r10
    24a0:	94 01       	movw	r18, r8
    24a2:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e8       	ldi	r20, 0x80	; 128
    24ac:	5a e3       	ldi	r21, 0x3A	; 58
    24ae:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    24b2:	60 93 68 05 	sts	0x0568, r22	; 0x800568 <mainAdcPullVolts>
    24b6:	70 93 69 05 	sts	0x0569, r23	; 0x800569 <mainAdcPullVolts+0x1>
    24ba:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <mainAdcPullVolts+0x2>
    24be:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <mainAdcPullVolts+0x3>
	mainAdcPhaseVolts	= ( acAdcCh[ADC_CH_PHASE]	* mainCoef_b01_ref_AREF_V) / 1024.0f;
    24c2:	f8 01       	movw	r30, r16
    24c4:	62 81       	ldd	r22, Z+2	; 0x02
    24c6:	73 81       	ldd	r23, Z+3	; 0x03
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	0e 94 23 2c 	call	0x5846	; 0x5846 <__floatunsisf>
    24d0:	9b 01       	movw	r18, r22
    24d2:	ac 01       	movw	r20, r24
    24d4:	c5 01       	movw	r24, r10
    24d6:	b4 01       	movw	r22, r8
    24d8:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5a e3       	ldi	r21, 0x3A	; 58
    24e4:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    24e8:	60 93 64 05 	sts	0x0564, r22	; 0x800564 <mainAdcPhaseVolts>
    24ec:	70 93 65 05 	sts	0x0565, r23	; 0x800565 <mainAdcPhaseVolts+0x1>
    24f0:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <mainAdcPhaseVolts+0x2>
    24f4:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <mainAdcPhaseVolts+0x3>
	mainAdcTemp			= ((acAdcCh[ADC_CH_TEMP]	- mainCoef_b01_temp_ofs_adc_25C_steps) * mainCoef_b01_temp_k_p1step_adc_K) + 25.0f;
    24f8:	d8 01       	movw	r26, r16
    24fa:	14 96       	adiw	r26, 0x04	; 4
    24fc:	6d 91       	ld	r22, X+
    24fe:	7c 91       	ld	r23, X
    2500:	15 97       	sbiw	r26, 0x05	; 5
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 23 2c 	call	0x5846	; 0x5846 <__floatunsisf>
    250a:	20 91 a5 05 	lds	r18, 0x05A5	; 0x8005a5 <mainCoef_b01_temp_ofs_adc_25C_steps>
    250e:	30 91 a6 05 	lds	r19, 0x05A6	; 0x8005a6 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    2512:	40 91 a7 05 	lds	r20, 0x05A7	; 0x8005a7 <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    2516:	50 91 a8 05 	lds	r21, 0x05A8	; 0x8005a8 <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>
    251a:	0e 94 10 2b 	call	0x5620	; 0x5620 <__subsf3>
    251e:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <mainCoef_b01_temp_k_p1step_adc_K>
    2522:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    2526:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    252a:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
    252e:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	48 ec       	ldi	r20, 0xC8	; 200
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    253e:	60 93 60 05 	sts	0x0560, r22	; 0x800560 <mainAdcTemp>
    2542:	70 93 61 05 	sts	0x0561, r23	; 0x800561 <mainAdcTemp+0x1>
    2546:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <mainAdcTemp+0x2>
    254a:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <mainAdcTemp+0x3>

	if (main_bf.mainIsTimerTest) {
    254e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2552:	82 ff       	sbrs	r24, 2
    2554:	4e c2       	rjmp	.+1180   	; 0x29f2 <main_fw_giveAway+0xf80>
		/* print NMEA data */
		memory_fw_copyBuffer(true, mainPrepareBuffer, PM_FORMAT_GP00, sizeof(PM_FORMAT_GP00) + 1);
    2556:	21 e1       	ldi	r18, 0x11	; 17
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	46 eb       	ldi	r20, 0xB6	; 182
    255c:	57 e0       	ldi	r21, 0x07	; 7
    255e:	6d ef       	ldi	r22, 0xFD	; 253
    2560:	73 e0       	ldi	r23, 0x03	; 3
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, sizeof(PM_FORMAT_GP00) + 1);
    2568:	21 e1       	ldi	r18, 0x11	; 17
    256a:	4d ef       	ldi	r20, 0xFD	; 253
    256c:	53 e0       	ldi	r21, 0x03	; 3
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP01, sizeof(PM_FORMAT_GP01));
    2576:	28 e2       	ldi	r18, 0x28	; 40
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4e e8       	ldi	r20, 0x8E	; 142
    257c:	57 e0       	ldi	r21, 0x07	; 7
    257e:	6d e7       	ldi	r22, 0x7D	; 125
    2580:	73 e0       	ldi	r23, 0x03	; 3
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2588:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <main_nmeaTimeUtcMilsec+0x1>
    258c:	8f 93       	push	r24
    258e:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <main_nmeaTimeUtcMilsec>
    2592:	8f 93       	push	r24
    2594:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <main_nmeaTimeUtcInt+0x3>
    2598:	8f 93       	push	r24
    259a:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <main_nmeaTimeUtcInt+0x2>
    259e:	8f 93       	push	r24
    25a0:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <main_nmeaTimeUtcInt+0x1>
    25a4:	8f 93       	push	r24
    25a6:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <main_nmeaTimeUtcInt>
    25aa:	8f 93       	push	r24
    25ac:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <main_nmeaDate+0x3>
    25b0:	8f 93       	push	r24
    25b2:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <main_nmeaDate+0x2>
    25b6:	8f 93       	push	r24
    25b8:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <main_nmeaDate+0x1>
    25bc:	8f 93       	push	r24
    25be:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <main_nmeaDate>
    25c2:	8f 93       	push	r24
    25c4:	0f 2e       	mov	r0, r31
    25c6:	fd e7       	ldi	r31, 0x7D	; 125
    25c8:	af 2e       	mov	r10, r31
    25ca:	f3 e0       	ldi	r31, 0x03	; 3
    25cc:	bf 2e       	mov	r11, r31
    25ce:	f0 2d       	mov	r31, r0
    25d0:	bf 92       	push	r11
    25d2:	af 92       	push	r10
    25d4:	0d ef       	ldi	r16, 0xFD	; 253
    25d6:	13 e0       	ldi	r17, 0x03	; 3
    25d8:	1f 93       	push	r17
    25da:	0f 93       	push	r16
    25dc:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				main_nmeaDate,
				main_nmeaTimeUtcInt,
				main_nmeaTimeUtcMilsec);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    25e0:	28 2f       	mov	r18, r24
    25e2:	a8 01       	movw	r20, r16
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP02, sizeof(PM_FORMAT_GP02));
    25ec:	25 e2       	ldi	r18, 0x25	; 37
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	49 e6       	ldi	r20, 0x69	; 105
    25f2:	57 e0       	ldi	r21, 0x07	; 7
    25f4:	b5 01       	movw	r22, r10
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    25fc:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <main_nmeaPosFixIndicator+0x1>
    2600:	8f 93       	push	r24
    2602:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <main_nmeaPosFixIndicator>
    2606:	8f 93       	push	r24
    2608:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <main_nmeaMode2+0x1>
    260c:	8f 93       	push	r24
    260e:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <main_nmeaMode2>
    2612:	8f 93       	push	r24
    2614:	bf 92       	push	r11
    2616:	af 92       	push	r10
    2618:	1f 93       	push	r17
    261a:	0f 93       	push	r16
    261c:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				main_nmeaMode2,
				main_nmeaPosFixIndicator);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2620:	28 2f       	mov	r18, r24
    2622:	a8 01       	movw	r20, r16
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP03, sizeof(PM_FORMAT_GP03));
    262c:	23 e5       	ldi	r18, 0x53	; 83
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	46 e1       	ldi	r20, 0x16	; 22
    2632:	57 e0       	ldi	r21, 0x07	; 7
    2634:	b5 01       	movw	r22, r10
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    263c:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <main_nmeaSatsEphemerisGlonass+0x1>
    2640:	8f 93       	push	r24
    2642:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <main_nmeaSatsEphemerisGlonass>
    2646:	8f 93       	push	r24
    2648:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <main_nmeaSatsEphemerisGpsGalileoQzss+0x1>
    264c:	8f 93       	push	r24
    264e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <main_nmeaSatsEphemerisGpsGalileoQzss>
    2652:	8f 93       	push	r24
    2654:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <main_nmeaSatsUsed+0x1>
    2658:	8f 93       	push	r24
    265a:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <main_nmeaSatsUsed>
    265e:	8f 93       	push	r24
    2660:	bf 92       	push	r11
    2662:	af 92       	push	r10
    2664:	1f 93       	push	r17
    2666:	0f 93       	push	r16
    2668:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				main_nmeaSatsUsed,
				main_nmeaSatsEphemerisGpsGalileoQzss,
				main_nmeaSatsEphemerisGlonass);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	28 2f       	mov	r18, r24
    2678:	a8 01       	movw	r20, r16
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP04, sizeof(PM_FORMAT_GP04));
    2682:	2f e2       	ldi	r18, 0x2F	; 47
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	47 ee       	ldi	r20, 0xE7	; 231
    2688:	56 e0       	ldi	r21, 0x06	; 6
    268a:	b5 01       	movw	r22, r10
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2692:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <main_nmeaVdop+0x3>
    2696:	8f 93       	push	r24
    2698:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <main_nmeaVdop+0x2>
    269c:	8f 93       	push	r24
    269e:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <main_nmeaVdop+0x1>
    26a2:	8f 93       	push	r24
    26a4:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <main_nmeaVdop>
    26a8:	8f 93       	push	r24
    26aa:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <main_nmeaHdop+0x3>
    26ae:	8f 93       	push	r24
    26b0:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <main_nmeaHdop+0x2>
    26b4:	8f 93       	push	r24
    26b6:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <main_nmeaHdop+0x1>
    26ba:	8f 93       	push	r24
    26bc:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <main_nmeaHdop>
    26c0:	8f 93       	push	r24
    26c2:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <main_nmeaPdop+0x3>
    26c6:	8f 93       	push	r24
    26c8:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <main_nmeaPdop+0x2>
    26cc:	8f 93       	push	r24
    26ce:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <main_nmeaPdop+0x1>
    26d2:	8f 93       	push	r24
    26d4:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <main_nmeaPdop>
    26d8:	8f 93       	push	r24
    26da:	bf 92       	push	r11
    26dc:	af 92       	push	r10
    26de:	1f 93       	push	r17
    26e0:	0f 93       	push	r16
    26e2:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				main_nmeaPdop,
				main_nmeaHdop,
				main_nmeaVdop);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    26e6:	28 2f       	mov	r18, r24
    26e8:	a8 01       	movw	r20, r16
    26ea:	60 e0       	ldi	r22, 0x00	; 0
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
    26f2:	2b e3       	ldi	r18, 0x3B	; 59
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	4c ea       	ldi	r20, 0xAC	; 172
    26f8:	56 e0       	ldi	r21, 0x06	; 6
    26fa:	b5 01       	movw	r22, r10
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2702:	10 91 32 05 	lds	r17, 0x0532	; 0x800532 <main_nmeaAltitudeM>
    2706:	00 91 33 05 	lds	r16, 0x0533	; 0x800533 <main_nmeaAltitudeM+0x1>
    270a:	b0 90 34 05 	lds	r11, 0x0534	; 0x800534 <main_nmeaAltitudeM+0x2>
    270e:	a0 90 35 05 	lds	r10, 0x0535	; 0x800535 <main_nmeaAltitudeM+0x3>
    2712:	e0 91 37 05 	lds	r30, 0x0537	; 0x800537 <main_nmeaPosLon>
    2716:	f0 91 38 05 	lds	r31, 0x0538	; 0x800538 <main_nmeaPosLon+0x1>
    271a:	a0 91 39 05 	lds	r26, 0x0539	; 0x800539 <main_nmeaPosLon+0x2>
    271e:	b0 91 3a 05 	lds	r27, 0x053A	; 0x80053a <main_nmeaPosLon+0x3>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
				main_nmeaPosLat,
				(main_nmeaPosLonSign > 0 ?  main_nmeaPosLonSign : '-'),
    2722:	20 91 36 05 	lds	r18, 0x0536	; 0x800536 <main_nmeaPosLonSign>
				main_nmeaHdop,
				main_nmeaVdop);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	22 23       	and	r18, r18
    2732:	11 f0       	breq	.+4      	; 0x2738 <main_fw_giveAway+0xcc6>
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	02 c0       	rjmp	.+4      	; 0x273c <main_fw_giveAway+0xcca>
    2738:	2d e2       	ldi	r18, 0x2D	; 45
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 91 3c 05 	lds	r20, 0x053C	; 0x80053c <main_nmeaPosLat>
    2740:	50 91 3d 05 	lds	r21, 0x053D	; 0x80053d <main_nmeaPosLat+0x1>
    2744:	60 91 3e 05 	lds	r22, 0x053E	; 0x80053e <main_nmeaPosLat+0x2>
    2748:	70 91 3f 05 	lds	r23, 0x053F	; 0x80053f <main_nmeaPosLat+0x3>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
    274c:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <main_nmeaPosLatSign>
				main_nmeaHdop,
				main_nmeaVdop);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2750:	88 23       	and	r24, r24
    2752:	11 f0       	breq	.+4      	; 0x2758 <main_fw_giveAway+0xce6>
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	02 c0       	rjmp	.+4      	; 0x275c <main_fw_giveAway+0xcea>
    2758:	8d e2       	ldi	r24, 0x2D	; 45
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	af 92       	push	r10
    275e:	bf 92       	push	r11
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	bf 93       	push	r27
    2766:	af 93       	push	r26
    2768:	ff 93       	push	r31
    276a:	ef 93       	push	r30
    276c:	3f 93       	push	r19
    276e:	2f 93       	push	r18
    2770:	7f 93       	push	r23
    2772:	6f 93       	push	r22
    2774:	5f 93       	push	r21
    2776:	4f 93       	push	r20
    2778:	9f 93       	push	r25
    277a:	8f 93       	push	r24
    277c:	8d e7       	ldi	r24, 0x7D	; 125
    277e:	93 e0       	ldi	r25, 0x03	; 3
    2780:	9f 93       	push	r25
    2782:	8f 93       	push	r24
    2784:	8d ef       	ldi	r24, 0xFD	; 253
    2786:	93 e0       	ldi	r25, 0x03	; 3
    2788:	9f 93       	push	r25
    278a:	8f 93       	push	r24
    278c:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
				main_nmeaPosLat,
				(main_nmeaPosLonSign > 0 ?  main_nmeaPosLonSign : '-'),
				main_nmeaPosLon,
				main_nmeaAltitudeM);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2790:	28 2f       	mov	r18, r24
    2792:	4d ef       	ldi	r20, 0xFD	; 253
    2794:	53 e0       	ldi	r21, 0x03	; 3
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		if (!localNoPpsCnt) {
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <localNoPpsCnt.2843>
    27ac:	81 11       	cpse	r24, r1
    27ae:	85 c0       	rjmp	.+266    	; 0x28ba <main_fw_giveAway+0xe48>
			/* print ADC values - only valid when a PPS has arrived */

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA01, sizeof(PM_FORMAT_TA01));
    27b0:	2d e1       	ldi	r18, 0x1D	; 29
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	4f e8       	ldi	r20, 0x8F	; 143
    27b6:	56 e0       	ldi	r21, 0x06	; 6
    27b8:	6d e7       	ldi	r22, 0x7D	; 125
    27ba:	73 e0       	ldi	r23, 0x03	; 3
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    27c2:	0f 2e       	mov	r0, r31
    27c4:	f7 e7       	ldi	r31, 0x77	; 119
    27c6:	8f 2e       	mov	r8, r31
    27c8:	f3 e0       	ldi	r31, 0x03	; 3
    27ca:	9f 2e       	mov	r9, r31
    27cc:	f0 2d       	mov	r31, r0
    27ce:	f4 01       	movw	r30, r8
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
    27d4:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <mainAdcPullVolts+0x3>
    27d8:	2f 93       	push	r18
    27da:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <mainAdcPullVolts+0x2>
    27de:	2f 93       	push	r18
    27e0:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <mainAdcPullVolts+0x1>
    27e4:	2f 93       	push	r18
    27e6:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <mainAdcPullVolts>
    27ea:	2f 93       	push	r18
    27ec:	9f 93       	push	r25
    27ee:	8f 93       	push	r24
    27f0:	0f 2e       	mov	r0, r31
    27f2:	fd e7       	ldi	r31, 0x7D	; 125
    27f4:	af 2e       	mov	r10, r31
    27f6:	f3 e0       	ldi	r31, 0x03	; 3
    27f8:	bf 2e       	mov	r11, r31
    27fa:	f0 2d       	mov	r31, r0
    27fc:	bf 92       	push	r11
    27fe:	af 92       	push	r10
    2800:	0d ef       	ldi	r16, 0xFD	; 253
    2802:	13 e0       	ldi	r17, 0x03	; 3
    2804:	1f 93       	push	r17
    2806:	0f 93       	push	r16
    2808:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
					acAdcCh[ADC_CH_PWMPULL],
					mainAdcPullVolts);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    280c:	28 2f       	mov	r18, r24
    280e:	a8 01       	movw	r20, r16
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA02, sizeof(PM_FORMAT_TA02));
    2818:	2d e1       	ldi	r18, 0x1D	; 29
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	42 e7       	ldi	r20, 0x72	; 114
    281e:	56 e0       	ldi	r21, 0x06	; 6
    2820:	b5 01       	movw	r22, r10
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2828:	d4 01       	movw	r26, r8
    282a:	12 96       	adiw	r26, 0x02	; 2
    282c:	8d 91       	ld	r24, X+
    282e:	9c 91       	ld	r25, X
    2830:	13 97       	sbiw	r26, 0x03	; 3
    2832:	20 91 67 05 	lds	r18, 0x0567	; 0x800567 <mainAdcPhaseVolts+0x3>
    2836:	2f 93       	push	r18
    2838:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <mainAdcPhaseVolts+0x2>
    283c:	2f 93       	push	r18
    283e:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <mainAdcPhaseVolts+0x1>
    2842:	2f 93       	push	r18
    2844:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <mainAdcPhaseVolts>
    2848:	2f 93       	push	r18
    284a:	9f 93       	push	r25
    284c:	8f 93       	push	r24
    284e:	bf 92       	push	r11
    2850:	af 92       	push	r10
    2852:	1f 93       	push	r17
    2854:	0f 93       	push	r16
    2856:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
					acAdcCh[ADC_CH_PHASE],
					mainAdcPhaseVolts);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    285a:	28 2f       	mov	r18, r24
    285c:	a8 01       	movw	r20, r16
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA03, sizeof(PM_FORMAT_TA03));
    2866:	2d e1       	ldi	r18, 0x1D	; 29
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	45 e5       	ldi	r20, 0x55	; 85
    286c:	56 e0       	ldi	r21, 0x06	; 6
    286e:	b5 01       	movw	r22, r10
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2876:	f4 01       	movw	r30, r8
    2878:	84 81       	ldd	r24, Z+4	; 0x04
    287a:	95 81       	ldd	r25, Z+5	; 0x05
    287c:	20 91 63 05 	lds	r18, 0x0563	; 0x800563 <mainAdcTemp+0x3>
    2880:	2f 93       	push	r18
    2882:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <mainAdcTemp+0x2>
    2886:	2f 93       	push	r18
    2888:	20 91 61 05 	lds	r18, 0x0561	; 0x800561 <mainAdcTemp+0x1>
    288c:	2f 93       	push	r18
    288e:	20 91 60 05 	lds	r18, 0x0560	; 0x800560 <mainAdcTemp>
    2892:	2f 93       	push	r18
    2894:	9f 93       	push	r25
    2896:	8f 93       	push	r24
    2898:	bf 92       	push	r11
    289a:	af 92       	push	r10
    289c:	1f 93       	push	r17
    289e:	0f 93       	push	r16
    28a0:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
					acAdcCh[ADC_CH_TEMP],
					mainAdcTemp);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    28a4:	28 2f       	mov	r18, r24
    28a6:	a8 01       	movw	r20, r16
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA11, sizeof(PM_FORMAT_TA11));
    28ba:	28 e3       	ldi	r18, 0x38	; 56
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	4d e1       	ldi	r20, 0x1D	; 29
    28c0:	56 e0       	ldi	r21, 0x06	; 6
    28c2:	6d e7       	ldi	r22, 0x7D	; 125
    28c4:	73 e0       	ldi	r23, 0x03	; 3
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		uint8_t localICR1H = ICR1H;
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock

		SREG = sreg;

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	96 29       	or	r25, r6
					mainAdcTemp);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA11, sizeof(PM_FORMAT_TA11));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    28d0:	9f 93       	push	r25
    28d2:	7f 92       	push	r7
    28d4:	ff 92       	push	r15
    28d6:	ef 92       	push	r14
    28d8:	df 92       	push	r13
    28da:	cf 92       	push	r12
    28dc:	0f 2e       	mov	r0, r31
    28de:	fd e7       	ldi	r31, 0x7D	; 125
    28e0:	ef 2e       	mov	r14, r31
    28e2:	f3 e0       	ldi	r31, 0x03	; 3
    28e4:	ff 2e       	mov	r15, r31
    28e6:	f0 2d       	mov	r31, r0
    28e8:	ff 92       	push	r15
    28ea:	ef 92       	push	r14
    28ec:	0d ef       	ldi	r16, 0xFD	; 253
    28ee:	13 e0       	ldi	r17, 0x03	; 3
    28f0:	1f 93       	push	r17
    28f2:	0f 93       	push	r16
    28f4:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				localFastCtr1ms,
				localFastTCNT1);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    28f8:	28 2f       	mov	r18, r24
    28fa:	a8 01       	movw	r20, r16
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA12, sizeof(PM_FORMAT_TA12));
    2904:	24 e7       	ldi	r18, 0x74	; 116
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	49 ea       	ldi	r20, 0xA9	; 169
    290a:	55 e0       	ldi	r21, 0x05	; 5
    290c:	b7 01       	movw	r22, r14
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2914:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <ppsStampICR1_last+0x1>
    2918:	8f 93       	push	r24
    291a:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <ppsStampICR1_last>
    291e:	8f 93       	push	r24
    2920:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <ppsStampCtr1ms_last+0x3>
    2924:	8f 93       	push	r24
    2926:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <ppsStampCtr1ms_last+0x2>
    292a:	8f 93       	push	r24
    292c:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <ppsStampCtr1ms_last+0x1>
    2930:	8f 93       	push	r24
    2932:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <ppsStampCtr1ms_last>
    2936:	8f 93       	push	r24
    2938:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <ppsStampICR1+0x1>
    293c:	8f 93       	push	r24
    293e:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <ppsStampICR1>
    2942:	8f 93       	push	r24
    2944:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <ppsStampCtr1ms+0x3>
    2948:	8f 93       	push	r24
    294a:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <ppsStampCtr1ms+0x2>
    294e:	8f 93       	push	r24
    2950:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <ppsStampCtr1ms+0x1>
    2954:	8f 93       	push	r24
    2956:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <ppsStampCtr1ms>
    295a:	8f 93       	push	r24
    295c:	ff 92       	push	r15
    295e:	ef 92       	push	r14
    2960:	1f 93       	push	r17
    2962:	0f 93       	push	r16
    2964:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				ppsStampCtr1ms,
				ppsStampICR1,
				ppsStampCtr1ms_last,
				ppsStampICR1_last);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2968:	28 2f       	mov	r18, r24
    296a:	a8 01       	movw	r20, r16
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA13, sizeof(PM_FORMAT_TA13));
    2974:	24 e2       	ldi	r18, 0x24	; 36
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	45 e8       	ldi	r20, 0x85	; 133
    297a:	55 e0       	ldi	r21, 0x05	; 5
    297c:	b7 01       	movw	r22, r14
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2984:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <fastPwmSubLoopVal>
    2988:	1f 92       	push	r1
    298a:	8f 93       	push	r24
    298c:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <fastPwmLoopVal>
    2990:	1f 92       	push	r1
    2992:	8f 93       	push	r24
    2994:	ff 92       	push	r15
    2996:	ef 92       	push	r14
    2998:	1f 93       	push	r17
    299a:	0f 93       	push	r16
    299c:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				fastPwmLoopVal,
				fastPwmSubLoopVal);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	28 2f       	mov	r18, r24
    29ac:	a8 01       	movw	r20, r16
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA14, sizeof(PM_FORMAT_TA14));
    29b6:	20 e2       	ldi	r18, 0x20	; 32
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	45 e6       	ldi	r20, 0x65	; 101
    29bc:	55 e0       	ldi	r21, 0x05	; 5
    29be:	b7 01       	movw	r22, r14
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    29c6:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    29ca:	1f 92       	push	r1
    29cc:	8f 93       	push	r24
    29ce:	ff 92       	push	r15
    29d0:	ef 92       	push	r14
    29d2:	1f 93       	push	r17
    29d4:	0f 93       	push	r16
    29d6:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				mainRefClkState);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    29da:	28 2f       	mov	r18, r24
    29dc:	a8 01       	movw	r20, r16
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
	}

	if (!localNoPpsCnt) {
    29f2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <localNoPpsCnt.2843>
    29f6:	81 11       	cpse	r24, r1
    29f8:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <main_fw_giveAway+0x2012>
		/* PPS - 1 Hz Ref.-Clk. - State Machine */

		/* central calculations */
		static float localMeanClockDiffSum = 0.0f;
		float qrgDev_Hz;
		int32_t local20MHzClockDiff =   (20000L * (((int32_t) ppsStampCtr1ms) - ((int32_t) ppsStampCtr1ms_last)))
    29fc:	40 91 78 05 	lds	r20, 0x0578	; 0x800578 <ppsStampCtr1ms>
    2a00:	50 91 79 05 	lds	r21, 0x0579	; 0x800579 <ppsStampCtr1ms+0x1>
    2a04:	60 91 7a 05 	lds	r22, 0x057A	; 0x80057a <ppsStampCtr1ms+0x2>
    2a08:	70 91 7b 05 	lds	r23, 0x057B	; 0x80057b <ppsStampCtr1ms+0x3>
    2a0c:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <ppsStampCtr1ms_last>
    2a10:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <ppsStampCtr1ms_last+0x1>
    2a14:	a0 91 74 05 	lds	r26, 0x0574	; 0x800574 <ppsStampCtr1ms_last+0x2>
    2a18:	b0 91 75 05 	lds	r27, 0x0575	; 0x800575 <ppsStampCtr1ms_last+0x3>
    2a1c:	9a 01       	movw	r18, r20
    2a1e:	ab 01       	movw	r20, r22
    2a20:	28 1b       	sub	r18, r24
    2a22:	39 0b       	sbc	r19, r25
    2a24:	4a 0b       	sbc	r20, r26
    2a26:	5b 0b       	sbc	r21, r27
    2a28:	a0 e2       	ldi	r26, 0x20	; 32
    2a2a:	be e4       	ldi	r27, 0x4E	; 78
    2a2c:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <__muluhisi3>
							    	  +           (((int32_t) ppsStampICR1)   - ((int32_t) ppsStampICR1_last))
    2a30:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <ppsStampICR1>
    2a34:	30 91 77 05 	lds	r19, 0x0577	; 0x800577 <ppsStampICR1+0x1>
    2a38:	49 01       	movw	r8, r18
    2a3a:	a1 2c       	mov	r10, r1
    2a3c:	b1 2c       	mov	r11, r1
    2a3e:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <ppsStampICR1_last>
    2a42:	30 91 71 05 	lds	r19, 0x0571	; 0x800571 <ppsStampICR1_last+0x1>
    2a46:	82 1a       	sub	r8, r18
    2a48:	93 0a       	sbc	r9, r19
    2a4a:	a1 08       	sbc	r10, r1
    2a4c:	b1 08       	sbc	r11, r1
    2a4e:	86 0e       	add	r8, r22
    2a50:	97 1e       	adc	r9, r23
    2a52:	a8 1e       	adc	r10, r24
    2a54:	b9 1e       	adc	r11, r25
		/* PPS - 1 Hz Ref.-Clk. - State Machine */

		/* central calculations */
		static float localMeanClockDiffSum = 0.0f;
		float qrgDev_Hz;
		int32_t local20MHzClockDiff =   (20000L * (((int32_t) ppsStampCtr1ms) - ((int32_t) ppsStampCtr1ms_last)))
    2a56:	75 01       	movw	r14, r10
    2a58:	64 01       	movw	r12, r8
    2a5a:	bd e2       	ldi	r27, 0x2D	; 45
    2a5c:	db 1a       	sub	r13, r27
    2a5e:	b1 e3       	ldi	r27, 0x31	; 49
    2a60:	eb 0a       	sbc	r14, r27
    2a62:	b1 e0       	ldi	r27, 0x01	; 1
    2a64:	fb 0a       	sbc	r15, r27
							    	  +           (((int32_t) ppsStampICR1)   - ((int32_t) ppsStampICR1_last))
							    	  -  20000000L;

		float localMeanFloatClockDiff = localMeanClockDiffSum / MEAN_QRG_CLOCK_STAGES_F;
    2a66:	40 90 1f 01 	lds	r4, 0x011F	; 0x80011f <localMeanClockDiffSum.2854>
    2a6a:	50 90 20 01 	lds	r5, 0x0120	; 0x800120 <localMeanClockDiffSum.2854+0x1>
    2a6e:	60 90 21 01 	lds	r6, 0x0121	; 0x800121 <localMeanClockDiffSum.2854+0x2>
    2a72:	70 90 22 01 	lds	r7, 0x0122	; 0x800122 <localMeanClockDiffSum.2854+0x3>
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 ea       	ldi	r20, 0xA0	; 160
    2a7c:	50 e4       	ldi	r21, 0x40	; 64
    2a7e:	c3 01       	movw	r24, r6
    2a80:	b2 01       	movw	r22, r4
    2a82:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    2a86:	6e 83       	std	Y+6, r22	; 0x06
    2a88:	7f 83       	std	Y+7, r23	; 0x07
    2a8a:	88 87       	std	Y+8, r24	; 0x08
    2a8c:	99 87       	std	Y+9, r25	; 0x09
		float localPpm = 0.0f;
		if ((local20MHzClockDiff < -CLOCK_DIFF_OUT) || (CLOCK_DIFF_OUT < local20MHzClockDiff)) {
    2a8e:	ec e9       	ldi	r30, 0x9C	; 156
    2a90:	8e 1a       	sub	r8, r30
    2a92:	ec e2       	ldi	r30, 0x2C	; 44
    2a94:	9e 0a       	sbc	r9, r30
    2a96:	e1 e3       	ldi	r30, 0x31	; 49
    2a98:	ae 0a       	sbc	r10, r30
    2a9a:	e1 e0       	ldi	r30, 0x01	; 1
    2a9c:	be 0a       	sbc	r11, r30
    2a9e:	f9 ec       	ldi	r31, 0xC9	; 201
    2aa0:	8f 16       	cp	r8, r31
    2aa2:	91 04       	cpc	r9, r1
    2aa4:	a1 04       	cpc	r10, r1
    2aa6:	b1 04       	cpc	r11, r1
    2aa8:	d0 f0       	brcs	.+52     	; 0x2ade <main_fw_giveAway+0x106c>
			/* bad value - ignore */
			local20MHzClockDiff = 0;
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	5f e3       	ldi	r21, 0x3F	; 63
    2ab2:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    2ab6:	26 2e       	mov	r2, r22
    2ab8:	37 2e       	mov	r3, r23
    2aba:	88 2e       	mov	r8, r24
    2abc:	99 2e       	mov	r9, r25
			localPpm = (localMeanFloatClockDiff / 20.0f);
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 ea       	ldi	r20, 0xA0	; 160
    2ac4:	51 e4       	ldi	r21, 0x41	; 65
    2ac6:	6e 81       	ldd	r22, Y+6	; 0x06
    2ac8:	7f 81       	ldd	r23, Y+7	; 0x07
    2aca:	88 85       	ldd	r24, Y+8	; 0x08
    2acc:	99 85       	ldd	r25, Y+9	; 0x09
    2ace:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    2ad2:	2b 01       	movw	r4, r22
    2ad4:	3c 01       	movw	r6, r24

		float localMeanFloatClockDiff = localMeanClockDiffSum / MEAN_QRG_CLOCK_STAGES_F;
		float localPpm = 0.0f;
		if ((local20MHzClockDiff < -CLOCK_DIFF_OUT) || (CLOCK_DIFF_OUT < local20MHzClockDiff)) {
			/* bad value - ignore */
			local20MHzClockDiff = 0;
    2ad6:	c1 2c       	mov	r12, r1
    2ad8:	d1 2c       	mov	r13, r1
    2ada:	76 01       	movw	r14, r12
    2adc:	5e c0       	rjmp	.+188    	; 0x2b9a <main_fw_giveAway+0x1128>
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
			localPpm = (localMeanFloatClockDiff / 20.0f);

		} else if ((-CLOCK_DIFF_COARSE_FINE < local20MHzClockDiff) && (local20MHzClockDiff < CLOCK_DIFF_COARSE_FINE)) {
    2ade:	d7 01       	movw	r26, r14
    2ae0:	c6 01       	movw	r24, r12
    2ae2:	43 96       	adiw	r24, 0x13	; 19
    2ae4:	a1 1d       	adc	r26, r1
    2ae6:	b1 1d       	adc	r27, r1
    2ae8:	87 97       	sbiw	r24, 0x27	; 39
    2aea:	a1 05       	cpc	r26, r1
    2aec:	b1 05       	cpc	r27, r1
    2aee:	98 f5       	brcc	.+102    	; 0x2b56 <main_fw_giveAway+0x10e4>
			/* fine mode */
			localMeanClockDiffSum += (((float) local20MHzClockDiff) - localMeanFloatClockDiff);
    2af0:	c7 01       	movw	r24, r14
    2af2:	b6 01       	movw	r22, r12
    2af4:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    2af8:	2e 81       	ldd	r18, Y+6	; 0x06
    2afa:	3f 81       	ldd	r19, Y+7	; 0x07
    2afc:	48 85       	ldd	r20, Y+8	; 0x08
    2afe:	59 85       	ldd	r21, Y+9	; 0x09
    2b00:	0e 94 10 2b 	call	0x5620	; 0x5620 <__subsf3>
    2b04:	9b 01       	movw	r18, r22
    2b06:	ac 01       	movw	r20, r24
    2b08:	c3 01       	movw	r24, r6
    2b0a:	b2 01       	movw	r22, r4
    2b0c:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    2b10:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <localMeanClockDiffSum.2854>
    2b14:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <localMeanClockDiffSum.2854+0x1>
    2b18:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <localMeanClockDiffSum.2854+0x2>
    2b1c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <localMeanClockDiffSum.2854+0x3>
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e0       	ldi	r20, 0x00	; 0
    2b26:	5f e3       	ldi	r21, 0x3F	; 63
    2b28:	6e 81       	ldd	r22, Y+6	; 0x06
    2b2a:	7f 81       	ldd	r23, Y+7	; 0x07
    2b2c:	88 85       	ldd	r24, Y+8	; 0x08
    2b2e:	99 85       	ldd	r25, Y+9	; 0x09
    2b30:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    2b34:	26 2e       	mov	r2, r22
    2b36:	37 2e       	mov	r3, r23
    2b38:	88 2e       	mov	r8, r24
    2b3a:	99 2e       	mov	r9, r25
			localPpm = (localMeanFloatClockDiff / 20.0f);
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 ea       	ldi	r20, 0xA0	; 160
    2b42:	51 e4       	ldi	r21, 0x41	; 65
    2b44:	6e 81       	ldd	r22, Y+6	; 0x06
    2b46:	7f 81       	ldd	r23, Y+7	; 0x07
    2b48:	88 85       	ldd	r24, Y+8	; 0x08
    2b4a:	99 85       	ldd	r25, Y+9	; 0x09
    2b4c:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    2b50:	2b 01       	movw	r4, r22
    2b52:	3c 01       	movw	r6, r24
    2b54:	22 c0       	rjmp	.+68     	; 0x2b9a <main_fw_giveAway+0x1128>

		} else {
			/* re-init the mean value sum when being in coarse mode */
			localMeanClockDiffSum = 0.0f;
    2b56:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <localMeanClockDiffSum.2854>
    2b5a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <localMeanClockDiffSum.2854+0x1>
    2b5e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <localMeanClockDiffSum.2854+0x2>
    2b62:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <localMeanClockDiffSum.2854+0x3>
			qrgDev_Hz = (local20MHzClockDiff / 2.0f);
    2b66:	c7 01       	movw	r24, r14
    2b68:	b6 01       	movw	r22, r12
    2b6a:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    2b6e:	2b 01       	movw	r4, r22
    2b70:	3c 01       	movw	r6, r24
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	5f e3       	ldi	r21, 0x3F	; 63
    2b7a:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    2b7e:	26 2e       	mov	r2, r22
    2b80:	37 2e       	mov	r3, r23
    2b82:	88 2e       	mov	r8, r24
    2b84:	99 2e       	mov	r9, r25
			localPpm = (local20MHzClockDiff / 20.0f);
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 ea       	ldi	r20, 0xA0	; 160
    2b8c:	51 e4       	ldi	r21, 0x41	; 65
    2b8e:	c3 01       	movw	r24, r6
    2b90:	b2 01       	movw	r22, r4
    2b92:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    2b96:	2b 01       	movw	r4, r22
    2b98:	3c 01       	movw	r6, r24
		}

		if (main_bf.mainIsTimerTest && (!main_bf.mainIsAFC)) {
    2b9a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2b9e:	82 ff       	sbrs	r24, 2
    2ba0:	56 c0       	rjmp	.+172    	; 0x2c4e <main_fw_giveAway+0x11dc>
    2ba2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2ba6:	80 fd       	sbrc	r24, 0
    2ba8:	52 c0       	rjmp	.+164    	; 0x2c4e <main_fw_giveAway+0x11dc>
			/* monitoring frequency even when AFC is switched off */
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA01, sizeof(PM_FORMAT_IA01));
    2baa:	2a e3       	ldi	r18, 0x3A	; 58
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	4f e5       	ldi	r20, 0x5F	; 95
    2bb0:	54 e0       	ldi	r21, 0x04	; 4
    2bb2:	6d e7       	ldi	r22, 0x7D	; 125
    2bb4:	73 e0       	ldi	r23, 0x03	; 3
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2bbc:	ff 92       	push	r15
    2bbe:	ef 92       	push	r14
    2bc0:	df 92       	push	r13
    2bc2:	cf 92       	push	r12
    2bc4:	0f 2e       	mov	r0, r31
    2bc6:	fd e7       	ldi	r31, 0x7D	; 125
    2bc8:	af 2e       	mov	r10, r31
    2bca:	f3 e0       	ldi	r31, 0x03	; 3
    2bcc:	bf 2e       	mov	r11, r31
    2bce:	f0 2d       	mov	r31, r0
    2bd0:	bf 92       	push	r11
    2bd2:	af 92       	push	r10
    2bd4:	0d ef       	ldi	r16, 0xFD	; 253
    2bd6:	13 e0       	ldi	r17, 0x03	; 3
    2bd8:	1f 93       	push	r17
    2bda:	0f 93       	push	r16
    2bdc:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2be0:	28 2f       	mov	r18, r24
    2be2:	a8 01       	movw	r20, r16
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
    2bec:	28 e6       	ldi	r18, 0x68	; 104
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	47 ef       	ldi	r20, 0xF7	; 247
    2bf2:	53 e0       	ldi	r21, 0x03	; 3
    2bf4:	b5 01       	movw	r22, r10
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2bfc:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <mainPpm+0x3>
    2c00:	8f 93       	push	r24
    2c02:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <mainPpm+0x2>
    2c06:	8f 93       	push	r24
    2c08:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <mainPpm+0x1>
    2c0c:	8f 93       	push	r24
    2c0e:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <mainPpm>
    2c12:	8f 93       	push	r24
    2c14:	9f 92       	push	r9
    2c16:	8f 92       	push	r8
    2c18:	3f 92       	push	r3
    2c1a:	2f 92       	push	r2
    2c1c:	29 85       	ldd	r18, Y+9	; 0x09
    2c1e:	2f 93       	push	r18
    2c20:	38 85       	ldd	r19, Y+8	; 0x08
    2c22:	3f 93       	push	r19
    2c24:	8f 81       	ldd	r24, Y+7	; 0x07
    2c26:	8f 93       	push	r24
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	9f 93       	push	r25
    2c2c:	bf 92       	push	r11
    2c2e:	af 92       	push	r10
    2c30:	1f 93       	push	r17
    2c32:	0f 93       	push	r16
    2c34:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
					localMeanFloatClockDiff,
					qrgDev_Hz,
					mainPpm);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2c38:	28 2f       	mov	r18, r24
    2c3a:	a8 01       	movw	r20, r16
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	f8 94       	cli
    2c48:	de bf       	out	0x3e, r29	; 62
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	cd bf       	out	0x3d, r28	; 61
		}


		/* frequency & phase correction modules */

		if (main_bf.mainIsAFC) {
    2c4e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2c52:	80 ff       	sbrs	r24, 0
    2c54:	f7 c1       	rjmp	.+1006   	; 0x3044 <main_fw_giveAway+0x15d2>
	static uint8_t holdOffTime = 0;

	/* frequency shift calculation */
	uint8_t localIsOffset = false;

	if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    2c56:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    2c5a:	84 30       	cpi	r24, 0x04	; 4
    2c5c:	80 f4       	brcc	.+32     	; 0x2c7e <main_fw_giveAway+0x120c>
		/* Help APC to find its phase - when found, stop offset */
		meanFloatClockDiff += 0.1f;							// 0.1 Hz @ 20 MHz below center frequency to let the phase wander and
    2c5e:	2d ec       	ldi	r18, 0xCD	; 205
    2c60:	3c ec       	ldi	r19, 0xCC	; 204
    2c62:	4c ec       	ldi	r20, 0xCC	; 204
    2c64:	5d e3       	ldi	r21, 0x3D	; 61
    2c66:	6e 81       	ldd	r22, Y+6	; 0x06
    2c68:	7f 81       	ldd	r23, Y+7	; 0x07
    2c6a:	88 85       	ldd	r24, Y+8	; 0x08
    2c6c:	99 85       	ldd	r25, Y+9	; 0x09
    2c6e:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    2c72:	6e 83       	std	Y+6, r22	; 0x06
    2c74:	7f 83       	std	Y+7, r23	; 0x07
    2c76:	88 87       	std	Y+8, r24	; 0x08
    2c78:	99 87       	std	Y+9, r25	; 0x09
															// the phase locker find its position to lock in
		localIsOffset = true;
    2c7a:	11 e0       	ldi	r17, 0x01	; 1
    2c7c:	01 c0       	rjmp	.+2      	; 0x2c80 <main_fw_giveAway+0x120e>
{
	const  uint8_t holdOffTimeStart = 20;
	static uint8_t holdOffTime = 0;

	/* frequency shift calculation */
	uint8_t localIsOffset = false;
    2c7e:	10 e0       	ldi	r17, 0x00	; 0
		meanFloatClockDiff += 0.1f;							// 0.1 Hz @ 20 MHz below center frequency to let the phase wander and
															// the phase locker find its position to lock in
		localIsOffset = true;
	}

	if ((-1000.0f < meanFloatClockDiff) &&
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	4a e7       	ldi	r20, 0x7A	; 122
    2c86:	54 ec       	ldi	r21, 0xC4	; 196
    2c88:	6e 81       	ldd	r22, Y+6	; 0x06
    2c8a:	7f 81       	ldd	r23, Y+7	; 0x07
    2c8c:	88 85       	ldd	r24, Y+8	; 0x08
    2c8e:	99 85       	ldd	r25, Y+9	; 0x09
    2c90:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__gesf2>
    2c94:	18 16       	cp	r1, r24
    2c96:	0c f0       	brlt	.+2      	; 0x2c9a <main_fw_giveAway+0x1228>
    2c98:	c0 c1       	rjmp	.+896    	; 0x301a <main_fw_giveAway+0x15a8>
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	4a e7       	ldi	r20, 0x7A	; 122
    2ca0:	54 e4       	ldi	r21, 0x44	; 68
    2ca2:	6e 81       	ldd	r22, Y+6	; 0x06
    2ca4:	7f 81       	ldd	r23, Y+7	; 0x07
    2ca6:	88 85       	ldd	r24, Y+8	; 0x08
    2ca8:	99 85       	ldd	r25, Y+9	; 0x09
    2caa:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__cmpsf2>
    2cae:	88 23       	and	r24, r24
    2cb0:	0c f0       	brlt	.+2      	; 0x2cb4 <main_fw_giveAway+0x1242>
    2cb2:	b3 c1       	rjmp	.+870    	; 0x301a <main_fw_giveAway+0x15a8>
		( 1000.0f > meanFloatClockDiff)) {
		/* keep measuring window between +/-50ppm */
		ppm -=  (localIsOffset ?  0.005f : 0.0f);			// correct the clock offset
    2cb4:	11 11       	cpse	r17, r1
    2cb6:	04 c0       	rjmp	.+8      	; 0x2cc0 <main_fw_giveAway+0x124e>
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	a9 01       	movw	r20, r18
    2cbe:	04 c0       	rjmp	.+8      	; 0x2cc8 <main_fw_giveAway+0x1256>
    2cc0:	2a e0       	ldi	r18, 0x0A	; 10
    2cc2:	37 ed       	ldi	r19, 0xD7	; 215
    2cc4:	43 ea       	ldi	r20, 0xA3	; 163
    2cc6:	5b e3       	ldi	r21, 0x3B	; 59
    2cc8:	c3 01       	movw	r24, r6
    2cca:	b2 01       	movw	r22, r4
    2ccc:	0e 94 10 2b 	call	0x5620	; 0x5620 <__subsf3>
    2cd0:	b6 2e       	mov	r11, r22
    2cd2:	a7 2e       	mov	r10, r23
    2cd4:	18 2f       	mov	r17, r24
    2cd6:	09 2f       	mov	r16, r25

		float pwmCorSteps;
		if ((-CLOCK_DIFF_FAST_FRAME <= int20MHzClockDiff) && (int20MHzClockDiff <= CLOCK_DIFF_FAST_FRAME)) {
    2cd8:	d7 01       	movw	r26, r14
    2cda:	c6 01       	movw	r24, r12
    2cdc:	03 96       	adiw	r24, 0x03	; 3
    2cde:	a1 1d       	adc	r26, r1
    2ce0:	b1 1d       	adc	r27, r1
    2ce2:	07 97       	sbiw	r24, 0x07	; 7
    2ce4:	a1 05       	cpc	r26, r1
    2ce6:	b1 05       	cpc	r27, r1
    2ce8:	00 f5       	brcc	.+64     	; 0x2d2a <main_fw_giveAway+0x12b8>
			/* fine pitching */
			pwmCorSteps = ((-meanFloatClockDiff / 20.0f) / mainCoef_b02_qrg_k_pPwmStep_25C_ppm) / PWM_COR_STEPS_FINE_DIV_F;
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 ea       	ldi	r20, 0xA0	; 160
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	6e 81       	ldd	r22, Y+6	; 0x06
    2cf4:	7f 81       	ldd	r23, Y+7	; 0x07
    2cf6:	88 85       	ldd	r24, Y+8	; 0x08
    2cf8:	99 85       	ldd	r25, Y+9	; 0x09
    2cfa:	90 58       	subi	r25, 0x80	; 128
    2cfc:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    2d00:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    2d04:	30 91 96 05 	lds	r19, 0x0596	; 0x800596 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    2d08:	40 91 97 05 	lds	r20, 0x0597	; 0x800597 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    2d0c:	50 91 98 05 	lds	r21, 0x0598	; 0x800598 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    2d10:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e2       	ldi	r20, 0x20	; 32
    2d1a:	51 e4       	ldi	r21, 0x41	; 65
    2d1c:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    2d20:	6a 87       	std	Y+10, r22	; 0x0a
    2d22:	7e 87       	std	Y+14, r23	; 0x0e
    2d24:	8f 87       	std	Y+15, r24	; 0x0f
    2d26:	98 8b       	std	Y+16, r25	; 0x10
    2d28:	25 c0       	rjmp	.+74     	; 0x2d74 <main_fw_giveAway+0x1302>

		} else {
			/* coarse pitching */
			pwmCorSteps = ((((float) -int20MHzClockDiff) / 20.0f) / mainCoef_b02_qrg_k_pPwmStep_25C_ppm) / PWM_COR_STEPS_COARSE_DIV_F;  // used also in main_fw_calcPhase()
    2d2a:	66 27       	eor	r22, r22
    2d2c:	77 27       	eor	r23, r23
    2d2e:	cb 01       	movw	r24, r22
    2d30:	6c 19       	sub	r22, r12
    2d32:	7d 09       	sbc	r23, r13
    2d34:	8e 09       	sbc	r24, r14
    2d36:	9f 09       	sbc	r25, r15
    2d38:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 ea       	ldi	r20, 0xA0	; 160
    2d42:	51 e4       	ldi	r21, 0x41	; 65
    2d44:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    2d48:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    2d4c:	30 91 96 05 	lds	r19, 0x0596	; 0x800596 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    2d50:	40 91 97 05 	lds	r20, 0x0597	; 0x800597 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    2d54:	50 91 98 05 	lds	r21, 0x0598	; 0x800598 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    2d58:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    2d5c:	2d ec       	ldi	r18, 0xCD	; 205
    2d5e:	3c ec       	ldi	r19, 0xCC	; 204
    2d60:	4c e8       	ldi	r20, 0x8C	; 140
    2d62:	5f e3       	ldi	r21, 0x3F	; 63
    2d64:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    2d68:	6a 87       	std	Y+10, r22	; 0x0a
    2d6a:	7e 87       	std	Y+14, r23	; 0x0e
    2d6c:	8f 87       	std	Y+15, r24	; 0x0f
    2d6e:	98 8b       	std	Y+16, r25	; 0x10
			mainRefClkState = REFCLK_STATE_NOSYNC;
    2d70:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <mainRefClkState>
		}

		/* determine the new state of the FSM */
		if ((-0.015f <= ppm) && (ppm <= 0.015f) && (mainRefClkState == REFCLK_STATE_SEARCH_PHASE)) {  // single step tuning with counter stabilizer
    2d74:	2f e8       	ldi	r18, 0x8F	; 143
    2d76:	32 ec       	ldi	r19, 0xC2	; 194
    2d78:	45 e7       	ldi	r20, 0x75	; 117
    2d7a:	5c eb       	ldi	r21, 0xBC	; 188
    2d7c:	6b 2d       	mov	r22, r11
    2d7e:	7a 2d       	mov	r23, r10
    2d80:	81 2f       	mov	r24, r17
    2d82:	90 2f       	mov	r25, r16
    2d84:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__gesf2>
    2d88:	88 23       	and	r24, r24
    2d8a:	c4 f0       	brlt	.+48     	; 0x2dbc <main_fw_giveAway+0x134a>
    2d8c:	2f e8       	ldi	r18, 0x8F	; 143
    2d8e:	32 ec       	ldi	r19, 0xC2	; 194
    2d90:	45 e7       	ldi	r20, 0x75	; 117
    2d92:	5c e3       	ldi	r21, 0x3C	; 60
    2d94:	6b 2d       	mov	r22, r11
    2d96:	7a 2d       	mov	r23, r10
    2d98:	81 2f       	mov	r24, r17
    2d9a:	90 2f       	mov	r25, r16
    2d9c:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__cmpsf2>
    2da0:	18 16       	cp	r1, r24
    2da2:	64 f0       	brlt	.+24     	; 0x2dbc <main_fw_giveAway+0x134a>
    2da4:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    2da8:	82 30       	cpi	r24, 0x02	; 2
    2daa:	41 f4       	brne	.+16     	; 0x2dbc <main_fw_giveAway+0x134a>
			/* Upgrading: switch on the frequency mean value counter */
			if (!holdOffTime) {
    2dac:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <holdOffTime.2740>
    2db0:	81 11       	cpse	r24, r1
    2db2:	7c c0       	rjmp	.+248    	; 0x2eac <main_fw_giveAway+0x143a>
				mainRefClkState = REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED;
    2db4:	83 e0       	ldi	r24, 0x03	; 3
    2db6:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <mainRefClkState>
    2dba:	78 c0       	rjmp	.+240    	; 0x2eac <main_fw_giveAway+0x143a>
			}

		} else if ((-0.045f <= ppm) && (ppm <= 0.045f) && (mainRefClkState == REFCLK_STATE_SEARCH_QRG)) {	 // entering phase window (deviation less than 1 Hz @ 20 MHz)
    2dbc:	2c ee       	ldi	r18, 0xEC	; 236
    2dbe:	31 e5       	ldi	r19, 0x51	; 81
    2dc0:	48 e3       	ldi	r20, 0x38	; 56
    2dc2:	5d eb       	ldi	r21, 0xBD	; 189
    2dc4:	6b 2d       	mov	r22, r11
    2dc6:	7a 2d       	mov	r23, r10
    2dc8:	81 2f       	mov	r24, r17
    2dca:	90 2f       	mov	r25, r16
    2dcc:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__gesf2>
    2dd0:	88 23       	and	r24, r24
    2dd2:	dc f0       	brlt	.+54     	; 0x2e0a <main_fw_giveAway+0x1398>
    2dd4:	2c ee       	ldi	r18, 0xEC	; 236
    2dd6:	31 e5       	ldi	r19, 0x51	; 81
    2dd8:	48 e3       	ldi	r20, 0x38	; 56
    2dda:	5d e3       	ldi	r21, 0x3D	; 61
    2ddc:	6b 2d       	mov	r22, r11
    2dde:	7a 2d       	mov	r23, r10
    2de0:	81 2f       	mov	r24, r17
    2de2:	90 2f       	mov	r25, r16
    2de4:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__cmpsf2>
    2de8:	18 16       	cp	r1, r24
    2dea:	7c f0       	brlt	.+30     	; 0x2e0a <main_fw_giveAway+0x1398>
    2dec:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    2df0:	81 30       	cpi	r24, 0x01	; 1
    2df2:	59 f4       	brne	.+22     	; 0x2e0a <main_fw_giveAway+0x1398>
			/* Upgrading: search phase window */
			if (!holdOffTime) {
    2df4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <holdOffTime.2740>
    2df8:	81 11       	cpse	r24, r1
    2dfa:	58 c0       	rjmp	.+176    	; 0x2eac <main_fw_giveAway+0x143a>
				mainRefClkState = REFCLK_STATE_SEARCH_PHASE;
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <mainRefClkState>
				holdOffTime = holdOffTimeStart;
    2e02:	84 e1       	ldi	r24, 0x14	; 20
    2e04:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <holdOffTime.2740>
    2e08:	51 c0       	rjmp	.+162    	; 0x2eac <main_fw_giveAway+0x143a>
			}

		} else if ((-0.095f <= ppm) && (ppm <= 0.095f) && (mainRefClkState > REFCLK_STATE_SEARCH_QRG)) {  // do not fall out of phase window
    2e0a:	2c e5       	ldi	r18, 0x5C	; 92
    2e0c:	3f e8       	ldi	r19, 0x8F	; 143
    2e0e:	42 ec       	ldi	r20, 0xC2	; 194
    2e10:	5d eb       	ldi	r21, 0xBD	; 189
    2e12:	6b 2d       	mov	r22, r11
    2e14:	7a 2d       	mov	r23, r10
    2e16:	81 2f       	mov	r24, r17
    2e18:	90 2f       	mov	r25, r16
    2e1a:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__gesf2>
    2e1e:	88 23       	and	r24, r24
    2e20:	84 f0       	brlt	.+32     	; 0x2e42 <main_fw_giveAway+0x13d0>
    2e22:	2c e5       	ldi	r18, 0x5C	; 92
    2e24:	3f e8       	ldi	r19, 0x8F	; 143
    2e26:	42 ec       	ldi	r20, 0xC2	; 194
    2e28:	5d e3       	ldi	r21, 0x3D	; 61
    2e2a:	6b 2d       	mov	r22, r11
    2e2c:	7a 2d       	mov	r23, r10
    2e2e:	81 2f       	mov	r24, r17
    2e30:	90 2f       	mov	r25, r16
    2e32:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__cmpsf2>
    2e36:	18 16       	cp	r1, r24
    2e38:	24 f0       	brlt	.+8      	; 0x2e42 <main_fw_giveAway+0x13d0>
    2e3a:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    2e3e:	82 30       	cpi	r24, 0x02	; 2
    2e40:	a8 f5       	brcc	.+106    	; 0x2eac <main_fw_giveAway+0x143a>
			/* hysteresis: keep state a bit longer */

		} else if ((-25.0 <= ppm) && (ppm <= 25.0f)) {  // searching QRG until 1 Hz resolution is established
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	48 ec       	ldi	r20, 0xC8	; 200
    2e48:	51 ec       	ldi	r21, 0xC1	; 193
    2e4a:	6b 2d       	mov	r22, r11
    2e4c:	7a 2d       	mov	r23, r10
    2e4e:	81 2f       	mov	r24, r17
    2e50:	90 2f       	mov	r25, r16
    2e52:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__gesf2>
    2e56:	88 23       	and	r24, r24
    2e58:	24 f1       	brlt	.+72     	; 0x2ea2 <main_fw_giveAway+0x1430>
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	48 ec       	ldi	r20, 0xC8	; 200
    2e60:	51 e4       	ldi	r21, 0x41	; 65
    2e62:	6b 2d       	mov	r22, r11
    2e64:	7a 2d       	mov	r23, r10
    2e66:	81 2f       	mov	r24, r17
    2e68:	90 2f       	mov	r25, r16
    2e6a:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__cmpsf2>
    2e6e:	18 16       	cp	r1, r24
    2e70:	c4 f0       	brlt	.+48     	; 0x2ea2 <main_fw_giveAway+0x1430>
			if (mainRefClkState > REFCLK_STATE_SEARCH_QRG) {
    2e72:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    2e76:	82 30       	cpi	r24, 0x02	; 2
    2e78:	38 f0       	brcs	.+14     	; 0x2e88 <main_fw_giveAway+0x1416>
				/* Downgrading */
				mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <mainRefClkState>
				holdOffTime = holdOffTimeStart;
    2e80:	84 e1       	ldi	r24, 0x14	; 20
    2e82:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <holdOffTime.2740>
    2e86:	12 c0       	rjmp	.+36     	; 0x2eac <main_fw_giveAway+0x143a>

			} else if (mainRefClkState < REFCLK_STATE_SEARCH_QRG) {
    2e88:	81 11       	cpse	r24, r1
    2e8a:	10 c0       	rjmp	.+32     	; 0x2eac <main_fw_giveAway+0x143a>
				/* Upgrading */
				if (!holdOffTime) {
    2e8c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <holdOffTime.2740>
    2e90:	81 11       	cpse	r24, r1
    2e92:	0c c0       	rjmp	.+24     	; 0x2eac <main_fw_giveAway+0x143a>
					mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <mainRefClkState>
					holdOffTime = holdOffTimeStart;
    2e9a:	84 e1       	ldi	r24, 0x14	; 20
    2e9c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <holdOffTime.2740>
    2ea0:	05 c0       	rjmp	.+10     	; 0x2eac <main_fw_giveAway+0x143a>
				}
			}

		} else {
			/* no valid frequency detected */
			mainRefClkState = REFCLK_STATE_NOSYNC;
    2ea2:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <mainRefClkState>
			holdOffTime = holdOffTimeStart;
    2ea6:	84 e1       	ldi	r24, 0x14	; 20
    2ea8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <holdOffTime.2740>
		}

		/* windowing and adding of the new PWM value */

		uint8_t sreg = SREG;
    2eac:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2eae:	f8 94       	cli
		uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
    2eb0:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <fastPwmLoopVal>
    2eb4:	9d 83       	std	Y+5, r25	; 0x05
		uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
    2eb6:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <fastPwmSubLoopVal>
    2eba:	99 83       	std	Y+1, r25	; 0x01
		SREG = sreg;
    2ebc:	8f bf       	out	0x3f, r24	; 63

		if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    2ebe:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    2ec2:	84 30       	cpi	r24, 0x04	; 4
    2ec4:	c8 f4       	brcc	.+50     	; 0x2ef8 <main_fw_giveAway+0x1486>
			/* adjusting the PWM registers and make the new value public - only when hand-over to Phase Correction is not made */
			(void) main_fw_calcTimerAdj(pwmCorSteps, &localFastPwmLoopVal, &localFastPwmSubLoopVal);
    2ec6:	9e 01       	movw	r18, r28
    2ec8:	2f 5f       	subi	r18, 0xFF	; 255
    2eca:	3f 4f       	sbci	r19, 0xFF	; 255
    2ecc:	ae 01       	movw	r20, r28
    2ece:	4b 5f       	subi	r20, 0xFB	; 251
    2ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed2:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ed4:	ae 85       	ldd	r26, Y+14	; 0x0e
    2ed6:	ff 85       	ldd	r31, Y+15	; 0x0f
    2ed8:	e8 89       	ldd	r30, Y+16	; 0x10
    2eda:	6b 2f       	mov	r22, r27
    2edc:	7a 2f       	mov	r23, r26
    2ede:	8f 2f       	mov	r24, r31
    2ee0:	9e 2f       	mov	r25, r30
    2ee2:	0e 94 20 0a 	call	0x1440	; 0x1440 <main_fw_calcTimerAdj>

			uint8_t sreg = SREG;
    2ee6:	8f b7       	in	r24, 0x3f	; 63
			cli();
    2ee8:	f8 94       	cli
			fastPwmLoopVal		= localFastPwmLoopVal;
    2eea:	9d 81       	ldd	r25, Y+5	; 0x05
    2eec:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubLoopVal;
    2ef0:	99 81       	ldd	r25, Y+1	; 0x01
    2ef2:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <fastPwmSubLoopVal>
			SREG = sreg;
    2ef6:	8f bf       	out	0x3f, r24	; 63
		}

		if (main_bf.mainIsTimerTest) {
    2ef8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2efc:	82 ff       	sbrs	r24, 2
    2efe:	8d c0       	rjmp	.+282    	; 0x301a <main_fw_giveAway+0x15a8>
			/* monitoring */
			int len;
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA01, sizeof(PM_FORMAT_IA01));
    2f00:	2a e3       	ldi	r18, 0x3A	; 58
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	4f e5       	ldi	r20, 0x5F	; 95
    2f06:	54 e0       	ldi	r21, 0x04	; 4
    2f08:	6d e7       	ldi	r22, 0x7D	; 125
    2f0a:	73 e0       	ldi	r23, 0x03	; 3
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2f12:	ff 92       	push	r15
    2f14:	ef 92       	push	r14
    2f16:	df 92       	push	r13
    2f18:	cf 92       	push	r12
    2f1a:	ad e7       	ldi	r26, 0x7D	; 125
    2f1c:	b3 e0       	ldi	r27, 0x03	; 3
    2f1e:	bf 93       	push	r27
    2f20:	af 93       	push	r26
    2f22:	ad ef       	ldi	r26, 0xFD	; 253
    2f24:	b3 e0       	ldi	r27, 0x03	; 3
    2f26:	bf 93       	push	r27
    2f28:	af 93       	push	r26
    2f2a:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
					int20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2f2e:	28 2f       	mov	r18, r24
    2f30:	4d ef       	ldi	r20, 0xFD	; 253
    2f32:	53 e0       	ldi	r21, 0x03	; 3
    2f34:	60 e0       	ldi	r22, 0x00	; 0
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
    2f3c:	28 e6       	ldi	r18, 0x68	; 104
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	47 ef       	ldi	r20, 0xF7	; 247
    2f42:	53 e0       	ldi	r21, 0x03	; 3
    2f44:	6d e7       	ldi	r22, 0x7D	; 125
    2f46:	73 e0       	ldi	r23, 0x03	; 3
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2f4e:	0f 93       	push	r16
    2f50:	1f 93       	push	r17
    2f52:	af 92       	push	r10
    2f54:	bf 92       	push	r11
    2f56:	9f 92       	push	r9
    2f58:	8f 92       	push	r8
    2f5a:	3f 92       	push	r3
    2f5c:	2f 92       	push	r2
    2f5e:	f9 85       	ldd	r31, Y+9	; 0x09
    2f60:	ff 93       	push	r31
    2f62:	28 85       	ldd	r18, Y+8	; 0x08
    2f64:	2f 93       	push	r18
    2f66:	3f 81       	ldd	r19, Y+7	; 0x07
    2f68:	3f 93       	push	r19
    2f6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f6c:	8f 93       	push	r24
    2f6e:	ad e7       	ldi	r26, 0x7D	; 125
    2f70:	b3 e0       	ldi	r27, 0x03	; 3
    2f72:	bf 93       	push	r27
    2f74:	af 93       	push	r26
    2f76:	ad ef       	ldi	r26, 0xFD	; 253
    2f78:	b3 e0       	ldi	r27, 0x03	; 3
    2f7a:	bf 93       	push	r27
    2f7c:	af 93       	push	r26
    2f7e:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
					meanFloatClockDiff,
					qrgDev_Hz,
					ppm);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2f82:	28 2f       	mov	r18, r24
    2f84:	4d ef       	ldi	r20, 0xFD	; 253
    2f86:	53 e0       	ldi	r21, 0x03	; 3
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA03, sizeof(PM_FORMAT_IA03));
    2f90:	21 e4       	ldi	r18, 0x41	; 65
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	46 eb       	ldi	r20, 0xB6	; 182
    2f96:	53 e0       	ldi	r21, 0x03	; 3
    2f98:	6d e7       	ldi	r22, 0x7D	; 125
    2f9a:	73 e0       	ldi	r23, 0x03	; 3
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2fa2:	f8 89       	ldd	r31, Y+16	; 0x10
    2fa4:	ff 93       	push	r31
    2fa6:	2f 85       	ldd	r18, Y+15	; 0x0f
    2fa8:	2f 93       	push	r18
    2faa:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fac:	3f 93       	push	r19
    2fae:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fb0:	8f 93       	push	r24
}

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    2fb2:	6d 81       	ldd	r22, Y+5	; 0x05
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    2fbe:	6b 01       	movw	r12, r22
    2fc0:	7c 01       	movw	r14, r24
    2fc2:	69 81       	ldd	r22, Y+1	; 0x01
    2fc4:	70 e0       	ldi	r23, 0x00	; 0
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e8       	ldi	r20, 0x80	; 128
    2fd4:	5b e3       	ldi	r21, 0x3B	; 59
    2fd6:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    2fda:	9b 01       	movw	r18, r22
    2fdc:	ac 01       	movw	r20, r24
    2fde:	c7 01       	movw	r24, r14
    2fe0:	b6 01       	movw	r22, r12
    2fe2:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
					qrgDev_Hz,
					ppm);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA03, sizeof(PM_FORMAT_IA03));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2fe6:	9f 93       	push	r25
    2fe8:	8f 93       	push	r24
    2fea:	7f 93       	push	r23
    2fec:	6f 93       	push	r22
    2fee:	ad e7       	ldi	r26, 0x7D	; 125
    2ff0:	b3 e0       	ldi	r27, 0x03	; 3
    2ff2:	bf 93       	push	r27
    2ff4:	af 93       	push	r26
    2ff6:	ad ef       	ldi	r26, 0xFD	; 253
    2ff8:	b3 e0       	ldi	r27, 0x03	; 3
    2ffa:	bf 93       	push	r27
    2ffc:	af 93       	push	r26
    2ffe:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
					main_fw_calcTimerToFloat(localFastPwmLoopVal, localFastPwmSubLoopVal),
					pwmCorSteps);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	28 2f       	mov	r18, r24
    300e:	4d ef       	ldi	r20, 0xFD	; 253
    3010:	53 e0       	ldi	r21, 0x03	; 3
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
	} else {
		/* frequency search and lock loop - out if sync */
		// mainRefClkState = REFCLK_STATE_NOSYNC;  // single spike should not destroy time base - deactivated
	}

	if (--holdOffTime == 255) {
    301a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <holdOffTime.2740>
    301e:	81 50       	subi	r24, 0x01	; 1
    3020:	18 f0       	brcs	.+6      	; 0x3028 <main_fw_giveAway+0x15b6>
    3022:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <holdOffTime.2740>
    3026:	02 c0       	rjmp	.+4      	; 0x302c <main_fw_giveAway+0x15ba>
		holdOffTime = 0;
    3028:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <holdOffTime.2740>

		if (main_bf.mainIsAFC) {
			/* AFC = automatic frequency calculation */
			calcQrg(local20MHzClockDiff, localMeanFloatClockDiff, qrgDev_Hz, localPpm);

			if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    302c:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    3030:	84 30       	cpi	r24, 0x04	; 4
    3032:	40 f4       	brcc	.+16     	; 0x3044 <main_fw_giveAway+0x15d2>
				/* phase corrections are done by the AFC unit */
				mainPpm = localPpm;
    3034:	40 92 6c 05 	sts	0x056C, r4	; 0x80056c <mainPpm>
    3038:	50 92 6d 05 	sts	0x056D, r5	; 0x80056d <mainPpm+0x1>
    303c:	60 92 6e 05 	sts	0x056E, r6	; 0x80056e <mainPpm+0x2>
    3040:	70 92 6f 05 	sts	0x056F, r7	; 0x80056f <mainPpm+0x3>
			}
		}

		if (main_bf.mainIsAPC) {
    3044:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3048:	81 ff       	sbrs	r24, 1
    304a:	1c c5       	rjmp	.+2616   	; 0x3a84 <main_fw_giveAway+0x2012>
static void calcPhase()
{
	static float phaseMeanPhaseErrorSum	= 0.0f;
	static float phaseStepsErrorSum		= 0.0f;

	uint8_t adcPhase = acAdcCh[ADC_CH_PHASE];
    304c:	60 91 79 03 	lds	r22, 0x0379	; 0x800379 <acAdcCh+0x2>
    3050:	70 91 7a 03 	lds	r23, 0x037A	; 0x80037a <acAdcCh+0x3>

	/* APC = automatic phase control */
	if (mainRefClkState >= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    3054:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    3058:	83 30       	cpi	r24, 0x03	; 3
    305a:	08 f4       	brcc	.+2      	; 0x305e <main_fw_giveAway+0x15ec>
    305c:	5f c0       	rjmp	.+190    	; 0x311c <main_fw_giveAway+0x16aa>
		if ((ADC_PHASE_LO_LOCKING <= adcPhase) && (adcPhase <= ADC_PHASE_HI_LOCKING)) {
    305e:	9c ee       	ldi	r25, 0xEC	; 236
    3060:	96 0f       	add	r25, r22
    3062:	9e 3d       	cpi	r25, 0xDE	; 222
    3064:	08 f0       	brcs	.+2      	; 0x3068 <main_fw_giveAway+0x15f6>
    3066:	41 c0       	rjmp	.+130    	; 0x30ea <main_fw_giveAway+0x1678>
			if (mainRefClkState < REFCLK_STATE_LOCKING_PHASE) {
    3068:	87 30       	cpi	r24, 0x07	; 7
    306a:	d8 f4       	brcc	.+54     	; 0x30a2 <main_fw_giveAway+0x1630>
				/* up-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
    306c:	87 e0       	ldi	r24, 0x07	; 7
    306e:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <mainRefClkState>
				phaseMeanPhaseErrorSum	= 0.0f;
    3072:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <phaseMeanPhaseErrorSum.2751>
    3076:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <phaseMeanPhaseErrorSum.2751+0x1>
    307a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <phaseMeanPhaseErrorSum.2751+0x2>
    307e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <phaseMeanPhaseErrorSum.2751+0x3>

				uint8_t sreg = SREG;
    3082:	8f b7       	in	r24, 0x3f	; 63
				cli();
    3084:	f8 94       	cli
				fastPwmSingleDiffSum = 0.0f;
    3086:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <fastPwmSingleDiffSum>
    308a:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <fastPwmSingleDiffSum+0x1>
    308e:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <fastPwmSingleDiffSum+0x2>
    3092:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <fastPwmSingleDiffSum+0x3>
				SREG = sreg;
    3096:	8f bf       	out	0x3f, r24	; 63
			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
			}

			if ((ADC_PHASE_LO_INSYNC <= adcPhase) && (adcPhase <= ADC_PHASE_HI_INSYNC)) {
    3098:	80 eb       	ldi	r24, 0xB0	; 176
    309a:	86 0f       	add	r24, r22
    309c:	84 37       	cpi	r24, 0x74	; 116
    309e:	60 f0       	brcs	.+24     	; 0x30b8 <main_fw_giveAway+0x1646>
    30a0:	3d c0       	rjmp	.+122    	; 0x311c <main_fw_giveAway+0x16aa>
				uint8_t sreg = SREG;
				cli();
				fastPwmSingleDiffSum = 0.0f;
				SREG = sreg;

			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
    30a2:	88 30       	cpi	r24, 0x08	; 8
    30a4:	08 f4       	brcc	.+2      	; 0x30a8 <main_fw_giveAway+0x1636>
    30a6:	c8 c4       	rjmp	.+2448   	; 0x3a38 <main_fw_giveAway+0x1fc6>
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
    30a8:	87 e0       	ldi	r24, 0x07	; 7
    30aa:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <mainRefClkState>
			}

			if ((ADC_PHASE_LO_INSYNC <= adcPhase) && (adcPhase <= ADC_PHASE_HI_INSYNC)) {
    30ae:	80 eb       	ldi	r24, 0xB0	; 176
    30b0:	86 0f       	add	r24, r22
    30b2:	84 37       	cpi	r24, 0x74	; 116
    30b4:	28 f0       	brcs	.+10     	; 0x30c0 <main_fw_giveAway+0x164e>
    30b6:	03 c5       	rjmp	.+2566   	; 0x3abe <main_fw_giveAway+0x204c>
				if (mainRefClkState < REFCLK_STATE_IN_SYNC) {
    30b8:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    30bc:	8f 30       	cpi	r24, 0x0F	; 15
    30be:	70 f5       	brcc	.+92     	; 0x311c <main_fw_giveAway+0x16aa>
					mainRefClkState = REFCLK_STATE_IN_SYNC;
    30c0:	8f e0       	ldi	r24, 0x0F	; 15
    30c2:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <mainRefClkState>
    30c6:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);
    30c8:	69 58       	subi	r22, 0x89	; 137
    30ca:	71 09       	sbc	r23, r1
    30cc:	07 2e       	mov	r0, r23
    30ce:	00 0c       	add	r0, r0
    30d0:	88 0b       	sbc	r24, r24
    30d2:	99 0b       	sbc	r25, r25
    30d4:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    30d8:	26 e1       	ldi	r18, 0x16	; 22
    30da:	31 e5       	ldi	r19, 0x51	; 81
    30dc:	42 e0       	ldi	r20, 0x02	; 2
    30de:	50 e4       	ldi	r21, 0x40	; 64
    30e0:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    30e4:	4b 01       	movw	r8, r22
    30e6:	5c 01       	movw	r10, r24
    30e8:	2f c0       	rjmp	.+94     	; 0x3148 <main_fw_giveAway+0x16d6>
				}
			}

		} else {
			/* lost phase: hand-over to AFC */
			if (mainRefClkState >= REFCLK_STATE_LOCKING_PHASE) {
    30ea:	87 30       	cpi	r24, 0x07	; 7
    30ec:	08 f4       	brcc	.+2      	; 0x30f0 <main_fw_giveAway+0x167e>
    30ee:	a9 c4       	rjmp	.+2386   	; 0x3a42 <main_fw_giveAway+0x1fd0>
				mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <mainRefClkState>
				phaseMeanPhaseErrorSum	= 0.0f;
    30f6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <phaseMeanPhaseErrorSum.2751>
    30fa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <phaseMeanPhaseErrorSum.2751+0x1>
    30fe:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <phaseMeanPhaseErrorSum.2751+0x2>
    3102:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <phaseMeanPhaseErrorSum.2751+0x3>

				uint8_t sreg = SREG;
    3106:	8f b7       	in	r24, 0x3f	; 63
				cli();
    3108:	f8 94       	cli
				fastPwmSingleDiffSum = 0.0f;
    310a:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <fastPwmSingleDiffSum>
    310e:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <fastPwmSingleDiffSum+0x1>
    3112:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <fastPwmSingleDiffSum+0x2>
    3116:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <fastPwmSingleDiffSum+0x3>
				SREG = sreg;
    311a:	8f bf       	out	0x3f, r24	; 63
    311c:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);
    311e:	69 58       	subi	r22, 0x89	; 137
    3120:	71 09       	sbc	r23, r1
    3122:	07 2e       	mov	r0, r23
    3124:	00 0c       	add	r0, r0
    3126:	88 0b       	sbc	r24, r24
    3128:	99 0b       	sbc	r25, r25
    312a:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    312e:	26 e1       	ldi	r18, 0x16	; 22
    3130:	31 e5       	ldi	r19, 0x51	; 81
    3132:	42 e0       	ldi	r20, 0x02	; 2
    3134:	50 e4       	ldi	r21, 0x40	; 64
    3136:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    313a:	4b 01       	movw	r8, r22
    313c:	5c 01       	movw	r10, r24
	float phaseStepsPhase		= 0.0f;
	float phaseStepsFrequency	= 0.0f;

	if (mainRefClkState >= REFCLK_STATE_LOCKING_PHASE) {
    313e:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    3142:	87 30       	cpi	r24, 0x07	; 7
    3144:	08 f4       	brcc	.+2      	; 0x3148 <main_fw_giveAway+0x16d6>
    3146:	fc c0       	rjmp	.+504    	; 0x3340 <main_fw_giveAway+0x18ce>
		/* phase correction */
//		phaseStepsPhase = (float) (pow(fabs(phaseErr) * 32.00f, 1.25f));  	// magic values  XXX PHASE: trimming is done here
		phaseStepsPhase = (float) (pow(fabs(phaseErr) * 45.00f, 1.20f));  	// magic values  XXX PHASE: trimming is done here
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	44 e3       	ldi	r20, 0x34	; 52
    314e:	52 e4       	ldi	r21, 0x42	; 66
    3150:	c5 01       	movw	r24, r10
    3152:	b4 01       	movw	r22, r8
    3154:	9f 77       	andi	r25, 0x7F	; 127
    3156:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    315a:	2a e9       	ldi	r18, 0x9A	; 154
    315c:	39 e9       	ldi	r19, 0x99	; 153
    315e:	49 e9       	ldi	r20, 0x99	; 153
    3160:	5f e3       	ldi	r21, 0x3F	; 63
    3162:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <pow>
    3166:	2b 01       	movw	r4, r22
    3168:	3c 01       	movw	r6, r24
		if (phaseErr < 0.0f) {
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	a9 01       	movw	r20, r18
    3170:	c5 01       	movw	r24, r10
    3172:	b4 01       	movw	r22, r8
    3174:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__cmpsf2>
    3178:	88 23       	and	r24, r24
    317a:	24 f4       	brge	.+8      	; 0x3184 <main_fw_giveAway+0x1712>
			phaseStepsPhase = -phaseStepsPhase;
    317c:	77 fa       	bst	r7, 7
    317e:	70 94       	com	r7
    3180:	77 f8       	bld	r7, 7
    3182:	70 94       	com	r7
		}

		if (phaseStepsPhase) {
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	a9 01       	movw	r20, r18
    318a:	c3 01       	movw	r24, r6
    318c:	b2 01       	movw	r22, r4
    318e:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__cmpsf2>
    3192:	88 23       	and	r24, r24
    3194:	f1 f0       	breq	.+60     	; 0x31d2 <main_fw_giveAway+0x1760>
			uint8_t sreg = SREG;
    3196:	1f b7       	in	r17, 0x3f	; 63
			cli();
    3198:	f8 94       	cli
			fastPwmSingleDiffSum += phaseStepsPhase;						// PHASE OFFFSET accumulator
    319a:	a3 01       	movw	r20, r6
    319c:	92 01       	movw	r18, r4
    319e:	60 91 19 05 	lds	r22, 0x0519	; 0x800519 <fastPwmSingleDiffSum>
    31a2:	70 91 1a 05 	lds	r23, 0x051A	; 0x80051a <fastPwmSingleDiffSum+0x1>
    31a6:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <fastPwmSingleDiffSum+0x2>
    31aa:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <fastPwmSingleDiffSum+0x3>
    31ae:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    31b2:	60 93 19 05 	sts	0x0519, r22	; 0x800519 <fastPwmSingleDiffSum>
    31b6:	70 93 1a 05 	sts	0x051A, r23	; 0x80051a <fastPwmSingleDiffSum+0x1>
    31ba:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <fastPwmSingleDiffSum+0x2>
    31be:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <fastPwmSingleDiffSum+0x3>
			SREG = sreg;
    31c2:	1f bf       	out	0x3f, r17	; 63

			calcPhaseResidue();												// first call - to be called many times during the whole second until next pulse comes
    31c4:	0e 94 c6 0a 	call	0x158c	; 0x158c <calcPhaseResidue>
		}
	}

	if (mainRefClkState >= REFCLK_STATE_LOCKING_PHASE) {
    31c8:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    31cc:	87 30       	cpi	r24, 0x07	; 7
    31ce:	08 f4       	brcc	.+2      	; 0x31d2 <main_fw_giveAway+0x1760>
    31d0:	bd c0       	rjmp	.+378    	; 0x334c <main_fw_giveAway+0x18da>
		/* frequency drift correction */
		float phaseMeanPhaseErrorDiff = phaseMeanPhaseErrorSum / MEAN_PHASE_CLOCK_STAGES_F;
    31d2:	c0 90 18 01 	lds	r12, 0x0118	; 0x800118 <phaseMeanPhaseErrorSum.2751>
    31d6:	d0 90 19 01 	lds	r13, 0x0119	; 0x800119 <phaseMeanPhaseErrorSum.2751+0x1>
    31da:	e0 90 1a 01 	lds	r14, 0x011A	; 0x80011a <phaseMeanPhaseErrorSum.2751+0x2>
    31de:	f0 90 1b 01 	lds	r15, 0x011B	; 0x80011b <phaseMeanPhaseErrorSum.2751+0x3>
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	40 e4       	ldi	r20, 0x40	; 64
    31e8:	50 e4       	ldi	r21, 0x40	; 64
    31ea:	c7 01       	movw	r24, r14
    31ec:	b6 01       	movw	r22, r12
    31ee:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    31f2:	9b 01       	movw	r18, r22
    31f4:	ac 01       	movw	r20, r24
		phaseMeanPhaseErrorSum += (((float) phaseStepsPhase) - phaseMeanPhaseErrorDiff);
    31f6:	c3 01       	movw	r24, r6
    31f8:	b2 01       	movw	r22, r4
    31fa:	0e 94 10 2b 	call	0x5620	; 0x5620 <__subsf3>
    31fe:	9b 01       	movw	r18, r22
    3200:	ac 01       	movw	r20, r24
    3202:	c7 01       	movw	r24, r14
    3204:	b6 01       	movw	r22, r12
    3206:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    320a:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <phaseMeanPhaseErrorSum.2751>
    320e:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <phaseMeanPhaseErrorSum.2751+0x1>
    3212:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <phaseMeanPhaseErrorSum.2751+0x2>
    3216:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <phaseMeanPhaseErrorSum.2751+0x3>
		phaseStepsFrequency = phaseMeanPhaseErrorSum * 0.00000010f; 		// magic value  XXX PHASE: FREQUENCY trimming is done here
    321a:	25 e9       	ldi	r18, 0x95	; 149
    321c:	3f eb       	ldi	r19, 0xBF	; 191
    321e:	46 ed       	ldi	r20, 0xD6	; 214
    3220:	53 e3       	ldi	r21, 0x33	; 51
    3222:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    3226:	6b 01       	movw	r12, r22
    3228:	7c 01       	movw	r14, r24

		/* mainPpm calculations */
		float phaseStepsErrorDiff = phaseStepsErrorSum / MEAN_PHASE_PPM_STAGES_F;
    322a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
    322e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
    3232:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
    3236:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
    323a:	8e 83       	std	Y+6, r24	; 0x06
    323c:	9f 83       	std	Y+7, r25	; 0x07
    323e:	a8 87       	std	Y+8, r26	; 0x08
    3240:	b9 87       	std	Y+9, r27	; 0x09
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	40 ee       	ldi	r20, 0xE0	; 224
    3248:	50 e4       	ldi	r21, 0x40	; 64
    324a:	bc 01       	movw	r22, r24
    324c:	cd 01       	movw	r24, r26
    324e:	0e 94 82 2b 	call	0x5704	; 0x5704 <__divsf3>
    3252:	6a 87       	std	Y+10, r22	; 0x0a
    3254:	7b 87       	std	Y+11, r23	; 0x0b
    3256:	8c 87       	std	Y+12, r24	; 0x0c
    3258:	9d 87       	std	Y+13, r25	; 0x0d
		if (phaseStepsFrequency >= 0.0f) {
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	a9 01       	movw	r20, r18
    3260:	c7 01       	movw	r24, r14
    3262:	b6 01       	movw	r22, r12
    3264:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__gesf2>
    3268:	88 23       	and	r24, r24
    326a:	cc f0       	brlt	.+50     	; 0x329e <main_fw_giveAway+0x182c>
			phaseStepsErrorSum += (phaseStepsFrequency - phaseStepsErrorDiff);
    326c:	2a 85       	ldd	r18, Y+10	; 0x0a
    326e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3270:	4c 85       	ldd	r20, Y+12	; 0x0c
    3272:	5d 85       	ldd	r21, Y+13	; 0x0d
    3274:	c7 01       	movw	r24, r14
    3276:	b6 01       	movw	r22, r12
    3278:	0e 94 10 2b 	call	0x5620	; 0x5620 <__subsf3>
    327c:	9b 01       	movw	r18, r22
    327e:	ac 01       	movw	r20, r24
    3280:	6e 81       	ldd	r22, Y+6	; 0x06
    3282:	7f 81       	ldd	r23, Y+7	; 0x07
    3284:	88 85       	ldd	r24, Y+8	; 0x08
    3286:	99 85       	ldd	r25, Y+9	; 0x09
    3288:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    328c:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <__data_end>
    3290:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <__data_end+0x1>
    3294:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end+0x2>
    3298:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x3>
    329c:	19 c0       	rjmp	.+50     	; 0x32d0 <main_fw_giveAway+0x185e>
		} else {
			phaseStepsErrorSum += (-phaseStepsFrequency - phaseStepsErrorDiff);
    329e:	2a 85       	ldd	r18, Y+10	; 0x0a
    32a0:	3b 85       	ldd	r19, Y+11	; 0x0b
    32a2:	4c 85       	ldd	r20, Y+12	; 0x0c
    32a4:	5d 85       	ldd	r21, Y+13	; 0x0d
    32a6:	c7 01       	movw	r24, r14
    32a8:	b6 01       	movw	r22, r12
    32aa:	90 58       	subi	r25, 0x80	; 128
    32ac:	0e 94 10 2b 	call	0x5620	; 0x5620 <__subsf3>
    32b0:	9b 01       	movw	r18, r22
    32b2:	ac 01       	movw	r20, r24
    32b4:	6e 81       	ldd	r22, Y+6	; 0x06
    32b6:	7f 81       	ldd	r23, Y+7	; 0x07
    32b8:	88 85       	ldd	r24, Y+8	; 0x08
    32ba:	99 85       	ldd	r25, Y+9	; 0x09
    32bc:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    32c0:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <__data_end>
    32c4:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <__data_end+0x1>
    32c8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end+0x2>
    32cc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x3>
		}
		mainPpm = 2.0f * mainCoef_b02_qrg_k_pPwmStep_25C_ppm * phaseStepsErrorDiff;
    32d0:	60 91 95 05 	lds	r22, 0x0595	; 0x800595 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    32d4:	70 91 96 05 	lds	r23, 0x0596	; 0x800596 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    32d8:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    32dc:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    32e0:	9b 01       	movw	r18, r22
    32e2:	ac 01       	movw	r20, r24
    32e4:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    32e8:	9b 01       	movw	r18, r22
    32ea:	ac 01       	movw	r20, r24
    32ec:	6a 85       	ldd	r22, Y+10	; 0x0a
    32ee:	7b 85       	ldd	r23, Y+11	; 0x0b
    32f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    32f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    32f4:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    32f8:	60 93 6c 05 	sts	0x056C, r22	; 0x80056c <mainPpm>
    32fc:	70 93 6d 05 	sts	0x056D, r23	; 0x80056d <mainPpm+0x1>
    3300:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <mainPpm+0x2>
    3304:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <mainPpm+0x3>

		uint8_t sreg = SREG;
    3308:	1f b7       	in	r17, 0x3f	; 63
		cli();
    330a:	f8 94       	cli
		uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
    330c:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <fastPwmLoopVal>
    3310:	8d 83       	std	Y+5, r24	; 0x05
		uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
    3312:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <fastPwmSubLoopVal>
    3316:	89 83       	std	Y+1, r24	; 0x01
		SREG = sreg;
    3318:	1f bf       	out	0x3f, r17	; 63

		(void) main_fw_calcTimerAdj(phaseStepsFrequency, &localFastPwmLoopVal, &localFastPwmSubLoopVal);
    331a:	9e 01       	movw	r18, r28
    331c:	2f 5f       	subi	r18, 0xFF	; 255
    331e:	3f 4f       	sbci	r19, 0xFF	; 255
    3320:	ae 01       	movw	r20, r28
    3322:	4b 5f       	subi	r20, 0xFB	; 251
    3324:	5f 4f       	sbci	r21, 0xFF	; 255
    3326:	c7 01       	movw	r24, r14
    3328:	b6 01       	movw	r22, r12
    332a:	0e 94 20 0a 	call	0x1440	; 0x1440 <main_fw_calcTimerAdj>

		cli();
    332e:	f8 94       	cli
		fastPwmLoopVal		= localFastPwmLoopVal;			// single frequency correction
    3330:	8d 81       	ldd	r24, Y+5	; 0x05
    3332:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <fastPwmLoopVal>
		fastPwmSubLoopVal	= localFastPwmSubLoopVal;
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <fastPwmSubLoopVal>
		SREG = sreg;
    333c:	1f bf       	out	0x3f, r17	; 63
    333e:	09 c0       	rjmp	.+18     	; 0x3352 <main_fw_giveAway+0x18e0>
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);
	float phaseStepsPhase		= 0.0f;
    3340:	41 2c       	mov	r4, r1
    3342:	51 2c       	mov	r5, r1
    3344:	32 01       	movw	r6, r4
	float phaseStepsFrequency	= 0.0f;
    3346:	73 01       	movw	r14, r6
    3348:	62 01       	movw	r12, r4
    334a:	03 c0       	rjmp	.+6      	; 0x3352 <main_fw_giveAway+0x18e0>
    334c:	c1 2c       	mov	r12, r1
    334e:	d1 2c       	mov	r13, r1
    3350:	76 01       	movw	r14, r12
		fastPwmLoopVal		= localFastPwmLoopVal;			// single frequency correction
		fastPwmSubLoopVal	= localFastPwmSubLoopVal;
		SREG = sreg;
	}

	if (main_bf.mainIsTimerTest) {
    3352:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3356:	82 ff       	sbrs	r24, 2
    3358:	95 c3       	rjmp	.+1834   	; 0x3a84 <main_fw_giveAway+0x2012>
		/* monitoring */
		int len;
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA11, sizeof(PM_FORMAT_IA11));
    335a:	20 e6       	ldi	r18, 0x60	; 96
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	46 e5       	ldi	r20, 0x56	; 86
    3360:	53 e0       	ldi	r21, 0x03	; 3
    3362:	6d e7       	ldi	r22, 0x7D	; 125
    3364:	73 e0       	ldi	r23, 0x03	; 3
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    336c:	7f 92       	push	r7
    336e:	6f 92       	push	r6
    3370:	5f 92       	push	r5
    3372:	4f 92       	push	r4
    3374:	ff 92       	push	r15
    3376:	ef 92       	push	r14
    3378:	df 92       	push	r13
    337a:	cf 92       	push	r12
    337c:	bf 92       	push	r11
    337e:	af 92       	push	r10
    3380:	9f 92       	push	r9
    3382:	8f 92       	push	r8
    3384:	0f 2e       	mov	r0, r31
    3386:	fd e7       	ldi	r31, 0x7D	; 125
    3388:	ef 2e       	mov	r14, r31
    338a:	f3 e0       	ldi	r31, 0x03	; 3
    338c:	ff 2e       	mov	r15, r31
    338e:	f0 2d       	mov	r31, r0
    3390:	ff 92       	push	r15
    3392:	ef 92       	push	r14
    3394:	0d ef       	ldi	r16, 0xFD	; 253
    3396:	13 e0       	ldi	r17, 0x03	; 3
    3398:	1f 93       	push	r17
    339a:	0f 93       	push	r16
    339c:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				phaseErr,
				phaseStepsFrequency,
				phaseStepsPhase);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    33a0:	28 2f       	mov	r18, r24
    33a2:	a8 01       	movw	r20, r16
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA12, sizeof(PM_FORMAT_IA12));
    33ac:	20 e3       	ldi	r18, 0x30	; 48
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	46 e2       	ldi	r20, 0x26	; 38
    33b2:	53 e0       	ldi	r21, 0x03	; 3
    33b4:	b7 01       	movw	r22, r14
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    33bc:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <fastPwmSingleDiffSum+0x3>
    33c0:	8f 93       	push	r24
    33c2:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <fastPwmSingleDiffSum+0x2>
    33c6:	8f 93       	push	r24
    33c8:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <fastPwmSingleDiffSum+0x1>
    33cc:	8f 93       	push	r24
    33ce:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <fastPwmSingleDiffSum>
    33d2:	8f 93       	push	r24
    33d4:	ff 92       	push	r15
    33d6:	ef 92       	push	r14
    33d8:	1f 93       	push	r17
    33da:	0f 93       	push	r16
    33dc:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				fastPwmSingleDiffSum);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    33e0:	28 2f       	mov	r18, r24
    33e2:	a8 01       	movw	r20, r16
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	f8 94       	cli
    33f0:	de bf       	out	0x3e, r29	; 62
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	cd bf       	out	0x3d, r28	; 61
    33f6:	46 c3       	rjmp	.+1676   	; 0x3a84 <main_fw_giveAway+0x2012>

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
			if (stackCheckMungWall[idx] != 0x5a) {
    33f8:	21 91       	ld	r18, Z+
    33fa:	2a 35       	cpi	r18, 0x5A	; 90
    33fc:	89 f0       	breq	.+34     	; 0x3420 <main_fw_giveAway+0x19ae>
    33fe:	02 c0       	rjmp	.+4      	; 0x3404 <main_fw_giveAway+0x1992>
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t localCheckAddr = (uint16_t) (&(stackCheckMungWall[idx]));
    3404:	87 53       	subi	r24, 0x37	; 55
    3406:	9a 4f       	sbci	r25, 0xFA	; 250
				if (mainSCMungwallAddr > localCheckAddr) {
    3408:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <mainSCMungwallAddr>
    340c:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <mainSCMungwallAddr+0x1>
    3410:	82 17       	cp	r24, r18
    3412:	93 07       	cpc	r25, r19
    3414:	50 f4       	brcc	.+20     	; 0x342a <main_fw_giveAway+0x19b8>
					mainSCMungwallAddr = localCheckAddr;
    3416:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <mainSCMungwallAddr+0x1>
    341a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <mainSCMungwallAddr>
    341e:	05 c0       	rjmp	.+10     	; 0x342a <main_fw_giveAway+0x19b8>
	}

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
    3420:	01 96       	adiw	r24, 0x01	; 1
    3422:	80 32       	cpi	r24, 0x20	; 32
    3424:	b2 e0       	ldi	r27, 0x02	; 2
    3426:	9b 07       	cpc	r25, r27
    3428:	39 f7       	brne	.-50     	; 0x33f8 <main_fw_giveAway+0x1986>
				/* leave loop body */
				break;
			}
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC01, sizeof(PM_FORMAT_SC01));
    342a:	25 e4       	ldi	r18, 0x45	; 69
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	40 e4       	ldi	r20, 0x40	; 64
    3430:	52 e0       	ldi	r21, 0x02	; 2
    3432:	6d e7       	ldi	r22, 0x7D	; 125
    3434:	73 e0       	ldi	r23, 0x03	; 3
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    343c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mainSCStackAddr+0x1>
    3440:	8f 93       	push	r24
    3442:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <mainSCStackAddr>
    3446:	8f 93       	push	r24
    3448:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mainSCMungwallAddr+0x1>
    344c:	8f 93       	push	r24
    344e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <mainSCMungwallAddr>
    3452:	8f 93       	push	r24
    3454:	0f 2e       	mov	r0, r31
    3456:	fd e7       	ldi	r31, 0x7D	; 125
    3458:	ef 2e       	mov	r14, r31
    345a:	f3 e0       	ldi	r31, 0x03	; 3
    345c:	ff 2e       	mov	r15, r31
    345e:	f0 2d       	mov	r31, r0
    3460:	ff 92       	push	r15
    3462:	ef 92       	push	r14
    3464:	0d ef       	ldi	r16, 0xFD	; 253
    3466:	13 e0       	ldi	r17, 0x03	; 3
    3468:	1f 93       	push	r17
    346a:	0f 93       	push	r16
    346c:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				mainSCMungwallAddr,
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3470:	28 2f       	mov	r18, r24
    3472:	a8 01       	movw	r20, r16
    3474:	60 e0       	ldi	r22, 0x00	; 0
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
    347c:	2d e3       	ldi	r18, 0x3D	; 61
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	43 e0       	ldi	r20, 0x03	; 3
    3482:	52 e0       	ldi	r21, 0x02	; 2
    3484:	b7 01       	movw	r22, r14
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
				twiState.isProcessing,
				twiState.errStart,
				twiState.adrAck,
				twiState.adrAckValid,
				twiState.dataAck,
				twiState.dataAckValid);
    348c:	ee e2       	ldi	r30, 0x2E	; 46
    348e:	f1 e0       	ldi	r31, 0x01	; 1
    3490:	70 81       	ld	r23, Z
    3492:	72 fb       	bst	r23, 2
    3494:	77 27       	eor	r23, r23
    3496:	70 f9       	bld	r23, 0
				twiState.doStart,
				twiState.isProcessing,
				twiState.errStart,
				twiState.adrAck,
				twiState.adrAckValid,
				twiState.dataAck,
    3498:	60 81       	ld	r22, Z
    349a:	63 fb       	bst	r22, 3
    349c:	66 27       	eor	r22, r22
    349e:	60 f9       	bld	r22, 0
				twiState.state,
				twiState.doStart,
				twiState.isProcessing,
				twiState.errStart,
				twiState.adrAck,
				twiState.adrAckValid,
    34a0:	50 81       	ld	r21, Z
    34a2:	51 70       	andi	r21, 0x01	; 1
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
				twiState.isProcessing,
				twiState.errStart,
				twiState.adrAck,
    34a4:	40 81       	ld	r20, Z
    34a6:	46 95       	lsr	r20
    34a8:	41 70       	andi	r20, 0x01	; 1
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
				twiState.isProcessing,
				twiState.errStart,
    34aa:	ed e2       	ldi	r30, 0x2D	; 45
    34ac:	f1 e0       	ldi	r31, 0x01	; 1
    34ae:	30 81       	ld	r19, Z
    34b0:	35 fb       	bst	r19, 5
    34b2:	33 27       	eor	r19, r19
    34b4:	30 f9       	bld	r19, 0

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
				twiState.isProcessing,
    34b6:	20 81       	ld	r18, Z
    34b8:	26 95       	lsr	r18
    34ba:	21 70       	andi	r18, 0x01	; 1
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
    34bc:	90 81       	ld	r25, Z
    34be:	91 70       	andi	r25, 0x01	; 1
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
    34c0:	80 81       	ld	r24, Z
    34c2:	86 95       	lsr	r24
    34c4:	86 95       	lsr	r24
    34c6:	87 70       	andi	r24, 0x07	; 7
				mainSCMungwallAddr,
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    34c8:	1f 92       	push	r1
    34ca:	7f 93       	push	r23
    34cc:	1f 92       	push	r1
    34ce:	6f 93       	push	r22
    34d0:	1f 92       	push	r1
    34d2:	5f 93       	push	r21
    34d4:	1f 92       	push	r1
    34d6:	4f 93       	push	r20
    34d8:	1f 92       	push	r1
    34da:	3f 93       	push	r19
    34dc:	1f 92       	push	r1
    34de:	2f 93       	push	r18
    34e0:	1f 92       	push	r1
    34e2:	9f 93       	push	r25
    34e4:	1f 92       	push	r1
    34e6:	8f 93       	push	r24
    34e8:	ff 92       	push	r15
    34ea:	ef 92       	push	r14
    34ec:	1f 93       	push	r17
    34ee:	0f 93       	push	r16
    34f0:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				twiState.errStart,
				twiState.adrAck,
				twiState.adrAckValid,
				twiState.dataAck,
				twiState.dataAckValid);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    34f4:	28 2f       	mov	r18, r24
    34f6:	a8 01       	movw	r20, r16
    34f8:	60 e0       	ldi	r22, 0x00	; 0
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
	}

	if (main_bf.mainIsLcdAttached) {
    350a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    350e:	88 23       	and	r24, r24
    3510:	0c f0       	brlt	.+2      	; 0x3514 <main_fw_giveAway+0x1aa2>
    3512:	e9 c1       	rjmp	.+978    	; 0x38e6 <main_fw_giveAway+0x1e74>
		/* I2C LCD-Module via MCP23017 16 bit port expander */  // XXX I2C LCD-Module displayed fields are here
		uint8_t sreg = SREG;
    3514:	2f b7       	in	r18, 0x3f	; 63
		cli();
    3516:	f8 94       	cli
		uint32_t localFastCtr1ms = fastCtr1ms;
    3518:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <fastCtr1ms>
    351c:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <fastCtr1ms+0x1>
    3520:	a0 91 26 05 	lds	r26, 0x0526	; 0x800526 <fastCtr1ms+0x2>
    3524:	b0 91 27 05 	lds	r27, 0x0527	; 0x800527 <fastCtr1ms+0x3>
		SREG = sreg;
    3528:	2f bf       	out	0x3f, r18	; 63

		if (localFastCtr1ms <= 5000) {
    352a:	89 38       	cpi	r24, 0x89	; 137
    352c:	93 41       	sbci	r25, 0x13	; 19
    352e:	a1 05       	cpc	r26, r1
    3530:	b1 05       	cpc	r27, r1
    3532:	28 f5       	brcc	.+74     	; 0x357e <main_fw_giveAway+0x1b0c>
			/* welcome message */
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC01, sizeof(PM_FORMAT_LC01));
    3534:	21 e1       	ldi	r18, 0x11	; 17
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	45 e1       	ldi	r20, 0x15	; 21
    353a:	53 e0       	ldi	r21, 0x03	; 3
    353c:	6d e7       	ldi	r22, 0x7D	; 125
    353e:	73 e0       	ldi	r23, 0x03	; 3
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			twi_mcp23017_av1624_fw_gotoPosition(0, 0);
    3546:	60 e0       	ldi	r22, 0x00	; 0
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	0e 94 43 27 	call	0x4e86	; 0x4e86 <twi_mcp23017_av1624_fw_gotoPosition>
			twi_mcp23017_av1624_fw_writeString(mainFormatBuffer, 16);
    354e:	60 e1       	ldi	r22, 0x10	; 16
    3550:	8d e7       	ldi	r24, 0x7D	; 125
    3552:	93 e0       	ldi	r25, 0x03	; 3
    3554:	0e 94 77 27 	call	0x4eee	; 0x4eee <twi_mcp23017_av1624_fw_writeString>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC02, sizeof(PM_FORMAT_LC02));
    3558:	21 e1       	ldi	r18, 0x11	; 17
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	44 e0       	ldi	r20, 0x04	; 4
    355e:	53 e0       	ldi	r21, 0x03	; 3
    3560:	6d e7       	ldi	r22, 0x7D	; 125
    3562:	73 e0       	ldi	r23, 0x03	; 3
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	0e 94 43 27 	call	0x4e86	; 0x4e86 <twi_mcp23017_av1624_fw_gotoPosition>
			twi_mcp23017_av1624_fw_writeString(mainFormatBuffer, 16);
    3572:	60 e1       	ldi	r22, 0x10	; 16
    3574:	8d e7       	ldi	r24, 0x7D	; 125
    3576:	93 e0       	ldi	r25, 0x03	; 3
    3578:	0e 94 77 27 	call	0x4eee	; 0x4eee <twi_mcp23017_av1624_fw_writeString>
    357c:	b4 c1       	rjmp	.+872    	; 0x38e6 <main_fw_giveAway+0x1e74>
		} else {
			static uint8_t displayNr	= 0;
			static uint8_t displaySubNr	= 0;

			/* the status-line */
			if (mainRefClkState > REFCLK_STATE_NOSYNC) {
    357e:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    3582:	88 23       	and	r24, r24
    3584:	09 f4       	brne	.+2      	; 0x3588 <main_fw_giveAway+0x1b16>
    3586:	3f c0       	rjmp	.+126    	; 0x3606 <main_fw_giveAway+0x1b94>
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC11, sizeof(PM_FORMAT_LC11));
    3588:	28 e1       	ldi	r18, 0x18	; 24
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	4c ee       	ldi	r20, 0xEC	; 236
    358e:	52 e0       	ldi	r21, 0x02	; 2
    3590:	6d e7       	ldi	r22, 0x7D	; 125
    3592:	73 e0       	ldi	r23, 0x03	; 3
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    359a:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <main_nmeaSatsUsed+0x1>
    359e:	8f 93       	push	r24
    35a0:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <main_nmeaSatsUsed>
    35a4:	8f 93       	push	r24
    35a6:	1f 92       	push	r1
    35a8:	83 ef       	ldi	r24, 0xF3	; 243
    35aa:	8f 93       	push	r24
    35ac:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    35b0:	1f 92       	push	r1
    35b2:	8f 93       	push	r24
    35b4:	1f 92       	push	r1
    35b6:	80 ee       	ldi	r24, 0xE0	; 224
    35b8:	8f 93       	push	r24
						'b',
						(mainPpm * 1000.0f),
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	4a e7       	ldi	r20, 0x7A	; 122
    35c0:	54 e4       	ldi	r21, 0x44	; 68
    35c2:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <mainPpm>
    35c6:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <mainPpm+0x1>
    35ca:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <mainPpm+0x2>
    35ce:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <mainPpm+0x3>
    35d2:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
			static uint8_t displaySubNr	= 0;

			/* the status-line */
			if (mainRefClkState > REFCLK_STATE_NOSYNC) {
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC11, sizeof(PM_FORMAT_LC11));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    35d6:	9f 93       	push	r25
    35d8:	8f 93       	push	r24
    35da:	7f 93       	push	r23
    35dc:	6f 93       	push	r22
    35de:	1f 92       	push	r1
    35e0:	82 e6       	ldi	r24, 0x62	; 98
    35e2:	8f 93       	push	r24
    35e4:	8d e7       	ldi	r24, 0x7D	; 125
    35e6:	93 e0       	ldi	r25, 0x03	; 3
    35e8:	9f 93       	push	r25
    35ea:	8f 93       	push	r24
    35ec:	8d ef       	ldi	r24, 0xFD	; 253
    35ee:	93 e0       	ldi	r25, 0x03	; 3
    35f0:	9f 93       	push	r25
    35f2:	8f 93       	push	r24
    35f4:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
    35f8:	18 2f       	mov	r17, r24
    35fa:	0f b6       	in	r0, 0x3f	; 63
    35fc:	f8 94       	cli
    35fe:	de bf       	out	0x3e, r29	; 62
    3600:	0f be       	out	0x3f, r0	; 63
    3602:	cd bf       	out	0x3d, r28	; 61
    3604:	29 c0       	rjmp	.+82     	; 0x3658 <main_fw_giveAway+0x1be6>
						0xe0,
						mainRefClkState,
						0xf3,
						main_nmeaSatsUsed);
			} else {
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC12, sizeof(PM_FORMAT_LC12));
    3606:	28 e1       	ldi	r18, 0x18	; 24
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	44 ed       	ldi	r20, 0xD4	; 212
    360c:	52 e0       	ldi	r21, 0x02	; 2
    360e:	6d e7       	ldi	r22, 0x7D	; 125
    3610:	73 e0       	ldi	r23, 0x03	; 3
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3618:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <main_nmeaSatsUsed+0x1>
    361c:	8f 93       	push	r24
    361e:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <main_nmeaSatsUsed>
    3622:	8f 93       	push	r24
    3624:	1f 92       	push	r1
    3626:	83 ef       	ldi	r24, 0xF3	; 243
    3628:	8f 93       	push	r24
    362a:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    362e:	1f 92       	push	r1
    3630:	8f 93       	push	r24
    3632:	1f 92       	push	r1
    3634:	80 ee       	ldi	r24, 0xE0	; 224
    3636:	8f 93       	push	r24
    3638:	8d e7       	ldi	r24, 0x7D	; 125
    363a:	93 e0       	ldi	r25, 0x03	; 3
    363c:	9f 93       	push	r25
    363e:	8f 93       	push	r24
    3640:	8d ef       	ldi	r24, 0xFD	; 253
    3642:	93 e0       	ldi	r25, 0x03	; 3
    3644:	9f 93       	push	r25
    3646:	8f 93       	push	r24
    3648:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
    364c:	18 2f       	mov	r17, r24
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
						0xe0,
						mainRefClkState,
						0xf3,
						main_nmeaSatsUsed);
			}
			twi_mcp23017_av1624_fw_gotoPosition(0, 0);
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	0e 94 43 27 	call	0x4e86	; 0x4e86 <twi_mcp23017_av1624_fw_gotoPosition>
			twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    3660:	61 2f       	mov	r22, r17
    3662:	8d ef       	ldi	r24, 0xFD	; 253
    3664:	93 e0       	ldi	r25, 0x03	; 3
    3666:	0e 94 77 27 	call	0x4eee	; 0x4eee <twi_mcp23017_av1624_fw_writeString>

			switch (displayNr) {
    366a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <displayNr.2867>
    366e:	81 30       	cpi	r24, 0x01	; 1
    3670:	09 f4       	brne	.+2      	; 0x3674 <main_fw_giveAway+0x1c02>
    3672:	75 c0       	rjmp	.+234    	; 0x375e <main_fw_giveAway+0x1cec>
    3674:	82 30       	cpi	r24, 0x02	; 2
    3676:	09 f4       	brne	.+2      	; 0x367a <main_fw_giveAway+0x1c08>
    3678:	c5 c0       	rjmp	.+394    	; 0x3804 <main_fw_giveAway+0x1d92>
			default:
			case 0:
				{
					/* the timestamp */
					uint16_t year	=  main_nmeaDate					% 10000;
    367a:	80 90 46 05 	lds	r8, 0x0546	; 0x800546 <main_nmeaDate>
    367e:	90 90 47 05 	lds	r9, 0x0547	; 0x800547 <main_nmeaDate+0x1>
    3682:	a0 90 48 05 	lds	r10, 0x0548	; 0x800548 <main_nmeaDate+0x2>
    3686:	b0 90 49 05 	lds	r11, 0x0549	; 0x800549 <main_nmeaDate+0x3>
					uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
					uint8_t day		=  main_nmeaDate		/ 1000000;
					uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
    368a:	40 90 42 05 	lds	r4, 0x0542	; 0x800542 <main_nmeaTimeUtcInt>
    368e:	50 90 43 05 	lds	r5, 0x0543	; 0x800543 <main_nmeaTimeUtcInt+0x1>
    3692:	60 90 44 05 	lds	r6, 0x0544	; 0x800544 <main_nmeaTimeUtcInt+0x2>
    3696:	70 90 45 05 	lds	r7, 0x0545	; 0x800545 <main_nmeaTimeUtcInt+0x3>
					uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
					uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
					memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
    369a:	2c e1       	ldi	r18, 0x1C	; 28
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	48 eb       	ldi	r20, 0xB8	; 184
    36a0:	52 e0       	ldi	r21, 0x02	; 2
    36a2:	6d e7       	ldi	r22, 0x7D	; 125
    36a4:	73 e0       	ldi	r23, 0x03	; 3
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
					uint16_t year	=  main_nmeaDate					% 10000;
					uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
					uint8_t day		=  main_nmeaDate		/ 1000000;
					uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
					uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
					uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
    36ac:	0f 2e       	mov	r0, r31
    36ae:	f4 e6       	ldi	r31, 0x64	; 100
    36b0:	cf 2e       	mov	r12, r31
    36b2:	d1 2c       	mov	r13, r1
    36b4:	e1 2c       	mov	r14, r1
    36b6:	f1 2c       	mov	r15, r1
    36b8:	f0 2d       	mov	r31, r0
    36ba:	c3 01       	movw	r24, r6
    36bc:	b2 01       	movw	r22, r4
    36be:	a7 01       	movw	r20, r14
    36c0:	96 01       	movw	r18, r12
    36c2:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divmodsi4>
					memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
					len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    36c6:	1f 92       	push	r1
    36c8:	6f 93       	push	r22
					/* the timestamp */
					uint16_t year	=  main_nmeaDate					% 10000;
					uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
					uint8_t day		=  main_nmeaDate		/ 1000000;
					uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
					uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
    36ca:	ca 01       	movw	r24, r20
    36cc:	b9 01       	movw	r22, r18
    36ce:	a7 01       	movw	r20, r14
    36d0:	96 01       	movw	r18, r12
    36d2:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divmodsi4>
					uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
					memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
					len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    36d6:	1f 92       	push	r1
    36d8:	6f 93       	push	r22
				{
					/* the timestamp */
					uint16_t year	=  main_nmeaDate					% 10000;
					uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
					uint8_t day		=  main_nmeaDate		/ 1000000;
					uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
    36da:	c3 01       	movw	r24, r6
    36dc:	b2 01       	movw	r22, r4
    36de:	20 e1       	ldi	r18, 0x10	; 16
    36e0:	37 e2       	ldi	r19, 0x27	; 39
    36e2:	40 e0       	ldi	r20, 0x00	; 0
    36e4:	50 e0       	ldi	r21, 0x00	; 0
    36e6:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divmodsi4>
					uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
					uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
					memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
					len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    36ea:	1f 92       	push	r1
    36ec:	2f 93       	push	r18
			case 0:
				{
					/* the timestamp */
					uint16_t year	=  main_nmeaDate					% 10000;
					uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
					uint8_t day		=  main_nmeaDate		/ 1000000;
    36ee:	c5 01       	movw	r24, r10
    36f0:	b4 01       	movw	r22, r8
    36f2:	20 e4       	ldi	r18, 0x40	; 64
    36f4:	32 e4       	ldi	r19, 0x42	; 66
    36f6:	4f e0       	ldi	r20, 0x0F	; 15
    36f8:	50 e0       	ldi	r21, 0x00	; 0
    36fa:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divmodsi4>
					uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
					uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
					uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
					memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
					len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    36fe:	1f 92       	push	r1
    3700:	2f 93       	push	r18
			default:
			case 0:
				{
					/* the timestamp */
					uint16_t year	=  main_nmeaDate					% 10000;
					uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
    3702:	c5 01       	movw	r24, r10
    3704:	b4 01       	movw	r22, r8
    3706:	20 e1       	ldi	r18, 0x10	; 16
    3708:	37 e2       	ldi	r19, 0x27	; 39
    370a:	40 e0       	ldi	r20, 0x00	; 0
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divmodsi4>
    3712:	16 2f       	mov	r17, r22
    3714:	07 2f       	mov	r16, r23
    3716:	ca 01       	movw	r24, r20
    3718:	b9 01       	movw	r22, r18
    371a:	a7 01       	movw	r20, r14
    371c:	96 01       	movw	r18, r12
    371e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divmodsi4>
					uint8_t day		=  main_nmeaDate		/ 1000000;
					uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
					uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
					uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
					memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
					len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3722:	1f 92       	push	r1
    3724:	6f 93       	push	r22
    3726:	0f 93       	push	r16
    3728:	1f 93       	push	r17
    372a:	8d e7       	ldi	r24, 0x7D	; 125
    372c:	93 e0       	ldi	r25, 0x03	; 3
    372e:	9f 93       	push	r25
    3730:	8f 93       	push	r24
    3732:	8d ef       	ldi	r24, 0xFD	; 253
    3734:	93 e0       	ldi	r25, 0x03	; 3
    3736:	9f 93       	push	r25
    3738:	8f 93       	push	r24
    373a:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
    373e:	18 2f       	mov	r17, r24
							month,
							day,
							hour,
							minutes,
							seconds);
					twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	0e 94 43 27 	call	0x4e86	; 0x4e86 <twi_mcp23017_av1624_fw_gotoPosition>
					twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    3748:	61 2f       	mov	r22, r17
    374a:	8d ef       	ldi	r24, 0xFD	; 253
    374c:	93 e0       	ldi	r25, 0x03	; 3
    374e:	0e 94 77 27 	call	0x4eee	; 0x4eee <twi_mcp23017_av1624_fw_writeString>
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	f8 94       	cli
    3756:	de bf       	out	0x3e, r29	; 62
    3758:	0f be       	out	0x3f, r0	; 63
    375a:	cd bf       	out	0x3d, r28	; 61
    375c:	ac c0       	rjmp	.+344    	; 0x38b6 <main_fw_giveAway+0x1e44>
				break;

			case 1:
				{
					/* SAT data */
					memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC22, sizeof(PM_FORMAT_LC22));
    375e:	20 e2       	ldi	r18, 0x20	; 32
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	48 e9       	ldi	r20, 0x98	; 152
    3764:	52 e0       	ldi	r21, 0x02	; 2
    3766:	6d e7       	ldi	r22, 0x7D	; 125
    3768:	73 e0       	ldi	r23, 0x03	; 3
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
					len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3770:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <main_nmeaSatsEphemerisGlonass+0x1>
    3774:	8f 93       	push	r24
    3776:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <main_nmeaSatsEphemerisGlonass>
    377a:	8f 93       	push	r24
    377c:	1f 92       	push	r1
    377e:	8b ee       	ldi	r24, 0xEB	; 235
    3780:	8f 93       	push	r24
    3782:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <main_nmeaSatsEphemerisGpsGalileoQzss+0x1>
    3786:	8f 93       	push	r24
    3788:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <main_nmeaSatsEphemerisGpsGalileoQzss>
    378c:	8f 93       	push	r24
    378e:	1f 92       	push	r1
    3790:	8f ed       	ldi	r24, 0xDF	; 223
    3792:	8f 93       	push	r24
    3794:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <main_nmeaPdop+0x3>
    3798:	8f 93       	push	r24
    379a:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <main_nmeaPdop+0x2>
    379e:	8f 93       	push	r24
    37a0:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <main_nmeaPdop+0x1>
    37a4:	8f 93       	push	r24
    37a6:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <main_nmeaPdop>
    37aa:	8f 93       	push	r24
    37ac:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <main_nmeaPosFixIndicator+0x1>
    37b0:	8f 93       	push	r24
    37b2:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <main_nmeaPosFixIndicator>
    37b6:	8f 93       	push	r24
    37b8:	1f 92       	push	r1
    37ba:	86 e4       	ldi	r24, 0x46	; 70
    37bc:	8f 93       	push	r24
    37be:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <main_nmeaMode2+0x1>
    37c2:	8f 93       	push	r24
    37c4:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <main_nmeaMode2>
    37c8:	8f 93       	push	r24
    37ca:	1f 92       	push	r1
    37cc:	8d e4       	ldi	r24, 0x4D	; 77
    37ce:	8f 93       	push	r24
    37d0:	8d e7       	ldi	r24, 0x7D	; 125
    37d2:	93 e0       	ldi	r25, 0x03	; 3
    37d4:	9f 93       	push	r25
    37d6:	8f 93       	push	r24
    37d8:	8d ef       	ldi	r24, 0xFD	; 253
    37da:	93 e0       	ldi	r25, 0x03	; 3
    37dc:	9f 93       	push	r25
    37de:	8f 93       	push	r24
    37e0:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
    37e4:	18 2f       	mov	r17, r24
							main_nmeaPdop,
							0xdf,
							main_nmeaSatsEphemerisGpsGalileoQzss,
							0xeb,
							main_nmeaSatsEphemerisGlonass);
					twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	0e 94 43 27 	call	0x4e86	; 0x4e86 <twi_mcp23017_av1624_fw_gotoPosition>
					twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    37ee:	61 2f       	mov	r22, r17
    37f0:	8d ef       	ldi	r24, 0xFD	; 253
    37f2:	93 e0       	ldi	r25, 0x03	; 3
    37f4:	0e 94 77 27 	call	0x4eee	; 0x4eee <twi_mcp23017_av1624_fw_writeString>
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	59 c0       	rjmp	.+178    	; 0x38b6 <main_fw_giveAway+0x1e44>
				break;

			case 2:
				{
					/* PWM data */
					uint8_t sreg = SREG;
    3804:	8f b7       	in	r24, 0x3f	; 63
					cli();
    3806:	f8 94       	cli
					uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
    3808:	00 91 23 05 	lds	r16, 0x0523	; 0x800523 <fastPwmLoopVal>
					uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
    380c:	10 91 22 05 	lds	r17, 0x0522	; 0x800522 <fastPwmSubLoopVal>
					SREG = sreg;
    3810:	8f bf       	out	0x3f, r24	; 63

					memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC23, sizeof(PM_FORMAT_LC23));
    3812:	23 e1       	ldi	r18, 0x13	; 19
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	45 e8       	ldi	r20, 0x85	; 133
    3818:	52 e0       	ldi	r21, 0x02	; 2
    381a:	6d e7       	ldi	r22, 0x7D	; 125
    381c:	73 e0       	ldi	r23, 0x03	; 3
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
					len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3824:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <mainAdcPullVolts+0x3>
    3828:	8f 93       	push	r24
    382a:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <mainAdcPullVolts+0x2>
    382e:	8f 93       	push	r24
    3830:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <mainAdcPullVolts+0x1>
    3834:	8f 93       	push	r24
    3836:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <mainAdcPullVolts>
    383a:	8f 93       	push	r24
    383c:	1f 92       	push	r1
    383e:	8b ea       	ldi	r24, 0xAB	; 171
    3840:	8f 93       	push	r24
}

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    3842:	60 2f       	mov	r22, r16
    3844:	70 e0       	ldi	r23, 0x00	; 0
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    384e:	6b 01       	movw	r12, r22
    3850:	7c 01       	movw	r14, r24
    3852:	61 2f       	mov	r22, r17
    3854:	70 e0       	ldi	r23, 0x00	; 0
    3856:	80 e0       	ldi	r24, 0x00	; 0
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	40 e8       	ldi	r20, 0x80	; 128
    3864:	5b e3       	ldi	r21, 0x3B	; 59
    3866:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    386a:	9b 01       	movw	r18, r22
    386c:	ac 01       	movw	r20, r24
    386e:	c7 01       	movw	r24, r14
    3870:	b6 01       	movw	r22, r12
    3872:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
					uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
					uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
					SREG = sreg;

					memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC23, sizeof(PM_FORMAT_LC23));
					len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3876:	9f 93       	push	r25
    3878:	8f 93       	push	r24
    387a:	7f 93       	push	r23
    387c:	6f 93       	push	r22
    387e:	1f 92       	push	r1
    3880:	80 e5       	ldi	r24, 0x50	; 80
    3882:	8f 93       	push	r24
    3884:	8d e7       	ldi	r24, 0x7D	; 125
    3886:	93 e0       	ldi	r25, 0x03	; 3
    3888:	9f 93       	push	r25
    388a:	8f 93       	push	r24
    388c:	8d ef       	ldi	r24, 0xFD	; 253
    388e:	93 e0       	ldi	r25, 0x03	; 3
    3890:	9f 93       	push	r25
    3892:	8f 93       	push	r24
    3894:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
    3898:	18 2f       	mov	r17, r24
							'P',
							main_fw_calcTimerToFloat(localFastPwmLoopVal, localFastPwmSubLoopVal),
							0xab,
							mainAdcPullVolts);
					twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    389a:	60 e0       	ldi	r22, 0x00	; 0
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	0e 94 43 27 	call	0x4e86	; 0x4e86 <twi_mcp23017_av1624_fw_gotoPosition>
					twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    38a2:	61 2f       	mov	r22, r17
    38a4:	8d ef       	ldi	r24, 0xFD	; 253
    38a6:	93 e0       	ldi	r25, 0x03	; 3
    38a8:	0e 94 77 27 	call	0x4eee	; 0x4eee <twi_mcp23017_av1624_fw_writeString>
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	f8 94       	cli
    38b0:	de bf       	out	0x3e, r29	; 62
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	cd bf       	out	0x3d, r28	; 61
				}
				break;
			}
			if (++displaySubNr >= 3) {
    38b6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <displaySubNr.2868>
    38ba:	8f 5f       	subi	r24, 0xFF	; 255
    38bc:	83 30       	cpi	r24, 0x03	; 3
    38be:	18 f4       	brcc	.+6      	; 0x38c6 <main_fw_giveAway+0x1e54>
    38c0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <displaySubNr.2868>
    38c4:	10 c0       	rjmp	.+32     	; 0x38e6 <main_fw_giveAway+0x1e74>
				displaySubNr = 0;
    38c6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <displaySubNr.2868>
				++displayNr;
    38ca:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <displayNr.2867>
    38ce:	9f 5f       	subi	r25, 0xFF	; 255
				displayNr %= 3;
    38d0:	8b ea       	ldi	r24, 0xAB	; 171
    38d2:	98 9f       	mul	r25, r24
    38d4:	81 2d       	mov	r24, r1
    38d6:	11 24       	eor	r1, r1
    38d8:	86 95       	lsr	r24
    38da:	28 2f       	mov	r18, r24
    38dc:	22 0f       	add	r18, r18
    38de:	82 0f       	add	r24, r18
    38e0:	98 1b       	sub	r25, r24
    38e2:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <displayNr.2867>
			}
		}
	}

	if (mainPwmTerminalAdj) {
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	a9 01       	movw	r20, r18
    38ec:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <mainPwmTerminalAdj>
    38f0:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <mainPwmTerminalAdj+0x1>
    38f4:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <mainPwmTerminalAdj+0x2>
    38f8:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <mainPwmTerminalAdj+0x3>
    38fc:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <__cmpsf2>
    3900:	88 23       	and	r24, r24
    3902:	09 f4       	brne	.+2      	; 0x3906 <main_fw_giveAway+0x1e94>
    3904:	ee c0       	rjmp	.+476    	; 0x3ae2 <main_fw_giveAway+0x2070>
		uint8_t localFastPwmSubLoopValNext;
		uint8_t localFastPwmLoopValNext;

		{
			/* correct PWM with  +/- <value> */
			uint8_t sreg = SREG;
    3906:	ff b6       	in	r15, 0x3f	; 63
			cli();
    3908:	f8 94       	cli
			localFastPwmLoopValBefore		= fastPwmLoopVal;
    390a:	10 91 23 05 	lds	r17, 0x0523	; 0x800523 <fastPwmLoopVal>
			localFastPwmSubLoopValBefore	= fastPwmSubLoopVal;
    390e:	00 91 22 05 	lds	r16, 0x0522	; 0x800522 <fastPwmSubLoopVal>
			SREG = sreg;
    3912:	ff be       	out	0x3f, r15	; 63

			/* calculate next value */
			localFastPwmLoopValNext		= localFastPwmLoopValBefore;
    3914:	19 83       	std	Y+1, r17	; 0x01
			localFastPwmSubLoopValNext	= localFastPwmSubLoopValBefore;
    3916:	0d 83       	std	Y+5, r16	; 0x05
			(void) main_fw_calcTimerAdj(mainPwmTerminalAdj, &localFastPwmLoopValNext, &localFastPwmSubLoopValNext);
    3918:	60 91 88 05 	lds	r22, 0x0588	; 0x800588 <mainPwmTerminalAdj>
    391c:	70 91 89 05 	lds	r23, 0x0589	; 0x800589 <mainPwmTerminalAdj+0x1>
    3920:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <mainPwmTerminalAdj+0x2>
    3924:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <mainPwmTerminalAdj+0x3>
    3928:	9e 01       	movw	r18, r28
    392a:	2b 5f       	subi	r18, 0xFB	; 251
    392c:	3f 4f       	sbci	r19, 0xFF	; 255
    392e:	ae 01       	movw	r20, r28
    3930:	4f 5f       	subi	r20, 0xFF	; 255
    3932:	5f 4f       	sbci	r21, 0xFF	; 255
    3934:	0e 94 20 0a 	call	0x1440	; 0x1440 <main_fw_calcTimerAdj>

			/* write back the global variables for PWM and sub-PWM */
			cli();
    3938:	f8 94       	cli
			fastPwmLoopVal		= localFastPwmLoopValNext;
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubLoopValNext;
    3940:	8d 81       	ldd	r24, Y+5	; 0x05
    3942:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <fastPwmSubLoopVal>
			SREG = sreg;
    3946:	ff be       	out	0x3f, r15	; 63
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_ID01, sizeof(PM_FORMAT_ID01));
    3948:	26 e6       	ldi	r18, 0x66	; 102
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	4f ef       	ldi	r20, 0xFF	; 255
    394e:	54 e0       	ldi	r21, 0x04	; 4
    3950:	6d e7       	ldi	r22, 0x7D	; 125
    3952:	73 e0       	ldi	r23, 0x03	; 3
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		uint8_t len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    395a:	1f 92       	push	r1
    395c:	0f 93       	push	r16
    395e:	1f 92       	push	r1
    3960:	1f 93       	push	r17
    3962:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <mainPwmTerminalAdj+0x3>
    3966:	8f 93       	push	r24
    3968:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <mainPwmTerminalAdj+0x2>
    396c:	8f 93       	push	r24
    396e:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <mainPwmTerminalAdj+0x1>
    3972:	8f 93       	push	r24
    3974:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <mainPwmTerminalAdj>
    3978:	8f 93       	push	r24
    397a:	0f 2e       	mov	r0, r31
    397c:	fd e7       	ldi	r31, 0x7D	; 125
    397e:	ef 2e       	mov	r14, r31
    3980:	f3 e0       	ldi	r31, 0x03	; 3
    3982:	ff 2e       	mov	r15, r31
    3984:	f0 2d       	mov	r31, r0
    3986:	ff 92       	push	r15
    3988:	ef 92       	push	r14
    398a:	0d ef       	ldi	r16, 0xFD	; 253
    398c:	13 e0       	ldi	r17, 0x03	; 3
    398e:	1f 93       	push	r17
    3990:	0f 93       	push	r16
    3992:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				mainPwmTerminalAdj,
				localFastPwmLoopValBefore,
				localFastPwmSubLoopValBefore);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3996:	28 2f       	mov	r18, r24
    3998:	a8 01       	movw	r20, r16
    399a:	60 e0       	ldi	r22, 0x00	; 0
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_ID02, sizeof(PM_FORMAT_ID02));
    39a2:	26 e6       	ldi	r18, 0x66	; 102
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	49 e9       	ldi	r20, 0x99	; 153
    39a8:	54 e0       	ldi	r21, 0x04	; 4
    39aa:	b7 01       	movw	r22, r14
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    39b2:	8d 81       	ldd	r24, Y+5	; 0x05
    39b4:	1f 92       	push	r1
    39b6:	8f 93       	push	r24
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	1f 92       	push	r1
    39bc:	8f 93       	push	r24
    39be:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <mainPwmTerminalAdj+0x3>
    39c2:	8f 93       	push	r24
    39c4:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <mainPwmTerminalAdj+0x2>
    39c8:	8f 93       	push	r24
    39ca:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <mainPwmTerminalAdj+0x1>
    39ce:	8f 93       	push	r24
    39d0:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <mainPwmTerminalAdj>
    39d4:	8f 93       	push	r24
    39d6:	ff 92       	push	r15
    39d8:	ef 92       	push	r14
    39da:	1f 93       	push	r17
    39dc:	0f 93       	push	r16
    39de:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <sprintf>
				mainPwmTerminalAdj,
				localFastPwmLoopValNext,
				localFastPwmSubLoopValNext);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    39e2:	28 2f       	mov	r18, r24
    39e4:	a8 01       	movw	r20, r16
    39e6:	60 e0       	ldi	r22, 0x00	; 0
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		// reset data entry
		mainPwmTerminalAdj = 0.0f;
    39ee:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <mainPwmTerminalAdj>
    39f2:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <mainPwmTerminalAdj+0x1>
    39f6:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <mainPwmTerminalAdj+0x2>
    39fa:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <mainPwmTerminalAdj+0x3>
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	f8 94       	cli
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	0f be       	out	0x3f, r0	; 63
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	6c c0       	rjmp	.+216    	; 0x3ae2 <main_fw_giveAway+0x2070>
				break;
			}
		}

		if (isLocked) {
			ringbuffer_fw_freeSemaphore(true);
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	0e 94 10 20 	call	0x4020	; 0x4020 <ringbuffer_fw_freeSemaphore>
    3a10:	0c 94 4d 11 	jmp	0x229a	; 0x229a <main_fw_giveAway+0x828>
    3a14:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);
    3a16:	69 58       	subi	r22, 0x89	; 137
    3a18:	71 09       	sbc	r23, r1
    3a1a:	07 2e       	mov	r0, r23
    3a1c:	00 0c       	add	r0, r0
    3a1e:	88 0b       	sbc	r24, r24
    3a20:	99 0b       	sbc	r25, r25
    3a22:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    3a26:	26 e1       	ldi	r18, 0x16	; 22
    3a28:	31 e5       	ldi	r19, 0x51	; 81
    3a2a:	42 e0       	ldi	r20, 0x02	; 2
    3a2c:	50 e4       	ldi	r21, 0x40	; 64
    3a2e:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    3a32:	4b 01       	movw	r8, r22
    3a34:	5c 01       	movw	r10, r24
    3a36:	88 cb       	rjmp	.-2288   	; 0x3148 <main_fw_giveAway+0x16d6>
			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
			}

			if ((ADC_PHASE_LO_INSYNC <= adcPhase) && (adcPhase <= ADC_PHASE_HI_INSYNC)) {
    3a38:	80 eb       	ldi	r24, 0xB0	; 176
    3a3a:	86 0f       	add	r24, r22
    3a3c:	84 37       	cpi	r24, 0x74	; 116
    3a3e:	c8 f1       	brcs	.+114    	; 0x3ab2 <main_fw_giveAway+0x2040>
    3a40:	e9 cf       	rjmp	.-46     	; 0x3a14 <main_fw_giveAway+0x1fa2>
    3a42:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);
    3a44:	69 58       	subi	r22, 0x89	; 137
    3a46:	71 09       	sbc	r23, r1
    3a48:	07 2e       	mov	r0, r23
    3a4a:	00 0c       	add	r0, r0
    3a4c:	88 0b       	sbc	r24, r24
    3a4e:	99 0b       	sbc	r25, r25
    3a50:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    3a54:	26 e1       	ldi	r18, 0x16	; 22
    3a56:	31 e5       	ldi	r19, 0x51	; 81
    3a58:	42 e0       	ldi	r20, 0x02	; 2
    3a5a:	50 e4       	ldi	r21, 0x40	; 64
    3a5c:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    3a60:	4b 01       	movw	r8, r22
    3a62:	5c 01       	movw	r10, r24
	float phaseStepsPhase		= 0.0f;
    3a64:	41 2c       	mov	r4, r1
    3a66:	51 2c       	mov	r5, r1
    3a68:	32 01       	movw	r6, r4
	float phaseStepsFrequency	= 0.0f;
    3a6a:	73 01       	movw	r14, r6
    3a6c:	62 01       	movw	r12, r4
    3a6e:	71 cc       	rjmp	.-1822   	; 0x3352 <main_fw_giveAway+0x18e0>

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
			if (stackCheckMungWall[idx] != 0x5a) {
    3a70:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <stackCheckMungWall>
    3a74:	8a 35       	cpi	r24, 0x5A	; 90
    3a76:	09 f0       	breq	.+2      	; 0x3a7a <main_fw_giveAway+0x2008>
    3a78:	c3 cc       	rjmp	.-1658   	; 0x3400 <main_fw_giveAway+0x198e>
    3a7a:	ea ec       	ldi	r30, 0xCA	; 202
    3a7c:	f5 e0       	ldi	r31, 0x05	; 5
	}

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	ba cc       	rjmp	.-1676   	; 0x33f8 <main_fw_giveAway+0x1986>
			/* APC = automatic phase control */
			calcPhase();
		}
	}

	if (main_bf.mainStackCheck) {
    3a84:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3a88:	86 fd       	sbrc	r24, 6
    3a8a:	f2 cf       	rjmp	.-28     	; 0x3a70 <main_fw_giveAway+0x1ffe>
    3a8c:	3e cd       	rjmp	.-1412   	; 0x350a <main_fw_giveAway+0x1a98>
    3a8e:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);
    3a90:	69 58       	subi	r22, 0x89	; 137
    3a92:	71 09       	sbc	r23, r1
    3a94:	07 2e       	mov	r0, r23
    3a96:	00 0c       	add	r0, r0
    3a98:	88 0b       	sbc	r24, r24
    3a9a:	99 0b       	sbc	r25, r25
    3a9c:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    3aa0:	26 e1       	ldi	r18, 0x16	; 22
    3aa2:	31 e5       	ldi	r19, 0x51	; 81
    3aa4:	42 e0       	ldi	r20, 0x02	; 2
    3aa6:	50 e4       	ldi	r21, 0x40	; 64
    3aa8:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    3aac:	4b 01       	movw	r8, r22
    3aae:	5c 01       	movw	r10, r24
    3ab0:	4b cb       	rjmp	.-2410   	; 0x3148 <main_fw_giveAway+0x16d6>
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
			}

			if ((ADC_PHASE_LO_INSYNC <= adcPhase) && (adcPhase <= ADC_PHASE_HI_INSYNC)) {
				if (mainRefClkState < REFCLK_STATE_IN_SYNC) {
    3ab2:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <mainRefClkState>
    3ab6:	8f 30       	cpi	r24, 0x0F	; 15
    3ab8:	08 f4       	brcc	.+2      	; 0x3abc <main_fw_giveAway+0x204a>
    3aba:	02 cb       	rjmp	.-2556   	; 0x30c0 <main_fw_giveAway+0x164e>
    3abc:	e8 cf       	rjmp	.-48     	; 0x3a8e <main_fw_giveAway+0x201c>
    3abe:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);
    3ac0:	69 58       	subi	r22, 0x89	; 137
    3ac2:	71 09       	sbc	r23, r1
    3ac4:	07 2e       	mov	r0, r23
    3ac6:	00 0c       	add	r0, r0
    3ac8:	88 0b       	sbc	r24, r24
    3aca:	99 0b       	sbc	r25, r25
    3acc:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    3ad0:	26 e1       	ldi	r18, 0x16	; 22
    3ad2:	31 e5       	ldi	r19, 0x51	; 81
    3ad4:	42 e0       	ldi	r20, 0x02	; 2
    3ad6:	50 e4       	ldi	r21, 0x40	; 64
    3ad8:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    3adc:	4b 01       	movw	r8, r22
    3ade:	5c 01       	movw	r10, r24
    3ae0:	33 cb       	rjmp	.-2458   	; 0x3148 <main_fw_giveAway+0x16d6>
		clkPullPwm_fw_setPin(true);								// for debugging purposes only
	}
#else
	/* due to the fact that the clkFastCtr interrupts every 12.8 µs there is no chance to power down */
#endif
}
    3ae2:	60 96       	adiw	r28, 0x10	; 16
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	df 91       	pop	r29
    3af0:	cf 91       	pop	r28
    3af2:	1f 91       	pop	r17
    3af4:	0f 91       	pop	r16
    3af6:	ff 90       	pop	r15
    3af8:	ef 90       	pop	r14
    3afa:	df 90       	pop	r13
    3afc:	cf 90       	pop	r12
    3afe:	bf 90       	pop	r11
    3b00:	af 90       	pop	r10
    3b02:	9f 90       	pop	r9
    3b04:	8f 90       	pop	r8
    3b06:	7f 90       	pop	r7
    3b08:	6f 90       	pop	r6
    3b0a:	5f 90       	pop	r5
    3b0c:	4f 90       	pop	r4
    3b0e:	3f 90       	pop	r3
    3b10:	2f 90       	pop	r2
    3b12:	08 95       	ret

00003b14 <main>:
int main(void)
{
	/* init AVR */
	{
		/* initial interrupt set-up */
		cli();
    3b14:	f8 94       	cli
	__asm__ __volatile__ ("reti" ::: "memory");
}


static inline void vectortable_to_firmware(void) {
	cli();
    3b16:	f8 94       	cli
	asm volatile											// set active vector table into the Firmware section
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	85 bf       	out	0x35, r24	; 53
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	85 bf       	out	0x35, r24	; 53
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	a8 95       	wdr
    3b26:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3b2a:	88 61       	ori	r24, 0x18	; 24
    3b2c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3b30:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3b34:	0f be       	out	0x3f, r0	; 63
		cli();
		vectortable_to_firmware();
		wdt_init();

		/* activate hardware for this configuration */
		PRR    = 0xEF;										// disable all modules within the Power Reduction Register
    3b36:	8f ee       	ldi	r24, 0xEF	; 239
    3b38:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		ACSR  |= _BV(ACD);									// switch on Analog Comparator Disable
    3b3c:	80 b7       	in	r24, 0x30	; 48
    3b3e:	80 68       	ori	r24, 0x80	; 128
    3b40:	80 bf       	out	0x30, r24	; 48
		DIDR1 |= (0b11 << AIN0D);							// disable digital input buffers on AIN0 and AIN1
    3b42:	ef e7       	ldi	r30, 0x7F	; 127
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	83 60       	ori	r24, 0x03	; 3
    3b4a:	80 83       	st	Z, r24
		MCUCR &= ~(_BV(PUD));								// switch off Pull-Up Disable
    3b4c:	85 b7       	in	r24, 0x35	; 53
    3b4e:	8f 7e       	andi	r24, 0xEF	; 239
    3b50:	85 bf       	out	0x35, r24	; 53

		/* PWM & debugging first */
		clkPullPwm_fw_init();
    3b52:	0e 94 89 09 	call	0x1312	; 0x1312 <clkPullPwm_fw_init>
    3b56:	e9 ee       	ldi	r30, 0xE9	; 233
    3b58:	f7 e0       	ldi	r31, 0x07	; 7
    3b5a:	29 ec       	ldi	r18, 0xC9	; 201
    3b5c:	35 e0       	ldi	r19, 0x05	; 5

		/* Stack-Check init before the modules */
		for (int idx = MAIN_STACK_CHECK_SIZE; idx;) {		// DEBUG
			stackCheckMungWall[--idx] = 0x5a;
    3b5e:	8a e5       	ldi	r24, 0x5A	; 90
    3b60:	82 93       	st	-Z, r24

		/* PWM & debugging first */
		clkPullPwm_fw_init();

		/* Stack-Check init before the modules */
		for (int idx = MAIN_STACK_CHECK_SIZE; idx;) {		// DEBUG
    3b62:	e2 17       	cp	r30, r18
    3b64:	f3 07       	cpc	r31, r19
    3b66:	e1 f7       	brne	.-8      	; 0x3b60 <main+0x4c>
			stackCheckMungWall[--idx] = 0x5a;
		}

		/* init the other modules */
		clkFastCtr_fw_init();
    3b68:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <clkFastCtr_fw_init>
		anlgComp_fw_init();
    3b6c:	0e 94 36 08 	call	0x106c	; 0x106c <anlgComp_fw_init>
		serial_fw_init();
    3b70:	0e 94 1d 22 	call	0x443a	; 0x443a <serial_fw_init>

		usb_fw_init();
    3b74:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <usb_fw_init>
		sei();
    3b78:	78 94       	sei
		usbIsUp = true;
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <usbIsUp>

		twi_fw_init();
    3b80:	0e 94 b6 23 	call	0x476c	; 0x476c <twi_fw_init>
		twi_mcp23017_fw_init();
    3b84:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <twi_mcp23017_fw_init>
		twi_mcp23017_av1624_fw_init();
    3b88:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <twi_mcp23017_av1624_fw_init>

		/* check CRC of all blocks and update with default values if the data is non-valid */
		memory_fw_checkAndInitAllBlocks();
    3b8c:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <memory_fw_checkAndInitAllBlocks>

		/* read MEASURING coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_HEADER_NR)) {
    3b90:	60 e0       	ldi	r22, 0x00	; 0
    3b92:	8d e7       	ldi	r24, 0x7D	; 125
    3b94:	93 e0       	ldi	r25, 0x03	; 3
    3b96:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <memory_fw_readEepromValidBlock>
    3b9a:	88 23       	and	r24, r24
    3b9c:	11 f1       	breq	.+68     	; 0x3be2 <main+0xce>
			eeprom_b00_t* b00 = (eeprom_b00_t*) &mainFormatBuffer;
			memcpy(mainCoef_b00_dev_header, b00->b00_header, sizeof(mainCoef_b00_dev_header) - 1);
    3b9e:	cd e7       	ldi	r28, 0x7D	; 125
    3ba0:	d3 e0       	ldi	r29, 0x03	; 3
    3ba2:	20 e1       	ldi	r18, 0x10	; 16
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	a5 eb       	ldi	r26, 0xB5	; 181
    3ba8:	b5 e0       	ldi	r27, 0x05	; 5
    3baa:	01 90       	ld	r0, Z+
    3bac:	0d 92       	st	X+, r0
    3bae:	2a 95       	dec	r18
    3bb0:	e1 f7       	brne	.-8      	; 0x3baa <main+0x96>
			mainCoef_b00_dev_header[sizeof(mainCoef_b00_dev_header) - 1] = 0;
    3bb2:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <mainCoef_b00_dev_header+0x10>

			mainCoef_b00_dev_serial					= b00->b00_device_serial;
    3bb6:	2a 89       	ldd	r18, Y+18	; 0x12
    3bb8:	3b 89       	ldd	r19, Y+19	; 0x13
    3bba:	30 93 b4 05 	sts	0x05B4, r19	; 0x8005b4 <mainCoef_b00_dev_serial+0x1>
    3bbe:	20 93 b3 05 	sts	0x05B3, r18	; 0x8005b3 <mainCoef_b00_dev_serial>
			mainCoef_b00_dev_version				= b00->b00_version;
    3bc2:	28 89       	ldd	r18, Y+16	; 0x10
    3bc4:	39 89       	ldd	r19, Y+17	; 0x11
    3bc6:	30 93 b2 05 	sts	0x05B2, r19	; 0x8005b2 <mainCoef_b00_dev_version+0x1>
    3bca:	20 93 b1 05 	sts	0x05B1, r18	; 0x8005b1 <mainCoef_b00_dev_version>
			main_bf.mainLcdLedMode					= b00->b00_lcdLedMode;
    3bce:	8c 89       	ldd	r24, Y+20	; 0x14
    3bd0:	87 70       	andi	r24, 0x07	; 7
    3bd2:	e1 e0       	ldi	r30, 0x01	; 1
    3bd4:	f1 e0       	ldi	r31, 0x01	; 1
    3bd6:	82 95       	swap	r24
    3bd8:	80 7f       	andi	r24, 0xF0	; 240
    3bda:	90 81       	ld	r25, Z
    3bdc:	9f 78       	andi	r25, 0x8F	; 143
    3bde:	89 2b       	or	r24, r25
    3be0:	80 83       	st	Z, r24
		}

		/* read MEASURING coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_MEASURING_NR)) {
    3be2:	61 e0       	ldi	r22, 0x01	; 1
    3be4:	8d e7       	ldi	r24, 0x7D	; 125
    3be6:	93 e0       	ldi	r25, 0x03	; 3
    3be8:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <memory_fw_readEepromValidBlock>
    3bec:	88 23       	and	r24, r24
    3bee:	91 f1       	breq	.+100    	; 0x3c54 <main+0x140>
			eeprom_b01_t* b01 = (eeprom_b01_t*) &mainFormatBuffer;
			mainCoef_b01_ref_AREF_V					= b01->b01_ref_AREF_V;
    3bf0:	ed e7       	ldi	r30, 0x7D	; 125
    3bf2:	f3 e0       	ldi	r31, 0x03	; 3
    3bf4:	80 81       	ld	r24, Z
    3bf6:	91 81       	ldd	r25, Z+1	; 0x01
    3bf8:	a2 81       	ldd	r26, Z+2	; 0x02
    3bfa:	b3 81       	ldd	r27, Z+3	; 0x03
    3bfc:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <mainCoef_b01_ref_AREF_V>
    3c00:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <mainCoef_b01_ref_AREF_V+0x1>
    3c04:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <mainCoef_b01_ref_AREF_V+0x2>
    3c08:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <mainCoef_b01_ref_AREF_V+0x3>
			mainCoef_b01_ref_1V1_V					= b01->b01_ref_1V1_V;
    3c0c:	84 81       	ldd	r24, Z+4	; 0x04
    3c0e:	95 81       	ldd	r25, Z+5	; 0x05
    3c10:	a6 81       	ldd	r26, Z+6	; 0x06
    3c12:	b7 81       	ldd	r27, Z+7	; 0x07
    3c14:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <mainCoef_b01_ref_1V1_V>
    3c18:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <mainCoef_b01_ref_1V1_V+0x1>
    3c1c:	a0 93 ab 05 	sts	0x05AB, r26	; 0x8005ab <mainCoef_b01_ref_1V1_V+0x2>
    3c20:	b0 93 ac 05 	sts	0x05AC, r27	; 0x8005ac <mainCoef_b01_ref_1V1_V+0x3>
			mainCoef_b01_temp_ofs_adc_25C_steps		= b01->b01_temp_ofs_adc_25C_steps;
    3c24:	80 85       	ldd	r24, Z+8	; 0x08
    3c26:	91 85       	ldd	r25, Z+9	; 0x09
    3c28:	a2 85       	ldd	r26, Z+10	; 0x0a
    3c2a:	b3 85       	ldd	r27, Z+11	; 0x0b
    3c2c:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <mainCoef_b01_temp_ofs_adc_25C_steps>
    3c30:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    3c34:	a0 93 a7 05 	sts	0x05A7, r26	; 0x8005a7 <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    3c38:	b0 93 a8 05 	sts	0x05A8, r27	; 0x8005a8 <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>
			mainCoef_b01_temp_k_p1step_adc_K		= b01->b01_temp_k_p1step_adc_K;
    3c3c:	84 85       	ldd	r24, Z+12	; 0x0c
    3c3e:	95 85       	ldd	r25, Z+13	; 0x0d
    3c40:	a6 85       	ldd	r26, Z+14	; 0x0e
    3c42:	b7 85       	ldd	r27, Z+15	; 0x0f
    3c44:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <mainCoef_b01_temp_k_p1step_adc_K>
    3c48:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    3c4c:	a0 93 a3 05 	sts	0x05A3, r26	; 0x8005a3 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    3c50:	b0 93 a4 05 	sts	0x05A4, r27	; 0x8005a4 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
		}

		/* read REFERENCE OSCILLATOR (REFOSC) coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_REFOSC_NR)) {
    3c54:	62 e0       	ldi	r22, 0x02	; 2
    3c56:	8d e7       	ldi	r24, 0x7D	; 125
    3c58:	93 e0       	ldi	r25, 0x03	; 3
    3c5a:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <memory_fw_readEepromValidBlock>
    3c5e:	88 23       	and	r24, r24
    3c60:	f1 f1       	breq	.+124    	; 0x3cde <main+0x1ca>
			eeprom_b02_t* b02 = (eeprom_b02_t*) &mainFormatBuffer;
			mainCoef_b02_qrg_ofs_minV_25C_ppm		= b02->b02_qrg_ofs_minV_25C_ppm;
    3c62:	ed e7       	ldi	r30, 0x7D	; 125
    3c64:	f3 e0       	ldi	r31, 0x03	; 3
    3c66:	80 81       	ld	r24, Z
    3c68:	91 81       	ldd	r25, Z+1	; 0x01
    3c6a:	a2 81       	ldd	r26, Z+2	; 0x02
    3c6c:	b3 81       	ldd	r27, Z+3	; 0x03
    3c6e:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainCoef_b02_qrg_ofs_minV_25C_ppm>
    3c72:	90 93 9e 05 	sts	0x059E, r25	; 0x80059e <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x1>
    3c76:	a0 93 9f 05 	sts	0x059F, r26	; 0x80059f <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x2>
    3c7a:	b0 93 a0 05 	sts	0x05A0, r27	; 0x8005a0 <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x3>
			mainCoef_b02_qrg_ofs_maxV_25C_ppm		= b02->b02_qrg_ofs_maxV_25C_ppm;
    3c7e:	84 81       	ldd	r24, Z+4	; 0x04
    3c80:	95 81       	ldd	r25, Z+5	; 0x05
    3c82:	a6 81       	ldd	r26, Z+6	; 0x06
    3c84:	b7 81       	ldd	r27, Z+7	; 0x07
    3c86:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <mainCoef_b02_qrg_ofs_maxV_25C_ppm>
    3c8a:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x1>
    3c8e:	a0 93 9b 05 	sts	0x059B, r26	; 0x80059b <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x2>
    3c92:	b0 93 9c 05 	sts	0x059C, r27	; 0x80059c <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x3>
			mainCoef_b02_qrg_k_pPwmStep_25C_ppm		= b02->b02_qrg_k_pPwmStep_25C_ppm;
    3c96:	80 85       	ldd	r24, Z+8	; 0x08
    3c98:	91 85       	ldd	r25, Z+9	; 0x09
    3c9a:	a2 85       	ldd	r26, Z+10	; 0x0a
    3c9c:	b3 85       	ldd	r27, Z+11	; 0x0b
    3c9e:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    3ca2:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    3ca6:	a0 93 97 05 	sts	0x0597, r26	; 0x800597 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    3caa:	b0 93 98 05 	sts	0x0598, r27	; 0x800598 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
			mainCoef_b02_pwm_minV_V					= b02->b02_pwm_minV_V;
    3cae:	82 89       	ldd	r24, Z+18	; 0x12
    3cb0:	93 89       	ldd	r25, Z+19	; 0x13
    3cb2:	a4 89       	ldd	r26, Z+20	; 0x14
    3cb4:	b5 89       	ldd	r27, Z+21	; 0x15
    3cb6:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <mainCoef_b02_pwm_minV_V>
    3cba:	90 93 92 05 	sts	0x0592, r25	; 0x800592 <mainCoef_b02_pwm_minV_V+0x1>
    3cbe:	a0 93 93 05 	sts	0x0593, r26	; 0x800593 <mainCoef_b02_pwm_minV_V+0x2>
    3cc2:	b0 93 94 05 	sts	0x0594, r27	; 0x800594 <mainCoef_b02_pwm_minV_V+0x3>
			mainCoef_b02_pwm_maxV_V					= b02->b02_pwm_maxV_V;
    3cc6:	86 89       	ldd	r24, Z+22	; 0x16
    3cc8:	97 89       	ldd	r25, Z+23	; 0x17
    3cca:	a0 8d       	ldd	r26, Z+24	; 0x18
    3ccc:	b1 8d       	ldd	r27, Z+25	; 0x19
    3cce:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <mainCoef_b02_pwm_maxV_V>
    3cd2:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <mainCoef_b02_pwm_maxV_V+0x1>
    3cd6:	a0 93 8f 05 	sts	0x058F, r26	; 0x80058f <mainCoef_b02_pwm_maxV_V+0x2>
    3cda:	b0 93 90 05 	sts	0x0590, r27	; 0x800590 <mainCoef_b02_pwm_maxV_V+0x3>

			/*	b02_pwm_initial			treated by df4iah_fw_clkPullPwm */
			/* 	b02_pwm_initial_sub		treated by df4iah_fw_clkPullPwm */
		}

		if (!(main_bf.mainIsLcdAttached)) {
    3cde:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3ce2:	88 23       	and	r24, r24
    3ce4:	14 f0       	brlt	.+4      	; 0x3cea <main+0x1d6>
			/* enter HELP command in USB host OUT queue */
			main_fw_sendInitialHelp();
    3ce6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <main_fw_sendInitialHelp>
		}
	}

	/* run the chip */
    while (!(main_bf.mainStopAvr)) {
    3cea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3cee:	85 fd       	sbrc	r24, 5
    3cf0:	07 c0       	rjmp	.+14     	; 0x3d00 <main+0x1ec>
    3cf2:	c0 e0       	ldi	r28, 0x00	; 0
    3cf4:	d1 e0       	ldi	r29, 0x01	; 1
    	main_fw_giveAway();
    3cf6:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <main_fw_giveAway>
			main_fw_sendInitialHelp();
		}
	}

	/* run the chip */
    while (!(main_bf.mainStopAvr)) {
    3cfa:	88 81       	ld	r24, Y
    3cfc:	85 ff       	sbrs	r24, 5
    3cfe:	fb cf       	rjmp	.-10     	; 0x3cf6 <main+0x1e2>
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	a8 95       	wdr
    3d06:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d0a:	88 61       	ori	r24, 0x18	; 24
    3d0c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d10:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d14:	0f be       	out	0x3f, r0	; 63

    /* stop AVR */
    {
		wdt_close();

		twi_mcp23017_av1624_fw_close();
    3d16:	0e 94 18 27 	call	0x4e30	; 0x4e30 <twi_mcp23017_av1624_fw_close>
		twi_mcp23017_fw_close();
    3d1a:	0e 94 28 26 	call	0x4c50	; 0x4c50 <twi_mcp23017_fw_close>
		twi_fw_close();
    3d1e:	0e 94 cd 23 	call	0x479a	; 0x479a <twi_fw_close>

		usbIsUp = false;
    3d22:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <usbIsUp>
		cli();
    3d26:	f8 94       	cli
		usb_fw_close();
    3d28:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <usb_fw_close>

		serial_fw_close();
    3d2c:	0e 94 db 21 	call	0x43b6	; 0x43b6 <serial_fw_close>
		anlgComp_fw_close();
    3d30:	0e 94 5f 08 	call	0x10be	; 0x10be <anlgComp_fw_close>
		clkFastCtr_fw_close();
    3d34:	0e 94 02 09 	call	0x1204	; 0x1204 <clkFastCtr_fw_close>
		clkPullPwm_fw_close();
    3d38:	0e 94 bb 09 	call	0x1376	; 0x1376 <clkPullPwm_fw_close>

		// all pins are set to be input
		DDRB = 0x00;
    3d3c:	14 b8       	out	0x04, r1	; 4
		DDRC = 0x00;
    3d3e:	17 b8       	out	0x07, r1	; 7
		DDRD = 0x00;
    3d40:	1a b8       	out	0x0a, r1	; 10

		// all pull-ups are being switched off
		PORTB = 0x00;
    3d42:	15 b8       	out	0x05, r1	; 5
		PORTC = 0x00;
    3d44:	18 b8       	out	0x08, r1	; 8
		PORTD = 0x00;
    3d46:	1b b8       	out	0x0b, r1	; 11

		// switch off Pull-Up Disable
		MCUCR &= ~(_BV(PUD));
    3d48:	85 b7       	in	r24, 0x35	; 53
    3d4a:	8f 7e       	andi	r24, 0xEF	; 239
    3d4c:	85 bf       	out	0x35, r24	; 53

		{
			/* enter and keep in sleep mode */
			for (;;) {
				set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3d4e:	83 b7       	in	r24, 0x33	; 51
    3d50:	81 7f       	andi	r24, 0xF1	; 241
    3d52:	84 60       	ori	r24, 0x04	; 4
    3d54:	83 bf       	out	0x33, r24	; 51
				uint8_t sreg = SREG;
    3d56:	9f b7       	in	r25, 0x3f	; 63
				cli();
    3d58:	f8 94       	cli
				// if (some_condition) {
					sleep_enable();
    3d5a:	83 b7       	in	r24, 0x33	; 51
    3d5c:	81 60       	ori	r24, 0x01	; 1
    3d5e:	83 bf       	out	0x33, r24	; 51
					sleep_bod_disable();
    3d60:	85 b7       	in	r24, 0x35	; 53
    3d62:	80 66       	ori	r24, 0x60	; 96
    3d64:	85 bf       	out	0x35, r24	; 53
    3d66:	8f 7d       	andi	r24, 0xDF	; 223
    3d68:	85 bf       	out	0x35, r24	; 53
				//	SREG = sreg;
					sleep_cpu();
    3d6a:	88 95       	sleep
					sleep_disable();
    3d6c:	83 b7       	in	r24, 0x33	; 51
    3d6e:	8e 7f       	andi	r24, 0xFE	; 254
    3d70:	83 bf       	out	0x33, r24	; 51
				// }
				SREG = sreg;
    3d72:	9f bf       	out	0x3f, r25	; 63
			}
    3d74:	ec cf       	rjmp	.-40     	; 0x3d4e <main+0x23a>

00003d76 <memory_fw_copyBuffer>:
	}
}

void memory_fw_writeFlashPage(uint8_t source[], pagebuf_t size, uint32_t baddr)
{
	memory_bl_writeFlashPage(source, size, baddr);
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	eb 01       	movw	r28, r22
    3d7c:	64 2f       	mov	r22, r20
    3d7e:	75 2f       	mov	r23, r21
    3d80:	88 23       	and	r24, r24
    3d82:	31 f0       	breq	.+12     	; 0x3d90 <memory_fw_copyBuffer+0x1a>
    3d84:	21 15       	cp	r18, r1
    3d86:	31 05       	cpc	r19, r1
    3d88:	41 f4       	brne	.+16     	; 0x3d9a <memory_fw_copyBuffer+0x24>
    3d8a:	8c 2f       	mov	r24, r28
    3d8c:	9d 2f       	mov	r25, r29
    3d8e:	12 c0       	rjmp	.+36     	; 0x3db4 <memory_fw_copyBuffer+0x3e>
    3d90:	a9 01       	movw	r20, r18
    3d92:	ce 01       	movw	r24, r28
    3d94:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <memcpy>
    3d98:	0d c0       	rjmp	.+26     	; 0x3db4 <memory_fw_copyBuffer+0x3e>
    3d9a:	e4 2f       	mov	r30, r20
    3d9c:	f5 2f       	mov	r31, r21
    3d9e:	de 01       	movw	r26, r28
    3da0:	2c 0f       	add	r18, r28
    3da2:	3d 1f       	adc	r19, r29
    3da4:	94 91       	lpm	r25, Z
    3da6:	9d 93       	st	X+, r25
    3da8:	31 96       	adiw	r30, 0x01	; 1
    3daa:	a2 17       	cp	r26, r18
    3dac:	b3 07       	cpc	r27, r19
    3dae:	d1 f7       	brne	.-12     	; 0x3da4 <memory_fw_copyBuffer+0x2e>
    3db0:	8c 2f       	mov	r24, r28
    3db2:	9d 2f       	mov	r25, r29
    3db4:	df 91       	pop	r29
    3db6:	cf 91       	pop	r28
    3db8:	08 95       	ret

00003dba <memory_fw_getSealMarker>:
    3dba:	20 e1       	ldi	r18, 0x10	; 16
    3dbc:	82 9f       	mul	r24, r18
    3dbe:	c0 01       	movw	r24, r0
    3dc0:	11 24       	eor	r1, r1
    3dc2:	8c 60       	ori	r24, 0x0C	; 12
    3dc4:	90 6b       	ori	r25, 0xB0	; 176
    3dc6:	08 95       	ret

00003dc8 <memory_fw_makeEepromBlockValid>:
    3dc8:	fc 01       	movw	r30, r24
    3dca:	68 30       	cpi	r22, 0x08	; 8
    3dcc:	30 f5       	brcc	.+76     	; 0x3e1a <memory_fw_makeEepromBlockValid+0x52>
    3dce:	27 8d       	ldd	r18, Z+31	; 0x1f
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	32 2f       	mov	r19, r18
    3dd4:	22 27       	eor	r18, r18
    3dd6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3dd8:	28 2b       	or	r18, r24
    3dda:	25 3a       	cpi	r18, 0xA5	; 165
    3ddc:	85 ea       	ldi	r24, 0xA5	; 165
    3dde:	38 07       	cpc	r19, r24
    3de0:	f1 f0       	breq	.+60     	; 0x3e1e <memory_fw_makeEepromBlockValid+0x56>
    3de2:	80 e1       	ldi	r24, 0x10	; 16
    3de4:	68 9f       	mul	r22, r24
    3de6:	b0 01       	movw	r22, r0
    3de8:	11 24       	eor	r1, r1
    3dea:	6c 60       	ori	r22, 0x0C	; 12
    3dec:	70 6b       	ori	r23, 0xB0	; 176
    3dee:	26 17       	cp	r18, r22
    3df0:	37 07       	cpc	r19, r23
    3df2:	29 f4       	brne	.+10     	; 0x3dfe <memory_fw_makeEepromBlockValid+0x36>
    3df4:	85 ea       	ldi	r24, 0xA5	; 165
    3df6:	86 8f       	std	Z+30, r24	; 0x1e
    3df8:	87 8f       	std	Z+31, r24	; 0x1f
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	08 95       	ret
    3dfe:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	98 2f       	mov	r25, r24
    3e04:	88 27       	eor	r24, r24
    3e06:	24 8d       	ldd	r18, Z+28	; 0x1c
    3e08:	82 2b       	or	r24, r18
    3e0a:	01 96       	adiw	r24, 0x01	; 1
    3e0c:	84 8f       	std	Z+28, r24	; 0x1c
    3e0e:	95 8f       	std	Z+29, r25	; 0x1d
    3e10:	85 ea       	ldi	r24, 0xA5	; 165
    3e12:	86 8f       	std	Z+30, r24	; 0x1e
    3e14:	87 8f       	std	Z+31, r24	; 0x1f
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	08 95       	ret
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	08 95       	ret
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	08 95       	ret

00003e22 <memory_fw_readEEpromPage>:
    3e22:	cf 92       	push	r12
    3e24:	df 92       	push	r13
    3e26:	ef 92       	push	r14
    3e28:	ff 92       	push	r15
    3e2a:	0f 93       	push	r16
    3e2c:	1f 93       	push	r17
    3e2e:	cf 93       	push	r28
    3e30:	df 93       	push	r29
    3e32:	66 23       	and	r22, r22
    3e34:	99 f0       	breq	.+38     	; 0x3e5c <memory_fw_readEEpromPage+0x3a>
    3e36:	06 2f       	mov	r16, r22
    3e38:	6c 01       	movw	r12, r24
    3e3a:	c4 2f       	mov	r28, r20
    3e3c:	d5 2f       	mov	r29, r21
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	11 e0       	ldi	r17, 0x01	; 1
    3e42:	19 0f       	add	r17, r25
    3e44:	76 01       	movw	r14, r12
    3e46:	e9 0e       	add	r14, r25
    3e48:	f1 1c       	adc	r15, r1
    3e4a:	ce 01       	movw	r24, r28
    3e4c:	0e 94 a1 35 	call	0x6b42	; 0x6b42 <eeprom_read_byte>
    3e50:	f7 01       	movw	r30, r14
    3e52:	80 83       	st	Z, r24
    3e54:	21 96       	adiw	r28, 0x01	; 1
    3e56:	91 2f       	mov	r25, r17
    3e58:	10 13       	cpse	r17, r16
    3e5a:	f2 cf       	rjmp	.-28     	; 0x3e40 <memory_fw_readEEpromPage+0x1e>
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	1f 91       	pop	r17
    3e62:	0f 91       	pop	r16
    3e64:	ff 90       	pop	r15
    3e66:	ef 90       	pop	r14
    3e68:	df 90       	pop	r13
    3e6a:	cf 90       	pop	r12
    3e6c:	08 95       	ret

00003e6e <memory_fw_isEepromBlockValid>:
    3e6e:	88 30       	cpi	r24, 0x08	; 8
    3e70:	b8 f4       	brcc	.+46     	; 0x3ea0 <memory_fw_isEepromBlockValid+0x32>
    3e72:	90 e2       	ldi	r25, 0x20	; 32
    3e74:	89 9f       	mul	r24, r25
    3e76:	a0 01       	movw	r20, r0
    3e78:	11 24       	eor	r1, r1
    3e7a:	60 e2       	ldi	r22, 0x20	; 32
    3e7c:	8d e7       	ldi	r24, 0x7D	; 125
    3e7e:	93 e0       	ldi	r25, 0x03	; 3
    3e80:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <memory_fw_readEEpromPage>
    3e84:	ed e7       	ldi	r30, 0x7D	; 125
    3e86:	f3 e0       	ldi	r31, 0x03	; 3
    3e88:	27 8d       	ldd	r18, Z+31	; 0x1f
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	32 2f       	mov	r19, r18
    3e8e:	22 27       	eor	r18, r18
    3e90:	86 8d       	ldd	r24, Z+30	; 0x1e
    3e92:	28 2b       	or	r18, r24
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	25 3a       	cpi	r18, 0xA5	; 165
    3e98:	35 4a       	sbci	r19, 0xA5	; 165
    3e9a:	19 f0       	breq	.+6      	; 0x3ea2 <memory_fw_isEepromBlockValid+0x34>
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	08 95       	ret
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	08 95       	ret

00003ea4 <memory_fw_readEepromValidBlock>:
    3ea4:	0f 93       	push	r16
    3ea6:	1f 93       	push	r17
    3ea8:	cf 93       	push	r28
    3eaa:	68 30       	cpi	r22, 0x08	; 8
    3eac:	a8 f4       	brcc	.+42     	; 0x3ed8 <memory_fw_readEepromValidBlock+0x34>
    3eae:	c6 2f       	mov	r28, r22
    3eb0:	8c 01       	movw	r16, r24
    3eb2:	86 2f       	mov	r24, r22
    3eb4:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <memory_fw_isEepromBlockValid>
    3eb8:	88 23       	and	r24, r24
    3eba:	89 f0       	breq	.+34     	; 0x3ede <memory_fw_readEepromValidBlock+0x3a>
    3ebc:	83 e0       	ldi	r24, 0x03	; 3
    3ebe:	0d 37       	cpi	r16, 0x7D	; 125
    3ec0:	18 07       	cpc	r17, r24
    3ec2:	61 f0       	breq	.+24     	; 0x3edc <memory_fw_readEepromValidBlock+0x38>
    3ec4:	80 e2       	ldi	r24, 0x20	; 32
    3ec6:	c8 9f       	mul	r28, r24
    3ec8:	a0 01       	movw	r20, r0
    3eca:	11 24       	eor	r1, r1
    3ecc:	60 e2       	ldi	r22, 0x20	; 32
    3ece:	c8 01       	movw	r24, r16
    3ed0:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <memory_fw_readEEpromPage>
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	03 c0       	rjmp	.+6      	; 0x3ede <memory_fw_readEepromValidBlock+0x3a>
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	01 c0       	rjmp	.+2      	; 0x3ede <memory_fw_readEepromValidBlock+0x3a>
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	cf 91       	pop	r28
    3ee0:	1f 91       	pop	r17
    3ee2:	0f 91       	pop	r16
    3ee4:	08 95       	ret

00003ee6 <memory_fw_writeEEpromPage>:
}

void memory_fw_writeEEpromPage(uint8_t source[], pagebuf_t size, uint16_t baddr)
{
    3ee6:	cf 92       	push	r12
    3ee8:	df 92       	push	r13
    3eea:	ef 92       	push	r14
    3eec:	ff 92       	push	r15
    3eee:	0f 93       	push	r16
    3ef0:	1f 93       	push	r17
    3ef2:	cf 93       	push	r28
    3ef4:	df 93       	push	r29
    3ef6:	6c 01       	movw	r12, r24
    3ef8:	8a 01       	movw	r16, r20
	uint8_t idx = 0;

	while (size--) {								// decrease number of bytes to write
    3efa:	8f ef       	ldi	r24, 0xFF	; 255
    3efc:	86 0f       	add	r24, r22
    3efe:	66 23       	and	r22, r22
    3f00:	a1 f0       	breq	.+40     	; 0x3f2a <memory_fw_writeEEpromPage+0x44>
    3f02:	7a 01       	movw	r14, r20
    3f04:	9f ef       	ldi	r25, 0xFF	; 255
    3f06:	e9 1a       	sub	r14, r25
    3f08:	f9 0a       	sbc	r15, r25
    3f0a:	e8 0e       	add	r14, r24
    3f0c:	f1 1c       	adc	r15, r1
    3f0e:	ea 01       	movw	r28, r20
    3f10:	9c 2f       	mov	r25, r28
    3f12:	90 1b       	sub	r25, r16
		eeprom_write_byte((uint8_t*) baddr, source[idx++]);
    3f14:	f6 01       	movw	r30, r12
    3f16:	e9 0f       	add	r30, r25
    3f18:	f1 1d       	adc	r31, r1
    3f1a:	60 81       	ld	r22, Z
    3f1c:	ce 01       	movw	r24, r28
    3f1e:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <eeprom_write_byte>
		baddr++;									// select next byte
    3f22:	21 96       	adiw	r28, 0x01	; 1

void memory_fw_writeEEpromPage(uint8_t source[], pagebuf_t size, uint16_t baddr)
{
	uint8_t idx = 0;

	while (size--) {								// decrease number of bytes to write
    3f24:	ce 15       	cp	r28, r14
    3f26:	df 05       	cpc	r29, r15
    3f28:	99 f7       	brne	.-26     	; 0x3f10 <memory_fw_writeEEpromPage+0x2a>
		eeprom_write_byte((uint8_t*) baddr, source[idx++]);
		baddr++;									// select next byte
	}												// loop until all bytes written

	// eeprom_busy_wait();
}
    3f2a:	df 91       	pop	r29
    3f2c:	cf 91       	pop	r28
    3f2e:	1f 91       	pop	r17
    3f30:	0f 91       	pop	r16
    3f32:	ff 90       	pop	r15
    3f34:	ef 90       	pop	r14
    3f36:	df 90       	pop	r13
    3f38:	cf 90       	pop	r12
    3f3a:	08 95       	ret

00003f3c <memory_fw_writeEepromBlockMakeValid>:
	// bad usage
	return false;
}

uint8_t memory_fw_writeEepromBlockMakeValid(uint8_t* source, uint8_t blockNr)
{
    3f3c:	0f 93       	push	r16
    3f3e:	1f 93       	push	r17
    3f40:	cf 93       	push	r28
	if (blockNr < BLOCK_COUNT) {
    3f42:	68 30       	cpi	r22, 0x08	; 8
    3f44:	70 f4       	brcc	.+28     	; 0x3f62 <memory_fw_writeEepromBlockMakeValid+0x26>
    3f46:	c6 2f       	mov	r28, r22
    3f48:	8c 01       	movw	r16, r24
		memory_fw_makeEepromBlockValid(source, blockNr);
    3f4a:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <memory_fw_makeEepromBlockValid>
		memory_fw_writeEEpromPage(source, 1 << 5, blockNr << 5);
    3f4e:	80 e2       	ldi	r24, 0x20	; 32
    3f50:	c8 9f       	mul	r28, r24
    3f52:	a0 01       	movw	r20, r0
    3f54:	11 24       	eor	r1, r1
    3f56:	60 e2       	ldi	r22, 0x20	; 32
    3f58:	c8 01       	movw	r24, r16
    3f5a:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <memory_fw_writeEEpromPage>
		return true;
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	01 c0       	rjmp	.+2      	; 0x3f64 <memory_fw_writeEepromBlockMakeValid+0x28>
	}

	// bad usage
	return false;
    3f62:	80 e0       	ldi	r24, 0x00	; 0
}
    3f64:	cf 91       	pop	r28
    3f66:	1f 91       	pop	r17
    3f68:	0f 91       	pop	r16
    3f6a:	08 95       	ret

00003f6c <memory_fw_checkAndInitBlock>:
	// bad usage
	return false;
}

uint8_t memory_fw_checkAndInitBlock(uint8_t blockNr)
{
    3f6c:	cf 93       	push	r28
	if (blockNr < BLOCK_COUNT) {
    3f6e:	88 30       	cpi	r24, 0x08	; 8
    3f70:	90 f5       	brcc	.+100    	; 0x3fd6 <memory_fw_checkAndInitBlock+0x6a>
    3f72:	c8 2f       	mov	r28, r24
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
    3f74:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <memory_fw_isEepromBlockValid>
    3f78:	81 11       	cpse	r24, r1
    3f7a:	2f c0       	rjmp	.+94     	; 0x3fda <memory_fw_checkAndInitBlock+0x6e>
	return false;
}

uint16_t memory_fw_getSealMarker(uint8_t blockNr)
{
	return (0xb00c | (blockNr << 4));
    3f7c:	2c 2f       	mov	r18, r28
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
uint8_t memory_fw_checkAndInitBlock(uint8_t blockNr)
{
	if (blockNr < BLOCK_COUNT) {
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
			/* the block is non-valid, reload the EEPROM block with the default data */
			uint16_t oldCrcBlock = mainFormatBuffer[30] | (mainFormatBuffer[31] << 8);
    3f80:	ed e7       	ldi	r30, 0x7D	; 125
    3f82:	f3 e0       	ldi	r31, 0x03	; 3
    3f84:	87 8d       	ldd	r24, Z+31	; 0x1f
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	98 2f       	mov	r25, r24
    3f8a:	88 27       	eor	r24, r24
    3f8c:	46 8d       	ldd	r20, Z+30	; 0x1e
    3f8e:	84 2b       	or	r24, r20
	return false;
}

uint16_t memory_fw_getSealMarker(uint8_t blockNr)
{
	return (0xb00c | (blockNr << 4));
    3f90:	a9 01       	movw	r20, r18
    3f92:	42 95       	swap	r20
    3f94:	52 95       	swap	r21
    3f96:	50 7f       	andi	r21, 0xF0	; 240
    3f98:	54 27       	eor	r21, r20
    3f9a:	40 7f       	andi	r20, 0xF0	; 240
    3f9c:	54 27       	eor	r21, r20
    3f9e:	4c 60       	ori	r20, 0x0C	; 12
    3fa0:	50 6b       	ori	r21, 0xB0	; 176
	if (blockNr < BLOCK_COUNT) {
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
			/* the block is non-valid, reload the EEPROM block with the default data */
			uint16_t oldCrcBlock = mainFormatBuffer[30] | (mainFormatBuffer[31] << 8);

			if (oldCrcBlock != memory_fw_getSealMarker(blockNr)) {
    3fa2:	84 17       	cp	r24, r20
    3fa4:	95 07       	cpc	r25, r21
    3fa6:	81 f0       	breq	.+32     	; 0x3fc8 <memory_fw_checkAndInitBlock+0x5c>
				/* reading default values if not CRC calc marker for sealing is found */
				memory_fw_readFlashPage(mainFormatBuffer,
						(1 << 5) - 4,								// load default data, without counter and special marked CRC value
						(((uint16_t) ((void*) &eeprom_defaultValues_content)) + (blockNr << 5)));
    3fa8:	22 0f       	add	r18, r18
    3faa:	33 1f       	adc	r19, r19
    3fac:	22 95       	swap	r18
    3fae:	32 95       	swap	r19
    3fb0:	30 7f       	andi	r19, 0xF0	; 240
    3fb2:	32 27       	eor	r19, r18
    3fb4:	20 7f       	andi	r18, 0xF0	; 240
    3fb6:	32 27       	eor	r19, r18
    3fb8:	22 5c       	subi	r18, 0xC2	; 194
    3fba:	33 4f       	sbci	r19, 0xF3	; 243
			/* the block is non-valid, reload the EEPROM block with the default data */
			uint16_t oldCrcBlock = mainFormatBuffer[30] | (mainFormatBuffer[31] << 8);

			if (oldCrcBlock != memory_fw_getSealMarker(blockNr)) {
				/* reading default values if not CRC calc marker for sealing is found */
				memory_fw_readFlashPage(mainFormatBuffer,
    3fbc:	40 e0       	ldi	r20, 0x00	; 0
    3fbe:	50 e0       	ldi	r21, 0x00	; 0
	memory_bl_eraseFlash();
}

void memory_fw_readFlashPage(uint8_t target[], pagebuf_t size, uint32_t baddr)
{
	memory_bl_readFlashPage(target, size, baddr);
    3fc0:	6c e1       	ldi	r22, 0x1C	; 28
    3fc2:	cf 01       	movw	r24, r30
    3fc4:	0e 94 0b 08 	call	0x1016	; 0x1016 <memory_bl_readFlashPage>
				memory_fw_readFlashPage(mainFormatBuffer,
						(1 << 5) - 4,								// load default data, without counter and special marked CRC value
						(((uint16_t) ((void*) &eeprom_defaultValues_content)) + (blockNr << 5)));
			}

			memory_fw_writeEepromBlockMakeValid(mainFormatBuffer, blockNr);
    3fc8:	6c 2f       	mov	r22, r28
    3fca:	8d e7       	ldi	r24, 0x7D	; 125
    3fcc:	93 e0       	ldi	r25, 0x03	; 3
    3fce:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <memory_fw_writeEepromBlockMakeValid>
			return 1;
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	03 c0       	rjmp	.+6      	; 0x3fdc <memory_fw_checkAndInitBlock+0x70>
			return 0;
		}
	}

	// bad usage
	return 0;
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
    3fd8:	01 c0       	rjmp	.+2      	; 0x3fdc <memory_fw_checkAndInitBlock+0x70>
			memory_fw_writeEepromBlockMakeValid(mainFormatBuffer, blockNr);
			return 1;

		} else {
			// no correction made
			return 0;
    3fda:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// bad usage
	return 0;
}
    3fdc:	cf 91       	pop	r28
    3fde:	08 95       	ret

00003fe0 <memory_fw_checkAndInitAllBlocks>:

uint8_t memory_fw_checkAndInitAllBlocks()
{
    3fe0:	cf 93       	push	r28
    3fe2:	df 93       	push	r29
    3fe4:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t ret = 0;
    3fe6:	d0 e0       	ldi	r29, 0x00	; 0

	for (int blockIdx = 0; blockIdx < BLOCK_COUNT; ++blockIdx) {
		ret += memory_fw_checkAndInitBlock(blockIdx);
    3fe8:	8c 2f       	mov	r24, r28
    3fea:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <memory_fw_checkAndInitBlock>
    3fee:	d8 0f       	add	r29, r24
    3ff0:	cf 5f       	subi	r28, 0xFF	; 255

uint8_t memory_fw_checkAndInitAllBlocks()
{
	uint8_t ret = 0;

	for (int blockIdx = 0; blockIdx < BLOCK_COUNT; ++blockIdx) {
    3ff2:	c8 30       	cpi	r28, 0x08	; 8
    3ff4:	c9 f7       	brne	.-14     	; 0x3fe8 <memory_fw_checkAndInitAllBlocks+0x8>
		ret += memory_fw_checkAndInitBlock(blockIdx);
	}

	// count of block that needed reloading of default values
	return ret;
}
    3ff6:	8d 2f       	mov	r24, r29
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	08 95       	ret

00003ffe <ringbuffer_fw_getSemaphore>:


uint8_t ringbuffer_fw_getSemaphore(uint8_t isSend)
{
	uint8_t isLocked;
	uint8_t* semPtr = (isSend ?  &usbRingBufferSendSemaphore : &usbRingBufferRcvSemaphore);
    3ffe:	81 11       	cpse	r24, r1
    4000:	03 c0       	rjmp	.+6      	; 0x4008 <ringbuffer_fw_getSemaphore+0xa>
    4002:	e1 e1       	ldi	r30, 0x11	; 17
    4004:	f5 e0       	ldi	r31, 0x05	; 5
    4006:	02 c0       	rjmp	.+4      	; 0x400c <ringbuffer_fw_getSemaphore+0xe>
    4008:	e2 e1       	ldi	r30, 0x12	; 18
    400a:	f5 e0       	ldi	r31, 0x05	; 5
		  "=r" (sreg)
		: "p" (semPtr)
		: "r19"
	);
#else
	uint8_t sreg = SREG;
    400c:	8f b7       	in	r24, 0x3f	; 63
	cli();
    400e:	f8 94       	cli
	isLocked = *semPtr;
    4010:	90 81       	ld	r25, Z
	*semPtr = true;
    4012:	21 e0       	ldi	r18, 0x01	; 1
    4014:	20 83       	st	Z, r18
	SREG = sreg;
    4016:	8f bf       	out	0x3f, r24	; 63
#endif
	return !isLocked;
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	91 11       	cpse	r25, r1
    401c:	80 e0       	ldi	r24, 0x00	; 0
}
    401e:	08 95       	ret

00004020 <ringbuffer_fw_freeSemaphore>:
//static uint8_t ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len);
void ringbuffer_fw_freeSemaphore(uint8_t isSend)
{
	/* free semaphore */
	{
		uint8_t* semPtr = (isSend ?  &usbRingBufferSendSemaphore : &usbRingBufferRcvSemaphore);
    4020:	81 11       	cpse	r24, r1
    4022:	03 c0       	rjmp	.+6      	; 0x402a <ringbuffer_fw_freeSemaphore+0xa>
    4024:	e1 e1       	ldi	r30, 0x11	; 17
    4026:	f5 e0       	ldi	r31, 0x05	; 5
    4028:	02 c0       	rjmp	.+4      	; 0x402e <ringbuffer_fw_freeSemaphore+0xe>
    402a:	e2 e1       	ldi	r30, 0x12	; 18
    402c:	f5 e0       	ldi	r31, 0x05	; 5
		uint8_t sreg = SREG;
    402e:	8f b7       	in	r24, 0x3f	; 63
		cli();
    4030:	f8 94       	cli
		*semPtr = false;
    4032:	10 82       	st	Z, r1
		SREG = sreg;
    4034:	8f bf       	out	0x3f, r24	; 63
    4036:	08 95       	ret

00004038 <ringbuffer_fw_ringBufferPush>:
	}
}

/*static*/ uint8_t ringbuffer_fw_ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
    4038:	8f 92       	push	r8
    403a:	9f 92       	push	r9
    403c:	af 92       	push	r10
    403e:	bf 92       	push	r11
    4040:	cf 92       	push	r12
    4042:	df 92       	push	r13
    4044:	ef 92       	push	r14
    4046:	ff 92       	push	r15
    4048:	0f 93       	push	r16
    404a:	1f 93       	push	r17
    404c:	cf 93       	push	r28
    404e:	df 93       	push	r29
    4050:	98 2f       	mov	r25, r24
	uint8_t retLen = 0;
	uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);

	uint8_t sreg = SREG;
    4052:	8f b7       	in	r24, 0x3f	; 63
	cli();
    4054:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4056:	99 23       	and	r25, r25
    4058:	29 f0       	breq	.+10     	; 0x4064 <ringbuffer_fw_ringBufferPush+0x2c>
    405a:	30 91 16 05 	lds	r19, 0x0516	; 0x800516 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    405e:	70 91 15 05 	lds	r23, 0x0515	; 0x800515 <usbRingBufferSendPullIdx>
    4062:	04 c0       	rjmp	.+8      	; 0x406c <ringbuffer_fw_ringBufferPush+0x34>
	uint8_t retLen = 0;
	uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4064:	30 91 14 05 	lds	r19, 0x0514	; 0x800514 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4068:	70 91 13 05 	lds	r23, 0x0513	; 0x800513 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    406c:	8f bf       	out	0x3f, r24	; 63

	if (!(((pushIdx + 1) == pullIdx) || (((pushIdx + 1) == bufferSize) && !pullIdx))) {
    406e:	a3 2f       	mov	r26, r19
    4070:	b0 e0       	ldi	r27, 0x00	; 0
    4072:	e7 2f       	mov	r30, r23
    4074:	f0 e0       	ldi	r31, 0x00	; 0
    4076:	8d 01       	movw	r16, r26
    4078:	0f 5f       	subi	r16, 0xFF	; 255
    407a:	1f 4f       	sbci	r17, 0xFF	; 255
    407c:	0e 17       	cp	r16, r30
    407e:	1f 07       	cpc	r17, r31
    4080:	09 f4       	brne	.+2      	; 0x4084 <ringbuffer_fw_ringBufferPush+0x4c>
    4082:	75 c0       	rjmp	.+234    	; 0x416e <ringbuffer_fw_ringBufferPush+0x136>
    4084:	3f 37       	cpi	r19, 0x7F	; 127
    4086:	19 f4       	brne	.+6      	; 0x408e <ringbuffer_fw_ringBufferPush+0x56>
    4088:	77 23       	and	r23, r23
    408a:	09 f4       	brne	.+2      	; 0x408e <ringbuffer_fw_ringBufferPush+0x56>
    408c:	72 c0       	rjmp	.+228    	; 0x4172 <ringbuffer_fw_ringBufferPush+0x13a>
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    408e:	91 11       	cpse	r25, r1
    4090:	07 c0       	rjmp	.+14     	; 0x40a0 <ringbuffer_fw_ringBufferPush+0x68>
    4092:	0f 2e       	mov	r0, r31
    4094:	f7 e7       	ldi	r31, 0x77	; 119
    4096:	ef 2e       	mov	r14, r31
    4098:	f2 e0       	ldi	r31, 0x02	; 2
    409a:	ff 2e       	mov	r15, r31
    409c:	f0 2d       	mov	r31, r0
    409e:	06 c0       	rjmp	.+12     	; 0x40ac <ringbuffer_fw_ringBufferPush+0x74>
    40a0:	0f 2e       	mov	r0, r31
    40a2:	f7 ef       	ldi	r31, 0xF7	; 247
    40a4:	ef 2e       	mov	r14, r31
    40a6:	f2 e0       	ldi	r31, 0x02	; 2
    40a8:	ff 2e       	mov	r15, r31
    40aa:	f0 2d       	mov	r31, r0
		uint8_t lenTop = min((pullIdx > pushIdx ?  (pullIdx - pushIdx - 1) : bufferSize - pushIdx - (!pullIdx ?  1 : 0)), len);
    40ac:	c2 2f       	mov	r28, r18
    40ae:	d0 e0       	ldi	r29, 0x00	; 0
    40b0:	37 17       	cp	r19, r23
    40b2:	80 f4       	brcc	.+32     	; 0x40d4 <ringbuffer_fw_ringBufferPush+0x9c>
    40b4:	8f 01       	movw	r16, r30
    40b6:	0a 1b       	sub	r16, r26
    40b8:	1b 0b       	sbc	r17, r27
    40ba:	01 50       	subi	r16, 0x01	; 1
    40bc:	11 09       	sbc	r17, r1
    40be:	c0 17       	cp	r28, r16
    40c0:	d1 07       	cpc	r29, r17
    40c2:	0c f4       	brge	.+2      	; 0x40c6 <ringbuffer_fw_ringBufferPush+0x8e>
    40c4:	8e 01       	movw	r16, r28
    40c6:	d0 2e       	mov	r13, r16
		uint8_t lenBot = min((((pullIdx > pushIdx) || !pullIdx) ?  0 : pullIdx - 1), len - lenTop);
    40c8:	11 27       	eor	r17, r17
    40ca:	c0 1b       	sub	r28, r16
    40cc:	d1 0b       	sbc	r29, r17
    40ce:	e0 e0       	ldi	r30, 0x00	; 0
    40d0:	f0 e0       	ldi	r31, 0x00	; 0
    40d2:	1a c0       	rjmp	.+52     	; 0x4108 <ringbuffer_fw_ringBufferPush+0xd0>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
	SREG = sreg;

	if (!(((pushIdx + 1) == pullIdx) || (((pushIdx + 1) == bufferSize) && !pullIdx))) {
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
		uint8_t lenTop = min((pullIdx > pushIdx ?  (pullIdx - pushIdx - 1) : bufferSize - pushIdx - (!pullIdx ?  1 : 0)), len);
    40d4:	00 e8       	ldi	r16, 0x80	; 128
    40d6:	10 e0       	ldi	r17, 0x00	; 0
    40d8:	0a 1b       	sub	r16, r26
    40da:	1b 0b       	sbc	r17, r27
    40dc:	a1 e0       	ldi	r26, 0x01	; 1
    40de:	b0 e0       	ldi	r27, 0x00	; 0
    40e0:	77 23       	and	r23, r23
    40e2:	11 f0       	breq	.+4      	; 0x40e8 <ringbuffer_fw_ringBufferPush+0xb0>
    40e4:	a0 e0       	ldi	r26, 0x00	; 0
    40e6:	b0 e0       	ldi	r27, 0x00	; 0
    40e8:	0a 1b       	sub	r16, r26
    40ea:	1b 0b       	sbc	r17, r27
    40ec:	c0 17       	cp	r28, r16
    40ee:	d1 07       	cpc	r29, r17
    40f0:	0c f4       	brge	.+2      	; 0x40f4 <ringbuffer_fw_ringBufferPush+0xbc>
    40f2:	8e 01       	movw	r16, r28
    40f4:	d0 2e       	mov	r13, r16
		uint8_t lenBot = min((((pullIdx > pushIdx) || !pullIdx) ?  0 : pullIdx - 1), len - lenTop);
    40f6:	11 27       	eor	r17, r17
    40f8:	c0 1b       	sub	r28, r16
    40fa:	d1 0b       	sbc	r29, r17
    40fc:	77 23       	and	r23, r23
    40fe:	11 f0       	breq	.+4      	; 0x4104 <ringbuffer_fw_ringBufferPush+0xcc>
    4100:	31 97       	sbiw	r30, 0x01	; 1
    4102:	02 c0       	rjmp	.+4      	; 0x4108 <ringbuffer_fw_ringBufferPush+0xd0>
    4104:	e0 e0       	ldi	r30, 0x00	; 0
    4106:	f0 e0       	ldi	r31, 0x00	; 0
    4108:	ec 17       	cp	r30, r28
    410a:	fd 07       	cpc	r31, r29
    410c:	0c f4       	brge	.+2      	; 0x4110 <ringbuffer_fw_ringBufferPush+0xd8>
    410e:	ef 01       	movw	r28, r30
    4110:	5a 01       	movw	r10, r20
    4112:	86 2e       	mov	r8, r22
    4114:	99 2e       	mov	r9, r25
    4116:	cc 2e       	mov	r12, r28

		if (lenTop) {
    4118:	dd 20       	and	r13, r13
    411a:	39 f0       	breq	.+14     	; 0x412a <ringbuffer_fw_ringBufferPush+0xf2>
			memory_fw_copyBuffer(isPgm, &(ringBuffer[pushIdx]), inData, lenTop);
    411c:	b7 01       	movw	r22, r14
    411e:	63 0f       	add	r22, r19
    4120:	71 1d       	adc	r23, r1
    4122:	98 01       	movw	r18, r16
    4124:	88 2d       	mov	r24, r8
    4126:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			retLen += lenTop;
		}

		if (lenBot) {
    412a:	cc 20       	and	r12, r12
    412c:	51 f0       	breq	.+20     	; 0x4142 <ringbuffer_fw_ringBufferPush+0x10a>
    412e:	9e 01       	movw	r18, r28
    4130:	33 27       	eor	r19, r19
			memory_fw_copyBuffer(isPgm, &(ringBuffer[0]), &(inData[lenTop]), lenBot);
    4132:	a5 01       	movw	r20, r10
    4134:	40 0f       	add	r20, r16
    4136:	51 1f       	adc	r21, r17
    4138:	b7 01       	movw	r22, r14
    413a:	88 2d       	mov	r24, r8
    413c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
			retLen += lenBot;
    4140:	dc 0c       	add	r13, r12
		}

		// advance the index
		if (isSend) {
    4142:	99 20       	and	r9, r9
    4144:	51 f0       	breq	.+20     	; 0x415a <ringbuffer_fw_ringBufferPush+0x122>
			uint8_t sreg = SREG;
    4146:	9f b7       	in	r25, 0x3f	; 63
			cli();
    4148:	f8 94       	cli
			usbRingBufferSendPushIdx += retLen;
    414a:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <usbRingBufferSendPushIdx>
    414e:	8d 0d       	add	r24, r13
			usbRingBufferSendPushIdx %= bufferSize;
    4150:	8f 77       	andi	r24, 0x7F	; 127
    4152:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <usbRingBufferSendPushIdx>
			SREG = sreg;
    4156:	9f bf       	out	0x3f, r25	; 63
    4158:	0d c0       	rjmp	.+26     	; 0x4174 <ringbuffer_fw_ringBufferPush+0x13c>

		} else {
			uint8_t sreg = SREG;
    415a:	9f b7       	in	r25, 0x3f	; 63
			cli();
    415c:	f8 94       	cli
			usbRingBufferRcvPushIdx += retLen;
    415e:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <usbRingBufferRcvPushIdx>
    4162:	8d 0d       	add	r24, r13
			usbRingBufferRcvPushIdx %= bufferSize;
    4164:	8f 77       	andi	r24, 0x7F	; 127
    4166:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <usbRingBufferRcvPushIdx>
			SREG = sreg;
    416a:	9f bf       	out	0x3f, r25	; 63
    416c:	03 c0       	rjmp	.+6      	; 0x4174 <ringbuffer_fw_ringBufferPush+0x13c>
	}
}

/*static*/ uint8_t ringbuffer_fw_ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
	uint8_t retLen = 0;
    416e:	d1 2c       	mov	r13, r1
    4170:	01 c0       	rjmp	.+2      	; 0x4174 <ringbuffer_fw_ringBufferPush+0x13c>
    4172:	d1 2c       	mov	r13, r1
			usbRingBufferRcvPushIdx %= bufferSize;
			SREG = sreg;
		}
	}
	return retLen;
}
    4174:	8d 2d       	mov	r24, r13
    4176:	df 91       	pop	r29
    4178:	cf 91       	pop	r28
    417a:	1f 91       	pop	r17
    417c:	0f 91       	pop	r16
    417e:	ff 90       	pop	r15
    4180:	ef 90       	pop	r14
    4182:	df 90       	pop	r13
    4184:	cf 90       	pop	r12
    4186:	bf 90       	pop	r11
    4188:	af 90       	pop	r10
    418a:	9f 90       	pop	r9
    418c:	8f 90       	pop	r8
    418e:	08 95       	ret

00004190 <ringbuffer_fw_ringBufferPull>:

uint8_t ringbuffer_fw_ringBufferPull(uint8_t isSend, uchar outData[], uint8_t size)
{
    4190:	9f 92       	push	r9
    4192:	af 92       	push	r10
    4194:	bf 92       	push	r11
    4196:	cf 92       	push	r12
    4198:	df 92       	push	r13
    419a:	ef 92       	push	r14
    419c:	ff 92       	push	r15
    419e:	0f 93       	push	r16
    41a0:	1f 93       	push	r17
    41a2:	cf 93       	push	r28
    41a4:	df 93       	push	r29
	uint8_t len = 0;

	uint8_t sreg = SREG;
    41a6:	2f b7       	in	r18, 0x3f	; 63
	cli();
    41a8:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    41aa:	88 23       	and	r24, r24
    41ac:	29 f0       	breq	.+10     	; 0x41b8 <ringbuffer_fw_ringBufferPull+0x28>
    41ae:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    41b2:	50 91 15 05 	lds	r21, 0x0515	; 0x800515 <usbRingBufferSendPullIdx>
    41b6:	04 c0       	rjmp	.+8      	; 0x41c0 <ringbuffer_fw_ringBufferPull+0x30>
{
	uint8_t len = 0;

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    41b8:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    41bc:	50 91 13 05 	lds	r21, 0x0513	; 0x800513 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    41c0:	2f bf       	out	0x3f, r18	; 63

	if ((pushIdx != pullIdx) && (size > 1)) {
    41c2:	95 17       	cp	r25, r21
    41c4:	09 f4       	brne	.+2      	; 0x41c8 <ringbuffer_fw_ringBufferPull+0x38>
    41c6:	63 c0       	rjmp	.+198    	; 0x428e <ringbuffer_fw_ringBufferPull+0xfe>
    41c8:	42 30       	cpi	r20, 0x02	; 2
    41ca:	08 f4       	brcc	.+2      	; 0x41ce <ringbuffer_fw_ringBufferPull+0x3e>
    41cc:	60 c0       	rjmp	.+192    	; 0x428e <ringbuffer_fw_ringBufferPull+0xfe>
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    41ce:	81 11       	cpse	r24, r1
    41d0:	03 c0       	rjmp	.+6      	; 0x41d8 <ringbuffer_fw_ringBufferPull+0x48>
    41d2:	07 e7       	ldi	r16, 0x77	; 119
    41d4:	12 e0       	ldi	r17, 0x02	; 2
    41d6:	02 c0       	rjmp	.+4      	; 0x41dc <ringbuffer_fw_ringBufferPull+0x4c>
    41d8:	07 ef       	ldi	r16, 0xF7	; 247
    41da:	12 e0       	ldi	r17, 0x02	; 2
		uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);
		uint8_t lenTop = min((pushIdx > pullIdx ?  (pushIdx - pullIdx) : bufferSize - pullIdx), size - 1);
    41dc:	c4 2f       	mov	r28, r20
    41de:	d0 e0       	ldi	r29, 0x00	; 0
    41e0:	21 97       	sbiw	r28, 0x01	; 1
    41e2:	59 17       	cp	r21, r25
    41e4:	80 f4       	brcc	.+32     	; 0x4206 <ringbuffer_fw_ringBufferPull+0x76>
    41e6:	29 2f       	mov	r18, r25
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	25 1b       	sub	r18, r21
    41ec:	31 09       	sbc	r19, r1
    41ee:	c2 17       	cp	r28, r18
    41f0:	d3 07       	cpc	r29, r19
    41f2:	0c f4       	brge	.+2      	; 0x41f6 <ringbuffer_fw_ringBufferPull+0x66>
    41f4:	9e 01       	movw	r18, r28
    41f6:	e2 2e       	mov	r14, r18
		uint8_t lenBot = min((pushIdx > pullIdx ?  0 : pushIdx), size - 1 - lenTop);
    41f8:	69 01       	movw	r12, r18
    41fa:	dd 24       	eor	r13, r13
    41fc:	cc 19       	sub	r28, r12
    41fe:	dd 09       	sbc	r29, r13
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	0f c0       	rjmp	.+30     	; 0x4224 <ringbuffer_fw_ringBufferPull+0x94>
	SREG = sreg;

	if ((pushIdx != pullIdx) && (size > 1)) {
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
		uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);
		uint8_t lenTop = min((pushIdx > pullIdx ?  (pushIdx - pullIdx) : bufferSize - pullIdx), size - 1);
    4206:	20 e8       	ldi	r18, 0x80	; 128
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	25 1b       	sub	r18, r21
    420c:	31 09       	sbc	r19, r1
    420e:	c2 17       	cp	r28, r18
    4210:	d3 07       	cpc	r29, r19
    4212:	0c f4       	brge	.+2      	; 0x4216 <ringbuffer_fw_ringBufferPull+0x86>
    4214:	9e 01       	movw	r18, r28
    4216:	e2 2e       	mov	r14, r18
		uint8_t lenBot = min((pushIdx > pullIdx ?  0 : pushIdx), size - 1 - lenTop);
    4218:	69 01       	movw	r12, r18
    421a:	dd 24       	eor	r13, r13
    421c:	cc 19       	sub	r28, r12
    421e:	dd 09       	sbc	r29, r13
    4220:	29 2f       	mov	r18, r25
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	2c 17       	cp	r18, r28
    4226:	3d 07       	cpc	r19, r29
    4228:	0c f4       	brge	.+2      	; 0x422c <ringbuffer_fw_ringBufferPull+0x9c>
    422a:	e9 01       	movw	r28, r18
    422c:	5b 01       	movw	r10, r22
    422e:	f8 2e       	mov	r15, r24
    4230:	9c 2e       	mov	r9, r28

		if (lenTop) {
    4232:	ee 20       	and	r14, r14
    4234:	39 f0       	breq	.+14     	; 0x4244 <ringbuffer_fw_ringBufferPull+0xb4>
			memcpy(outData, &(ringBuffer[pullIdx]), lenTop);
    4236:	b8 01       	movw	r22, r16
    4238:	65 0f       	add	r22, r21
    423a:	71 1d       	adc	r23, r1
    423c:	a6 01       	movw	r20, r12
    423e:	c5 01       	movw	r24, r10
    4240:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <memcpy>
			len += lenTop;
		}

		if (lenBot) {
    4244:	99 20       	and	r9, r9
    4246:	49 f0       	breq	.+18     	; 0x425a <ringbuffer_fw_ringBufferPull+0xca>
    4248:	ae 01       	movw	r20, r28
    424a:	55 27       	eor	r21, r21
			memcpy(&(outData[lenTop]), &(ringBuffer[0]), lenBot);
    424c:	b8 01       	movw	r22, r16
    424e:	c5 01       	movw	r24, r10
    4250:	8c 0d       	add	r24, r12
    4252:	9d 1d       	adc	r25, r13
    4254:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <memcpy>
			len += lenBot;
    4258:	e9 0c       	add	r14, r9
		}

		outData[len] = 0;
    425a:	f5 01       	movw	r30, r10
    425c:	ee 0d       	add	r30, r14
    425e:	f1 1d       	adc	r31, r1
    4260:	10 82       	st	Z, r1

		// advance the index
		if (isSend) {
    4262:	ff 20       	and	r15, r15
    4264:	51 f0       	breq	.+20     	; 0x427a <ringbuffer_fw_ringBufferPull+0xea>
			uint8_t sreg = SREG;
    4266:	9f b7       	in	r25, 0x3f	; 63
			cli();
    4268:	f8 94       	cli
			usbRingBufferSendPullIdx += len;
    426a:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <usbRingBufferSendPullIdx>
    426e:	8e 0d       	add	r24, r14
			usbRingBufferSendPullIdx %= bufferSize;
    4270:	8f 77       	andi	r24, 0x7F	; 127
    4272:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <usbRingBufferSendPullIdx>
			SREG = sreg;
    4276:	9f bf       	out	0x3f, r25	; 63
    4278:	11 c0       	rjmp	.+34     	; 0x429c <ringbuffer_fw_ringBufferPull+0x10c>

		} else {
			uint8_t sreg = SREG;
    427a:	9f b7       	in	r25, 0x3f	; 63
			cli();
    427c:	f8 94       	cli
			usbRingBufferRcvPullIdx += len;
    427e:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <usbRingBufferRcvPullIdx>
    4282:	8e 0d       	add	r24, r14
			usbRingBufferRcvPullIdx %= bufferSize;
    4284:	8f 77       	andi	r24, 0x7F	; 127
    4286:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <usbRingBufferRcvPullIdx>
			SREG = sreg;
    428a:	9f bf       	out	0x3f, r25	; 63
    428c:	07 c0       	rjmp	.+14     	; 0x429c <ringbuffer_fw_ringBufferPull+0x10c>
		}
	} else if (!size) {
    428e:	41 11       	cpse	r20, r1
    4290:	04 c0       	rjmp	.+8      	; 0x429a <ringbuffer_fw_ringBufferPull+0x10a>
		outData[0] = 0;
    4292:	fb 01       	movw	r30, r22
    4294:	10 82       	st	Z, r1
	return retLen;
}

uint8_t ringbuffer_fw_ringBufferPull(uint8_t isSend, uchar outData[], uint8_t size)
{
	uint8_t len = 0;
    4296:	e1 2c       	mov	r14, r1
    4298:	01 c0       	rjmp	.+2      	; 0x429c <ringbuffer_fw_ringBufferPull+0x10c>
    429a:	e1 2c       	mov	r14, r1
		}
	} else if (!size) {
		outData[0] = 0;
	}
	return len;
}
    429c:	8e 2d       	mov	r24, r14
    429e:	df 91       	pop	r29
    42a0:	cf 91       	pop	r28
    42a2:	1f 91       	pop	r17
    42a4:	0f 91       	pop	r16
    42a6:	ff 90       	pop	r15
    42a8:	ef 90       	pop	r14
    42aa:	df 90       	pop	r13
    42ac:	cf 90       	pop	r12
    42ae:	bf 90       	pop	r11
    42b0:	af 90       	pop	r10
    42b2:	9f 90       	pop	r9
    42b4:	08 95       	ret

000042b6 <ringbuffer_fw_getStatusNextMsg>:

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;

	uint8_t sreg = SREG;
    42b6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    42b8:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    42ba:	88 23       	and	r24, r24
    42bc:	49 f0       	breq	.+18     	; 0x42d0 <ringbuffer_fw_getStatusNextMsg+0x1a>
    42be:	20 91 16 05 	lds	r18, 0x0516	; 0x800516 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    42c2:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <usbRingBufferSendPullIdx>
	SREG = sreg;
    42c6:	9f bf       	out	0x3f, r25	; 63

	if (pullIdx != pushIdx) {
    42c8:	28 13       	cpse	r18, r24
    42ca:	0c c0       	rjmp	.+24     	; 0x42e4 <ringbuffer_fw_getStatusNextMsg+0x2e>
	return len;
}

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	08 95       	ret

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    42d0:	20 91 14 05 	lds	r18, 0x0514	; 0x800514 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    42d4:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    42d8:	9f bf       	out	0x3f, r25	; 63

	if (pullIdx != pushIdx) {
    42da:	28 17       	cp	r18, r24
    42dc:	61 f0       	breq	.+24     	; 0x42f6 <ringbuffer_fw_getStatusNextMsg+0x40>
		status |= RINGBUFFER_MSG_STATUS_AVAIL;

		/* test for NMEA message */
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    42de:	e7 e7       	ldi	r30, 0x77	; 119
    42e0:	f2 e0       	ldi	r31, 0x02	; 2
    42e2:	02 c0       	rjmp	.+4      	; 0x42e8 <ringbuffer_fw_getStatusNextMsg+0x32>
    42e4:	e7 ef       	ldi	r30, 0xF7	; 247
    42e6:	f2 e0       	ldi	r31, 0x02	; 2
		if (*(ringBuffer + pullIdx) == MSG_PATTERN_NMEA) {	// first character identifies message type
    42e8:	e8 0f       	add	r30, r24
    42ea:	f1 1d       	adc	r31, r1
    42ec:	80 81       	ld	r24, Z
    42ee:	84 32       	cpi	r24, 0x24	; 36
    42f0:	21 f4       	brne	.+8      	; 0x42fa <ringbuffer_fw_getStatusNextMsg+0x44>
			status |= RINGBUFFER_MSG_STATUS_IS_NMEA;
    42f2:	81 e1       	ldi	r24, 0x11	; 17
    42f4:	08 95       	ret
	return len;
}

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;
    42f6:	80 e0       	ldi	r24, 0x00	; 0
    42f8:	08 95       	ret
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
	SREG = sreg;

	if (pullIdx != pushIdx) {
		status |= RINGBUFFER_MSG_STATUS_AVAIL;
    42fa:	81 e0       	ldi	r24, 0x01	; 1
		if (*(ringBuffer + pullIdx) == MSG_PATTERN_NMEA) {	// first character identifies message type
			status |= RINGBUFFER_MSG_STATUS_IS_NMEA;
		}
	}
	return status;
}
    42fc:	08 95       	ret

000042fe <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore>:

void ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore(uint8_t isSend)
{
    42fe:	cf 93       	push	r28
    4300:	c8 2f       	mov	r28, r24
	for (;;) {
		if (ringbuffer_fw_getSemaphore(isSend)) {
    4302:	8c 2f       	mov	r24, r28
    4304:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <ringbuffer_fw_getSemaphore>
    4308:	88 23       	and	r24, r24
    430a:	c9 f0       	breq	.+50     	; 0x433e <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x40>
			uint8_t pushIdx;
			uint8_t pullIdx;

			if (isSend) {
    430c:	cc 23       	and	r28, r28
    430e:	41 f0       	breq	.+16     	; 0x4320 <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x22>
				uint8_t sreg = SREG;
    4310:	2f b7       	in	r18, 0x3f	; 63
				cli();
    4312:	f8 94       	cli
				pushIdx = usbRingBufferSendPushIdx;
    4314:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <usbRingBufferSendPushIdx>
				pullIdx = usbRingBufferSendPullIdx;
    4318:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <usbRingBufferSendPullIdx>
				SREG = sreg;
    431c:	2f bf       	out	0x3f, r18	; 63
    431e:	07 c0       	rjmp	.+14     	; 0x432e <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x30>

			} else {
				uint8_t sreg = SREG;
    4320:	2f b7       	in	r18, 0x3f	; 63
				cli();
    4322:	f8 94       	cli
				pushIdx = usbRingBufferRcvPushIdx;
    4324:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <usbRingBufferRcvPushIdx>
				pullIdx = usbRingBufferRcvPullIdx;
    4328:	90 91 13 05 	lds	r25, 0x0513	; 0x800513 <usbRingBufferRcvPullIdx>
				SREG = sreg;
    432c:	2f bf       	out	0x3f, r18	; 63
			}

			if (pullIdx == pushIdx) {
    432e:	98 17       	cp	r25, r24
    4330:	51 f0       	breq	.+20     	; 0x4346 <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x48>
				// buffer is empty, break loop and hold semaphore
				break;
			}

			ringbuffer_fw_freeSemaphore(isSend);
    4332:	8c 2f       	mov	r24, r28
    4334:	0e 94 10 20 	call	0x4020	; 0x4020 <ringbuffer_fw_freeSemaphore>

			// give the CPU away for a moment to delay, do not use giveAway() that would make a loop
		    wdt_reset();
    4338:	a8 95       	wdr
		    usbPoll();
    433a:	0e 94 86 29 	call	0x530c	; 0x530c <usbPoll>
		}

		// give the CPU away for a moment to delay, do not use giveAway() that would make a loop
	    wdt_reset();
    433e:	a8 95       	wdr
	    usbPoll();
    4340:	0e 94 86 29 	call	0x530c	; 0x530c <usbPoll>
	}
    4344:	de cf       	rjmp	.-68     	; 0x4302 <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x4>
}
    4346:	cf 91       	pop	r28
    4348:	08 95       	ret

0000434a <ringbuffer_fw_ringBufferWaitAppend>:

uint8_t ringbuffer_fw_ringBufferWaitAppend(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
    434a:	ff 92       	push	r15
    434c:	0f 93       	push	r16
    434e:	1f 93       	push	r17
    4350:	cf 93       	push	r28
    4352:	df 93       	push	r29
    4354:	c8 2f       	mov	r28, r24
    4356:	d6 2f       	mov	r29, r22
    4358:	8a 01       	movw	r16, r20
    435a:	f2 2e       	mov	r15, r18
	ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore(isSend);
    435c:	0e 94 7f 21 	call	0x42fe	; 0x42fe <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore>
    uint8_t retLen = ringbuffer_fw_ringBufferPush(isSend, isPgm, inData, len);
    4360:	2f 2d       	mov	r18, r15
    4362:	a8 01       	movw	r20, r16
    4364:	6d 2f       	mov	r22, r29
    4366:	8c 2f       	mov	r24, r28
    4368:	0e 94 1c 20 	call	0x4038	; 0x4038 <ringbuffer_fw_ringBufferPush>
    436c:	d8 2f       	mov	r29, r24
	ringbuffer_fw_freeSemaphore(isSend);
    436e:	8c 2f       	mov	r24, r28
    4370:	0e 94 10 20 	call	0x4020	; 0x4020 <ringbuffer_fw_freeSemaphore>
    return retLen;
}
    4374:	8d 2f       	mov	r24, r29
    4376:	df 91       	pop	r29
    4378:	cf 91       	pop	r28
    437a:	1f 91       	pop	r17
    437c:	0f 91       	pop	r16
    437e:	ff 90       	pop	r15
    4380:	08 95       	ret

00004382 <serial_fw_sendNmea>:
	return (serialCtxtTxBufferLen > 0) ?  true : false;
}

static void serial_fw_sendNmea()
{
	uint8_t sreg = SREG;
    4382:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4384:	f8 94       	cli

	/* clear TRANSMIT COMPLETE */
	UCSR0A &= ~(_BV(TXC0));
    4386:	e0 ec       	ldi	r30, 0xC0	; 192
    4388:	f0 e0       	ldi	r31, 0x00	; 0
    438a:	80 81       	ld	r24, Z
    438c:	8f 7b       	andi	r24, 0xBF	; 191
    438e:	80 83       	st	Z, r24

	/* initial load of USART data register, after this the ISR will handle it until the serial TX buffer is completed */
	UDR0 = serialCtxtTxBuffer[serialCtxtTxBufferIdx++];
    4390:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <serialCtxtTxBufferIdx>
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	8e 0f       	add	r24, r30
    4398:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <serialCtxtTxBufferIdx>
    439c:	f0 e0       	ldi	r31, 0x00	; 0
    439e:	e9 54       	subi	r30, 0x49	; 73
    43a0:	fe 4f       	sbci	r31, 0xFE	; 254
    43a2:	80 81       	ld	r24, Z
    43a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	SREG = sreg;
    43a8:	9f bf       	out	0x3f, r25	; 63

	/* enable DATA REGISTER EMPTY INTERRUPT - the interrupt will arrive after initial UDSR0 loading */
	UART_CTRL |= _BV(UDRIE0);								// this will shoot an interrupt because UDR0 is ready again to be filled (UDRE0 is true)
    43aa:	e1 ec       	ldi	r30, 0xC1	; 193
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	80 81       	ld	r24, Z
    43b0:	80 62       	ori	r24, 0x20	; 32
    43b2:	80 83       	st	Z, r24
    43b4:	08 95       	ret

000043b6 <serial_fw_close>:
}

void serial_fw_close()
{
	// interrupt: clearing Global Interrupt Flag when interrupts are changed
	uint8_t sreg = SREG;
    43b6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    43b8:	f8 94       	cli
	UART_CTRL = UART_CTRL & ~(_BV(RXCIE0)					|			// UCSR0B: disable all serial interrupts,
    43ba:	e1 ec       	ldi	r30, 0xC1	; 193
    43bc:	f0 e0       	ldi	r31, 0x00	; 0
    43be:	80 81       	ld	r24, Z
    43c0:	87 70       	andi	r24, 0x07	; 7
    43c2:	80 83       	st	Z, r24
							  _BV(TXCIE0)					|
							  _BV(UDRIE0)					|
							  _BV(RXEN0)					|			// and TX/RX ports
							  _BV(TXEN0));
	SREG = sreg;
    43c4:	9f bf       	out	0x3f, r25	; 63
#ifdef UART_DOUBLESPEED
		UART_STATUS &= ~(_BV(UART_DOUBLE));
#endif

	// setting IO pins: pull-up off
	UART_PORT &= ~(_BV(UART_RX_PNUM));									// RX pull-up off
    43c6:	58 98       	cbi	0x0b, 0	; 11

	/* no more power is needed for this module */
	PRR |= _BV(PRUSART0);
    43c8:	e4 e6       	ldi	r30, 0x64	; 100
    43ca:	f0 e0       	ldi	r31, 0x00	; 0
    43cc:	80 81       	ld	r24, Z
    43ce:	82 60       	ori	r24, 0x02	; 2
    43d0:	80 83       	st	Z, r24
    43d2:	08 95       	ret

000043d4 <serial_fw_serRxIsrOn>:
}

void serial_fw_serRxIsrOn(uint8_t flag)
{
	if (flag) {
    43d4:	88 23       	and	r24, r24
    43d6:	49 f0       	breq	.+18     	; 0x43ea <serial_fw_serRxIsrOn+0x16>
		// interrupt: clearing Global Interrupt Flag when interrupts are changed
		uint8_t sreg = SREG;
    43d8:	9f b7       	in	r25, 0x3f	; 63
		cli();
    43da:	f8 94       	cli
		UART_CTRL |= _BV(RXCIE0);											// UCSR0B: enable interrupts for RX data received
    43dc:	e1 ec       	ldi	r30, 0xC1	; 193
    43de:	f0 e0       	ldi	r31, 0x00	; 0
    43e0:	80 81       	ld	r24, Z
    43e2:	80 68       	ori	r24, 0x80	; 128
    43e4:	80 83       	st	Z, r24
		SREG = sreg;
    43e6:	9f bf       	out	0x3f, r25	; 63
    43e8:	08 95       	ret

	} else {
		// interrupt: clearing Global Interrupt Flag when interrupts are changed
		uint8_t sreg = SREG;
    43ea:	9f b7       	in	r25, 0x3f	; 63
		cli();
    43ec:	f8 94       	cli
		UART_CTRL &= ~(_BV(RXCIE0));										// UCSR0B: disable interrupts for RX data received
    43ee:	e1 ec       	ldi	r30, 0xC1	; 193
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	80 81       	ld	r24, Z
    43f4:	8f 77       	andi	r24, 0x7F	; 127
    43f6:	80 83       	st	Z, r24
		SREG = sreg;
    43f8:	9f bf       	out	0x3f, r25	; 63
    43fa:	08 95       	ret

000043fc <serial_fw_setCommBaud>:
	}
}

void serial_fw_setCommBaud(uint16_t baud)
{
    43fc:	9c 01       	movw	r18, r24
	UART_BAUD_HIGH = ((UART_CALC_BAUDRATE(baud)>>8) & 0xff);
    43fe:	bc 01       	movw	r22, r24
    4400:	76 95       	lsr	r23
    4402:	67 95       	ror	r22
    4404:	cb 01       	movw	r24, r22
    4406:	a0 e0       	ldi	r26, 0x00	; 0
    4408:	b0 e0       	ldi	r27, 0x00	; 0
    440a:	bc 01       	movw	r22, r24
    440c:	cd 01       	movw	r24, r26
    440e:	7c 57       	subi	r23, 0x7C	; 124
    4410:	8c 4f       	sbci	r24, 0xFC	; 252
    4412:	9f 4f       	sbci	r25, 0xFF	; 255
    4414:	40 e0       	ldi	r20, 0x00	; 0
    4416:	50 e0       	ldi	r21, 0x00	; 0
    4418:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__udivmodsi4>
    441c:	da 01       	movw	r26, r20
    441e:	c9 01       	movw	r24, r18
    4420:	01 97       	sbiw	r24, 0x01	; 1
    4422:	a1 09       	sbc	r26, r1
    4424:	b1 09       	sbc	r27, r1
    4426:	89 2f       	mov	r24, r25
    4428:	9a 2f       	mov	r25, r26
    442a:	ab 2f       	mov	r26, r27
    442c:	bb 27       	eor	r27, r27
    442e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UART_BAUD_LOW  = ( UART_CALC_BAUDRATE(baud)     & 0xff);
    4432:	21 50       	subi	r18, 0x01	; 1
    4434:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4438:	08 95       	ret

0000443a <serial_fw_init>:
}

void serial_fw_init()
{
	/* power up this module */
	PRR &= ~(_BV(PRUSART0));
    443a:	e4 e6       	ldi	r30, 0x64	; 100
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	80 81       	ld	r24, Z
    4440:	8d 7f       	andi	r24, 0xFD	; 253
    4442:	80 83       	st	Z, r24

	// setting IO pins: pull-up on
	MCUCR     &= ~(_BV(PUD));											// ensure PUD is off --> activation of all pull-ups
    4444:	85 b7       	in	r24, 0x35	; 53
    4446:	8f 7e       	andi	r24, 0xEF	; 239
    4448:	85 bf       	out	0x35, r24	; 53
	UART_PORT |=   _BV(UART_RX_PNUM);									// RX pull-up on
    444a:	58 9a       	sbi	0x0b, 0	; 11

	/* read GPS coefficients */
	if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_GPS_NR)) {
    444c:	63 e0       	ldi	r22, 0x03	; 3
    444e:	8d e7       	ldi	r24, 0x7D	; 125
    4450:	93 e0       	ldi	r25, 0x03	; 3
    4452:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <memory_fw_readEepromValidBlock>
    4456:	88 23       	and	r24, r24
    4458:	a1 f0       	breq	.+40     	; 0x4482 <serial_fw_init+0x48>
		eeprom_b03_t* b03 = (eeprom_b03_t*) &mainFormatBuffer;
		serialCoef_b03_serial_baud = b03->b03_serial_baud;
    445a:	ed e7       	ldi	r30, 0x7D	; 125
    445c:	f3 e0       	ldi	r31, 0x03	; 3
    445e:	80 81       	ld	r24, Z
    4460:	91 81       	ldd	r25, Z+1	; 0x01
    4462:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <serialCoef_b03_serial_baud+0x1>
    4466:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <serialCoef_b03_serial_baud>
		serialCoef_b03_bitsParityStopbits = b03->b03_serial_bitsParityStopbits;
    446a:	82 81       	ldd	r24, Z+2	; 0x02
    446c:	93 81       	ldd	r25, Z+3	; 0x03
    446e:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <serialCoef_b03_bitsParityStopbits+0x1>
    4472:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <serialCoef_b03_bitsParityStopbits>
		serialCoef_b03_gps_comm_mode = b03->b03_gps_comm_mode;
    4476:	84 81       	ldd	r24, Z+4	; 0x04
    4478:	95 81       	ldd	r25, Z+5	; 0x05
    447a:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <serialCoef_b03_gps_comm_mode+0x1>
    447e:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <serialCoef_b03_gps_comm_mode>
	}

	// setting baud rate
	serial_fw_setCommBaud(serialCoef_b03_serial_baud);
    4482:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <serialCoef_b03_serial_baud>
    4486:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <serialCoef_b03_serial_baud+0x1>
    448a:	0e 94 fe 21 	call	0x43fc	; 0x43fc <serial_fw_setCommBaud>
#ifdef UART_DOUBLESPEED
	UART_STATUS = _BV(UART_DOUBLE);										// UCSR0A: U2X0
#endif

	// enabling the Transmitter and the Receiver
	UART_CTRL  =  _BV(RXEN0) 	|										// RXEN0=1,
    448e:	88 e1       	ldi	r24, 0x18	; 24
    4490:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
				  _BV(TXEN0);											// TXEN0=1

	// setting frame format
	UART_CTRL2 = (0b00<<UMSEL00) 															|	// UCSR0C: asynchronous USART,
				 (( getCommParity(serialCoef_b03_bitsParityStopbits)		& 0b11)<<UPM00)	|	// parity 0=off, 2=even, 3=odd, 1=(do not use)
    4494:	20 91 0d 05 	lds	r18, 0x050D	; 0x80050d <serialCoef_b03_bitsParityStopbits>
    4498:	30 91 0e 05 	lds	r19, 0x050E	; 0x80050e <serialCoef_b03_bitsParityStopbits+0x1>
	// enabling the Transmitter and the Receiver
	UART_CTRL  =  _BV(RXEN0) 	|										// RXEN0=1,
				  _BV(TXEN0);											// TXEN0=1

	// setting frame format
	UART_CTRL2 = (0b00<<UMSEL00) 															|	// UCSR0C: asynchronous USART,
    449c:	83 e0       	ldi	r24, 0x03	; 3
    449e:	82 0f       	add	r24, r18
    44a0:	83 70       	andi	r24, 0x03	; 3
    44a2:	88 0f       	add	r24, r24
    44a4:	93 2f       	mov	r25, r19
    44a6:	90 73       	andi	r25, 0x30	; 48
    44a8:	89 2b       	or	r24, r25
	return (val & DEFAULT_PARITY_N0_E2_O3_MASK) >> DEFAULT_PARITY_N0_E2_O3_BITPOS;
}

static uint16_t getCommStopBits(uint16_t val)
{
	return (val & DEFAULT_STOPBITS_MASK) >> DEFAULT_STOPBITS_BITPOS;
    44aa:	22 27       	eor	r18, r18
    44ac:	33 70       	andi	r19, 0x03	; 3
	// enabling the Transmitter and the Receiver
	UART_CTRL  =  _BV(RXEN0) 	|										// RXEN0=1,
				  _BV(TXEN0);											// TXEN0=1

	// setting frame format
	UART_CTRL2 = (0b00<<UMSEL00) 															|	// UCSR0C: asynchronous USART,
    44ae:	9f ef       	ldi	r25, 0xFF	; 255
    44b0:	93 0f       	add	r25, r19
    44b2:	91 70       	andi	r25, 0x01	; 1
    44b4:	99 0f       	add	r25, r25
    44b6:	99 0f       	add	r25, r25
    44b8:	99 0f       	add	r25, r25
    44ba:	89 2b       	or	r24, r25
    44bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				 (( getCommParity(serialCoef_b03_bitsParityStopbits)		& 0b11)<<UPM00)	|	// parity 0=off, 2=even, 3=odd, 1=(do not use)
				 (((getCommStopBits(serialCoef_b03_bitsParityStopbits) - 1)	&  0b1)<<USBS0) |	// stop bits == 2
				 (((getCommDataBits(serialCoef_b03_bitsParityStopbits) - 5)	& 0b11)<<UCSZ00);	// bits 5..8

	// this is a dummy operation to clear the RX ready bit
	serialCtxtTxBufferIdx = UDR0;
    44c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	serialCtxtTxBufferIdx = 0;
    44c4:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <serialCtxtTxBufferIdx>

	serial_fw_serRxIsrOn(true);
    44c8:	81 e0       	ldi	r24, 0x01	; 1
    44ca:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <serial_fw_serRxIsrOn>
    44ce:	08 95       	ret

000044d0 <serial_fw_isTxRunning>:
	UART_BAUD_LOW  = ( UART_CALC_BAUDRATE(baud)     & 0xff);
}

uint8_t serial_fw_isTxRunning()
{
	return (serialCtxtTxBufferLen > 0) ?  true : false;
    44d0:	81 e0       	ldi	r24, 0x01	; 1
    44d2:	90 91 09 05 	lds	r25, 0x0509	; 0x800509 <serialCtxtTxBufferLen>
    44d6:	91 11       	cpse	r25, r1
    44d8:	01 c0       	rjmp	.+2      	; 0x44dc <serial_fw_isTxRunning+0xc>
    44da:	80 e0       	ldi	r24, 0x00	; 0
}
    44dc:	08 95       	ret

000044de <serial_fw_copyAndSendNmea>:
	/* enable DATA REGISTER EMPTY INTERRUPT - the interrupt will arrive after initial UDSR0 loading */
	UART_CTRL |= _BV(UDRIE0);								// this will shoot an interrupt because UDR0 is ready again to be filled (UDRE0 is true)
}

void serial_fw_copyAndSendNmea(uint8_t isPgm, const uchar inData[], uint8_t len)
{
    44de:	cf 93       	push	r28
	if (len) {
    44e0:	44 23       	and	r20, r20
    44e2:	71 f0       	breq	.+28     	; 0x4500 <serial_fw_copyAndSendNmea+0x22>
    44e4:	c4 2f       	mov	r28, r20
    44e6:	ab 01       	movw	r20, r22
		memory_fw_copyBuffer(isPgm, serialCtxtTxBuffer, inData, len);
    44e8:	2c 2f       	mov	r18, r28
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	67 eb       	ldi	r22, 0xB7	; 183
    44ee:	71 e0       	ldi	r23, 0x01	; 1
    44f0:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <memory_fw_copyBuffer>
		serialCtxtTxBufferIdx = 0;
    44f4:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <serialCtxtTxBufferIdx>
		serialCtxtTxBufferLen = len;
    44f8:	c0 93 09 05 	sts	0x0509, r28	; 0x800509 <serialCtxtTxBufferLen>
		serial_fw_sendNmea();
    44fc:	0e 94 c1 21 	call	0x4382	; 0x4382 <serial_fw_sendNmea>
	}
}
    4500:	cf 91       	pop	r28
    4502:	08 95       	ret

00004504 <serial_fw_pullAndSendNmea_havingSemaphore>:

void serial_fw_pullAndSendNmea_havingSemaphore(uint8_t isSend)
{
    4504:	cf 93       	push	r28
    4506:	c8 2f       	mov	r28, r24
	/* check if serial TX buffer is clear and the USART0 is ready for a new character to be sent */
	uint8_t sreg = SREG;
    4508:	8f b7       	in	r24, 0x3f	; 63
	cli();
    450a:	f8 94       	cli
	uint8_t isTxRdy = UCSR0A & _BV(UDRE0);
    450c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	SREG = sreg;
    4510:	8f bf       	out	0x3f, r24	; 63

	if (!serialCtxtTxBufferLen && isTxRdy) {
    4512:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <serialCtxtTxBufferLen>
    4516:	81 11       	cpse	r24, r1
    4518:	38 c0       	rjmp	.+112    	; 0x458a <serial_fw_pullAndSendNmea_havingSemaphore+0x86>
    451a:	95 ff       	sbrs	r25, 5
    451c:	36 c0       	rjmp	.+108    	; 0x458a <serial_fw_pullAndSendNmea_havingSemaphore+0x86>
		/* get message and free semaphore */
		serialCtxtTxBufferLen = ringbuffer_fw_ringBufferPull(isSend, serialCtxtTxBuffer, SERIALCTXT_TX_BUFFER_SIZE - 3);
    451e:	4d e3       	ldi	r20, 0x3D	; 61
    4520:	67 eb       	ldi	r22, 0xB7	; 183
    4522:	71 e0       	ldi	r23, 0x01	; 1
    4524:	8c 2f       	mov	r24, r28
    4526:	0e 94 c8 20 	call	0x4190	; 0x4190 <ringbuffer_fw_ringBufferPull>
    452a:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <serialCtxtTxBufferLen>
		ringbuffer_fw_freeSemaphore(isSend);
    452e:	8c 2f       	mov	r24, r28
    4530:	0e 94 10 20 	call	0x4020	; 0x4020 <ringbuffer_fw_freeSemaphore>

		/* drop serial TX data if transportation is not activated */
		if (!(main_bf.mainIsSerComm)) {
    4534:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4538:	83 ff       	sbrs	r24, 3
			serialCtxtTxBufferLen = 0;
    453a:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <serialCtxtTxBufferLen>
		}

		serialCtxtTxBufferIdx = 0;
    453e:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <serialCtxtTxBufferIdx>
		if (serialCtxtTxBufferLen) {
    4542:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <serialCtxtTxBufferLen>
    4546:	88 23       	and	r24, r24
    4548:	19 f1       	breq	.+70     	; 0x4590 <serial_fw_pullAndSendNmea_havingSemaphore+0x8c>
			if (serialCtxtTxBuffer[--serialCtxtTxBufferLen]) {  // chop off trailing NULL char
    454a:	ef ef       	ldi	r30, 0xFF	; 255
    454c:	e8 0f       	add	r30, r24
    454e:	e0 93 09 05 	sts	0x0509, r30	; 0x800509 <serialCtxtTxBufferLen>
    4552:	f0 e0       	ldi	r31, 0x00	; 0
    4554:	e9 54       	subi	r30, 0x49	; 73
    4556:	fe 4f       	sbci	r31, 0xFE	; 254
    4558:	90 81       	ld	r25, Z
    455a:	91 11       	cpse	r25, r1
				serialCtxtTxBufferLen++;						// restore length, if not NULL
    455c:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <serialCtxtTxBufferLen>
			}
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\r';	// obligatory NMEA message ends with CR LF
    4560:	e0 91 09 05 	lds	r30, 0x0509	; 0x800509 <serialCtxtTxBufferLen>
    4564:	ae 2f       	mov	r26, r30
    4566:	b0 e0       	ldi	r27, 0x00	; 0
    4568:	a9 54       	subi	r26, 0x49	; 73
    456a:	be 4f       	sbci	r27, 0xFE	; 254
    456c:	8d e0       	ldi	r24, 0x0D	; 13
    456e:	8c 93       	st	X, r24
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\n';
    4570:	82 e0       	ldi	r24, 0x02	; 2
    4572:	8e 0f       	add	r24, r30
    4574:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <serialCtxtTxBufferLen>
		serialCtxtTxBufferIdx = 0;
		if (serialCtxtTxBufferLen) {
			if (serialCtxtTxBuffer[--serialCtxtTxBufferLen]) {  // chop off trailing NULL char
				serialCtxtTxBufferLen++;						// restore length, if not NULL
			}
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\r';	// obligatory NMEA message ends with CR LF
    4578:	ef 5f       	subi	r30, 0xFF	; 255
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\n';
    457a:	f0 e0       	ldi	r31, 0x00	; 0
    457c:	e9 54       	subi	r30, 0x49	; 73
    457e:	fe 4f       	sbci	r31, 0xFE	; 254
    4580:	8a e0       	ldi	r24, 0x0A	; 10
    4582:	80 83       	st	Z, r24

			serial_fw_sendNmea();
    4584:	0e 94 c1 21 	call	0x4382	; 0x4382 <serial_fw_sendNmea>
    4588:	03 c0       	rjmp	.+6      	; 0x4590 <serial_fw_pullAndSendNmea_havingSemaphore+0x8c>
		}

	} else {  // now we are not ready yet, call us later again
		ringbuffer_fw_freeSemaphore(isSend);
    458a:	8c 2f       	mov	r24, r28
    458c:	0e 94 10 20 	call	0x4020	; 0x4020 <ringbuffer_fw_freeSemaphore>
	}
}
    4590:	cf 91       	pop	r28
    4592:	08 95       	ret

00004594 <__vector_18>:
 *
 * = 35 clocks --> 1.75 µs until sei() is done
 */
//void serial_ISR_RXC0(void) - __vector_18
ISR(USART_RX_vect, ISR_BLOCK)
{
    4594:	1f 92       	push	r1
    4596:	0f 92       	push	r0
    4598:	0f b6       	in	r0, 0x3f	; 63
    459a:	0f 92       	push	r0
    459c:	11 24       	eor	r1, r1
    459e:	2f 93       	push	r18
    45a0:	3f 93       	push	r19
    45a2:	4f 93       	push	r20
    45a4:	5f 93       	push	r21
    45a6:	6f 93       	push	r22
    45a8:	7f 93       	push	r23
    45aa:	8f 93       	push	r24
    45ac:	9f 93       	push	r25
    45ae:	af 93       	push	r26
    45b0:	bf 93       	push	r27
    45b2:	cf 93       	push	r28
    45b4:	df 93       	push	r29
    45b6:	ef 93       	push	r30
    45b8:	ff 93       	push	r31
	/* read the data byte received */
	uint8_t rxData = UDR0;
    45ba:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	/* since here we can allow global interrupts again */
	sei();
    45be:	78 94       	sei

	if (!serialCtxtBufferState && (serialCtxtRxBufferLen < (SERIALCTXT_RX_BUFFER_SIZE - 3))) {
    45c0:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <serialCtxtBufferState>
    45c4:	81 11       	cpse	r24, r1
    45c6:	51 c0       	rjmp	.+162    	; 0x466a <__vector_18+0xd6>
    45c8:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <serialCtxtRxBufferLen>
    45cc:	85 37       	cpi	r24, 0x75	; 117
    45ce:	08 f0       	brcs	.+2      	; 0x45d2 <__vector_18+0x3e>
    45d0:	4c c0       	rjmp	.+152    	; 0x466a <__vector_18+0xd6>
		serialCtxtBufferState = SERIAL_CTXT_BUFFER_STATE_BLOCK;
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <serialCtxtBufferState>

		/* if data is at the hook, get it first */
		if (serialCtxtNmeaRxHookBufIdx) {
    45d8:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <serialCtxtNmeaRxHookBufIdx>
    45dc:	88 23       	and	r24, r24
    45de:	f9 f0       	breq	.+62     	; 0x461e <__vector_18+0x8a>
			uint8_t sreg = SREG;
    45e0:	5f b7       	in	r21, 0x3f	; 63
			cli();
    45e2:	f8 94       	cli

			for (int idx = 0; idx < serialCtxtNmeaRxHookBufIdx; ++idx) {
    45e4:	60 91 06 05 	lds	r22, 0x0506	; 0x800506 <serialCtxtNmeaRxHookBufIdx>
    45e8:	70 e0       	ldi	r23, 0x00	; 0
    45ea:	16 16       	cp	r1, r22
    45ec:	17 06       	cpc	r1, r23
    45ee:	a4 f4       	brge	.+40     	; 0x4618 <__vector_18+0x84>
    45f0:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <serialCtxtRxBufferLen>
    45f4:	a7 ef       	ldi	r26, 0xF7	; 247
    45f6:	b1 e0       	ldi	r27, 0x01	; 1
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	90 e0       	ldi	r25, 0x00	; 0
				serialCtxtRxBuffer[serialCtxtRxBufferLen++] = serialCtxtNmeaRxHookBuf[idx];
    45fc:	21 e0       	ldi	r18, 0x01	; 1
    45fe:	2e 0f       	add	r18, r30
    4600:	3d 91       	ld	r19, X+
    4602:	f0 e0       	ldi	r31, 0x00	; 0
    4604:	e1 50       	subi	r30, 0x01	; 1
    4606:	fe 4f       	sbci	r31, 0xFE	; 254
    4608:	30 83       	st	Z, r19
		/* if data is at the hook, get it first */
		if (serialCtxtNmeaRxHookBufIdx) {
			uint8_t sreg = SREG;
			cli();

			for (int idx = 0; idx < serialCtxtNmeaRxHookBufIdx; ++idx) {
    460a:	01 96       	adiw	r24, 0x01	; 1
				serialCtxtRxBuffer[serialCtxtRxBufferLen++] = serialCtxtNmeaRxHookBuf[idx];
    460c:	e2 2f       	mov	r30, r18
		/* if data is at the hook, get it first */
		if (serialCtxtNmeaRxHookBufIdx) {
			uint8_t sreg = SREG;
			cli();

			for (int idx = 0; idx < serialCtxtNmeaRxHookBufIdx; ++idx) {
    460e:	86 17       	cp	r24, r22
    4610:	97 07       	cpc	r25, r23
    4612:	a4 f3       	brlt	.-24     	; 0x45fc <__vector_18+0x68>
    4614:	20 93 0a 05 	sts	0x050A, r18	; 0x80050a <serialCtxtRxBufferLen>
				serialCtxtRxBuffer[serialCtxtRxBufferLen++] = serialCtxtNmeaRxHookBuf[idx];
			}

			/* hook is processed and cleared */
			serialCtxtNmeaRxHookBufIdx = 0;
    4618:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <serialCtxtNmeaRxHookBufIdx>

			SREG = sreg;
    461c:	5f bf       	out	0x3f, r21	; 63
		}

		/* append data to the buffer */
		serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    461e:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <serialCtxtRxBufferLen>
    4622:	a1 e0       	ldi	r26, 0x01	; 1
    4624:	ae 0f       	add	r26, r30
    4626:	a0 93 0a 05 	sts	0x050A, r26	; 0x80050a <serialCtxtRxBufferLen>
    462a:	ce 2f       	mov	r28, r30
    462c:	d0 e0       	ldi	r29, 0x00	; 0
    462e:	c1 50       	subi	r28, 0x01	; 1
    4630:	de 4f       	sbci	r29, 0xFE	; 254
    4632:	48 83       	st	Y, r20

		if (serialCtxtRxBufferLen >= (SERIALCTXT_RX_BUFFER_SIZE - 3)) {
    4634:	a5 37       	cpi	r26, 0x75	; 117
    4636:	80 f0       	brcs	.+32     	; 0x4658 <__vector_18+0xc4>
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = '\r';
    4638:	b0 e0       	ldi	r27, 0x00	; 0
    463a:	a1 50       	subi	r26, 0x01	; 1
    463c:	be 4f       	sbci	r27, 0xFE	; 254
    463e:	8d e0       	ldi	r24, 0x0D	; 13
    4640:	8c 93       	st	X, r24
			rxData = '\n';
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    4642:	83 e0       	ldi	r24, 0x03	; 3
    4644:	8e 0f       	add	r24, r30
    4646:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <serialCtxtRxBufferLen>

		/* append data to the buffer */
		serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;

		if (serialCtxtRxBufferLen >= (SERIALCTXT_RX_BUFFER_SIZE - 3)) {
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = '\r';
    464a:	ee 5f       	subi	r30, 0xFE	; 254
			rxData = '\n';
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    464c:	f0 e0       	ldi	r31, 0x00	; 0
    464e:	e1 50       	subi	r30, 0x01	; 1
    4650:	fe 4f       	sbci	r31, 0xFE	; 254
    4652:	8a e0       	ldi	r24, 0x0A	; 10
    4654:	80 83       	st	Z, r24
    4656:	02 c0       	rjmp	.+4      	; 0x465c <__vector_18+0xc8>
		}

		/* if the end of a NMEA sentence is detected, send this serial RX buffer to the receive (IN) ring buffer */
		if (rxData == '\n') {  // a NMEA sentence stops with:  <sentence...*checksum\r\n>
    4658:	4a 30       	cpi	r20, 0x0A	; 10
    465a:	21 f4       	brne	.+8      	; 0x4664 <__vector_18+0xd0>
			/* mark this job to be done in the main context */
			serialCtxtBufferState = SERIAL_CTXT_BUFFER_STATE_SEND;
    465c:	82 e0       	ldi	r24, 0x02	; 2
    465e:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <serialCtxtBufferState>
    4662:	14 c0       	rjmp	.+40     	; 0x468c <__vector_18+0xf8>

		} else {
			/* append more data */
			serialCtxtBufferState = 0;
    4664:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <serialCtxtBufferState>
    4668:	11 c0       	rjmp	.+34     	; 0x468c <__vector_18+0xf8>
		}
	} else if (serialCtxtNmeaRxHookBufIdx < SERIALCTXT_NMEA_RX_HOOK_SIZE) {
    466a:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <serialCtxtNmeaRxHookBufIdx>
    466e:	88 30       	cpi	r24, 0x08	; 8
    4670:	68 f4       	brcc	.+26     	; 0x468c <__vector_18+0xf8>
		uint8_t sreg = SREG;
    4672:	8f b7       	in	r24, 0x3f	; 63
		cli();
    4674:	f8 94       	cli
		serialCtxtNmeaRxHookBuf[serialCtxtNmeaRxHookBufIdx++] = rxData;
    4676:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <serialCtxtNmeaRxHookBufIdx>
    467a:	91 e0       	ldi	r25, 0x01	; 1
    467c:	9e 0f       	add	r25, r30
    467e:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <serialCtxtNmeaRxHookBufIdx>
    4682:	f0 e0       	ldi	r31, 0x00	; 0
    4684:	e9 50       	subi	r30, 0x09	; 9
    4686:	fe 4f       	sbci	r31, 0xFE	; 254
    4688:	40 83       	st	Z, r20
		SREG = sreg;
    468a:	8f bf       	out	0x3f, r24	; 63
	}
}
    468c:	ff 91       	pop	r31
    468e:	ef 91       	pop	r30
    4690:	df 91       	pop	r29
    4692:	cf 91       	pop	r28
    4694:	bf 91       	pop	r27
    4696:	af 91       	pop	r26
    4698:	9f 91       	pop	r25
    469a:	8f 91       	pop	r24
    469c:	7f 91       	pop	r23
    469e:	6f 91       	pop	r22
    46a0:	5f 91       	pop	r21
    46a2:	4f 91       	pop	r20
    46a4:	3f 91       	pop	r19
    46a6:	2f 91       	pop	r18
    46a8:	0f 90       	pop	r0
    46aa:	0f be       	out	0x3f, r0	; 63
    46ac:	0f 90       	pop	r0
    46ae:	1f 90       	pop	r1
    46b0:	18 95       	reti

000046b2 <__vector_19>:
 *
 * = 22 clocks --> 1.10 µs until sei() is done
 */
//void serial_ISR_UDRE0(void) - __vector_19
ISR(USART_UDRE_vect, ISR_BLOCK)
{
    46b2:	1f 92       	push	r1
    46b4:	0f 92       	push	r0
    46b6:	0f b6       	in	r0, 0x3f	; 63
    46b8:	0f 92       	push	r0
    46ba:	11 24       	eor	r1, r1
    46bc:	8f 93       	push	r24
    46be:	9f 93       	push	r25
    46c0:	ef 93       	push	r30
    46c2:	ff 93       	push	r31
	UCSR0B &= ~(_BV(UDRIE0));								// disable interrupt for register empty
    46c4:	e1 ec       	ldi	r30, 0xC1	; 193
    46c6:	f0 e0       	ldi	r31, 0x00	; 0
    46c8:	80 81       	ld	r24, Z
    46ca:	8f 7d       	andi	r24, 0xDF	; 223
    46cc:	80 83       	st	Z, r24
	sei();
    46ce:	78 94       	sei

	/* first look if the serial buffer is filled */
	if (serialCtxtTxBufferIdx < serialCtxtTxBufferLen) {
    46d0:	90 91 08 05 	lds	r25, 0x0508	; 0x800508 <serialCtxtTxBufferIdx>
    46d4:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <serialCtxtTxBufferLen>
    46d8:	98 17       	cp	r25, r24
    46da:	c8 f4       	brcc	.+50     	; 0x470e <__vector_19+0x5c>
		cli();
    46dc:	f8 94       	cli
		UDR0 = serialCtxtTxBuffer[serialCtxtTxBufferIdx++];	// UDRE0 becomes cleared
    46de:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <serialCtxtTxBufferIdx>
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	8e 0f       	add	r24, r30
    46e6:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <serialCtxtTxBufferIdx>
    46ea:	f0 e0       	ldi	r31, 0x00	; 0
    46ec:	e9 54       	subi	r30, 0x49	; 73
    46ee:	fe 4f       	sbci	r31, 0xFE	; 254
    46f0:	80 81       	ld	r24, Z
    46f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		UCSR0B |= _BV(UDRIE0);								// enables interrupt for register empty
    46f6:	e1 ec       	ldi	r30, 0xC1	; 193
    46f8:	f0 e0       	ldi	r31, 0x00	; 0
    46fa:	80 81       	ld	r24, Z
    46fc:	80 62       	ori	r24, 0x20	; 32
    46fe:	80 83       	st	Z, r24
		sei();
    4700:	78 94       	sei
	}

	/* then check if job is now done */
	if (serialCtxtTxBufferIdx >= serialCtxtTxBufferLen) {
    4702:	90 91 08 05 	lds	r25, 0x0508	; 0x800508 <serialCtxtTxBufferIdx>
    4706:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <serialCtxtTxBufferLen>
    470a:	98 17       	cp	r25, r24
    470c:	48 f0       	brcs	.+18     	; 0x4720 <__vector_19+0x6e>
		/* job is done - turn off data register empty interrupt */
		cli();
    470e:	f8 94       	cli
		UCSR0B &= ~(_BV(UDRIE0));							// disable interrupt for register empty
    4710:	e1 ec       	ldi	r30, 0xC1	; 193
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	80 81       	ld	r24, Z
    4716:	8f 7d       	andi	r24, 0xDF	; 223
    4718:	80 83       	st	Z, r24
		sei();
    471a:	78 94       	sei

		/* mark buffer as free */
		serialCtxtTxBufferLen = 0;
    471c:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <serialCtxtTxBufferLen>
	}
}
    4720:	ff 91       	pop	r31
    4722:	ef 91       	pop	r30
    4724:	9f 91       	pop	r25
    4726:	8f 91       	pop	r24
    4728:	0f 90       	pop	r0
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	0f 90       	pop	r0
    472e:	1f 90       	pop	r1
    4730:	18 95       	reti

00004732 <__vector_20>:

//void serial_ISR_TXC0(void) - __vector_20
ISR(USART_TX_vect, ISR_NOBLOCK)
{
    4732:	78 94       	sei
    4734:	1f 92       	push	r1
    4736:	0f 92       	push	r0
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	0f 92       	push	r0
    473c:	11 24       	eor	r1, r1
	// not used yet
}
    473e:	0f 90       	pop	r0
    4740:	0f be       	out	0x3f, r0	; 63
    4742:	0f 90       	pop	r0
    4744:	1f 90       	pop	r1
    4746:	18 95       	reti

00004748 <waitUntilDone>:
extern volatile uint8_t twiSeq1Adr;
extern volatile uint8_t twiSeq2DataCnt;
extern volatile uint8_t twiSeq2DataIdx;
extern volatile uint8_t twiSeq2Data[TWI_DATA_BUFFER_SIZE];

static void waitUntilDone() {
    4748:	cf 93       	push	r28
    474a:	df 93       	push	r29
	while (twiState.isProcessing) {
    474c:	cd e2       	ldi	r28, 0x2D	; 45
    474e:	d1 e0       	ldi	r29, 0x01	; 1
    4750:	05 c0       	rjmp	.+10     	; 0x475c <waitUntilDone+0x14>
		wdt_reset();
    4752:	a8 95       	wdr
		if (usbIsUp) {
    4754:	99 23       	and	r25, r25
    4756:	21 f0       	breq	.+8      	; 0x4760 <waitUntilDone+0x18>
			usbPoll();
    4758:	0e 94 86 29 	call	0x530c	; 0x530c <usbPoll>
extern volatile uint8_t twiSeq2Data[TWI_DATA_BUFFER_SIZE];

static void waitUntilDone() {
	while (twiState.isProcessing) {
		wdt_reset();
		if (usbIsUp) {
    475c:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <usbIsUp>
extern volatile uint8_t twiSeq2DataCnt;
extern volatile uint8_t twiSeq2DataIdx;
extern volatile uint8_t twiSeq2Data[TWI_DATA_BUFFER_SIZE];

static void waitUntilDone() {
	while (twiState.isProcessing) {
    4760:	88 81       	ld	r24, Y
    4762:	81 fd       	sbrc	r24, 1
    4764:	f6 cf       	rjmp	.-20     	; 0x4752 <waitUntilDone+0xa>
		wdt_reset();
		if (usbIsUp) {
			usbPoll();
		}
	}
}
    4766:	df 91       	pop	r29
    4768:	cf 91       	pop	r28
    476a:	08 95       	ret

0000476c <twi_fw_init>:


void twi_fw_init()
{
	/* power up this module */
	PRR &= ~(_BV(PRTWI));
    476c:	e4 e6       	ldi	r30, 0x64	; 100
    476e:	f0 e0       	ldi	r31, 0x00	; 0
    4770:	80 81       	ld	r24, Z
    4772:	8f 77       	andi	r24, 0x7F	; 127
    4774:	80 83       	st	Z, r24

	uint8_t sreg = SREG;
    4776:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4778:	f8 94       	cli

	// setting IO pins: pull-up on
	TWI_DDR   &= ~((_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM)));	// define SDA and SCL pins as input, as long the TWI alternate port function has not taken over
    477a:	87 b1       	in	r24, 0x07	; 7
    477c:	8f 7c       	andi	r24, 0xCF	; 207
    477e:	87 b9       	out	0x07, r24	; 7
	TWI_PORT  |=   (_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM));		// SDA and SCL pull-up
    4780:	88 b1       	in	r24, 0x08	; 8
    4782:	80 63       	ori	r24, 0x30	; 48
    4784:	88 b9       	out	0x08, r24	; 8

#if 1
	// SCL frequency: using 400 kHz for SCL @20 MHz clock
	TWSR = 0; 							 						// prescaler = 1
    4786:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 17;													// gives 400 kHz @20 MHz clock
    478a:	81 e1       	ldi	r24, 0x11	; 17
    478c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	// needed only when TWI is slave - unused and set to default values
	// TWAR  = 0xfe;
	// TWAMR = 0;

	// TWI interface enabled and interrupt cleared
	TWCR = (_BV(TWINT) | _BV(TWEN));
    4790:	84 e8       	ldi	r24, 0x84	; 132
    4792:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	SREG = sreg;
    4796:	9f bf       	out	0x3f, r25	; 63
    4798:	08 95       	ret

0000479a <twi_fw_close>:
}

void twi_fw_close()
{
	// TWI interface disabled
	TWCR = 0;
    479a:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// setting IO pins: pull-up off
	TWI_PORT  |= ~(_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM));	// SDA and SCL pull-up off
    479e:	88 b1       	in	r24, 0x08	; 8
    47a0:	8f 6c       	ori	r24, 0xCF	; 207
    47a2:	88 b9       	out	0x08, r24	; 8

	/* no more power is needed for this module */
	PRR |= _BV(PRTWI);
    47a4:	e4 e6       	ldi	r30, 0x64	; 100
    47a6:	f0 e0       	ldi	r31, 0x00	; 0
    47a8:	80 81       	ld	r24, Z
    47aa:	80 68       	ori	r24, 0x80	; 128
    47ac:	80 83       	st	Z, r24
    47ae:	08 95       	ret

000047b0 <twi_fw_sendStart>:
	}
}

void twi_fw_sendStart()
{
	if (twiState.doStart && twiSeq2DataCnt) {
    47b0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <twiState>
    47b4:	80 ff       	sbrs	r24, 0
    47b6:	28 c0       	rjmp	.+80     	; 0x4808 <twi_fw_sendStart+0x58>
    47b8:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <twiSeq2DataCnt>
    47bc:	88 23       	and	r24, r24
    47be:	21 f1       	breq	.+72     	; 0x4808 <twi_fw_sendStart+0x58>
		cli();
    47c0:	f8 94       	cli
		twiState.isProcessing	= true;
    47c2:	ed e2       	ldi	r30, 0x2D	; 45
    47c4:	f1 e0       	ldi	r31, 0x01	; 1
    47c6:	80 81       	ld	r24, Z
    47c8:	82 60       	ori	r24, 0x02	; 2
    47ca:	80 83       	st	Z, r24
		twiState.doStart		= false;
    47cc:	80 81       	ld	r24, Z
    47ce:	8e 7f       	andi	r24, 0xFE	; 254
    47d0:	80 83       	st	Z, r24
		twiState.errStart		= false;
    47d2:	80 81       	ld	r24, Z
    47d4:	8f 7d       	andi	r24, 0xDF	; 223
    47d6:	80 83       	st	Z, r24
		twiState.adrAck			= false;
    47d8:	ae e2       	ldi	r26, 0x2E	; 46
    47da:	b1 e0       	ldi	r27, 0x01	; 1
    47dc:	8c 91       	ld	r24, X
    47de:	8d 7f       	andi	r24, 0xFD	; 253
    47e0:	8c 93       	st	X, r24
		twiState.adrAckValid	= false;
    47e2:	8c 91       	ld	r24, X
    47e4:	8e 7f       	andi	r24, 0xFE	; 254
    47e6:	8c 93       	st	X, r24
		twiState.dataAck		= false;
    47e8:	8c 91       	ld	r24, X
    47ea:	87 7f       	andi	r24, 0xF7	; 247
    47ec:	8c 93       	st	X, r24
		twiState.dataAckValid	= false;
    47ee:	8c 91       	ld	r24, X
    47f0:	8b 7f       	andi	r24, 0xFB	; 251
    47f2:	8c 93       	st	X, r24
		twiSeq2DataIdx			= 0;
    47f4:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <twiSeq2DataIdx>

		/* send START */
		TWCR = (_BV(TWINT) | _BV(TWSTA) | _BV(TWEN) | _BV(TWIE));		// start-TWI/rise clock, send START, TWI enabled, TWINT-Interrupt enabled
    47f8:	85 ea       	ldi	r24, 0xA5	; 165
    47fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

		/* next state */
		twiState.state = TWI_STATE_START_SENT;
    47fe:	80 81       	ld	r24, Z
    4800:	83 7e       	andi	r24, 0xE3	; 227
    4802:	84 60       	ori	r24, 0x04	; 4
    4804:	80 83       	st	Z, r24

		sei();
    4806:	78 94       	sei
    4808:	08 95       	ret

0000480a <twi_fw_sendCmdSendData1>:
	PRR |= _BV(PRTWI);
}


uint8_t twi_fw_sendCmdSendData1(uint8_t addr, uint8_t cmd, uint8_t data1)
{
    480a:	1f 93       	push	r17
    480c:	cf 93       	push	r28
    480e:	df 93       	push	r29
    4810:	c8 2f       	mov	r28, r24
    4812:	16 2f       	mov	r17, r22
    4814:	d4 2f       	mov	r29, r20
	waitUntilDone();
    4816:	0e 94 a4 23 	call	0x4748	; 0x4748 <waitUntilDone>

	cli();
    481a:	f8 94       	cli
	twiSeq1Adr = (addr << 1);
    481c:	cc 0f       	add	r28, r28
    481e:	c0 93 ff 04 	sts	0x04FF, r28	; 0x8004ff <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    4822:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    4826:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <twiSeq2DataCnt>
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	8e 0f       	add	r24, r30
    482e:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <twiSeq2DataCnt>
    4832:	f0 e0       	ldi	r31, 0x00	; 0
    4834:	e7 5d       	subi	r30, 0xD7	; 215
    4836:	fe 4f       	sbci	r31, 0xFE	; 254
    4838:	10 83       	st	Z, r17
	twiSeq2Data[twiSeq2DataCnt++] = data1;
    483a:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <twiSeq2DataCnt>
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	8e 0f       	add	r24, r30
    4842:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <twiSeq2DataCnt>
    4846:	f0 e0       	ldi	r31, 0x00	; 0
    4848:	e7 5d       	subi	r30, 0xD7	; 215
    484a:	fe 4f       	sbci	r31, 0xFE	; 254
    484c:	d0 83       	st	Z, r29
	twiState.doStart = true;
    484e:	ed e2       	ldi	r30, 0x2D	; 45
    4850:	f1 e0       	ldi	r31, 0x01	; 1
    4852:	80 81       	ld	r24, Z
    4854:	81 60       	ori	r24, 0x01	; 1
    4856:	80 83       	st	Z, r24
	twi_fw_sendStart();
    4858:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <twi_fw_sendStart>
	return twiState.dataAck;
    485c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <twiState+0x1>
}
    4860:	83 fb       	bst	r24, 3
    4862:	88 27       	eor	r24, r24
    4864:	80 f9       	bld	r24, 0
    4866:	df 91       	pop	r29
    4868:	cf 91       	pop	r28
    486a:	1f 91       	pop	r17
    486c:	08 95       	ret

0000486e <twi_fw_sendCmdSendData1SendData2>:

uint8_t twi_fw_sendCmdSendData1SendData2(uint8_t addr, uint8_t cmd, uint8_t data1, uint8_t data2)
{
    486e:	0f 93       	push	r16
    4870:	1f 93       	push	r17
    4872:	cf 93       	push	r28
    4874:	df 93       	push	r29
    4876:	c8 2f       	mov	r28, r24
    4878:	06 2f       	mov	r16, r22
    487a:	14 2f       	mov	r17, r20
    487c:	d2 2f       	mov	r29, r18
	waitUntilDone();
    487e:	0e 94 a4 23 	call	0x4748	; 0x4748 <waitUntilDone>

	cli();
    4882:	f8 94       	cli
	twiSeq1Adr = (addr << 1);
    4884:	cc 0f       	add	r28, r28
    4886:	c0 93 ff 04 	sts	0x04FF, r28	; 0x8004ff <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    488a:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    488e:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <twiSeq2DataCnt>
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	8e 0f       	add	r24, r30
    4896:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <twiSeq2DataCnt>
    489a:	f0 e0       	ldi	r31, 0x00	; 0
    489c:	e7 5d       	subi	r30, 0xD7	; 215
    489e:	fe 4f       	sbci	r31, 0xFE	; 254
    48a0:	00 83       	st	Z, r16
	twiSeq2Data[twiSeq2DataCnt++] = data1;
    48a2:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <twiSeq2DataCnt>
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	8e 0f       	add	r24, r30
    48aa:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <twiSeq2DataCnt>
    48ae:	f0 e0       	ldi	r31, 0x00	; 0
    48b0:	e7 5d       	subi	r30, 0xD7	; 215
    48b2:	fe 4f       	sbci	r31, 0xFE	; 254
    48b4:	10 83       	st	Z, r17
	twiSeq2Data[twiSeq2DataCnt++] = data2;
    48b6:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <twiSeq2DataCnt>
    48ba:	81 e0       	ldi	r24, 0x01	; 1
    48bc:	8e 0f       	add	r24, r30
    48be:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <twiSeq2DataCnt>
    48c2:	f0 e0       	ldi	r31, 0x00	; 0
    48c4:	e7 5d       	subi	r30, 0xD7	; 215
    48c6:	fe 4f       	sbci	r31, 0xFE	; 254
    48c8:	d0 83       	st	Z, r29
	twiState.doStart = true;
    48ca:	ed e2       	ldi	r30, 0x2D	; 45
    48cc:	f1 e0       	ldi	r31, 0x01	; 1
    48ce:	80 81       	ld	r24, Z
    48d0:	81 60       	ori	r24, 0x01	; 1
    48d2:	80 83       	st	Z, r24
	twi_fw_sendStart();
    48d4:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <twi_fw_sendStart>
	return twiState.dataAck;
    48d8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <twiState+0x1>
}
    48dc:	83 fb       	bst	r24, 3
    48de:	88 27       	eor	r24, r24
    48e0:	80 f9       	bld	r24, 0
    48e2:	df 91       	pop	r29
    48e4:	cf 91       	pop	r28
    48e6:	1f 91       	pop	r17
    48e8:	0f 91       	pop	r16
    48ea:	08 95       	ret

000048ec <twi_fw_sendCmdReadData1>:

uint8_t twi_fw_sendCmdReadData1(uint8_t addr, uint8_t cmd)
{
    48ec:	cf 93       	push	r28
    48ee:	df 93       	push	r29
    48f0:	c8 2f       	mov	r28, r24
    48f2:	d6 2f       	mov	r29, r22
	waitUntilDone();
    48f4:	0e 94 a4 23 	call	0x4748	; 0x4748 <waitUntilDone>

	cli();
    48f8:	f8 94       	cli
	twiSeq1Adr = (addr << 1);
    48fa:	8c 2f       	mov	r24, r28
    48fc:	88 0f       	add	r24, r24
    48fe:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    4902:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    4906:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <twiSeq2DataCnt>
    490a:	81 e0       	ldi	r24, 0x01	; 1
    490c:	8e 0f       	add	r24, r30
    490e:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <twiSeq2DataCnt>
    4912:	f0 e0       	ldi	r31, 0x00	; 0
    4914:	e7 5d       	subi	r30, 0xD7	; 215
    4916:	fe 4f       	sbci	r31, 0xFE	; 254
    4918:	d0 83       	st	Z, r29
	twiState.doStart = true;
    491a:	ed e2       	ldi	r30, 0x2D	; 45
    491c:	f1 e0       	ldi	r31, 0x01	; 1
    491e:	80 81       	ld	r24, Z
    4920:	81 60       	ori	r24, 0x01	; 1
    4922:	80 83       	st	Z, r24
	twi_fw_sendStart();
    4924:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <twi_fw_sendStart>

	waitUntilDone();
    4928:	0e 94 a4 23 	call	0x4748	; 0x4748 <waitUntilDone>
	if (twiState.adrAck) {
    492c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <twiState+0x1>
    4930:	81 ff       	sbrs	r24, 1
    4932:	22 c0       	rjmp	.+68     	; 0x4978 <twi_fw_sendCmdReadData1+0x8c>
		main_bf.mainIsLcdAttached = true;
    4934:	e0 e0       	ldi	r30, 0x00	; 0
    4936:	f1 e0       	ldi	r31, 0x01	; 1
    4938:	80 81       	ld	r24, Z
    493a:	80 68       	ori	r24, 0x80	; 128
    493c:	80 83       	st	Z, r24
		cli();
    493e:	f8 94       	cli
		twiSeq1Adr = ((addr << 1) | 1);
    4940:	cc 0f       	add	r28, r28
    4942:	c1 60       	ori	r28, 0x01	; 1
    4944:	c0 93 ff 04 	sts	0x04FF, r28	; 0x8004ff <twiSeq1Adr>
		twiSeq2DataCnt = 0;
    4948:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <twiSeq2DataCnt>
		twiSeq2Data[twiSeq2DataCnt++] = 0;
    494c:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <twiSeq2DataCnt>
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	8e 0f       	add	r24, r30
    4954:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <twiSeq2DataCnt>
    4958:	f0 e0       	ldi	r31, 0x00	; 0
    495a:	e7 5d       	subi	r30, 0xD7	; 215
    495c:	fe 4f       	sbci	r31, 0xFE	; 254
    495e:	10 82       	st	Z, r1
		twiState.doStart = true;
    4960:	ed e2       	ldi	r30, 0x2D	; 45
    4962:	f1 e0       	ldi	r31, 0x01	; 1
    4964:	80 81       	ld	r24, Z
    4966:	81 60       	ori	r24, 0x01	; 1
    4968:	80 83       	st	Z, r24
		twi_fw_sendStart();
    496a:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <twi_fw_sendStart>
		waitUntilDone();
    496e:	0e 94 a4 23 	call	0x4748	; 0x4748 <waitUntilDone>
		return twiSeq2Data[0];
    4972:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <twiSeq2Data>
    4976:	01 c0       	rjmp	.+2      	; 0x497a <twi_fw_sendCmdReadData1+0x8e>

	} else {
		//main_bf.mainIsLcdAttached = false;
		return 0;
    4978:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    497a:	df 91       	pop	r29
    497c:	cf 91       	pop	r28
    497e:	08 95       	ret

00004980 <isr_sendStop>:
	}
}

void isr_sendStop(uint8_t sendStopSignal)
{
	cli();
    4980:	f8 94       	cli

	twiSeq2DataCnt = 0;
    4982:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <twiSeq2DataCnt>

	if (sendStopSignal) {
    4986:	88 23       	and	r24, r24
    4988:	19 f0       	breq	.+6      	; 0x4990 <isr_sendStop+0x10>
		/* send stop */
		TWCR = (_BV(TWINT) | _BV(TWSTO) | _BV(TWEN));  		// no interrupt enable (TWIE)
    498a:	84 e9       	ldi	r24, 0x94	; 148
    498c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}

	/* next state */
	twiState.isProcessing = false;
    4990:	ed e2       	ldi	r30, 0x2D	; 45
    4992:	f1 e0       	ldi	r31, 0x01	; 1
    4994:	80 81       	ld	r24, Z
    4996:	8d 7f       	andi	r24, 0xFD	; 253
    4998:	80 83       	st	Z, r24
	twiState.state = TWI_STATE_READY;
    499a:	80 81       	ld	r24, Z
    499c:	83 7e       	andi	r24, 0xE3	; 227
    499e:	80 83       	st	Z, r24

	sei();
    49a0:	78 94       	sei
    49a2:	08 95       	ret

000049a4 <__vector_24>:
 *
 * = 35 clocks --> 1.75 µs until sei() is done
 */
//void twi_ISR_TWI(void) - __vector_24
ISR(TWI_vect, ISR_BLOCK)
{
    49a4:	1f 92       	push	r1
    49a6:	0f 92       	push	r0
    49a8:	0f b6       	in	r0, 0x3f	; 63
    49aa:	0f 92       	push	r0
    49ac:	11 24       	eor	r1, r1
    49ae:	2f 93       	push	r18
    49b0:	3f 93       	push	r19
    49b2:	4f 93       	push	r20
    49b4:	5f 93       	push	r21
    49b6:	6f 93       	push	r22
    49b8:	7f 93       	push	r23
    49ba:	8f 93       	push	r24
    49bc:	9f 93       	push	r25
    49be:	af 93       	push	r26
    49c0:	bf 93       	push	r27
    49c2:	ef 93       	push	r30
    49c4:	ff 93       	push	r31
	/* read the data byte received */
	uint8_t localTwsrState = TWSR & TWI_TWSR_STATE_MASK;
    49c6:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    49ca:	32 2f       	mov	r19, r18
    49cc:	38 7f       	andi	r19, 0xF8	; 248

	switch(twiState.state) {
    49ce:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <twiState>
    49d2:	86 95       	lsr	r24
    49d4:	86 95       	lsr	r24
    49d6:	87 70       	andi	r24, 0x07	; 7
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	83 30       	cpi	r24, 0x03	; 3
    49dc:	91 05       	cpc	r25, r1
    49de:	b1 f1       	breq	.+108    	; 0x4a4c <__vector_24+0xa8>
    49e0:	1c f4       	brge	.+6      	; 0x49e8 <__vector_24+0x44>
    49e2:	01 97       	sbiw	r24, 0x01	; 1
    49e4:	4c f4       	brge	.+18     	; 0x49f8 <__vector_24+0x54>
    49e6:	ea c0       	rjmp	.+468    	; 0x4bbc <__vector_24+0x218>
    49e8:	84 30       	cpi	r24, 0x04	; 4
    49ea:	91 05       	cpc	r25, r1
    49ec:	09 f4       	brne	.+2      	; 0x49f0 <__vector_24+0x4c>
    49ee:	73 c0       	rjmp	.+230    	; 0x4ad6 <__vector_24+0x132>
    49f0:	05 97       	sbiw	r24, 0x05	; 5
    49f2:	09 f4       	brne	.+2      	; 0x49f6 <__vector_24+0x52>
    49f4:	a8 c0       	rjmp	.+336    	; 0x4b46 <__vector_24+0x1a2>
    49f6:	e2 c0       	rjmp	.+452    	; 0x4bbc <__vector_24+0x218>
	case TWI_STATE_START_SENT:
	case TWI_STATE_REPEATEDSTART_SENT:
		if (((twiState.state == TWI_STATE_START_SENT) && (localTwsrState == TWI_TWSR_START)) ||
    49f8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <twiState>
    49fc:	86 95       	lsr	r24
    49fe:	86 95       	lsr	r24
    4a00:	87 70       	andi	r24, 0x07	; 7
    4a02:	81 30       	cpi	r24, 0x01	; 1
    4a04:	11 f4       	brne	.+4      	; 0x4a0a <__vector_24+0x66>
    4a06:	38 30       	cpi	r19, 0x08	; 8
    4a08:	49 f0       	breq	.+18     	; 0x4a1c <__vector_24+0x78>
			((twiState.state == TWI_STATE_REPEATEDSTART_SENT) && (localTwsrState == TWI_TWSR_REPEATEDSTART))) {
    4a0a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <twiState>
    4a0e:	86 95       	lsr	r24
    4a10:	86 95       	lsr	r24
    4a12:	87 70       	andi	r24, 0x07	; 7
	uint8_t localTwsrState = TWSR & TWI_TWSR_STATE_MASK;

	switch(twiState.state) {
	case TWI_STATE_START_SENT:
	case TWI_STATE_REPEATEDSTART_SENT:
		if (((twiState.state == TWI_STATE_START_SENT) && (localTwsrState == TWI_TWSR_START)) ||
    4a14:	82 30       	cpi	r24, 0x02	; 2
    4a16:	89 f4       	brne	.+34     	; 0x4a3a <__vector_24+0x96>
			((twiState.state == TWI_STATE_REPEATEDSTART_SENT) && (localTwsrState == TWI_TWSR_REPEATEDSTART))) {
    4a18:	30 31       	cpi	r19, 0x10	; 16
    4a1a:	79 f4       	brne	.+30     	; 0x4a3a <__vector_24+0x96>
			/* MASTER: send SLA - slave address */
			TWDR = twiSeq1Adr;  							// I2C device address - write or read mode depends on (twiSeq1Adr & 0x01);
    4a1c:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <twiSeq1Adr>
    4a20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWIE));
    4a24:	85 e8       	ldi	r24, 0x85	; 133
    4a26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

			/* next state */
			twiState.state = TWI_STATE_ADR_SENT;
    4a2a:	ed e2       	ldi	r30, 0x2D	; 45
    4a2c:	f1 e0       	ldi	r31, 0x01	; 1
    4a2e:	80 81       	ld	r24, Z
    4a30:	83 7e       	andi	r24, 0xE3	; 227
    4a32:	8c 60       	ori	r24, 0x0C	; 12
    4a34:	80 83       	st	Z, r24
			sei();
    4a36:	78 94       	sei
    4a38:	c4 c0       	rjmp	.+392    	; 0x4bc2 <__vector_24+0x21e>

		} else {
			twiState.errStart = true;
    4a3a:	ed e2       	ldi	r30, 0x2D	; 45
    4a3c:	f1 e0       	ldi	r31, 0x01	; 1
    4a3e:	80 81       	ld	r24, Z
    4a40:	80 62       	ori	r24, 0x20	; 32
    4a42:	80 83       	st	Z, r24
			isr_sendStop(true);
    4a44:	81 e0       	ldi	r24, 0x01	; 1
    4a46:	0e 94 c0 24 	call	0x4980	; 0x4980 <isr_sendStop>
    4a4a:	bb c0       	rjmp	.+374    	; 0x4bc2 <__vector_24+0x21e>
		}
		break;

	case TWI_STATE_ADR_SENT:
		if (localTwsrState == TWI_TWSR_M_SLAW_ADDR_ACK) {
    4a4c:	38 31       	cpi	r19, 0x18	; 24
    4a4e:	11 f5       	brne	.+68     	; 0x4a94 <__vector_24+0xf0>
			twiState.adrAck			= true;
    4a50:	ee e2       	ldi	r30, 0x2E	; 46
    4a52:	f1 e0       	ldi	r31, 0x01	; 1
    4a54:	80 81       	ld	r24, Z
    4a56:	82 60       	ori	r24, 0x02	; 2
    4a58:	80 83       	st	Z, r24
			twiState.adrAckValid	= true;
    4a5a:	80 81       	ld	r24, Z
    4a5c:	81 60       	ori	r24, 0x01	; 1
    4a5e:	80 83       	st	Z, r24

			if (twiSeq2DataCnt <= 1) {
    4a60:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <twiSeq2DataCnt>
    4a64:	82 30       	cpi	r24, 0x02	; 2
    4a66:	38 f4       	brcc	.+14     	; 0x4a76 <__vector_24+0xd2>
				/* next state */
				twiState.state = TWI_STATE_STOP;
    4a68:	ed e2       	ldi	r30, 0x2D	; 45
    4a6a:	f1 e0       	ldi	r31, 0x01	; 1
    4a6c:	80 81       	ld	r24, Z
    4a6e:	83 7e       	andi	r24, 0xE3	; 227
    4a70:	88 61       	ori	r24, 0x18	; 24
    4a72:	80 83       	st	Z, r24
    4a74:	06 c0       	rjmp	.+12     	; 0x4a82 <__vector_24+0xde>

			} else {
				/* next state */
				twiState.state = TWI_STATE_DATA_SENT;
    4a76:	ed e2       	ldi	r30, 0x2D	; 45
    4a78:	f1 e0       	ldi	r31, 0x01	; 1
    4a7a:	80 81       	ld	r24, Z
    4a7c:	83 7e       	andi	r24, 0xE3	; 227
    4a7e:	80 61       	ori	r24, 0x10	; 16
    4a80:	80 83       	st	Z, r24
			}

			/* send command data */
			TWDR = twiSeq2Data[0];							// internal command or address register of the I2C device
    4a82:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <twiSeq2Data>
    4a86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWIE));
    4a8a:	85 e8       	ldi	r24, 0x85	; 133
    4a8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			sei();
    4a90:	78 94       	sei
    4a92:	97 c0       	rjmp	.+302    	; 0x4bc2 <__vector_24+0x21e>

		} else if (localTwsrState == TWI_TWSR_M_SLAR_ADDR_ACK)  {
    4a94:	30 34       	cpi	r19, 0x40	; 64
    4a96:	99 f4       	brne	.+38     	; 0x4abe <__vector_24+0x11a>
			twiState.adrAck			= true;
    4a98:	ee e2       	ldi	r30, 0x2E	; 46
    4a9a:	f1 e0       	ldi	r31, 0x01	; 1
    4a9c:	80 81       	ld	r24, Z
    4a9e:	82 60       	ori	r24, 0x02	; 2
    4aa0:	80 83       	st	Z, r24
			twiState.adrAckValid	= true;
    4aa2:	80 81       	ld	r24, Z
    4aa4:	81 60       	ori	r24, 0x01	; 1
    4aa6:	80 83       	st	Z, r24

			/* no data transfer */

			/* next state */
			twiState.state = TWI_STATE_DATA_RCVD;
    4aa8:	ed e2       	ldi	r30, 0x2D	; 45
    4aaa:	f1 e0       	ldi	r31, 0x01	; 1
    4aac:	80 81       	ld	r24, Z
    4aae:	83 7e       	andi	r24, 0xE3	; 227
    4ab0:	84 61       	ori	r24, 0x14	; 20
    4ab2:	80 83       	st	Z, r24

			TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWIE));
    4ab4:	85 e8       	ldi	r24, 0x85	; 133
    4ab6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			sei();
    4aba:	78 94       	sei
    4abc:	82 c0       	rjmp	.+260    	; 0x4bc2 <__vector_24+0x21e>

		} else {
			twiState.adrAck			= false;
    4abe:	ee e2       	ldi	r30, 0x2E	; 46
    4ac0:	f1 e0       	ldi	r31, 0x01	; 1
    4ac2:	80 81       	ld	r24, Z
    4ac4:	8d 7f       	andi	r24, 0xFD	; 253
    4ac6:	80 83       	st	Z, r24
			twiState.adrAckValid	= true;
    4ac8:	80 81       	ld	r24, Z
    4aca:	81 60       	ori	r24, 0x01	; 1
    4acc:	80 83       	st	Z, r24
			isr_sendStop(true);
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	0e 94 c0 24 	call	0x4980	; 0x4980 <isr_sendStop>
    4ad4:	76 c0       	rjmp	.+236    	; 0x4bc2 <__vector_24+0x21e>
		}
		break;

	case TWI_STATE_DATA_SENT:
		if (localTwsrState == TWI_TWSR_M_SLAW_DATA_ACK) {
    4ad6:	38 32       	cpi	r19, 0x28	; 40
    4ad8:	51 f5       	brne	.+84     	; 0x4b2e <__vector_24+0x18a>
			++twiSeq2DataIdx;
    4ada:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <twiSeq2DataIdx>
    4ade:	8f 5f       	subi	r24, 0xFF	; 255
    4ae0:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <twiSeq2DataIdx>
			twiState.dataAck		= true;
    4ae4:	ee e2       	ldi	r30, 0x2E	; 46
    4ae6:	f1 e0       	ldi	r31, 0x01	; 1
    4ae8:	80 81       	ld	r24, Z
    4aea:	88 60       	ori	r24, 0x08	; 8
    4aec:	80 83       	st	Z, r24
			twiState.dataAckValid	= true;
    4aee:	80 81       	ld	r24, Z
    4af0:	84 60       	ori	r24, 0x04	; 4
    4af2:	80 83       	st	Z, r24

			if ((twiSeq2DataIdx + 1) >= twiSeq2DataCnt) {
    4af4:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <twiSeq2DataIdx>
    4af8:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <twiSeq2DataCnt>
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	01 96       	adiw	r24, 0x01	; 1
    4b00:	30 e0       	ldi	r19, 0x00	; 0
    4b02:	82 17       	cp	r24, r18
    4b04:	93 07       	cpc	r25, r19
    4b06:	34 f0       	brlt	.+12     	; 0x4b14 <__vector_24+0x170>
				/* next state */
				twiState.state = TWI_STATE_STOP;
    4b08:	ed e2       	ldi	r30, 0x2D	; 45
    4b0a:	f1 e0       	ldi	r31, 0x01	; 1
    4b0c:	80 81       	ld	r24, Z
    4b0e:	83 7e       	andi	r24, 0xE3	; 227
    4b10:	88 61       	ori	r24, 0x18	; 24
    4b12:	80 83       	st	Z, r24
				/* next state */
//				twiState.state = TWI_STATE_DATA_SENT;
			}

			/* send data */
			TWDR = twiSeq2Data[twiSeq2DataIdx];
    4b14:	e0 91 fd 04 	lds	r30, 0x04FD	; 0x8004fd <twiSeq2DataIdx>
    4b18:	f0 e0       	ldi	r31, 0x00	; 0
    4b1a:	e7 5d       	subi	r30, 0xD7	; 215
    4b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    4b1e:	80 81       	ld	r24, Z
    4b20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

			TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWIE));
    4b24:	85 e8       	ldi	r24, 0x85	; 133
    4b26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			sei();
    4b2a:	78 94       	sei
    4b2c:	4a c0       	rjmp	.+148    	; 0x4bc2 <__vector_24+0x21e>

		} else {
			twiState.dataAck		= false;
    4b2e:	ee e2       	ldi	r30, 0x2E	; 46
    4b30:	f1 e0       	ldi	r31, 0x01	; 1
    4b32:	80 81       	ld	r24, Z
    4b34:	87 7f       	andi	r24, 0xF7	; 247
    4b36:	80 83       	st	Z, r24
			twiState.dataAckValid	= true;
    4b38:	80 81       	ld	r24, Z
    4b3a:	84 60       	ori	r24, 0x04	; 4
    4b3c:	80 83       	st	Z, r24
			isr_sendStop(true);
    4b3e:	81 e0       	ldi	r24, 0x01	; 1
    4b40:	0e 94 c0 24 	call	0x4980	; 0x4980 <isr_sendStop>
    4b44:	3e c0       	rjmp	.+124    	; 0x4bc2 <__vector_24+0x21e>
		}
		break;

	case TWI_STATE_DATA_RCVD:
		if ((localTwsrState == TWI_TWSR_M_SLAR_DATA_ACK) ||
    4b46:	20 7f       	andi	r18, 0xF0	; 240
    4b48:	20 35       	cpi	r18, 0x50	; 80
    4b4a:	31 f5       	brne	.+76     	; 0x4b98 <__vector_24+0x1f4>
			(localTwsrState == TWI_TWSR_M_SLAR_DATA_NACK)) {
			/* receive data */
			twiSeq2Data[twiSeq2DataIdx++]	= TWDR;
    4b4c:	e0 91 fd 04 	lds	r30, 0x04FD	; 0x8004fd <twiSeq2DataIdx>
    4b50:	81 e0       	ldi	r24, 0x01	; 1
    4b52:	8e 0f       	add	r24, r30
    4b54:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <twiSeq2DataIdx>
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4b5e:	e7 5d       	subi	r30, 0xD7	; 215
    4b60:	fe 4f       	sbci	r31, 0xFE	; 254
    4b62:	80 83       	st	Z, r24
			twiState.dataAck				= true;
    4b64:	ee e2       	ldi	r30, 0x2E	; 46
    4b66:	f1 e0       	ldi	r31, 0x01	; 1
    4b68:	80 81       	ld	r24, Z
    4b6a:	88 60       	ori	r24, 0x08	; 8
    4b6c:	80 83       	st	Z, r24
			twiState.dataAckValid			= true;
    4b6e:	80 81       	ld	r24, Z
    4b70:	84 60       	ori	r24, 0x04	; 4
    4b72:	80 83       	st	Z, r24

			if (twiSeq2DataIdx >= twiSeq2DataCnt) {
    4b74:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <twiSeq2DataIdx>
    4b78:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <twiSeq2DataCnt>
    4b7c:	98 17       	cp	r25, r24
    4b7e:	38 f0       	brcs	.+14     	; 0x4b8e <__vector_24+0x1ea>
				/* next state */
				isr_sendStop(false);
    4b80:	80 e0       	ldi	r24, 0x00	; 0
    4b82:	0e 94 c0 24 	call	0x4980	; 0x4980 <isr_sendStop>

				TWCR = (_BV(TWINT) | _BV(TWSTO) | _BV(TWEN) | _BV(TWIE));	// do not acknowledge
    4b86:	85 e9       	ldi	r24, 0x95	; 149
    4b88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4b8c:	03 c0       	rjmp	.+6      	; 0x4b94 <__vector_24+0x1f0>

			} else {
				/* next state */
//				twiState.state = TWI_STATE_DATA_RCVD;

				TWCR = (_BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE));  	// acknowledge to get next data
    4b8e:	85 ec       	ldi	r24, 0xC5	; 197
    4b90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			}
			sei();
    4b94:	78 94       	sei
    4b96:	15 c0       	rjmp	.+42     	; 0x4bc2 <__vector_24+0x21e>

		} else {
			twiSeq2Data[twiSeq2DataIdx] = localTwsrState;			// TODO remove me !
    4b98:	e0 91 fd 04 	lds	r30, 0x04FD	; 0x8004fd <twiSeq2DataIdx>
    4b9c:	f0 e0       	ldi	r31, 0x00	; 0
    4b9e:	e7 5d       	subi	r30, 0xD7	; 215
    4ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba2:	30 83       	st	Z, r19
			twiState.dataAck			= false;
    4ba4:	ee e2       	ldi	r30, 0x2E	; 46
    4ba6:	f1 e0       	ldi	r31, 0x01	; 1
    4ba8:	80 81       	ld	r24, Z
    4baa:	87 7f       	andi	r24, 0xF7	; 247
    4bac:	80 83       	st	Z, r24
			twiState.dataAckValid		= true;
    4bae:	80 81       	ld	r24, Z
    4bb0:	84 60       	ori	r24, 0x04	; 4
    4bb2:	80 83       	st	Z, r24
			isr_sendStop(true);
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	0e 94 c0 24 	call	0x4980	; 0x4980 <isr_sendStop>
    4bba:	03 c0       	rjmp	.+6      	; 0x4bc2 <__vector_24+0x21e>
		}
		break;

	default:
	case TWI_STATE_STOP:
		isr_sendStop(true);
    4bbc:	81 e0       	ldi	r24, 0x01	; 1
    4bbe:	0e 94 c0 24 	call	0x4980	; 0x4980 <isr_sendStop>
		break;
	}
}
    4bc2:	ff 91       	pop	r31
    4bc4:	ef 91       	pop	r30
    4bc6:	bf 91       	pop	r27
    4bc8:	af 91       	pop	r26
    4bca:	9f 91       	pop	r25
    4bcc:	8f 91       	pop	r24
    4bce:	7f 91       	pop	r23
    4bd0:	6f 91       	pop	r22
    4bd2:	5f 91       	pop	r21
    4bd4:	4f 91       	pop	r20
    4bd6:	3f 91       	pop	r19
    4bd8:	2f 91       	pop	r18
    4bda:	0f 90       	pop	r0
    4bdc:	0f be       	out	0x3f, r0	; 63
    4bde:	0f 90       	pop	r0
    4be0:	1f 90       	pop	r1
    4be2:	18 95       	reti

00004be4 <twi_mcp23017_fw_init>:
	uint8_t clr_data = 0x00;  // clear data
	uint8_t set_data = 0xff;  // set data
	uint8_t conData = _BV(IOCON_SEQOP) | _BV(IOCON_ODR);  // BANK=0, no MIRROR, BYTE mode, do not overwrite INT bits (ODR),

	/* IOCON */
	(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IOCON, conData);
    4be4:	44 e2       	ldi	r20, 0x24	; 36
    4be6:	6a e0       	ldi	r22, 0x0A	; 10
    4be8:	80 e2       	ldi	r24, 0x20	; 32
    4bea:	0e 94 05 24 	call	0x480a	; 0x480a <twi_fw_sendCmdSendData1>


	/* GPIO */

	/* GPPU */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPPUA, set_data, set_data);  // pull up all GPIO bits - setting port-A and port-B
    4bee:	2f ef       	ldi	r18, 0xFF	; 255
    4bf0:	4f ef       	ldi	r20, 0xFF	; 255
    4bf2:	6c e0       	ldi	r22, 0x0C	; 12
    4bf4:	80 e2       	ldi	r24, 0x20	; 32
    4bf6:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>

	/* IODIR */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data, clr_data);  // 0=output / 1=input - setting port-A and port-B
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	4f ef       	ldi	r20, 0xFF	; 255
    4bfe:	60 e0       	ldi	r22, 0x00	; 0
    4c00:	80 e2       	ldi	r24, 0x20	; 32
    4c02:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>

	/* IPOL */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IPOLA, clr_data, clr_data);  // no pin inversion - setting port-A and port-B
    4c06:	20 e0       	ldi	r18, 0x00	; 0
    4c08:	40 e0       	ldi	r20, 0x00	; 0
    4c0a:	62 e0       	ldi	r22, 0x02	; 2
    4c0c:	80 e2       	ldi	r24, 0x20	; 32
    4c0e:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>

	/* GPIO */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPIOA, clr_data, clr_data);  // all data out cleared - setting port-A and port-B
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	40 e0       	ldi	r20, 0x00	; 0
    4c16:	62 e1       	ldi	r22, 0x12	; 18
    4c18:	80 e2       	ldi	r24, 0x20	; 32
    4c1a:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>

	/* OLAT */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATA, clr_data, clr_data);  // all data cleared - setting port-A and port-B
    4c1e:	20 e0       	ldi	r18, 0x00	; 0
    4c20:	40 e0       	ldi	r20, 0x00	; 0
    4c22:	64 e1       	ldi	r22, 0x14	; 20
    4c24:	80 e2       	ldi	r24, 0x20	; 32
    4c26:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>


	/* INTERRUPTS */

	/* GPINTEN */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPINTENA, clr_data, clr_data);  // no INT used - setting port-A and port-B
    4c2a:	20 e0       	ldi	r18, 0x00	; 0
    4c2c:	40 e0       	ldi	r20, 0x00	; 0
    4c2e:	64 e0       	ldi	r22, 0x04	; 4
    4c30:	80 e2       	ldi	r24, 0x20	; 32
    4c32:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>

	/* DEFVAL */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_DEFVALA, clr_data, clr_data);  // unused - setting port-A and port-B
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	40 e0       	ldi	r20, 0x00	; 0
    4c3a:	66 e0       	ldi	r22, 0x06	; 6
    4c3c:	80 e2       	ldi	r24, 0x20	; 32
    4c3e:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>

	/* INTCON */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_INTCONA, set_data, set_data);  // unused - setting port-A and port-B
    4c42:	2f ef       	ldi	r18, 0xFF	; 255
    4c44:	4f ef       	ldi	r20, 0xFF	; 255
    4c46:	68 e0       	ldi	r22, 0x08	; 8
    4c48:	80 e2       	ldi	r24, 0x20	; 32
    4c4a:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>
    4c4e:	08 95       	ret

00004c50 <twi_mcp23017_fw_close>:
	uint8_t set_data = 0xff;  // set data

	/* INTERRUPTS */

	/* GPINTEN */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPINTENA, clr_data, clr_data);  // no INT enable - setting port-A and port-B
    4c50:	20 e0       	ldi	r18, 0x00	; 0
    4c52:	40 e0       	ldi	r20, 0x00	; 0
    4c54:	64 e0       	ldi	r22, 0x04	; 4
    4c56:	80 e2       	ldi	r24, 0x20	; 32
    4c58:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>


	/* GPIO */

	/* GPPU */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPPUA, set_data, set_data);  // setting port-A and port-B
    4c5c:	2f ef       	ldi	r18, 0xFF	; 255
    4c5e:	4f ef       	ldi	r20, 0xFF	; 255
    4c60:	6c e0       	ldi	r22, 0x0C	; 12
    4c62:	80 e2       	ldi	r24, 0x20	; 32
    4c64:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>

	/* IODIR */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data, set_data);  // setting port-A and port-B
    4c68:	2f ef       	ldi	r18, 0xFF	; 255
    4c6a:	4f ef       	ldi	r20, 0xFF	; 255
    4c6c:	60 e0       	ldi	r22, 0x00	; 0
    4c6e:	80 e2       	ldi	r24, 0x20	; 32
    4c70:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>
    4c74:	08 95       	ret

00004c76 <twi_mcp23017_fw_setPortA_DirOut>:
void twi_mcp23017_fw_setPortA_DirOut(uint8_t isOut)
{
	uint8_t clr_data = 0x00;  // clear data
	uint8_t set_data = 0xff;  // set data

	if (isOut) {
    4c76:	88 23       	and	r24, r24
    4c78:	31 f0       	breq	.+12     	; 0x4c86 <twi_mcp23017_fw_setPortA_DirOut+0x10>
		(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, clr_data);  // 0=output - setting port-A
    4c7a:	40 e0       	ldi	r20, 0x00	; 0
    4c7c:	60 e0       	ldi	r22, 0x00	; 0
    4c7e:	80 e2       	ldi	r24, 0x20	; 32
    4c80:	0e 94 05 24 	call	0x480a	; 0x480a <twi_fw_sendCmdSendData1>
    4c84:	08 95       	ret

	} else {
		(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data);  // 1=input  - setting port-A
    4c86:	4f ef       	ldi	r20, 0xFF	; 255
    4c88:	60 e0       	ldi	r22, 0x00	; 0
    4c8a:	80 e2       	ldi	r24, 0x20	; 32
    4c8c:	0e 94 05 24 	call	0x480a	; 0x480a <twi_fw_sendCmdSendData1>
    4c90:	08 95       	ret

00004c92 <twi_mcp23017_fw_setPortB>:
	}
}

void twi_mcp23017_fw_setPortB(uint8_t portB)
{
	(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATB, portB);
    4c92:	48 2f       	mov	r20, r24
    4c94:	65 e1       	ldi	r22, 0x15	; 21
    4c96:	80 e2       	ldi	r24, 0x20	; 32
    4c98:	0e 94 05 24 	call	0x480a	; 0x480a <twi_fw_sendCmdSendData1>
    4c9c:	08 95       	ret

00004c9e <twi_mcp23017_fw_setPortBA>:
}

void twi_mcp23017_fw_setPortBA(uint8_t portB, uint8_t portA)
{
    4c9e:	46 2f       	mov	r20, r22
	portB |= (portA & 0x01) << 7;							// XXX defective MCP23017 work-around
    4ca0:	90 e8       	ldi	r25, 0x80	; 128
    4ca2:	69 9f       	mul	r22, r25
    4ca4:	90 01       	movw	r18, r0
    4ca6:	11 24       	eor	r1, r1
    4ca8:	28 2b       	or	r18, r24
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATA, portA, portB);
    4caa:	64 e1       	ldi	r22, 0x14	; 20
    4cac:	80 e2       	ldi	r24, 0x20	; 32
    4cae:	0e 94 37 24 	call	0x486e	; 0x486e <twi_fw_sendCmdSendData1SendData2>
    4cb2:	08 95       	ret

00004cb4 <twi_mcp23017_fw_readPortA>:
}

uint8_t twi_mcp23017_fw_readPortA()
{
	return twi_fw_sendCmdReadData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPIOA);
    4cb4:	62 e1       	ldi	r22, 0x12	; 18
    4cb6:	80 e2       	ldi	r24, 0x20	; 32
    4cb8:	0e 94 76 24 	call	0x48ec	; 0x48ec <twi_fw_sendCmdReadData1>
}
    4cbc:	08 95       	ret

00004cbe <twi_mcp23017_av1624_fw_waitUntilReady>:
	twi_mcp23017_fw_setPortA_DirOut(false);
}


void twi_mcp23017_av1624_fw_waitUntilReady()
{
    4cbe:	1f 93       	push	r17
    4cc0:	cf 93       	push	r28
    4cc2:	df 93       	push	r29
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    4cc4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    4cc8:	82 95       	swap	r24
    4cca:	8f 70       	andi	r24, 0x0F	; 15
    4ccc:	87 70       	andi	r24, 0x07	; 7
    4cce:	81 30       	cpi	r24, 0x01	; 1
    4cd0:	11 f0       	breq	.+4      	; 0x4cd6 <twi_mcp23017_av1624_fw_waitUntilReady+0x18>
    4cd2:	10 e0       	ldi	r17, 0x00	; 0
    4cd4:	01 c0       	rjmp	.+2      	; 0x4cd8 <twi_mcp23017_av1624_fw_waitUntilReady+0x1a>
    4cd6:	18 e0       	ldi	r17, 0x08	; 8

	twi_mcp23017_fw_setPortA_DirOut(false);
    4cd8:	80 e0       	ldi	r24, 0x00	; 0
    4cda:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>

	for (;;) {
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    4cde:	c1 2f       	mov	r28, r17
    4ce0:	c2 60       	ori	r28, 0x02	; 2
		twi_mcp23017_fw_setPortB(0b0011 | lightBF);
    4ce2:	13 60       	ori	r17, 0x03	; 3
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	twi_mcp23017_fw_setPortA_DirOut(false);

	for (;;) {
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    4ce4:	8c 2f       	mov	r24, r28
    4ce6:	0e 94 49 26 	call	0x4c92	; 0x4c92 <twi_mcp23017_fw_setPortB>
		twi_mcp23017_fw_setPortB(0b0011 | lightBF);
    4cea:	81 2f       	mov	r24, r17
    4cec:	0e 94 49 26 	call	0x4c92	; 0x4c92 <twi_mcp23017_fw_setPortB>
		uint8_t status = twi_mcp23017_fw_readPortA();
    4cf0:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <twi_mcp23017_fw_readPortA>
    4cf4:	d8 2f       	mov	r29, r24
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    4cf6:	8c 2f       	mov	r24, r28
    4cf8:	0e 94 49 26 	call	0x4c92	; 0x4c92 <twi_mcp23017_fw_setPortB>

		if (!(status & 0x80)) {
    4cfc:	dd 23       	and	r29, r29
    4cfe:	44 f4       	brge	.+16     	; 0x4d10 <twi_mcp23017_av1624_fw_waitUntilReady+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4d00:	82 e4       	ldi	r24, 0x42	; 66
    4d02:	8a 95       	dec	r24
    4d04:	f1 f7       	brne	.-4      	; 0x4d02 <twi_mcp23017_av1624_fw_waitUntilReady+0x44>
    4d06:	00 c0       	rjmp	.+0      	; 0x4d08 <twi_mcp23017_av1624_fw_waitUntilReady+0x4a>
			break;
		}

		_delay_us(10);
	    wdt_reset();
    4d08:	a8 95       	wdr
		usbPoll();
    4d0a:	0e 94 86 29 	call	0x530c	; 0x530c <usbPoll>
	}
    4d0e:	ea cf       	rjmp	.-44     	; 0x4ce4 <twi_mcp23017_av1624_fw_waitUntilReady+0x26>
}
    4d10:	df 91       	pop	r29
    4d12:	cf 91       	pop	r28
    4d14:	1f 91       	pop	r17
    4d16:	08 95       	ret

00004d18 <twi_mcp23017_av1624_fw_init>:
	 * 	PB7		(free)
	 */

	// wait > 30 ms --> done

	twi_mcp23017_av1624_fw_waitUntilReady();
    4d18:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <twi_mcp23017_av1624_fw_waitUntilReady>
	if (!(main_bf.mainIsLcdAttached)) {
    4d1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4d20:	88 23       	and	r24, r24
    4d22:	0c f0       	brlt	.+2      	; 0x4d26 <twi_mcp23017_av1624_fw_init+0xe>
    4d24:	84 c0       	rjmp	.+264    	; 0x4e2e <twi_mcp23017_av1624_fw_init+0x116>
		return;
	}


	// set interface width to 8bits - (1)
	twi_mcp23017_fw_setPortA_DirOut(true);
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4d2c:	6c e3       	ldi	r22, 0x3C	; 60
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4d34:	6c e3       	ldi	r22, 0x3C	; 60
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4d3c:	6c e3       	ldi	r22, 0x3C	; 60
    4d3e:	80 e0       	ldi	r24, 0x00	; 0
    4d40:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    4d44:	80 e0       	ldi	r24, 0x00	; 0
    4d46:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
    4d4a:	8b e1       	ldi	r24, 0x1B	; 27
    4d4c:	8a 95       	dec	r24
    4d4e:	f1 f7       	brne	.-4      	; 0x4d4c <twi_mcp23017_av1624_fw_init+0x34>
    4d50:	00 00       	nop

	// > 4.1 µs
	_delay_us(4.1f);

	// set interface width to 8bits - (2)
	twi_mcp23017_fw_setPortA_DirOut(true);
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4d58:	6c e3       	ldi	r22, 0x3C	; 60
    4d5a:	80 e0       	ldi	r24, 0x00	; 0
    4d5c:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4d60:	6c e3       	ldi	r22, 0x3C	; 60
    4d62:	81 e0       	ldi	r24, 0x01	; 1
    4d64:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4d68:	6c e3       	ldi	r22, 0x3C	; 60
    4d6a:	80 e0       	ldi	r24, 0x00	; 0
    4d6c:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    4d70:	80 e0       	ldi	r24, 0x00	; 0
    4d72:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
    4d76:	83 ef       	ldi	r24, 0xF3	; 243
    4d78:	91 e0       	ldi	r25, 0x01	; 1
    4d7a:	01 97       	sbiw	r24, 0x01	; 1
    4d7c:	f1 f7       	brne	.-4      	; 0x4d7a <twi_mcp23017_av1624_fw_init+0x62>
    4d7e:	00 c0       	rjmp	.+0      	; 0x4d80 <twi_mcp23017_av1624_fw_init+0x68>
    4d80:	00 00       	nop

	// > 100 µs
	_delay_us(100.0f);

	// set interface width to 8bits - (3)
	twi_mcp23017_fw_setPortA_DirOut(true);
    4d82:	81 e0       	ldi	r24, 0x01	; 1
    4d84:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4d88:	6c e3       	ldi	r22, 0x3C	; 60
    4d8a:	80 e0       	ldi	r24, 0x00	; 0
    4d8c:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4d90:	6c e3       	ldi	r22, 0x3C	; 60
    4d92:	81 e0       	ldi	r24, 0x01	; 1
    4d94:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4d98:	6c e3       	ldi	r22, 0x3C	; 60
    4d9a:	80 e0       	ldi	r24, 0x00	; 0
    4d9c:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>

	// set interface width to 8bits - (4)
	twi_mcp23017_av1624_fw_waitUntilReady();
    4da0:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4daa:	6c e3       	ldi	r22, 0x3C	; 60
    4dac:	80 e0       	ldi	r24, 0x00	; 0
    4dae:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4db2:	6c e3       	ldi	r22, 0x3C	; 60
    4db4:	81 e0       	ldi	r24, 0x01	; 1
    4db6:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4dba:	6c e3       	ldi	r22, 0x3C	; 60
    4dbc:	80 e0       	ldi	r24, 0x00	; 0
    4dbe:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>


	// display ON
	twi_mcp23017_av1624_fw_waitUntilReady();
    4dc2:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    4dc6:	81 e0       	ldi	r24, 0x01	; 1
    4dc8:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001100);
    4dcc:	6c e0       	ldi	r22, 0x0C	; 12
    4dce:	80 e0       	ldi	r24, 0x00	; 0
    4dd0:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00001100);
    4dd4:	6c e0       	ldi	r22, 0x0C	; 12
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001100);
    4ddc:	6c e0       	ldi	r22, 0x0C	; 12
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>

	// display CLEAR
	twi_mcp23017_av1624_fw_waitUntilReady();
    4de4:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    4de8:	81 e0       	ldi	r24, 0x01	; 1
    4dea:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    4dee:	61 e0       	ldi	r22, 0x01	; 1
    4df0:	80 e0       	ldi	r24, 0x00	; 0
    4df2:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000001);
    4df6:	61 e0       	ldi	r22, 0x01	; 1
    4df8:	81 e0       	ldi	r24, 0x01	; 1
    4dfa:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    4dfe:	61 e0       	ldi	r22, 0x01	; 1
    4e00:	80 e0       	ldi	r24, 0x00	; 0
    4e02:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>

	// display Entry Mode Set
	twi_mcp23017_av1624_fw_waitUntilReady();
    4e06:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    4e0a:	81 e0       	ldi	r24, 0x01	; 1
    4e0c:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000110);
    4e10:	66 e0       	ldi	r22, 0x06	; 6
    4e12:	80 e0       	ldi	r24, 0x00	; 0
    4e14:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000110);
    4e18:	66 e0       	ldi	r22, 0x06	; 6
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
    4e1c:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b1000, 0b00000110);
    4e20:	66 e0       	ldi	r22, 0x06	; 6
    4e22:	88 e0       	ldi	r24, 0x08	; 8
    4e24:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    4e28:	80 e0       	ldi	r24, 0x00	; 0
    4e2a:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
    4e2e:	08 95       	ret

00004e30 <twi_mcp23017_av1624_fw_close>:
}

void twi_mcp23017_av1624_fw_close()
{
	if (!(main_bf.mainIsLcdAttached)) {
    4e30:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4e34:	88 23       	and	r24, r24
    4e36:	34 f5       	brge	.+76     	; 0x4e84 <twi_mcp23017_av1624_fw_close+0x54>
		return;
	}


	// display CLEAR
	twi_mcp23017_fw_setPortA_DirOut(true);
    4e38:	81 e0       	ldi	r24, 0x01	; 1
    4e3a:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    4e3e:	61 e0       	ldi	r22, 0x01	; 1
    4e40:	80 e0       	ldi	r24, 0x00	; 0
    4e42:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000001);
    4e46:	61 e0       	ldi	r22, 0x01	; 1
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    4e4e:	61 e0       	ldi	r22, 0x01	; 1
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    4e56:	80 e0       	ldi	r24, 0x00	; 0
    4e58:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>

	// display OFF
	twi_mcp23017_av1624_fw_waitUntilReady();
    4e5c:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001000);
    4e66:	68 e0       	ldi	r22, 0x08	; 8
    4e68:	80 e0       	ldi	r24, 0x00	; 0
    4e6a:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00001000);
    4e6e:	68 e0       	ldi	r22, 0x08	; 8
    4e70:	81 e0       	ldi	r24, 0x01	; 1
    4e72:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001000);
    4e76:	68 e0       	ldi	r22, 0x08	; 8
    4e78:	80 e0       	ldi	r24, 0x00	; 0
    4e7a:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    4e7e:	80 e0       	ldi	r24, 0x00	; 0
    4e80:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
    4e84:	08 95       	ret

00004e86 <twi_mcp23017_av1624_fw_gotoPosition>:
		usbPoll();
	}
}

void twi_mcp23017_av1624_fw_gotoPosition(uint8_t line, uint8_t column)
{
    4e86:	cf 93       	push	r28
    4e88:	df 93       	push	r29
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    4e8a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4e8e:	92 95       	swap	r25
    4e90:	9f 70       	andi	r25, 0x0F	; 15
    4e92:	97 70       	andi	r25, 0x07	; 7
    4e94:	91 30       	cpi	r25, 0x01	; 1
    4e96:	11 f0       	breq	.+4      	; 0x4e9c <twi_mcp23017_av1624_fw_gotoPosition+0x16>
    4e98:	d0 e0       	ldi	r29, 0x00	; 0
    4e9a:	01 c0       	rjmp	.+2      	; 0x4e9e <twi_mcp23017_av1624_fw_gotoPosition+0x18>
    4e9c:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t ddramAdrCmd = (0x80 | ((line % 2) << 6) | (column % 16));
    4e9e:	c6 2f       	mov	r28, r22
    4ea0:	cf 70       	andi	r28, 0x0F	; 15
    4ea2:	c0 68       	ori	r28, 0x80	; 128
    4ea4:	28 2f       	mov	r18, r24
    4ea6:	21 70       	andi	r18, 0x01	; 1
    4ea8:	30 e0       	ldi	r19, 0x00	; 0
    4eaa:	00 24       	eor	r0, r0
    4eac:	36 95       	lsr	r19
    4eae:	27 95       	ror	r18
    4eb0:	07 94       	ror	r0
    4eb2:	36 95       	lsr	r19
    4eb4:	27 95       	ror	r18
    4eb6:	07 94       	ror	r0
    4eb8:	32 2f       	mov	r19, r18
    4eba:	20 2d       	mov	r18, r0
    4ebc:	c2 2b       	or	r28, r18

	twi_mcp23017_av1624_fw_waitUntilReady();
    4ebe:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <twi_mcp23017_av1624_fw_waitUntilReady>

	// set DDRAM address
	twi_mcp23017_fw_setPortA_DirOut(true);
    4ec2:	81 e0       	ldi	r24, 0x01	; 1
    4ec4:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
    4ec8:	6c 2f       	mov	r22, r28
    4eca:	8d 2f       	mov	r24, r29
    4ecc:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001 | lightBF, ddramAdrCmd);
    4ed0:	6c 2f       	mov	r22, r28
    4ed2:	8d 2f       	mov	r24, r29
    4ed4:	81 60       	ori	r24, 0x01	; 1
    4ed6:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
    4eda:	6c 2f       	mov	r22, r28
    4edc:	8d 2f       	mov	r24, r29
    4ede:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    4ee2:	80 e0       	ldi	r24, 0x00	; 0
    4ee4:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
}
    4ee8:	df 91       	pop	r29
    4eea:	cf 91       	pop	r28
    4eec:	08 95       	ret

00004eee <twi_mcp23017_av1624_fw_writeString>:

void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
    4eee:	cf 92       	push	r12
    4ef0:	df 92       	push	r13
    4ef2:	ef 92       	push	r14
    4ef4:	ff 92       	push	r15
    4ef6:	0f 93       	push	r16
    4ef8:	1f 93       	push	r17
    4efa:	cf 93       	push	r28
    4efc:	df 93       	push	r29
    4efe:	7c 01       	movw	r14, r24
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    4f00:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    4f04:	82 95       	swap	r24
    4f06:	8f 70       	andi	r24, 0x0F	; 15
    4f08:	87 70       	andi	r24, 0x07	; 7
    4f0a:	81 30       	cpi	r24, 0x01	; 1
    4f0c:	11 f0       	breq	.+4      	; 0x4f12 <twi_mcp23017_av1624_fw_writeString+0x24>
    4f0e:	d1 2c       	mov	r13, r1
    4f10:	03 c0       	rjmp	.+6      	; 0x4f18 <twi_mcp23017_av1624_fw_writeString+0x2a>
    4f12:	68 94       	set
    4f14:	dd 24       	eor	r13, r13
    4f16:	d3 f8       	bld	r13, 3

	for (int idx = 0; idx < len; ++idx) {
    4f18:	66 23       	and	r22, r22
    4f1a:	31 f1       	breq	.+76     	; 0x4f68 <twi_mcp23017_av1624_fw_writeString+0x7a>
    4f1c:	87 01       	movw	r16, r14
    4f1e:	e6 0e       	add	r14, r22
    4f20:	f1 1c       	adc	r15, r1

		twi_mcp23017_av1624_fw_waitUntilReady();

		// write data
		twi_mcp23017_fw_setPortA_DirOut(true);
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    4f22:	dd 2d       	mov	r29, r13
    4f24:	d4 60       	ori	r29, 0x04	; 4
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
    4f26:	8d 2d       	mov	r24, r13
    4f28:	85 60       	ori	r24, 0x05	; 5
    4f2a:	c8 2e       	mov	r12, r24
void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	for (int idx = 0; idx < len; ++idx) {
		uint8_t c = buffer[idx];
    4f2c:	f8 01       	movw	r30, r16
    4f2e:	c1 91       	ld	r28, Z+
    4f30:	8f 01       	movw	r16, r30
		c = recodeChar(c);

		twi_mcp23017_av1624_fw_waitUntilReady();
    4f32:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <twi_mcp23017_av1624_fw_waitUntilReady>

		// write data
		twi_mcp23017_fw_setPortA_DirOut(true);
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    4f3c:	6c 2f       	mov	r22, r28
    4f3e:	8d 2f       	mov	r24, r29
    4f40:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
    4f44:	6c 2f       	mov	r22, r28
    4f46:	8c 2d       	mov	r24, r12
    4f48:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    4f4c:	6c 2f       	mov	r22, r28
    4f4e:	8d 2f       	mov	r24, r29
    4f50:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0000 | lightBF, c);
    4f54:	6c 2f       	mov	r22, r28
    4f56:	8d 2d       	mov	r24, r13
    4f58:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortA_DirOut(false);
    4f5c:	80 e0       	ldi	r24, 0x00	; 0
    4f5e:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <twi_mcp23017_fw_setPortA_DirOut>

void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	for (int idx = 0; idx < len; ++idx) {
    4f62:	0e 15       	cp	r16, r14
    4f64:	1f 05       	cpc	r17, r15
    4f66:	11 f7       	brne	.-60     	; 0x4f2c <twi_mcp23017_av1624_fw_writeString+0x3e>
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
		twi_mcp23017_fw_setPortBA(0b0000 | lightBF, c);
		twi_mcp23017_fw_setPortA_DirOut(false);
	}
}
    4f68:	df 91       	pop	r29
    4f6a:	cf 91       	pop	r28
    4f6c:	1f 91       	pop	r17
    4f6e:	0f 91       	pop	r16
    4f70:	ff 90       	pop	r15
    4f72:	ef 90       	pop	r14
    4f74:	df 90       	pop	r13
    4f76:	cf 90       	pop	r12
    4f78:	08 95       	ret

00004f7a <usb_fw_sendInInterrupt>:
 */
void usb_fw_sendInInterrupt()
{
	static uchar bufferInt[5] = "<INT>";

	if (usbInterruptIsReady()) {
    4f7a:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <usbTxStatus1>
    4f7e:	84 ff       	sbrs	r24, 4
    4f80:	05 c0       	rjmp	.+10     	; 0x4f8c <usb_fw_sendInInterrupt+0x12>
		/* send next packet if a new time-slot is ready to send */
		usbSetInterrupt(bufferInt, sizeof(bufferInt));
    4f82:	65 e0       	ldi	r22, 0x05	; 5
    4f84:	87 e0       	ldi	r24, 0x07	; 7
    4f86:	91 e0       	ldi	r25, 0x01	; 1
    4f88:	0e 94 5f 29 	call	0x52be	; 0x52be <usbSetInterrupt>
    4f8c:	08 95       	ret

00004f8e <usb_fw_init>:

/*  -- 8< -- */

void usb_fw_init()
{
	usbInit();
    4f8e:	0e 94 03 2b 	call	0x5606	; 0x5606 <usbInit>
	USB_INTR_ENABLE &= ~(_BV(USB_INTR_ENABLE_BIT));
    4f92:	e8 98       	cbi	0x1d, 0	; 29
	usbDeviceDisconnect();									// enforce re-enumeration, do this while interrupts are disabled!
    4f94:	21 98       	cbi	0x04, 1	; 4
    4f96:	29 98       	cbi	0x05, 1	; 5
    4f98:	89 ef       	ldi	r24, 0xF9	; 249
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4f9a:	e7 e8       	ldi	r30, 0x87	; 135
    4f9c:	f3 e1       	ldi	r31, 0x13	; 19
    4f9e:	31 97       	sbiw	r30, 0x01	; 1
    4fa0:	f1 f7       	brne	.-4      	; 0x4f9e <usb_fw_init+0x10>
    4fa2:	00 c0       	rjmp	.+0      	; 0x4fa4 <usb_fw_init+0x16>
    4fa4:	00 00       	nop

    uint8_t i = 250;
    while (--i) {											// fake USB disconnect for > 250 ms
        _delay_ms(1);
        wdt_reset();
    4fa6:	a8 95       	wdr
    4fa8:	81 50       	subi	r24, 0x01	; 1
	usbInit();
	USB_INTR_ENABLE &= ~(_BV(USB_INTR_ENABLE_BIT));
	usbDeviceDisconnect();									// enforce re-enumeration, do this while interrupts are disabled!

    uint8_t i = 250;
    while (--i) {											// fake USB disconnect for > 250 ms
    4faa:	b9 f7       	brne	.-18     	; 0x4f9a <usb_fw_init+0xc>
        _delay_ms(1);
        wdt_reset();
    }

    usbDeviceConnect();
    4fac:	21 9a       	sbi	0x04, 1	; 4
    4fae:	29 9a       	sbi	0x05, 1	; 5
	USB_INTR_ENABLE |= _BV(USB_INTR_ENABLE_BIT);
    4fb0:	e8 9a       	sbi	0x1d, 0	; 29
    4fb2:	08 95       	ret

00004fb4 <usb_fw_close>:
}

void usb_fw_close()
{
	USB_INTR_ENABLE &= ~(_BV(USB_INTR_ENABLE_BIT));
    4fb4:	e8 98       	cbi	0x1d, 0	; 29
	usbDeviceDisconnect();
    4fb6:	21 98       	cbi	0x04, 1	; 4
    4fb8:	29 98       	cbi	0x05, 1	; 5
    4fba:	08 95       	ret

00004fbc <usbFunctionSetup>:

/* usbFunctionSetup() is called when the host does a setup of the USB function. For more
 * information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
    4fbc:	fc 01       	movw	r30, r24
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;

    if (((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_VENDOR) &&
    4fbe:	90 81       	ld	r25, Z
    4fc0:	89 2f       	mov	r24, r25
    4fc2:	80 76       	andi	r24, 0x60	; 96
    4fc4:	80 34       	cpi	r24, 0x40	; 64
    4fc6:	81 f5       	brne	.+96     	; 0x5028 <usbFunctionSetup+0x6c>
    	((rq->bmRequestType & USBRQ_RCPT_MASK) == USBRQ_RCPT_DEVICE)) {
    4fc8:	9f 71       	andi	r25, 0x1F	; 31
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;

    if (((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_VENDOR) &&
    4fca:	81 f5       	brne	.+96     	; 0x502c <usbFunctionSetup+0x70>
    	((rq->bmRequestType & USBRQ_RCPT_MASK) == USBRQ_RCPT_DEVICE)) {
    	//usbSetupCntr++;

    	if (rq->bRequest == USBCUSTOMRQ_ECHO) {				// echo -- used for reliability tests
    4fcc:	81 81       	ldd	r24, Z+1	; 0x01
    4fce:	81 11       	cpse	r24, r1
    4fd0:	11 c0       	rjmp	.+34     	; 0x4ff4 <usbFunctionSetup+0x38>
    		usbCtxtSetupReplyBuffer[0] = rq->wValue.bytes[0];
    4fd2:	af e2       	ldi	r26, 0x2F	; 47
    4fd4:	b1 e0       	ldi	r27, 0x01	; 1
    4fd6:	82 81       	ldd	r24, Z+2	; 0x02
    4fd8:	8c 93       	st	X, r24
    		usbCtxtSetupReplyBuffer[1] = rq->wValue.bytes[1];
    4fda:	83 81       	ldd	r24, Z+3	; 0x03
    4fdc:	11 96       	adiw	r26, 0x01	; 1
    4fde:	8c 93       	st	X, r24
    4fe0:	11 97       	sbiw	r26, 0x01	; 1
    		usbCtxtSetupReplyBuffer[2] = rq->wIndex.bytes[0];
    4fe2:	84 81       	ldd	r24, Z+4	; 0x04
    4fe4:	12 96       	adiw	r26, 0x02	; 2
    4fe6:	8c 93       	st	X, r24
    4fe8:	12 97       	sbiw	r26, 0x02	; 2
    		usbCtxtSetupReplyBuffer[3] = rq->wIndex.bytes[1];
    4fea:	85 81       	ldd	r24, Z+5	; 0x05
    4fec:	13 96       	adiw	r26, 0x03	; 3
    4fee:	8c 93       	st	X, r24
    		len = 4;
    4ff0:	84 e0       	ldi	r24, 0x04	; 4
    4ff2:	1f c0       	rjmp	.+62     	; 0x5032 <usbFunctionSetup+0x76>

    	} else if (rq->bRequest == USBCUSTOMRQ_RECV) {		// receive data from this USB function
    4ff4:	82 30       	cpi	r24, 0x02	; 2
    4ff6:	59 f4       	brne	.+22     	; 0x500e <usbFunctionSetup+0x52>
    		uint8_t sreg = SREG;
    4ff8:	8f b7       	in	r24, 0x3f	; 63
    		cli();
    4ffa:	f8 94       	cli
			cntRcv = rq->wLength.word;
    4ffc:	26 81       	ldd	r18, Z+6	; 0x06
    4ffe:	37 81       	ldd	r19, Z+7	; 0x07
    5000:	30 93 04 05 	sts	0x0504, r19	; 0x800504 <cntRcv+0x1>
    5004:	20 93 03 05 	sts	0x0503, r18	; 0x800503 <cntRcv>
			len = USB_NO_MSG;								// use usbFunctionRead() to obtain the data
    		SREG = sreg;
    5008:	8f bf       	out	0x3f, r24	; 63

    	} else if (rq->bRequest == USBCUSTOMRQ_RECV) {		// receive data from this USB function
    		uint8_t sreg = SREG;
    		cli();
			cntRcv = rq->wLength.word;
			len = USB_NO_MSG;								// use usbFunctionRead() to obtain the data
    500a:	8f ef       	ldi	r24, 0xFF	; 255
    500c:	12 c0       	rjmp	.+36     	; 0x5032 <usbFunctionSetup+0x76>
    		SREG = sreg;

    	} else if (rq->bRequest == USBCUSTOMRQ_SEND) {		// send data from host to this USB function
    500e:	81 30       	cpi	r24, 0x01	; 1
    5010:	79 f4       	brne	.+30     	; 0x5030 <usbFunctionSetup+0x74>
    		uint8_t sreg = SREG;
    5012:	8f b7       	in	r24, 0x3f	; 63
    		cli();
    5014:	f8 94       	cli
			cntSend = rq->wLength.word;
    5016:	26 81       	ldd	r18, Z+6	; 0x06
    5018:	37 81       	ldd	r19, Z+7	; 0x07
    501a:	30 93 02 05 	sts	0x0502, r19	; 0x800502 <cntSend+0x1>
    501e:	20 93 01 05 	sts	0x0501, r18	; 0x800501 <cntSend>
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    		SREG = sreg;
    5022:	8f bf       	out	0x3f, r24	; 63

    	} else if (rq->bRequest == USBCUSTOMRQ_SEND) {		// send data from host to this USB function
    		uint8_t sreg = SREG;
    		cli();
			cntSend = rq->wLength.word;
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    5024:	8f ef       	ldi	r24, 0xFF	; 255
    5026:	05 c0       	rjmp	.+10     	; 0x5032 <usbFunctionSetup+0x76>
 * information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;
    5028:	80 e0       	ldi	r24, 0x00	; 0
    502a:	03 c0       	rjmp	.+6      	; 0x5032 <usbFunctionSetup+0x76>
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	01 c0       	rjmp	.+2      	; 0x5032 <usbFunctionSetup+0x76>
    5030:	80 e0       	ldi	r24, 0x00	; 0
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    		SREG = sreg;
    	}
    }

	usbMsgPtr = (usbMsgPtr_t) usbCtxtSetupReplyBuffer;
    5032:	2f e2       	ldi	r18, 0x2F	; 47
    5034:	31 e0       	ldi	r19, 0x01	; 1
    5036:	30 93 f8 07 	sts	0x07F8, r19	; 0x8007f8 <usbMsgPtr+0x1>
    503a:	20 93 f7 07 	sts	0x07F7, r18	; 0x8007f7 <usbMsgPtr>
    return len;
}
    503e:	08 95       	ret

00005040 <usbFunctionRead>:

/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionRead(uchar *data, uchar len)
{
    5040:	cf 92       	push	r12
    5042:	df 92       	push	r13
    5044:	ef 92       	push	r14
    5046:	ff 92       	push	r15
    5048:	1f 93       	push	r17
    504a:	cf 93       	push	r28
    504c:	df 93       	push	r29
    504e:	fc 01       	movw	r30, r24
    5050:	46 2f       	mov	r20, r22
	uint8_t retLen = 0;

	if (main_bf.mainIsUsbCommTest) {
    5052:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5056:	84 ff       	sbrs	r24, 4
    5058:	a0 c0       	rjmp	.+320    	; 0x519a <usbFunctionRead+0x15a>
		/* special communication TEST */
		if (cntRcv) {
    505a:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <cntRcv>
    505e:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <cntRcv+0x1>
    5062:	89 2b       	or	r24, r25
    5064:	09 f4       	brne	.+2      	; 0x5068 <usbFunctionRead+0x28>
    5066:	ce c0       	rjmp	.+412    	; 0x5204 <usbFunctionRead+0x1c4>
#if 1
			data[retLen++] = '0' + ((doTestCntr / 1000) % 10);
    5068:	c0 91 c6 05 	lds	r28, 0x05C6	; 0x8005c6 <doTestCntr>
    506c:	d0 91 c7 05 	lds	r29, 0x05C7	; 0x8005c7 <doTestCntr+0x1>
    5070:	9e 01       	movw	r18, r28
    5072:	36 95       	lsr	r19
    5074:	27 95       	ror	r18
    5076:	36 95       	lsr	r19
    5078:	27 95       	ror	r18
    507a:	36 95       	lsr	r19
    507c:	27 95       	ror	r18
    507e:	a5 ec       	ldi	r26, 0xC5	; 197
    5080:	b0 e2       	ldi	r27, 0x20	; 32
    5082:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__umulhisi3>
    5086:	7c 01       	movw	r14, r24
    5088:	f6 94       	lsr	r15
    508a:	e7 94       	ror	r14
    508c:	f6 94       	lsr	r15
    508e:	e7 94       	ror	r14
    5090:	f6 94       	lsr	r15
    5092:	e7 94       	ror	r14
    5094:	f6 94       	lsr	r15
    5096:	e7 94       	ror	r14
    5098:	97 01       	movw	r18, r14
    509a:	ad ec       	ldi	r26, 0xCD	; 205
    509c:	bc ec       	ldi	r27, 0xCC	; 204
    509e:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__umulhisi3>
    50a2:	96 95       	lsr	r25
    50a4:	87 95       	ror	r24
    50a6:	96 95       	lsr	r25
    50a8:	87 95       	ror	r24
    50aa:	96 95       	lsr	r25
    50ac:	87 95       	ror	r24
    50ae:	9c 01       	movw	r18, r24
    50b0:	22 0f       	add	r18, r18
    50b2:	33 1f       	adc	r19, r19
    50b4:	88 0f       	add	r24, r24
    50b6:	99 1f       	adc	r25, r25
    50b8:	88 0f       	add	r24, r24
    50ba:	99 1f       	adc	r25, r25
    50bc:	88 0f       	add	r24, r24
    50be:	99 1f       	adc	r25, r25
    50c0:	82 0f       	add	r24, r18
    50c2:	93 1f       	adc	r25, r19
    50c4:	97 01       	movw	r18, r14
    50c6:	28 1b       	sub	r18, r24
    50c8:	39 0b       	sbc	r19, r25
    50ca:	c9 01       	movw	r24, r18
    50cc:	80 5d       	subi	r24, 0xD0	; 208
    50ce:	80 83       	st	Z, r24
			data[retLen++] = '0' + ((doTestCntr /  100) % 10);
    50d0:	9e 01       	movw	r18, r28
    50d2:	36 95       	lsr	r19
    50d4:	27 95       	ror	r18
    50d6:	36 95       	lsr	r19
    50d8:	27 95       	ror	r18
    50da:	ab e7       	ldi	r26, 0x7B	; 123
    50dc:	b4 e1       	ldi	r27, 0x14	; 20
    50de:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__umulhisi3>
    50e2:	7c 01       	movw	r14, r24
    50e4:	f6 94       	lsr	r15
    50e6:	e7 94       	ror	r14
    50e8:	97 01       	movw	r18, r14
    50ea:	ad ec       	ldi	r26, 0xCD	; 205
    50ec:	bc ec       	ldi	r27, 0xCC	; 204
    50ee:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__umulhisi3>
    50f2:	96 95       	lsr	r25
    50f4:	87 95       	ror	r24
    50f6:	96 95       	lsr	r25
    50f8:	87 95       	ror	r24
    50fa:	96 95       	lsr	r25
    50fc:	87 95       	ror	r24
    50fe:	9c 01       	movw	r18, r24
    5100:	22 0f       	add	r18, r18
    5102:	33 1f       	adc	r19, r19
    5104:	88 0f       	add	r24, r24
    5106:	99 1f       	adc	r25, r25
    5108:	88 0f       	add	r24, r24
    510a:	99 1f       	adc	r25, r25
    510c:	88 0f       	add	r24, r24
    510e:	99 1f       	adc	r25, r25
    5110:	82 0f       	add	r24, r18
    5112:	93 1f       	adc	r25, r19
    5114:	97 01       	movw	r18, r14
    5116:	28 1b       	sub	r18, r24
    5118:	39 0b       	sbc	r19, r25
    511a:	c9 01       	movw	r24, r18
    511c:	80 5d       	subi	r24, 0xD0	; 208
    511e:	81 83       	std	Z+1, r24	; 0x01
			data[retLen++] = '0' + ((doTestCntr /   10) % 10);
    5120:	9e 01       	movw	r18, r28
    5122:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__umulhisi3>
    5126:	7c 01       	movw	r14, r24
    5128:	f6 94       	lsr	r15
    512a:	e7 94       	ror	r14
    512c:	f6 94       	lsr	r15
    512e:	e7 94       	ror	r14
    5130:	f6 94       	lsr	r15
    5132:	e7 94       	ror	r14
    5134:	97 01       	movw	r18, r14
    5136:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__umulhisi3>
    513a:	96 95       	lsr	r25
    513c:	87 95       	ror	r24
    513e:	96 95       	lsr	r25
    5140:	87 95       	ror	r24
    5142:	96 95       	lsr	r25
    5144:	87 95       	ror	r24
    5146:	9c 01       	movw	r18, r24
    5148:	22 0f       	add	r18, r18
    514a:	33 1f       	adc	r19, r19
    514c:	88 0f       	add	r24, r24
    514e:	99 1f       	adc	r25, r25
    5150:	88 0f       	add	r24, r24
    5152:	99 1f       	adc	r25, r25
    5154:	88 0f       	add	r24, r24
    5156:	99 1f       	adc	r25, r25
    5158:	82 0f       	add	r24, r18
    515a:	93 1f       	adc	r25, r19
    515c:	97 01       	movw	r18, r14
    515e:	28 1b       	sub	r18, r24
    5160:	39 0b       	sbc	r19, r25
    5162:	c9 01       	movw	r24, r18
    5164:	80 5d       	subi	r24, 0xD0	; 208
    5166:	82 83       	std	Z+2, r24	; 0x02
			data[retLen++] = '0' + ( doTestCntr++       % 10);
    5168:	ce 01       	movw	r24, r28
    516a:	01 96       	adiw	r24, 0x01	; 1
    516c:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <doTestCntr+0x1>
    5170:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <doTestCntr>
    5174:	c7 01       	movw	r24, r14
    5176:	88 0f       	add	r24, r24
    5178:	99 1f       	adc	r25, r25
    517a:	ee 0c       	add	r14, r14
    517c:	ff 1c       	adc	r15, r15
    517e:	ee 0c       	add	r14, r14
    5180:	ff 1c       	adc	r15, r15
    5182:	ee 0c       	add	r14, r14
    5184:	ff 1c       	adc	r15, r15
    5186:	e8 0e       	add	r14, r24
    5188:	f9 1e       	adc	r15, r25
    518a:	ce 19       	sub	r28, r14
    518c:	df 09       	sbc	r29, r15
    518e:	c0 5d       	subi	r28, 0xD0	; 208
    5190:	c3 83       	std	Z+3, r28	; 0x03
#else
			data[retLen++] = '0' +  (    cntRcv /  100)      ;
			data[retLen++] = '0' + ((    cntRcv /   10) % 10);
			data[retLen++] = '0' + (     cntRcv         % 10);
#endif
			data[retLen++] = ':';
    5192:	8a e3       	ldi	r24, 0x3A	; 58
    5194:	84 83       	std	Z+4, r24	; 0x04
    5196:	15 e0       	ldi	r17, 0x05	; 5
    5198:	01 c0       	rjmp	.+2      	; 0x519c <usbFunctionRead+0x15c>
/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionRead(uchar *data, uchar len)
{
	uint8_t retLen = 0;
    519a:	10 e0       	ldi	r17, 0x00	; 0
#endif
			data[retLen++] = ':';
		}
	}

	signed int readCnt = min(cntRcv, len) - retLen;			// number of characters to be sent - no trailing \0 character counted
    519c:	e1 2e       	mov	r14, r17
    519e:	f1 2c       	mov	r15, r1
    51a0:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <cntRcv>
    51a4:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <cntRcv+0x1>
    51a8:	50 e0       	ldi	r21, 0x00	; 0
    51aa:	84 17       	cp	r24, r20
    51ac:	95 07       	cpc	r25, r21
    51ae:	08 f4       	brcc	.+2      	; 0x51b2 <usbFunctionRead+0x172>
    51b0:	ac 01       	movw	r20, r24
    51b2:	6f 01       	movw	r12, r30
    51b4:	ea 01       	movw	r28, r20
    51b6:	ce 19       	sub	r28, r14
    51b8:	df 09       	sbc	r29, r15
	if (readCnt > 0) {
    51ba:	1c 16       	cp	r1, r28
    51bc:	1d 06       	cpc	r1, r29
    51be:	24 f5       	brge	.+72     	; 0x5208 <usbFunctionRead+0x1c8>
		uint8_t hasSemaphore;
		do {
			hasSemaphore = ringbuffer_fw_getSemaphore(false);
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <ringbuffer_fw_getSemaphore>
			if (!hasSemaphore) {
			    wdt_reset();
			    usbPoll();
			}
#endif
		} while(!hasSemaphore);
    51c6:	88 23       	and	r24, r24
    51c8:	d9 f3       	breq	.-10     	; 0x51c0 <usbFunctionRead+0x180>

		/* pull next part of the message from the ring buffer and send it to the host IN */
		uint8_t pullLen = ringbuffer_fw_ringBufferPull(false, data + retLen, readCnt + 1);
    51ca:	4c 2f       	mov	r20, r28
    51cc:	4f 5f       	subi	r20, 0xFF	; 255
    51ce:	b6 01       	movw	r22, r12
    51d0:	6e 0d       	add	r22, r14
    51d2:	7f 1d       	adc	r23, r15
    51d4:	80 e0       	ldi	r24, 0x00	; 0
    51d6:	0e 94 c8 20 	call	0x4190	; 0x4190 <ringbuffer_fw_ringBufferPull>
    51da:	c8 2f       	mov	r28, r24
		ringbuffer_fw_freeSemaphore(false);
    51dc:	80 e0       	ldi	r24, 0x00	; 0
    51de:	0e 94 10 20 	call	0x4020	; 0x4020 <ringbuffer_fw_freeSemaphore>
		cntRcv -= retLen + pullLen;
    51e2:	4c 2f       	mov	r20, r28
    51e4:	50 e0       	ldi	r21, 0x00	; 0
    51e6:	41 0f       	add	r20, r17
    51e8:	51 1d       	adc	r21, r1
    51ea:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <cntRcv>
    51ee:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <cntRcv+0x1>
    51f2:	24 1b       	sub	r18, r20
    51f4:	35 0b       	sbc	r19, r21
    51f6:	30 93 04 05 	sts	0x0504, r19	; 0x800504 <cntRcv+0x1>
    51fa:	20 93 03 05 	sts	0x0503, r18	; 0x800503 <cntRcv>
		return retLen + pullLen;
    51fe:	8c 2f       	mov	r24, r28
    5200:	81 0f       	add	r24, r17
    5202:	03 c0       	rjmp	.+6      	; 0x520a <usbFunctionRead+0x1ca>
/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionRead(uchar *data, uchar len)
{
	uint8_t retLen = 0;
    5204:	80 e0       	ldi	r24, 0x00	; 0
    5206:	01 c0       	rjmp	.+2      	; 0x520a <usbFunctionRead+0x1ca>
    5208:	81 2f       	mov	r24, r17
		return retLen + pullLen;

	} else {
		return retLen;
	}
}
    520a:	df 91       	pop	r29
    520c:	cf 91       	pop	r28
    520e:	1f 91       	pop	r17
    5210:	ff 90       	pop	r15
    5212:	ef 90       	pop	r14
    5214:	df 90       	pop	r13
    5216:	cf 90       	pop	r12
    5218:	08 95       	ret

0000521a <usbFunctionWrite>:

/* usbFunctionWrite() is called when the host sends a chunk of data to the
 * device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionWrite(uchar *data, uchar len)
{
    521a:	1f 93       	push	r17
    521c:	cf 93       	push	r28
    521e:	df 93       	push	r29
    5220:	c6 2f       	mov	r28, r22
	if (cntSend > len) {
    5222:	46 2f       	mov	r20, r22
    5224:	50 e0       	ldi	r21, 0x00	; 0
    5226:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <cntSend>
    522a:	30 91 02 05 	lds	r19, 0x0502	; 0x800502 <cntSend+0x1>
    522e:	42 17       	cp	r20, r18
    5230:	53 07       	cpc	r21, r19
    5232:	c0 f4       	brcc	.+48     	; 0x5264 <usbFunctionWrite+0x4a>
		/* append first or any substring to the inBuffer */
		cntSend -= len;
    5234:	24 1b       	sub	r18, r20
    5236:	35 0b       	sbc	r19, r21
    5238:	30 93 02 05 	sts	0x0502, r19	; 0x800502 <cntSend+0x1>
    523c:	20 93 01 05 	sts	0x0501, r18	; 0x800501 <cntSend>

		uint8_t sreg = SREG;
    5240:	1f b7       	in	r17, 0x3f	; 63
		cli();
    5242:	f8 94       	cli
		memcpy(&(usbIsrCtxtBuffer[usbIsrCtxtBufferIdx]), data, len);
    5244:	d0 91 00 05 	lds	r29, 0x0500	; 0x800500 <usbIsrCtxtBufferIdx>
    5248:	2d 2f       	mov	r18, r29
    524a:	30 e0       	ldi	r19, 0x00	; 0
    524c:	bc 01       	movw	r22, r24
    524e:	c9 01       	movw	r24, r18
    5250:	89 5c       	subi	r24, 0xC9	; 201
    5252:	9e 4f       	sbci	r25, 0xFE	; 254
    5254:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <memcpy>
		usbIsrCtxtBufferIdx += len;
    5258:	cd 0f       	add	r28, r29
    525a:	c0 93 00 05 	sts	0x0500, r28	; 0x800500 <usbIsrCtxtBufferIdx>
		SREG = sreg;
    525e:	1f bf       	out	0x3f, r17	; 63
		return 0;											// go ahead with more transfer requests
    5260:	80 e0       	ldi	r24, 0x00	; 0
    5262:	29 c0       	rjmp	.+82     	; 0x52b6 <usbFunctionWrite+0x9c>

	} else {
		/* append last substring to the inBuffer and push it to the OUT ring buffer (host --> USB function) */
		if (cntSend > 0) {
    5264:	23 2b       	or	r18, r19
    5266:	a9 f0       	breq	.+42     	; 0x5292 <usbFunctionWrite+0x78>
			uint8_t sreg = SREG;
    5268:	1f b7       	in	r17, 0x3f	; 63
			cli();
    526a:	f8 94       	cli
			memcpy(&(usbIsrCtxtBuffer[usbIsrCtxtBufferIdx]), data, cntSend);
    526c:	c0 91 01 05 	lds	r28, 0x0501	; 0x800501 <cntSend>
    5270:	50 91 02 05 	lds	r21, 0x0502	; 0x800502 <cntSend+0x1>
    5274:	d0 91 00 05 	lds	r29, 0x0500	; 0x800500 <usbIsrCtxtBufferIdx>
    5278:	2d 2f       	mov	r18, r29
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	4c 2f       	mov	r20, r28
    527e:	bc 01       	movw	r22, r24
    5280:	c9 01       	movw	r24, r18
    5282:	89 5c       	subi	r24, 0xC9	; 201
    5284:	9e 4f       	sbci	r25, 0xFE	; 254
    5286:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <memcpy>
			usbIsrCtxtBufferIdx += cntSend;
    528a:	cd 0f       	add	r28, r29
    528c:	c0 93 00 05 	sts	0x0500, r28	; 0x800500 <usbIsrCtxtBufferIdx>
			SREG = sreg;
    5290:	1f bf       	out	0x3f, r17	; 63
		}

		/* push OUT string (send) from host to the USB function's ring buffer */
		ringbuffer_fw_ringBufferWaitAppend(true, false, usbIsrCtxtBuffer, usbIsrCtxtBufferIdx);
    5292:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <usbIsrCtxtBufferIdx>
    5296:	47 e3       	ldi	r20, 0x37	; 55
    5298:	51 e0       	ldi	r21, 0x01	; 1
    529a:	60 e0       	ldi	r22, 0x00	; 0
    529c:	81 e0       	ldi	r24, 0x01	; 1
    529e:	0e 94 a5 21 	call	0x434a	; 0x434a <ringbuffer_fw_ringBufferWaitAppend>

		uint8_t sreg = SREG;
    52a2:	8f b7       	in	r24, 0x3f	; 63
		cli();
    52a4:	f8 94       	cli
		usbIsrCtxtBufferIdx = cntSend = 0;
    52a6:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <cntSend+0x1>
    52aa:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <cntSend>
    52ae:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <usbIsrCtxtBufferIdx>
		SREG = sreg;
    52b2:	8f bf       	out	0x3f, r24	; 63
		return 1;											// no more data transfers accepted
    52b4:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    52b6:	df 91       	pop	r29
    52b8:	cf 91       	pop	r28
    52ba:	1f 91       	pop	r17
    52bc:	08 95       	ret

000052be <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    52be:	cf 93       	push	r28
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
    52c0:	20 91 7c 05 	lds	r18, 0x057C	; 0x80057c <usbTxStatus1>
    52c4:	2e 31       	cpi	r18, 0x1E	; 30
    52c6:	01 f1       	breq	.+64     	; 0x5308 <usbSetInterrupt+0x4a>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    52c8:	20 91 7c 05 	lds	r18, 0x057C	; 0x80057c <usbTxStatus1>
    52cc:	24 ff       	sbrs	r18, 4
    52ce:	07 c0       	rjmp	.+14     	; 0x52de <usbSetInterrupt+0x20>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    52d0:	ec e7       	ldi	r30, 0x7C	; 124
    52d2:	f5 e0       	ldi	r31, 0x05	; 5
    52d4:	31 81       	ldd	r19, Z+1	; 0x01
    52d6:	28 e8       	ldi	r18, 0x88	; 136
    52d8:	23 27       	eor	r18, r19
    52da:	21 83       	std	Z+1, r18	; 0x01
    52dc:	03 c0       	rjmp	.+6      	; 0x52e4 <usbSetInterrupt+0x26>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    52de:	2a e5       	ldi	r18, 0x5A	; 90
    52e0:	20 93 7c 05 	sts	0x057C, r18	; 0x80057c <usbTxStatus1>
    52e4:	e8 2f       	mov	r30, r24
    52e6:	f9 2f       	mov	r31, r25
    52e8:	ae e7       	ldi	r26, 0x7E	; 126
    52ea:	b5 e0       	ldi	r27, 0x05	; 5
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    52ec:	86 2f       	mov	r24, r22
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    52ee:	91 91       	ld	r25, Z+
    52f0:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    52f2:	81 50       	subi	r24, 0x01	; 1
    52f4:	e1 f7       	brne	.-8      	; 0x52ee <usbSetInterrupt+0x30>
    52f6:	c6 2f       	mov	r28, r22
    usbCrc16Append(&txStatus->buffer[1], len);
    52f8:	8e e7       	ldi	r24, 0x7E	; 126
    52fa:	95 e0       	ldi	r25, 0x05	; 5
    52fc:	0e 94 ef 06 	call	0xdde	; 0xdde <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    5300:	64 e0       	ldi	r22, 0x04	; 4
    5302:	6c 0f       	add	r22, r28
    5304:	60 93 7c 05 	sts	0x057C, r22	; 0x80057c <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
    5308:	cf 91       	pop	r28
    530a:	08 95       	ret

0000530c <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
    530c:	cf 93       	push	r28
    530e:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
    5310:	60 91 f9 07 	lds	r22, 0x07F9	; 0x8007f9 <usbRxLen>
    5314:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
    5316:	0a f4       	brpl	.+2      	; 0x531a <usbPoll+0xe>
    5318:	fb c0       	rjmp	.+502    	; 0x5510 <usbPoll+0x204>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    531a:	20 91 f6 07 	lds	r18, 0x07F6	; 0x8007f6 <usbInputBufOffset>
    531e:	8c e0       	ldi	r24, 0x0C	; 12
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	82 1b       	sub	r24, r18
    5324:	91 09       	sbc	r25, r1
    5326:	ec 01       	movw	r28, r24
    5328:	c3 50       	subi	r28, 0x03	; 3
    532a:	d8 4f       	sbci	r29, 0xF8	; 248
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
    532c:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <usbRxToken>
    5330:	8d 32       	cpi	r24, 0x2D	; 45
    5332:	09 f0       	breq	.+2      	; 0x5336 <usbPoll+0x2a>
    5334:	db c0       	rjmp	.+438    	; 0x54ec <usbPoll+0x1e0>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
    5336:	68 30       	cpi	r22, 0x08	; 8
    5338:	09 f0       	breq	.+2      	; 0x533c <usbPoll+0x30>
    533a:	e8 c0       	rjmp	.+464    	; 0x550c <usbPoll+0x200>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    533c:	83 ec       	ldi	r24, 0xC3	; 195
    533e:	80 93 e9 07 	sts	0x07E9, r24	; 0x8007e9 <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    5342:	8a e5       	ldi	r24, 0x5A	; 90
    5344:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <usbTxLen>
        usbMsgFlags = 0;
    5348:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
    534c:	88 81       	ld	r24, Y
    534e:	98 2f       	mov	r25, r24
    5350:	90 76       	andi	r25, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    5352:	21 f0       	breq	.+8      	; 0x535c <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
    5354:	ce 01       	movw	r24, r28
    5356:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <usbFunctionSetup>
    535a:	b4 c0       	rjmp	.+360    	; 0x54c4 <usbPoll+0x1b8>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    535c:	2a 81       	ldd	r18, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
    535e:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    5360:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
    5364:	99 81       	ldd	r25, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    5366:	91 11       	cpse	r25, r1
    5368:	13 c0       	rjmp	.+38     	; 0x5390 <usbPoll+0x84>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
    536a:	8f 71       	andi	r24, 0x1F	; 31
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
    536c:	82 30       	cpi	r24, 0x02	; 2
    536e:	51 f4       	brne	.+20     	; 0x5384 <usbPoll+0x78>
    5370:	31 38       	cpi	r19, 0x81	; 129
    5372:	41 f4       	brne	.+16     	; 0x5384 <usbPoll+0x78>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
    5374:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <usbTxStatus1>
    5378:	81 e0       	ldi	r24, 0x01	; 1
    537a:	9e 31       	cpi	r25, 0x1E	; 30
    537c:	09 f0       	breq	.+2      	; 0x5380 <usbPoll+0x74>
    537e:	80 e0       	ldi	r24, 0x00	; 0
    5380:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <usbTxBuf+0x9>
#endif
        dataPtr[1] = 0;
    5384:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5388:	22 ef       	ldi	r18, 0xF2	; 242
    538a:	37 e0       	ldi	r19, 0x07	; 7
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
    538c:	82 e0       	ldi	r24, 0x02	; 2
    538e:	96 c0       	rjmp	.+300    	; 0x54bc <usbPoll+0x1b0>
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
    5390:	89 2f       	mov	r24, r25
    5392:	8d 7f       	andi	r24, 0xFD	; 253
    5394:	81 30       	cpi	r24, 0x01	; 1
    5396:	99 f4       	brne	.+38     	; 0x53be <usbPoll+0xb2>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
    5398:	21 11       	cpse	r18, r1
    539a:	7d c0       	rjmp	.+250    	; 0x5496 <usbPoll+0x18a>
    539c:	31 38       	cpi	r19, 0x81	; 129
    539e:	09 f0       	breq	.+2      	; 0x53a2 <usbPoll+0x96>
    53a0:	7e c0       	rjmp	.+252    	; 0x549e <usbPoll+0x192>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
    53a2:	91 30       	cpi	r25, 0x01	; 1
    53a4:	11 f0       	breq	.+4      	; 0x53aa <usbPoll+0x9e>
    53a6:	8e e1       	ldi	r24, 0x1E	; 30
    53a8:	01 c0       	rjmp	.+2      	; 0x53ac <usbPoll+0xa0>
    53aa:	8a e5       	ldi	r24, 0x5A	; 90
    53ac:	ec e7       	ldi	r30, 0x7C	; 124
    53ae:	f5 e0       	ldi	r31, 0x05	; 5
    53b0:	80 83       	st	Z, r24
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    53b2:	8b e4       	ldi	r24, 0x4B	; 75
    53b4:	81 83       	std	Z+1, r24	; 0x01
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    53b6:	22 ef       	ldi	r18, 0xF2	; 242
    53b8:	37 e0       	ldi	r19, 0x07	; 7
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    53ba:	80 e0       	ldi	r24, 0x00	; 0
    53bc:	7f c0       	rjmp	.+254    	; 0x54bc <usbPoll+0x1b0>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    53be:	95 30       	cpi	r25, 0x05	; 5
    53c0:	31 f4       	brne	.+12     	; 0x53ce <usbPoll+0xc2>
        usbNewDeviceAddr = value;
    53c2:	20 93 fa 07 	sts	0x07FA, r18	; 0x8007fa <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    53c6:	22 ef       	ldi	r18, 0xF2	; 242
    53c8:	37 e0       	ldi	r19, 0x07	; 7
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    53ca:	80 e0       	ldi	r24, 0x00	; 0
    53cc:	77 c0       	rjmp	.+238    	; 0x54bc <usbPoll+0x1b0>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    53ce:	96 30       	cpi	r25, 0x06	; 6
    53d0:	09 f0       	breq	.+2      	; 0x53d4 <usbPoll+0xc8>
    53d2:	46 c0       	rjmp	.+140    	; 0x5460 <usbPoll+0x154>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    53d4:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    53d6:	81 30       	cpi	r24, 0x01	; 1
    53d8:	41 f4       	brne	.+16     	; 0x53ea <usbPoll+0xde>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    53da:	87 ef       	ldi	r24, 0xF7	; 247
    53dc:	9c e0       	ldi	r25, 0x0C	; 12
    53de:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <usbMsgPtr+0x1>
    53e2:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <usbMsgPtr>
    53e6:	82 e1       	ldi	r24, 0x12	; 18
    53e8:	37 c0       	rjmp	.+110    	; 0x5458 <usbPoll+0x14c>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    53ea:	82 30       	cpi	r24, 0x02	; 2
    53ec:	41 f4       	brne	.+16     	; 0x53fe <usbPoll+0xf2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    53ee:	8e ed       	ldi	r24, 0xDE	; 222
    53f0:	9c e0       	ldi	r25, 0x0C	; 12
    53f2:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <usbMsgPtr+0x1>
    53f6:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <usbMsgPtr>
    53fa:	89 e1       	ldi	r24, 0x19	; 25
    53fc:	2d c0       	rjmp	.+90     	; 0x5458 <usbPoll+0x14c>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    53fe:	83 30       	cpi	r24, 0x03	; 3
    5400:	41 f5       	brne	.+80     	; 0x5452 <usbPoll+0x146>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
    5402:	21 11       	cpse	r18, r1
    5404:	08 c0       	rjmp	.+16     	; 0x5416 <usbPoll+0x10a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    5406:	81 e5       	ldi	r24, 0x51	; 81
    5408:	9d e0       	ldi	r25, 0x0D	; 13
    540a:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <usbMsgPtr+0x1>
    540e:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <usbMsgPtr>
    5412:	84 e0       	ldi	r24, 0x04	; 4
    5414:	21 c0       	rjmp	.+66     	; 0x5458 <usbPoll+0x14c>
        SWITCH_CASE(1)
    5416:	21 30       	cpi	r18, 0x01	; 1
    5418:	41 f4       	brne	.+16     	; 0x542a <usbPoll+0x11e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    541a:	83 e4       	ldi	r24, 0x43	; 67
    541c:	9d e0       	ldi	r25, 0x0D	; 13
    541e:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <usbMsgPtr+0x1>
    5422:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <usbMsgPtr>
    5426:	8e e0       	ldi	r24, 0x0E	; 14
    5428:	17 c0       	rjmp	.+46     	; 0x5458 <usbPoll+0x14c>
        SWITCH_CASE(2)
    542a:	22 30       	cpi	r18, 0x02	; 2
    542c:	41 f4       	brne	.+16     	; 0x543e <usbPoll+0x132>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    542e:	89 e1       	ldi	r24, 0x19	; 25
    5430:	9d e0       	ldi	r25, 0x0D	; 13
    5432:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <usbMsgPtr+0x1>
    5436:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <usbMsgPtr>
    543a:	8a e2       	ldi	r24, 0x2A	; 42
    543c:	0d c0       	rjmp	.+26     	; 0x5458 <usbPoll+0x14c>
        SWITCH_CASE(3)
    543e:	23 30       	cpi	r18, 0x03	; 3
    5440:	51 f4       	brne	.+20     	; 0x5456 <usbPoll+0x14a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
    5442:	89 e0       	ldi	r24, 0x09	; 9
    5444:	9d e0       	ldi	r25, 0x0D	; 13
    5446:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <usbMsgPtr+0x1>
    544a:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <usbMsgPtr>
    544e:	80 e1       	ldi	r24, 0x10	; 16
    5450:	03 c0       	rjmp	.+6      	; 0x5458 <usbPoll+0x14c>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5452:	80 e0       	ldi	r24, 0x00	; 0
    5454:	01 c0       	rjmp	.+2      	; 0x5458 <usbPoll+0x14c>
    5456:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    5458:	90 e4       	ldi	r25, 0x40	; 64
    545a:	90 93 c8 05 	sts	0x05C8, r25	; 0x8005c8 <usbMsgFlags>
    545e:	32 c0       	rjmp	.+100    	; 0x54c4 <usbPoll+0x1b8>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    5460:	98 30       	cpi	r25, 0x08	; 8
    5462:	09 f1       	breq	.+66     	; 0x54a6 <usbPoll+0x19a>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    5464:	99 30       	cpi	r25, 0x09	; 9
    5466:	49 f4       	brne	.+18     	; 0x547a <usbPoll+0x16e>
        usbConfiguration = value;
    5468:	20 93 fc 07 	sts	0x07FC, r18	; 0x8007fc <usbConfiguration>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    546c:	8a e5       	ldi	r24, 0x5A	; 90
    546e:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <usbTxStatus1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5472:	22 ef       	ldi	r18, 0xF2	; 242
    5474:	37 e0       	ldi	r19, 0x07	; 7
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5476:	80 e0       	ldi	r24, 0x00	; 0
    5478:	21 c0       	rjmp	.+66     	; 0x54bc <usbPoll+0x1b0>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    547a:	9a 30       	cpi	r25, 0x0A	; 10
    547c:	c1 f0       	breq	.+48     	; 0x54ae <usbPoll+0x1a2>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    547e:	9b 30       	cpi	r25, 0x0B	; 11
    5480:	d1 f4       	brne	.+52     	; 0x54b6 <usbPoll+0x1aa>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    5482:	ec e7       	ldi	r30, 0x7C	; 124
    5484:	f5 e0       	ldi	r31, 0x05	; 5
    5486:	8b e4       	ldi	r24, 0x4B	; 75
    5488:	81 83       	std	Z+1, r24	; 0x01
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    548a:	8a e5       	ldi	r24, 0x5A	; 90
    548c:	80 83       	st	Z, r24
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    548e:	22 ef       	ldi	r18, 0xF2	; 242
    5490:	37 e0       	ldi	r19, 0x07	; 7
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5492:	80 e0       	ldi	r24, 0x00	; 0
    5494:	13 c0       	rjmp	.+38     	; 0x54bc <usbPoll+0x1b0>
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5496:	22 ef       	ldi	r18, 0xF2	; 242
    5498:	37 e0       	ldi	r19, 0x07	; 7
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    549a:	80 e0       	ldi	r24, 0x00	; 0
    549c:	0f c0       	rjmp	.+30     	; 0x54bc <usbPoll+0x1b0>
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    549e:	22 ef       	ldi	r18, 0xF2	; 242
    54a0:	37 e0       	ldi	r19, 0x07	; 7
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    54a2:	80 e0       	ldi	r24, 0x00	; 0
    54a4:	0b c0       	rjmp	.+22     	; 0x54bc <usbPoll+0x1b0>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
    54a6:	2c ef       	ldi	r18, 0xFC	; 252
    54a8:	37 e0       	ldi	r19, 0x07	; 7
        len = 1;
    54aa:	81 e0       	ldi	r24, 0x01	; 1
    54ac:	07 c0       	rjmp	.+14     	; 0x54bc <usbPoll+0x1b0>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    54ae:	22 ef       	ldi	r18, 0xF2	; 242
    54b0:	37 e0       	ldi	r19, 0x07	; 7
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
    54b2:	81 e0       	ldi	r24, 0x01	; 1
    54b4:	03 c0       	rjmp	.+6      	; 0x54bc <usbPoll+0x1b0>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    54b6:	22 ef       	ldi	r18, 0xF2	; 242
    54b8:	37 e0       	ldi	r19, 0x07	; 7
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    54ba:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
    54bc:	30 93 f8 07 	sts	0x07F8, r19	; 0x8007f8 <usbMsgPtr+0x1>
    54c0:	20 93 f7 07 	sts	0x07F7, r18	; 0x8007f7 <usbMsgPtr>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
    54c4:	8f 3f       	cpi	r24, 0xFF	; 255
    54c6:	41 f4       	brne	.+16     	; 0x54d8 <usbPoll+0x1cc>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
    54c8:	98 81       	ld	r25, Y
    54ca:	99 23       	and	r25, r25
    54cc:	0c f4       	brge	.+2      	; 0x54d0 <usbPoll+0x1c4>
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
    54ce:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
    54d0:	90 e8       	ldi	r25, 0x80	; 128
    54d2:	90 93 c8 05 	sts	0x05C8, r25	; 0x8005c8 <usbMsgFlags>
    54d6:	07 c0       	rjmp	.+14     	; 0x54e6 <usbPoll+0x1da>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    54d8:	9f 81       	ldd	r25, Y+7	; 0x07
    54da:	91 11       	cpse	r25, r1
    54dc:	04 c0       	rjmp	.+8      	; 0x54e6 <usbPoll+0x1da>
    54de:	9e 81       	ldd	r25, Y+6	; 0x06
    54e0:	98 17       	cp	r25, r24
    54e2:	08 f4       	brcc	.+2      	; 0x54e6 <usbPoll+0x1da>
    54e4:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    54e6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <usbMsgLen>
    54ea:	10 c0       	rjmp	.+32     	; 0x550c <usbPoll+0x200>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    54ec:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <usbMsgFlags>
    54f0:	88 23       	and	r24, r24
    54f2:	64 f4       	brge	.+24     	; 0x550c <usbPoll+0x200>
            uchar rval = usbFunctionWrite(data, len);
    54f4:	ce 01       	movw	r24, r28
    54f6:	0e 94 0d 29 	call	0x521a	; 0x521a <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
    54fa:	8f 3f       	cpi	r24, 0xFF	; 255
    54fc:	21 f4       	brne	.+8      	; 0x5506 <usbPoll+0x1fa>
                usbTxLen = USBPID_STALL;
    54fe:	8e e1       	ldi	r24, 0x1E	; 30
    5500:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <usbTxLen>
    5504:	03 c0       	rjmp	.+6      	; 0x550c <usbPoll+0x200>
            }else if(rval != 0){    /* This was the final package */
    5506:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
    5508:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    550c:	10 92 f9 07 	sts	0x07F9, r1	; 0x8007f9 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    5510:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <usbTxLen>
    5514:	84 ff       	sbrs	r24, 4
    5516:	5c c0       	rjmp	.+184    	; 0x55d0 <usbPoll+0x2c4>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    5518:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <usbMsgLen>
    551c:	9f 3f       	cpi	r25, 0xFF	; 255
    551e:	09 f4       	brne	.+2      	; 0x5522 <usbPoll+0x216>
    5520:	57 c0       	rjmp	.+174    	; 0x55d0 <usbPoll+0x2c4>
    5522:	c9 2f       	mov	r28, r25
    5524:	99 30       	cpi	r25, 0x09	; 9
    5526:	08 f0       	brcs	.+2      	; 0x552a <usbPoll+0x21e>
    5528:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    552a:	9c 1b       	sub	r25, r28
    552c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    5530:	e9 ee       	ldi	r30, 0xE9	; 233
    5532:	f7 e0       	ldi	r31, 0x07	; 7
    5534:	90 81       	ld	r25, Z
    5536:	88 e8       	ldi	r24, 0x88	; 136
    5538:	89 27       	eor	r24, r25
    553a:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    553c:	cc 23       	and	r28, r28
    553e:	09 f4       	brne	.+2      	; 0x5542 <usbPoll+0x236>
    5540:	58 c0       	rjmp	.+176    	; 0x55f2 <usbPoll+0x2e6>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    5542:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <usbMsgFlags>
    5546:	88 23       	and	r24, r24
    5548:	3c f4       	brge	.+14     	; 0x5558 <usbPoll+0x24c>
            len = usbFunctionRead(data, len);
    554a:	6c 2f       	mov	r22, r28
    554c:	8a ee       	ldi	r24, 0xEA	; 234
    554e:	97 e0       	ldi	r25, 0x07	; 7
    5550:	0e 94 20 28 	call	0x5040	; 0x5040 <usbFunctionRead>
    5554:	c8 2f       	mov	r28, r24
    5556:	28 c0       	rjmp	.+80     	; 0x55a8 <usbPoll+0x29c>
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
    5558:	20 91 f7 07 	lds	r18, 0x07F7	; 0x8007f7 <usbMsgPtr>
    555c:	30 91 f8 07 	lds	r19, 0x07F8	; 0x8007f8 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    5560:	86 ff       	sbrs	r24, 6
    5562:	10 c0       	rjmp	.+32     	; 0x5584 <usbPoll+0x278>
    5564:	aa ee       	ldi	r26, 0xEA	; 234
    5566:	b7 e0       	ldi	r27, 0x07	; 7
    5568:	f9 01       	movw	r30, r18
    556a:	9c 2f       	mov	r25, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    556c:	84 91       	lpm	r24, Z
                    *data++ = c;
    556e:	8d 93       	st	X+, r24
                    r++;
    5570:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
    5572:	91 50       	subi	r25, 0x01	; 1
    5574:	d9 f7       	brne	.-10     	; 0x556c <usbPoll+0x260>
    5576:	2f 5f       	subi	r18, 0xFF	; 255
    5578:	3f 4f       	sbci	r19, 0xFF	; 255
    557a:	8f ef       	ldi	r24, 0xFF	; 255
    557c:	8c 0f       	add	r24, r28
    557e:	28 0f       	add	r18, r24
    5580:	31 1d       	adc	r19, r1
    5582:	0e c0       	rjmp	.+28     	; 0x55a0 <usbPoll+0x294>
    5584:	aa ee       	ldi	r26, 0xEA	; 234
    5586:	b7 e0       	ldi	r27, 0x07	; 7
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    5588:	f9 01       	movw	r30, r18
    558a:	9c 2f       	mov	r25, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
    558c:	81 91       	ld	r24, Z+
    558e:	8d 93       	st	X+, r24
                    r++;
                }while(--i);
    5590:	91 50       	subi	r25, 0x01	; 1
    5592:	e1 f7       	brne	.-8      	; 0x558c <usbPoll+0x280>
    5594:	2f 5f       	subi	r18, 0xFF	; 255
    5596:	3f 4f       	sbci	r19, 0xFF	; 255
    5598:	8f ef       	ldi	r24, 0xFF	; 255
    559a:	8c 0f       	add	r24, r28
    559c:	28 0f       	add	r18, r24
    559e:	31 1d       	adc	r19, r1
            }
            usbMsgPtr = r;
    55a0:	30 93 f8 07 	sts	0x07F8, r19	; 0x8007f8 <usbMsgPtr+0x1>
    55a4:	20 93 f7 07 	sts	0x07F7, r18	; 0x8007f7 <usbMsgPtr>
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
    55a8:	c9 30       	cpi	r28, 0x09	; 9
    55aa:	60 f4       	brcc	.+24     	; 0x55c4 <usbPoll+0x2b8>
        usbCrc16Append(&usbTxBuf[1], len);
    55ac:	6c 2f       	mov	r22, r28
    55ae:	8a ee       	ldi	r24, 0xEA	; 234
    55b0:	97 e0       	ldi	r25, 0x07	; 7
    55b2:	0e 94 ef 06 	call	0xdde	; 0xdde <usbCrc16Append>
        len += 4;           /* length including sync byte */
    55b6:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    55b8:	cc 30       	cpi	r28, 0x0C	; 12
    55ba:	40 f4       	brcc	.+16     	; 0x55cc <usbPoll+0x2c0>
            usbMsgLen = USB_NO_MSG;
    55bc:	8f ef       	ldi	r24, 0xFF	; 255
    55be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <usbMsgLen>
    55c2:	04 c0       	rjmp	.+8      	; 0x55cc <usbPoll+0x2c0>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    55c4:	8f ef       	ldi	r24, 0xFF	; 255
    55c6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <usbMsgLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
    55ca:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    55cc:	c0 93 0d 01 	sts	0x010D, r28	; 0x80010d <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    55d0:	86 b1       	in	r24, 0x06	; 6
    55d2:	8c 70       	andi	r24, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
    55d4:	a9 f4       	brne	.+42     	; 0x5600 <usbPoll+0x2f4>
    55d6:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    55d8:	86 b1       	in	r24, 0x06	; 6
    55da:	8c 70       	andi	r24, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
    55dc:	89 f4       	brne	.+34     	; 0x5600 <usbPoll+0x2f4>
    55de:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    55e0:	d9 f7       	brne	.-10     	; 0x55d8 <usbPoll+0x2cc>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    55e2:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <usbNewDeviceAddr>
    usbDeviceAddr = 0;
    55e6:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <usbDeviceAddr>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    55ea:	8a e5       	ldi	r24, 0x5A	; 90
    55ec:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <usbTxStatus1>
    55f0:	07 c0       	rjmp	.+14     	; 0x5600 <usbPoll+0x2f4>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    55f2:	60 e0       	ldi	r22, 0x00	; 0
    55f4:	8a ee       	ldi	r24, 0xEA	; 234
    55f6:	97 e0       	ldi	r25, 0x07	; 7
    55f8:	0e 94 ef 06 	call	0xdde	; 0xdde <usbCrc16Append>
        len += 4;           /* length including sync byte */
    55fc:	c4 e0       	ldi	r28, 0x04	; 4
    55fe:	de cf       	rjmp	.-68     	; 0x55bc <usbPoll+0x2b0>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    5600:	df 91       	pop	r29
    5602:	cf 91       	pop	r28
    5604:	08 95       	ret

00005606 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    5606:	e9 e6       	ldi	r30, 0x69	; 105
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	80 81       	ld	r24, Z
    560c:	83 60       	ori	r24, 0x03	; 3
    560e:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    5610:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    5612:	ec e7       	ldi	r30, 0x7C	; 124
    5614:	f5 e0       	ldi	r31, 0x05	; 5
    5616:	8b e4       	ldi	r24, 0x4B	; 75
    5618:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    561a:	8a e5       	ldi	r24, 0x5A	; 90
    561c:	80 83       	st	Z, r24
    561e:	08 95       	ret

00005620 <__subsf3>:
    5620:	50 58       	subi	r21, 0x80	; 128

00005622 <__addsf3>:
    5622:	bb 27       	eor	r27, r27
    5624:	aa 27       	eor	r26, r26
    5626:	0e 94 28 2b 	call	0x5650	; 0x5650 <__addsf3x>
    562a:	0c 94 db 2c 	jmp	0x59b6	; 0x59b6 <__fp_round>
    562e:	0e 94 cd 2c 	call	0x599a	; 0x599a <__fp_pscA>
    5632:	38 f0       	brcs	.+14     	; 0x5642 <__addsf3+0x20>
    5634:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <__fp_pscB>
    5638:	20 f0       	brcs	.+8      	; 0x5642 <__addsf3+0x20>
    563a:	39 f4       	brne	.+14     	; 0x564a <__addsf3+0x28>
    563c:	9f 3f       	cpi	r25, 0xFF	; 255
    563e:	19 f4       	brne	.+6      	; 0x5646 <__addsf3+0x24>
    5640:	26 f4       	brtc	.+8      	; 0x564a <__addsf3+0x28>
    5642:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__fp_nan>
    5646:	0e f4       	brtc	.+2      	; 0x564a <__addsf3+0x28>
    5648:	e0 95       	com	r30
    564a:	e7 fb       	bst	r30, 7
    564c:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__fp_inf>

00005650 <__addsf3x>:
    5650:	e9 2f       	mov	r30, r25
    5652:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fp_split3>
    5656:	58 f3       	brcs	.-42     	; 0x562e <__addsf3+0xc>
    5658:	ba 17       	cp	r27, r26
    565a:	62 07       	cpc	r22, r18
    565c:	73 07       	cpc	r23, r19
    565e:	84 07       	cpc	r24, r20
    5660:	95 07       	cpc	r25, r21
    5662:	20 f0       	brcs	.+8      	; 0x566c <__addsf3x+0x1c>
    5664:	79 f4       	brne	.+30     	; 0x5684 <__addsf3x+0x34>
    5666:	a6 f5       	brtc	.+104    	; 0x56d0 <__addsf3x+0x80>
    5668:	0c 94 26 2d 	jmp	0x5a4c	; 0x5a4c <__fp_zero>
    566c:	0e f4       	brtc	.+2      	; 0x5670 <__addsf3x+0x20>
    566e:	e0 95       	com	r30
    5670:	0b 2e       	mov	r0, r27
    5672:	ba 2f       	mov	r27, r26
    5674:	a0 2d       	mov	r26, r0
    5676:	0b 01       	movw	r0, r22
    5678:	b9 01       	movw	r22, r18
    567a:	90 01       	movw	r18, r0
    567c:	0c 01       	movw	r0, r24
    567e:	ca 01       	movw	r24, r20
    5680:	a0 01       	movw	r20, r0
    5682:	11 24       	eor	r1, r1
    5684:	ff 27       	eor	r31, r31
    5686:	59 1b       	sub	r21, r25
    5688:	99 f0       	breq	.+38     	; 0x56b0 <__addsf3x+0x60>
    568a:	59 3f       	cpi	r21, 0xF9	; 249
    568c:	50 f4       	brcc	.+20     	; 0x56a2 <__addsf3x+0x52>
    568e:	50 3e       	cpi	r21, 0xE0	; 224
    5690:	68 f1       	brcs	.+90     	; 0x56ec <__addsf3x+0x9c>
    5692:	1a 16       	cp	r1, r26
    5694:	f0 40       	sbci	r31, 0x00	; 0
    5696:	a2 2f       	mov	r26, r18
    5698:	23 2f       	mov	r18, r19
    569a:	34 2f       	mov	r19, r20
    569c:	44 27       	eor	r20, r20
    569e:	58 5f       	subi	r21, 0xF8	; 248
    56a0:	f3 cf       	rjmp	.-26     	; 0x5688 <__addsf3x+0x38>
    56a2:	46 95       	lsr	r20
    56a4:	37 95       	ror	r19
    56a6:	27 95       	ror	r18
    56a8:	a7 95       	ror	r26
    56aa:	f0 40       	sbci	r31, 0x00	; 0
    56ac:	53 95       	inc	r21
    56ae:	c9 f7       	brne	.-14     	; 0x56a2 <__addsf3x+0x52>
    56b0:	7e f4       	brtc	.+30     	; 0x56d0 <__addsf3x+0x80>
    56b2:	1f 16       	cp	r1, r31
    56b4:	ba 0b       	sbc	r27, r26
    56b6:	62 0b       	sbc	r22, r18
    56b8:	73 0b       	sbc	r23, r19
    56ba:	84 0b       	sbc	r24, r20
    56bc:	ba f0       	brmi	.+46     	; 0x56ec <__addsf3x+0x9c>
    56be:	91 50       	subi	r25, 0x01	; 1
    56c0:	a1 f0       	breq	.+40     	; 0x56ea <__addsf3x+0x9a>
    56c2:	ff 0f       	add	r31, r31
    56c4:	bb 1f       	adc	r27, r27
    56c6:	66 1f       	adc	r22, r22
    56c8:	77 1f       	adc	r23, r23
    56ca:	88 1f       	adc	r24, r24
    56cc:	c2 f7       	brpl	.-16     	; 0x56be <__addsf3x+0x6e>
    56ce:	0e c0       	rjmp	.+28     	; 0x56ec <__addsf3x+0x9c>
    56d0:	ba 0f       	add	r27, r26
    56d2:	62 1f       	adc	r22, r18
    56d4:	73 1f       	adc	r23, r19
    56d6:	84 1f       	adc	r24, r20
    56d8:	48 f4       	brcc	.+18     	; 0x56ec <__addsf3x+0x9c>
    56da:	87 95       	ror	r24
    56dc:	77 95       	ror	r23
    56de:	67 95       	ror	r22
    56e0:	b7 95       	ror	r27
    56e2:	f7 95       	ror	r31
    56e4:	9e 3f       	cpi	r25, 0xFE	; 254
    56e6:	08 f0       	brcs	.+2      	; 0x56ea <__addsf3x+0x9a>
    56e8:	b0 cf       	rjmp	.-160    	; 0x564a <__addsf3+0x28>
    56ea:	93 95       	inc	r25
    56ec:	88 0f       	add	r24, r24
    56ee:	08 f0       	brcs	.+2      	; 0x56f2 <__addsf3x+0xa2>
    56f0:	99 27       	eor	r25, r25
    56f2:	ee 0f       	add	r30, r30
    56f4:	97 95       	ror	r25
    56f6:	87 95       	ror	r24
    56f8:	08 95       	ret

000056fa <__cmpsf2>:
    56fa:	0e 94 77 2c 	call	0x58ee	; 0x58ee <__fp_cmp>
    56fe:	08 f4       	brcc	.+2      	; 0x5702 <__cmpsf2+0x8>
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	08 95       	ret

00005704 <__divsf3>:
    5704:	0e 94 96 2b 	call	0x572c	; 0x572c <__divsf3x>
    5708:	0c 94 db 2c 	jmp	0x59b6	; 0x59b6 <__fp_round>
    570c:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <__fp_pscB>
    5710:	58 f0       	brcs	.+22     	; 0x5728 <__divsf3+0x24>
    5712:	0e 94 cd 2c 	call	0x599a	; 0x599a <__fp_pscA>
    5716:	40 f0       	brcs	.+16     	; 0x5728 <__divsf3+0x24>
    5718:	29 f4       	brne	.+10     	; 0x5724 <__divsf3+0x20>
    571a:	5f 3f       	cpi	r21, 0xFF	; 255
    571c:	29 f0       	breq	.+10     	; 0x5728 <__divsf3+0x24>
    571e:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__fp_inf>
    5722:	51 11       	cpse	r21, r1
    5724:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__fp_szero>
    5728:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__fp_nan>

0000572c <__divsf3x>:
    572c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fp_split3>
    5730:	68 f3       	brcs	.-38     	; 0x570c <__divsf3+0x8>

00005732 <__divsf3_pse>:
    5732:	99 23       	and	r25, r25
    5734:	b1 f3       	breq	.-20     	; 0x5722 <__divsf3+0x1e>
    5736:	55 23       	and	r21, r21
    5738:	91 f3       	breq	.-28     	; 0x571e <__divsf3+0x1a>
    573a:	95 1b       	sub	r25, r21
    573c:	55 0b       	sbc	r21, r21
    573e:	bb 27       	eor	r27, r27
    5740:	aa 27       	eor	r26, r26
    5742:	62 17       	cp	r22, r18
    5744:	73 07       	cpc	r23, r19
    5746:	84 07       	cpc	r24, r20
    5748:	38 f0       	brcs	.+14     	; 0x5758 <__divsf3_pse+0x26>
    574a:	9f 5f       	subi	r25, 0xFF	; 255
    574c:	5f 4f       	sbci	r21, 0xFF	; 255
    574e:	22 0f       	add	r18, r18
    5750:	33 1f       	adc	r19, r19
    5752:	44 1f       	adc	r20, r20
    5754:	aa 1f       	adc	r26, r26
    5756:	a9 f3       	breq	.-22     	; 0x5742 <__divsf3_pse+0x10>
    5758:	35 d0       	rcall	.+106    	; 0x57c4 <__divsf3_pse+0x92>
    575a:	0e 2e       	mov	r0, r30
    575c:	3a f0       	brmi	.+14     	; 0x576c <__divsf3_pse+0x3a>
    575e:	e0 e8       	ldi	r30, 0x80	; 128
    5760:	32 d0       	rcall	.+100    	; 0x57c6 <__divsf3_pse+0x94>
    5762:	91 50       	subi	r25, 0x01	; 1
    5764:	50 40       	sbci	r21, 0x00	; 0
    5766:	e6 95       	lsr	r30
    5768:	00 1c       	adc	r0, r0
    576a:	ca f7       	brpl	.-14     	; 0x575e <__divsf3_pse+0x2c>
    576c:	2b d0       	rcall	.+86     	; 0x57c4 <__divsf3_pse+0x92>
    576e:	fe 2f       	mov	r31, r30
    5770:	29 d0       	rcall	.+82     	; 0x57c4 <__divsf3_pse+0x92>
    5772:	66 0f       	add	r22, r22
    5774:	77 1f       	adc	r23, r23
    5776:	88 1f       	adc	r24, r24
    5778:	bb 1f       	adc	r27, r27
    577a:	26 17       	cp	r18, r22
    577c:	37 07       	cpc	r19, r23
    577e:	48 07       	cpc	r20, r24
    5780:	ab 07       	cpc	r26, r27
    5782:	b0 e8       	ldi	r27, 0x80	; 128
    5784:	09 f0       	breq	.+2      	; 0x5788 <__divsf3_pse+0x56>
    5786:	bb 0b       	sbc	r27, r27
    5788:	80 2d       	mov	r24, r0
    578a:	bf 01       	movw	r22, r30
    578c:	ff 27       	eor	r31, r31
    578e:	93 58       	subi	r25, 0x83	; 131
    5790:	5f 4f       	sbci	r21, 0xFF	; 255
    5792:	3a f0       	brmi	.+14     	; 0x57a2 <__divsf3_pse+0x70>
    5794:	9e 3f       	cpi	r25, 0xFE	; 254
    5796:	51 05       	cpc	r21, r1
    5798:	78 f0       	brcs	.+30     	; 0x57b8 <__divsf3_pse+0x86>
    579a:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__fp_inf>
    579e:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__fp_szero>
    57a2:	5f 3f       	cpi	r21, 0xFF	; 255
    57a4:	e4 f3       	brlt	.-8      	; 0x579e <__divsf3_pse+0x6c>
    57a6:	98 3e       	cpi	r25, 0xE8	; 232
    57a8:	d4 f3       	brlt	.-12     	; 0x579e <__divsf3_pse+0x6c>
    57aa:	86 95       	lsr	r24
    57ac:	77 95       	ror	r23
    57ae:	67 95       	ror	r22
    57b0:	b7 95       	ror	r27
    57b2:	f7 95       	ror	r31
    57b4:	9f 5f       	subi	r25, 0xFF	; 255
    57b6:	c9 f7       	brne	.-14     	; 0x57aa <__divsf3_pse+0x78>
    57b8:	88 0f       	add	r24, r24
    57ba:	91 1d       	adc	r25, r1
    57bc:	96 95       	lsr	r25
    57be:	87 95       	ror	r24
    57c0:	97 f9       	bld	r25, 7
    57c2:	08 95       	ret
    57c4:	e1 e0       	ldi	r30, 0x01	; 1
    57c6:	66 0f       	add	r22, r22
    57c8:	77 1f       	adc	r23, r23
    57ca:	88 1f       	adc	r24, r24
    57cc:	bb 1f       	adc	r27, r27
    57ce:	62 17       	cp	r22, r18
    57d0:	73 07       	cpc	r23, r19
    57d2:	84 07       	cpc	r24, r20
    57d4:	ba 07       	cpc	r27, r26
    57d6:	20 f0       	brcs	.+8      	; 0x57e0 <__divsf3_pse+0xae>
    57d8:	62 1b       	sub	r22, r18
    57da:	73 0b       	sbc	r23, r19
    57dc:	84 0b       	sbc	r24, r20
    57de:	ba 0b       	sbc	r27, r26
    57e0:	ee 1f       	adc	r30, r30
    57e2:	88 f7       	brcc	.-30     	; 0x57c6 <__divsf3_pse+0x94>
    57e4:	e0 95       	com	r30
    57e6:	08 95       	ret

000057e8 <__fixunssfsi>:
    57e8:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fp_splitA>
    57ec:	88 f0       	brcs	.+34     	; 0x5810 <__fixunssfsi+0x28>
    57ee:	9f 57       	subi	r25, 0x7F	; 127
    57f0:	98 f0       	brcs	.+38     	; 0x5818 <__fixunssfsi+0x30>
    57f2:	b9 2f       	mov	r27, r25
    57f4:	99 27       	eor	r25, r25
    57f6:	b7 51       	subi	r27, 0x17	; 23
    57f8:	b0 f0       	brcs	.+44     	; 0x5826 <__fixunssfsi+0x3e>
    57fa:	e1 f0       	breq	.+56     	; 0x5834 <__fixunssfsi+0x4c>
    57fc:	66 0f       	add	r22, r22
    57fe:	77 1f       	adc	r23, r23
    5800:	88 1f       	adc	r24, r24
    5802:	99 1f       	adc	r25, r25
    5804:	1a f0       	brmi	.+6      	; 0x580c <__fixunssfsi+0x24>
    5806:	ba 95       	dec	r27
    5808:	c9 f7       	brne	.-14     	; 0x57fc <__fixunssfsi+0x14>
    580a:	14 c0       	rjmp	.+40     	; 0x5834 <__fixunssfsi+0x4c>
    580c:	b1 30       	cpi	r27, 0x01	; 1
    580e:	91 f0       	breq	.+36     	; 0x5834 <__fixunssfsi+0x4c>
    5810:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <__fp_zero>
    5814:	b1 e0       	ldi	r27, 0x01	; 1
    5816:	08 95       	ret
    5818:	0c 94 26 2d 	jmp	0x5a4c	; 0x5a4c <__fp_zero>
    581c:	67 2f       	mov	r22, r23
    581e:	78 2f       	mov	r23, r24
    5820:	88 27       	eor	r24, r24
    5822:	b8 5f       	subi	r27, 0xF8	; 248
    5824:	39 f0       	breq	.+14     	; 0x5834 <__fixunssfsi+0x4c>
    5826:	b9 3f       	cpi	r27, 0xF9	; 249
    5828:	cc f3       	brlt	.-14     	; 0x581c <__fixunssfsi+0x34>
    582a:	86 95       	lsr	r24
    582c:	77 95       	ror	r23
    582e:	67 95       	ror	r22
    5830:	b3 95       	inc	r27
    5832:	d9 f7       	brne	.-10     	; 0x582a <__fixunssfsi+0x42>
    5834:	3e f4       	brtc	.+14     	; 0x5844 <__fixunssfsi+0x5c>
    5836:	90 95       	com	r25
    5838:	80 95       	com	r24
    583a:	70 95       	com	r23
    583c:	61 95       	neg	r22
    583e:	7f 4f       	sbci	r23, 0xFF	; 255
    5840:	8f 4f       	sbci	r24, 0xFF	; 255
    5842:	9f 4f       	sbci	r25, 0xFF	; 255
    5844:	08 95       	ret

00005846 <__floatunsisf>:
    5846:	e8 94       	clt
    5848:	09 c0       	rjmp	.+18     	; 0x585c <__floatsisf+0x12>

0000584a <__floatsisf>:
    584a:	97 fb       	bst	r25, 7
    584c:	3e f4       	brtc	.+14     	; 0x585c <__floatsisf+0x12>
    584e:	90 95       	com	r25
    5850:	80 95       	com	r24
    5852:	70 95       	com	r23
    5854:	61 95       	neg	r22
    5856:	7f 4f       	sbci	r23, 0xFF	; 255
    5858:	8f 4f       	sbci	r24, 0xFF	; 255
    585a:	9f 4f       	sbci	r25, 0xFF	; 255
    585c:	99 23       	and	r25, r25
    585e:	a9 f0       	breq	.+42     	; 0x588a <__floatsisf+0x40>
    5860:	f9 2f       	mov	r31, r25
    5862:	96 e9       	ldi	r25, 0x96	; 150
    5864:	bb 27       	eor	r27, r27
    5866:	93 95       	inc	r25
    5868:	f6 95       	lsr	r31
    586a:	87 95       	ror	r24
    586c:	77 95       	ror	r23
    586e:	67 95       	ror	r22
    5870:	b7 95       	ror	r27
    5872:	f1 11       	cpse	r31, r1
    5874:	f8 cf       	rjmp	.-16     	; 0x5866 <__floatsisf+0x1c>
    5876:	fa f4       	brpl	.+62     	; 0x58b6 <__floatsisf+0x6c>
    5878:	bb 0f       	add	r27, r27
    587a:	11 f4       	brne	.+4      	; 0x5880 <__floatsisf+0x36>
    587c:	60 ff       	sbrs	r22, 0
    587e:	1b c0       	rjmp	.+54     	; 0x58b6 <__floatsisf+0x6c>
    5880:	6f 5f       	subi	r22, 0xFF	; 255
    5882:	7f 4f       	sbci	r23, 0xFF	; 255
    5884:	8f 4f       	sbci	r24, 0xFF	; 255
    5886:	9f 4f       	sbci	r25, 0xFF	; 255
    5888:	16 c0       	rjmp	.+44     	; 0x58b6 <__floatsisf+0x6c>
    588a:	88 23       	and	r24, r24
    588c:	11 f0       	breq	.+4      	; 0x5892 <__floatsisf+0x48>
    588e:	96 e9       	ldi	r25, 0x96	; 150
    5890:	11 c0       	rjmp	.+34     	; 0x58b4 <__floatsisf+0x6a>
    5892:	77 23       	and	r23, r23
    5894:	21 f0       	breq	.+8      	; 0x589e <__floatsisf+0x54>
    5896:	9e e8       	ldi	r25, 0x8E	; 142
    5898:	87 2f       	mov	r24, r23
    589a:	76 2f       	mov	r23, r22
    589c:	05 c0       	rjmp	.+10     	; 0x58a8 <__floatsisf+0x5e>
    589e:	66 23       	and	r22, r22
    58a0:	71 f0       	breq	.+28     	; 0x58be <__floatsisf+0x74>
    58a2:	96 e8       	ldi	r25, 0x86	; 134
    58a4:	86 2f       	mov	r24, r22
    58a6:	70 e0       	ldi	r23, 0x00	; 0
    58a8:	60 e0       	ldi	r22, 0x00	; 0
    58aa:	2a f0       	brmi	.+10     	; 0x58b6 <__floatsisf+0x6c>
    58ac:	9a 95       	dec	r25
    58ae:	66 0f       	add	r22, r22
    58b0:	77 1f       	adc	r23, r23
    58b2:	88 1f       	adc	r24, r24
    58b4:	da f7       	brpl	.-10     	; 0x58ac <__floatsisf+0x62>
    58b6:	88 0f       	add	r24, r24
    58b8:	96 95       	lsr	r25
    58ba:	87 95       	ror	r24
    58bc:	97 f9       	bld	r25, 7
    58be:	08 95       	ret

000058c0 <floor>:
    58c0:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <__fp_trunc>
    58c4:	90 f0       	brcs	.+36     	; 0x58ea <floor+0x2a>
    58c6:	9f 37       	cpi	r25, 0x7F	; 127
    58c8:	48 f4       	brcc	.+18     	; 0x58dc <floor+0x1c>
    58ca:	91 11       	cpse	r25, r1
    58cc:	16 f0       	brts	.+4      	; 0x58d2 <floor+0x12>
    58ce:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__fp_szero>
    58d2:	60 e0       	ldi	r22, 0x00	; 0
    58d4:	70 e0       	ldi	r23, 0x00	; 0
    58d6:	80 e8       	ldi	r24, 0x80	; 128
    58d8:	9f eb       	ldi	r25, 0xBF	; 191
    58da:	08 95       	ret
    58dc:	26 f4       	brtc	.+8      	; 0x58e6 <floor+0x26>
    58de:	1b 16       	cp	r1, r27
    58e0:	61 1d       	adc	r22, r1
    58e2:	71 1d       	adc	r23, r1
    58e4:	81 1d       	adc	r24, r1
    58e6:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <__fp_mintl>
    58ea:	0c 94 bc 2c 	jmp	0x5978	; 0x5978 <__fp_mpack>

000058ee <__fp_cmp>:
    58ee:	99 0f       	add	r25, r25
    58f0:	00 08       	sbc	r0, r0
    58f2:	55 0f       	add	r21, r21
    58f4:	aa 0b       	sbc	r26, r26
    58f6:	e0 e8       	ldi	r30, 0x80	; 128
    58f8:	fe ef       	ldi	r31, 0xFE	; 254
    58fa:	16 16       	cp	r1, r22
    58fc:	17 06       	cpc	r1, r23
    58fe:	e8 07       	cpc	r30, r24
    5900:	f9 07       	cpc	r31, r25
    5902:	c0 f0       	brcs	.+48     	; 0x5934 <__fp_cmp+0x46>
    5904:	12 16       	cp	r1, r18
    5906:	13 06       	cpc	r1, r19
    5908:	e4 07       	cpc	r30, r20
    590a:	f5 07       	cpc	r31, r21
    590c:	98 f0       	brcs	.+38     	; 0x5934 <__fp_cmp+0x46>
    590e:	62 1b       	sub	r22, r18
    5910:	73 0b       	sbc	r23, r19
    5912:	84 0b       	sbc	r24, r20
    5914:	95 0b       	sbc	r25, r21
    5916:	39 f4       	brne	.+14     	; 0x5926 <__fp_cmp+0x38>
    5918:	0a 26       	eor	r0, r26
    591a:	61 f0       	breq	.+24     	; 0x5934 <__fp_cmp+0x46>
    591c:	23 2b       	or	r18, r19
    591e:	24 2b       	or	r18, r20
    5920:	25 2b       	or	r18, r21
    5922:	21 f4       	brne	.+8      	; 0x592c <__fp_cmp+0x3e>
    5924:	08 95       	ret
    5926:	0a 26       	eor	r0, r26
    5928:	09 f4       	brne	.+2      	; 0x592c <__fp_cmp+0x3e>
    592a:	a1 40       	sbci	r26, 0x01	; 1
    592c:	a6 95       	lsr	r26
    592e:	8f ef       	ldi	r24, 0xFF	; 255
    5930:	81 1d       	adc	r24, r1
    5932:	81 1d       	adc	r24, r1
    5934:	08 95       	ret

00005936 <__fp_inf>:
    5936:	97 f9       	bld	r25, 7
    5938:	9f 67       	ori	r25, 0x7F	; 127
    593a:	80 e8       	ldi	r24, 0x80	; 128
    593c:	70 e0       	ldi	r23, 0x00	; 0
    593e:	60 e0       	ldi	r22, 0x00	; 0
    5940:	08 95       	ret

00005942 <__fp_mintl>:
    5942:	88 23       	and	r24, r24
    5944:	71 f4       	brne	.+28     	; 0x5962 <__fp_mintl+0x20>
    5946:	77 23       	and	r23, r23
    5948:	21 f0       	breq	.+8      	; 0x5952 <__fp_mintl+0x10>
    594a:	98 50       	subi	r25, 0x08	; 8
    594c:	87 2b       	or	r24, r23
    594e:	76 2f       	mov	r23, r22
    5950:	07 c0       	rjmp	.+14     	; 0x5960 <__fp_mintl+0x1e>
    5952:	66 23       	and	r22, r22
    5954:	11 f4       	brne	.+4      	; 0x595a <__fp_mintl+0x18>
    5956:	99 27       	eor	r25, r25
    5958:	0d c0       	rjmp	.+26     	; 0x5974 <__fp_mintl+0x32>
    595a:	90 51       	subi	r25, 0x10	; 16
    595c:	86 2b       	or	r24, r22
    595e:	70 e0       	ldi	r23, 0x00	; 0
    5960:	60 e0       	ldi	r22, 0x00	; 0
    5962:	2a f0       	brmi	.+10     	; 0x596e <__fp_mintl+0x2c>
    5964:	9a 95       	dec	r25
    5966:	66 0f       	add	r22, r22
    5968:	77 1f       	adc	r23, r23
    596a:	88 1f       	adc	r24, r24
    596c:	da f7       	brpl	.-10     	; 0x5964 <__fp_mintl+0x22>
    596e:	88 0f       	add	r24, r24
    5970:	96 95       	lsr	r25
    5972:	87 95       	ror	r24
    5974:	97 f9       	bld	r25, 7
    5976:	08 95       	ret

00005978 <__fp_mpack>:
    5978:	9f 3f       	cpi	r25, 0xFF	; 255
    597a:	31 f0       	breq	.+12     	; 0x5988 <__fp_mpack_finite+0xc>

0000597c <__fp_mpack_finite>:
    597c:	91 50       	subi	r25, 0x01	; 1
    597e:	20 f4       	brcc	.+8      	; 0x5988 <__fp_mpack_finite+0xc>
    5980:	87 95       	ror	r24
    5982:	77 95       	ror	r23
    5984:	67 95       	ror	r22
    5986:	b7 95       	ror	r27
    5988:	88 0f       	add	r24, r24
    598a:	91 1d       	adc	r25, r1
    598c:	96 95       	lsr	r25
    598e:	87 95       	ror	r24
    5990:	97 f9       	bld	r25, 7
    5992:	08 95       	ret

00005994 <__fp_nan>:
    5994:	9f ef       	ldi	r25, 0xFF	; 255
    5996:	80 ec       	ldi	r24, 0xC0	; 192
    5998:	08 95       	ret

0000599a <__fp_pscA>:
    599a:	00 24       	eor	r0, r0
    599c:	0a 94       	dec	r0
    599e:	16 16       	cp	r1, r22
    59a0:	17 06       	cpc	r1, r23
    59a2:	18 06       	cpc	r1, r24
    59a4:	09 06       	cpc	r0, r25
    59a6:	08 95       	ret

000059a8 <__fp_pscB>:
    59a8:	00 24       	eor	r0, r0
    59aa:	0a 94       	dec	r0
    59ac:	12 16       	cp	r1, r18
    59ae:	13 06       	cpc	r1, r19
    59b0:	14 06       	cpc	r1, r20
    59b2:	05 06       	cpc	r0, r21
    59b4:	08 95       	ret

000059b6 <__fp_round>:
    59b6:	09 2e       	mov	r0, r25
    59b8:	03 94       	inc	r0
    59ba:	00 0c       	add	r0, r0
    59bc:	11 f4       	brne	.+4      	; 0x59c2 <__fp_round+0xc>
    59be:	88 23       	and	r24, r24
    59c0:	52 f0       	brmi	.+20     	; 0x59d6 <__fp_round+0x20>
    59c2:	bb 0f       	add	r27, r27
    59c4:	40 f4       	brcc	.+16     	; 0x59d6 <__fp_round+0x20>
    59c6:	bf 2b       	or	r27, r31
    59c8:	11 f4       	brne	.+4      	; 0x59ce <__fp_round+0x18>
    59ca:	60 ff       	sbrs	r22, 0
    59cc:	04 c0       	rjmp	.+8      	; 0x59d6 <__fp_round+0x20>
    59ce:	6f 5f       	subi	r22, 0xFF	; 255
    59d0:	7f 4f       	sbci	r23, 0xFF	; 255
    59d2:	8f 4f       	sbci	r24, 0xFF	; 255
    59d4:	9f 4f       	sbci	r25, 0xFF	; 255
    59d6:	08 95       	ret

000059d8 <__fp_split3>:
    59d8:	57 fd       	sbrc	r21, 7
    59da:	90 58       	subi	r25, 0x80	; 128
    59dc:	44 0f       	add	r20, r20
    59de:	55 1f       	adc	r21, r21
    59e0:	59 f0       	breq	.+22     	; 0x59f8 <__fp_splitA+0x10>
    59e2:	5f 3f       	cpi	r21, 0xFF	; 255
    59e4:	71 f0       	breq	.+28     	; 0x5a02 <__fp_splitA+0x1a>
    59e6:	47 95       	ror	r20

000059e8 <__fp_splitA>:
    59e8:	88 0f       	add	r24, r24
    59ea:	97 fb       	bst	r25, 7
    59ec:	99 1f       	adc	r25, r25
    59ee:	61 f0       	breq	.+24     	; 0x5a08 <__fp_splitA+0x20>
    59f0:	9f 3f       	cpi	r25, 0xFF	; 255
    59f2:	79 f0       	breq	.+30     	; 0x5a12 <__fp_splitA+0x2a>
    59f4:	87 95       	ror	r24
    59f6:	08 95       	ret
    59f8:	12 16       	cp	r1, r18
    59fa:	13 06       	cpc	r1, r19
    59fc:	14 06       	cpc	r1, r20
    59fe:	55 1f       	adc	r21, r21
    5a00:	f2 cf       	rjmp	.-28     	; 0x59e6 <__fp_split3+0xe>
    5a02:	46 95       	lsr	r20
    5a04:	f1 df       	rcall	.-30     	; 0x59e8 <__fp_splitA>
    5a06:	08 c0       	rjmp	.+16     	; 0x5a18 <__fp_splitA+0x30>
    5a08:	16 16       	cp	r1, r22
    5a0a:	17 06       	cpc	r1, r23
    5a0c:	18 06       	cpc	r1, r24
    5a0e:	99 1f       	adc	r25, r25
    5a10:	f1 cf       	rjmp	.-30     	; 0x59f4 <__fp_splitA+0xc>
    5a12:	86 95       	lsr	r24
    5a14:	71 05       	cpc	r23, r1
    5a16:	61 05       	cpc	r22, r1
    5a18:	08 94       	sec
    5a1a:	08 95       	ret

00005a1c <__fp_trunc>:
    5a1c:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fp_splitA>
    5a20:	a0 f0       	brcs	.+40     	; 0x5a4a <__fp_trunc+0x2e>
    5a22:	be e7       	ldi	r27, 0x7E	; 126
    5a24:	b9 17       	cp	r27, r25
    5a26:	88 f4       	brcc	.+34     	; 0x5a4a <__fp_trunc+0x2e>
    5a28:	bb 27       	eor	r27, r27
    5a2a:	9f 38       	cpi	r25, 0x8F	; 143
    5a2c:	60 f4       	brcc	.+24     	; 0x5a46 <__fp_trunc+0x2a>
    5a2e:	16 16       	cp	r1, r22
    5a30:	b1 1d       	adc	r27, r1
    5a32:	67 2f       	mov	r22, r23
    5a34:	78 2f       	mov	r23, r24
    5a36:	88 27       	eor	r24, r24
    5a38:	98 5f       	subi	r25, 0xF8	; 248
    5a3a:	f7 cf       	rjmp	.-18     	; 0x5a2a <__fp_trunc+0xe>
    5a3c:	86 95       	lsr	r24
    5a3e:	77 95       	ror	r23
    5a40:	67 95       	ror	r22
    5a42:	b1 1d       	adc	r27, r1
    5a44:	93 95       	inc	r25
    5a46:	96 39       	cpi	r25, 0x96	; 150
    5a48:	c8 f3       	brcs	.-14     	; 0x5a3c <__fp_trunc+0x20>
    5a4a:	08 95       	ret

00005a4c <__fp_zero>:
    5a4c:	e8 94       	clt

00005a4e <__fp_szero>:
    5a4e:	bb 27       	eor	r27, r27
    5a50:	66 27       	eor	r22, r22
    5a52:	77 27       	eor	r23, r23
    5a54:	cb 01       	movw	r24, r22
    5a56:	97 f9       	bld	r25, 7
    5a58:	08 95       	ret

00005a5a <__gesf2>:
    5a5a:	0e 94 77 2c 	call	0x58ee	; 0x58ee <__fp_cmp>
    5a5e:	08 f4       	brcc	.+2      	; 0x5a62 <__gesf2+0x8>
    5a60:	8f ef       	ldi	r24, 0xFF	; 255
    5a62:	08 95       	ret

00005a64 <__mulsf3>:
    5a64:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <__mulsf3x>
    5a68:	0c 94 db 2c 	jmp	0x59b6	; 0x59b6 <__fp_round>
    5a6c:	0e 94 cd 2c 	call	0x599a	; 0x599a <__fp_pscA>
    5a70:	38 f0       	brcs	.+14     	; 0x5a80 <__mulsf3+0x1c>
    5a72:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <__fp_pscB>
    5a76:	20 f0       	brcs	.+8      	; 0x5a80 <__mulsf3+0x1c>
    5a78:	95 23       	and	r25, r21
    5a7a:	11 f0       	breq	.+4      	; 0x5a80 <__mulsf3+0x1c>
    5a7c:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__fp_inf>
    5a80:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__fp_nan>
    5a84:	11 24       	eor	r1, r1
    5a86:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__fp_szero>

00005a8a <__mulsf3x>:
    5a8a:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fp_split3>
    5a8e:	70 f3       	brcs	.-36     	; 0x5a6c <__mulsf3+0x8>

00005a90 <__mulsf3_pse>:
    5a90:	95 9f       	mul	r25, r21
    5a92:	c1 f3       	breq	.-16     	; 0x5a84 <__mulsf3+0x20>
    5a94:	95 0f       	add	r25, r21
    5a96:	50 e0       	ldi	r21, 0x00	; 0
    5a98:	55 1f       	adc	r21, r21
    5a9a:	62 9f       	mul	r22, r18
    5a9c:	f0 01       	movw	r30, r0
    5a9e:	72 9f       	mul	r23, r18
    5aa0:	bb 27       	eor	r27, r27
    5aa2:	f0 0d       	add	r31, r0
    5aa4:	b1 1d       	adc	r27, r1
    5aa6:	63 9f       	mul	r22, r19
    5aa8:	aa 27       	eor	r26, r26
    5aaa:	f0 0d       	add	r31, r0
    5aac:	b1 1d       	adc	r27, r1
    5aae:	aa 1f       	adc	r26, r26
    5ab0:	64 9f       	mul	r22, r20
    5ab2:	66 27       	eor	r22, r22
    5ab4:	b0 0d       	add	r27, r0
    5ab6:	a1 1d       	adc	r26, r1
    5ab8:	66 1f       	adc	r22, r22
    5aba:	82 9f       	mul	r24, r18
    5abc:	22 27       	eor	r18, r18
    5abe:	b0 0d       	add	r27, r0
    5ac0:	a1 1d       	adc	r26, r1
    5ac2:	62 1f       	adc	r22, r18
    5ac4:	73 9f       	mul	r23, r19
    5ac6:	b0 0d       	add	r27, r0
    5ac8:	a1 1d       	adc	r26, r1
    5aca:	62 1f       	adc	r22, r18
    5acc:	83 9f       	mul	r24, r19
    5ace:	a0 0d       	add	r26, r0
    5ad0:	61 1d       	adc	r22, r1
    5ad2:	22 1f       	adc	r18, r18
    5ad4:	74 9f       	mul	r23, r20
    5ad6:	33 27       	eor	r19, r19
    5ad8:	a0 0d       	add	r26, r0
    5ada:	61 1d       	adc	r22, r1
    5adc:	23 1f       	adc	r18, r19
    5ade:	84 9f       	mul	r24, r20
    5ae0:	60 0d       	add	r22, r0
    5ae2:	21 1d       	adc	r18, r1
    5ae4:	82 2f       	mov	r24, r18
    5ae6:	76 2f       	mov	r23, r22
    5ae8:	6a 2f       	mov	r22, r26
    5aea:	11 24       	eor	r1, r1
    5aec:	9f 57       	subi	r25, 0x7F	; 127
    5aee:	50 40       	sbci	r21, 0x00	; 0
    5af0:	9a f0       	brmi	.+38     	; 0x5b18 <__mulsf3_pse+0x88>
    5af2:	f1 f0       	breq	.+60     	; 0x5b30 <__mulsf3_pse+0xa0>
    5af4:	88 23       	and	r24, r24
    5af6:	4a f0       	brmi	.+18     	; 0x5b0a <__mulsf3_pse+0x7a>
    5af8:	ee 0f       	add	r30, r30
    5afa:	ff 1f       	adc	r31, r31
    5afc:	bb 1f       	adc	r27, r27
    5afe:	66 1f       	adc	r22, r22
    5b00:	77 1f       	adc	r23, r23
    5b02:	88 1f       	adc	r24, r24
    5b04:	91 50       	subi	r25, 0x01	; 1
    5b06:	50 40       	sbci	r21, 0x00	; 0
    5b08:	a9 f7       	brne	.-22     	; 0x5af4 <__mulsf3_pse+0x64>
    5b0a:	9e 3f       	cpi	r25, 0xFE	; 254
    5b0c:	51 05       	cpc	r21, r1
    5b0e:	80 f0       	brcs	.+32     	; 0x5b30 <__mulsf3_pse+0xa0>
    5b10:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__fp_inf>
    5b14:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__fp_szero>
    5b18:	5f 3f       	cpi	r21, 0xFF	; 255
    5b1a:	e4 f3       	brlt	.-8      	; 0x5b14 <__mulsf3_pse+0x84>
    5b1c:	98 3e       	cpi	r25, 0xE8	; 232
    5b1e:	d4 f3       	brlt	.-12     	; 0x5b14 <__mulsf3_pse+0x84>
    5b20:	86 95       	lsr	r24
    5b22:	77 95       	ror	r23
    5b24:	67 95       	ror	r22
    5b26:	b7 95       	ror	r27
    5b28:	f7 95       	ror	r31
    5b2a:	e7 95       	ror	r30
    5b2c:	9f 5f       	subi	r25, 0xFF	; 255
    5b2e:	c1 f7       	brne	.-16     	; 0x5b20 <__mulsf3_pse+0x90>
    5b30:	fe 2b       	or	r31, r30
    5b32:	88 0f       	add	r24, r24
    5b34:	91 1d       	adc	r25, r1
    5b36:	96 95       	lsr	r25
    5b38:	87 95       	ror	r24
    5b3a:	97 f9       	bld	r25, 7
    5b3c:	08 95       	ret

00005b3e <pow>:
    5b3e:	fa 01       	movw	r30, r20
    5b40:	ee 0f       	add	r30, r30
    5b42:	ff 1f       	adc	r31, r31
    5b44:	30 96       	adiw	r30, 0x00	; 0
    5b46:	21 05       	cpc	r18, r1
    5b48:	31 05       	cpc	r19, r1
    5b4a:	a1 f1       	breq	.+104    	; 0x5bb4 <pow+0x76>
    5b4c:	61 15       	cp	r22, r1
    5b4e:	71 05       	cpc	r23, r1
    5b50:	61 f4       	brne	.+24     	; 0x5b6a <pow+0x2c>
    5b52:	80 38       	cpi	r24, 0x80	; 128
    5b54:	bf e3       	ldi	r27, 0x3F	; 63
    5b56:	9b 07       	cpc	r25, r27
    5b58:	49 f1       	breq	.+82     	; 0x5bac <pow+0x6e>
    5b5a:	68 94       	set
    5b5c:	90 38       	cpi	r25, 0x80	; 128
    5b5e:	81 05       	cpc	r24, r1
    5b60:	61 f0       	breq	.+24     	; 0x5b7a <pow+0x3c>
    5b62:	80 38       	cpi	r24, 0x80	; 128
    5b64:	bf ef       	ldi	r27, 0xFF	; 255
    5b66:	9b 07       	cpc	r25, r27
    5b68:	41 f0       	breq	.+16     	; 0x5b7a <pow+0x3c>
    5b6a:	99 23       	and	r25, r25
    5b6c:	4a f5       	brpl	.+82     	; 0x5bc0 <pow+0x82>
    5b6e:	ff 3f       	cpi	r31, 0xFF	; 255
    5b70:	e1 05       	cpc	r30, r1
    5b72:	31 05       	cpc	r19, r1
    5b74:	21 05       	cpc	r18, r1
    5b76:	19 f1       	breq	.+70     	; 0x5bbe <pow+0x80>
    5b78:	e8 94       	clt
    5b7a:	08 94       	sec
    5b7c:	e7 95       	ror	r30
    5b7e:	d9 01       	movw	r26, r18
    5b80:	aa 23       	and	r26, r26
    5b82:	29 f4       	brne	.+10     	; 0x5b8e <pow+0x50>
    5b84:	ab 2f       	mov	r26, r27
    5b86:	be 2f       	mov	r27, r30
    5b88:	f8 5f       	subi	r31, 0xF8	; 248
    5b8a:	d0 f3       	brcs	.-12     	; 0x5b80 <pow+0x42>
    5b8c:	10 c0       	rjmp	.+32     	; 0x5bae <pow+0x70>
    5b8e:	ff 5f       	subi	r31, 0xFF	; 255
    5b90:	70 f4       	brcc	.+28     	; 0x5bae <pow+0x70>
    5b92:	a6 95       	lsr	r26
    5b94:	e0 f7       	brcc	.-8      	; 0x5b8e <pow+0x50>
    5b96:	f7 39       	cpi	r31, 0x97	; 151
    5b98:	50 f0       	brcs	.+20     	; 0x5bae <pow+0x70>
    5b9a:	19 f0       	breq	.+6      	; 0x5ba2 <pow+0x64>
    5b9c:	ff 3a       	cpi	r31, 0xAF	; 175
    5b9e:	38 f4       	brcc	.+14     	; 0x5bae <pow+0x70>
    5ba0:	9f 77       	andi	r25, 0x7F	; 127
    5ba2:	9f 93       	push	r25
    5ba4:	0d d0       	rcall	.+26     	; 0x5bc0 <pow+0x82>
    5ba6:	0f 90       	pop	r0
    5ba8:	07 fc       	sbrc	r0, 7
    5baa:	90 58       	subi	r25, 0x80	; 128
    5bac:	08 95       	ret
    5bae:	46 f0       	brts	.+16     	; 0x5bc0 <pow+0x82>
    5bb0:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__fp_nan>
    5bb4:	60 e0       	ldi	r22, 0x00	; 0
    5bb6:	70 e0       	ldi	r23, 0x00	; 0
    5bb8:	80 e8       	ldi	r24, 0x80	; 128
    5bba:	9f e3       	ldi	r25, 0x3F	; 63
    5bbc:	08 95       	ret
    5bbe:	4f e7       	ldi	r20, 0x7F	; 127
    5bc0:	9f 77       	andi	r25, 0x7F	; 127
    5bc2:	5f 93       	push	r21
    5bc4:	4f 93       	push	r20
    5bc6:	3f 93       	push	r19
    5bc8:	2f 93       	push	r18
    5bca:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <log>
    5bce:	2f 91       	pop	r18
    5bd0:	3f 91       	pop	r19
    5bd2:	4f 91       	pop	r20
    5bd4:	5f 91       	pop	r21
    5bd6:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__mulsf3>
    5bda:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <exp>
    5bde:	29 f4       	brne	.+10     	; 0x5bea <pow+0xac>
    5be0:	16 f0       	brts	.+4      	; 0x5be6 <pow+0xa8>
    5be2:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__fp_inf>
    5be6:	0c 94 26 2d 	jmp	0x5a4c	; 0x5a4c <__fp_zero>
    5bea:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__fp_nan>

00005bee <exp>:
    5bee:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fp_splitA>
    5bf2:	a8 f3       	brcs	.-22     	; 0x5bde <pow+0xa0>
    5bf4:	96 38       	cpi	r25, 0x86	; 134
    5bf6:	a0 f7       	brcc	.-24     	; 0x5be0 <pow+0xa2>
    5bf8:	07 f8       	bld	r0, 7
    5bfa:	0f 92       	push	r0
    5bfc:	e8 94       	clt
    5bfe:	2b e3       	ldi	r18, 0x3B	; 59
    5c00:	3a ea       	ldi	r19, 0xAA	; 170
    5c02:	48 eb       	ldi	r20, 0xB8	; 184
    5c04:	5f e7       	ldi	r21, 0x7F	; 127
    5c06:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <__mulsf3_pse>
    5c0a:	0f 92       	push	r0
    5c0c:	0f 92       	push	r0
    5c0e:	0f 92       	push	r0
    5c10:	4d b7       	in	r20, 0x3d	; 61
    5c12:	5e b7       	in	r21, 0x3e	; 62
    5c14:	0f 92       	push	r0
    5c16:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <modf>
    5c1a:	e2 e8       	ldi	r30, 0x82	; 130
    5c1c:	f0 e0       	ldi	r31, 0x00	; 0
    5c1e:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__fp_powser>
    5c22:	4f 91       	pop	r20
    5c24:	5f 91       	pop	r21
    5c26:	ef 91       	pop	r30
    5c28:	ff 91       	pop	r31
    5c2a:	e5 95       	asr	r30
    5c2c:	ee 1f       	adc	r30, r30
    5c2e:	ff 1f       	adc	r31, r31
    5c30:	49 f0       	breq	.+18     	; 0x5c44 <exp+0x56>
    5c32:	fe 57       	subi	r31, 0x7E	; 126
    5c34:	e0 68       	ori	r30, 0x80	; 128
    5c36:	44 27       	eor	r20, r20
    5c38:	ee 0f       	add	r30, r30
    5c3a:	44 1f       	adc	r20, r20
    5c3c:	fa 95       	dec	r31
    5c3e:	e1 f7       	brne	.-8      	; 0x5c38 <exp+0x4a>
    5c40:	41 95       	neg	r20
    5c42:	55 0b       	sbc	r21, r21
    5c44:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <ldexp>
    5c48:	0f 90       	pop	r0
    5c4a:	07 fe       	sbrs	r0, 7
    5c4c:	0c 94 50 2e 	jmp	0x5ca0	; 0x5ca0 <inverse>
    5c50:	08 95       	ret

00005c52 <__fp_powser>:
    5c52:	df 93       	push	r29
    5c54:	cf 93       	push	r28
    5c56:	1f 93       	push	r17
    5c58:	0f 93       	push	r16
    5c5a:	ff 92       	push	r15
    5c5c:	ef 92       	push	r14
    5c5e:	df 92       	push	r13
    5c60:	7b 01       	movw	r14, r22
    5c62:	8c 01       	movw	r16, r24
    5c64:	68 94       	set
    5c66:	06 c0       	rjmp	.+12     	; 0x5c74 <__fp_powser+0x22>
    5c68:	da 2e       	mov	r13, r26
    5c6a:	ef 01       	movw	r28, r30
    5c6c:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <__mulsf3x>
    5c70:	fe 01       	movw	r30, r28
    5c72:	e8 94       	clt
    5c74:	a5 91       	lpm	r26, Z+
    5c76:	25 91       	lpm	r18, Z+
    5c78:	35 91       	lpm	r19, Z+
    5c7a:	45 91       	lpm	r20, Z+
    5c7c:	55 91       	lpm	r21, Z+
    5c7e:	a6 f3       	brts	.-24     	; 0x5c68 <__fp_powser+0x16>
    5c80:	ef 01       	movw	r28, r30
    5c82:	0e 94 28 2b 	call	0x5650	; 0x5650 <__addsf3x>
    5c86:	fe 01       	movw	r30, r28
    5c88:	97 01       	movw	r18, r14
    5c8a:	a8 01       	movw	r20, r16
    5c8c:	da 94       	dec	r13
    5c8e:	69 f7       	brne	.-38     	; 0x5c6a <__fp_powser+0x18>
    5c90:	df 90       	pop	r13
    5c92:	ef 90       	pop	r14
    5c94:	ff 90       	pop	r15
    5c96:	0f 91       	pop	r16
    5c98:	1f 91       	pop	r17
    5c9a:	cf 91       	pop	r28
    5c9c:	df 91       	pop	r29
    5c9e:	08 95       	ret

00005ca0 <inverse>:
    5ca0:	9b 01       	movw	r18, r22
    5ca2:	ac 01       	movw	r20, r24
    5ca4:	60 e0       	ldi	r22, 0x00	; 0
    5ca6:	70 e0       	ldi	r23, 0x00	; 0
    5ca8:	80 e8       	ldi	r24, 0x80	; 128
    5caa:	9f e3       	ldi	r25, 0x3F	; 63
    5cac:	0c 94 82 2b 	jmp	0x5704	; 0x5704 <__divsf3>
    5cb0:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__fp_inf>
    5cb4:	0c 94 bc 2c 	jmp	0x5978	; 0x5978 <__fp_mpack>

00005cb8 <ldexp>:
    5cb8:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fp_splitA>
    5cbc:	d8 f3       	brcs	.-10     	; 0x5cb4 <inverse+0x14>
    5cbe:	99 23       	and	r25, r25
    5cc0:	c9 f3       	breq	.-14     	; 0x5cb4 <inverse+0x14>
    5cc2:	94 0f       	add	r25, r20
    5cc4:	51 1d       	adc	r21, r1
    5cc6:	a3 f3       	brvs	.-24     	; 0x5cb0 <inverse+0x10>
    5cc8:	91 50       	subi	r25, 0x01	; 1
    5cca:	50 40       	sbci	r21, 0x00	; 0
    5ccc:	94 f0       	brlt	.+36     	; 0x5cf2 <ldexp+0x3a>
    5cce:	59 f0       	breq	.+22     	; 0x5ce6 <ldexp+0x2e>
    5cd0:	88 23       	and	r24, r24
    5cd2:	32 f0       	brmi	.+12     	; 0x5ce0 <ldexp+0x28>
    5cd4:	66 0f       	add	r22, r22
    5cd6:	77 1f       	adc	r23, r23
    5cd8:	88 1f       	adc	r24, r24
    5cda:	91 50       	subi	r25, 0x01	; 1
    5cdc:	50 40       	sbci	r21, 0x00	; 0
    5cde:	c1 f7       	brne	.-16     	; 0x5cd0 <ldexp+0x18>
    5ce0:	9e 3f       	cpi	r25, 0xFE	; 254
    5ce2:	51 05       	cpc	r21, r1
    5ce4:	2c f7       	brge	.-54     	; 0x5cb0 <inverse+0x10>
    5ce6:	88 0f       	add	r24, r24
    5ce8:	91 1d       	adc	r25, r1
    5cea:	96 95       	lsr	r25
    5cec:	87 95       	ror	r24
    5cee:	97 f9       	bld	r25, 7
    5cf0:	08 95       	ret
    5cf2:	5f 3f       	cpi	r21, 0xFF	; 255
    5cf4:	ac f0       	brlt	.+42     	; 0x5d20 <ldexp+0x68>
    5cf6:	98 3e       	cpi	r25, 0xE8	; 232
    5cf8:	9c f0       	brlt	.+38     	; 0x5d20 <ldexp+0x68>
    5cfa:	bb 27       	eor	r27, r27
    5cfc:	86 95       	lsr	r24
    5cfe:	77 95       	ror	r23
    5d00:	67 95       	ror	r22
    5d02:	b7 95       	ror	r27
    5d04:	08 f4       	brcc	.+2      	; 0x5d08 <ldexp+0x50>
    5d06:	b1 60       	ori	r27, 0x01	; 1
    5d08:	93 95       	inc	r25
    5d0a:	c1 f7       	brne	.-16     	; 0x5cfc <ldexp+0x44>
    5d0c:	bb 0f       	add	r27, r27
    5d0e:	58 f7       	brcc	.-42     	; 0x5ce6 <ldexp+0x2e>
    5d10:	11 f4       	brne	.+4      	; 0x5d16 <ldexp+0x5e>
    5d12:	60 ff       	sbrs	r22, 0
    5d14:	e8 cf       	rjmp	.-48     	; 0x5ce6 <ldexp+0x2e>
    5d16:	6f 5f       	subi	r22, 0xFF	; 255
    5d18:	7f 4f       	sbci	r23, 0xFF	; 255
    5d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1e:	e3 cf       	rjmp	.-58     	; 0x5ce6 <ldexp+0x2e>
    5d20:	0c 94 27 2d 	jmp	0x5a4e	; 0x5a4e <__fp_szero>
    5d24:	16 f0       	brts	.+4      	; 0x5d2a <ldexp+0x72>
    5d26:	0c 94 bc 2c 	jmp	0x5978	; 0x5978 <__fp_mpack>
    5d2a:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__fp_nan>
    5d2e:	68 94       	set
    5d30:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__fp_inf>

00005d34 <log>:
    5d34:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <__fp_splitA>
    5d38:	a8 f3       	brcs	.-22     	; 0x5d24 <ldexp+0x6c>
    5d3a:	99 23       	and	r25, r25
    5d3c:	c1 f3       	breq	.-16     	; 0x5d2e <ldexp+0x76>
    5d3e:	ae f3       	brts	.-22     	; 0x5d2a <ldexp+0x72>
    5d40:	df 93       	push	r29
    5d42:	cf 93       	push	r28
    5d44:	1f 93       	push	r17
    5d46:	0f 93       	push	r16
    5d48:	ff 92       	push	r15
    5d4a:	c9 2f       	mov	r28, r25
    5d4c:	dd 27       	eor	r29, r29
    5d4e:	88 23       	and	r24, r24
    5d50:	2a f0       	brmi	.+10     	; 0x5d5c <log+0x28>
    5d52:	21 97       	sbiw	r28, 0x01	; 1
    5d54:	66 0f       	add	r22, r22
    5d56:	77 1f       	adc	r23, r23
    5d58:	88 1f       	adc	r24, r24
    5d5a:	da f7       	brpl	.-10     	; 0x5d52 <log+0x1e>
    5d5c:	20 e0       	ldi	r18, 0x00	; 0
    5d5e:	30 e0       	ldi	r19, 0x00	; 0
    5d60:	40 e8       	ldi	r20, 0x80	; 128
    5d62:	5f eb       	ldi	r21, 0xBF	; 191
    5d64:	9f e3       	ldi	r25, 0x3F	; 63
    5d66:	88 39       	cpi	r24, 0x98	; 152
    5d68:	20 f0       	brcs	.+8      	; 0x5d72 <log+0x3e>
    5d6a:	80 3e       	cpi	r24, 0xE0	; 224
    5d6c:	38 f0       	brcs	.+14     	; 0x5d7c <log+0x48>
    5d6e:	21 96       	adiw	r28, 0x01	; 1
    5d70:	8f 77       	andi	r24, 0x7F	; 127
    5d72:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    5d76:	ea ea       	ldi	r30, 0xAA	; 170
    5d78:	f0 e0       	ldi	r31, 0x00	; 0
    5d7a:	04 c0       	rjmp	.+8      	; 0x5d84 <log+0x50>
    5d7c:	0e 94 11 2b 	call	0x5622	; 0x5622 <__addsf3>
    5d80:	e7 ed       	ldi	r30, 0xD7	; 215
    5d82:	f0 e0       	ldi	r31, 0x00	; 0
    5d84:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__fp_powser>
    5d88:	8b 01       	movw	r16, r22
    5d8a:	be 01       	movw	r22, r28
    5d8c:	ec 01       	movw	r28, r24
    5d8e:	fb 2e       	mov	r15, r27
    5d90:	6f 57       	subi	r22, 0x7F	; 127
    5d92:	71 09       	sbc	r23, r1
    5d94:	75 95       	asr	r23
    5d96:	77 1f       	adc	r23, r23
    5d98:	88 0b       	sbc	r24, r24
    5d9a:	99 0b       	sbc	r25, r25
    5d9c:	0e 94 25 2c 	call	0x584a	; 0x584a <__floatsisf>
    5da0:	28 e1       	ldi	r18, 0x18	; 24
    5da2:	32 e7       	ldi	r19, 0x72	; 114
    5da4:	41 e3       	ldi	r20, 0x31	; 49
    5da6:	5f e3       	ldi	r21, 0x3F	; 63
    5da8:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <__mulsf3x>
    5dac:	af 2d       	mov	r26, r15
    5dae:	98 01       	movw	r18, r16
    5db0:	ae 01       	movw	r20, r28
    5db2:	ff 90       	pop	r15
    5db4:	0f 91       	pop	r16
    5db6:	1f 91       	pop	r17
    5db8:	cf 91       	pop	r28
    5dba:	df 91       	pop	r29
    5dbc:	0e 94 28 2b 	call	0x5650	; 0x5650 <__addsf3x>
    5dc0:	0c 94 db 2c 	jmp	0x59b6	; 0x59b6 <__fp_round>

00005dc4 <modf>:
    5dc4:	fa 01       	movw	r30, r20
    5dc6:	dc 01       	movw	r26, r24
    5dc8:	aa 0f       	add	r26, r26
    5dca:	bb 1f       	adc	r27, r27
    5dcc:	9b 01       	movw	r18, r22
    5dce:	ac 01       	movw	r20, r24
    5dd0:	bf 57       	subi	r27, 0x7F	; 127
    5dd2:	28 f4       	brcc	.+10     	; 0x5dde <modf+0x1a>
    5dd4:	22 27       	eor	r18, r18
    5dd6:	33 27       	eor	r19, r19
    5dd8:	44 27       	eor	r20, r20
    5dda:	50 78       	andi	r21, 0x80	; 128
    5ddc:	20 c0       	rjmp	.+64     	; 0x5e1e <modf+0x5a>
    5dde:	b7 51       	subi	r27, 0x17	; 23
    5de0:	90 f4       	brcc	.+36     	; 0x5e06 <modf+0x42>
    5de2:	ab 2f       	mov	r26, r27
    5de4:	00 24       	eor	r0, r0
    5de6:	46 95       	lsr	r20
    5de8:	37 95       	ror	r19
    5dea:	27 95       	ror	r18
    5dec:	01 1c       	adc	r0, r1
    5dee:	a3 95       	inc	r26
    5df0:	d2 f3       	brmi	.-12     	; 0x5de6 <modf+0x22>
    5df2:	00 20       	and	r0, r0
    5df4:	71 f0       	breq	.+28     	; 0x5e12 <modf+0x4e>
    5df6:	22 0f       	add	r18, r18
    5df8:	33 1f       	adc	r19, r19
    5dfa:	44 1f       	adc	r20, r20
    5dfc:	b3 95       	inc	r27
    5dfe:	da f3       	brmi	.-10     	; 0x5df6 <modf+0x32>
    5e00:	0e d0       	rcall	.+28     	; 0x5e1e <modf+0x5a>
    5e02:	0c 94 10 2b 	jmp	0x5620	; 0x5620 <__subsf3>
    5e06:	61 30       	cpi	r22, 0x01	; 1
    5e08:	71 05       	cpc	r23, r1
    5e0a:	a0 e8       	ldi	r26, 0x80	; 128
    5e0c:	8a 07       	cpc	r24, r26
    5e0e:	b9 46       	sbci	r27, 0x69	; 105
    5e10:	30 f4       	brcc	.+12     	; 0x5e1e <modf+0x5a>
    5e12:	9b 01       	movw	r18, r22
    5e14:	ac 01       	movw	r20, r24
    5e16:	66 27       	eor	r22, r22
    5e18:	77 27       	eor	r23, r23
    5e1a:	88 27       	eor	r24, r24
    5e1c:	90 78       	andi	r25, 0x80	; 128
    5e1e:	30 96       	adiw	r30, 0x00	; 0
    5e20:	21 f0       	breq	.+8      	; 0x5e2a <modf+0x66>
    5e22:	20 83       	st	Z, r18
    5e24:	31 83       	std	Z+1, r19	; 0x01
    5e26:	42 83       	std	Z+2, r20	; 0x02
    5e28:	53 83       	std	Z+3, r21	; 0x03
    5e2a:	08 95       	ret

00005e2c <__udivmodsi4>:
    5e2c:	a1 e2       	ldi	r26, 0x21	; 33
    5e2e:	1a 2e       	mov	r1, r26
    5e30:	aa 1b       	sub	r26, r26
    5e32:	bb 1b       	sub	r27, r27
    5e34:	fd 01       	movw	r30, r26
    5e36:	0d c0       	rjmp	.+26     	; 0x5e52 <__udivmodsi4_ep>

00005e38 <__udivmodsi4_loop>:
    5e38:	aa 1f       	adc	r26, r26
    5e3a:	bb 1f       	adc	r27, r27
    5e3c:	ee 1f       	adc	r30, r30
    5e3e:	ff 1f       	adc	r31, r31
    5e40:	a2 17       	cp	r26, r18
    5e42:	b3 07       	cpc	r27, r19
    5e44:	e4 07       	cpc	r30, r20
    5e46:	f5 07       	cpc	r31, r21
    5e48:	20 f0       	brcs	.+8      	; 0x5e52 <__udivmodsi4_ep>
    5e4a:	a2 1b       	sub	r26, r18
    5e4c:	b3 0b       	sbc	r27, r19
    5e4e:	e4 0b       	sbc	r30, r20
    5e50:	f5 0b       	sbc	r31, r21

00005e52 <__udivmodsi4_ep>:
    5e52:	66 1f       	adc	r22, r22
    5e54:	77 1f       	adc	r23, r23
    5e56:	88 1f       	adc	r24, r24
    5e58:	99 1f       	adc	r25, r25
    5e5a:	1a 94       	dec	r1
    5e5c:	69 f7       	brne	.-38     	; 0x5e38 <__udivmodsi4_loop>
    5e5e:	60 95       	com	r22
    5e60:	70 95       	com	r23
    5e62:	80 95       	com	r24
    5e64:	90 95       	com	r25
    5e66:	9b 01       	movw	r18, r22
    5e68:	ac 01       	movw	r20, r24
    5e6a:	bd 01       	movw	r22, r26
    5e6c:	cf 01       	movw	r24, r30
    5e6e:	08 95       	ret

00005e70 <__divmodsi4>:
    5e70:	05 2e       	mov	r0, r21
    5e72:	97 fb       	bst	r25, 7
    5e74:	1e f4       	brtc	.+6      	; 0x5e7c <__divmodsi4+0xc>
    5e76:	00 94       	com	r0
    5e78:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__negsi2>
    5e7c:	57 fd       	sbrc	r21, 7
    5e7e:	07 d0       	rcall	.+14     	; 0x5e8e <__divmodsi4_neg2>
    5e80:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__udivmodsi4>
    5e84:	07 fc       	sbrc	r0, 7
    5e86:	03 d0       	rcall	.+6      	; 0x5e8e <__divmodsi4_neg2>
    5e88:	4e f4       	brtc	.+18     	; 0x5e9c <__divmodsi4_exit>
    5e8a:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__negsi2>

00005e8e <__divmodsi4_neg2>:
    5e8e:	50 95       	com	r21
    5e90:	40 95       	com	r20
    5e92:	30 95       	com	r19
    5e94:	21 95       	neg	r18
    5e96:	3f 4f       	sbci	r19, 0xFF	; 255
    5e98:	4f 4f       	sbci	r20, 0xFF	; 255
    5e9a:	5f 4f       	sbci	r21, 0xFF	; 255

00005e9c <__divmodsi4_exit>:
    5e9c:	08 95       	ret

00005e9e <__negsi2>:
    5e9e:	90 95       	com	r25
    5ea0:	80 95       	com	r24
    5ea2:	70 95       	com	r23
    5ea4:	61 95       	neg	r22
    5ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ea8:	8f 4f       	sbci	r24, 0xFF	; 255
    5eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    5eac:	08 95       	ret

00005eae <__tablejump2__>:
    5eae:	ee 0f       	add	r30, r30
    5eb0:	ff 1f       	adc	r31, r31
    5eb2:	05 90       	lpm	r0, Z+
    5eb4:	f4 91       	lpm	r31, Z
    5eb6:	e0 2d       	mov	r30, r0
    5eb8:	09 94       	ijmp

00005eba <__umulhisi3>:
    5eba:	a2 9f       	mul	r26, r18
    5ebc:	b0 01       	movw	r22, r0
    5ebe:	b3 9f       	mul	r27, r19
    5ec0:	c0 01       	movw	r24, r0
    5ec2:	a3 9f       	mul	r26, r19
    5ec4:	70 0d       	add	r23, r0
    5ec6:	81 1d       	adc	r24, r1
    5ec8:	11 24       	eor	r1, r1
    5eca:	91 1d       	adc	r25, r1
    5ecc:	b2 9f       	mul	r27, r18
    5ece:	70 0d       	add	r23, r0
    5ed0:	81 1d       	adc	r24, r1
    5ed2:	11 24       	eor	r1, r1
    5ed4:	91 1d       	adc	r25, r1
    5ed6:	08 95       	ret

00005ed8 <__muluhisi3>:
    5ed8:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__umulhisi3>
    5edc:	a5 9f       	mul	r26, r21
    5ede:	90 0d       	add	r25, r0
    5ee0:	b4 9f       	mul	r27, r20
    5ee2:	90 0d       	add	r25, r0
    5ee4:	a4 9f       	mul	r26, r20
    5ee6:	80 0d       	add	r24, r0
    5ee8:	91 1d       	adc	r25, r1
    5eea:	11 24       	eor	r1, r1
    5eec:	08 95       	ret

00005eee <memcmp>:
    5eee:	fb 01       	movw	r30, r22
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	04 c0       	rjmp	.+8      	; 0x5efc <memcmp+0xe>
    5ef4:	8d 91       	ld	r24, X+
    5ef6:	01 90       	ld	r0, Z+
    5ef8:	80 19       	sub	r24, r0
    5efa:	21 f4       	brne	.+8      	; 0x5f04 <memcmp+0x16>
    5efc:	41 50       	subi	r20, 0x01	; 1
    5efe:	50 40       	sbci	r21, 0x00	; 0
    5f00:	c8 f7       	brcc	.-14     	; 0x5ef4 <memcmp+0x6>
    5f02:	88 1b       	sub	r24, r24
    5f04:	99 0b       	sbc	r25, r25
    5f06:	08 95       	ret

00005f08 <memcpy>:
    5f08:	fb 01       	movw	r30, r22
    5f0a:	dc 01       	movw	r26, r24
    5f0c:	02 c0       	rjmp	.+4      	; 0x5f12 <memcpy+0xa>
    5f0e:	01 90       	ld	r0, Z+
    5f10:	0d 92       	st	X+, r0
    5f12:	41 50       	subi	r20, 0x01	; 1
    5f14:	50 40       	sbci	r21, 0x00	; 0
    5f16:	d8 f7       	brcc	.-10     	; 0x5f0e <memcpy+0x6>
    5f18:	08 95       	ret

00005f1a <strncmp>:
    5f1a:	fb 01       	movw	r30, r22
    5f1c:	dc 01       	movw	r26, r24
    5f1e:	41 50       	subi	r20, 0x01	; 1
    5f20:	50 40       	sbci	r21, 0x00	; 0
    5f22:	30 f0       	brcs	.+12     	; 0x5f30 <strncmp+0x16>
    5f24:	8d 91       	ld	r24, X+
    5f26:	01 90       	ld	r0, Z+
    5f28:	80 19       	sub	r24, r0
    5f2a:	19 f4       	brne	.+6      	; 0x5f32 <strncmp+0x18>
    5f2c:	00 20       	and	r0, r0
    5f2e:	b9 f7       	brne	.-18     	; 0x5f1e <strncmp+0x4>
    5f30:	88 1b       	sub	r24, r24
    5f32:	99 0b       	sbc	r25, r25
    5f34:	08 95       	ret

00005f36 <snprintf>:
    5f36:	ae e0       	ldi	r26, 0x0E	; 14
    5f38:	b0 e0       	ldi	r27, 0x00	; 0
    5f3a:	e1 ea       	ldi	r30, 0xA1	; 161
    5f3c:	ff e2       	ldi	r31, 0x2F	; 47
    5f3e:	0c 94 c5 35 	jmp	0x6b8a	; 0x6b8a <__prologue_saves__+0x1c>
    5f42:	0d 89       	ldd	r16, Y+21	; 0x15
    5f44:	1e 89       	ldd	r17, Y+22	; 0x16
    5f46:	8f 89       	ldd	r24, Y+23	; 0x17
    5f48:	98 8d       	ldd	r25, Y+24	; 0x18
    5f4a:	26 e0       	ldi	r18, 0x06	; 6
    5f4c:	2c 83       	std	Y+4, r18	; 0x04
    5f4e:	1a 83       	std	Y+2, r17	; 0x02
    5f50:	09 83       	std	Y+1, r16	; 0x01
    5f52:	97 ff       	sbrs	r25, 7
    5f54:	02 c0       	rjmp	.+4      	; 0x5f5a <snprintf+0x24>
    5f56:	80 e0       	ldi	r24, 0x00	; 0
    5f58:	90 e8       	ldi	r25, 0x80	; 128
    5f5a:	01 97       	sbiw	r24, 0x01	; 1
    5f5c:	9e 83       	std	Y+6, r25	; 0x06
    5f5e:	8d 83       	std	Y+5, r24	; 0x05
    5f60:	ae 01       	movw	r20, r28
    5f62:	45 5e       	subi	r20, 0xE5	; 229
    5f64:	5f 4f       	sbci	r21, 0xFF	; 255
    5f66:	69 8d       	ldd	r22, Y+25	; 0x19
    5f68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f6a:	ce 01       	movw	r24, r28
    5f6c:	01 96       	adiw	r24, 0x01	; 1
    5f6e:	0e 94 07 30 	call	0x600e	; 0x600e <vfprintf>
    5f72:	4d 81       	ldd	r20, Y+5	; 0x05
    5f74:	5e 81       	ldd	r21, Y+6	; 0x06
    5f76:	57 fd       	sbrc	r21, 7
    5f78:	0a c0       	rjmp	.+20     	; 0x5f8e <snprintf+0x58>
    5f7a:	2f 81       	ldd	r18, Y+7	; 0x07
    5f7c:	38 85       	ldd	r19, Y+8	; 0x08
    5f7e:	42 17       	cp	r20, r18
    5f80:	53 07       	cpc	r21, r19
    5f82:	0c f4       	brge	.+2      	; 0x5f86 <snprintf+0x50>
    5f84:	9a 01       	movw	r18, r20
    5f86:	f8 01       	movw	r30, r16
    5f88:	e2 0f       	add	r30, r18
    5f8a:	f3 1f       	adc	r31, r19
    5f8c:	10 82       	st	Z, r1
    5f8e:	2e 96       	adiw	r28, 0x0e	; 14
    5f90:	e4 e0       	ldi	r30, 0x04	; 4
    5f92:	0c 94 e1 35 	jmp	0x6bc2	; 0x6bc2 <__epilogue_restores__+0x1c>

00005f96 <sprintf>:
    5f96:	ae e0       	ldi	r26, 0x0E	; 14
    5f98:	b0 e0       	ldi	r27, 0x00	; 0
    5f9a:	e1 ed       	ldi	r30, 0xD1	; 209
    5f9c:	ff e2       	ldi	r31, 0x2F	; 47
    5f9e:	0c 94 c5 35 	jmp	0x6b8a	; 0x6b8a <__prologue_saves__+0x1c>
    5fa2:	0d 89       	ldd	r16, Y+21	; 0x15
    5fa4:	1e 89       	ldd	r17, Y+22	; 0x16
    5fa6:	86 e0       	ldi	r24, 0x06	; 6
    5fa8:	8c 83       	std	Y+4, r24	; 0x04
    5faa:	1a 83       	std	Y+2, r17	; 0x02
    5fac:	09 83       	std	Y+1, r16	; 0x01
    5fae:	8f ef       	ldi	r24, 0xFF	; 255
    5fb0:	9f e7       	ldi	r25, 0x7F	; 127
    5fb2:	9e 83       	std	Y+6, r25	; 0x06
    5fb4:	8d 83       	std	Y+5, r24	; 0x05
    5fb6:	ae 01       	movw	r20, r28
    5fb8:	47 5e       	subi	r20, 0xE7	; 231
    5fba:	5f 4f       	sbci	r21, 0xFF	; 255
    5fbc:	6f 89       	ldd	r22, Y+23	; 0x17
    5fbe:	78 8d       	ldd	r23, Y+24	; 0x18
    5fc0:	ce 01       	movw	r24, r28
    5fc2:	01 96       	adiw	r24, 0x01	; 1
    5fc4:	0e 94 07 30 	call	0x600e	; 0x600e <vfprintf>
    5fc8:	2f 81       	ldd	r18, Y+7	; 0x07
    5fca:	38 85       	ldd	r19, Y+8	; 0x08
    5fcc:	f8 01       	movw	r30, r16
    5fce:	e2 0f       	add	r30, r18
    5fd0:	f3 1f       	adc	r31, r19
    5fd2:	10 82       	st	Z, r1
    5fd4:	2e 96       	adiw	r28, 0x0e	; 14
    5fd6:	e4 e0       	ldi	r30, 0x04	; 4
    5fd8:	0c 94 e1 35 	jmp	0x6bc2	; 0x6bc2 <__epilogue_restores__+0x1c>

00005fdc <sscanf>:
    5fdc:	ae e0       	ldi	r26, 0x0E	; 14
    5fde:	b0 e0       	ldi	r27, 0x00	; 0
    5fe0:	e4 ef       	ldi	r30, 0xF4	; 244
    5fe2:	ff e2       	ldi	r31, 0x2F	; 47
    5fe4:	0c 94 c7 35 	jmp	0x6b8e	; 0x6b8e <__prologue_saves__+0x20>
    5fe8:	85 e0       	ldi	r24, 0x05	; 5
    5fea:	8c 83       	std	Y+4, r24	; 0x04
    5fec:	8b 89       	ldd	r24, Y+19	; 0x13
    5fee:	9c 89       	ldd	r25, Y+20	; 0x14
    5ff0:	9a 83       	std	Y+2, r25	; 0x02
    5ff2:	89 83       	std	Y+1, r24	; 0x01
    5ff4:	ae 01       	movw	r20, r28
    5ff6:	49 5e       	subi	r20, 0xE9	; 233
    5ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    5ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    5ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    5ffe:	ce 01       	movw	r24, r28
    6000:	01 96       	adiw	r24, 0x01	; 1
    6002:	0e 94 59 33 	call	0x66b2	; 0x66b2 <vfscanf>
    6006:	2e 96       	adiw	r28, 0x0e	; 14
    6008:	e2 e0       	ldi	r30, 0x02	; 2
    600a:	0c 94 e3 35 	jmp	0x6bc6	; 0x6bc6 <__epilogue_restores__+0x20>

0000600e <vfprintf>:
    600e:	ac e0       	ldi	r26, 0x0C	; 12
    6010:	b0 e0       	ldi	r27, 0x00	; 0
    6012:	ed e0       	ldi	r30, 0x0D	; 13
    6014:	f0 e3       	ldi	r31, 0x30	; 48
    6016:	0c 94 b7 35 	jmp	0x6b6e	; 0x6b6e <__prologue_saves__>
    601a:	7c 01       	movw	r14, r24
    601c:	6b 01       	movw	r12, r22
    601e:	8a 01       	movw	r16, r20
    6020:	fc 01       	movw	r30, r24
    6022:	17 82       	std	Z+7, r1	; 0x07
    6024:	16 82       	std	Z+6, r1	; 0x06
    6026:	83 81       	ldd	r24, Z+3	; 0x03
    6028:	81 ff       	sbrs	r24, 1
    602a:	bd c1       	rjmp	.+890    	; 0x63a6 <vfprintf+0x398>
    602c:	ce 01       	movw	r24, r28
    602e:	01 96       	adiw	r24, 0x01	; 1
    6030:	4c 01       	movw	r8, r24
    6032:	f7 01       	movw	r30, r14
    6034:	93 81       	ldd	r25, Z+3	; 0x03
    6036:	f6 01       	movw	r30, r12
    6038:	93 fd       	sbrc	r25, 3
    603a:	85 91       	lpm	r24, Z+
    603c:	93 ff       	sbrs	r25, 3
    603e:	81 91       	ld	r24, Z+
    6040:	6f 01       	movw	r12, r30
    6042:	88 23       	and	r24, r24
    6044:	09 f4       	brne	.+2      	; 0x6048 <vfprintf+0x3a>
    6046:	ab c1       	rjmp	.+854    	; 0x639e <vfprintf+0x390>
    6048:	85 32       	cpi	r24, 0x25	; 37
    604a:	39 f4       	brne	.+14     	; 0x605a <vfprintf+0x4c>
    604c:	93 fd       	sbrc	r25, 3
    604e:	85 91       	lpm	r24, Z+
    6050:	93 ff       	sbrs	r25, 3
    6052:	81 91       	ld	r24, Z+
    6054:	6f 01       	movw	r12, r30
    6056:	85 32       	cpi	r24, 0x25	; 37
    6058:	29 f4       	brne	.+10     	; 0x6064 <vfprintf+0x56>
    605a:	b7 01       	movw	r22, r14
    605c:	90 e0       	ldi	r25, 0x00	; 0
    605e:	0e 94 ef 34 	call	0x69de	; 0x69de <fputc>
    6062:	e7 cf       	rjmp	.-50     	; 0x6032 <vfprintf+0x24>
    6064:	51 2c       	mov	r5, r1
    6066:	31 2c       	mov	r3, r1
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	20 32       	cpi	r18, 0x20	; 32
    606c:	a0 f4       	brcc	.+40     	; 0x6096 <vfprintf+0x88>
    606e:	8b 32       	cpi	r24, 0x2B	; 43
    6070:	69 f0       	breq	.+26     	; 0x608c <vfprintf+0x7e>
    6072:	30 f4       	brcc	.+12     	; 0x6080 <vfprintf+0x72>
    6074:	80 32       	cpi	r24, 0x20	; 32
    6076:	59 f0       	breq	.+22     	; 0x608e <vfprintf+0x80>
    6078:	83 32       	cpi	r24, 0x23	; 35
    607a:	69 f4       	brne	.+26     	; 0x6096 <vfprintf+0x88>
    607c:	20 61       	ori	r18, 0x10	; 16
    607e:	2c c0       	rjmp	.+88     	; 0x60d8 <vfprintf+0xca>
    6080:	8d 32       	cpi	r24, 0x2D	; 45
    6082:	39 f0       	breq	.+14     	; 0x6092 <vfprintf+0x84>
    6084:	80 33       	cpi	r24, 0x30	; 48
    6086:	39 f4       	brne	.+14     	; 0x6096 <vfprintf+0x88>
    6088:	21 60       	ori	r18, 0x01	; 1
    608a:	26 c0       	rjmp	.+76     	; 0x60d8 <vfprintf+0xca>
    608c:	22 60       	ori	r18, 0x02	; 2
    608e:	24 60       	ori	r18, 0x04	; 4
    6090:	23 c0       	rjmp	.+70     	; 0x60d8 <vfprintf+0xca>
    6092:	28 60       	ori	r18, 0x08	; 8
    6094:	21 c0       	rjmp	.+66     	; 0x60d8 <vfprintf+0xca>
    6096:	27 fd       	sbrc	r18, 7
    6098:	27 c0       	rjmp	.+78     	; 0x60e8 <vfprintf+0xda>
    609a:	30 ed       	ldi	r19, 0xD0	; 208
    609c:	38 0f       	add	r19, r24
    609e:	3a 30       	cpi	r19, 0x0A	; 10
    60a0:	78 f4       	brcc	.+30     	; 0x60c0 <vfprintf+0xb2>
    60a2:	26 ff       	sbrs	r18, 6
    60a4:	06 c0       	rjmp	.+12     	; 0x60b2 <vfprintf+0xa4>
    60a6:	fa e0       	ldi	r31, 0x0A	; 10
    60a8:	5f 9e       	mul	r5, r31
    60aa:	30 0d       	add	r19, r0
    60ac:	11 24       	eor	r1, r1
    60ae:	53 2e       	mov	r5, r19
    60b0:	13 c0       	rjmp	.+38     	; 0x60d8 <vfprintf+0xca>
    60b2:	8a e0       	ldi	r24, 0x0A	; 10
    60b4:	38 9e       	mul	r3, r24
    60b6:	30 0d       	add	r19, r0
    60b8:	11 24       	eor	r1, r1
    60ba:	33 2e       	mov	r3, r19
    60bc:	20 62       	ori	r18, 0x20	; 32
    60be:	0c c0       	rjmp	.+24     	; 0x60d8 <vfprintf+0xca>
    60c0:	8e 32       	cpi	r24, 0x2E	; 46
    60c2:	21 f4       	brne	.+8      	; 0x60cc <vfprintf+0xbe>
    60c4:	26 fd       	sbrc	r18, 6
    60c6:	6b c1       	rjmp	.+726    	; 0x639e <vfprintf+0x390>
    60c8:	20 64       	ori	r18, 0x40	; 64
    60ca:	06 c0       	rjmp	.+12     	; 0x60d8 <vfprintf+0xca>
    60cc:	8c 36       	cpi	r24, 0x6C	; 108
    60ce:	11 f4       	brne	.+4      	; 0x60d4 <vfprintf+0xc6>
    60d0:	20 68       	ori	r18, 0x80	; 128
    60d2:	02 c0       	rjmp	.+4      	; 0x60d8 <vfprintf+0xca>
    60d4:	88 36       	cpi	r24, 0x68	; 104
    60d6:	41 f4       	brne	.+16     	; 0x60e8 <vfprintf+0xda>
    60d8:	f6 01       	movw	r30, r12
    60da:	93 fd       	sbrc	r25, 3
    60dc:	85 91       	lpm	r24, Z+
    60de:	93 ff       	sbrs	r25, 3
    60e0:	81 91       	ld	r24, Z+
    60e2:	6f 01       	movw	r12, r30
    60e4:	81 11       	cpse	r24, r1
    60e6:	c1 cf       	rjmp	.-126    	; 0x606a <vfprintf+0x5c>
    60e8:	98 2f       	mov	r25, r24
    60ea:	9f 7d       	andi	r25, 0xDF	; 223
    60ec:	95 54       	subi	r25, 0x45	; 69
    60ee:	93 30       	cpi	r25, 0x03	; 3
    60f0:	28 f4       	brcc	.+10     	; 0x60fc <vfprintf+0xee>
    60f2:	0c 5f       	subi	r16, 0xFC	; 252
    60f4:	1f 4f       	sbci	r17, 0xFF	; 255
    60f6:	ff e3       	ldi	r31, 0x3F	; 63
    60f8:	f9 83       	std	Y+1, r31	; 0x01
    60fa:	0d c0       	rjmp	.+26     	; 0x6116 <vfprintf+0x108>
    60fc:	83 36       	cpi	r24, 0x63	; 99
    60fe:	31 f0       	breq	.+12     	; 0x610c <vfprintf+0xfe>
    6100:	83 37       	cpi	r24, 0x73	; 115
    6102:	71 f0       	breq	.+28     	; 0x6120 <vfprintf+0x112>
    6104:	83 35       	cpi	r24, 0x53	; 83
    6106:	09 f0       	breq	.+2      	; 0x610a <vfprintf+0xfc>
    6108:	5b c0       	rjmp	.+182    	; 0x61c0 <vfprintf+0x1b2>
    610a:	22 c0       	rjmp	.+68     	; 0x6150 <vfprintf+0x142>
    610c:	f8 01       	movw	r30, r16
    610e:	80 81       	ld	r24, Z
    6110:	89 83       	std	Y+1, r24	; 0x01
    6112:	0e 5f       	subi	r16, 0xFE	; 254
    6114:	1f 4f       	sbci	r17, 0xFF	; 255
    6116:	44 24       	eor	r4, r4
    6118:	43 94       	inc	r4
    611a:	51 2c       	mov	r5, r1
    611c:	54 01       	movw	r10, r8
    611e:	15 c0       	rjmp	.+42     	; 0x614a <vfprintf+0x13c>
    6120:	38 01       	movw	r6, r16
    6122:	f2 e0       	ldi	r31, 0x02	; 2
    6124:	6f 0e       	add	r6, r31
    6126:	71 1c       	adc	r7, r1
    6128:	f8 01       	movw	r30, r16
    612a:	a0 80       	ld	r10, Z
    612c:	b1 80       	ldd	r11, Z+1	; 0x01
    612e:	26 ff       	sbrs	r18, 6
    6130:	03 c0       	rjmp	.+6      	; 0x6138 <vfprintf+0x12a>
    6132:	65 2d       	mov	r22, r5
    6134:	70 e0       	ldi	r23, 0x00	; 0
    6136:	02 c0       	rjmp	.+4      	; 0x613c <vfprintf+0x12e>
    6138:	6f ef       	ldi	r22, 0xFF	; 255
    613a:	7f ef       	ldi	r23, 0xFF	; 255
    613c:	c5 01       	movw	r24, r10
    613e:	2c 87       	std	Y+12, r18	; 0x0c
    6140:	0e 94 a6 34 	call	0x694c	; 0x694c <strnlen>
    6144:	2c 01       	movw	r4, r24
    6146:	83 01       	movw	r16, r6
    6148:	2c 85       	ldd	r18, Y+12	; 0x0c
    614a:	2f 77       	andi	r18, 0x7F	; 127
    614c:	22 2e       	mov	r2, r18
    614e:	17 c0       	rjmp	.+46     	; 0x617e <vfprintf+0x170>
    6150:	38 01       	movw	r6, r16
    6152:	f2 e0       	ldi	r31, 0x02	; 2
    6154:	6f 0e       	add	r6, r31
    6156:	71 1c       	adc	r7, r1
    6158:	f8 01       	movw	r30, r16
    615a:	a0 80       	ld	r10, Z
    615c:	b1 80       	ldd	r11, Z+1	; 0x01
    615e:	26 ff       	sbrs	r18, 6
    6160:	03 c0       	rjmp	.+6      	; 0x6168 <vfprintf+0x15a>
    6162:	65 2d       	mov	r22, r5
    6164:	70 e0       	ldi	r23, 0x00	; 0
    6166:	02 c0       	rjmp	.+4      	; 0x616c <vfprintf+0x15e>
    6168:	6f ef       	ldi	r22, 0xFF	; 255
    616a:	7f ef       	ldi	r23, 0xFF	; 255
    616c:	c5 01       	movw	r24, r10
    616e:	2c 87       	std	Y+12, r18	; 0x0c
    6170:	0e 94 9b 34 	call	0x6936	; 0x6936 <strnlen_P>
    6174:	2c 01       	movw	r4, r24
    6176:	2c 85       	ldd	r18, Y+12	; 0x0c
    6178:	20 68       	ori	r18, 0x80	; 128
    617a:	22 2e       	mov	r2, r18
    617c:	83 01       	movw	r16, r6
    617e:	23 fc       	sbrc	r2, 3
    6180:	1b c0       	rjmp	.+54     	; 0x61b8 <vfprintf+0x1aa>
    6182:	83 2d       	mov	r24, r3
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	48 16       	cp	r4, r24
    6188:	59 06       	cpc	r5, r25
    618a:	b0 f4       	brcc	.+44     	; 0x61b8 <vfprintf+0x1aa>
    618c:	b7 01       	movw	r22, r14
    618e:	80 e2       	ldi	r24, 0x20	; 32
    6190:	90 e0       	ldi	r25, 0x00	; 0
    6192:	0e 94 ef 34 	call	0x69de	; 0x69de <fputc>
    6196:	3a 94       	dec	r3
    6198:	f4 cf       	rjmp	.-24     	; 0x6182 <vfprintf+0x174>
    619a:	f5 01       	movw	r30, r10
    619c:	27 fc       	sbrc	r2, 7
    619e:	85 91       	lpm	r24, Z+
    61a0:	27 fe       	sbrs	r2, 7
    61a2:	81 91       	ld	r24, Z+
    61a4:	5f 01       	movw	r10, r30
    61a6:	b7 01       	movw	r22, r14
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	0e 94 ef 34 	call	0x69de	; 0x69de <fputc>
    61ae:	31 10       	cpse	r3, r1
    61b0:	3a 94       	dec	r3
    61b2:	f1 e0       	ldi	r31, 0x01	; 1
    61b4:	4f 1a       	sub	r4, r31
    61b6:	51 08       	sbc	r5, r1
    61b8:	41 14       	cp	r4, r1
    61ba:	51 04       	cpc	r5, r1
    61bc:	71 f7       	brne	.-36     	; 0x619a <vfprintf+0x18c>
    61be:	e5 c0       	rjmp	.+458    	; 0x638a <vfprintf+0x37c>
    61c0:	84 36       	cpi	r24, 0x64	; 100
    61c2:	11 f0       	breq	.+4      	; 0x61c8 <vfprintf+0x1ba>
    61c4:	89 36       	cpi	r24, 0x69	; 105
    61c6:	39 f5       	brne	.+78     	; 0x6216 <vfprintf+0x208>
    61c8:	f8 01       	movw	r30, r16
    61ca:	27 ff       	sbrs	r18, 7
    61cc:	07 c0       	rjmp	.+14     	; 0x61dc <vfprintf+0x1ce>
    61ce:	60 81       	ld	r22, Z
    61d0:	71 81       	ldd	r23, Z+1	; 0x01
    61d2:	82 81       	ldd	r24, Z+2	; 0x02
    61d4:	93 81       	ldd	r25, Z+3	; 0x03
    61d6:	0c 5f       	subi	r16, 0xFC	; 252
    61d8:	1f 4f       	sbci	r17, 0xFF	; 255
    61da:	08 c0       	rjmp	.+16     	; 0x61ec <vfprintf+0x1de>
    61dc:	60 81       	ld	r22, Z
    61de:	71 81       	ldd	r23, Z+1	; 0x01
    61e0:	07 2e       	mov	r0, r23
    61e2:	00 0c       	add	r0, r0
    61e4:	88 0b       	sbc	r24, r24
    61e6:	99 0b       	sbc	r25, r25
    61e8:	0e 5f       	subi	r16, 0xFE	; 254
    61ea:	1f 4f       	sbci	r17, 0xFF	; 255
    61ec:	2f 76       	andi	r18, 0x6F	; 111
    61ee:	72 2e       	mov	r7, r18
    61f0:	97 ff       	sbrs	r25, 7
    61f2:	09 c0       	rjmp	.+18     	; 0x6206 <vfprintf+0x1f8>
    61f4:	90 95       	com	r25
    61f6:	80 95       	com	r24
    61f8:	70 95       	com	r23
    61fa:	61 95       	neg	r22
    61fc:	7f 4f       	sbci	r23, 0xFF	; 255
    61fe:	8f 4f       	sbci	r24, 0xFF	; 255
    6200:	9f 4f       	sbci	r25, 0xFF	; 255
    6202:	20 68       	ori	r18, 0x80	; 128
    6204:	72 2e       	mov	r7, r18
    6206:	2a e0       	ldi	r18, 0x0A	; 10
    6208:	30 e0       	ldi	r19, 0x00	; 0
    620a:	a4 01       	movw	r20, r8
    620c:	0e 94 40 35 	call	0x6a80	; 0x6a80 <__ultoa_invert>
    6210:	a8 2e       	mov	r10, r24
    6212:	a8 18       	sub	r10, r8
    6214:	44 c0       	rjmp	.+136    	; 0x629e <vfprintf+0x290>
    6216:	85 37       	cpi	r24, 0x75	; 117
    6218:	29 f4       	brne	.+10     	; 0x6224 <vfprintf+0x216>
    621a:	2f 7e       	andi	r18, 0xEF	; 239
    621c:	b2 2e       	mov	r11, r18
    621e:	2a e0       	ldi	r18, 0x0A	; 10
    6220:	30 e0       	ldi	r19, 0x00	; 0
    6222:	25 c0       	rjmp	.+74     	; 0x626e <vfprintf+0x260>
    6224:	f2 2f       	mov	r31, r18
    6226:	f9 7f       	andi	r31, 0xF9	; 249
    6228:	bf 2e       	mov	r11, r31
    622a:	8f 36       	cpi	r24, 0x6F	; 111
    622c:	c1 f0       	breq	.+48     	; 0x625e <vfprintf+0x250>
    622e:	18 f4       	brcc	.+6      	; 0x6236 <vfprintf+0x228>
    6230:	88 35       	cpi	r24, 0x58	; 88
    6232:	79 f0       	breq	.+30     	; 0x6252 <vfprintf+0x244>
    6234:	b4 c0       	rjmp	.+360    	; 0x639e <vfprintf+0x390>
    6236:	80 37       	cpi	r24, 0x70	; 112
    6238:	19 f0       	breq	.+6      	; 0x6240 <vfprintf+0x232>
    623a:	88 37       	cpi	r24, 0x78	; 120
    623c:	21 f0       	breq	.+8      	; 0x6246 <vfprintf+0x238>
    623e:	af c0       	rjmp	.+350    	; 0x639e <vfprintf+0x390>
    6240:	2f 2f       	mov	r18, r31
    6242:	20 61       	ori	r18, 0x10	; 16
    6244:	b2 2e       	mov	r11, r18
    6246:	b4 fe       	sbrs	r11, 4
    6248:	0d c0       	rjmp	.+26     	; 0x6264 <vfprintf+0x256>
    624a:	8b 2d       	mov	r24, r11
    624c:	84 60       	ori	r24, 0x04	; 4
    624e:	b8 2e       	mov	r11, r24
    6250:	09 c0       	rjmp	.+18     	; 0x6264 <vfprintf+0x256>
    6252:	24 ff       	sbrs	r18, 4
    6254:	0a c0       	rjmp	.+20     	; 0x626a <vfprintf+0x25c>
    6256:	9f 2f       	mov	r25, r31
    6258:	96 60       	ori	r25, 0x06	; 6
    625a:	b9 2e       	mov	r11, r25
    625c:	06 c0       	rjmp	.+12     	; 0x626a <vfprintf+0x25c>
    625e:	28 e0       	ldi	r18, 0x08	; 8
    6260:	30 e0       	ldi	r19, 0x00	; 0
    6262:	05 c0       	rjmp	.+10     	; 0x626e <vfprintf+0x260>
    6264:	20 e1       	ldi	r18, 0x10	; 16
    6266:	30 e0       	ldi	r19, 0x00	; 0
    6268:	02 c0       	rjmp	.+4      	; 0x626e <vfprintf+0x260>
    626a:	20 e1       	ldi	r18, 0x10	; 16
    626c:	32 e0       	ldi	r19, 0x02	; 2
    626e:	f8 01       	movw	r30, r16
    6270:	b7 fe       	sbrs	r11, 7
    6272:	07 c0       	rjmp	.+14     	; 0x6282 <vfprintf+0x274>
    6274:	60 81       	ld	r22, Z
    6276:	71 81       	ldd	r23, Z+1	; 0x01
    6278:	82 81       	ldd	r24, Z+2	; 0x02
    627a:	93 81       	ldd	r25, Z+3	; 0x03
    627c:	0c 5f       	subi	r16, 0xFC	; 252
    627e:	1f 4f       	sbci	r17, 0xFF	; 255
    6280:	06 c0       	rjmp	.+12     	; 0x628e <vfprintf+0x280>
    6282:	60 81       	ld	r22, Z
    6284:	71 81       	ldd	r23, Z+1	; 0x01
    6286:	80 e0       	ldi	r24, 0x00	; 0
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	0e 5f       	subi	r16, 0xFE	; 254
    628c:	1f 4f       	sbci	r17, 0xFF	; 255
    628e:	a4 01       	movw	r20, r8
    6290:	0e 94 40 35 	call	0x6a80	; 0x6a80 <__ultoa_invert>
    6294:	a8 2e       	mov	r10, r24
    6296:	a8 18       	sub	r10, r8
    6298:	fb 2d       	mov	r31, r11
    629a:	ff 77       	andi	r31, 0x7F	; 127
    629c:	7f 2e       	mov	r7, r31
    629e:	76 fe       	sbrs	r7, 6
    62a0:	0b c0       	rjmp	.+22     	; 0x62b8 <vfprintf+0x2aa>
    62a2:	37 2d       	mov	r19, r7
    62a4:	3e 7f       	andi	r19, 0xFE	; 254
    62a6:	a5 14       	cp	r10, r5
    62a8:	50 f4       	brcc	.+20     	; 0x62be <vfprintf+0x2b0>
    62aa:	74 fe       	sbrs	r7, 4
    62ac:	0a c0       	rjmp	.+20     	; 0x62c2 <vfprintf+0x2b4>
    62ae:	72 fc       	sbrc	r7, 2
    62b0:	08 c0       	rjmp	.+16     	; 0x62c2 <vfprintf+0x2b4>
    62b2:	37 2d       	mov	r19, r7
    62b4:	3e 7e       	andi	r19, 0xEE	; 238
    62b6:	05 c0       	rjmp	.+10     	; 0x62c2 <vfprintf+0x2b4>
    62b8:	ba 2c       	mov	r11, r10
    62ba:	37 2d       	mov	r19, r7
    62bc:	03 c0       	rjmp	.+6      	; 0x62c4 <vfprintf+0x2b6>
    62be:	ba 2c       	mov	r11, r10
    62c0:	01 c0       	rjmp	.+2      	; 0x62c4 <vfprintf+0x2b6>
    62c2:	b5 2c       	mov	r11, r5
    62c4:	34 ff       	sbrs	r19, 4
    62c6:	0d c0       	rjmp	.+26     	; 0x62e2 <vfprintf+0x2d4>
    62c8:	fe 01       	movw	r30, r28
    62ca:	ea 0d       	add	r30, r10
    62cc:	f1 1d       	adc	r31, r1
    62ce:	80 81       	ld	r24, Z
    62d0:	80 33       	cpi	r24, 0x30	; 48
    62d2:	11 f4       	brne	.+4      	; 0x62d8 <vfprintf+0x2ca>
    62d4:	39 7e       	andi	r19, 0xE9	; 233
    62d6:	09 c0       	rjmp	.+18     	; 0x62ea <vfprintf+0x2dc>
    62d8:	32 ff       	sbrs	r19, 2
    62da:	06 c0       	rjmp	.+12     	; 0x62e8 <vfprintf+0x2da>
    62dc:	b3 94       	inc	r11
    62de:	b3 94       	inc	r11
    62e0:	04 c0       	rjmp	.+8      	; 0x62ea <vfprintf+0x2dc>
    62e2:	83 2f       	mov	r24, r19
    62e4:	86 78       	andi	r24, 0x86	; 134
    62e6:	09 f0       	breq	.+2      	; 0x62ea <vfprintf+0x2dc>
    62e8:	b3 94       	inc	r11
    62ea:	33 fd       	sbrc	r19, 3
    62ec:	13 c0       	rjmp	.+38     	; 0x6314 <vfprintf+0x306>
    62ee:	30 ff       	sbrs	r19, 0
    62f0:	06 c0       	rjmp	.+12     	; 0x62fe <vfprintf+0x2f0>
    62f2:	5a 2c       	mov	r5, r10
    62f4:	b3 14       	cp	r11, r3
    62f6:	18 f4       	brcc	.+6      	; 0x62fe <vfprintf+0x2f0>
    62f8:	53 0c       	add	r5, r3
    62fa:	5b 18       	sub	r5, r11
    62fc:	b3 2c       	mov	r11, r3
    62fe:	b3 14       	cp	r11, r3
    6300:	68 f4       	brcc	.+26     	; 0x631c <vfprintf+0x30e>
    6302:	b7 01       	movw	r22, r14
    6304:	80 e2       	ldi	r24, 0x20	; 32
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	3c 87       	std	Y+12, r19	; 0x0c
    630a:	0e 94 ef 34 	call	0x69de	; 0x69de <fputc>
    630e:	b3 94       	inc	r11
    6310:	3c 85       	ldd	r19, Y+12	; 0x0c
    6312:	f5 cf       	rjmp	.-22     	; 0x62fe <vfprintf+0x2f0>
    6314:	b3 14       	cp	r11, r3
    6316:	10 f4       	brcc	.+4      	; 0x631c <vfprintf+0x30e>
    6318:	3b 18       	sub	r3, r11
    631a:	01 c0       	rjmp	.+2      	; 0x631e <vfprintf+0x310>
    631c:	31 2c       	mov	r3, r1
    631e:	34 ff       	sbrs	r19, 4
    6320:	12 c0       	rjmp	.+36     	; 0x6346 <vfprintf+0x338>
    6322:	b7 01       	movw	r22, r14
    6324:	80 e3       	ldi	r24, 0x30	; 48
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	3c 87       	std	Y+12, r19	; 0x0c
    632a:	0e 94 ef 34 	call	0x69de	; 0x69de <fputc>
    632e:	3c 85       	ldd	r19, Y+12	; 0x0c
    6330:	32 ff       	sbrs	r19, 2
    6332:	17 c0       	rjmp	.+46     	; 0x6362 <vfprintf+0x354>
    6334:	31 fd       	sbrc	r19, 1
    6336:	03 c0       	rjmp	.+6      	; 0x633e <vfprintf+0x330>
    6338:	88 e7       	ldi	r24, 0x78	; 120
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	02 c0       	rjmp	.+4      	; 0x6342 <vfprintf+0x334>
    633e:	88 e5       	ldi	r24, 0x58	; 88
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	b7 01       	movw	r22, r14
    6344:	0c c0       	rjmp	.+24     	; 0x635e <vfprintf+0x350>
    6346:	83 2f       	mov	r24, r19
    6348:	86 78       	andi	r24, 0x86	; 134
    634a:	59 f0       	breq	.+22     	; 0x6362 <vfprintf+0x354>
    634c:	31 ff       	sbrs	r19, 1
    634e:	02 c0       	rjmp	.+4      	; 0x6354 <vfprintf+0x346>
    6350:	8b e2       	ldi	r24, 0x2B	; 43
    6352:	01 c0       	rjmp	.+2      	; 0x6356 <vfprintf+0x348>
    6354:	80 e2       	ldi	r24, 0x20	; 32
    6356:	37 fd       	sbrc	r19, 7
    6358:	8d e2       	ldi	r24, 0x2D	; 45
    635a:	b7 01       	movw	r22, r14
    635c:	90 e0       	ldi	r25, 0x00	; 0
    635e:	0e 94 ef 34 	call	0x69de	; 0x69de <fputc>
    6362:	a5 14       	cp	r10, r5
    6364:	38 f4       	brcc	.+14     	; 0x6374 <vfprintf+0x366>
    6366:	b7 01       	movw	r22, r14
    6368:	80 e3       	ldi	r24, 0x30	; 48
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	0e 94 ef 34 	call	0x69de	; 0x69de <fputc>
    6370:	5a 94       	dec	r5
    6372:	f7 cf       	rjmp	.-18     	; 0x6362 <vfprintf+0x354>
    6374:	aa 94       	dec	r10
    6376:	f4 01       	movw	r30, r8
    6378:	ea 0d       	add	r30, r10
    637a:	f1 1d       	adc	r31, r1
    637c:	80 81       	ld	r24, Z
    637e:	b7 01       	movw	r22, r14
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	0e 94 ef 34 	call	0x69de	; 0x69de <fputc>
    6386:	a1 10       	cpse	r10, r1
    6388:	f5 cf       	rjmp	.-22     	; 0x6374 <vfprintf+0x366>
    638a:	33 20       	and	r3, r3
    638c:	09 f4       	brne	.+2      	; 0x6390 <vfprintf+0x382>
    638e:	51 ce       	rjmp	.-862    	; 0x6032 <vfprintf+0x24>
    6390:	b7 01       	movw	r22, r14
    6392:	80 e2       	ldi	r24, 0x20	; 32
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	0e 94 ef 34 	call	0x69de	; 0x69de <fputc>
    639a:	3a 94       	dec	r3
    639c:	f6 cf       	rjmp	.-20     	; 0x638a <vfprintf+0x37c>
    639e:	f7 01       	movw	r30, r14
    63a0:	86 81       	ldd	r24, Z+6	; 0x06
    63a2:	97 81       	ldd	r25, Z+7	; 0x07
    63a4:	02 c0       	rjmp	.+4      	; 0x63aa <vfprintf+0x39c>
    63a6:	8f ef       	ldi	r24, 0xFF	; 255
    63a8:	9f ef       	ldi	r25, 0xFF	; 255
    63aa:	2c 96       	adiw	r28, 0x0c	; 12
    63ac:	e2 e1       	ldi	r30, 0x12	; 18
    63ae:	0c 94 d3 35 	jmp	0x6ba6	; 0x6ba6 <__epilogue_restores__>

000063b2 <putval>:
    63b2:	20 fd       	sbrc	r18, 0
    63b4:	09 c0       	rjmp	.+18     	; 0x63c8 <putval+0x16>
    63b6:	fc 01       	movw	r30, r24
    63b8:	23 fd       	sbrc	r18, 3
    63ba:	05 c0       	rjmp	.+10     	; 0x63c6 <putval+0x14>
    63bc:	22 ff       	sbrs	r18, 2
    63be:	02 c0       	rjmp	.+4      	; 0x63c4 <putval+0x12>
    63c0:	73 83       	std	Z+3, r23	; 0x03
    63c2:	62 83       	std	Z+2, r22	; 0x02
    63c4:	51 83       	std	Z+1, r21	; 0x01
    63c6:	40 83       	st	Z, r20
    63c8:	08 95       	ret

000063ca <mulacc>:
    63ca:	44 fd       	sbrc	r20, 4
    63cc:	10 c0       	rjmp	.+32     	; 0x63ee <mulacc+0x24>
    63ce:	46 fd       	sbrc	r20, 6
    63d0:	10 c0       	rjmp	.+32     	; 0x63f2 <mulacc+0x28>
    63d2:	db 01       	movw	r26, r22
    63d4:	fc 01       	movw	r30, r24
    63d6:	aa 0f       	add	r26, r26
    63d8:	bb 1f       	adc	r27, r27
    63da:	ee 1f       	adc	r30, r30
    63dc:	ff 1f       	adc	r31, r31
    63de:	10 94       	com	r1
    63e0:	d1 f7       	brne	.-12     	; 0x63d6 <mulacc+0xc>
    63e2:	6a 0f       	add	r22, r26
    63e4:	7b 1f       	adc	r23, r27
    63e6:	8e 1f       	adc	r24, r30
    63e8:	9f 1f       	adc	r25, r31
    63ea:	31 e0       	ldi	r19, 0x01	; 1
    63ec:	03 c0       	rjmp	.+6      	; 0x63f4 <mulacc+0x2a>
    63ee:	33 e0       	ldi	r19, 0x03	; 3
    63f0:	01 c0       	rjmp	.+2      	; 0x63f4 <mulacc+0x2a>
    63f2:	34 e0       	ldi	r19, 0x04	; 4
    63f4:	66 0f       	add	r22, r22
    63f6:	77 1f       	adc	r23, r23
    63f8:	88 1f       	adc	r24, r24
    63fa:	99 1f       	adc	r25, r25
    63fc:	31 50       	subi	r19, 0x01	; 1
    63fe:	d1 f7       	brne	.-12     	; 0x63f4 <mulacc+0x2a>
    6400:	62 0f       	add	r22, r18
    6402:	71 1d       	adc	r23, r1
    6404:	81 1d       	adc	r24, r1
    6406:	91 1d       	adc	r25, r1
    6408:	08 95       	ret

0000640a <skip_spaces>:
    640a:	0f 93       	push	r16
    640c:	1f 93       	push	r17
    640e:	cf 93       	push	r28
    6410:	df 93       	push	r29
    6412:	8c 01       	movw	r16, r24
    6414:	c8 01       	movw	r24, r16
    6416:	0e 94 b1 34 	call	0x6962	; 0x6962 <fgetc>
    641a:	ec 01       	movw	r28, r24
    641c:	97 fd       	sbrc	r25, 7
    641e:	08 c0       	rjmp	.+16     	; 0x6430 <skip_spaces+0x26>
    6420:	0e 94 87 34 	call	0x690e	; 0x690e <isspace>
    6424:	89 2b       	or	r24, r25
    6426:	b1 f7       	brne	.-20     	; 0x6414 <skip_spaces+0xa>
    6428:	b8 01       	movw	r22, r16
    642a:	ce 01       	movw	r24, r28
    642c:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <ungetc>
    6430:	ce 01       	movw	r24, r28
    6432:	df 91       	pop	r29
    6434:	cf 91       	pop	r28
    6436:	1f 91       	pop	r17
    6438:	0f 91       	pop	r16
    643a:	08 95       	ret

0000643c <conv_int>:
    643c:	a1 e0       	ldi	r26, 0x01	; 1
    643e:	b0 e0       	ldi	r27, 0x00	; 0
    6440:	e4 e2       	ldi	r30, 0x24	; 36
    6442:	f2 e3       	ldi	r31, 0x32	; 50
    6444:	0c 94 bd 35 	jmp	0x6b7a	; 0x6b7a <__prologue_saves__+0xc>
    6448:	8c 01       	movw	r16, r24
    644a:	c6 2e       	mov	r12, r22
    644c:	7a 01       	movw	r14, r20
    644e:	29 83       	std	Y+1, r18	; 0x01
    6450:	0e 94 b1 34 	call	0x6962	; 0x6962 <fgetc>
    6454:	ac 01       	movw	r20, r24
    6456:	55 27       	eor	r21, r21
    6458:	29 81       	ldd	r18, Y+1	; 0x01
    645a:	4b 32       	cpi	r20, 0x2B	; 43
    645c:	51 05       	cpc	r21, r1
    645e:	21 f0       	breq	.+8      	; 0x6468 <conv_int+0x2c>
    6460:	4d 32       	cpi	r20, 0x2D	; 45
    6462:	51 05       	cpc	r21, r1
    6464:	69 f4       	brne	.+26     	; 0x6480 <conv_int+0x44>
    6466:	20 68       	ori	r18, 0x80	; 128
    6468:	ca 94       	dec	r12
    646a:	c1 10       	cpse	r12, r1
    646c:	02 c0       	rjmp	.+4      	; 0x6472 <conv_int+0x36>
    646e:	80 e0       	ldi	r24, 0x00	; 0
    6470:	76 c0       	rjmp	.+236    	; 0x655e <conv_int+0x122>
    6472:	c8 01       	movw	r24, r16
    6474:	29 83       	std	Y+1, r18	; 0x01
    6476:	0e 94 b1 34 	call	0x6962	; 0x6962 <fgetc>
    647a:	29 81       	ldd	r18, Y+1	; 0x01
    647c:	97 fd       	sbrc	r25, 7
    647e:	f7 cf       	rjmp	.-18     	; 0x646e <conv_int+0x32>
    6480:	32 2f       	mov	r19, r18
    6482:	3d 7f       	andi	r19, 0xFD	; 253
    6484:	d3 2e       	mov	r13, r19
    6486:	32 2f       	mov	r19, r18
    6488:	30 73       	andi	r19, 0x30	; 48
    648a:	49 f5       	brne	.+82     	; 0x64de <conv_int+0xa2>
    648c:	80 33       	cpi	r24, 0x30	; 48
    648e:	39 f5       	brne	.+78     	; 0x64de <conv_int+0xa2>
    6490:	bb 24       	eor	r11, r11
    6492:	ba 94       	dec	r11
    6494:	bc 0c       	add	r11, r12
    6496:	09 f4       	brne	.+2      	; 0x649a <conv_int+0x5e>
    6498:	4e c0       	rjmp	.+156    	; 0x6536 <conv_int+0xfa>
    649a:	c8 01       	movw	r24, r16
    649c:	29 83       	std	Y+1, r18	; 0x01
    649e:	0e 94 b1 34 	call	0x6962	; 0x6962 <fgetc>
    64a2:	29 81       	ldd	r18, Y+1	; 0x01
    64a4:	97 fd       	sbrc	r25, 7
    64a6:	47 c0       	rjmp	.+142    	; 0x6536 <conv_int+0xfa>
    64a8:	38 2f       	mov	r19, r24
    64aa:	3f 7d       	andi	r19, 0xDF	; 223
    64ac:	38 35       	cpi	r19, 0x58	; 88
    64ae:	69 f4       	brne	.+26     	; 0x64ca <conv_int+0x8e>
    64b0:	8d 2d       	mov	r24, r13
    64b2:	82 64       	ori	r24, 0x42	; 66
    64b4:	d8 2e       	mov	r13, r24
    64b6:	ca 94       	dec	r12
    64b8:	ca 94       	dec	r12
    64ba:	cc 20       	and	r12, r12
    64bc:	e1 f1       	breq	.+120    	; 0x6536 <conv_int+0xfa>
    64be:	c8 01       	movw	r24, r16
    64c0:	0e 94 b1 34 	call	0x6962	; 0x6962 <fgetc>
    64c4:	97 ff       	sbrs	r25, 7
    64c6:	0b c0       	rjmp	.+22     	; 0x64de <conv_int+0xa2>
    64c8:	36 c0       	rjmp	.+108    	; 0x6536 <conv_int+0xfa>
    64ca:	26 ff       	sbrs	r18, 6
    64cc:	04 c0       	rjmp	.+8      	; 0x64d6 <conv_int+0x9a>
    64ce:	2d 2d       	mov	r18, r13
    64d0:	22 60       	ori	r18, 0x02	; 2
    64d2:	d2 2e       	mov	r13, r18
    64d4:	03 c0       	rjmp	.+6      	; 0x64dc <conv_int+0xa0>
    64d6:	3d 2d       	mov	r19, r13
    64d8:	32 61       	ori	r19, 0x12	; 18
    64da:	d3 2e       	mov	r13, r19
    64dc:	cb 2c       	mov	r12, r11
    64de:	81 2c       	mov	r8, r1
    64e0:	91 2c       	mov	r9, r1
    64e2:	54 01       	movw	r10, r8
    64e4:	20 ed       	ldi	r18, 0xD0	; 208
    64e6:	28 0f       	add	r18, r24
    64e8:	28 30       	cpi	r18, 0x08	; 8
    64ea:	80 f0       	brcs	.+32     	; 0x650c <conv_int+0xd0>
    64ec:	d4 fe       	sbrs	r13, 4
    64ee:	04 c0       	rjmp	.+8      	; 0x64f8 <conv_int+0xbc>
    64f0:	b8 01       	movw	r22, r16
    64f2:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <ungetc>
    64f6:	1c c0       	rjmp	.+56     	; 0x6530 <conv_int+0xf4>
    64f8:	2a 30       	cpi	r18, 0x0A	; 10
    64fa:	40 f0       	brcs	.+16     	; 0x650c <conv_int+0xd0>
    64fc:	d6 fe       	sbrs	r13, 6
    64fe:	f8 cf       	rjmp	.-16     	; 0x64f0 <conv_int+0xb4>
    6500:	2f 7d       	andi	r18, 0xDF	; 223
    6502:	3f ee       	ldi	r19, 0xEF	; 239
    6504:	32 0f       	add	r19, r18
    6506:	36 30       	cpi	r19, 0x06	; 6
    6508:	98 f7       	brcc	.-26     	; 0x64f0 <conv_int+0xb4>
    650a:	27 50       	subi	r18, 0x07	; 7
    650c:	4d 2d       	mov	r20, r13
    650e:	c5 01       	movw	r24, r10
    6510:	b4 01       	movw	r22, r8
    6512:	0e 94 e5 31 	call	0x63ca	; 0x63ca <mulacc>
    6516:	4b 01       	movw	r8, r22
    6518:	5c 01       	movw	r10, r24
    651a:	8d 2d       	mov	r24, r13
    651c:	82 60       	ori	r24, 0x02	; 2
    651e:	d8 2e       	mov	r13, r24
    6520:	ca 94       	dec	r12
    6522:	cc 20       	and	r12, r12
    6524:	59 f0       	breq	.+22     	; 0x653c <conv_int+0x100>
    6526:	c8 01       	movw	r24, r16
    6528:	0e 94 b1 34 	call	0x6962	; 0x6962 <fgetc>
    652c:	97 ff       	sbrs	r25, 7
    652e:	da cf       	rjmp	.-76     	; 0x64e4 <conv_int+0xa8>
    6530:	d1 fc       	sbrc	r13, 1
    6532:	04 c0       	rjmp	.+8      	; 0x653c <conv_int+0x100>
    6534:	9c cf       	rjmp	.-200    	; 0x646e <conv_int+0x32>
    6536:	81 2c       	mov	r8, r1
    6538:	91 2c       	mov	r9, r1
    653a:	54 01       	movw	r10, r8
    653c:	d7 fe       	sbrs	r13, 7
    653e:	08 c0       	rjmp	.+16     	; 0x6550 <conv_int+0x114>
    6540:	b0 94       	com	r11
    6542:	a0 94       	com	r10
    6544:	90 94       	com	r9
    6546:	80 94       	com	r8
    6548:	81 1c       	adc	r8, r1
    654a:	91 1c       	adc	r9, r1
    654c:	a1 1c       	adc	r10, r1
    654e:	b1 1c       	adc	r11, r1
    6550:	2d 2d       	mov	r18, r13
    6552:	b5 01       	movw	r22, r10
    6554:	a4 01       	movw	r20, r8
    6556:	c7 01       	movw	r24, r14
    6558:	0e 94 d9 31 	call	0x63b2	; 0x63b2 <putval>
    655c:	81 e0       	ldi	r24, 0x01	; 1
    655e:	21 96       	adiw	r28, 0x01	; 1
    6560:	ec e0       	ldi	r30, 0x0C	; 12
    6562:	0c 94 d9 35 	jmp	0x6bb2	; 0x6bb2 <__epilogue_restores__+0xc>

00006566 <conv_brk>:
    6566:	a1 e2       	ldi	r26, 0x21	; 33
    6568:	b0 e0       	ldi	r27, 0x00	; 0
    656a:	e9 eb       	ldi	r30, 0xB9	; 185
    656c:	f2 e3       	ldi	r31, 0x32	; 50
    656e:	0c 94 bb 35 	jmp	0x6b76	; 0x6b76 <__prologue_saves__+0x8>
    6572:	5c 01       	movw	r10, r24
    6574:	7a 01       	movw	r14, r20
    6576:	ce 01       	movw	r24, r28
    6578:	01 96       	adiw	r24, 0x01	; 1
    657a:	6c 01       	movw	r12, r24
    657c:	80 e2       	ldi	r24, 0x20	; 32
    657e:	f6 01       	movw	r30, r12
    6580:	11 92       	st	Z+, r1
    6582:	8a 95       	dec	r24
    6584:	e9 f7       	brne	.-6      	; 0x6580 <conv_brk+0x1a>
    6586:	f5 01       	movw	r30, r10
    6588:	83 80       	ldd	r8, Z+3	; 0x03
    658a:	40 e0       	ldi	r20, 0x00	; 0
    658c:	50 e0       	ldi	r21, 0x00	; 0
    658e:	91 2c       	mov	r9, r1
    6590:	71 2c       	mov	r7, r1
    6592:	70 e0       	ldi	r23, 0x00	; 0
    6594:	a1 e0       	ldi	r26, 0x01	; 1
    6596:	b0 e0       	ldi	r27, 0x00	; 0
    6598:	f9 01       	movw	r30, r18
    659a:	83 fc       	sbrc	r8, 3
    659c:	85 91       	lpm	r24, Z+
    659e:	83 fe       	sbrs	r8, 3
    65a0:	81 91       	ld	r24, Z+
    65a2:	8f 01       	movw	r16, r30
    65a4:	98 2f       	mov	r25, r24
    65a6:	9f 01       	movw	r18, r30
    65a8:	81 11       	cpse	r24, r1
    65aa:	03 c0       	rjmp	.+6      	; 0x65b2 <conv_brk+0x4c>
    65ac:	80 e0       	ldi	r24, 0x00	; 0
    65ae:	90 e0       	ldi	r25, 0x00	; 0
    65b0:	7c c0       	rjmp	.+248    	; 0x66aa <conv_brk+0x144>
    65b2:	8e 35       	cpi	r24, 0x5E	; 94
    65b4:	19 f4       	brne	.+6      	; 0x65bc <conv_brk+0x56>
    65b6:	41 15       	cp	r20, r1
    65b8:	51 05       	cpc	r21, r1
    65ba:	49 f1       	breq	.+82     	; 0x660e <conv_brk+0xa8>
    65bc:	e7 2f       	mov	r30, r23
    65be:	f0 e0       	ldi	r31, 0x00	; 0
    65c0:	e4 17       	cp	r30, r20
    65c2:	f5 07       	cpc	r31, r21
    65c4:	3c f4       	brge	.+14     	; 0x65d4 <conv_brk+0x6e>
    65c6:	8d 35       	cpi	r24, 0x5D	; 93
    65c8:	59 f1       	breq	.+86     	; 0x6620 <conv_brk+0xba>
    65ca:	8d 32       	cpi	r24, 0x2D	; 45
    65cc:	19 f4       	brne	.+6      	; 0x65d4 <conv_brk+0x6e>
    65ce:	77 20       	and	r7, r7
    65d0:	01 f1       	breq	.+64     	; 0x6612 <conv_brk+0xac>
    65d2:	03 c0       	rjmp	.+6      	; 0x65da <conv_brk+0x74>
    65d4:	71 10       	cpse	r7, r1
    65d6:	01 c0       	rjmp	.+2      	; 0x65da <conv_brk+0x74>
    65d8:	98 2e       	mov	r9, r24
    65da:	89 2f       	mov	r24, r25
    65dc:	86 95       	lsr	r24
    65de:	86 95       	lsr	r24
    65e0:	86 95       	lsr	r24
    65e2:	86 01       	movw	r16, r12
    65e4:	08 0f       	add	r16, r24
    65e6:	11 1d       	adc	r17, r1
    65e8:	89 2f       	mov	r24, r25
    65ea:	87 70       	andi	r24, 0x07	; 7
    65ec:	3d 01       	movw	r6, r26
    65ee:	01 c0       	rjmp	.+2      	; 0x65f2 <conv_brk+0x8c>
    65f0:	66 0c       	add	r6, r6
    65f2:	8a 95       	dec	r24
    65f4:	ea f7       	brpl	.-6      	; 0x65f0 <conv_brk+0x8a>
    65f6:	f8 01       	movw	r30, r16
    65f8:	80 81       	ld	r24, Z
    65fa:	86 29       	or	r24, r6
    65fc:	80 83       	st	Z, r24
    65fe:	99 15       	cp	r25, r9
    6600:	59 f0       	breq	.+22     	; 0x6618 <conv_brk+0xb2>
    6602:	99 15       	cp	r25, r9
    6604:	10 f4       	brcc	.+4      	; 0x660a <conv_brk+0xa4>
    6606:	9f 5f       	subi	r25, 0xFF	; 255
    6608:	e8 cf       	rjmp	.-48     	; 0x65da <conv_brk+0x74>
    660a:	91 50       	subi	r25, 0x01	; 1
    660c:	e6 cf       	rjmp	.-52     	; 0x65da <conv_brk+0x74>
    660e:	71 e0       	ldi	r23, 0x01	; 1
    6610:	04 c0       	rjmp	.+8      	; 0x661a <conv_brk+0xb4>
    6612:	77 24       	eor	r7, r7
    6614:	73 94       	inc	r7
    6616:	01 c0       	rjmp	.+2      	; 0x661a <conv_brk+0xb4>
    6618:	71 2c       	mov	r7, r1
    661a:	4f 5f       	subi	r20, 0xFF	; 255
    661c:	5f 4f       	sbci	r21, 0xFF	; 255
    661e:	bc cf       	rjmp	.-136    	; 0x6598 <conv_brk+0x32>
    6620:	77 20       	and	r7, r7
    6622:	19 f0       	breq	.+6      	; 0x662a <conv_brk+0xc4>
    6624:	8e 81       	ldd	r24, Y+6	; 0x06
    6626:	80 62       	ori	r24, 0x20	; 32
    6628:	8e 83       	std	Y+6, r24	; 0x06
    662a:	71 11       	cpse	r23, r1
    662c:	03 c0       	rjmp	.+6      	; 0x6634 <conv_brk+0xce>
    662e:	99 24       	eor	r9, r9
    6630:	93 94       	inc	r9
    6632:	16 c0       	rjmp	.+44     	; 0x6660 <conv_brk+0xfa>
    6634:	f6 01       	movw	r30, r12
    6636:	9e 01       	movw	r18, r28
    6638:	2f 5d       	subi	r18, 0xDF	; 223
    663a:	3f 4f       	sbci	r19, 0xFF	; 255
    663c:	80 81       	ld	r24, Z
    663e:	80 95       	com	r24
    6640:	81 93       	st	Z+, r24
    6642:	e2 17       	cp	r30, r18
    6644:	f3 07       	cpc	r31, r19
    6646:	d1 f7       	brne	.-12     	; 0x663c <conv_brk+0xd6>
    6648:	f2 cf       	rjmp	.-28     	; 0x662e <conv_brk+0xc8>
    664a:	e1 14       	cp	r14, r1
    664c:	f1 04       	cpc	r15, r1
    664e:	29 f0       	breq	.+10     	; 0x665a <conv_brk+0xf4>
    6650:	f7 01       	movw	r30, r14
    6652:	80 83       	st	Z, r24
    6654:	c7 01       	movw	r24, r14
    6656:	01 96       	adiw	r24, 0x01	; 1
    6658:	7c 01       	movw	r14, r24
    665a:	61 50       	subi	r22, 0x01	; 1
    665c:	91 2c       	mov	r9, r1
    665e:	f9 f0       	breq	.+62     	; 0x669e <conv_brk+0x138>
    6660:	c5 01       	movw	r24, r10
    6662:	69 a3       	std	Y+33, r22	; 0x21
    6664:	0e 94 b1 34 	call	0x6962	; 0x6962 <fgetc>
    6668:	69 a1       	ldd	r22, Y+33	; 0x21
    666a:	97 fd       	sbrc	r25, 7
    666c:	16 c0       	rjmp	.+44     	; 0x669a <conv_brk+0x134>
    666e:	28 2f       	mov	r18, r24
    6670:	26 95       	lsr	r18
    6672:	26 95       	lsr	r18
    6674:	26 95       	lsr	r18
    6676:	f6 01       	movw	r30, r12
    6678:	e2 0f       	add	r30, r18
    667a:	f1 1d       	adc	r31, r1
    667c:	20 81       	ld	r18, Z
    667e:	30 e0       	ldi	r19, 0x00	; 0
    6680:	ac 01       	movw	r20, r24
    6682:	47 70       	andi	r20, 0x07	; 7
    6684:	55 27       	eor	r21, r21
    6686:	02 c0       	rjmp	.+4      	; 0x668c <conv_brk+0x126>
    6688:	35 95       	asr	r19
    668a:	27 95       	ror	r18
    668c:	4a 95       	dec	r20
    668e:	e2 f7       	brpl	.-8      	; 0x6688 <conv_brk+0x122>
    6690:	20 fd       	sbrc	r18, 0
    6692:	db cf       	rjmp	.-74     	; 0x664a <conv_brk+0xe4>
    6694:	b5 01       	movw	r22, r10
    6696:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <ungetc>
    669a:	91 10       	cpse	r9, r1
    669c:	87 cf       	rjmp	.-242    	; 0x65ac <conv_brk+0x46>
    669e:	e1 14       	cp	r14, r1
    66a0:	f1 04       	cpc	r15, r1
    66a2:	11 f0       	breq	.+4      	; 0x66a8 <conv_brk+0x142>
    66a4:	f7 01       	movw	r30, r14
    66a6:	10 82       	st	Z, r1
    66a8:	c8 01       	movw	r24, r16
    66aa:	a1 96       	adiw	r28, 0x21	; 33
    66ac:	ee e0       	ldi	r30, 0x0E	; 14
    66ae:	0c 94 d7 35 	jmp	0x6bae	; 0x6bae <__epilogue_restores__+0x8>

000066b2 <vfscanf>:
    66b2:	4f 92       	push	r4
    66b4:	5f 92       	push	r5
    66b6:	7f 92       	push	r7
    66b8:	8f 92       	push	r8
    66ba:	9f 92       	push	r9
    66bc:	af 92       	push	r10
    66be:	bf 92       	push	r11
    66c0:	cf 92       	push	r12
    66c2:	df 92       	push	r13
    66c4:	ef 92       	push	r14
    66c6:	ff 92       	push	r15
    66c8:	0f 93       	push	r16
    66ca:	1f 93       	push	r17
    66cc:	cf 93       	push	r28
    66ce:	df 93       	push	r29
    66d0:	1f 92       	push	r1
    66d2:	cd b7       	in	r28, 0x3d	; 61
    66d4:	de b7       	in	r29, 0x3e	; 62
    66d6:	6c 01       	movw	r12, r24
    66d8:	2b 01       	movw	r4, r22
    66da:	5a 01       	movw	r10, r20
    66dc:	fc 01       	movw	r30, r24
    66de:	17 82       	std	Z+7, r1	; 0x07
    66e0:	16 82       	std	Z+6, r1	; 0x06
    66e2:	71 2c       	mov	r7, r1
    66e4:	f6 01       	movw	r30, r12
    66e6:	f3 80       	ldd	r15, Z+3	; 0x03
    66e8:	f2 01       	movw	r30, r4
    66ea:	f3 fc       	sbrc	r15, 3
    66ec:	85 91       	lpm	r24, Z+
    66ee:	f3 fe       	sbrs	r15, 3
    66f0:	81 91       	ld	r24, Z+
    66f2:	38 2f       	mov	r19, r24
    66f4:	2f 01       	movw	r4, r30
    66f6:	88 23       	and	r24, r24
    66f8:	09 f4       	brne	.+2      	; 0x66fc <vfscanf+0x4a>
    66fa:	f3 c0       	rjmp	.+486    	; 0x68e2 <vfscanf+0x230>
    66fc:	90 e0       	ldi	r25, 0x00	; 0
    66fe:	39 83       	std	Y+1, r19	; 0x01
    6700:	0e 94 87 34 	call	0x690e	; 0x690e <isspace>
    6704:	39 81       	ldd	r19, Y+1	; 0x01
    6706:	89 2b       	or	r24, r25
    6708:	21 f0       	breq	.+8      	; 0x6712 <vfscanf+0x60>
    670a:	c6 01       	movw	r24, r12
    670c:	0e 94 05 32 	call	0x640a	; 0x640a <skip_spaces>
    6710:	e9 cf       	rjmp	.-46     	; 0x66e4 <vfscanf+0x32>
    6712:	35 32       	cpi	r19, 0x25	; 37
    6714:	41 f4       	brne	.+16     	; 0x6726 <vfscanf+0x74>
    6716:	f2 01       	movw	r30, r4
    6718:	f3 fc       	sbrc	r15, 3
    671a:	35 91       	lpm	r19, Z+
    671c:	f3 fe       	sbrs	r15, 3
    671e:	31 91       	ld	r19, Z+
    6720:	2f 01       	movw	r4, r30
    6722:	35 32       	cpi	r19, 0x25	; 37
    6724:	69 f4       	brne	.+26     	; 0x6740 <vfscanf+0x8e>
    6726:	c6 01       	movw	r24, r12
    6728:	39 83       	std	Y+1, r19	; 0x01
    672a:	0e 94 b1 34 	call	0x6962	; 0x6962 <fgetc>
    672e:	39 81       	ldd	r19, Y+1	; 0x01
    6730:	97 fd       	sbrc	r25, 7
    6732:	d5 c0       	rjmp	.+426    	; 0x68de <vfscanf+0x22c>
    6734:	38 17       	cp	r19, r24
    6736:	b1 f2       	breq	.-84     	; 0x66e4 <vfscanf+0x32>
    6738:	b6 01       	movw	r22, r12
    673a:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <ungetc>
    673e:	d1 c0       	rjmp	.+418    	; 0x68e2 <vfscanf+0x230>
    6740:	3a 32       	cpi	r19, 0x2A	; 42
    6742:	39 f4       	brne	.+14     	; 0x6752 <vfscanf+0xa0>
    6744:	f3 fc       	sbrc	r15, 3
    6746:	35 91       	lpm	r19, Z+
    6748:	f3 fe       	sbrs	r15, 3
    674a:	31 91       	ld	r19, Z+
    674c:	2f 01       	movw	r4, r30
    674e:	51 e0       	ldi	r21, 0x01	; 1
    6750:	01 c0       	rjmp	.+2      	; 0x6754 <vfscanf+0xa2>
    6752:	50 e0       	ldi	r21, 0x00	; 0
    6754:	42 01       	movw	r8, r4
    6756:	10 e0       	ldi	r17, 0x00	; 0
    6758:	20 ed       	ldi	r18, 0xD0	; 208
    675a:	23 0f       	add	r18, r19
    675c:	2a 30       	cpi	r18, 0x0A	; 10
    675e:	90 f4       	brcc	.+36     	; 0x6784 <vfscanf+0xd2>
    6760:	52 60       	ori	r21, 0x02	; 2
    6762:	61 2f       	mov	r22, r17
    6764:	70 e0       	ldi	r23, 0x00	; 0
    6766:	80 e0       	ldi	r24, 0x00	; 0
    6768:	90 e0       	ldi	r25, 0x00	; 0
    676a:	40 e2       	ldi	r20, 0x20	; 32
    676c:	59 83       	std	Y+1, r21	; 0x01
    676e:	0e 94 e5 31 	call	0x63ca	; 0x63ca <mulacc>
    6772:	16 2f       	mov	r17, r22
    6774:	f4 01       	movw	r30, r8
    6776:	f3 fc       	sbrc	r15, 3
    6778:	35 91       	lpm	r19, Z+
    677a:	f3 fe       	sbrs	r15, 3
    677c:	31 91       	ld	r19, Z+
    677e:	4f 01       	movw	r8, r30
    6780:	59 81       	ldd	r21, Y+1	; 0x01
    6782:	ea cf       	rjmp	.-44     	; 0x6758 <vfscanf+0xa6>
    6784:	05 2f       	mov	r16, r21
    6786:	23 2f       	mov	r18, r19
    6788:	24 01       	movw	r4, r8
    678a:	51 ff       	sbrs	r21, 1
    678c:	03 c0       	rjmp	.+6      	; 0x6794 <vfscanf+0xe2>
    678e:	11 11       	cpse	r17, r1
    6790:	02 c0       	rjmp	.+4      	; 0x6796 <vfscanf+0xe4>
    6792:	a7 c0       	rjmp	.+334    	; 0x68e2 <vfscanf+0x230>
    6794:	1f ef       	ldi	r17, 0xFF	; 255
    6796:	38 36       	cpi	r19, 0x68	; 104
    6798:	19 f0       	breq	.+6      	; 0x67a0 <vfscanf+0xee>
    679a:	3c 36       	cpi	r19, 0x6C	; 108
    679c:	59 f0       	breq	.+22     	; 0x67b4 <vfscanf+0x102>
    679e:	11 c0       	rjmp	.+34     	; 0x67c2 <vfscanf+0x110>
    67a0:	f4 01       	movw	r30, r8
    67a2:	f3 fc       	sbrc	r15, 3
    67a4:	25 91       	lpm	r18, Z+
    67a6:	f3 fe       	sbrs	r15, 3
    67a8:	21 91       	ld	r18, Z+
    67aa:	2f 01       	movw	r4, r30
    67ac:	28 36       	cpi	r18, 0x68	; 104
    67ae:	49 f4       	brne	.+18     	; 0x67c2 <vfscanf+0x110>
    67b0:	05 2f       	mov	r16, r21
    67b2:	08 60       	ori	r16, 0x08	; 8
    67b4:	04 60       	ori	r16, 0x04	; 4
    67b6:	f2 01       	movw	r30, r4
    67b8:	f3 fc       	sbrc	r15, 3
    67ba:	25 91       	lpm	r18, Z+
    67bc:	f3 fe       	sbrs	r15, 3
    67be:	21 91       	ld	r18, Z+
    67c0:	2f 01       	movw	r4, r30
    67c2:	22 23       	and	r18, r18
    67c4:	09 f4       	brne	.+2      	; 0x67c8 <vfscanf+0x116>
    67c6:	8d c0       	rjmp	.+282    	; 0x68e2 <vfscanf+0x230>
    67c8:	62 2f       	mov	r22, r18
    67ca:	70 e0       	ldi	r23, 0x00	; 0
    67cc:	84 e0       	ldi	r24, 0x04	; 4
    67ce:	91 e0       	ldi	r25, 0x01	; 1
    67d0:	29 83       	std	Y+1, r18	; 0x01
    67d2:	0e 94 90 34 	call	0x6920	; 0x6920 <strchr_P>
    67d6:	29 81       	ldd	r18, Y+1	; 0x01
    67d8:	89 2b       	or	r24, r25
    67da:	09 f4       	brne	.+2      	; 0x67de <vfscanf+0x12c>
    67dc:	82 c0       	rjmp	.+260    	; 0x68e2 <vfscanf+0x230>
    67de:	00 fd       	sbrc	r16, 0
    67e0:	07 c0       	rjmp	.+14     	; 0x67f0 <vfscanf+0x13e>
    67e2:	f5 01       	movw	r30, r10
    67e4:	e0 80       	ld	r14, Z
    67e6:	f1 80       	ldd	r15, Z+1	; 0x01
    67e8:	c5 01       	movw	r24, r10
    67ea:	02 96       	adiw	r24, 0x02	; 2
    67ec:	5c 01       	movw	r10, r24
    67ee:	02 c0       	rjmp	.+4      	; 0x67f4 <vfscanf+0x142>
    67f0:	e1 2c       	mov	r14, r1
    67f2:	f1 2c       	mov	r15, r1
    67f4:	2e 36       	cpi	r18, 0x6E	; 110
    67f6:	51 f4       	brne	.+20     	; 0x680c <vfscanf+0x15a>
    67f8:	f6 01       	movw	r30, r12
    67fa:	46 81       	ldd	r20, Z+6	; 0x06
    67fc:	57 81       	ldd	r21, Z+7	; 0x07
    67fe:	60 e0       	ldi	r22, 0x00	; 0
    6800:	70 e0       	ldi	r23, 0x00	; 0
    6802:	20 2f       	mov	r18, r16
    6804:	c7 01       	movw	r24, r14
    6806:	0e 94 d9 31 	call	0x63b2	; 0x63b2 <putval>
    680a:	6c cf       	rjmp	.-296    	; 0x66e4 <vfscanf+0x32>
    680c:	23 36       	cpi	r18, 0x63	; 99
    680e:	91 f4       	brne	.+36     	; 0x6834 <vfscanf+0x182>
    6810:	01 ff       	sbrs	r16, 1
    6812:	11 e0       	ldi	r17, 0x01	; 1
    6814:	c6 01       	movw	r24, r12
    6816:	0e 94 b1 34 	call	0x6962	; 0x6962 <fgetc>
    681a:	97 fd       	sbrc	r25, 7
    681c:	60 c0       	rjmp	.+192    	; 0x68de <vfscanf+0x22c>
    681e:	e1 14       	cp	r14, r1
    6820:	f1 04       	cpc	r15, r1
    6822:	29 f0       	breq	.+10     	; 0x682e <vfscanf+0x17c>
    6824:	f7 01       	movw	r30, r14
    6826:	80 83       	st	Z, r24
    6828:	c7 01       	movw	r24, r14
    682a:	01 96       	adiw	r24, 0x01	; 1
    682c:	7c 01       	movw	r14, r24
    682e:	11 50       	subi	r17, 0x01	; 1
    6830:	89 f7       	brne	.-30     	; 0x6814 <vfscanf+0x162>
    6832:	51 c0       	rjmp	.+162    	; 0x68d6 <vfscanf+0x224>
    6834:	2b 35       	cpi	r18, 0x5B	; 91
    6836:	59 f4       	brne	.+22     	; 0x684e <vfscanf+0x19c>
    6838:	92 01       	movw	r18, r4
    683a:	a7 01       	movw	r20, r14
    683c:	61 2f       	mov	r22, r17
    683e:	c6 01       	movw	r24, r12
    6840:	0e 94 b3 32 	call	0x6566	; 0x6566 <conv_brk>
    6844:	2c 01       	movw	r4, r24
    6846:	89 2b       	or	r24, r25
    6848:	09 f0       	breq	.+2      	; 0x684c <vfscanf+0x19a>
    684a:	45 c0       	rjmp	.+138    	; 0x68d6 <vfscanf+0x224>
    684c:	3f c0       	rjmp	.+126    	; 0x68cc <vfscanf+0x21a>
    684e:	c6 01       	movw	r24, r12
    6850:	29 83       	std	Y+1, r18	; 0x01
    6852:	0e 94 05 32 	call	0x640a	; 0x640a <skip_spaces>
    6856:	29 81       	ldd	r18, Y+1	; 0x01
    6858:	97 fd       	sbrc	r25, 7
    685a:	41 c0       	rjmp	.+130    	; 0x68de <vfscanf+0x22c>
    685c:	2f 36       	cpi	r18, 0x6F	; 111
    685e:	59 f1       	breq	.+86     	; 0x68b6 <vfscanf+0x204>
    6860:	28 f4       	brcc	.+10     	; 0x686c <vfscanf+0x1ba>
    6862:	24 36       	cpi	r18, 0x64	; 100
    6864:	31 f1       	breq	.+76     	; 0x68b2 <vfscanf+0x200>
    6866:	29 36       	cpi	r18, 0x69	; 105
    6868:	49 f1       	breq	.+82     	; 0x68bc <vfscanf+0x20a>
    686a:	27 c0       	rjmp	.+78     	; 0x68ba <vfscanf+0x208>
    686c:	23 37       	cpi	r18, 0x73	; 115
    686e:	69 f0       	breq	.+26     	; 0x688a <vfscanf+0x1d8>
    6870:	25 37       	cpi	r18, 0x75	; 117
    6872:	f9 f0       	breq	.+62     	; 0x68b2 <vfscanf+0x200>
    6874:	22 c0       	rjmp	.+68     	; 0x68ba <vfscanf+0x208>
    6876:	e1 14       	cp	r14, r1
    6878:	f1 04       	cpc	r15, r1
    687a:	29 f0       	breq	.+10     	; 0x6886 <vfscanf+0x1d4>
    687c:	f7 01       	movw	r30, r14
    687e:	80 82       	st	Z, r8
    6880:	c7 01       	movw	r24, r14
    6882:	01 96       	adiw	r24, 0x01	; 1
    6884:	7c 01       	movw	r14, r24
    6886:	11 50       	subi	r17, 0x01	; 1
    6888:	71 f0       	breq	.+28     	; 0x68a6 <vfscanf+0x1f4>
    688a:	c6 01       	movw	r24, r12
    688c:	0e 94 b1 34 	call	0x6962	; 0x6962 <fgetc>
    6890:	4c 01       	movw	r8, r24
    6892:	97 fd       	sbrc	r25, 7
    6894:	08 c0       	rjmp	.+16     	; 0x68a6 <vfscanf+0x1f4>
    6896:	0e 94 87 34 	call	0x690e	; 0x690e <isspace>
    689a:	89 2b       	or	r24, r25
    689c:	61 f3       	breq	.-40     	; 0x6876 <vfscanf+0x1c4>
    689e:	b6 01       	movw	r22, r12
    68a0:	c4 01       	movw	r24, r8
    68a2:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <ungetc>
    68a6:	e1 14       	cp	r14, r1
    68a8:	f1 04       	cpc	r15, r1
    68aa:	a9 f0       	breq	.+42     	; 0x68d6 <vfscanf+0x224>
    68ac:	f7 01       	movw	r30, r14
    68ae:	10 82       	st	Z, r1
    68b0:	12 c0       	rjmp	.+36     	; 0x68d6 <vfscanf+0x224>
    68b2:	00 62       	ori	r16, 0x20	; 32
    68b4:	03 c0       	rjmp	.+6      	; 0x68bc <vfscanf+0x20a>
    68b6:	00 61       	ori	r16, 0x10	; 16
    68b8:	01 c0       	rjmp	.+2      	; 0x68bc <vfscanf+0x20a>
    68ba:	00 64       	ori	r16, 0x40	; 64
    68bc:	20 2f       	mov	r18, r16
    68be:	a7 01       	movw	r20, r14
    68c0:	61 2f       	mov	r22, r17
    68c2:	c6 01       	movw	r24, r12
    68c4:	0e 94 1e 32 	call	0x643c	; 0x643c <conv_int>
    68c8:	81 11       	cpse	r24, r1
    68ca:	05 c0       	rjmp	.+10     	; 0x68d6 <vfscanf+0x224>
    68cc:	f6 01       	movw	r30, r12
    68ce:	83 81       	ldd	r24, Z+3	; 0x03
    68d0:	80 73       	andi	r24, 0x30	; 48
    68d2:	29 f4       	brne	.+10     	; 0x68de <vfscanf+0x22c>
    68d4:	06 c0       	rjmp	.+12     	; 0x68e2 <vfscanf+0x230>
    68d6:	00 fd       	sbrc	r16, 0
    68d8:	05 cf       	rjmp	.-502    	; 0x66e4 <vfscanf+0x32>
    68da:	73 94       	inc	r7
    68dc:	03 cf       	rjmp	.-506    	; 0x66e4 <vfscanf+0x32>
    68de:	77 20       	and	r7, r7
    68e0:	19 f0       	breq	.+6      	; 0x68e8 <vfscanf+0x236>
    68e2:	87 2d       	mov	r24, r7
    68e4:	90 e0       	ldi	r25, 0x00	; 0
    68e6:	02 c0       	rjmp	.+4      	; 0x68ec <vfscanf+0x23a>
    68e8:	8f ef       	ldi	r24, 0xFF	; 255
    68ea:	9f ef       	ldi	r25, 0xFF	; 255
    68ec:	0f 90       	pop	r0
    68ee:	df 91       	pop	r29
    68f0:	cf 91       	pop	r28
    68f2:	1f 91       	pop	r17
    68f4:	0f 91       	pop	r16
    68f6:	ff 90       	pop	r15
    68f8:	ef 90       	pop	r14
    68fa:	df 90       	pop	r13
    68fc:	cf 90       	pop	r12
    68fe:	bf 90       	pop	r11
    6900:	af 90       	pop	r10
    6902:	9f 90       	pop	r9
    6904:	8f 90       	pop	r8
    6906:	7f 90       	pop	r7
    6908:	5f 90       	pop	r5
    690a:	4f 90       	pop	r4
    690c:	08 95       	ret

0000690e <isspace>:
    690e:	91 11       	cpse	r25, r1
    6910:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <__ctype_isfalse>
    6914:	80 32       	cpi	r24, 0x20	; 32
    6916:	19 f0       	breq	.+6      	; 0x691e <isspace+0x10>
    6918:	89 50       	subi	r24, 0x09	; 9
    691a:	85 50       	subi	r24, 0x05	; 5
    691c:	c8 f7       	brcc	.-14     	; 0x6910 <isspace+0x2>
    691e:	08 95       	ret

00006920 <strchr_P>:
    6920:	fc 01       	movw	r30, r24
    6922:	05 90       	lpm	r0, Z+
    6924:	06 16       	cp	r0, r22
    6926:	21 f0       	breq	.+8      	; 0x6930 <strchr_P+0x10>
    6928:	00 20       	and	r0, r0
    692a:	d9 f7       	brne	.-10     	; 0x6922 <strchr_P+0x2>
    692c:	c0 01       	movw	r24, r0
    692e:	08 95       	ret
    6930:	31 97       	sbiw	r30, 0x01	; 1
    6932:	cf 01       	movw	r24, r30
    6934:	08 95       	ret

00006936 <strnlen_P>:
    6936:	fc 01       	movw	r30, r24
    6938:	05 90       	lpm	r0, Z+
    693a:	61 50       	subi	r22, 0x01	; 1
    693c:	70 40       	sbci	r23, 0x00	; 0
    693e:	01 10       	cpse	r0, r1
    6940:	d8 f7       	brcc	.-10     	; 0x6938 <strnlen_P+0x2>
    6942:	80 95       	com	r24
    6944:	90 95       	com	r25
    6946:	8e 0f       	add	r24, r30
    6948:	9f 1f       	adc	r25, r31
    694a:	08 95       	ret

0000694c <strnlen>:
    694c:	fc 01       	movw	r30, r24
    694e:	61 50       	subi	r22, 0x01	; 1
    6950:	70 40       	sbci	r23, 0x00	; 0
    6952:	01 90       	ld	r0, Z+
    6954:	01 10       	cpse	r0, r1
    6956:	d8 f7       	brcc	.-10     	; 0x694e <strnlen+0x2>
    6958:	80 95       	com	r24
    695a:	90 95       	com	r25
    695c:	8e 0f       	add	r24, r30
    695e:	9f 1f       	adc	r25, r31
    6960:	08 95       	ret

00006962 <fgetc>:
    6962:	cf 93       	push	r28
    6964:	df 93       	push	r29
    6966:	ec 01       	movw	r28, r24
    6968:	2b 81       	ldd	r18, Y+3	; 0x03
    696a:	20 ff       	sbrs	r18, 0
    696c:	33 c0       	rjmp	.+102    	; 0x69d4 <fgetc+0x72>
    696e:	26 ff       	sbrs	r18, 6
    6970:	0a c0       	rjmp	.+20     	; 0x6986 <fgetc+0x24>
    6972:	2f 7b       	andi	r18, 0xBF	; 191
    6974:	2b 83       	std	Y+3, r18	; 0x03
    6976:	8e 81       	ldd	r24, Y+6	; 0x06
    6978:	9f 81       	ldd	r25, Y+7	; 0x07
    697a:	01 96       	adiw	r24, 0x01	; 1
    697c:	9f 83       	std	Y+7, r25	; 0x07
    697e:	8e 83       	std	Y+6, r24	; 0x06
    6980:	8a 81       	ldd	r24, Y+2	; 0x02
    6982:	90 e0       	ldi	r25, 0x00	; 0
    6984:	29 c0       	rjmp	.+82     	; 0x69d8 <fgetc+0x76>
    6986:	22 ff       	sbrs	r18, 2
    6988:	0f c0       	rjmp	.+30     	; 0x69a8 <fgetc+0x46>
    698a:	e8 81       	ld	r30, Y
    698c:	f9 81       	ldd	r31, Y+1	; 0x01
    698e:	80 81       	ld	r24, Z
    6990:	08 2e       	mov	r0, r24
    6992:	00 0c       	add	r0, r0
    6994:	99 0b       	sbc	r25, r25
    6996:	00 97       	sbiw	r24, 0x00	; 0
    6998:	19 f4       	brne	.+6      	; 0x69a0 <fgetc+0x3e>
    699a:	20 62       	ori	r18, 0x20	; 32
    699c:	2b 83       	std	Y+3, r18	; 0x03
    699e:	1a c0       	rjmp	.+52     	; 0x69d4 <fgetc+0x72>
    69a0:	31 96       	adiw	r30, 0x01	; 1
    69a2:	f9 83       	std	Y+1, r31	; 0x01
    69a4:	e8 83       	st	Y, r30
    69a6:	0e c0       	rjmp	.+28     	; 0x69c4 <fgetc+0x62>
    69a8:	ea 85       	ldd	r30, Y+10	; 0x0a
    69aa:	fb 85       	ldd	r31, Y+11	; 0x0b
    69ac:	09 95       	icall
    69ae:	97 ff       	sbrs	r25, 7
    69b0:	09 c0       	rjmp	.+18     	; 0x69c4 <fgetc+0x62>
    69b2:	2b 81       	ldd	r18, Y+3	; 0x03
    69b4:	01 96       	adiw	r24, 0x01	; 1
    69b6:	11 f0       	breq	.+4      	; 0x69bc <fgetc+0x5a>
    69b8:	80 e2       	ldi	r24, 0x20	; 32
    69ba:	01 c0       	rjmp	.+2      	; 0x69be <fgetc+0x5c>
    69bc:	80 e1       	ldi	r24, 0x10	; 16
    69be:	82 2b       	or	r24, r18
    69c0:	8b 83       	std	Y+3, r24	; 0x03
    69c2:	08 c0       	rjmp	.+16     	; 0x69d4 <fgetc+0x72>
    69c4:	2e 81       	ldd	r18, Y+6	; 0x06
    69c6:	3f 81       	ldd	r19, Y+7	; 0x07
    69c8:	2f 5f       	subi	r18, 0xFF	; 255
    69ca:	3f 4f       	sbci	r19, 0xFF	; 255
    69cc:	3f 83       	std	Y+7, r19	; 0x07
    69ce:	2e 83       	std	Y+6, r18	; 0x06
    69d0:	99 27       	eor	r25, r25
    69d2:	02 c0       	rjmp	.+4      	; 0x69d8 <fgetc+0x76>
    69d4:	8f ef       	ldi	r24, 0xFF	; 255
    69d6:	9f ef       	ldi	r25, 0xFF	; 255
    69d8:	df 91       	pop	r29
    69da:	cf 91       	pop	r28
    69dc:	08 95       	ret

000069de <fputc>:
    69de:	0f 93       	push	r16
    69e0:	1f 93       	push	r17
    69e2:	cf 93       	push	r28
    69e4:	df 93       	push	r29
    69e6:	fb 01       	movw	r30, r22
    69e8:	23 81       	ldd	r18, Z+3	; 0x03
    69ea:	21 fd       	sbrc	r18, 1
    69ec:	03 c0       	rjmp	.+6      	; 0x69f4 <fputc+0x16>
    69ee:	8f ef       	ldi	r24, 0xFF	; 255
    69f0:	9f ef       	ldi	r25, 0xFF	; 255
    69f2:	28 c0       	rjmp	.+80     	; 0x6a44 <fputc+0x66>
    69f4:	22 ff       	sbrs	r18, 2
    69f6:	16 c0       	rjmp	.+44     	; 0x6a24 <fputc+0x46>
    69f8:	46 81       	ldd	r20, Z+6	; 0x06
    69fa:	57 81       	ldd	r21, Z+7	; 0x07
    69fc:	24 81       	ldd	r18, Z+4	; 0x04
    69fe:	35 81       	ldd	r19, Z+5	; 0x05
    6a00:	42 17       	cp	r20, r18
    6a02:	53 07       	cpc	r21, r19
    6a04:	44 f4       	brge	.+16     	; 0x6a16 <fputc+0x38>
    6a06:	a0 81       	ld	r26, Z
    6a08:	b1 81       	ldd	r27, Z+1	; 0x01
    6a0a:	9d 01       	movw	r18, r26
    6a0c:	2f 5f       	subi	r18, 0xFF	; 255
    6a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    6a10:	31 83       	std	Z+1, r19	; 0x01
    6a12:	20 83       	st	Z, r18
    6a14:	8c 93       	st	X, r24
    6a16:	26 81       	ldd	r18, Z+6	; 0x06
    6a18:	37 81       	ldd	r19, Z+7	; 0x07
    6a1a:	2f 5f       	subi	r18, 0xFF	; 255
    6a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a1e:	37 83       	std	Z+7, r19	; 0x07
    6a20:	26 83       	std	Z+6, r18	; 0x06
    6a22:	10 c0       	rjmp	.+32     	; 0x6a44 <fputc+0x66>
    6a24:	eb 01       	movw	r28, r22
    6a26:	09 2f       	mov	r16, r25
    6a28:	18 2f       	mov	r17, r24
    6a2a:	00 84       	ldd	r0, Z+8	; 0x08
    6a2c:	f1 85       	ldd	r31, Z+9	; 0x09
    6a2e:	e0 2d       	mov	r30, r0
    6a30:	09 95       	icall
    6a32:	89 2b       	or	r24, r25
    6a34:	e1 f6       	brne	.-72     	; 0x69ee <fputc+0x10>
    6a36:	8e 81       	ldd	r24, Y+6	; 0x06
    6a38:	9f 81       	ldd	r25, Y+7	; 0x07
    6a3a:	01 96       	adiw	r24, 0x01	; 1
    6a3c:	9f 83       	std	Y+7, r25	; 0x07
    6a3e:	8e 83       	std	Y+6, r24	; 0x06
    6a40:	81 2f       	mov	r24, r17
    6a42:	90 2f       	mov	r25, r16
    6a44:	df 91       	pop	r29
    6a46:	cf 91       	pop	r28
    6a48:	1f 91       	pop	r17
    6a4a:	0f 91       	pop	r16
    6a4c:	08 95       	ret

00006a4e <ungetc>:
    6a4e:	fb 01       	movw	r30, r22
    6a50:	23 81       	ldd	r18, Z+3	; 0x03
    6a52:	20 ff       	sbrs	r18, 0
    6a54:	12 c0       	rjmp	.+36     	; 0x6a7a <ungetc+0x2c>
    6a56:	26 fd       	sbrc	r18, 6
    6a58:	10 c0       	rjmp	.+32     	; 0x6a7a <ungetc+0x2c>
    6a5a:	8f 3f       	cpi	r24, 0xFF	; 255
    6a5c:	3f ef       	ldi	r19, 0xFF	; 255
    6a5e:	93 07       	cpc	r25, r19
    6a60:	61 f0       	breq	.+24     	; 0x6a7a <ungetc+0x2c>
    6a62:	82 83       	std	Z+2, r24	; 0x02
    6a64:	2f 7d       	andi	r18, 0xDF	; 223
    6a66:	20 64       	ori	r18, 0x40	; 64
    6a68:	23 83       	std	Z+3, r18	; 0x03
    6a6a:	26 81       	ldd	r18, Z+6	; 0x06
    6a6c:	37 81       	ldd	r19, Z+7	; 0x07
    6a6e:	21 50       	subi	r18, 0x01	; 1
    6a70:	31 09       	sbc	r19, r1
    6a72:	37 83       	std	Z+7, r19	; 0x07
    6a74:	26 83       	std	Z+6, r18	; 0x06
    6a76:	99 27       	eor	r25, r25
    6a78:	08 95       	ret
    6a7a:	8f ef       	ldi	r24, 0xFF	; 255
    6a7c:	9f ef       	ldi	r25, 0xFF	; 255
    6a7e:	08 95       	ret

00006a80 <__ultoa_invert>:
    6a80:	fa 01       	movw	r30, r20
    6a82:	aa 27       	eor	r26, r26
    6a84:	28 30       	cpi	r18, 0x08	; 8
    6a86:	51 f1       	breq	.+84     	; 0x6adc <__ultoa_invert+0x5c>
    6a88:	20 31       	cpi	r18, 0x10	; 16
    6a8a:	81 f1       	breq	.+96     	; 0x6aec <__ultoa_invert+0x6c>
    6a8c:	e8 94       	clt
    6a8e:	6f 93       	push	r22
    6a90:	6e 7f       	andi	r22, 0xFE	; 254
    6a92:	6e 5f       	subi	r22, 0xFE	; 254
    6a94:	7f 4f       	sbci	r23, 0xFF	; 255
    6a96:	8f 4f       	sbci	r24, 0xFF	; 255
    6a98:	9f 4f       	sbci	r25, 0xFF	; 255
    6a9a:	af 4f       	sbci	r26, 0xFF	; 255
    6a9c:	b1 e0       	ldi	r27, 0x01	; 1
    6a9e:	3e d0       	rcall	.+124    	; 0x6b1c <__ultoa_invert+0x9c>
    6aa0:	b4 e0       	ldi	r27, 0x04	; 4
    6aa2:	3c d0       	rcall	.+120    	; 0x6b1c <__ultoa_invert+0x9c>
    6aa4:	67 0f       	add	r22, r23
    6aa6:	78 1f       	adc	r23, r24
    6aa8:	89 1f       	adc	r24, r25
    6aaa:	9a 1f       	adc	r25, r26
    6aac:	a1 1d       	adc	r26, r1
    6aae:	68 0f       	add	r22, r24
    6ab0:	79 1f       	adc	r23, r25
    6ab2:	8a 1f       	adc	r24, r26
    6ab4:	91 1d       	adc	r25, r1
    6ab6:	a1 1d       	adc	r26, r1
    6ab8:	6a 0f       	add	r22, r26
    6aba:	71 1d       	adc	r23, r1
    6abc:	81 1d       	adc	r24, r1
    6abe:	91 1d       	adc	r25, r1
    6ac0:	a1 1d       	adc	r26, r1
    6ac2:	20 d0       	rcall	.+64     	; 0x6b04 <__ultoa_invert+0x84>
    6ac4:	09 f4       	brne	.+2      	; 0x6ac8 <__ultoa_invert+0x48>
    6ac6:	68 94       	set
    6ac8:	3f 91       	pop	r19
    6aca:	2a e0       	ldi	r18, 0x0A	; 10
    6acc:	26 9f       	mul	r18, r22
    6ace:	11 24       	eor	r1, r1
    6ad0:	30 19       	sub	r19, r0
    6ad2:	30 5d       	subi	r19, 0xD0	; 208
    6ad4:	31 93       	st	Z+, r19
    6ad6:	de f6       	brtc	.-74     	; 0x6a8e <__ultoa_invert+0xe>
    6ad8:	cf 01       	movw	r24, r30
    6ada:	08 95       	ret
    6adc:	46 2f       	mov	r20, r22
    6ade:	47 70       	andi	r20, 0x07	; 7
    6ae0:	40 5d       	subi	r20, 0xD0	; 208
    6ae2:	41 93       	st	Z+, r20
    6ae4:	b3 e0       	ldi	r27, 0x03	; 3
    6ae6:	0f d0       	rcall	.+30     	; 0x6b06 <__ultoa_invert+0x86>
    6ae8:	c9 f7       	brne	.-14     	; 0x6adc <__ultoa_invert+0x5c>
    6aea:	f6 cf       	rjmp	.-20     	; 0x6ad8 <__ultoa_invert+0x58>
    6aec:	46 2f       	mov	r20, r22
    6aee:	4f 70       	andi	r20, 0x0F	; 15
    6af0:	40 5d       	subi	r20, 0xD0	; 208
    6af2:	4a 33       	cpi	r20, 0x3A	; 58
    6af4:	18 f0       	brcs	.+6      	; 0x6afc <__ultoa_invert+0x7c>
    6af6:	49 5d       	subi	r20, 0xD9	; 217
    6af8:	31 fd       	sbrc	r19, 1
    6afa:	40 52       	subi	r20, 0x20	; 32
    6afc:	41 93       	st	Z+, r20
    6afe:	02 d0       	rcall	.+4      	; 0x6b04 <__ultoa_invert+0x84>
    6b00:	a9 f7       	brne	.-22     	; 0x6aec <__ultoa_invert+0x6c>
    6b02:	ea cf       	rjmp	.-44     	; 0x6ad8 <__ultoa_invert+0x58>
    6b04:	b4 e0       	ldi	r27, 0x04	; 4
    6b06:	a6 95       	lsr	r26
    6b08:	97 95       	ror	r25
    6b0a:	87 95       	ror	r24
    6b0c:	77 95       	ror	r23
    6b0e:	67 95       	ror	r22
    6b10:	ba 95       	dec	r27
    6b12:	c9 f7       	brne	.-14     	; 0x6b06 <__ultoa_invert+0x86>
    6b14:	00 97       	sbiw	r24, 0x00	; 0
    6b16:	61 05       	cpc	r22, r1
    6b18:	71 05       	cpc	r23, r1
    6b1a:	08 95       	ret
    6b1c:	9b 01       	movw	r18, r22
    6b1e:	ac 01       	movw	r20, r24
    6b20:	0a 2e       	mov	r0, r26
    6b22:	06 94       	lsr	r0
    6b24:	57 95       	ror	r21
    6b26:	47 95       	ror	r20
    6b28:	37 95       	ror	r19
    6b2a:	27 95       	ror	r18
    6b2c:	ba 95       	dec	r27
    6b2e:	c9 f7       	brne	.-14     	; 0x6b22 <__ultoa_invert+0xa2>
    6b30:	62 0f       	add	r22, r18
    6b32:	73 1f       	adc	r23, r19
    6b34:	84 1f       	adc	r24, r20
    6b36:	95 1f       	adc	r25, r21
    6b38:	a0 1d       	adc	r26, r0
    6b3a:	08 95       	ret

00006b3c <__ctype_isfalse>:
    6b3c:	99 27       	eor	r25, r25
    6b3e:	88 27       	eor	r24, r24

00006b40 <__ctype_istrue>:
    6b40:	08 95       	ret

00006b42 <eeprom_read_byte>:
    6b42:	f9 99       	sbic	0x1f, 1	; 31
    6b44:	fe cf       	rjmp	.-4      	; 0x6b42 <eeprom_read_byte>
    6b46:	92 bd       	out	0x22, r25	; 34
    6b48:	81 bd       	out	0x21, r24	; 33
    6b4a:	f8 9a       	sbi	0x1f, 0	; 31
    6b4c:	99 27       	eor	r25, r25
    6b4e:	80 b5       	in	r24, 0x20	; 32
    6b50:	08 95       	ret

00006b52 <eeprom_write_byte>:
    6b52:	26 2f       	mov	r18, r22

00006b54 <eeprom_write_r18>:
    6b54:	f9 99       	sbic	0x1f, 1	; 31
    6b56:	fe cf       	rjmp	.-4      	; 0x6b54 <eeprom_write_r18>
    6b58:	1f ba       	out	0x1f, r1	; 31
    6b5a:	92 bd       	out	0x22, r25	; 34
    6b5c:	81 bd       	out	0x21, r24	; 33
    6b5e:	20 bd       	out	0x20, r18	; 32
    6b60:	0f b6       	in	r0, 0x3f	; 63
    6b62:	f8 94       	cli
    6b64:	fa 9a       	sbi	0x1f, 2	; 31
    6b66:	f9 9a       	sbi	0x1f, 1	; 31
    6b68:	0f be       	out	0x3f, r0	; 63
    6b6a:	01 96       	adiw	r24, 0x01	; 1
    6b6c:	08 95       	ret

00006b6e <__prologue_saves__>:
    6b6e:	2f 92       	push	r2
    6b70:	3f 92       	push	r3
    6b72:	4f 92       	push	r4
    6b74:	5f 92       	push	r5
    6b76:	6f 92       	push	r6
    6b78:	7f 92       	push	r7
    6b7a:	8f 92       	push	r8
    6b7c:	9f 92       	push	r9
    6b7e:	af 92       	push	r10
    6b80:	bf 92       	push	r11
    6b82:	cf 92       	push	r12
    6b84:	df 92       	push	r13
    6b86:	ef 92       	push	r14
    6b88:	ff 92       	push	r15
    6b8a:	0f 93       	push	r16
    6b8c:	1f 93       	push	r17
    6b8e:	cf 93       	push	r28
    6b90:	df 93       	push	r29
    6b92:	cd b7       	in	r28, 0x3d	; 61
    6b94:	de b7       	in	r29, 0x3e	; 62
    6b96:	ca 1b       	sub	r28, r26
    6b98:	db 0b       	sbc	r29, r27
    6b9a:	0f b6       	in	r0, 0x3f	; 63
    6b9c:	f8 94       	cli
    6b9e:	de bf       	out	0x3e, r29	; 62
    6ba0:	0f be       	out	0x3f, r0	; 63
    6ba2:	cd bf       	out	0x3d, r28	; 61
    6ba4:	09 94       	ijmp

00006ba6 <__epilogue_restores__>:
    6ba6:	2a 88       	ldd	r2, Y+18	; 0x12
    6ba8:	39 88       	ldd	r3, Y+17	; 0x11
    6baa:	48 88       	ldd	r4, Y+16	; 0x10
    6bac:	5f 84       	ldd	r5, Y+15	; 0x0f
    6bae:	6e 84       	ldd	r6, Y+14	; 0x0e
    6bb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    6bb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    6bb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    6bb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    6bb8:	b9 84       	ldd	r11, Y+9	; 0x09
    6bba:	c8 84       	ldd	r12, Y+8	; 0x08
    6bbc:	df 80       	ldd	r13, Y+7	; 0x07
    6bbe:	ee 80       	ldd	r14, Y+6	; 0x06
    6bc0:	fd 80       	ldd	r15, Y+5	; 0x05
    6bc2:	0c 81       	ldd	r16, Y+4	; 0x04
    6bc4:	1b 81       	ldd	r17, Y+3	; 0x03
    6bc6:	aa 81       	ldd	r26, Y+2	; 0x02
    6bc8:	b9 81       	ldd	r27, Y+1	; 0x01
    6bca:	ce 0f       	add	r28, r30
    6bcc:	d1 1d       	adc	r29, r1
    6bce:	0f b6       	in	r0, 0x3f	; 63
    6bd0:	f8 94       	cli
    6bd2:	de bf       	out	0x3e, r29	; 62
    6bd4:	0f be       	out	0x3f, r0	; 63
    6bd6:	cd bf       	out	0x3d, r28	; 61
    6bd8:	ed 01       	movw	r28, r26
    6bda:	08 95       	ret

00006bdc <_exit>:
    6bdc:	f8 94       	cli

00006bde <__stop_program>:
    6bde:	ff cf       	rjmp	.-2      	; 0x6bde <__stop_program>
