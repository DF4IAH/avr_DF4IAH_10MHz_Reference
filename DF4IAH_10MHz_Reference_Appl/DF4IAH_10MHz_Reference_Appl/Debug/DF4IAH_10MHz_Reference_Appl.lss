
DF4IAH_10MHz_Reference_Appl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00007d28  00007dbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007d28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000710  00800116  00800116  00007dd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007dd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007e30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000510  00000000  00000000  00007e70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a36f  00000000  00000000  00008380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021f2  00000000  00000000  000126ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004da0  00000000  00000000  000148e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001098  00000000  00000000  00019684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ea1  00000000  00000000  0001a71c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a17  00000000  00000000  0001d5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  00023fd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__ctors_end>
       4:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__vector_1>
       8:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
       c:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      10:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      14:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      18:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__vector_6>
      1c:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      20:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      24:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      28:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_10>
      2c:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__vector_11>
      30:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      34:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      38:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      3c:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      40:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__vector_16>
      44:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      48:	0c 94 b2 26 	jmp	0x4d64	; 0x4d64 <__vector_18>
      4c:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__vector_19>
      50:	0c 94 81 27 	jmp	0x4f02	; 0x4f02 <__vector_20>
      54:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_21>
      58:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      5c:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      60:	0c 94 ef 28 	jmp	0x51de	; 0x51de <__vector_24>
      64:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__bad_interrupt>
      68:	dd 15       	cp	r29, r13
      6a:	eb 15       	cp	r30, r11
      6c:	f9 15       	cp	r31, r9
      6e:	07 16       	cp	r0, r23
      70:	15 16       	cp	r1, r21
      72:	23 16       	cp	r2, r19
      74:	31 16       	cp	r3, r17
      76:	3f 16       	cp	r3, r31
      78:	4d 16       	cp	r4, r29
      7a:	5b 16       	cp	r5, r27
      7c:	69 16       	cp	r6, r25
      7e:	77 16       	cp	r7, r23
      80:	85 16       	cp	r8, r21
      82:	19 29       	or	r17, r9
      84:	db 29       	or	r29, r11
      86:	db 29       	or	r29, r11
      88:	db 29       	or	r29, r11
      8a:	db 29       	or	r29, r11
      8c:	db 29       	or	r29, r11
      8e:	db 29       	or	r29, r11
      90:	db 29       	or	r29, r11
      92:	1f 29       	or	r17, r15
      94:	db 29       	or	r29, r11
      96:	db 29       	or	r29, r11
      98:	db 29       	or	r29, r11
      9a:	db 29       	or	r29, r11
      9c:	db 29       	or	r29, r11
      9e:	db 29       	or	r29, r11
      a0:	db 29       	or	r29, r11
      a2:	33 29       	or	r19, r3
      a4:	db 29       	or	r29, r11
      a6:	db 29       	or	r29, r11
      a8:	db 29       	or	r29, r11
      aa:	db 29       	or	r29, r11
      ac:	db 29       	or	r29, r11
      ae:	db 29       	or	r29, r11
      b0:	db 29       	or	r29, r11
      b2:	59 29       	or	r21, r9
      b4:	db 29       	or	r29, r11
      b6:	db 29       	or	r29, r11
      b8:	db 29       	or	r29, r11
      ba:	db 29       	or	r29, r11
      bc:	db 29       	or	r29, r11
      be:	db 29       	or	r29, r11
      c0:	db 29       	or	r29, r11
      c2:	79 29       	or	r23, r9
      c4:	db 29       	or	r29, r11
      c6:	db 29       	or	r29, r11
      c8:	db 29       	or	r29, r11
      ca:	db 29       	or	r29, r11
      cc:	db 29       	or	r29, r11
      ce:	db 29       	or	r29, r11
      d0:	db 29       	or	r29, r11
      d2:	a4 29       	or	r26, r4
      d4:	db 29       	or	r29, r11
      d6:	db 29       	or	r29, r11
      d8:	db 29       	or	r29, r11
      da:	db 29       	or	r29, r11
      dc:	db 29       	or	r29, r11
      de:	db 29       	or	r29, r11
      e0:	db 29       	or	r29, r11
      e2:	db 29       	or	r29, r11
      e4:	db 29       	or	r29, r11
      e6:	db 29       	or	r29, r11
      e8:	db 29       	or	r29, r11
      ea:	db 29       	or	r29, r11
      ec:	db 29       	or	r29, r11
      ee:	db 29       	or	r29, r11
      f0:	db 29       	or	r29, r11
      f2:	33 29       	or	r19, r3
      f4:	db 29       	or	r29, r11
      f6:	db 29       	or	r29, r11
      f8:	db 29       	or	r29, r11
      fa:	db 29       	or	r29, r11
      fc:	db 29       	or	r29, r11
      fe:	db 29       	or	r29, r11
     100:	db 29       	or	r29, r11
     102:	59 29       	or	r21, r9
     104:	db 29       	or	r29, r11
     106:	db 29       	or	r29, r11
     108:	db 29       	or	r29, r11
     10a:	db 29       	or	r29, r11
     10c:	db 29       	or	r29, r11
     10e:	db 29       	or	r29, r11
     110:	db 29       	or	r29, r11
     112:	a9 29       	or	r26, r9
     114:	db 29       	or	r29, r11
     116:	db 29       	or	r29, r11
     118:	db 29       	or	r29, r11
     11a:	db 29       	or	r29, r11
     11c:	db 29       	or	r29, r11
     11e:	db 29       	or	r29, r11
     120:	db 29       	or	r29, r11
     122:	a9 29       	or	r26, r9
     124:	07 63       	ori	r16, 0x37	; 55
     126:	42 36       	cpi	r20, 0x62	; 98
     128:	b7 9b       	sbis	0x16, 7	; 22
     12a:	d8 a7       	std	Y+40, r29	; 0x28
     12c:	1a 39       	cpi	r17, 0x9A	; 154
     12e:	68 56       	subi	r22, 0x68	; 104
     130:	18 ae       	std	Y+56, r1	; 0x38
     132:	ba ab       	std	Y+50, r27	; 0x32
     134:	55 8c       	ldd	r5, Z+29	; 0x1d
     136:	1d 3c       	cpi	r17, 0xCD	; 205
     138:	b7 cc       	rjmp	.-1682   	; 0xfffffaa8 <__eeprom_end+0xff7efaa8>
     13a:	57 63       	ori	r21, 0x37	; 55
     13c:	bd 6d       	ori	r27, 0xDD	; 221
     13e:	ed fd       	.word	0xfded	; ????
     140:	75 3e       	cpi	r23, 0xE5	; 229
     142:	f6 17       	cp	r31, r22
     144:	72 31       	cpi	r23, 0x12	; 18
     146:	bf 00       	.word	0x00bf	; ????
     148:	00 00       	nop
     14a:	80 3f       	cpi	r24, 0xF0	; 240
     14c:	08 00       	.word	0x0008	; ????
     14e:	00 00       	nop
     150:	be 92       	st	-X, r11
     152:	24 49       	sbci	r18, 0x94	; 148
     154:	12 3e       	cpi	r17, 0xE2	; 226
     156:	ab aa       	std	Y+51, r10	; 0x33
     158:	aa 2a       	or	r10, r26
     15a:	be cd       	rjmp	.-1156   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     15c:	cc cc       	rjmp	.-1640   	; 0xfffffaf6 <__eeprom_end+0xff7efaf6>
     15e:	4c 3e       	cpi	r20, 0xEC	; 236
     160:	00 00       	nop
     162:	00 80       	ld	r0, Z
     164:	be ab       	std	Y+54, r27	; 0x36
     166:	aa aa       	std	Y+50, r10	; 0x32
     168:	aa 3e       	cpi	r26, 0xEA	; 234
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	bf 00       	.word	0x00bf	; ????
     170:	00 00       	nop
     172:	80 3f       	cpi	r24, 0xF0	; 240
     174:	00 00       	nop
     176:	00 00       	nop
     178:	00 08       	sbc	r0, r0
     17a:	41 78       	andi	r20, 0x81	; 129
     17c:	d3 bb       	out	0x13, r29	; 19
     17e:	43 87       	std	Z+11, r20	; 0x0b
     180:	d1 13       	cpse	r29, r17
     182:	3d 19       	sub	r19, r13
     184:	0e 3c       	cpi	r16, 0xCE	; 206
     186:	c3 bd       	out	0x23, r28	; 35
     188:	42 82       	std	Z+2, r4	; 0x02
     18a:	ad 2b       	or	r26, r29
     18c:	3e 68       	ori	r19, 0x8E	; 142
     18e:	ec 82       	std	Y+4, r14	; 0x04
     190:	76 be       	out	0x36, r7	; 54
     192:	d9 8f       	std	Y+25, r29	; 0x19
     194:	e1 a9       	ldd	r30, Z+49	; 0x31
     196:	3e 4c       	sbci	r19, 0xCE	; 206
     198:	80 ef       	ldi	r24, 0xF0	; 240
     19a:	ff be       	out	0x3f, r15	; 63
     19c:	01 c4       	rjmp	.+2050   	; 0x9a0 <PM_FORMAT_GPS_STBY+0xc>
     19e:	ff 7f       	andi	r31, 0xFF	; 255
     1a0:	3f 00       	.word	0x003f	; ????
     1a2:	00 00       	nop
	...

000001a6 <__trampolines_end>:
     1a6:	6e 61       	ori	r22, 0x1E	; 30
     1a8:	6e 00       	.word	0x006e	; ????

000001aa <__c.2240>:
     1aa:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ba:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1ca:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1da:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1ea:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1fa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     20a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     21a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     22a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     23a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     24a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     25a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     26a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     27a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     28a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     29a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002a8 <PM_PARSE_NMEA_MSG41>:
     2a8:	24 47 4c 47 53 56 2c 25 2a 64 2c 31 2c 25 64 2c     $GLGSV,%*d,1,%d,
	...

000002b9 <PM_PARSE_NMEA_MSG31>:
     2b9:	24 47 50 47 53 56 2c 25 2a 64 2c 31 2c 25 64 2c     $GPGSV,%*d,1,%d,
	...

000002ca <PM_PARSE_NMEA_MSG21>:
     2ca:	24 47 50 52 4d 43 2c 25 6c 64 2e 25 64 2c 25 2a     $GPRMC,%ld.%d,%*
     2da:	63 2c 25 66 2c 25 63 2c 25 66 2c 25 63 2c 25 2a     c,%f,%c,%f,%c,%*
     2ea:	66 2c 25 2a 66 2c 25 6c 64 2c 2c 2c 25 2a 63 2a     f,%*f,%ld,,,%*c*
     2fa:	25 64 00                                            %d.

000002fd <PM_PARSE_NMEA_MSG12>:
     2fd:	25 66 2c 25 66 2c 25 66 2a 25 64 00                 %f,%f,%f*%d.

00000309 <PM_PARSE_NMEA_MSG11>:
     309:	24 47 50 47 53 41 2c 25 2a 63 2c 25 64 2c 00        $GPGSA,%*c,%d,.

00000318 <PM_PARSE_NMEA_MSG01>:
     318:	24 47 50 47 47 41 2c 25 6c 64 2e 25 64 2c 25 66     $GPGGA,%ld.%d,%f
     328:	2c 25 63 2c 25 66 2c 25 63 2c 25 64 2c 25 64 2c     ,%c,%f,%c,%d,%d,
     338:	25 66 2c 25 66 2c 25 2a 63 2c 25 2a 66 2c 25 2a     %f,%f,%*c,%*f,%*
     348:	63 2c 25 2a 64 2c 25 2a 64 2a 25 64 00              c,%*d,%*d*%d.

00000355 <PM_FORMAT_SET_BAUD>:
     355:	43 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e 20 62 61     Communication ba
     365:	75 64 20 72 61 74 65 20 73 65 74 20 74 6f 20 25     ud rate set to %
     375:	35 75 20 62 61 75 64 2e 0a 00                       5u baud...

0000037f <PM_FORMAT_GPIB_SCM_IDN>:
     37f:	44 46 34 49 41 48 2c 25 73 2c 25 30 35 75 2c 56     DF4IAH,%s,%05u,V
     38f:	32 30 25 30 33 75 25 30 33 75 2e 00                 20%03u%03u..

0000039b <PM_FORMAT_SC02>:
     39b:	23 53 43 30 32 3a 20 73 3d 30 78 25 30 32 78 2c     #SC02: s=0x%02x,
     3ab:	64 53 3d 25 75 2c 69 50 3d 25 75 2c 65 53 3d 25     dS=%u,iP=%u,eS=%
     3bb:	75 2c 61 41 3d 25 75 2c 61 41 56 3d 25 75 2c 64     u,aA=%u,aAV=%u,d
     3cb:	41 3d 25 75 2c 64 41 56 3d 25 75 0a 00              A=%u,dAV=%u..

000003d8 <PM_FORMAT_SC01>:
     3d8:	23 53 43 30 31 3a 20 53 74 61 63 6b 2d 43 68 65     #SC01: Stack-Che
     3e8:	63 6b 3a 20 6d 75 6e 67 2d 77 61 6c 6c 20 61 64     ck: mung-wall ad
     3f8:	64 72 65 73 73 3a 20 30 78 25 30 34 78 2c 20 6c     dress: 0x%04x, l
     408:	6f 77 65 73 74 2d 73 74 61 63 6b 3a 20 30 78 25     owest-stack: 0x%
     418:	30 34 78 0a 00                                      04x..

0000041d <PM_FORMAT_LC23>:
     41d:	25 63 25 30 37 2e 33 66 20 25 63 25 35 2e 33 66     %c%07.3f %c%5.3f
     42d:	56 20 00                                            V .

00000430 <PM_FORMAT_LC22>:
     430:	25 63 25 31 75 20 25 63 25 31 75 20 25 33 2e 31     %c%1u %c%1u %3.1
     440:	66 20 25 63 25 30 32 75 25 63 25 30 32 75 20 00     f %c%02u%c%02u .

00000450 <PM_FORMAT_LC21>:
     450:	25 30 32 75 2e 25 30 32 75 2e 20 55 25 30 32 75     %02u.%02u. U%02u
     460:	3a 25 30 32 75 3a 25 30 32 75 20 00                 :%02u:%02u .

0000046c <PM_FORMAT_LC12>:
     46c:	62 20 2d 2d 2d 2e 2d 2d 2d 20 25 63 25 31 58 20     b ---.--- %c%1X 
     47c:	25 63 25 30 32 75 20 00                             %c%02u .

00000484 <PM_FORMAT_LC11>:
     484:	25 63 25 20 30 38 2e 33 66 20 25 63 25 31 58 20     %c% 08.3f %c%1X 
     494:	25 63 25 30 32 75 20 00                             %c%02u .

0000049c <PM_FORMAT_LC02>:
     49c:	31 30 4d 48 7a 52 65 66 4f 73 63 20 56 32 78 31     10MHzRefOsc V2x1
	...

000004ad <PM_FORMAT_LC01>:
     4ad:	2b 3d 3d 3d 20 44 46 34 49 41 48 20 3d 3d 3d 2b     +=== DF4IAH ===+
	...

000004be <PM_FORMAT_IA12>:
     4be:	23 49 41 31 32 3a 20 50 48 41 53 45 20 66 61 73     #IA12: PHASE fas
     4ce:	74 50 77 6d 53 69 6e 67 6c 65 44 69 66 66 5f 73     tPwmSingleDiff_s
     4de:	74 65 70 73 20 3d 20 25 2b 30 33 2e 33 66 0a 00     teps = %+03.3f..

000004ee <PM_FORMAT_IA11>:
     4ee:	23 49 41 31 31 3a 20 50 48 41 53 45 20 70 68 61     #IA11: PHASE pha
     4fe:	73 65 45 72 72 20 20 3d 20 25 30 33 2e 33 66 c2     seErr  = %03.3f.
     50e:	b0 2c 20 09 20 70 68 61 73 65 53 74 65 70 73 46     ., . phaseStepsF
     51e:	72 65 71 75 65 6e 63 79 20 3d 20 25 2b 30 33 2e     requency = %+03.
     52e:	33 66 2c 20 09 70 68 61 73 65 53 74 65 70 73 50     3f, .phaseStepsP
     53e:	68 61 73 65 20 3d 20 25 2b 30 33 2e 33 66 0a 00     hase = %+03.3f..

0000054e <PM_FORMAT_IA03>:
     54e:	23 49 41 30 33 3a 20 51 52 47 20 20 20 6e 65 77     #IA03: QRG   new
     55e:	50 77 6d 56 61 6c 20 3d 20 25 30 33 2e 33 66 2c     PwmVal = %03.3f,
     56e:	20 09 70 77 6d 43 6f 72 53 74 65 70 73 20 20 20      .pwmCorSteps   
     57e:	20 20 20 20 20 20 3d 20 25 2b 30 33 2e 33 66 0a           = %+03.3f.
	...

0000058f <PM_FORMAT_IA02>:
     58f:	23 49 41 30 32 3a 20 43 6c 6f 63 6b 20 6c 6f 63     #IA02: Clock loc
     59f:	61 6c 4d 65 61 6e 46 6c 6f 61 74 43 6c 6f 63 6b     alMeanFloatClock
     5af:	44 69 66 66 20 3d 20 25 2b 30 33 2e 33 66 48 7a     Diff = %+03.3fHz
     5bf:	20 40 32 30 4d 48 7a 2c 20 09 71 72 67 44 65 76      @20MHz, .qrgDev
     5cf:	5f 48 7a 20 3d 20 25 2b 30 33 2e 33 66 48 7a 20     _Hz = %+03.3fHz 
     5df:	40 31 30 4d 48 7a 2c 20 09 70 70 6d 20 3d 20 25     @10MHz, .ppm = %
     5ef:	2b 30 32 2e 36 66 0a 00                             +02.6f..

000005f7 <PM_FORMAT_IA01>:
     5f7:	23 49 41 30 31 3a 20 43 6c 6f 63 6b 20 69 6e 74     #IA01: Clock int
     607:	32 30 4d 48 7a 43 6c 6f 63 6b 44 69 66 66 20 20     20MHzClockDiff  
     617:	20 20 20 20 20 3d 20 20 20 25 2b 30 34 6c 69 48          =   %+04liH
     627:	7a 20 40 32 30 4d 48 7a 0a 00                       z @20MHz..

00000631 <PM_FORMAT_ID02>:
     631:	23 49 44 30 32 3a 20 2b 2f 2d 20 4b 45 59 20 09     #ID02: +/- KEY .
     641:	6d 61 69 6e 50 77 6d 54 65 72 6d 69 6e 61 6c 41     mainPwmTerminalA
     651:	64 6a 20 3d 20 25 66 2c 20 09 6c 6f 63 61 6c 46     dj = %f, .localF
     661:	61 73 74 50 77 6d 56 61 6c 4e 65 78 74 20 3d 20     astPwmValNext = 
     671:	25 30 33 75 20 2b 20 6c 6f 63 61 6c 46 61 73 74     %03u + localFast
     681:	50 77 6d 53 75 62 43 6d 70 4e 65 78 74 20 3d 20     PwmSubCmpNext = 
     691:	25 30 33 75 0a 00                                   %03u..

00000697 <PM_FORMAT_ID01>:
     697:	23 49 44 30 31 3a 20 2b 2f 2d 20 4b 45 59 20 09     #ID01: +/- KEY .
     6a7:	6d 61 69 6e 50 77 6d 54 65 72 6d 69 6e 61 6c 41     mainPwmTerminalA
     6b7:	64 6a 20 3d 20 25 66 2c 20 09 70 75 6c 6c 50 77     dj = %f, .pullPw
     6c7:	6d 56 61 6c 42 65 66 6f 72 65 20 20 20 20 3d 20     mValBefore    = 
     6d7:	25 30 33 75 20 2b 20 66 61 73 74 50 77 6d 53 75     %03u + fastPwmSu
     6e7:	62 43 6d 70 42 65 66 6f 72 65 20 20 20 20 3d 20     bCmpBefore    = 
     6f7:	25 30 33 75 0a 00                                   %03u..

000006fd <PM_FORMAT_TA14>:
     6fd:	23 54 41 31 34 3a 20 6d 61 69 6e 52 65 66 43 6c     #TA14: mainRefCl
     70d:	6b 53 74 61 74 65 20 3d 20 30 78 25 31 58 0a 00     kState = 0x%1X..

0000071d <PM_FORMAT_TA13>:
     71d:	23 54 41 31 33 3a 20 50 57 4d 20 3d 20 25 30 33     #TA13: PWM = %03
     72d:	75 2c 20 09 53 75 62 2d 50 57 4d 20 3d 20 25 30     u, .Sub-PWM = %0
     73d:	33 75 0a 00                                         3u..

00000741 <PM_FORMAT_TA12>:
     741:	23 54 41 31 32 3a 20 70 70 73 53 74 61 6d 70 43     #TA12: ppsStampC
     751:	74 72 31 6d 73 20 20 3d 20 25 30 39 6c 75 2c 20     tr1ms  = %09lu, 
     761:	09 70 70 73 53 74 61 6d 70 49 43 52 31 20 20 20     .ppsStampICR1   
     771:	3d 20 25 30 35 75 2c 20 09 70 70 73 53 74 61 6d     = %05u, .ppsStam
     781:	70 43 74 72 31 6d 73 5f 6c 61 73 74 20 20 3d 20     pCtr1ms_last  = 
     791:	25 30 39 6c 75 2c 20 09 70 70 73 53 74 61 6d 70     %09lu, .ppsStamp
     7a1:	49 43 52 31 5f 6c 61 73 74 20 20 20 3d 20 25 30     ICR1_last   = %0
     7b1:	35 75 0a 00                                         5u..

000007b5 <PM_FORMAT_TA11>:
     7b5:	23 54 41 31 31 3a 20 6c 6f 63 61 6c 46 61 73 74     #TA11: localFast
     7c5:	43 74 72 31 6d 73 20 3d 20 25 30 39 6c 75 2c 20     Ctr1ms = %09lu, 
     7d5:	09 6c 6f 63 61 6c 46 61 73 74 54 43 4e 54 31 20     .localFastTCNT1 
     7e5:	3d 20 25 30 35 75 0a 00                             = %05u..

000007ed <PM_FORMAT_TA03>:
     7ed:	23 54 41 30 33 3a 20 54 65 6d 70 20 3d 20 25 30     #TA03: Temp = %0
     7fd:	34 75 20 28 25 30 2e 31 66 43 29 0a 00              4u (%0.1fC)..

0000080a <PM_FORMAT_TA02>:
     80a:	23 54 41 30 32 3a 20 41 44 43 31 20 3d 20 25 30     #TA02: ADC1 = %0
     81a:	34 75 20 28 25 30 2e 33 66 56 29 0a 00              4u (%0.3fV)..

00000827 <PM_FORMAT_TA01>:
     827:	23 54 41 30 31 3a 20 41 44 43 30 20 3d 20 25 30     #TA01: ADC0 = %0
     837:	34 75 20 28 25 30 2e 33 66 56 29 0a 00              4u (%0.3fV)..

00000844 <PM_FORMAT_GP05>:
     844:	23 47 50 30 35 3a 20 4c 61 74 20 3d 20 25 63 20     #GP05: Lat = %c 
     854:	25 30 39 2e 34 66 2c 20 4c 6f 6e 20 3d 20 25 63     %09.4f, Lon = %c
     864:	20 25 30 31 30 2e 34 66 2c 20 48 65 69 67 68 74      %010.4f, Height
     874:	20 3d 20 25 2e 31 66 20 6d 0a 00                     = %.1f m..

0000087f <PM_FORMAT_GP04>:
     87f:	23 47 50 30 34 3a 20 50 44 4f 50 20 3d 20 25 2e     #GP04: PDOP = %.
     88f:	32 66 2c 20 48 44 4f 50 20 3d 20 25 2e 32 66 2c     2f, HDOP = %.2f,
     89f:	20 56 44 4f 50 20 3d 20 25 2e 32 66 2c 0a 00         VDOP = %.2f,..

000008ae <PM_FORMAT_GP03>:
     8ae:	23 47 50 30 33 3a 20 53 61 74 73 55 73 65 64 20     #GP03: SatsUsed 
     8be:	3d 20 25 30 32 64 2c 20 53 61 74 73 45 70 68 69     = %02d, SatsEphi
     8ce:	6d 5f 47 70 73 47 61 6c 69 6c 65 6f 51 7a 73 73     m_GpsGalileoQzss
     8de:	20 3d 20 25 30 32 64 2c 20 53 61 74 73 45 70 68      = %02d, SatsEph
     8ee:	69 6d 5f 47 6c 6f 6e 61 73 73 20 3d 20 25 30 32     im_Glonass = %02
     8fe:	64 0a 00                                            d..

00000901 <PM_FORMAT_GP02>:
     901:	23 47 50 30 32 3a 20 4d 6f 64 65 32 20 3d 20 25     #GP02: Mode2 = %
     911:	31 64 2c 20 50 6f 73 46 69 78 49 6e 64 20 3d 20     1d, PosFixInd = 
     921:	25 31 64 0a 00                                      %1d..

00000926 <PM_FORMAT_GP01>:
     926:	23 47 50 30 31 3a 20 44 61 74 65 20 3d 20 25 30     #GP01: Date = %0
     936:	38 6c 64 2c 20 54 69 6d 65 20 3d 20 25 30 36 6c     8ld, Time = %06l
     946:	64 2e 25 30 33 64 0a 00                             d.%03d..

0000094e <PM_FORMAT_GP00>:
     94e:	0a 23 47 50 30 30 3a 20 3d 3d 3d 3d 3d 3d 3d 00     .#GP00: =======.

0000095e <PM_FORMAT_GPS_WEST1_EAST1>:
     95e:	24 50 4d 54 4b 33 35 33 2c 31 2c 31 2a 33 37 0d     $PMTK353,1,1*37.
     96e:	0a 00                                               ..

00000970 <PM_FORMAT_GPS_WEST1_EAST0>:
     970:	24 50 4d 54 4b 33 35 33 2c 31 2c 30 2a 33 36 0d     $PMTK353,1,0*36.
     980:	0a 00                                               ..

00000982 <PM_FORMAT_GPS_WEST0_EAST0>:
     982:	24 50 4d 54 4b 33 35 33 2c 30 2c 30 2a 33 37 0d     $PMTK353,0,0*37.
     992:	0a 00                                               ..

00000994 <PM_FORMAT_GPS_STBY>:
     994:	24 50 4d 54 4b 31 36 31 2c 30 2a 32 38 0d 0a 00     $PMTK161,0*28...

000009a4 <PM_FORMAT_GPS_WARM_RESTART>:
     9a4:	24 50 4d 54 4b 31 30 32 2a 33 31 0d 0a 00           $PMTK102*31...

000009b2 <PM_FORMAT_VERSION>:
     9b2:	0a 3d 3d 3d 20 44 46 34 49 41 48 20 2d 20 31 30     .=== DF4IAH - 10
     9c2:	20 4d 48 7a 20 52 65 66 65 72 65 6e 63 65 20 4f      MHz Reference O
     9d2:	73 63 69 6c 6c 61 74 6f 72 20 3d 3d 3d 0a 3d 3d     scillator ===.==
     9e2:	3d 20 56 65 72 3a 20 32 30 25 30 33 64 25 30 33     = Ver: 20%03d%03
     9f2:	64 00                                               d.

000009f4 <PM_INTERPRETER_UNKNOWN>:
     9f4:	0a 2a 3f 2a 20 20 75 6e 6b 6e 6f 77 6e 20 63 6f     .*?*  unknown co
     a04:	6d 6d 61 6e 64 20 27 25 73 27 20 72 65 63 65 69     mmand '%s' recei
     a14:	76 65 64 2c 20 74 72 79 20 48 45 4c 50 2e 0a 3e     ved, try HELP..>
	...

00000a25 <PM_INTERPRETER_HELP14>:
     a25:	0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 3e 00        .===========.>.

00000a34 <PM_INTERPRETER_HELP13>:
     a34:	0a 2b 2f 2d 20 3c 50 57 4d 20 76 61 6c 75 65 3e     .+/- <PWM value>
     a44:	09 09 63 6f 72 72 65 63 74 69 6f 6e 20 76 61 6c     ..correction val
     a54:	75 65 20 74 6f 20 62 65 20 61 64 64 65 64 2e 00     ue to be added..

00000a64 <PM_INTERPRETER_HELP12>:
     a64:	0a 57 52 49 54 45 50 57 4d 09 09 09 73 74 6f 72     .WRITEPWM...stor
     a74:	65 20 63 75 72 72 65 6e 74 20 50 57 4d 20 61 73     e current PWM as
     a84:	20 64 65 66 61 75 6c 74 20 76 61 6c 75 65 2e 0a      default value..
     a94:	57 52 49 54 45 54 45 4d 50 20 3c 54 45 4d 50 20     WRITETEMP <TEMP 
     aa4:	76 61 6c 75 65 3e 09 09 77 72 69 74 65 20 63 75     value>..write cu
     ab4:	72 72 65 6e 74 20 74 65 6d 70 65 72 61 74 75 72     rrent temperatur
     ac4:	65 20 61 73 20 64 65 66 61 75 6c 74 20 76 61 6c     e as default val
     ad4:	75 65 2e 00                                         ue..

00000ad8 <PM_INTERPRETER_HELP11>:
     ad8:	0a 54 45 53 54 09 09 09 09 74 6f 67 67 6c 65 73     .TEST....toggles
     ae8:	20 63 6f 75 6e 74 65 72 20 74 65 73 74 2e 00         counter test..

00000af7 <PM_INTERPRETER_HELP10>:
     af7:	0a 53 54 41 43 4b 09 09 09 09 74 6f 67 67 6c 65     .STACK....toggle
     b07:	73 20 73 74 61 63 6b 20 6d 75 6e 67 2d 77 61 6c     s stack mung-wal
     b17:	6c 20 74 65 73 74 2e 00                             l test..

00000b1f <PM_INTERPRETER_HELP09>:
     b1f:	0a 53 45 52 4f 46 46 09 09 09 09 73 77 69 74 63     .SEROFF....switc
     b2f:	68 20 73 65 72 69 61 6c 20 63 6f 6d 6d 75 6e 69     h serial communi
     b3f:	63 61 74 69 6f 6e 20 4f 46 46 2e 0a 53 45 52 4f     cation OFF..SERO
     b4f:	4e 09 09 09 09 73 77 69 74 63 68 20 73 65 72 69     N....switch seri
     b5f:	61 6c 20 63 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e     al communication
     b6f:	20 4f 4e 2e 00                                       ON..

00000b74 <PM_INTERPRETER_HELP08>:
     b74:	0a 53 45 52 42 41 55 44 20 3c 62 61 75 64 3e 09     .SERBAUD <baud>.
     b84:	09 09 73 65 74 74 69 6e 67 20 73 65 72 69 61 6c     ..setting serial
     b94:	20 62 61 75 64 20 72 61 74 65 2e 00                  baud rate..

00000ba0 <PM_INTERPRETER_HELP07>:
     ba0:	0a 4c 45 44 4f 46 46 09 09 09 09 73 77 69 74 63     .LEDOFF....switc
     bb0:	68 20 62 61 63 6b 6c 69 67 68 74 20 4f 46 46 2e     h backlight OFF.
     bc0:	0a 4c 45 44 4f 4e 09 09 09 09 73 77 69 74 63 68     .LEDON....switch
     bd0:	20 62 61 63 6b 6c 69 67 68 74 20 4f 4e 2e 00         backlight ON..

00000bdf <PM_INTERPRETER_HELP06>:
     bdf:	0a 49 4e 46 4f 09 09 09 09 74 6f 67 67 6c 65 73     .INFO....toggles
     bef:	20 61 64 64 69 74 69 6f 6e 61 6c 20 70 72 69 6e      additional prin
     bff:	74 65 64 20 69 6e 66 6f 73 2e 00                    ted infos..

00000c0a <PM_INTERPRETER_HELP05>:
     c0a:	0a 48 45 4c 50 09 09 09 09 74 68 69 73 20 6d 65     .HELP....this me
     c1a:	73 73 61 67 65 2e 00                                ssage..

00000c21 <PM_INTERPRETER_HELP04>:
     c21:	0a 48 41 4c 54 09 09 09 09 70 6f 77 65 72 73 20     .HALT....powers 
     c31:	74 68 65 20 64 65 76 69 63 65 20 64 6f 77 6e 20     the device down 
     c41:	28 73 6c 65 65 70 20 6d 6f 64 65 29 2e 00           (sleep mode)..

00000c4f <PM_INTERPRETER_HELP03>:
     c4f:	0a 41 50 43 4f 46 46 09 09 09 09 73 77 69 74 63     .APCOFF....switc
     c5f:	68 20 41 50 43 20 28 61 75 74 6f 6d 61 74 69 63     h APC (automatic
     c6f:	20 70 68 61 73 65 20 63 6f 6e 74 72 6f 6c 29 20      phase control) 
     c7f:	6f 66 66 2e 0a 41 50 43 4f 4e 09 09 09 09 73 77     off..APCON....sw
     c8f:	69 74 63 68 20 41 50 43 20 28 61 75 74 6f 6d 61     itch APC (automa
     c9f:	74 69 63 20 70 68 61 73 65 20 63 6f 6e 74 72 6f     tic phase contro
     caf:	6c 29 20 6f 6e 2e 00                                l) on..

00000cb6 <PM_INTERPRETER_HELP02>:
     cb6:	0a 41 46 43 4f 46 46 09 09 09 09 73 77 69 74 63     .AFCOFF....switc
     cc6:	68 20 41 46 43 20 28 61 75 74 6f 6d 61 74 69 63     h AFC (automatic
     cd6:	20 66 72 65 71 75 65 6e 63 79 20 63 6f 6e 74 72      frequency contr
     ce6:	6f 6c 29 20 6f 66 66 2e 0a 41 46 43 4f 4e 09 09     ol) off..AFCON..
     cf6:	09 09 73 77 69 74 63 68 20 41 46 43 20 28 61 75     ..switch AFC (au
     d06:	74 6f 6d 61 74 69 63 20 66 72 65 71 75 65 6e 63     tomatic frequenc
     d16:	79 20 63 6f 6e 74 72 6f 6c 29 20 6f 6e 2e 00        y control) on..

00000d25 <PM_INTERPRETER_HELP01>:
     d25:	0a 3d 3d 3d 20 48 45 4c 50 20 3d 3d 3d 0a 0a 24     .=== HELP ===..$
     d35:	20 3c 4e 4d 45 41 2d 4d 65 73 73 61 67 65 3e 09      <NMEA-Message>.
     d45:	09 73 65 6e 64 73 20 6d 65 73 73 61 67 65 20 74     .sends message t
     d55:	6f 20 74 68 65 20 47 50 53 20 6d 6f 64 75 6c 65     o the GPS module
     d65:	2e 00                                               ..

00000d67 <PM_GPIB_SCM_IDN>:
     d67:	2a 49 44 4e 3f 00                                   *IDN?.

00000d6d <PM_COMMAND_WRITETEMP>:
     d6d:	57 52 49 54 45 54 45 4d 50 00                       WRITETEMP.

00000d77 <PM_COMMAND_WRITEPWM>:
     d77:	57 52 49 54 45 50 57 4d 00                          WRITEPWM.

00000d80 <PM_COMMAND_TEST>:
     d80:	54 45 53 54 00                                      TEST.

00000d85 <PM_COMMAND_STACK>:
     d85:	53 54 41 43 4b 00                                   STACK.

00000d8b <PM_COMMAND_SERON>:
     d8b:	53 45 52 4f 4e 00                                   SERON.

00000d91 <PM_COMMAND_SEROFF>:
     d91:	53 45 52 4f 46 46 00                                SEROFF.

00000d98 <PM_COMMAND_SERBAUD>:
     d98:	53 45 52 42 41 55 44 00                             SERBAUD.

00000da0 <PM_COMMAND_LEDON>:
     da0:	4c 45 44 4f 4e 00                                   LEDON.

00000da6 <PM_COMMAND_LEDOFF>:
     da6:	4c 45 44 4f 46 46 00                                LEDOFF.

00000dad <PM_COMMAND_INFO>:
     dad:	49 4e 46 4f 00                                      INFO.

00000db2 <PM_COMMAND_HELP>:
     db2:	48 45 4c 50 00                                      HELP.

00000db7 <PM_COMMAND_HALT>:
     db7:	48 41 4c 54 00                                      HALT.

00000dbc <PM_COMMAND_APCON>:
     dbc:	41 50 43 4f 4e 00                                   APCON.

00000dc2 <PM_COMMAND_APCOFF>:
     dc2:	41 50 43 4f 46 46 00                                APCOFF.

00000dc9 <PM_COMMAND_AFCON>:
     dc9:	41 46 43 4f 4e 00                                   AFCON.

00000dcf <PM_COMMAND_AFCOFF>:
     dcf:	41 46 43 4f 46 46 00                                AFCOFF.

00000dd6 <eeprom_defaultValues_content>:
     dd6:	44 46 34 49 41 48 20 31 30 4d 68 7a 2d 52 65 66     DF4IAH 10Mhz-Ref
     de6:	46 ab 00 00 01 ff ff ff ff ff ff ff 00 00 0c b0     F...............
     df6:	a5 2c 8f 40 48 e1 8a 3f 00 80 af 43 00 a0 87 3f     .,.@H..?...C...?
     e06:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 1c b0     ................
     e16:	cd cc 94 c0 5c 8f c2 3f b8 1e 05 3d ff ff ff ff     ....\..?...=....
     e26:	ff ff 71 3d 8a 3f 33 33 13 40 78 00 00 00 2c b0     ..q=.?33.@x...,.
     e36:	80 25 08 01 00 00 00 00 ff ff ff ff ff ff ff ff     .%..............
     e46:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 3c b0     ..............<.
     e56:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e66:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 4c b0     ..............L.

00000e76 <usbDescriptorConfiguration>:
     e76:	09 02 19 00 01 01 00 80 69 09 04 00 00 01 ff 00     ........i.......
     e86:	00 00 07 05 81 03 08 00 0a                          .........

00000e8f <usbDescriptorDevice>:
     e8f:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
     e9f:	03 01                                               ..

00000ea1 <usbDescriptorStringSerialNumber>:
     ea1:	10 03 50 00 72 00 6f 00 74 00 6f 00 2d 00 31 00     ..P.r.o.t.o.-.1.

00000eb1 <usbDescriptorStringDevice>:
     eb1:	2a 03 44 00 46 00 34 00 49 00 41 00 48 00 2d 00     *.D.F.4.I.A.H.-.
     ec1:	31 00 30 00 4d 00 48 00 7a 00 2d 00 52 00 65 00     1.0.M.H.z.-.R.e.
     ed1:	66 00 2d 00 4f 00 73 00 63 00                       f.-.O.s.c.

00000edb <usbDescriptorStringVendor>:
     edb:	0e 03 44 00 46 00 34 00 49 00 41 00 48 00           ..D.F.4.I.A.H.

00000ee9 <usbDescriptorString0>:
     ee9:	04 03 09 04                                         ....

00000eed <__c.2437>:
     eed:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     efd:	47 00                                               G.

00000eff <pstr_an>:
     eff:	61 6e 00                                            an.

00000f02 <pstr_nfinity>:
     f02:	6e 66 69 6e 69 74 79 00                             nfinity.

00000f0a <pwr_m10>:
     f0a:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     f1a:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000f22 <pwr_p10>:
     f22:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     f32:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000f3a <__ctors_end>:
     f3a:	11 24       	eor	r1, r1
     f3c:	1f be       	out	0x3f, r1	; 63
     f3e:	cf ef       	ldi	r28, 0xFF	; 255
     f40:	d8 e0       	ldi	r29, 0x08	; 8
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	cd bf       	out	0x3d, r28	; 61

00000f46 <__do_copy_data>:
     f46:	11 e0       	ldi	r17, 0x01	; 1
     f48:	a0 e0       	ldi	r26, 0x00	; 0
     f4a:	b1 e0       	ldi	r27, 0x01	; 1
     f4c:	e8 e2       	ldi	r30, 0x28	; 40
     f4e:	fd e7       	ldi	r31, 0x7D	; 125
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <__do_copy_data+0x10>
     f52:	05 90       	lpm	r0, Z+
     f54:	0d 92       	st	X+, r0
     f56:	a6 31       	cpi	r26, 0x16	; 22
     f58:	b1 07       	cpc	r27, r17
     f5a:	d9 f7       	brne	.-10     	; 0xf52 <__do_copy_data+0xc>

00000f5c <__do_clear_bss>:
     f5c:	28 e0       	ldi	r18, 0x08	; 8
     f5e:	a6 e1       	ldi	r26, 0x16	; 22
     f60:	b1 e0       	ldi	r27, 0x01	; 1
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <.do_clear_bss_start>

00000f64 <.do_clear_bss_loop>:
     f64:	1d 92       	st	X+, r1

00000f66 <.do_clear_bss_start>:
     f66:	a6 32       	cpi	r26, 0x26	; 38
     f68:	b2 07       	cpc	r27, r18
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <.do_clear_bss_loop>
     f6c:	0e 94 33 21 	call	0x4266	; 0x4266 <main>
     f70:	0c 94 92 3e 	jmp	0x7d24	; 0x7d24 <_exit>

00000f74 <__bad_interrupt>:
     f74:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f78 <usbCrc16>:
;   byte    r18 / r22
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     f78:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     f7a:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xFF
     f7c:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xFF
     f7e:	9f ef       	ldi	r25, 0xFF	; 255
    rjmp    usbCrc16LoopTest
     f80:	1b c0       	rjmp	.+54     	; 0xfb8 <usbCrc16LoopTest>

00000f82 <usbCrc16ByteLoop>:
usbCrc16ByteLoop:
    ld      byte, ptr+
     f82:	2d 91       	ld	r18, X+
    eor     resCrcL, byte   ; resCrcL is now 'x' in table()
     f84:	82 27       	eor	r24, r18
    mov     byte, resCrcL   ; compute parity of 'x'
     f86:	28 2f       	mov	r18, r24
    swap    byte
     f88:	22 95       	swap	r18
    eor     byte, resCrcL
     f8a:	28 27       	eor	r18, r24
    mov     scratch, byte
     f8c:	72 2f       	mov	r23, r18
    lsr     byte
     f8e:	26 95       	lsr	r18
    lsr     byte
     f90:	26 95       	lsr	r18
    eor     byte, scratch
     f92:	27 27       	eor	r18, r23
    inc     byte
     f94:	23 95       	inc	r18
    lsr     byte
     f96:	26 95       	lsr	r18
    andi    byte, 1         ; byte is now parity(x)
     f98:	21 70       	andi	r18, 0x01	; 1
    mov     scratch, resCrcL
     f9a:	78 2f       	mov	r23, r24
    mov     resCrcL, resCrcH
     f9c:	89 2f       	mov	r24, r25
    eor     resCrcL, byte   ; low byte of if(parity(x)) value ^= 0xc001;
     f9e:	82 27       	eor	r24, r18
    neg     byte
     fa0:	21 95       	neg	r18
    andi    byte, 0xc0
     fa2:	20 7c       	andi	r18, 0xC0	; 192
    mov     resCrcH, byte   ; high byte of if(parity(x)) value ^= 0xc001;
     fa4:	92 2f       	mov	r25, r18
    clr     byte
     fa6:	22 27       	eor	r18, r18
    lsr     scratch
     fa8:	76 95       	lsr	r23
    ror     byte
     faa:	27 95       	ror	r18
    eor     resCrcH, scratch
     fac:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     fae:	82 27       	eor	r24, r18
    lsr     scratch
     fb0:	76 95       	lsr	r23
    ror     byte
     fb2:	27 95       	ror	r18
    eor     resCrcH, scratch
     fb4:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     fb6:	82 27       	eor	r24, r18

00000fb8 <usbCrc16LoopTest>:
usbCrc16LoopTest:
    subi    argLen, 1
     fb8:	61 50       	subi	r22, 0x01	; 1
    brsh    usbCrc16ByteLoop
     fba:	18 f7       	brcc	.-58     	; 0xf82 <usbCrc16ByteLoop>
    com     resCrcL
     fbc:	80 95       	com	r24
    com     resCrcH
     fbe:	90 95       	com	r25
    ret
     fc0:	08 95       	ret

00000fc2 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     fc2:	da df       	rcall	.-76     	; 0xf78 <usbCrc16>
    st      ptr+, resCrcL
     fc4:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     fc6:	9d 93       	st	X+, r25
    ret
     fc8:	08 95       	ret

00000fca <__vector_1>:
; bitcnt is used to determine when a stuff bit is due
; cnt holds the number of bytes left in the receive buffer

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-28] push only what is necessary to sync with edge ASAP
     fca:	cf 93       	push	r28
    in      YL, SREG            ;[-26]
     fcc:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-25]
     fce:	cf 93       	push	r28
    push    YH                  ;[-23]
     fd0:	df 93       	push	r29

00000fd2 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     fd2:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     fd4:	33 9b       	sbis	0x06, 3	; 6
    brne    waitForJ        ; just make sure we have ANY timeout
     fd6:	e9 f7       	brne	.-6      	; 0xfd2 <waitForJ>

00000fd8 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-19]
     fd8:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK              ;[-18]
     fda:	11 c0       	rjmp	.+34     	; 0xffe <foundK>
    sbis    USBIN, USBMINUS
     fdc:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fde:	0f c0       	rjmp	.+30     	; 0xffe <foundK>
    sbis    USBIN, USBMINUS
     fe0:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fe2:	0d c0       	rjmp	.+26     	; 0xffe <foundK>
    sbis    USBIN, USBMINUS
     fe4:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fe6:	0b c0       	rjmp	.+22     	; 0xffe <foundK>
    sbis    USBIN, USBMINUS
     fe8:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fea:	09 c0       	rjmp	.+18     	; 0xffe <foundK>
    sbis    USBIN, USBMINUS
     fec:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fee:	07 c0       	rjmp	.+14     	; 0xffe <foundK>
    sbis    USBIN, USBMINUS
     ff0:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <foundK>
    sbis    USBIN, USBMINUS
     ff4:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <foundK>
    sbis    USBIN, USBMINUS
     ff8:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     ffc:	83 c0       	rjmp	.+262    	; 0x1104 <sofError>

00000ffe <foundK>:
foundK:                         ;[-16]
;{3, 5} after falling D- edge, average delay: 4 cycles
;bit0 should be at 34 for center sampling. Currently at 4 so 30 cylces till bit 0 sample
;use 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-16]
     ffe:	6f 93       	push	r22
;   [---]                       ;[-15]
    lds     YL, usbInputBufOffset;[-14]
    1000:	c0 91 09 08 	lds	r28, 0x0809	; 0x800809 <usbInputBufOffset>
;   [---]                       ;[-13]
    clr     YH                  ;[-12]
    1004:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-11] [rx loop init]
    1006:	c0 5f       	subi	r28, 0xF0	; 240
    sbci    YH, hi8(-(usbRxBuf));[-10] [rx loop init]
    1008:	d7 4f       	sbci	r29, 0xF7	; 247
    push    shift               ;[-9]
    100a:	2f 93       	push	r18
;   [---]                       ;[-8]
    ldi     shift,0x40          ;[-7] set msb to "1" so processing bit7 can be detected
    100c:	20 e4       	ldi	r18, 0x40	; 64
    nop2                        ;[-6]
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <foundK+0x12>
;   [---]                       ;[-5]
    ldi     bitcnt, 5           ;[-4] [rx loop init]
    1010:	65 e0       	ldi	r22, 0x05	; 5
    sbis    USBIN, USBMINUS     ;[-3] we want two bits K (sample 3 cycles too early)
    1012:	33 9b       	sbis	0x06, 3	; 6
    rjmp    haveTwoBitsK        ;[-2]
    1014:	03 c0       	rjmp	.+6      	; 0x101c <haveTwoBitsK>
    pop     shift               ;[-1] undo the push from before
    1016:	2f 91       	pop	r18
    pop     bitcnt              ;[1] 
    1018:	6f 91       	pop	r22
    rjmp    waitForK            ;[3] this was not the end of sync, retry
    101a:	de cf       	rjmp	.-68     	; 0xfd8 <waitForK>

0000101c <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1                  ;[0]
    101c:	0f 93       	push	r16
    push    x2                  ;[2]
    101e:	1f 93       	push	r17
    push    x3                  ;[4] (leap2)
    1020:	4f 93       	push	r20
    ldi     leap2, 0x55         ;[6] add leap cycle on 2nd,5th,8th,... stuff bit
    1022:	45 e5       	ldi	r20, 0x55	; 85
    push    x4                  ;[7] == leap
    1024:	5f 93       	push	r21
    ldi     leap, 0x55          ;[9] skip leap cycle on 2nd,5th,8th,... byte received
    1026:	55 e5       	ldi	r21, 0x55	; 85
    push    cnt                 ;[10]
    1028:	3f 93       	push	r19
    ldi     cnt, USB_BUFSIZE    ;[12] [rx loop init]
    102a:	3b e0       	ldi	r19, 0x0B	; 11
    ldi     x2, 1<<USBPLUS      ;[13] current line state is K state. D+=="1", D-=="0"
    102c:	14 e0       	ldi	r17, 0x04	; 4

0000102e <bit0>:
bit0:       
    in      x1, USBIN           ;[0] sample line state
    102e:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
    1030:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;[2] make bit0 14 cycles long
    1032:	2e c0       	rjmp	.+92     	; 0x1090 <handleBit>

00001034 <b6checkUnstuff>:
;----------------------------------------------------------------------------
; Process bit7. However, bit 6 still may need unstuffing.
;----------------------------------------------------------------------------

b6checkUnstuff:
    dec     bitcnt              ;[9]
    1034:	6a 95       	dec	r22
    breq    unstuff6            ;[10]
    1036:	c9 f0       	breq	.+50     	; 0x106a <unstuff6>

00001038 <bit7>:
bit7:
    subi    cnt, 1              ;[11] cannot use dec becaus it does not affect the carry flag
    1038:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow            ;[12] Too many bytes received. Ignore packet
    103a:	d8 f1       	brcs	.+118    	; 0x10b2 <overflow>
    in      x1, USBIN           ;[0] sample line state
    103c:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
    103e:	0c 70       	andi	r16, 0x0C	; 12
    cpse    x1, x2              ;[2] when previous line state equals current line state, handle "1"
    1040:	01 13       	cpse	r16, r17
    rjmp    b7handle0           ;[3] when line state differs, handle "0"
    1042:	0b c0       	rjmp	.+22     	; 0x105a <b7handle0>
    sec                         ;[4]
    1044:	08 94       	sec
    ror     shift               ;[5] shift "1" into the data
    1046:	27 95       	ror	r18
    st      y+, shift           ;[6] store the data into the buffer
    1048:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[7] reset data for receiving the next byte
    104a:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[9] trick to introduce a leap cycle every 3 bytes
    104c:	55 55       	subi	r21, 0x55	; 85
    brcc    nextInst            ;[10 or 11] it will fail after 85 bytes. However low speed can only receive 11
    104e:	00 f4       	brcc	.+0      	; 0x1050 <bit7+0x18>
    dec     bitcnt              ;[11 or 12]
    1050:	6a 95       	dec	r22
    brne    bit0                ;[12 or 13]
    1052:	69 f7       	brne	.-38     	; 0x102e <bit0>
    ldi     x1, 1               ;[13 or 14] unstuffing bit 7
    1054:	01 e0       	ldi	r16, 0x01	; 1
    in      bitcnt, USBIN       ;[0] sample stuff bit
    1056:	66 b1       	in	r22, 0x06	; 6
    rjmp    unstuff             ;[1]
    1058:	0b c0       	rjmp	.+22     	; 0x1070 <unstuff>

0000105a <b7handle0>:

b7handle0:
    mov     x2,x1               ;[5] Set x2 to current line state
    105a:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[6]
    105c:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[7] shift "0" into the data
    105e:	26 95       	lsr	r18
    st      y+, shift           ;[8] store data into the buffer
    1060:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[10] reset data for receiving the next byte
    1062:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[11] trick to introduce a leap cycle every 3 bytes
    1064:	55 55       	subi	r21, 0x55	; 85
    brcs    bit0                ;[12] it will fail after 85 bytes. However low speed can only receive 11
    1066:	18 f3       	brcs	.-58     	; 0x102e <bit0>
    rjmp    bit0                ;[13]
    1068:	e2 cf       	rjmp	.-60     	; 0x102e <bit0>

0000106a <unstuff6>:
; Handle unstuff
; x1==0xFF indicate unstuffing bit6
;----------------------------------------------------------------------------

unstuff6:
    ldi     x1,0xFF             ;[12] indicate unstuffing bit 6
    106a:	0f ef       	ldi	r16, 0xFF	; 255
    in      bitcnt, USBIN       ;[0]  sample stuff bit
    106c:	66 b1       	in	r22, 0x06	; 6
	...

00001070 <unstuff>:
    nop                         ;[1]  fix timing
unstuff:                        ;b0-5  b6   b7
    mov     x2,bitcnt           ;[3]  [2]  [3]  Set x2 to match line state
    1070:	16 2f       	mov	r17, r22
    subi    leap2, 0x55         ;[4]  [3]  [4]  delay loop
    1072:	45 55       	subi	r20, 0x55	; 85
    brcs    nextInst            ;[5]  [4]  [5]  add one cycle every three stuff bits
    1074:	00 f0       	brcs	.+0      	; 0x1076 <unstuff+0x6>
    sbci    leap2,0             ;[6]  [5]  [6]
    1076:	40 40       	sbci	r20, 0x00	; 0
    ldi     bitcnt,6            ;[7]  [6]  [7]  reset bit stuff counter
    1078:	66 e0       	ldi	r22, 0x06	; 6
    andi    x2, USBMASK         ;[8]  [7]  [8] only keep D+ and D-
    107a:	1c 70       	andi	r17, 0x0C	; 12
    cpi     x1,0                ;[9]  [8]  [9]
    107c:	00 30       	cpi	r16, 0x00	; 0
    brmi    bit7                ;[10] [9]  [10] finished unstuffing bit6 When x1<0
    107e:	e2 f2       	brmi	.-72     	; 0x1038 <bit7>
    breq    bitloop             ;[11] ---  [11] finished unstuffing bit0-5 when x1=0
    1080:	21 f0       	breq	.+8      	; 0x108a <bitloop>
    nop                         ;---  ---  [12]
    1082:	00 00       	nop
    in      x1, USBIN           ;---  ---  [0] sample line state for bit0
    1084:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;---  ---  [1] filter only D+ and D- bits
    1086:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;---  ---  [2] make bit0 14 cycles long
    1088:	03 c0       	rjmp	.+6      	; 0x1090 <handleBit>

0000108a <bitloop>:

;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------
bitloop:
    in      x1, USBIN           ;[0] sample line state
    108a:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
    108c:	0c 70       	andi	r16, 0x0C	; 12
    breq    se0                 ;[2] both lines are low so handle se0
    108e:	a9 f0       	breq	.+42     	; 0x10ba <se0>

00001090 <handleBit>:
handleBit:
    cpse    x1, x2              ;[3] when previous line state equals current line state, handle "1"
    1090:	01 13       	cpse	r16, r17
    rjmp    handle0             ;[4] when line state differs, handle "0"
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <handle0>
    sec                         ;[5]
    1094:	08 94       	sec
    ror     shift               ;[6] shift "1" into the data
    1096:	27 95       	ror	r18
    brcs    b6checkUnstuff      ;[7] When after shift C is set, next bit is bit7
    1098:	68 f2       	brcs	.-102    	; 0x1034 <b6checkUnstuff>
    nop2                        ;[8]
    109a:	00 c0       	rjmp	.+0      	; 0x109c <handleBit+0xc>
    dec     bitcnt              ;[10]
    109c:	6a 95       	dec	r22
    brne    bitloop             ;[11]
    109e:	a9 f7       	brne	.-22     	; 0x108a <bitloop>
    ldi     x1,0                ;[12] indicate unstuff for bit other than bit6 or bit7
    10a0:	00 e0       	ldi	r16, 0x00	; 0
    in      bitcnt, USBIN       ;[0] sample stuff bit
    10a2:	66 b1       	in	r22, 0x06	; 6
    rjmp    unstuff             ;[1]
    10a4:	e5 cf       	rjmp	.-54     	; 0x1070 <unstuff>

000010a6 <handle0>:

handle0:
    mov     x2, x1              ;[6] Set x2 to current line state
    10a6:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[7] reset unstuff counter. 
    10a8:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[8] shift "0" into the data
    10aa:	26 95       	lsr	r18
    brcs    bit7                ;[9] When after shift C is set, next bit is bit7
    10ac:	28 f2       	brcs	.-118    	; 0x1038 <bit7>
    nop                         ;[10]
    10ae:	00 00       	nop
    rjmp    bitloop             ;[11] 
    10b0:	ec cf       	rjmp	.-40     	; 0x108a <bitloop>

000010b2 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
    10b2:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
    10b4:	1c bb       	out	0x1c, r17	; 28

000010b6 <ignorePacket>:
ignorePacket:
    clr     token
    10b6:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
    10b8:	19 c0       	rjmp	.+50     	; 0x10ec <handleSetupOrOut>

000010ba <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
    10ba:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
    10bc:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
    10be:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
    10c0:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
    10c2:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
    10c4:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
    10c6:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
    10c8:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
    10ca:	09 f1       	breq	.+66     	; 0x110e <handleData>
    cpi     token, USBPID_DATA1 ;[15]
    10cc:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
    10ce:	f9 f0       	breq	.+62     	; 0x110e <handleData>
    lds     shift, usbDeviceAddr;[17]
    10d0:	20 91 07 08 	lds	r18, 0x0807	; 0x800807 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
    10d4:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
    10d6:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
    10d8:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
    10da:	ed cf       	rjmp	.-38     	; 0x10b6 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
    10dc:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
    10de:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
    10e0:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
    10e2:	51 f1       	breq	.+84     	; 0x1138 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
    10e4:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
    10e6:	11 f0       	breq	.+4      	; 0x10ec <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
    10e8:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
    10ea:	29 f7       	brne	.-54     	; 0x10b6 <ignorePacket>

000010ec <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
    10ec:	00 93 0e 08 	sts	0x080E, r16	; 0x80080e <usbCurrentTok>

000010f0 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
    10f0:	3f 91       	pop	r19
    10f2:	5f 91       	pop	r21
    10f4:	4f 91       	pop	r20
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	2f 91       	pop	r18
    10fc:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
    10fe:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
    1100:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
    1102:	67 cf       	rjmp	.-306    	; 0xfd2 <waitForJ>

00001104 <sofError>:
sofError:
    POP_RETI                    ;macro call
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	cf bf       	out	0x3f, r28	; 63
    110a:	cf 91       	pop	r28
    reti
    110c:	18 95       	reti

0000110e <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
    110e:	20 91 0e 08 	lds	r18, 0x080E	; 0x80080e <usbCurrentTok>
    tst     shift               ;[20]
    1112:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
    1114:	69 f3       	breq	.-38     	; 0x10f0 <doReturn>
    lds     x2, usbRxLen        ;[22]
    1116:	10 91 0c 08 	lds	r17, 0x080C	; 0x80080c <usbRxLen>
    tst     x2                  ;[24]
    111a:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
    111c:	81 f5       	brne	.+96     	; 0x117e <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
    111e:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
    1120:	82 f1       	brmi	.+96     	; 0x1182 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
    1122:	30 93 0c 08 	sts	0x080C, r19	; 0x80080c <usbRxLen>
    sts     usbRxToken, shift   ;[30]
    1126:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
    112a:	10 91 09 08 	lds	r17, 0x0809	; 0x800809 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
    112e:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
    1130:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
    1132:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
    1136:	25 c0       	rjmp	.+74     	; 0x1182 <sendAckAndReti>

00001138 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
    1138:	00 91 0c 08 	lds	r16, 0x080C	; 0x80080c <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
    113c:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
    113e:	fc f4       	brge	.+62     	; 0x117e <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
    1140:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
    1142:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
    1144:	49 f4       	brne	.+18     	; 0x1158 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
    1146:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
    114a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
    114c:	1b c0       	rjmp	.+54     	; 0x1184 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
    114e:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
    1152:	cc ef       	ldi	r28, 0xFC	; 252
    ldi     YH, hi8(usbTxBuf)   ;[44]
    1154:	d7 e0       	ldi	r29, 0x07	; 7
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
    1156:	1a c0       	rjmp	.+52     	; 0x118c <usbSendAndReti>

00001158 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
    1158:	30 91 8f 05 	lds	r19, 0x058F	; 0x80058f <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
    115c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
    115e:	12 c0       	rjmp	.+36     	; 0x1184 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
    1160:	00 93 8f 05 	sts	0x058F, r16	; 0x80058f <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
    1164:	c0 e9       	ldi	r28, 0x90	; 144
    ldi     YH, hi8(usbTxBuf1)  ;[47]
    1166:	d5 e0       	ldi	r29, 0x05	; 5
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
    1168:	11 c0       	rjmp	.+34     	; 0x118c <usbSendAndReti>

0000116a <bitstuffN>:
; Spec allows 7.5 bit times from EOP to SOP for replies
; 7.5 bit times is 100 cycles. This implementation arrives a bit later at se0
; then specified in the include file but there is plenty of time

bitstuffN:
    eor     x1, x4          ;[8]
    116a:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[9]
    116c:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[10]
    116e:	00 c0       	rjmp	.+0      	; 0x1170 <bitstuffN+0x6>
    out     USBOUT, x1      ;[12] <-- out
    1170:	08 b9       	out	0x08, r16	; 8
    rjmp    didStuffN       ;[0]
    1172:	19 c0       	rjmp	.+50     	; 0x11a6 <didStuffN>

00001174 <bitstuff7>:
    
bitstuff7:
    eor     x1, x4          ;[6]
    1174:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[7] Carry is zero due to brcc
    1176:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[8] compensate for ror shift at branch destination
    1178:	22 1f       	adc	r18, r18
    nop2                    ;[9]
    117a:	00 c0       	rjmp	.+0      	; 0x117c <bitstuff7+0x8>
    rjmp    didStuff7       ;[11]
    117c:	1d c0       	rjmp	.+58     	; 0x11b8 <didStuff7>

0000117e <sendNakAndReti>:

sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
    117e:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <sendX3AndReti>

00001182 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
    1182:	32 ed       	ldi	r19, 0xD2	; 210

00001184 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
    1184:	43 2f       	mov	r20, r19

00001186 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
    1186:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
    1188:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
    118a:	32 e0       	ldi	r19, 0x02	; 2

0000118c <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
    118c:	17 b1       	in	r17, 0x07	; 7
    ori     x2, USBMASK     ;[-11]
    118e:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
    1190:	43 9a       	sbi	0x08, 3	; 8
    in      x1, USBOUT      ;[-8] port mirror for tx loop
    1192:	08 b1       	in	r16, 0x08	; 8
    out     USBDDR, x2      ;[-7] <- acquire bus
    1194:	17 b9       	out	0x07, r17	; 7
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
    1196:	5c e0       	ldi	r21, 0x0C	; 12
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
    1198:	20 e8       	ldi	r18, 0x80	; 128

0000119a <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x49    ;[-4]        [10] binary 01001001
    119a:	69 e4       	ldi	r22, 0x49	; 73

0000119c <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [10]   [11]
    119c:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [11]   [12]
    119e:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [12]   [13]   <-- out N
    11a0:	08 b9       	out	0x08, r16	; 8
    ror     shift           ;[0]  [13]   [14]
    11a2:	27 95       	ror	r18
    ror     x2              ;[1]
    11a4:	17 95       	ror	r17

000011a6 <didStuffN>:
didStuffN:
    nop2                    ;[2]
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <didStuffN+0x2>
    nop                     ;[4]
    11a8:	00 00       	nop
    cpi     x2, 0xfc        ;[5]
    11aa:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[6]
    11ac:	f0 f6       	brcc	.-68     	; 0x116a <bitstuffN>
    lsr     bitcnt          ;[7]
    11ae:	66 95       	lsr	r22
    brcc    txBitLoop       ;[8]
    11b0:	a8 f7       	brcc	.-22     	; 0x119c <txBitLoop>
    brne    txBitLoop       ;[9]
    11b2:	a1 f7       	brne	.-24     	; 0x119c <txBitLoop>

    sbrs    shift, 0        ;[10]
    11b4:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[11]
    11b6:	05 27       	eor	r16, r21

000011b8 <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[-1] [13] <-- out 7
    11b8:	08 b9       	out	0x08, r16	; 8
    ror     shift           ;[0] [14]
    11ba:	27 95       	ror	r18
    ror     x2              ;[1]
    11bc:	17 95       	ror	r17
    nop                     ;[2]
    11be:	00 00       	nop
    cpi     x2, 0xfc        ;[3]
    11c0:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[4]
    11c2:	c0 f6       	brcc	.-80     	; 0x1174 <bitstuff7>
    ld      shift, y+       ;[5]
    11c4:	29 91       	ld	r18, Y+
    dec     cnt             ;[7]
    11c6:	3a 95       	dec	r19
    brne    txByteLoop      ;[8]
    11c8:	41 f7       	brne	.-48     	; 0x119a <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[9] prepare SE0 [spec says EOP may be 25 to 30 cycles]
    11ca:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[10]
    11cc:	10 91 0d 08 	lds	r17, 0x080D	; 0x80080d <usbNewDeviceAddr>
    lsl     x2              ;[12] we compare with left shifted address
    11d0:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[13] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
    11d2:	08 b9       	out	0x08, r16	; 8
    subi    YL, 20 + 2      ;[0] Only assign address on data packets, not ACK/NAK in x3
    11d4:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[1]
    11d6:	d0 40       	sbci	r29, 0x00	; 0
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[2]
    11d8:	11 f0       	breq	.+4      	; 0x11de <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
    11da:	10 93 07 08 	sts	0x0807, r17	; 0x800807 <usbDeviceAddr>

000011de <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
    11de:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)   ;[5]
    11e0:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     ;[6]
    11e2:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR      ;[7]
    11e4:	17 b1       	in	r17, 0x07	; 7
    cbr     x2, USBMASK     ;[8] set both pins to input
    11e6:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1          ;[9]
    11e8:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
    11ea:	43 7f       	andi	r20, 0xF3	; 243
    ldi     x4, 5           ;[11]
    11ec:	55 e0       	ldi	r21, 0x05	; 5

000011ee <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21] [24]
    11ee:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22] [25]
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <se0Delay>
    out     USBOUT, x1      ;[26] <-- out J (idle) -- end of SE0 (EOP signal)
    11f2:	08 b9       	out	0x08, r16	; 8
    out     USBDDR, x2      ;[27] <-- release bus now
    11f4:	17 b9       	out	0x07, r17	; 7
    out     USBOUT, x3      ;[28] <-- ensure no pull-up resistors are active
    11f6:	48 b9       	out	0x08, r20	; 8
    rjmp    doReturn
    11f8:	7b cf       	rjmp	.-266    	; 0x10f0 <doReturn>

000011fa <memory_bl_readFlashPage>:

#ifdef RELEASE
__attribute__((section(".df4iah_bl_memory"), aligned(2)))
#endif
void memory_bl_readFlashPage(uint8_t target[], pagebuf_t size, uint32_t baddr)
{
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
	const uint32_t C_app_end = APP_END;
	uint16_t data;
	uint8_t idx = 0;
    1200:	80 e0       	ldi	r24, 0x00	; 0
#else
			data = pgm_read_word_near(baddr);
#endif
		}
		else {
			data = 0xFFFF; 									// fake empty, no access to the bootloader
    1202:	7f ef       	ldi	r23, 0xFF	; 255
{
	const uint32_t C_app_end = APP_END;
	uint16_t data;
	uint8_t idx = 0;

	while (size) {
    1204:	20 c0       	rjmp	.+64     	; 0x1246 <memory_bl_readFlashPage+0x4c>
#ifndef READ_PROTECT_BOOTLOADER
# warning "Bootloader not read-protected"
		if (true) {
#else
		// don't read bootloader
		if (baddr < C_app_end) {
    1206:	2f 3f       	cpi	r18, 0xFF	; 255
    1208:	9f e6       	ldi	r25, 0x6F	; 111
    120a:	39 07       	cpc	r19, r25
    120c:	41 05       	cpc	r20, r1
    120e:	51 05       	cpc	r21, r1
    1210:	30 f4       	brcc	.+12     	; 0x121e <memory_bl_readFlashPage+0x24>
#if defined(RAMPZ)
			data = pgm_read_word_far(baddr);
#else
			data = pgm_read_word_near(baddr);
    1212:	f9 01       	movw	r30, r18
    1214:	a5 91       	lpm	r26, Z+
    1216:	b4 91       	lpm	r27, Z
    1218:	9a 2f       	mov	r25, r26
    121a:	ab 2f       	mov	r26, r27
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <memory_bl_readFlashPage+0x28>
#endif
		}
		else {
			data = 0xFFFF; 									// fake empty, no access to the bootloader
    121e:	97 2f       	mov	r25, r23
    1220:	a7 2f       	mov	r26, r23
		}
#endif
		target[idx++] = data & 0xff;						// store LSB
    1222:	fe 01       	movw	r30, r28
    1224:	e8 0f       	add	r30, r24
    1226:	f1 1d       	adc	r31, r1
    1228:	90 83       	st	Z, r25
		if (--size) {
    122a:	61 30       	cpi	r22, 0x01	; 1
    122c:	71 f0       	breq	.+28     	; 0x124a <memory_bl_readFlashPage+0x50>
		}
		else {
			data = 0xFFFF; 									// fake empty, no access to the bootloader
		}
#endif
		target[idx++] = data & 0xff;						// store LSB
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	98 0f       	add	r25, r24
		if (--size) {
			target[idx++] = data >> 8;						// store MSB
    1232:	fe 01       	movw	r30, r28
    1234:	e9 0f       	add	r30, r25
    1236:	f1 1d       	adc	r31, r1
    1238:	a0 83       	st	Z, r26
			baddr += 2;										// select next word in memory
    123a:	2e 5f       	subi	r18, 0xFE	; 254
    123c:	3f 4f       	sbci	r19, 0xFF	; 255
    123e:	4f 4f       	sbci	r20, 0xFF	; 255
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
			--size;											// subtract two bytes from number of bytes to read
    1242:	62 50       	subi	r22, 0x02	; 2
			data = 0xFFFF; 									// fake empty, no access to the bootloader
		}
#endif
		target[idx++] = data & 0xff;						// store LSB
		if (--size) {
			target[idx++] = data >> 8;						// store MSB
    1244:	8e 5f       	subi	r24, 0xFE	; 254
{
	const uint32_t C_app_end = APP_END;
	uint16_t data;
	uint8_t idx = 0;

	while (size) {
    1246:	61 11       	cpse	r22, r1
    1248:	de cf       	rjmp	.-68     	; 0x1206 <memory_bl_readFlashPage+0xc>
			target[idx++] = data >> 8;						// store MSB
			baddr += 2;										// select next word in memory
			--size;											// subtract two bytes from number of bytes to read
		}
	}														// repeat until block has been read
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	08 95       	ret

00001250 <anlgComp_fw_init>:


void anlgComp_fw_init(void)
{
	/* enable power for ADC, reference voltage and analog comparator */
	PRR &= ~(_BV(PRADC));
    1250:	e4 e6       	ldi	r30, 0x64	; 100
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	8e 7f       	andi	r24, 0xFE	; 254
    1258:	80 83       	st	Z, r24

	/* init the ADC counter */
	acAdcConvertNowCntr = 0;
    125a:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <acAdcConvertNowCntr>

	/* disable digital input buffers on AIN0, AIN1, ADC0 and ADC1 */
	DIDR1 |= (0b11 << AIN0D);
    125e:	ef e7       	ldi	r30, 0x7F	; 127
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	83 60       	ori	r24, 0x03	; 3
    1266:	80 83       	st	Z, r24
	DIDR0  = (0b000011 << ADC0D);
    1268:	83 e0       	ldi	r24, 0x03	; 3
    126a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	/* enable comparator AIN1 pin */
	ADCSRB &= ~(_BV(ACME));									// disable Analog Comparator Multiplex Enable
    126e:	eb e7       	ldi	r30, 0x7B	; 123
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8f 7b       	andi	r24, 0xBF	; 191
    1276:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN) | (0b111 << ADPS0);					// AD enable, use 128/1 prescaler for ADC clock = 156250 Hz
    1278:	ea e7       	ldi	r30, 0x7A	; 122
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	87 68       	ori	r24, 0x87	; 135
    1280:	80 83       	st	Z, r24

	/* enable comparator AIN0 pin */
	ACSR  = (ACSR &  ~(_BV(ACBG) | _BV(ACD)	|	 		  	// disable bandgap reference voltage, switch off Analog Comparator Disable
    1282:	80 b7       	in	r24, 0x30	; 48
    1284:	87 e1       	ldi	r24, 0x17	; 23
    1286:	80 bf       	out	0x30, r24	; 48
			_BV(ACI)						|				// clear any pending interrupt
			(0b11 << ACIS0);								// disable ACIE for interrupt as long interrupt source is changed, interrupt on Rising Edge
	// ACSR |= _BV(ACIE);									// now set ACIE for interrupt (disabled --> done within Timer1)

	/* ADC reference set to AREF */
	acAdcConvertNowState = 0x11;							// set FSM address to "discard next conversion"
    1288:	81 e1       	ldi	r24, 0x11	; 17
    128a:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>
	ADMUX = (0b01 << REFS0) | 0x1;							// keep ADLAR off, switch to channel ADC1 (phase input)
    128e:	81 e4       	ldi	r24, 0x41	; 65
    1290:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	/* start the initial conversion */
	ADCSRA |= _BV(ADSC) | _BV(ADIF);						// start first conversion of the conversion train and clear pending interrupt flag
    1294:	80 81       	ld	r24, Z
    1296:	80 65       	ori	r24, 0x50	; 80
    1298:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);									// enable ADC interrupt
    129a:	80 81       	ld	r24, Z
    129c:	88 60       	ori	r24, 0x08	; 8
    129e:	80 83       	st	Z, r24
    12a0:	08 95       	ret

000012a2 <anlgComp_fw_close>:
}

void anlgComp_fw_close(void)
{
	/* disable interrupt, disable analog comparator */
	ACSR = (ACSR & ~(_BV(ACIE))) | _BV(ACD);
    12a2:	80 b7       	in	r24, 0x30	; 48
    12a4:	87 77       	andi	r24, 0x77	; 119
    12a6:	80 68       	ori	r24, 0x80	; 128
    12a8:	80 bf       	out	0x30, r24	; 48

	/* turn off ADC and Analog Comparator */
	ADCSRA = (0b111 << ADPS0);								// disable but keep the prescaler output at the lowest frequency
    12aa:	87 e0       	ldi	r24, 0x07	; 7
    12ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0;												// disable Analog Comparator Multiplex Enable
    12b0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

	/* turn off reference voltage at selection */
	ADMUX = 0;
    12b4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	/* disable power for ADC, reference voltage and analog comparator */
	PRR |= _BV(PRADC);
    12b8:	e4 e6       	ldi	r30, 0x64	; 100
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	81 60       	ori	r24, 0x01	; 1
    12c0:	80 83       	st	Z, r24
    12c2:	08 95       	ret

000012c4 <anlgComp_fw_startAdcConvertion>:
#if 0
	set_sleep_mode(SLEEP_MODE_ADC);							// do not use SLEEP_MODE_ADC due to the fact that the timers are stopped
	sleep_enable();
	sleep_cpu();
#else
	ADCSRA |= _BV(ADSC);									// start conversion
    12c4:	ea e7       	ldi	r30, 0x7A	; 122
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 64       	ori	r24, 0x40	; 64
    12cc:	80 83       	st	Z, r24
    12ce:	08 95       	ret

000012d0 <__vector_21>:
 *
 * = 19 clocks --> 0.95 µs until sei() is done
 */
//void anlgComp_fw_ISR_ADC() - __vector_21
ISR(ADC_vect, ISR_BLOCK)
{
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
	//sleep_disable();

	/* read the ADC value */
	uint8_t localADCL = ADCL;								// read LSB first
    12f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint8_t localADCH = ADCH;
    12f6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	sei();
    12fa:	78 94       	sei

	uint16_t adVal  =  localADCL | (localADCH << 8);
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	92 2b       	or	r25, r18

	switch (acAdcConvertNowState)
    1300:	20 91 2b 05 	lds	r18, 0x052B	; 0x80052b <acAdcConvertNowState>
    1304:	28 30       	cpi	r18, 0x08	; 8
    1306:	91 f1       	breq	.+100    	; 0x136c <__vector_21+0x9c>
    1308:	28 f4       	brcc	.+10     	; 0x1314 <__vector_21+0x44>
    130a:	22 23       	and	r18, r18
    130c:	e1 f0       	breq	.+56     	; 0x1346 <__vector_21+0x76>
    130e:	21 30       	cpi	r18, 0x01	; 1
    1310:	41 f0       	breq	.+16     	; 0x1322 <__vector_21+0x52>
    1312:	30 c0       	rjmp	.+96     	; 0x1374 <__vector_21+0xa4>
    1314:	21 31       	cpi	r18, 0x11	; 17
    1316:	b9 f1       	breq	.+110    	; 0x1386 <__vector_21+0xb6>
    1318:	28 31       	cpi	r18, 0x18	; 24
    131a:	11 f1       	breq	.+68     	; 0x1360 <__vector_21+0x90>
    131c:	20 31       	cpi	r18, 0x10	; 16
    131e:	51 f5       	brne	.+84     	; 0x1374 <__vector_21+0xa4>
    1320:	0d c0       	rjmp	.+26     	; 0x133c <__vector_21+0x6c>
	{
	case 0x01:
		/* store PHASE value */
		acAdcCh[1] = adVal;
    1322:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <acAdcCh+0x3>
    1326:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <acAdcCh+0x2>

		/* switch to ADC input channel 0 - PWM analog value */
		acAdcConvertNowState = 0x10;
    132a:	80 e1       	ldi	r24, 0x10	; 16
    132c:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>
		ADMUX = 0b01000000;  								// = (0b01 << REFS0) | ((ac_adc_convertNowCh & 0x07) << MUX0);
    1330:	80 e4       	ldi	r24, 0x40	; 64
    1332:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1336:	0e 94 62 09 	call	0x12c4	; 0x12c4 <anlgComp_fw_startAdcConvertion>
		break;
    133a:	2d c0       	rjmp	.+90     	; 0x1396 <__vector_21+0xc6>

	case 0x10:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x00;
    133c:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <acAdcConvertNowState>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1340:	0e 94 62 09 	call	0x12c4	; 0x12c4 <anlgComp_fw_startAdcConvertion>
		break;
    1344:	28 c0       	rjmp	.+80     	; 0x1396 <__vector_21+0xc6>

	case 0x00:
		/* store PWM analog value */
		acAdcCh[0] = adVal;
    1346:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <acAdcCh+0x1>
    134a:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <acAdcCh>

		/* switch to ADC input channel for temperature */
		acAdcConvertNowState = 0x18;
    134e:	88 e1       	ldi	r24, 0x18	; 24
    1350:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>

		/* switch over to temperature conversion */
		ADMUX = 0b11001000;  								// = (0b11 << REFS0) | (0x08 << MUX0);
    1354:	88 ec       	ldi	r24, 0xC8	; 200
    1356:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    135a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <anlgComp_fw_startAdcConvertion>
		break;
    135e:	1b c0       	rjmp	.+54     	; 0x1396 <__vector_21+0xc6>

	case 0x18:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x08;
    1360:	88 e0       	ldi	r24, 0x08	; 8
    1362:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1366:	0e 94 62 09 	call	0x12c4	; 0x12c4 <anlgComp_fw_startAdcConvertion>
		break;
    136a:	15 c0       	rjmp	.+42     	; 0x1396 <__vector_21+0xc6>

	case 0x08:
		acAdcCh[2] = adVal;
    136c:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <acAdcCh+0x5>
    1370:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <acAdcCh+0x4>
		// no break
	default:
		/* switch to ADC input channel 1 - PHASE value */
		acAdcConvertNowState = 0x11;
    1374:	81 e1       	ldi	r24, 0x11	; 17
    1376:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>
		ADMUX = 0b01000000 | 1;  							// = (0b01 << REFS0) | ((ac_adc_convertNowCh & 0x07) << MUX0);
    137a:	81 e4       	ldi	r24, 0x41	; 65
    137c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1380:	0e 94 62 09 	call	0x12c4	; 0x12c4 <anlgComp_fw_startAdcConvertion>
		break;
    1384:	08 c0       	rjmp	.+16     	; 0x1396 <__vector_21+0xc6>

	case 0x11:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x01;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>

		/* update ADC counter to inform about a new conversion train is ready to be read */
		acAdcConvertNowCntr++;
    138c:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <acAdcConvertNowCntr>
    1390:	8f 5f       	subi	r24, 0xFF	; 255
    1392:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <acAdcConvertNowCntr>

		/* end of conversion train - no more ADSC. Woken up by the next rising edge of PPS in ISR(ANALOG_COMP_vect, ISR_BLOCK) */
		break;
	}
}
    1396:	ff 91       	pop	r31
    1398:	ef 91       	pop	r30
    139a:	bf 91       	pop	r27
    139c:	af 91       	pop	r26
    139e:	9f 91       	pop	r25
    13a0:	8f 91       	pop	r24
    13a2:	7f 91       	pop	r23
    13a4:	6f 91       	pop	r22
    13a6:	5f 91       	pop	r21
    13a8:	4f 91       	pop	r20
    13aa:	3f 91       	pop	r19
    13ac:	2f 91       	pop	r18
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	0f 90       	pop	r0
    13b4:	1f 90       	pop	r1
    13b6:	18 95       	reti

000013b8 <clkFastCtr_fw_init>:


void clkFastCtr_fw_init(void)
{
	/* power up this module */
	PRR &= ~(_BV(PRTIM1));
    13b8:	e4 e6       	ldi	r30, 0x64	; 100
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	87 7f       	andi	r24, 0xF7	; 247
    13c0:	80 83       	st	Z, r24

	/* clear the timer */
	TCNT1H = 0;												// write high byte first
    13c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
    13c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	/* set the timer top value for 20.000 clocks @ 20MHz --> 1ms */
	OCR1AH = (OCR1_TOP_VALUE >> 8);							// write high byte first
    13ca:	8e e4       	ldi	r24, 0x4E	; 78
    13cc:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = (OCR1_TOP_VALUE & 0xff);
    13d0:	8f e1       	ldi	r24, 0x1F	; 31
    13d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	/* set the timer-1 mode of operation: 0x4 = CTC, counting up, TOP := OCR1A [. . WGM01 WGM00] */
	TCCR1A = (0b00<<WGM10);
    13d6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	/* set the timer-1 mode of operation: 0x4 = CTC, counting up, TOP := OCR1A [WGM03 WGM02 . .] */
	/* no ICNC1 input filtering */
	/* ICES is set to trigger on the rising edge of the Comparator output --> rising edge of AIN0 */
	/* set the timer-1 clock source to 20 MHz XTAL */
	TCCR1B = _BV(ICES1)						|				// select rising edge of the ICP1/AIN0 input to trigger
    13da:	89 e4       	ldi	r24, 0x49	; 73
    13dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			 (0b01<<WGM12)					|				// WGM03 WGM02
			 (0b001<<CS10);									// since now the timer runs

	/* ICF1 and OCF1A interrupt enable */
	TIMSK1 = _BV(ICIE1) 					|				// ICF1   - GPS PPS rising edge event
    13e0:	82 e2       	ldi	r24, 0x22	; 34
    13e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    13e6:	08 95       	ret

000013e8 <clkFastCtr_fw_close>:
	PCICR  &= ~(PCIE2);
	PCMSK2 &= ~(PCINT20);
#endif

	/* switch off interrupts */
	TIMSK1 = 0;
    13e8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	/* switch clock source to halted */
	TCCR1B = 0;
    13ec:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	/* no more power is needed for this module */
	PRR |= _BV(PRTIM1);
    13f0:	e4 e6       	ldi	r30, 0x64	; 100
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 60       	ori	r24, 0x08	; 8
    13f8:	80 83       	st	Z, r24
    13fa:	08 95       	ret

000013fc <__vector_11>:
 *
 * = 54 clocks --> 2.70 µs until sei() is done
 */
//void clkFastCtr_fw_ISR_T1_CompA() - __vector_11
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    13fc:	1f 92       	push	r1
    13fe:	0f 92       	push	r0
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	0f 92       	push	r0
    1404:	11 24       	eor	r1, r1
    1406:	2f 93       	push	r18
    1408:	3f 93       	push	r19
    140a:	8f 93       	push	r24
    140c:	9f 93       	push	r25
    140e:	af 93       	push	r26
    1410:	bf 93       	push	r27
	/* this ISR is called every 20.000 clocks - repeating each ms again */

	/* the 32 bit timer overflows every 3 1/4 year */
	fastCtr1ms++;
    1412:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <fastCtr1ms>
    1416:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <fastCtr1ms+0x1>
    141a:	a0 91 39 05 	lds	r26, 0x0539	; 0x800539 <fastCtr1ms+0x2>
    141e:	b0 91 3a 05 	lds	r27, 0x053A	; 0x80053a <fastCtr1ms+0x3>
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	a1 1d       	adc	r26, r1
    1426:	b1 1d       	adc	r27, r1
    1428:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <fastCtr1ms>
    142c:	90 93 38 05 	sts	0x0538, r25	; 0x800538 <fastCtr1ms+0x1>
    1430:	a0 93 39 05 	sts	0x0539, r26	; 0x800539 <fastCtr1ms+0x2>
    1434:	b0 93 3a 05 	sts	0x053A, r27	; 0x80053a <fastCtr1ms+0x3>

	sei();													// since here we can accept interruptions
    1438:	78 94       	sei

	if (main_bf.mainStackCheck) {
    143a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    143e:	86 ff       	sbrs	r24, 6
    1440:	11 c0       	rjmp	.+34     	; 0x1464 <__vector_11+0x68>
		cli();
    1442:	f8 94       	cli
		uint8_t localStackLo = SPL;
    1444:	8d b7       	in	r24, 0x3d	; 61
		uint8_t localStackHi = SPH;
    1446:	2e b7       	in	r18, 0x3e	; 62
		sei();
    1448:	78 94       	sei

		uint16_t localStackAddr = (localStackHi << 8) | localStackLo;
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	92 2b       	or	r25, r18
		if (mainSCStackAddr > localStackAddr) {
    144e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <mainSCStackAddr>
    1452:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <mainSCStackAddr+0x1>
    1456:	82 17       	cp	r24, r18
    1458:	93 07       	cpc	r25, r19
    145a:	20 f4       	brcc	.+8      	; 0x1464 <__vector_11+0x68>
			mainSCStackAddr = localStackAddr;
    145c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <mainSCStackAddr+0x1>
    1460:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <mainSCStackAddr>
		}
	}
}
    1464:	bf 91       	pop	r27
    1466:	af 91       	pop	r26
    1468:	9f 91       	pop	r25
    146a:	8f 91       	pop	r24
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <__vector_10>:
 *
 * = 39 clocks --> 1.95 µs until sei() is done
 */
//void clkFastCtr_fw_ISR_T1_Capt() - __vector_10
ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	2f 93       	push	r18
    1486:	4f 93       	push	r20
    1488:	5f 93       	push	r21
    148a:	6f 93       	push	r22
    148c:	7f 93       	push	r23
    148e:	8f 93       	push	r24
    1490:	9f 93       	push	r25
    1492:	ef 93       	push	r30
    1494:	ff 93       	push	r31
	/* rising edge of the PPS signal from df4iah_fw_anlgComp.c detected */

	/* take the current timestamp of the free floating 20 MHz timer */
	register uint8_t  localICR1L = ICR1L;					// capture timer value - low byte first
    1496:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	register uint8_t  localICR1H = ICR1H;
    149a:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
	register uint32_t localFastCtr1ms = fastCtr1ms;
    149e:	40 91 37 05 	lds	r20, 0x0537	; 0x800537 <fastCtr1ms>
    14a2:	50 91 38 05 	lds	r21, 0x0538	; 0x800538 <fastCtr1ms+0x1>
    14a6:	60 91 39 05 	lds	r22, 0x0539	; 0x800539 <fastCtr1ms+0x2>
    14aa:	70 91 3a 05 	lds	r23, 0x053A	; 0x80053a <fastCtr1ms+0x3>

	sei();
    14ae:	78 94       	sei

	//anlgComp_fw_startAdcConvertion();
	ADCSRA |= _BV(ADSC);									// start conversion
    14b0:	ea e7       	ldi	r30, 0x7A	; 122
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	90 81       	ld	r25, Z
    14b6:	90 64       	ori	r25, 0x40	; 64
    14b8:	90 83       	st	Z, r25

	cli();
    14ba:	f8 94       	cli
	fastStampTCNT1  = localICR1L | (localICR1H << 8);
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	92 2b       	or	r25, r18
    14c0:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <fastStampTCNT1+0x1>
    14c4:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <fastStampTCNT1>
	fastStampCtr1ms = localFastCtr1ms;
    14c8:	40 93 3b 05 	sts	0x053B, r20	; 0x80053b <fastStampCtr1ms>
    14cc:	50 93 3c 05 	sts	0x053C, r21	; 0x80053c <fastStampCtr1ms+0x1>
    14d0:	60 93 3d 05 	sts	0x053D, r22	; 0x80053d <fastStampCtr1ms+0x2>
    14d4:	70 93 3e 05 	sts	0x053E, r23	; 0x80053e <fastStampCtr1ms+0x3>
	sei();
    14d8:	78 94       	sei
}
    14da:	ff 91       	pop	r31
    14dc:	ef 91       	pop	r30
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <clkPullPwm_fw_init>:


void clkPullPwm_fw_init(void)
{
	// power up this module
	PRR &= ~(_BV(PRTIM0));
    14f6:	e4 e6       	ldi	r30, 0x64	; 100
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8f 7d       	andi	r24, 0xDF	; 223
    14fe:	80 83       	st	Z, r24

	// set the timer-0 counter to zero.
	TCNT0 = 0x00;
    1500:	16 bc       	out	0x26, r1	; 38

	// set the timer-0 PWM-B compare register
	OCR0B = DEFAULT_PWM_COUNT;
    1502:	8a e5       	ldi	r24, 0x5A	; 90
    1504:	88 bd       	out	0x28, r24	; 40

	// set the timer-0 mode of operation: 0x3 = Fast PWM, counting up, TOP := MAX [. . WGM01 WGM00]
	// set the timer-0 compare-B waveform generator to: PWM, 1 at >= match, 0 else
	TCCR0A = (0b10<<COM0B0) | (0b11<<WGM00);
    1506:	83 e2       	ldi	r24, 0x23	; 35
    1508:	84 bd       	out	0x24, r24	; 36

	// set the timer-0 mode of operation: 0x3 = Fast PWM, counting up, TOP := MAX [WGM02 . .]
	// set the timer-0 clock source to 20 MHz XTAL.
	TCCR0B = (0b0<<WGM02) | (0b001<<CS00);
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	85 bd       	out	0x25, r24	; 37

	// set the timer-0 PWM-B compare output: setting data port for output
	DDR_OC0B_REG |= _BV(DDR_OC0B);
    150e:	55 9a       	sbi	0x0a, 5	; 10


	/* single memory access */
	if (memory_fw_isEepromBlockValid(BLOCK_REFOSC_NR)) {
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <memory_fw_isEepromBlockValid>
    1516:	88 23       	and	r24, r24
    1518:	c9 f0       	breq	.+50     	; 0x154c <clkPullPwm_fw_init+0x56>
		memory_fw_readEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial));
    151a:	4a e5       	ldi	r20, 0x5A	; 90
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	82 e4       	ldi	r24, 0x42	; 66
    1522:	95 e0       	ldi	r25, 0x05	; 5
    1524:	0e 94 c3 22 	call	0x4586	; 0x4586 <memory_fw_readEEpromPage>
		memory_fw_readEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial_sub, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial_sub));
    1528:	4b e5       	ldi	r20, 0x5B	; 91
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	81 e4       	ldi	r24, 0x41	; 65
    1530:	95 e0       	ldi	r25, 0x05	; 5
    1532:	0e 94 c3 22 	call	0x4586	; 0x4586 <memory_fw_readEEpromPage>

		uint8_t sreg = SREG;
    1536:	8f b7       	in	r24, 0x3f	; 63
		cli();
    1538:	f8 94       	cli
		fastPwmLoopVal		= pullCoef_b02_pwm_initial;
    153a:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pullCoef_b02_pwm_initial>
    153e:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <fastPwmLoopVal>
		fastPwmSubLoopVal	= pullCoef_b02_pwm_initial_sub;
    1542:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <pullCoef_b02_pwm_initial_sub>
    1546:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <fastPwmSubLoopVal>
		SREG = sreg;
    154a:	8f bf       	out	0x3f, r24	; 63
	}

	/* init interrupt */
	TIFR0  |= _BV(TOV0);
    154c:	a8 9a       	sbi	0x15, 0	; 21
	TIMSK0 |= _BV(TOIE0);
    154e:	ee e6       	ldi	r30, 0x6E	; 110
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	81 60       	ori	r24, 0x01	; 1
    1556:	80 83       	st	Z, r24
    1558:	08 95       	ret

0000155a <clkPullPwm_fw_close>:
}

void clkPullPwm_fw_close(void)
{
	/* disable interrupts */
	TIMSK0 = 0;
    155a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

	// reset timer-0 PWM-B compare output port
	DDR_OC0B_REG &= ~(_BV(DDR_OC0B));
    155e:	55 98       	cbi	0x0a, 5	; 10

	// stop timer-0
	TCCR0B = (0b00<<WGM02)  | (0b000<<CS00);
    1560:	15 bc       	out	0x25, r1	; 37

	// stop timer-0 compare output
	TCCR0A = (0b00<<COM0B0) | (0b00<<WGM00);
    1562:	14 bc       	out	0x24, r1	; 36

	// set the timer-0 compare-B value to zero.
	OCR0B = 0x00;
    1564:	18 bc       	out	0x28, r1	; 40

	// set the timer-0 counter to zero.
	TCNT0 = 0x00;
    1566:	16 bc       	out	0x26, r1	; 38

	// no more power is needed for this module
	PRR |= _BV(PRTIM0);
    1568:	e4 e6       	ldi	r30, 0x64	; 100
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 62       	ori	r24, 0x20	; 32
    1570:	80 83       	st	Z, r24
    1572:	08 95       	ret

00001574 <__vector_16>:
 *
 * = 13 clocks --> 0.65 µs until sei() is done
 */
//void clkPullPwm_fw_ISR_T0_OVF() - __vector_16
ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    1574:	1f 92       	push	r1
    1576:	0f 92       	push	r0
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	0f 92       	push	r0
    157c:	11 24       	eor	r1, r1
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
	sei();
    1582:	78 94       	sei

	/* minimal Sub-PWM value for its FAST_PWM_SUB_BITCNT */
	const uint8_t localSubPwmInc = (1 << (8 - FAST_PWM_SUB_BITCNT));

	if (fastPwmSingleLoad) {
    1584:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <fastPwmSingleLoad>
    1588:	88 23       	and	r24, r24
    158a:	61 f0       	breq	.+24     	; 0x15a4 <__vector_16+0x30>
		cli();
    158c:	f8 94       	cli
		OCR0B			= fastPwmSingleVal;
    158e:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <fastPwmSingleVal>
    1592:	88 bd       	out	0x28, r24	; 40
		fastPwmSubCmp	= fastPwmSubSingleVal;
    1594:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <fastPwmSubSingleVal>
    1598:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <fastPwmSubCmp>
		sei();
    159c:	78 94       	sei

		/* single value loaded */
		fastPwmSingleLoad = 0;
    159e:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <fastPwmSingleLoad>
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <__vector_16+0x42>

	} else {
		/* set the T0 compare B register with the current setting of the integer PWM value */
		cli();
    15a4:	f8 94       	cli
		OCR0B			= fastPwmLoopVal;
    15a6:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <fastPwmLoopVal>
    15aa:	88 bd       	out	0x28, r24	; 40
		fastPwmSubCmp	= fastPwmSubLoopVal;
    15ac:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <fastPwmSubLoopVal>
    15b0:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <fastPwmSubCmp>
		sei();
    15b4:	78 94       	sei
	}

	/* increment if counter is lower than the sub-compare value to get a Sub-PWM (fractional part) */
	cli();
    15b6:	f8 94       	cli
	if (fastPwmSubCnt < fastPwmSubCmp) {
    15b8:	90 91 30 05 	lds	r25, 0x0530	; 0x800530 <fastPwmSubCnt>
    15bc:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <fastPwmSubCmp>
    15c0:	98 17       	cp	r25, r24
    15c2:	18 f4       	brcc	.+6      	; 0x15ca <__vector_16+0x56>
		OCR0B++;
    15c4:	88 b5       	in	r24, 0x28	; 40
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	88 bd       	out	0x28, r24	; 40
	}
	sei();
    15ca:	78 94       	sei

	/* sub-counter increment */
	fastPwmSubCnt += localSubPwmInc;						// overflowing is intended
    15cc:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <fastPwmSubCnt>
    15d0:	8f 5f       	subi	r24, 0xFF	; 255
    15d2:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <fastPwmSubCnt>
}
    15d6:	9f 91       	pop	r25
    15d8:	8f 91       	pop	r24
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0
    15e0:	1f 90       	pop	r1
    15e2:	18 95       	reti

000015e4 <recalcEepromCrc>:

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
}
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <recalcEepromCrc+0xc>
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	18 2f       	mov	r17, r24
    15f6:	7b 01       	movw	r14, r22
    15f8:	0e 94 8b 22 	call	0x4516	; 0x4516 <memory_fw_getSealMarker>
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	a7 01       	movw	r20, r14
    1602:	62 e0       	ldi	r22, 0x02	; 2
    1604:	ce 01       	movw	r24, r28
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	0e 94 2a 23 	call	0x4654	; 0x4654 <memory_fw_writeEEpromPage>
    160c:	81 2f       	mov	r24, r17
    160e:	0e 94 88 23 	call	0x4710	; 0x4710 <memory_fw_manageBlock>
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	08 95       	ret

00001622 <__vector_6>:
    1622:	18 95       	reti

00001624 <main_fw_calcTimerAdj>:

float main_fw_calcTimerAdj(float pwmAdjust, uint8_t* intVal, uint8_t* intSubVal)
{
    1624:	4f 92       	push	r4
    1626:	5f 92       	push	r5
    1628:	6f 92       	push	r6
    162a:	7f 92       	push	r7
    162c:	8f 92       	push	r8
    162e:	9f 92       	push	r9
    1630:	af 92       	push	r10
    1632:	bf 92       	push	r11
    1634:	cf 92       	push	r12
    1636:	df 92       	push	r13
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	4b 01       	movw	r8, r22
    1646:	5c 01       	movw	r10, r24
    1648:	7a 01       	movw	r14, r20
    164a:	69 01       	movw	r12, r18
}

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    164c:	fa 01       	movw	r30, r20
    164e:	60 81       	ld	r22, Z
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    165a:	2b 01       	movw	r4, r22
    165c:	3c 01       	movw	r6, r24
    165e:	f6 01       	movw	r30, r12
    1660:	60 81       	ld	r22, Z
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e8       	ldi	r20, 0x80	; 128
    1672:	5b e3       	ldi	r21, 0x3B	; 59
    1674:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    1678:	9b 01       	movw	r18, r22
    167a:	ac 01       	movw	r20, r24
    167c:	c3 01       	movw	r24, r6
    167e:	b2 01       	movw	r22, r4
    1680:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    1684:	9b 01       	movw	r18, r22
    1686:	ac 01       	movw	r20, r24
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
	const float maxLimit = 255.0f - (1.0f / (1 << FAST_PWM_SUB_BITCNT));	// NOT 256.0f due to the compare unit that catches not around the overflow value

	/* add the time offset to the current PWM settings */
	fltTime += pwmAdjust;
    1688:	c5 01       	movw	r24, r10
    168a:	b4 01       	movw	r22, r8
    168c:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    1690:	06 2f       	mov	r16, r22
    1692:	d7 2f       	mov	r29, r23
    1694:	c8 2f       	mov	r28, r24
    1696:	19 2f       	mov	r17, r25

	/* windowing the next value into the 8-Bit range */
	if (fltTime < 0.0f) {
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	a9 01       	movw	r20, r18
    169e:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    16a2:	88 23       	and	r24, r24
    16a4:	fc f0       	brlt	.+62     	; 0x16e4 <main_fw_calcTimerAdj+0xc0>
		residue = fltTime;
		fltTime = 0.0f;

	} else if (fltTime > maxLimit) {
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	3f ef       	ldi	r19, 0xFF	; 255
    16aa:	4e e7       	ldi	r20, 0x7E	; 126
    16ac:	53 e4       	ldi	r21, 0x43	; 67
    16ae:	60 2f       	mov	r22, r16
    16b0:	7d 2f       	mov	r23, r29
    16b2:	8c 2f       	mov	r24, r28
    16b4:	91 2f       	mov	r25, r17
    16b6:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__gesf2>
    16ba:	18 16       	cp	r1, r24
    16bc:	e4 f4       	brge	.+56     	; 0x16f6 <main_fw_calcTimerAdj+0xd2>
		residue = fltTime - maxLimit;
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	3f ef       	ldi	r19, 0xFF	; 255
    16c2:	4e e7       	ldi	r20, 0x7E	; 126
    16c4:	53 e4       	ldi	r21, 0x43	; 67
    16c6:	60 2f       	mov	r22, r16
    16c8:	7d 2f       	mov	r23, r29
    16ca:	8c 2f       	mov	r24, r28
    16cc:	91 2f       	mov	r25, r17
    16ce:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    16d2:	96 2e       	mov	r9, r22
    16d4:	a7 2e       	mov	r10, r23
    16d6:	b8 2e       	mov	r11, r24
    16d8:	89 2e       	mov	r8, r25
		fltTime = maxLimit;
    16da:	00 e0       	ldi	r16, 0x00	; 0
    16dc:	df ef       	ldi	r29, 0xFF	; 255
    16de:	ce e7       	ldi	r28, 0x7E	; 126
    16e0:	13 e4       	ldi	r17, 0x43	; 67
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <main_fw_calcTimerAdj+0xda>
	/* add the time offset to the current PWM settings */
	fltTime += pwmAdjust;

	/* windowing the next value into the 8-Bit range */
	if (fltTime < 0.0f) {
		residue = fltTime;
    16e4:	90 2e       	mov	r9, r16
    16e6:	ad 2e       	mov	r10, r29
    16e8:	bc 2e       	mov	r11, r28
    16ea:	81 2e       	mov	r8, r17
		fltTime = 0.0f;
    16ec:	00 e0       	ldi	r16, 0x00	; 0
    16ee:	d0 e0       	ldi	r29, 0x00	; 0
    16f0:	c0 e0       	ldi	r28, 0x00	; 0
    16f2:	10 e0       	ldi	r17, 0x00	; 0
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <main_fw_calcTimerAdj+0xda>
}

float main_fw_calcTimerAdj(float pwmAdjust, uint8_t* intVal, uint8_t* intSubVal)
{
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
    16f6:	91 2c       	mov	r9, r1
    16f8:	a1 2c       	mov	r10, r1
    16fa:	b1 2c       	mov	r11, r1
    16fc:	81 2c       	mov	r8, r1
		residue = fltTime - maxLimit;
		fltTime = maxLimit;
	}

	/* add rounding value */
	fltTime += 1.0f / 512.0f;
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	5b e3       	ldi	r21, 0x3B	; 59
    1706:	60 2f       	mov	r22, r16
    1708:	7d 2f       	mov	r23, r29
    170a:	8c 2f       	mov	r24, r28
    170c:	91 2f       	mov	r25, r17
    170e:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    1712:	2b 01       	movw	r4, r22
    1714:	3c 01       	movw	r6, r24

	/* break up into integer and fractional parts */
	*intVal		= (uint8_t) fltTime;
    1716:	0e 94 9d 30 	call	0x613a	; 0x613a <__fixunssfsi>
    171a:	f7 01       	movw	r30, r14
    171c:	60 83       	st	Z, r22
	*intSubVal	= (uint8_t) ((fltTime - floorf(fltTime)) * 256.0f);
    171e:	c3 01       	movw	r24, r6
    1720:	b2 01       	movw	r22, r4
    1722:	0e 94 09 31 	call	0x6212	; 0x6212 <floor>
    1726:	9b 01       	movw	r18, r22
    1728:	ac 01       	movw	r20, r24
    172a:	c3 01       	movw	r24, r6
    172c:	b2 01       	movw	r22, r4
    172e:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	53 e4       	ldi	r21, 0x43	; 67
    173a:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    173e:	0e 94 9d 30 	call	0x613a	; 0x613a <__fixunssfsi>
    1742:	f6 01       	movw	r30, r12
    1744:	60 83       	st	Z, r22
	return residue;
}
    1746:	69 2d       	mov	r22, r9
    1748:	7a 2d       	mov	r23, r10
    174a:	8b 2d       	mov	r24, r11
    174c:	98 2d       	mov	r25, r8
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	ff 90       	pop	r15
    1758:	ef 90       	pop	r14
    175a:	df 90       	pop	r13
    175c:	cf 90       	pop	r12
    175e:	bf 90       	pop	r11
    1760:	af 90       	pop	r10
    1762:	9f 90       	pop	r9
    1764:	8f 90       	pop	r8
    1766:	7f 90       	pop	r7
    1768:	6f 90       	pop	r6
    176a:	5f 90       	pop	r5
    176c:	4f 90       	pop	r4
    176e:	08 95       	ret

00001770 <pwmTimerCorrection>:
		holdOffTime = 0;
	}
}

static float pwmTimerCorrection(float correction, uint8_t doSingleLoad)
{
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	00 d0       	rcall	.+0      	; 0x1782 <pwmTimerCorrection+0x12>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	6b 01       	movw	r12, r22
    1788:	7c 01       	movw	r14, r24
    178a:	14 2f       	mov	r17, r20
	float ret = 0.0f;

	if (correction) {
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	a9 01       	movw	r20, r18
    1792:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    1796:	88 23       	and	r24, r24
    1798:	41 f1       	breq	.+80     	; 0x17ea <pwmTimerCorrection+0x7a>
		uint8_t localFastPwmXXXVal;
		uint8_t localFastPwmSubXXXVal;

		uint8_t sreg = SREG;
    179a:	0f b7       	in	r16, 0x3f	; 63
		cli();
    179c:	f8 94       	cli
		localFastPwmXXXVal		= fastPwmLoopVal;
    179e:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <fastPwmLoopVal>
    17a2:	8a 83       	std	Y+2, r24	; 0x02
		localFastPwmSubXXXVal	= fastPwmSubLoopVal;
    17a4:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <fastPwmSubLoopVal>
    17a8:	89 83       	std	Y+1, r24	; 0x01
		SREG = sreg;
    17aa:	0f bf       	out	0x3f, r16	; 63

		ret =  main_fw_calcTimerAdj(correction, &localFastPwmXXXVal, &localFastPwmSubXXXVal);
    17ac:	9e 01       	movw	r18, r28
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	ae 01       	movw	r20, r28
    17b4:	4e 5f       	subi	r20, 0xFE	; 254
    17b6:	5f 4f       	sbci	r21, 0xFF	; 255
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	0e 94 12 0b 	call	0x1624	; 0x1624 <main_fw_calcTimerAdj>

		cli();
    17c0:	f8 94       	cli
		if (!doSingleLoad) {
    17c2:	11 11       	cpse	r17, r1
    17c4:	07 c0       	rjmp	.+14     	; 0x17d4 <pwmTimerCorrection+0x64>
			fastPwmLoopVal		= localFastPwmXXXVal;			// single frequency correction
    17c6:	2a 81       	ldd	r18, Y+2	; 0x02
    17c8:	20 93 36 05 	sts	0x0536, r18	; 0x800536 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubXXXVal;
    17cc:	29 81       	ldd	r18, Y+1	; 0x01
    17ce:	20 93 35 05 	sts	0x0535, r18	; 0x800535 <fastPwmSubLoopVal>
    17d2:	09 c0       	rjmp	.+18     	; 0x17e6 <pwmTimerCorrection+0x76>

		} else {
			fastPwmSingleVal	= localFastPwmXXXVal;			// phase hammering correction
    17d4:	2a 81       	ldd	r18, Y+2	; 0x02
    17d6:	20 93 33 05 	sts	0x0533, r18	; 0x800533 <fastPwmSingleVal>
			fastPwmSubSingleVal	= localFastPwmSubXXXVal;
    17da:	29 81       	ldd	r18, Y+1	; 0x01
    17dc:	20 93 32 05 	sts	0x0532, r18	; 0x800532 <fastPwmSubSingleVal>
			fastPwmSingleLoad	= true;
    17e0:	21 e0       	ldi	r18, 0x01	; 1
    17e2:	20 93 34 05 	sts	0x0534, r18	; 0x800534 <fastPwmSingleLoad>
		}
		SREG = sreg;
    17e6:	0f bf       	out	0x3f, r16	; 63
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <pwmTimerCorrection+0x80>
	}
}

static float pwmTimerCorrection(float correction, uint8_t doSingleLoad)
{
	float ret = 0.0f;
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	cb 01       	movw	r24, r22
		}
		SREG = sreg;
	}

	return ret;
}
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	df 90       	pop	r13
    1802:	cf 90       	pop	r12
    1804:	08 95       	ret

00001806 <calcPhaseResidue>:

static void calcPhaseResidue(void)
{
    1806:	cf 92       	push	r12
    1808:	df 92       	push	r13
    180a:	ef 92       	push	r14
    180c:	ff 92       	push	r15
    180e:	cf 93       	push	r28
	uint8_t localFastPwmSingleLoad;

	uint8_t sreg = SREG;
    1810:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1812:	f8 94       	cli
	localFastPwmSingleLoad = fastPwmSingleLoad;
    1814:	c0 91 34 05 	lds	r28, 0x0534	; 0x800534 <fastPwmSingleLoad>
	SREG = sreg;
    1818:	8f bf       	out	0x3f, r24	; 63

	if (fastPwmSingleDiffSum && (!localFastPwmSingleLoad)) {  // enter only if an offset is accumulated and the last phase correction is loaded
    181a:	c0 90 2c 05 	lds	r12, 0x052C	; 0x80052c <fastPwmSingleDiffSum>
    181e:	d0 90 2d 05 	lds	r13, 0x052D	; 0x80052d <fastPwmSingleDiffSum+0x1>
    1822:	e0 90 2e 05 	lds	r14, 0x052E	; 0x80052e <fastPwmSingleDiffSum+0x2>
    1826:	f0 90 2f 05 	lds	r15, 0x052F	; 0x80052f <fastPwmSingleDiffSum+0x3>
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	a9 01       	movw	r20, r18
    1830:	c7 01       	movw	r24, r14
    1832:	b6 01       	movw	r22, r12
    1834:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    1838:	88 23       	and	r24, r24
    183a:	79 f0       	breq	.+30     	; 0x185a <calcPhaseResidue+0x54>
    183c:	c1 11       	cpse	r28, r1
    183e:	0d c0       	rjmp	.+26     	; 0x185a <calcPhaseResidue+0x54>
		/* Calculate and execute phase correction */
		fastPwmSingleDiffSum = pwmTimerCorrection(fastPwmSingleDiffSum, true);
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	c7 01       	movw	r24, r14
    1844:	b6 01       	movw	r22, r12
    1846:	0e 94 b8 0b 	call	0x1770	; 0x1770 <pwmTimerCorrection>
    184a:	60 93 2c 05 	sts	0x052C, r22	; 0x80052c <fastPwmSingleDiffSum>
    184e:	70 93 2d 05 	sts	0x052D, r23	; 0x80052d <fastPwmSingleDiffSum+0x1>
    1852:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <fastPwmSingleDiffSum+0x2>
    1856:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <fastPwmSingleDiffSum+0x3>
	}
}
    185a:	cf 91       	pop	r28
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	cf 90       	pop	r12
    1864:	08 95       	ret

00001866 <main_fw_strncmp>:
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
	}
}

int main_fw_strncmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	8c 01       	movw	r16, r24
    1870:	ea 01       	movw	r28, r20
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
    1872:	9a 01       	movw	r18, r20
    1874:	ab 01       	movw	r20, r22
    1876:	6f e8       	ldi	r22, 0x8F	; 143
    1878:	73 e0       	ldi	r23, 0x03	; 3
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
	return strncmp((const char*) msg, (const char*) mainFormatBuffer, size);
    1880:	ae 01       	movw	r20, r28
    1882:	6f e8       	ldi	r22, 0x8F	; 143
    1884:	73 e0       	ldi	r23, 0x03	; 3
    1886:	c8 01       	movw	r24, r16
    1888:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <strncmp>
}
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	08 95       	ret

00001896 <main_fw_memcmp>:

int main_fw_memcmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	8c 01       	movw	r16, r24
    18a0:	ea 01       	movw	r28, r20
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
    18a2:	9a 01       	movw	r18, r20
    18a4:	ab 01       	movw	r20, r22
    18a6:	6f e8       	ldi	r22, 0x8F	; 143
    18a8:	73 e0       	ldi	r23, 0x03	; 3
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
	return memcmp((const char*) msg, (const char*) mainFormatBuffer, size);
    18b0:	ae 01       	movw	r20, r28
    18b2:	6f e8       	ldi	r22, 0x8F	; 143
    18b4:	73 e0       	ldi	r23, 0x03	; 3
    18b6:	c8 01       	movw	r24, r16
    18b8:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <memcmp>
}
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	08 95       	ret

000018c6 <main_fw_nmeaUtcPlusOneSec>:

void main_fw_nmeaUtcPlusOneSec(void) {
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
	++main_nmeaTimeUtcInt;
    18ce:	c0 90 55 05 	lds	r12, 0x0555	; 0x800555 <main_nmeaTimeUtcInt>
    18d2:	d0 90 56 05 	lds	r13, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    18d6:	e0 90 57 05 	lds	r14, 0x0557	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    18da:	f0 90 58 05 	lds	r15, 0x0558	; 0x800558 <main_nmeaTimeUtcInt+0x3>
    18de:	2f ef       	ldi	r18, 0xFF	; 255
    18e0:	c2 1a       	sub	r12, r18
    18e2:	d2 0a       	sbc	r13, r18
    18e4:	e2 0a       	sbc	r14, r18
    18e6:	f2 0a       	sbc	r15, r18

	if ((main_nmeaTimeUtcInt % 100) > 59) {
    18e8:	c7 01       	movw	r24, r14
    18ea:	b6 01       	movw	r22, r12
    18ec:	24 e6       	ldi	r18, 0x64	; 100
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
    18f8:	6c 33       	cpi	r22, 0x3C	; 60
    18fa:	71 05       	cpc	r23, r1
    18fc:	81 05       	cpc	r24, r1
    18fe:	91 05       	cpc	r25, r1
    1900:	4c f4       	brge	.+18     	; 0x1914 <main_fw_nmeaUtcPlusOneSec+0x4e>
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
	return memcmp((const char*) msg, (const char*) mainFormatBuffer, size);
}

void main_fw_nmeaUtcPlusOneSec(void) {
	++main_nmeaTimeUtcInt;
    1902:	c0 92 55 05 	sts	0x0555, r12	; 0x800555 <main_nmeaTimeUtcInt>
    1906:	d0 92 56 05 	sts	0x0556, r13	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    190a:	e0 92 57 05 	sts	0x0557, r14	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    190e:	f0 92 58 05 	sts	0x0558, r15	; 0x800558 <main_nmeaTimeUtcInt+0x3>
    1912:	11 c0       	rjmp	.+34     	; 0x1936 <main_fw_nmeaUtcPlusOneSec+0x70>

	if ((main_nmeaTimeUtcInt % 100) > 59) {
		main_nmeaTimeUtcInt -= main_nmeaTimeUtcInt % 100;
    1914:	c6 1a       	sub	r12, r22
    1916:	d7 0a       	sbc	r13, r23
    1918:	e8 0a       	sbc	r14, r24
    191a:	f9 0a       	sbc	r15, r25
		main_nmeaTimeUtcInt += 100;
    191c:	84 e6       	ldi	r24, 0x64	; 100
    191e:	c8 0e       	add	r12, r24
    1920:	d1 1c       	adc	r13, r1
    1922:	e1 1c       	adc	r14, r1
    1924:	f1 1c       	adc	r15, r1
    1926:	c0 92 55 05 	sts	0x0555, r12	; 0x800555 <main_nmeaTimeUtcInt>
    192a:	d0 92 56 05 	sts	0x0556, r13	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    192e:	e0 92 57 05 	sts	0x0557, r14	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    1932:	f0 92 58 05 	sts	0x0558, r15	; 0x800558 <main_nmeaTimeUtcInt+0x3>
	}

	if ((main_nmeaTimeUtcInt % 10000) > 5959) {
    1936:	c0 90 55 05 	lds	r12, 0x0555	; 0x800555 <main_nmeaTimeUtcInt>
    193a:	d0 90 56 05 	lds	r13, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    193e:	e0 90 57 05 	lds	r14, 0x0557	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    1942:	f0 90 58 05 	lds	r15, 0x0558	; 0x800558 <main_nmeaTimeUtcInt+0x3>
    1946:	c7 01       	movw	r24, r14
    1948:	b6 01       	movw	r22, r12
    194a:	20 e1       	ldi	r18, 0x10	; 16
    194c:	37 e2       	ldi	r19, 0x27	; 39
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
    1956:	68 34       	cpi	r22, 0x48	; 72
    1958:	27 e1       	ldi	r18, 0x17	; 23
    195a:	72 07       	cpc	r23, r18
    195c:	81 05       	cpc	r24, r1
    195e:	91 05       	cpc	r25, r1
    1960:	94 f0       	brlt	.+36     	; 0x1986 <main_fw_nmeaUtcPlusOneSec+0xc0>
		main_nmeaTimeUtcInt -= (main_nmeaTimeUtcInt % 10000)  /* - (main_nmeaTimeUtcSec % 100) */ ;  // with +1 this can be cut out
    1962:	c6 1a       	sub	r12, r22
    1964:	d7 0a       	sbc	r13, r23
    1966:	e8 0a       	sbc	r14, r24
    1968:	f9 0a       	sbc	r15, r25
		main_nmeaTimeUtcInt +=  10000;
    196a:	80 e1       	ldi	r24, 0x10	; 16
    196c:	c8 0e       	add	r12, r24
    196e:	87 e2       	ldi	r24, 0x27	; 39
    1970:	d8 1e       	adc	r13, r24
    1972:	e1 1c       	adc	r14, r1
    1974:	f1 1c       	adc	r15, r1
    1976:	c0 92 55 05 	sts	0x0555, r12	; 0x800555 <main_nmeaTimeUtcInt>
    197a:	d0 92 56 05 	sts	0x0556, r13	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    197e:	e0 92 57 05 	sts	0x0557, r14	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    1982:	f0 92 58 05 	sts	0x0558, r15	; 0x800558 <main_nmeaTimeUtcInt+0x3>
	}
}
    1986:	ff 90       	pop	r15
    1988:	ef 90       	pop	r14
    198a:	df 90       	pop	r13
    198c:	cf 90       	pop	r12
    198e:	08 95       	ret

00001990 <main_fw_parseNmeaLineData>:

void main_fw_parseNmeaLineData(void) {
    1990:	8f 92       	push	r8
    1992:	9f 92       	push	r9
    1994:	af 92       	push	r10
    1996:	bf 92       	push	r11
    1998:	cf 92       	push	r12
    199a:	df 92       	push	r13
    199c:	ef 92       	push	r14
    199e:	ff 92       	push	r15
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG01, sizeof(PM_PARSE_NMEA_MSG01));
    19a8:	2d e3       	ldi	r18, 0x3D	; 61
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	48 e1       	ldi	r20, 0x18	; 24
    19ae:	53 e0       	ldi	r21, 0x03	; 3
    19b0:	6f e8       	ldi	r22, 0x8F	; 143
    19b2:	73 e0       	ldi	r23, 0x03	; 3
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
	int len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    19ba:	83 e4       	ldi	r24, 0x43	; 67
    19bc:	95 e0       	ldi	r25, 0x05	; 5
    19be:	9f 93       	push	r25
    19c0:	8f 93       	push	r24
    19c2:	85 e4       	ldi	r24, 0x45	; 69
    19c4:	95 e0       	ldi	r25, 0x05	; 5
    19c6:	9f 93       	push	r25
    19c8:	8f 93       	push	r24
    19ca:	81 e6       	ldi	r24, 0x61	; 97
    19cc:	95 e0       	ldi	r25, 0x05	; 5
    19ce:	9f 93       	push	r25
    19d0:	8f 93       	push	r24
    19d2:	89 e6       	ldi	r24, 0x69	; 105
    19d4:	95 e0       	ldi	r25, 0x05	; 5
    19d6:	9f 93       	push	r25
    19d8:	8f 93       	push	r24
    19da:	8f e6       	ldi	r24, 0x6F	; 111
    19dc:	95 e0       	ldi	r25, 0x05	; 5
    19de:	9f 93       	push	r25
    19e0:	8f 93       	push	r24
    19e2:	89 e4       	ldi	r24, 0x49	; 73
    19e4:	95 e0       	ldi	r25, 0x05	; 5
    19e6:	9f 93       	push	r25
    19e8:	8f 93       	push	r24
    19ea:	8a e4       	ldi	r24, 0x4A	; 74
    19ec:	95 e0       	ldi	r25, 0x05	; 5
    19ee:	9f 93       	push	r25
    19f0:	8f 93       	push	r24
    19f2:	8e e4       	ldi	r24, 0x4E	; 78
    19f4:	95 e0       	ldi	r25, 0x05	; 5
    19f6:	9f 93       	push	r25
    19f8:	8f 93       	push	r24
    19fa:	8f e4       	ldi	r24, 0x4F	; 79
    19fc:	95 e0       	ldi	r25, 0x05	; 5
    19fe:	9f 93       	push	r25
    1a00:	8f 93       	push	r24
    1a02:	83 e5       	ldi	r24, 0x53	; 83
    1a04:	95 e0       	ldi	r25, 0x05	; 5
    1a06:	9f 93       	push	r25
    1a08:	8f 93       	push	r24
    1a0a:	85 e5       	ldi	r24, 0x55	; 85
    1a0c:	95 e0       	ldi	r25, 0x05	; 5
    1a0e:	9f 93       	push	r25
    1a10:	8f 93       	push	r24
    1a12:	0f e8       	ldi	r16, 0x8F	; 143
    1a14:	13 e0       	ldi	r17, 0x03	; 3
    1a16:	1f 93       	push	r17
    1a18:	0f 93       	push	r16
    1a1a:	c1 e1       	ldi	r28, 0x11	; 17
    1a1c:	d2 e0       	ldi	r29, 0x02	; 2
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <sscanf>
			&main_nmeaSatsUsed,
			&main_nmeaHdop,
			&main_nmeaAltitudeM,
			&main_checksum);

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG11, sizeof(PM_PARSE_NMEA_MSG11));
    1a26:	2f e0       	ldi	r18, 0x0F	; 15
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	49 e0       	ldi	r20, 0x09	; 9
    1a2c:	53 e0       	ldi	r21, 0x03	; 3
    1a2e:	b8 01       	movw	r22, r16
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1a36:	81 e7       	ldi	r24, 0x71	; 113
    1a38:	95 e0       	ldi	r25, 0x05	; 5
    1a3a:	9f 93       	push	r25
    1a3c:	8f 93       	push	r24
    1a3e:	1f 93       	push	r17
    1a40:	0f 93       	push	r16
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <sscanf>
			&main_nmeaMode2);
	if (len > 0) {
    1a4a:	2d b7       	in	r18, 0x3d	; 61
    1a4c:	3e b7       	in	r19, 0x3e	; 62
    1a4e:	20 5e       	subi	r18, 0xE0	; 224
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	3e bf       	out	0x3e, r19	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	2d bf       	out	0x3d, r18	; 61
    1a5c:	18 16       	cp	r1, r24
    1a5e:	19 06       	cpc	r1, r25
    1a60:	0c f0       	brlt	.+2      	; 0x1a64 <main_fw_parseNmeaLineData+0xd4>
    1a62:	66 c0       	rjmp	.+204    	; 0x1b30 <main_fw_parseNmeaLineData+0x1a0>
		main_fw_nmeaUtcPlusOneSec();
    1a64:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <main_fw_nmeaUtcPlusOneSec>

		if ((main_nmeaMode2 < 2) || (3 < main_nmeaMode2)) {
    1a68:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <main_nmeaMode2>
    1a6c:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <main_nmeaMode2+0x1>
    1a70:	02 97       	sbiw	r24, 0x02	; 2
    1a72:	02 97       	sbiw	r24, 0x02	; 2
    1a74:	20 f0       	brcs	.+8      	; 0x1a7e <main_fw_parseNmeaLineData+0xee>
			main_nmeaMode2 = 0;
    1a76:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <main_nmeaMode2+0x1>
    1a7a:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <main_nmeaMode2>
		}

		int ofs = 0, commaCnt = 0;
		for (int idx = serialCtxtRxBufferLen - 1; idx; --idx) {
    1a7e:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <serialCtxtRxBufferLen>
    1a82:	ce 2f       	mov	r28, r30
    1a84:	d0 e0       	ldi	r29, 0x00	; 0
    1a86:	21 97       	sbiw	r28, 0x01	; 1
    1a88:	39 f1       	breq	.+78     	; 0x1ad8 <main_fw_parseNmeaLineData+0x148>
			if (serialCtxtRxBuffer[idx] == '*') {
    1a8a:	de 01       	movw	r26, r28
    1a8c:	af 5e       	subi	r26, 0xEF	; 239
    1a8e:	bd 4f       	sbci	r27, 0xFD	; 253
    1a90:	8c 91       	ld	r24, X
    1a92:	8a 32       	cpi	r24, 0x2A	; 42
    1a94:	41 f4       	brne	.+16     	; 0x1aa6 <main_fw_parseNmeaLineData+0x116>
    1a96:	03 c0       	rjmp	.+6      	; 0x1a9e <main_fw_parseNmeaLineData+0x10e>
    1a98:	82 91       	ld	r24, -Z
    1a9a:	8a 32       	cpi	r24, 0x2A	; 42
    1a9c:	39 f4       	brne	.+14     	; 0x1aac <main_fw_parseNmeaLineData+0x11c>
				ofs = idx;
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1a9e:	1c 16       	cp	r1, r28
    1aa0:	1d 06       	cpc	r1, r29
    1aa2:	3c f0       	brlt	.+14     	; 0x1ab2 <main_fw_parseNmeaLineData+0x122>
    1aa4:	19 c0       	rjmp	.+50     	; 0x1ad8 <main_fw_parseNmeaLineData+0x148>
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	e0 5f       	subi	r30, 0xF0	; 240
    1aaa:	fd 4f       	sbci	r31, 0xFD	; 253
		if ((main_nmeaMode2 < 2) || (3 < main_nmeaMode2)) {
			main_nmeaMode2 = 0;
		}

		int ofs = 0, commaCnt = 0;
		for (int idx = serialCtxtRxBufferLen - 1; idx; --idx) {
    1aac:	21 97       	sbiw	r28, 0x01	; 1
    1aae:	a1 f7       	brne	.-24     	; 0x1a98 <main_fw_parseNmeaLineData+0x108>
    1ab0:	13 c0       	rjmp	.+38     	; 0x1ad8 <main_fw_parseNmeaLineData+0x148>
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	ee 5e       	subi	r30, 0xEE	; 238
    1ab6:	fd 4f       	sbci	r31, 0xFD	; 253
			if (serialCtxtRxBuffer[idx] == '*') {
				ofs = idx;
    1ab8:	ce 01       	movw	r24, r28
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
			if (serialCtxtRxBuffer[idx] == ',') {
    1abe:	22 91       	ld	r18, -Z
    1ac0:	2c 32       	cpi	r18, 0x2C	; 44
    1ac2:	41 f4       	brne	.+16     	; 0x1ad4 <main_fw_parseNmeaLineData+0x144>
				if (++commaCnt == 3) {
    1ac4:	4f 5f       	subi	r20, 0xFF	; 255
    1ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac8:	43 30       	cpi	r20, 0x03	; 3
    1aca:	51 05       	cpc	r21, r1
    1acc:	19 f4       	brne	.+6      	; 0x1ad4 <main_fw_parseNmeaLineData+0x144>
					ofs = ++idx;
    1ace:	ec 01       	movw	r28, r24
    1ad0:	21 96       	adiw	r28, 0x01	; 1
					break;
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <main_fw_parseNmeaLineData+0x148>
			if (serialCtxtRxBuffer[idx] == '*') {
				ofs = idx;
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	99 f7       	brne	.-26     	; 0x1abe <main_fw_parseNmeaLineData+0x12e>
					ofs = ++idx;
					break;
				}
			}
		}
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG12, sizeof(PM_PARSE_NMEA_MSG12));
    1ad8:	2c e0       	ldi	r18, 0x0C	; 12
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	4d ef       	ldi	r20, 0xFD	; 253
    1ade:	52 e0       	ldi	r21, 0x02	; 2
    1ae0:	6f e8       	ldi	r22, 0x8F	; 143
    1ae2:	73 e0       	ldi	r23, 0x03	; 3
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		sscanf((char*) serialCtxtRxBuffer + ofs, (char*) mainFormatBuffer,
    1aea:	83 e4       	ldi	r24, 0x43	; 67
    1aec:	95 e0       	ldi	r25, 0x05	; 5
    1aee:	9f 93       	push	r25
    1af0:	8f 93       	push	r24
    1af2:	8d e5       	ldi	r24, 0x5D	; 93
    1af4:	95 e0       	ldi	r25, 0x05	; 5
    1af6:	9f 93       	push	r25
    1af8:	8f 93       	push	r24
    1afa:	81 e6       	ldi	r24, 0x61	; 97
    1afc:	95 e0       	ldi	r25, 0x05	; 5
    1afe:	9f 93       	push	r25
    1b00:	8f 93       	push	r24
    1b02:	85 e6       	ldi	r24, 0x65	; 101
    1b04:	95 e0       	ldi	r25, 0x05	; 5
    1b06:	9f 93       	push	r25
    1b08:	8f 93       	push	r24
    1b0a:	8f e8       	ldi	r24, 0x8F	; 143
    1b0c:	93 e0       	ldi	r25, 0x03	; 3
    1b0e:	9f 93       	push	r25
    1b10:	8f 93       	push	r24
    1b12:	cf 5e       	subi	r28, 0xEF	; 239
    1b14:	dd 4f       	sbci	r29, 0xFD	; 253
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <sscanf>
    1b1e:	2d b7       	in	r18, 0x3d	; 61
    1b20:	3e b7       	in	r19, 0x3e	; 62
    1b22:	24 5f       	subi	r18, 0xF4	; 244
    1b24:	3f 4f       	sbci	r19, 0xFF	; 255
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	3e bf       	out	0x3e, r19	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	2d bf       	out	0x3d, r18	; 61
				&main_nmeaHdop,
				&main_nmeaVdop,
				&main_checksum);
	}

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG21, sizeof(PM_PARSE_NMEA_MSG21));
    1b30:	23 e3       	ldi	r18, 0x33	; 51
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	4a ec       	ldi	r20, 0xCA	; 202
    1b36:	52 e0       	ldi	r21, 0x02	; 2
    1b38:	6f e8       	ldi	r22, 0x8F	; 143
    1b3a:	73 e0       	ldi	r23, 0x03	; 3
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1b42:	83 e4       	ldi	r24, 0x43	; 67
    1b44:	95 e0       	ldi	r25, 0x05	; 5
    1b46:	9f 93       	push	r25
    1b48:	8f 93       	push	r24
    1b4a:	89 e5       	ldi	r24, 0x59	; 89
    1b4c:	95 e0       	ldi	r25, 0x05	; 5
    1b4e:	9f 93       	push	r25
    1b50:	8f 93       	push	r24
    1b52:	89 e4       	ldi	r24, 0x49	; 73
    1b54:	95 e0       	ldi	r25, 0x05	; 5
    1b56:	9f 93       	push	r25
    1b58:	8f 93       	push	r24
    1b5a:	8a e4       	ldi	r24, 0x4A	; 74
    1b5c:	95 e0       	ldi	r25, 0x05	; 5
    1b5e:	9f 93       	push	r25
    1b60:	8f 93       	push	r24
    1b62:	8e e4       	ldi	r24, 0x4E	; 78
    1b64:	95 e0       	ldi	r25, 0x05	; 5
    1b66:	9f 93       	push	r25
    1b68:	8f 93       	push	r24
    1b6a:	8f e4       	ldi	r24, 0x4F	; 79
    1b6c:	95 e0       	ldi	r25, 0x05	; 5
    1b6e:	9f 93       	push	r25
    1b70:	8f 93       	push	r24
    1b72:	83 e5       	ldi	r24, 0x53	; 83
    1b74:	95 e0       	ldi	r25, 0x05	; 5
    1b76:	9f 93       	push	r25
    1b78:	8f 93       	push	r24
    1b7a:	85 e5       	ldi	r24, 0x55	; 85
    1b7c:	95 e0       	ldi	r25, 0x05	; 5
    1b7e:	9f 93       	push	r25
    1b80:	8f 93       	push	r24
    1b82:	8f e8       	ldi	r24, 0x8F	; 143
    1b84:	93 e0       	ldi	r25, 0x03	; 3
    1b86:	9f 93       	push	r25
    1b88:	8f 93       	push	r24
    1b8a:	81 e1       	ldi	r24, 0x11	; 17
    1b8c:	92 e0       	ldi	r25, 0x02	; 2
    1b8e:	9f 93       	push	r25
    1b90:	8f 93       	push	r24
    1b92:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <sscanf>
			&main_nmeaPosLatSign,
			&main_nmeaPosLon,
			&main_nmeaPosLonSign,
			&main_nmeaDate,
			&main_checksum);
	if (len > 0) {
    1b96:	2d b7       	in	r18, 0x3d	; 61
    1b98:	3e b7       	in	r19, 0x3e	; 62
    1b9a:	2c 5e       	subi	r18, 0xEC	; 236
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	3e bf       	out	0x3e, r19	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	2d bf       	out	0x3d, r18	; 61
    1ba8:	18 16       	cp	r1, r24
    1baa:	19 06       	cpc	r1, r25
    1bac:	0c f0       	brlt	.+2      	; 0x1bb0 <main_fw_parseNmeaLineData+0x220>
    1bae:	44 c0       	rjmp	.+136    	; 0x1c38 <main_fw_parseNmeaLineData+0x2a8>
		main_fw_nmeaUtcPlusOneSec();
    1bb0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <main_fw_nmeaUtcPlusOneSec>
		if ((main_nmeaDate >= 010100) && (main_nmeaDate < 311299)) {
    1bb4:	c0 90 59 05 	lds	r12, 0x0559	; 0x800559 <main_nmeaDate>
    1bb8:	d0 90 5a 05 	lds	r13, 0x055A	; 0x80055a <main_nmeaDate+0x1>
    1bbc:	e0 90 5b 05 	lds	r14, 0x055B	; 0x80055b <main_nmeaDate+0x2>
    1bc0:	f0 90 5c 05 	lds	r15, 0x055C	; 0x80055c <main_nmeaDate+0x3>
    1bc4:	d7 01       	movw	r26, r14
    1bc6:	c6 01       	movw	r24, r12
    1bc8:	80 54       	subi	r24, 0x40	; 64
    1bca:	90 41       	sbci	r25, 0x10	; 16
    1bcc:	a1 09       	sbc	r26, r1
    1bce:	b1 09       	sbc	r27, r1
    1bd0:	83 3c       	cpi	r24, 0xC3	; 195
    1bd2:	9f 4a       	sbci	r25, 0xAF	; 175
    1bd4:	a4 40       	sbci	r26, 0x04	; 4
    1bd6:	b1 05       	cpc	r27, r1
    1bd8:	38 f5       	brcc	.+78     	; 0x1c28 <main_fw_parseNmeaLineData+0x298>
			main_nmeaDate = ((main_nmeaDate - (main_nmeaDate % 100)) * 100) + 2000 + (main_nmeaDate % 100);
    1bda:	c7 01       	movw	r24, r14
    1bdc:	b6 01       	movw	r22, r12
    1bde:	24 e6       	ldi	r18, 0x64	; 100
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
    1bea:	4b 01       	movw	r8, r22
    1bec:	5c 01       	movw	r10, r24
    1bee:	a7 01       	movw	r20, r14
    1bf0:	96 01       	movw	r18, r12
    1bf2:	26 1b       	sub	r18, r22
    1bf4:	37 0b       	sbc	r19, r23
    1bf6:	48 0b       	sbc	r20, r24
    1bf8:	59 0b       	sbc	r21, r25
    1bfa:	a4 e6       	ldi	r26, 0x64	; 100
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__muluhisi3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	80 53       	subi	r24, 0x30	; 48
    1c08:	98 4f       	sbci	r25, 0xF8	; 248
    1c0a:	af 4f       	sbci	r26, 0xFF	; 255
    1c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c0e:	88 0d       	add	r24, r8
    1c10:	99 1d       	adc	r25, r9
    1c12:	aa 1d       	adc	r26, r10
    1c14:	bb 1d       	adc	r27, r11
    1c16:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <main_nmeaDate>
    1c1a:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <main_nmeaDate+0x1>
    1c1e:	a0 93 5b 05 	sts	0x055B, r26	; 0x80055b <main_nmeaDate+0x2>
    1c22:	b0 93 5c 05 	sts	0x055C, r27	; 0x80055c <main_nmeaDate+0x3>
    1c26:	08 c0       	rjmp	.+16     	; 0x1c38 <main_fw_parseNmeaLineData+0x2a8>
		} else {
			main_nmeaDate = 0;
    1c28:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <main_nmeaDate>
    1c2c:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <main_nmeaDate+0x1>
    1c30:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <main_nmeaDate+0x2>
    1c34:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <main_nmeaDate+0x3>
		}
	}

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG31, sizeof(PM_PARSE_NMEA_MSG31));
    1c38:	21 e1       	ldi	r18, 0x11	; 17
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	49 eb       	ldi	r20, 0xB9	; 185
    1c3e:	52 e0       	ldi	r21, 0x02	; 2
    1c40:	6f e8       	ldi	r22, 0x8F	; 143
    1c42:	73 e0       	ldi	r23, 0x03	; 3
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1c4a:	8d e6       	ldi	r24, 0x6D	; 109
    1c4c:	95 e0       	ldi	r25, 0x05	; 5
    1c4e:	9f 93       	push	r25
    1c50:	8f 93       	push	r24
    1c52:	0f e8       	ldi	r16, 0x8F	; 143
    1c54:	13 e0       	ldi	r17, 0x03	; 3
    1c56:	1f 93       	push	r17
    1c58:	0f 93       	push	r16
    1c5a:	c1 e1       	ldi	r28, 0x11	; 17
    1c5c:	d2 e0       	ldi	r29, 0x02	; 2
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <sscanf>
			&main_nmeaSatsEphemerisGpsGalileoQzss);

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG41, sizeof(PM_PARSE_NMEA_MSG41));
    1c66:	21 e1       	ldi	r18, 0x11	; 17
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	48 ea       	ldi	r20, 0xA8	; 168
    1c6c:	52 e0       	ldi	r21, 0x02	; 2
    1c6e:	b8 01       	movw	r22, r16
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1c76:	8b e6       	ldi	r24, 0x6B	; 107
    1c78:	95 e0       	ldi	r25, 0x05	; 5
    1c7a:	9f 93       	push	r25
    1c7c:	8f 93       	push	r24
    1c7e:	1f 93       	push	r17
    1c80:	0f 93       	push	r16
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <sscanf>
    1c8a:	8d b7       	in	r24, 0x3d	; 61
    1c8c:	9e b7       	in	r25, 0x3e	; 62
    1c8e:	0c 96       	adiw	r24, 0x0c	; 12
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	9e bf       	out	0x3e, r25	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	8d bf       	out	0x3d, r24	; 61
			&main_nmeaSatsEphemerisGlonass);
}
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	df 90       	pop	r13
    1ca8:	cf 90       	pop	r12
    1caa:	bf 90       	pop	r11
    1cac:	af 90       	pop	r10
    1cae:	9f 90       	pop	r9
    1cb0:	8f 90       	pop	r8
    1cb2:	08 95       	ret

00001cb4 <twi_mcp23017_av1624_fw_showStatus>:
		mainPwmTerminalAdj = 0.0f;
	}
}

void twi_mcp23017_av1624_fw_showStatus(void)
{
    1cb4:	4f 92       	push	r4
    1cb6:	5f 92       	push	r5
    1cb8:	6f 92       	push	r6
    1cba:	7f 92       	push	r7
    1cbc:	8f 92       	push	r8
    1cbe:	9f 92       	push	r9
    1cc0:	af 92       	push	r10
    1cc2:	bf 92       	push	r11
    1cc4:	cf 92       	push	r12
    1cc6:	df 92       	push	r13
    1cc8:	ef 92       	push	r14
    1cca:	ff 92       	push	r15
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
	if (!main_bf.mainIsLcdAttached) {
    1cd0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1cd4:	88 23       	and	r24, r24
    1cd6:	4c f0       	brlt	.+18     	; 0x1cea <twi_mcp23017_av1624_fw_showStatus+0x36>
		twi_mcp23017_fw_init();
    1cd8:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <twi_mcp23017_fw_init>
		twi_mcp23017_av1624_fw_init();
    1cdc:	0e 94 94 2a 	call	0x5528	; 0x5528 <twi_mcp23017_av1624_fw_init>
		if (!main_bf.mainIsLcdAttached) {
    1ce0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1ce4:	88 23       	and	r24, r24
    1ce6:	0c f0       	brlt	.+2      	; 0x1cea <twi_mcp23017_av1624_fw_showStatus+0x36>
    1ce8:	fc c1       	rjmp	.+1016   	; 0x20e2 <twi_mcp23017_av1624_fw_showStatus+0x42e>
			return;
		}
	}

	/* I2C LCD-Module via MCP23017 16 bit port expander */  // XXX I2C LCD-Module displayed fields are here
	uint8_t sreg = SREG;
    1cea:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1cec:	f8 94       	cli
	uint32_t localFastCtr1ms = fastCtr1ms;
    1cee:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <fastCtr1ms>
    1cf2:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <fastCtr1ms+0x1>
    1cf6:	a0 91 39 05 	lds	r26, 0x0539	; 0x800539 <fastCtr1ms+0x2>
    1cfa:	b0 91 3a 05 	lds	r27, 0x053A	; 0x80053a <fastCtr1ms+0x3>
	SREG = sreg;
    1cfe:	2f bf       	out	0x3f, r18	; 63

	if (localFastCtr1ms <= 5000) {
    1d00:	89 38       	cpi	r24, 0x89	; 137
    1d02:	93 41       	sbci	r25, 0x13	; 19
    1d04:	a1 05       	cpc	r26, r1
    1d06:	b1 05       	cpc	r27, r1
    1d08:	48 f5       	brcc	.+82     	; 0x1d5c <twi_mcp23017_av1624_fw_showStatus+0xa8>
		/* welcome message */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC01, sizeof(PM_FORMAT_LC01));
    1d0a:	21 e1       	ldi	r18, 0x11	; 17
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4d ea       	ldi	r20, 0xAD	; 173
    1d10:	54 e0       	ldi	r21, 0x04	; 4
    1d12:	6f e8       	ldi	r22, 0x8F	; 143
    1d14:	73 e0       	ldi	r23, 0x03	; 3
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		twi_mcp23017_av1624_fw_gotoPosition(0, 0);
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	0e 94 4b 2b 	call	0x5696	; 0x5696 <twi_mcp23017_av1624_fw_gotoPosition>
		twi_mcp23017_av1624_fw_writeString(mainFormatBuffer, 16);
    1d24:	60 e1       	ldi	r22, 0x10	; 16
    1d26:	8f e8       	ldi	r24, 0x8F	; 143
    1d28:	93 e0       	ldi	r25, 0x03	; 3
    1d2a:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <twi_mcp23017_av1624_fw_writeString>
		usbPoll();
    1d2e:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <usbPoll>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC02, sizeof(PM_FORMAT_LC02));
    1d32:	21 e1       	ldi	r18, 0x11	; 17
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	4c e9       	ldi	r20, 0x9C	; 156
    1d38:	54 e0       	ldi	r21, 0x04	; 4
    1d3a:	6f e8       	ldi	r22, 0x8F	; 143
    1d3c:	73 e0       	ldi	r23, 0x03	; 3
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	0e 94 4b 2b 	call	0x5696	; 0x5696 <twi_mcp23017_av1624_fw_gotoPosition>
		twi_mcp23017_av1624_fw_writeString(mainFormatBuffer, 16);
    1d4c:	60 e1       	ldi	r22, 0x10	; 16
    1d4e:	8f e8       	ldi	r24, 0x8F	; 143
    1d50:	93 e0       	ldi	r25, 0x03	; 3
    1d52:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <twi_mcp23017_av1624_fw_writeString>
		usbPoll();
    1d56:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <usbPoll>
    1d5a:	c3 c1       	rjmp	.+902    	; 0x20e2 <twi_mcp23017_av1624_fw_showStatus+0x42e>
		static uint8_t displayNr	= 0;
		static uint8_t displaySubNr	= 0;
		int len = 0;

		/* the status-line */
		if (mainRefClkState > REFCLK_STATE_NOSYNC) {
    1d5c:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    1d60:	88 23       	and	r24, r24
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <twi_mcp23017_av1624_fw_showStatus+0xb2>
    1d64:	42 c0       	rjmp	.+132    	; 0x1dea <twi_mcp23017_av1624_fw_showStatus+0x136>
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC11, sizeof(PM_FORMAT_LC11));
    1d66:	28 e1       	ldi	r18, 0x18	; 24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	44 e8       	ldi	r20, 0x84	; 132
    1d6c:	54 e0       	ldi	r21, 0x04	; 4
    1d6e:	6f e8       	ldi	r22, 0x8F	; 143
    1d70:	73 e0       	ldi	r23, 0x03	; 3
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1d78:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <main_nmeaSatsUsed+0x1>
    1d7c:	8f 93       	push	r24
    1d7e:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <main_nmeaSatsUsed>
    1d82:	8f 93       	push	r24
    1d84:	1f 92       	push	r1
    1d86:	83 ef       	ldi	r24, 0xF3	; 243
    1d88:	8f 93       	push	r24
    1d8a:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    1d8e:	1f 92       	push	r1
    1d90:	8f 93       	push	r24
    1d92:	1f 92       	push	r1
    1d94:	80 ee       	ldi	r24, 0xE0	; 224
    1d96:	8f 93       	push	r24
			'b',
			(mainPpm * 5000.0f),
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e4       	ldi	r19, 0x40	; 64
    1d9c:	4c e9       	ldi	r20, 0x9C	; 156
    1d9e:	55 e4       	ldi	r21, 0x45	; 69
    1da0:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <mainPpm>
    1da4:	70 91 80 05 	lds	r23, 0x0580	; 0x800580 <mainPpm+0x1>
    1da8:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <mainPpm+0x2>
    1dac:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <mainPpm+0x3>
    1db0:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
		int len = 0;

		/* the status-line */
		if (mainRefClkState > REFCLK_STATE_NOSYNC) {
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC11, sizeof(PM_FORMAT_LC11));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1db4:	9f 93       	push	r25
    1db6:	8f 93       	push	r24
    1db8:	7f 93       	push	r23
    1dba:	6f 93       	push	r22
    1dbc:	1f 92       	push	r1
    1dbe:	82 e6       	ldi	r24, 0x62	; 98
    1dc0:	8f 93       	push	r24
    1dc2:	8f e8       	ldi	r24, 0x8F	; 143
    1dc4:	93 e0       	ldi	r25, 0x03	; 3
    1dc6:	9f 93       	push	r25
    1dc8:	8f 93       	push	r24
    1dca:	8f e0       	ldi	r24, 0x0F	; 15
    1dcc:	94 e0       	ldi	r25, 0x04	; 4
    1dce:	9f 93       	push	r25
    1dd0:	8f 93       	push	r24
    1dd2:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
    1dd6:	c8 2f       	mov	r28, r24
    1dd8:	8d b7       	in	r24, 0x3d	; 61
    1dda:	9e b7       	in	r25, 0x3e	; 62
    1ddc:	42 96       	adiw	r24, 0x12	; 18
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	9e bf       	out	0x3e, r25	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	8d bf       	out	0x3d, r24	; 61
    1de8:	2c c0       	rjmp	.+88     	; 0x1e42 <twi_mcp23017_av1624_fw_showStatus+0x18e>
			mainRefClkState,
			0xf3,
			main_nmeaSatsUsed);

			} else {
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC12, sizeof(PM_FORMAT_LC12));
    1dea:	28 e1       	ldi	r18, 0x18	; 24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4c e6       	ldi	r20, 0x6C	; 108
    1df0:	54 e0       	ldi	r21, 0x04	; 4
    1df2:	6f e8       	ldi	r22, 0x8F	; 143
    1df4:	73 e0       	ldi	r23, 0x03	; 3
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1dfc:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <main_nmeaSatsUsed+0x1>
    1e00:	8f 93       	push	r24
    1e02:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <main_nmeaSatsUsed>
    1e06:	8f 93       	push	r24
    1e08:	1f 92       	push	r1
    1e0a:	83 ef       	ldi	r24, 0xF3	; 243
    1e0c:	8f 93       	push	r24
    1e0e:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    1e12:	1f 92       	push	r1
    1e14:	8f 93       	push	r24
    1e16:	1f 92       	push	r1
    1e18:	80 ee       	ldi	r24, 0xE0	; 224
    1e1a:	8f 93       	push	r24
    1e1c:	8f e8       	ldi	r24, 0x8F	; 143
    1e1e:	93 e0       	ldi	r25, 0x03	; 3
    1e20:	9f 93       	push	r25
    1e22:	8f 93       	push	r24
    1e24:	8f e0       	ldi	r24, 0x0F	; 15
    1e26:	94 e0       	ldi	r25, 0x04	; 4
    1e28:	9f 93       	push	r25
    1e2a:	8f 93       	push	r24
    1e2c:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
    1e30:	c8 2f       	mov	r28, r24
    1e32:	8d b7       	in	r24, 0x3d	; 61
    1e34:	9e b7       	in	r25, 0x3e	; 62
    1e36:	0c 96       	adiw	r24, 0x0c	; 12
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	9e bf       	out	0x3e, r25	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	8d bf       	out	0x3d, r24	; 61
			0xe0,
			mainRefClkState,
			0xf3,
			main_nmeaSatsUsed);
		}
		twi_mcp23017_av1624_fw_gotoPosition(0, 0);
    1e42:	60 e0       	ldi	r22, 0x00	; 0
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	0e 94 4b 2b 	call	0x5696	; 0x5696 <twi_mcp23017_av1624_fw_gotoPosition>
		twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    1e4a:	6c 2f       	mov	r22, r28
    1e4c:	8f e0       	ldi	r24, 0x0F	; 15
    1e4e:	94 e0       	ldi	r25, 0x04	; 4
    1e50:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <twi_mcp23017_av1624_fw_writeString>
		usbPoll();
    1e54:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <usbPoll>

		switch (displayNr) {
    1e58:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <displayNr.2966>
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <twi_mcp23017_av1624_fw_showStatus+0x1ae>
    1e60:	74 c0       	rjmp	.+232    	; 0x1f4a <twi_mcp23017_av1624_fw_showStatus+0x296>
    1e62:	82 30       	cpi	r24, 0x02	; 2
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <twi_mcp23017_av1624_fw_showStatus+0x1b4>
    1e66:	c7 c0       	rjmp	.+398    	; 0x1ff6 <twi_mcp23017_av1624_fw_showStatus+0x342>
			default:
			case 0:
			{
				/* the timestamp */
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
    1e68:	80 90 59 05 	lds	r8, 0x0559	; 0x800559 <main_nmeaDate>
    1e6c:	90 90 5a 05 	lds	r9, 0x055A	; 0x80055a <main_nmeaDate+0x1>
    1e70:	a0 90 5b 05 	lds	r10, 0x055B	; 0x80055b <main_nmeaDate+0x2>
    1e74:	b0 90 5c 05 	lds	r11, 0x055C	; 0x80055c <main_nmeaDate+0x3>
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
    1e78:	40 90 55 05 	lds	r4, 0x0555	; 0x800555 <main_nmeaTimeUtcInt>
    1e7c:	50 90 56 05 	lds	r5, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    1e80:	60 90 57 05 	lds	r6, 0x0557	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    1e84:	70 90 58 05 	lds	r7, 0x0558	; 0x800558 <main_nmeaTimeUtcInt+0x3>
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
    1e88:	2c e1       	ldi	r18, 0x1C	; 28
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e5       	ldi	r20, 0x50	; 80
    1e8e:	54 e0       	ldi	r21, 0x04	; 4
    1e90:	6f e8       	ldi	r22, 0x8F	; 143
    1e92:	73 e0       	ldi	r23, 0x03	; 3
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
    1e9a:	0f 2e       	mov	r0, r31
    1e9c:	f4 e6       	ldi	r31, 0x64	; 100
    1e9e:	cf 2e       	mov	r12, r31
    1ea0:	d1 2c       	mov	r13, r1
    1ea2:	e1 2c       	mov	r14, r1
    1ea4:	f1 2c       	mov	r15, r1
    1ea6:	f0 2d       	mov	r31, r0
    1ea8:	c3 01       	movw	r24, r6
    1eaa:	b2 01       	movw	r22, r4
    1eac:	a7 01       	movw	r20, r14
    1eae:	96 01       	movw	r18, r12
    1eb0:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1eb4:	1f 92       	push	r1
    1eb6:	6f 93       	push	r22
				/* the timestamp */
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
    1eb8:	ca 01       	movw	r24, r20
    1eba:	b9 01       	movw	r22, r18
    1ebc:	a7 01       	movw	r20, r14
    1ebe:	96 01       	movw	r18, r12
    1ec0:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1ec4:	1f 92       	push	r1
    1ec6:	6f 93       	push	r22
			{
				/* the timestamp */
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
    1ec8:	c3 01       	movw	r24, r6
    1eca:	b2 01       	movw	r22, r4
    1ecc:	20 e1       	ldi	r18, 0x10	; 16
    1ece:	37 e2       	ldi	r19, 0x27	; 39
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1ed8:	1f 92       	push	r1
    1eda:	2f 93       	push	r18
			default:
			case 0:
			{
				/* the timestamp */
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
    1edc:	c5 01       	movw	r24, r10
    1ede:	b4 01       	movw	r22, r8
    1ee0:	20 e1       	ldi	r18, 0x10	; 16
    1ee2:	37 e2       	ldi	r19, 0x27	; 39
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
    1eec:	ca 01       	movw	r24, r20
    1eee:	b9 01       	movw	r22, r18
    1ef0:	a7 01       	movw	r20, r14
    1ef2:	96 01       	movw	r18, r12
    1ef4:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1ef8:	1f 92       	push	r1
    1efa:	6f 93       	push	r22
			case 0:
			{
				/* the timestamp */
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
    1efc:	c5 01       	movw	r24, r10
    1efe:	b4 01       	movw	r22, r8
    1f00:	20 e4       	ldi	r18, 0x40	; 64
    1f02:	32 e4       	ldi	r19, 0x42	; 66
    1f04:	4f e0       	ldi	r20, 0x0F	; 15
    1f06:	50 e0       	ldi	r21, 0x00	; 0
    1f08:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1f0c:	1f 92       	push	r1
    1f0e:	2f 93       	push	r18
    1f10:	8f e8       	ldi	r24, 0x8F	; 143
    1f12:	93 e0       	ldi	r25, 0x03	; 3
    1f14:	9f 93       	push	r25
    1f16:	8f 93       	push	r24
    1f18:	8f e0       	ldi	r24, 0x0F	; 15
    1f1a:	94 e0       	ldi	r25, 0x04	; 4
    1f1c:	9f 93       	push	r25
    1f1e:	8f 93       	push	r24
    1f20:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
    1f24:	c8 2f       	mov	r28, r24
				month,
				//year % 100,
				hour,
				minutes,
				seconds);
				twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <twi_mcp23017_av1624_fw_gotoPosition>
				twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    1f2e:	6c 2f       	mov	r22, r28
    1f30:	8f e0       	ldi	r24, 0x0F	; 15
    1f32:	94 e0       	ldi	r25, 0x04	; 4
    1f34:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <twi_mcp23017_av1624_fw_writeString>
			}
			break;
    1f38:	8d b7       	in	r24, 0x3d	; 61
    1f3a:	9e b7       	in	r25, 0x3e	; 62
    1f3c:	0e 96       	adiw	r24, 0x0e	; 14
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	9e bf       	out	0x3e, r25	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	8d bf       	out	0x3d, r24	; 61
    1f48:	b2 c0       	rjmp	.+356    	; 0x20ae <twi_mcp23017_av1624_fw_showStatus+0x3fa>

			case 1:
			{
				/* SAT data */
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC22, sizeof(PM_FORMAT_LC22));
    1f4a:	20 e2       	ldi	r18, 0x20	; 32
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e3       	ldi	r20, 0x30	; 48
    1f50:	54 e0       	ldi	r21, 0x04	; 4
    1f52:	6f e8       	ldi	r22, 0x8F	; 143
    1f54:	73 e0       	ldi	r23, 0x03	; 3
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1f5c:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <main_nmeaSatsEphemerisGlonass+0x1>
    1f60:	8f 93       	push	r24
    1f62:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGlonass>
    1f66:	8f 93       	push	r24
    1f68:	1f 92       	push	r1
    1f6a:	8b ee       	ldi	r24, 0xEB	; 235
    1f6c:	8f 93       	push	r24
    1f6e:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <main_nmeaSatsEphemerisGpsGalileoQzss+0x1>
    1f72:	8f 93       	push	r24
    1f74:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaSatsEphemerisGpsGalileoQzss>
    1f78:	8f 93       	push	r24
    1f7a:	1f 92       	push	r1
    1f7c:	8f ed       	ldi	r24, 0xDF	; 223
    1f7e:	8f 93       	push	r24
    1f80:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <main_nmeaPdop+0x3>
    1f84:	8f 93       	push	r24
    1f86:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <main_nmeaPdop+0x2>
    1f8a:	8f 93       	push	r24
    1f8c:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <main_nmeaPdop+0x1>
    1f90:	8f 93       	push	r24
    1f92:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <main_nmeaPdop>
    1f96:	8f 93       	push	r24
    1f98:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <main_nmeaPosFixIndicator+0x1>
    1f9c:	8f 93       	push	r24
    1f9e:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaPosFixIndicator>
    1fa2:	8f 93       	push	r24
    1fa4:	1f 92       	push	r1
    1fa6:	86 e4       	ldi	r24, 0x46	; 70
    1fa8:	8f 93       	push	r24
    1faa:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <main_nmeaMode2+0x1>
    1fae:	8f 93       	push	r24
    1fb0:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <main_nmeaMode2>
    1fb4:	8f 93       	push	r24
    1fb6:	1f 92       	push	r1
    1fb8:	8d e4       	ldi	r24, 0x4D	; 77
    1fba:	8f 93       	push	r24
    1fbc:	8f e8       	ldi	r24, 0x8F	; 143
    1fbe:	93 e0       	ldi	r25, 0x03	; 3
    1fc0:	9f 93       	push	r25
    1fc2:	8f 93       	push	r24
    1fc4:	8f e0       	ldi	r24, 0x0F	; 15
    1fc6:	94 e0       	ldi	r25, 0x04	; 4
    1fc8:	9f 93       	push	r25
    1fca:	8f 93       	push	r24
    1fcc:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
    1fd0:	c8 2f       	mov	r28, r24
				main_nmeaPdop,
				0xdf,
				main_nmeaSatsEphemerisGpsGalileoQzss,
				0xeb,
				main_nmeaSatsEphemerisGlonass);
				twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	0e 94 4b 2b 	call	0x5696	; 0x5696 <twi_mcp23017_av1624_fw_gotoPosition>
				twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    1fda:	6c 2f       	mov	r22, r28
    1fdc:	8f e0       	ldi	r24, 0x0F	; 15
    1fde:	94 e0       	ldi	r25, 0x04	; 4
    1fe0:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <twi_mcp23017_av1624_fw_writeString>
			}
			break;
    1fe4:	8d b7       	in	r24, 0x3d	; 61
    1fe6:	9e b7       	in	r25, 0x3e	; 62
    1fe8:	48 96       	adiw	r24, 0x18	; 24
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	9e bf       	out	0x3e, r25	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	8d bf       	out	0x3d, r24	; 61
    1ff4:	5c c0       	rjmp	.+184    	; 0x20ae <twi_mcp23017_av1624_fw_showStatus+0x3fa>

			case 2:
			{
				/* PWM data */
				uint8_t sreg = SREG;
    1ff6:	8f b7       	in	r24, 0x3f	; 63
				cli();
    1ff8:	f8 94       	cli
				uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
    1ffa:	d0 91 36 05 	lds	r29, 0x0536	; 0x800536 <fastPwmLoopVal>
				uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
    1ffe:	c0 91 35 05 	lds	r28, 0x0535	; 0x800535 <fastPwmSubLoopVal>
				SREG = sreg;
    2002:	8f bf       	out	0x3f, r24	; 63

				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC23, sizeof(PM_FORMAT_LC23));
    2004:	23 e1       	ldi	r18, 0x13	; 19
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4d e1       	ldi	r20, 0x1D	; 29
    200a:	54 e0       	ldi	r21, 0x04	; 4
    200c:	6f e8       	ldi	r22, 0x8F	; 143
    200e:	73 e0       	ldi	r23, 0x03	; 3
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2016:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <mainAdcPullVolts+0x3>
    201a:	8f 93       	push	r24
    201c:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <mainAdcPullVolts+0x2>
    2020:	8f 93       	push	r24
    2022:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <mainAdcPullVolts+0x1>
    2026:	8f 93       	push	r24
    2028:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <mainAdcPullVolts>
    202c:	8f 93       	push	r24
    202e:	1f 92       	push	r1
    2030:	8b ea       	ldi	r24, 0xAB	; 171
    2032:	8f 93       	push	r24
}

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    2034:	6d 2f       	mov	r22, r29
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    2040:	6b 01       	movw	r12, r22
    2042:	7c 01       	movw	r14, r24
    2044:	6c 2f       	mov	r22, r28
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5b e3       	ldi	r21, 0x3B	; 59
    2058:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    205c:	9b 01       	movw	r18, r22
    205e:	ac 01       	movw	r20, r24
    2060:	c7 01       	movw	r24, r14
    2062:	b6 01       	movw	r22, r12
    2064:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
				uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
				uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
				SREG = sreg;

				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC23, sizeof(PM_FORMAT_LC23));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2068:	9f 93       	push	r25
    206a:	8f 93       	push	r24
    206c:	7f 93       	push	r23
    206e:	6f 93       	push	r22
    2070:	1f 92       	push	r1
    2072:	80 e5       	ldi	r24, 0x50	; 80
    2074:	8f 93       	push	r24
    2076:	8f e8       	ldi	r24, 0x8F	; 143
    2078:	93 e0       	ldi	r25, 0x03	; 3
    207a:	9f 93       	push	r25
    207c:	8f 93       	push	r24
    207e:	8f e0       	ldi	r24, 0x0F	; 15
    2080:	94 e0       	ldi	r25, 0x04	; 4
    2082:	9f 93       	push	r25
    2084:	8f 93       	push	r24
    2086:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
    208a:	c8 2f       	mov	r28, r24
				'P',
				main_fw_calcTimerToFloat(localFastPwmLoopVal, localFastPwmSubLoopVal),
				0xab,
				mainAdcPullVolts);
				twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	0e 94 4b 2b 	call	0x5696	; 0x5696 <twi_mcp23017_av1624_fw_gotoPosition>
				twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    2094:	6c 2f       	mov	r22, r28
    2096:	8f e0       	ldi	r24, 0x0F	; 15
    2098:	94 e0       	ldi	r25, 0x04	; 4
    209a:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <twi_mcp23017_av1624_fw_writeString>
			}
			break;
    209e:	8d b7       	in	r24, 0x3d	; 61
    20a0:	9e b7       	in	r25, 0x3e	; 62
    20a2:	40 96       	adiw	r24, 0x10	; 16
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	9e bf       	out	0x3e, r25	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	8d bf       	out	0x3d, r24	; 61
		}
		usbPoll();
    20ae:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <usbPoll>

		if (++displaySubNr >= 3) {
    20b2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <displaySubNr.2967>
    20b6:	8f 5f       	subi	r24, 0xFF	; 255
    20b8:	83 30       	cpi	r24, 0x03	; 3
    20ba:	18 f4       	brcc	.+6      	; 0x20c2 <twi_mcp23017_av1624_fw_showStatus+0x40e>
    20bc:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <displaySubNr.2967>
    20c0:	10 c0       	rjmp	.+32     	; 0x20e2 <twi_mcp23017_av1624_fw_showStatus+0x42e>
			displaySubNr = 0;
    20c2:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <displaySubNr.2967>
			++displayNr;
    20c6:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <displayNr.2966>
    20ca:	9f 5f       	subi	r25, 0xFF	; 255
			displayNr %= 3;
    20cc:	8b ea       	ldi	r24, 0xAB	; 171
    20ce:	98 9f       	mul	r25, r24
    20d0:	81 2d       	mov	r24, r1
    20d2:	11 24       	eor	r1, r1
    20d4:	86 95       	lsr	r24
    20d6:	28 2f       	mov	r18, r24
    20d8:	22 0f       	add	r18, r18
    20da:	82 0f       	add	r24, r18
    20dc:	98 1b       	sub	r25, r24
    20de:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <displayNr.2966>
		}
	}
}
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	bf 90       	pop	r11
    20f0:	af 90       	pop	r10
    20f2:	9f 90       	pop	r9
    20f4:	8f 90       	pop	r8
    20f6:	7f 90       	pop	r7
    20f8:	6f 90       	pop	r6
    20fa:	5f 90       	pop	r5
    20fc:	4f 90       	pop	r4
    20fe:	08 95       	ret

00002100 <twi_smart_lcd_fw_showStatus>:

void twi_smart_lcd_fw_showStatus(void)
{
    2100:	4f 92       	push	r4
    2102:	5f 92       	push	r5
    2104:	6f 92       	push	r6
    2106:	7f 92       	push	r7
    2108:	8f 92       	push	r8
    210a:	9f 92       	push	r9
    210c:	af 92       	push	r10
    210e:	bf 92       	push	r11
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
	/* Init device */
	if (!main_bf.mainIsSmartAttached) {
    2120:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    2124:	80 ff       	sbrs	r24, 0
		twi_smart_lcd_fw_init();
    2126:	0e 94 ca 2b 	call	0x5794	; 0x5794 <twi_smart_lcd_fw_init>
	}

	{
		uint8_t clk_state;
		float phaseVolts;
		uint8_t sreg = SREG;
    212a:	2f b7       	in	r18, 0x3f	; 63
		cli();
    212c:	f8 94       	cli
		clk_state = (uint8_t) mainRefClkState;
    212e:	c0 91 9f 05 	lds	r28, 0x059F	; 0x80059f <mainRefClkState>
		phaseVolts = mainAdcPhaseVolts;
    2132:	60 91 77 05 	lds	r22, 0x0577	; 0x800577 <mainAdcPhaseVolts>
    2136:	70 91 78 05 	lds	r23, 0x0578	; 0x800578 <mainAdcPhaseVolts+0x1>
    213a:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <mainAdcPhaseVolts+0x2>
    213e:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <mainAdcPhaseVolts+0x3>
		SREG = sreg;
    2142:	2f bf       	out	0x3f, r18	; 63

		int16_t	phase100 = (int16_t) (100.0f * ((phaseVolts - 0.6f) * 180.0f / 0.25f));  // TODO: correct me!
    2144:	2a e9       	ldi	r18, 0x9A	; 154
    2146:	39 e9       	ldi	r19, 0x99	; 153
    2148:	49 e1       	ldi	r20, 0x19	; 25
    214a:	5f e3       	ldi	r21, 0x3F	; 63
    214c:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	44 e3       	ldi	r20, 0x34	; 52
    2156:	53 e4       	ldi	r21, 0x43	; 67
    2158:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e8       	ldi	r20, 0x80	; 128
    2162:	50 e4       	ldi	r21, 0x40	; 64
    2164:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	48 ec       	ldi	r20, 0xC8	; 200
    216e:	52 e4       	ldi	r21, 0x42	; 66
    2170:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    2174:	0e 94 96 30 	call	0x612c	; 0x612c <__fixsfsi>
		twi_smart_lcd_fw_set_clk_state(clk_state, phase100);
    2178:	8c 2f       	mov	r24, r28
    217a:	0e 94 cd 2b 	call	0x579a	; 0x579a <twi_smart_lcd_fw_set_clk_state>
	}

	{
		long date;
		uint8_t sreg = SREG;
    217e:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2180:	f8 94       	cli
		date = main_nmeaDate;
    2182:	c0 90 59 05 	lds	r12, 0x0559	; 0x800559 <main_nmeaDate>
    2186:	d0 90 5a 05 	lds	r13, 0x055A	; 0x80055a <main_nmeaDate+0x1>
    218a:	e0 90 5b 05 	lds	r14, 0x055B	; 0x80055b <main_nmeaDate+0x2>
    218e:	f0 90 5c 05 	lds	r15, 0x055C	; 0x80055c <main_nmeaDate+0x3>
		SREG = sreg;
    2192:	8f bf       	out	0x3f, r24	; 63

		uint16_t year  = (uint16_t) (date % 10000);
		uint8_t  month = (uint8_t) ((date / 10000) % 100);
		uint8_t  day   = (uint8_t)  (date / 1000000);
    2194:	c7 01       	movw	r24, r14
    2196:	b6 01       	movw	r22, r12
    2198:	20 e4       	ldi	r18, 0x40	; 64
    219a:	32 e4       	ldi	r19, 0x42	; 66
    219c:	4f e0       	ldi	r20, 0x0F	; 15
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
    21a4:	c2 2f       	mov	r28, r18
		cli();
		date = main_nmeaDate;
		SREG = sreg;

		uint16_t year  = (uint16_t) (date % 10000);
		uint8_t  month = (uint8_t) ((date / 10000) % 100);
    21a6:	0f 2e       	mov	r0, r31
    21a8:	f0 e1       	ldi	r31, 0x10	; 16
    21aa:	8f 2e       	mov	r8, r31
    21ac:	f7 e2       	ldi	r31, 0x27	; 39
    21ae:	9f 2e       	mov	r9, r31
    21b0:	a1 2c       	mov	r10, r1
    21b2:	b1 2c       	mov	r11, r1
    21b4:	f0 2d       	mov	r31, r0
    21b6:	c7 01       	movw	r24, r14
    21b8:	b6 01       	movw	r22, r12
    21ba:	a5 01       	movw	r20, r10
    21bc:	94 01       	movw	r18, r8
    21be:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
    21c2:	2b 01       	movw	r4, r22
    21c4:	3c 01       	movw	r6, r24
    21c6:	0f 2e       	mov	r0, r31
    21c8:	f4 e6       	ldi	r31, 0x64	; 100
    21ca:	cf 2e       	mov	r12, r31
    21cc:	d1 2c       	mov	r13, r1
    21ce:	e1 2c       	mov	r14, r1
    21d0:	f1 2c       	mov	r15, r1
    21d2:	f0 2d       	mov	r31, r0
    21d4:	ca 01       	movw	r24, r20
    21d6:	b9 01       	movw	r22, r18
    21d8:	a7 01       	movw	r20, r14
    21da:	96 01       	movw	r18, r12
    21dc:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
		uint8_t  day   = (uint8_t)  (date / 1000000);
		twi_smart_lcd_fw_set_date(year, month, day);
    21e0:	4c 2f       	mov	r20, r28
    21e2:	c2 01       	movw	r24, r4
    21e4:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <twi_smart_lcd_fw_set_date>
	}

	{
		long utc;
		uint8_t sreg = SREG;
    21e8:	8f b7       	in	r24, 0x3f	; 63
		cli();
    21ea:	f8 94       	cli
		utc = main_nmeaTimeUtcInt;
    21ec:	40 90 55 05 	lds	r4, 0x0555	; 0x800555 <main_nmeaTimeUtcInt>
    21f0:	50 90 56 05 	lds	r5, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    21f4:	60 90 57 05 	lds	r6, 0x0557	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    21f8:	70 90 58 05 	lds	r7, 0x0558	; 0x800558 <main_nmeaTimeUtcInt+0x3>
		SREG = sreg;
    21fc:	8f bf       	out	0x3f, r24	; 63

		uint8_t  hour   = (uint8_t)  (utc / 10000);
		uint8_t  minute = (uint8_t) ((utc / 100) % 100);
		uint8_t  second = (uint8_t)  (utc % 100);
    21fe:	c3 01       	movw	r24, r6
    2200:	b2 01       	movw	r22, r4
    2202:	a7 01       	movw	r20, r14
    2204:	96 01       	movw	r18, r12
    2206:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
    220a:	d6 2f       	mov	r29, r22
		cli();
		utc = main_nmeaTimeUtcInt;
		SREG = sreg;

		uint8_t  hour   = (uint8_t)  (utc / 10000);
		uint8_t  minute = (uint8_t) ((utc / 100) % 100);
    220c:	ca 01       	movw	r24, r20
    220e:	b9 01       	movw	r22, r18
    2210:	a7 01       	movw	r20, r14
    2212:	96 01       	movw	r18, r12
    2214:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
    2218:	c6 2f       	mov	r28, r22
		uint8_t sreg = SREG;
		cli();
		utc = main_nmeaTimeUtcInt;
		SREG = sreg;

		uint8_t  hour   = (uint8_t)  (utc / 10000);
    221a:	c3 01       	movw	r24, r6
    221c:	b2 01       	movw	r22, r4
    221e:	a5 01       	movw	r20, r10
    2220:	94 01       	movw	r18, r8
    2222:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <__divmodsi4>
    2226:	82 2f       	mov	r24, r18
		uint8_t  minute = (uint8_t) ((utc / 100) % 100);
		uint8_t  second = (uint8_t)  (utc % 100);
		twi_smart_lcd_fw_set_time(hour, minute, second);
    2228:	4d 2f       	mov	r20, r29
    222a:	6c 2f       	mov	r22, r28
    222c:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <twi_smart_lcd_fw_set_time>
	}

	{
		float ppm;
		uint8_t sreg = SREG;
    2230:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2232:	f8 94       	cli
		ppm = mainPpm;
    2234:	c0 90 7f 05 	lds	r12, 0x057F	; 0x80057f <mainPpm>
    2238:	d0 90 80 05 	lds	r13, 0x0580	; 0x800580 <mainPpm+0x1>
    223c:	e0 90 81 05 	lds	r14, 0x0581	; 0x800581 <mainPpm+0x2>
    2240:	f0 90 82 05 	lds	r15, 0x0582	; 0x800582 <mainPpm+0x3>
		SREG = sreg;
    2244:	8f bf       	out	0x3f, r24	; 63

		float localPpm = ppm > 0 ?  ppm * 5.0f : ppm * -5.0f;
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	a9 01       	movw	r20, r18
    224c:	c7 01       	movw	r24, r14
    224e:	b6 01       	movw	r22, r12
    2250:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__gesf2>
    2254:	18 16       	cp	r1, r24
    2256:	5c f4       	brge	.+22     	; 0x226e <twi_smart_lcd_fw_showStatus+0x16e>
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 ea       	ldi	r20, 0xA0	; 160
    225e:	50 e4       	ldi	r21, 0x40	; 64
    2260:	c7 01       	movw	r24, r14
    2262:	b6 01       	movw	r22, r12
    2264:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    2268:	2b 01       	movw	r4, r22
    226a:	3c 01       	movw	r6, r24
    226c:	0a c0       	rjmp	.+20     	; 0x2282 <twi_smart_lcd_fw_showStatus+0x182>
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 ea       	ldi	r20, 0xA0	; 160
    2274:	50 ec       	ldi	r21, 0xC0	; 192
    2276:	c7 01       	movw	r24, r14
    2278:	b6 01       	movw	r22, r12
    227a:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    227e:	2b 01       	movw	r4, r22
    2280:	3c 01       	movw	r6, r24
		int16_t ppm_int  = (int16_t) localPpm;
    2282:	c3 01       	movw	r24, r6
    2284:	b2 01       	movw	r22, r4
    2286:	0e 94 96 30 	call	0x612c	; 0x612c <__fixsfsi>
    228a:	4b 01       	movw	r8, r22
    228c:	5c 01       	movw	r10, r24
    228e:	eb 01       	movw	r28, r22
		uint16_t ppm_frac1000 = (uint16_t) ((localPpm - ppm_int) * 1000.0f);
    2290:	07 2e       	mov	r0, r23
    2292:	00 0c       	add	r0, r0
    2294:	88 0b       	sbc	r24, r24
    2296:	99 0b       	sbc	r25, r25
    2298:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    229c:	9b 01       	movw	r18, r22
    229e:	ac 01       	movw	r20, r24
    22a0:	c3 01       	movw	r24, r6
    22a2:	b2 01       	movw	r22, r4
    22a4:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	4a e7       	ldi	r20, 0x7A	; 122
    22ae:	54 e4       	ldi	r21, 0x44	; 68
    22b0:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    22b4:	0e 94 9d 30 	call	0x613a	; 0x613a <__fixunssfsi>
    22b8:	2b 01       	movw	r4, r22
    22ba:	3c 01       	movw	r6, r24
		if (ppm < 0) {
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	a9 01       	movw	r20, r18
    22c2:	c7 01       	movw	r24, r14
    22c4:	b6 01       	movw	r22, r12
    22c6:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    22ca:	88 23       	and	r24, r24
    22cc:	24 f4       	brge	.+8      	; 0x22d6 <twi_smart_lcd_fw_showStatus+0x1d6>
			ppm_int = -ppm_int;
    22ce:	cc 27       	eor	r28, r28
    22d0:	dd 27       	eor	r29, r29
    22d2:	c8 19       	sub	r28, r8
    22d4:	d9 09       	sbc	r29, r9
		}
		twi_smart_lcd_fw_set_ppm(ppm_int, ppm_frac1000);
    22d6:	b2 01       	movw	r22, r4
    22d8:	ce 01       	movw	r24, r28
    22da:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <twi_smart_lcd_fw_set_ppm>
	}

	{
		uint8_t pwm_int;
		uint8_t pwm_frac1000;
		uint8_t sreg = SREG;
    22de:	9f b7       	in	r25, 0x3f	; 63
		cli();
    22e0:	f8 94       	cli
		pwm_int  = fastPwmLoopVal;
    22e2:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <fastPwmLoopVal>
		pwm_frac1000 = fastPwmSubLoopVal;
    22e6:	60 91 35 05 	lds	r22, 0x0535	; 0x800535 <fastPwmSubLoopVal>
		SREG = sreg;
    22ea:	9f bf       	out	0x3f, r25	; 63

		twi_smart_lcd_fw_set_pwm(pwm_int, pwm_frac1000);
    22ec:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <twi_smart_lcd_fw_set_pwm>
	}

	{
		float pv;
		uint8_t sreg = SREG;
    22f0:	8f b7       	in	r24, 0x3f	; 63
		cli();
    22f2:	f8 94       	cli
		pv = mainAdcPullVolts;
    22f4:	c0 90 7b 05 	lds	r12, 0x057B	; 0x80057b <mainAdcPullVolts>
    22f8:	d0 90 7c 05 	lds	r13, 0x057C	; 0x80057c <mainAdcPullVolts+0x1>
    22fc:	e0 90 7d 05 	lds	r14, 0x057D	; 0x80057d <mainAdcPullVolts+0x2>
    2300:	f0 90 7e 05 	lds	r15, 0x057E	; 0x80057e <mainAdcPullVolts+0x3>
		SREG = sreg;
    2304:	8f bf       	out	0x3f, r24	; 63

		uint8_t pv_int   = (uint8_t) pv;
    2306:	c7 01       	movw	r24, r14
    2308:	b6 01       	movw	r22, r12
    230a:	0e 94 9d 30 	call	0x613a	; 0x613a <__fixunssfsi>
    230e:	c6 2f       	mov	r28, r22
		uint16_t pv_frac1000 = (uint16_t) ((pv - pv_int) * 1000.0f);
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    231a:	9b 01       	movw	r18, r22
    231c:	ac 01       	movw	r20, r24
    231e:	c7 01       	movw	r24, r14
    2320:	b6 01       	movw	r22, r12
    2322:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4a e7       	ldi	r20, 0x7A	; 122
    232c:	54 e4       	ldi	r21, 0x44	; 68
    232e:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    2332:	0e 94 9d 30 	call	0x613a	; 0x613a <__fixunssfsi>
		twi_smart_lcd_fw_set_pv(pv_int, pv_frac1000);
    2336:	8c 2f       	mov	r24, r28
    2338:	0e 94 0a 2c 	call	0x5814	; 0x5814 <twi_smart_lcd_fw_set_pv>

	{
		uint8_t sat_west;
		uint8_t sat_east;
		uint8_t sat_used;
		uint8_t sreg = SREG;
    233c:	9f b7       	in	r25, 0x3f	; 63
		cli();
    233e:	f8 94       	cli
		sat_west = (uint8_t) main_nmeaSatsEphemerisGpsGalileoQzss;
    2340:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaSatsEphemerisGpsGalileoQzss>
		sat_east = (uint8_t) main_nmeaSatsEphemerisGlonass;
    2344:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGlonass>
		sat_used = (uint8_t) main_nmeaSatsUsed;
    2348:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <main_nmeaSatsUsed>
		SREG = sreg;
    234c:	9f bf       	out	0x3f, r25	; 63

		twi_smart_lcd_fw_set_sat_use(sat_west, sat_east, sat_used);
    234e:	0e 94 16 2c 	call	0x582c	; 0x582c <twi_smart_lcd_fw_set_sat_use>
	}

	{
		float sat_dop;
		uint8_t sreg = SREG;
    2352:	2f b7       	in	r18, 0x3f	; 63
		cli();
    2354:	f8 94       	cli
		sat_dop = main_nmeaPdop;
    2356:	60 91 65 05 	lds	r22, 0x0565	; 0x800565 <main_nmeaPdop>
    235a:	70 91 66 05 	lds	r23, 0x0566	; 0x800566 <main_nmeaPdop+0x1>
    235e:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <main_nmeaPdop+0x2>
    2362:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <main_nmeaPdop+0x3>
		SREG = sreg;
    2366:	2f bf       	out	0x3f, r18	; 63

		uint16_t sat_dop100 = (uint16_t) (sat_dop * 100.0f);
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	48 ec       	ldi	r20, 0xC8	; 200
    236e:	52 e4       	ldi	r21, 0x42	; 66
    2370:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    2374:	0e 94 9d 30 	call	0x613a	; 0x613a <__fixunssfsi>
		twi_smart_lcd_fw_set_sat_dop(sat_dop100);
    2378:	cb 01       	movw	r24, r22
    237a:	0e 94 22 2c 	call	0x5844	; 0x5844 <twi_smart_lcd_fw_set_sat_dop>
	}

	{
		uint8_t pos_fi;
		uint8_t pos_m2;
		uint8_t sreg = SREG;
    237e:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2380:	f8 94       	cli
		pos_fi = (uint8_t) main_nmeaPosFixIndicator;
    2382:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaPosFixIndicator>
		pos_m2 = (uint8_t) main_nmeaMode2;
    2386:	60 91 71 05 	lds	r22, 0x0571	; 0x800571 <main_nmeaMode2>
		SREG = sreg;
    238a:	9f bf       	out	0x3f, r25	; 63

		twi_smart_lcd_fw_set_pos_state(pos_fi, pos_m2);
    238c:	0e 94 2d 2c 	call	0x585a	; 0x585a <twi_smart_lcd_fw_set_pos_state>
	}

	{
		uint8_t lat_sgn;
		float lat;
		uint8_t sreg = SREG;
    2390:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2392:	f8 94       	cli
		lat_sgn = (uint8_t) main_nmeaPosLatSign;
    2394:	50 90 4e 05 	lds	r5, 0x054E	; 0x80054e <main_nmeaPosLatSign>
		lat = main_nmeaPosLat;
    2398:	80 90 4f 05 	lds	r8, 0x054F	; 0x80054f <main_nmeaPosLat>
    239c:	90 90 50 05 	lds	r9, 0x0550	; 0x800550 <main_nmeaPosLat+0x1>
    23a0:	a0 90 51 05 	lds	r10, 0x0551	; 0x800551 <main_nmeaPosLat+0x2>
    23a4:	b0 90 52 05 	lds	r11, 0x0552	; 0x800552 <main_nmeaPosLat+0x3>
		SREG = sreg;
    23a8:	8f bf       	out	0x3f, r24	; 63

		uint8_t  lat_deg = (uint8_t) (lat / 100.0f);
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	48 ec       	ldi	r20, 0xC8	; 200
    23b0:	52 e4       	ldi	r21, 0x42	; 66
    23b2:	c5 01       	movw	r24, r10
    23b4:	b4 01       	movw	r22, r8
    23b6:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    23ba:	0e 94 9d 30 	call	0x613a	; 0x613a <__fixunssfsi>
    23be:	66 2e       	mov	r6, r22
		uint8_t  lat_min_int = (uint8_t) ((int) lat % 100);
    23c0:	c5 01       	movw	r24, r10
    23c2:	b4 01       	movw	r22, r8
    23c4:	0e 94 96 30 	call	0x612c	; 0x612c <__fixsfsi>
    23c8:	04 e6       	ldi	r16, 0x64	; 100
    23ca:	10 e0       	ldi	r17, 0x00	; 0
    23cc:	cb 01       	movw	r24, r22
    23ce:	b8 01       	movw	r22, r16
    23d0:	0e 94 32 3b 	call	0x7664	; 0x7664 <__divmodhi4>
    23d4:	ec 01       	movw	r28, r24
		uint16_t lat_min_frac1000 = (uint16_t) ((lat - (lat_deg * 100 + lat_min_int)) * 1000.0f);
    23d6:	0f 2e       	mov	r0, r31
    23d8:	f4 e6       	ldi	r31, 0x64	; 100
    23da:	7f 2e       	mov	r7, r31
    23dc:	f0 2d       	mov	r31, r0
    23de:	6c 01       	movw	r12, r24
    23e0:	dd 24       	eor	r13, r13
    23e2:	76 9c       	mul	r7, r6
    23e4:	c0 0c       	add	r12, r0
    23e6:	d1 1c       	adc	r13, r1
    23e8:	11 24       	eor	r1, r1
    23ea:	b6 01       	movw	r22, r12
    23ec:	dd 0c       	add	r13, r13
    23ee:	88 0b       	sbc	r24, r24
    23f0:	99 0b       	sbc	r25, r25
    23f2:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    23f6:	9b 01       	movw	r18, r22
    23f8:	ac 01       	movw	r20, r24
    23fa:	c5 01       	movw	r24, r10
    23fc:	b4 01       	movw	r22, r8
    23fe:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	4a e7       	ldi	r20, 0x7A	; 122
    2408:	54 e4       	ldi	r21, 0x44	; 68
    240a:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    240e:	0e 94 9d 30 	call	0x613a	; 0x613a <__fixunssfsi>
		twi_smart_lcd_fw_set_pos_lat(lat_sgn, lat_deg, lat_min_int, lat_min_frac1000);
    2412:	9b 01       	movw	r18, r22
    2414:	4c 2f       	mov	r20, r28
    2416:	66 2d       	mov	r22, r6
    2418:	85 2d       	mov	r24, r5
    241a:	0e 94 38 2c 	call	0x5870	; 0x5870 <twi_smart_lcd_fw_set_pos_lat>
	}

	{
		uint8_t lon_sgn;
		float lon;
		uint8_t sreg = SREG;
    241e:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2420:	f8 94       	cli
		lon_sgn = main_nmeaPosLonSign;
    2422:	c0 91 49 05 	lds	r28, 0x0549	; 0x800549 <main_nmeaPosLonSign>
		lon = main_nmeaPosLon;
    2426:	c0 90 4a 05 	lds	r12, 0x054A	; 0x80054a <main_nmeaPosLon>
    242a:	d0 90 4b 05 	lds	r13, 0x054B	; 0x80054b <main_nmeaPosLon+0x1>
    242e:	e0 90 4c 05 	lds	r14, 0x054C	; 0x80054c <main_nmeaPosLon+0x2>
    2432:	f0 90 4d 05 	lds	r15, 0x054D	; 0x80054d <main_nmeaPosLon+0x3>
		SREG = sreg;
    2436:	8f bf       	out	0x3f, r24	; 63

		uint16_t lon_deg = (uint16_t) (lon / 100.0f);
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	48 ec       	ldi	r20, 0xC8	; 200
    243e:	52 e4       	ldi	r21, 0x42	; 66
    2440:	c7 01       	movw	r24, r14
    2442:	b6 01       	movw	r22, r12
    2444:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    2448:	0e 94 9d 30 	call	0x613a	; 0x613a <__fixunssfsi>
    244c:	4b 01       	movw	r8, r22
    244e:	5c 01       	movw	r10, r24
		uint8_t  lon_min_int = (uint16_t) ((int) lon % 100);
    2450:	c7 01       	movw	r24, r14
    2452:	b6 01       	movw	r22, r12
    2454:	0e 94 96 30 	call	0x612c	; 0x612c <__fixsfsi>
    2458:	cb 01       	movw	r24, r22
    245a:	b8 01       	movw	r22, r16
    245c:	0e 94 32 3b 	call	0x7664	; 0x7664 <__divmodhi4>
    2460:	d8 2f       	mov	r29, r24
		uint16_t lon_min_frac1000 = (uint16_t) ((lon - (lon_deg * 100 + lon_min_int)) * 1000.0f);
    2462:	78 9c       	mul	r7, r8
    2464:	80 01       	movw	r16, r0
    2466:	79 9c       	mul	r7, r9
    2468:	10 0d       	add	r17, r0
    246a:	11 24       	eor	r1, r1
    246c:	08 0f       	add	r16, r24
    246e:	11 1d       	adc	r17, r1
    2470:	b8 01       	movw	r22, r16
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 cc 30 	call	0x6198	; 0x6198 <__floatunsisf>
    247a:	9b 01       	movw	r18, r22
    247c:	ac 01       	movw	r20, r24
    247e:	c7 01       	movw	r24, r14
    2480:	b6 01       	movw	r22, r12
    2482:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	4a e7       	ldi	r20, 0x7A	; 122
    248c:	54 e4       	ldi	r21, 0x44	; 68
    248e:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    2492:	0e 94 9d 30 	call	0x613a	; 0x613a <__fixunssfsi>
		twi_smart_lcd_fw_set_pos_lon(lon_sgn, lon_deg, lon_min_int, lon_min_frac1000);
    2496:	9b 01       	movw	r18, r22
    2498:	4d 2f       	mov	r20, r29
    249a:	68 2d       	mov	r22, r8
    249c:	8c 2f       	mov	r24, r28
    249e:	0e 94 46 2c 	call	0x588c	; 0x588c <twi_smart_lcd_fw_set_pos_lon>
	}

	{
		uint16_t height;
		uint8_t sreg = SREG;
    24a2:	cf b7       	in	r28, 0x3f	; 63
		cli();
    24a4:	f8 94       	cli
		height = (int16_t) main_nmeaAltitudeM;
    24a6:	60 91 45 05 	lds	r22, 0x0545	; 0x800545 <main_nmeaAltitudeM>
    24aa:	70 91 46 05 	lds	r23, 0x0546	; 0x800546 <main_nmeaAltitudeM+0x1>
    24ae:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <main_nmeaAltitudeM+0x2>
    24b2:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <main_nmeaAltitudeM+0x3>
    24b6:	0e 94 96 30 	call	0x612c	; 0x612c <__fixsfsi>
		SREG = sreg;
    24ba:	cf bf       	out	0x3f, r28	; 63

		twi_smart_lcd_fw_set_pos_height(height);
    24bc:	cb 01       	movw	r24, r22
    24be:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <twi_smart_lcd_fw_set_pos_height>
	}
}
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	1f 91       	pop	r17
    24c8:	0f 91       	pop	r16
    24ca:	ff 90       	pop	r15
    24cc:	ef 90       	pop	r14
    24ce:	df 90       	pop	r13
    24d0:	cf 90       	pop	r12
    24d2:	bf 90       	pop	r11
    24d4:	af 90       	pop	r10
    24d6:	9f 90       	pop	r9
    24d8:	8f 90       	pop	r8
    24da:	7f 90       	pop	r7
    24dc:	6f 90       	pop	r6
    24de:	5f 90       	pop	r5
    24e0:	4f 90       	pop	r4
    24e2:	08 95       	ret

000024e4 <main_fw_sendInitialHelp>:

void main_fw_sendInitialHelp(void)
{
#if 1
	ringbuffer_fw_ringBufferWaitAppend(true, true, PM_COMMAND_HELP, sizeof(PM_COMMAND_HELP));
    24e4:	25 e0       	ldi	r18, 0x05	; 5
    24e6:	42 eb       	ldi	r20, 0xB2	; 178
    24e8:	5d e0       	ldi	r21, 0x0D	; 13
    24ea:	61 e0       	ldi	r22, 0x01	; 1
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
    24f2:	08 95       	ret

000024f4 <main_fw_giveAway>:
	}
#endif
}

void main_fw_giveAway(void)
{
    24f4:	2f 92       	push	r2
    24f6:	3f 92       	push	r3
    24f8:	4f 92       	push	r4
    24fa:	5f 92       	push	r5
    24fc:	6f 92       	push	r6
    24fe:	7f 92       	push	r7
    2500:	8f 92       	push	r8
    2502:	9f 92       	push	r9
    2504:	af 92       	push	r10
    2506:	bf 92       	push	r11
    2508:	cf 92       	push	r12
    250a:	df 92       	push	r13
    250c:	ef 92       	push	r14
    250e:	ff 92       	push	r15
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	60 97       	sbiw	r28, 0x10	; 16
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    wdt_reset();
    2528:	a8 95       	wdr
	usbPoll();
    252a:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <usbPoll>

	usb_fw_sendInInterrupt();
    252e:	0e 94 5f 2c 	call	0x58be	; 0x58be <usb_fw_sendInInterrupt>
	}
}

static void workInQueue(void)
{
	if (ringbuffer_fw_getSemaphore(true)) {
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	0e 94 e6 23 	call	0x47cc	; 0x47cc <ringbuffer_fw_getSemaphore>
    2538:	88 23       	and	r24, r24
    253a:	09 f4       	brne	.+2      	; 0x253e <main_fw_giveAway+0x4a>
    253c:	f2 c3       	rjmp	.+2020   	; 0x2d22 <main_fw_giveAway+0x82e>
		uint8_t isLocked = true;
		enum RINGBUFFER_MSG_STATUS_t statusSend = ringbuffer_fw_getStatusNextMsg(true);
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	0e 94 42 25 	call	0x4a84	; 0x4a84 <ringbuffer_fw_getStatusNextMsg>
    2544:	18 2f       	mov	r17, r24
		enum RINGBUFFER_MSG_STATUS_t statusRcv  = ringbuffer_fw_getStatusNextMsg(false);
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	0e 94 42 25 	call	0x4a84	; 0x4a84 <ringbuffer_fw_getStatusNextMsg>

		if (!(main_bf.mainHelpConcatNr) && (statusSend & RINGBUFFER_MSG_STATUS_AVAIL)) {		// if any message is available and not during help printing
    254c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2550:	96 95       	lsr	r25
    2552:	9f 70       	andi	r25, 0x0F	; 15
    2554:	09 f0       	breq	.+2      	; 0x2558 <main_fw_giveAway+0x64>
    2556:	15 c3       	rjmp	.+1578   	; 0x2b82 <main_fw_giveAway+0x68e>
    2558:	10 ff       	sbrs	r17, 0
    255a:	13 c3       	rjmp	.+1574   	; 0x2b82 <main_fw_giveAway+0x68e>
			if (statusSend & RINGBUFFER_MSG_STATUS_IS_NMEA) {
    255c:	14 ff       	sbrs	r17, 4
    255e:	04 c0       	rjmp	.+8      	; 0x2568 <main_fw_giveAway+0x74>
				serial_fw_pullAndSendNmea_havingSemaphore(true); isLocked = false;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	0e 94 6a 26 	call	0x4cd4	; 0x4cd4 <serial_fw_pullAndSendNmea_havingSemaphore>
    2566:	dd c3       	rjmp	.+1978   	; 0x2d22 <main_fw_giveAway+0x82e>

			} else if ((statusSend & RINGBUFFER_MSG_STATUS_IS_MASK) == 0) {						// message from firmware state machine
    2568:	10 7f       	andi	r17, 0xF0	; 240
    256a:	11 f0       	breq	.+4      	; 0x2570 <main_fw_giveAway+0x7c>
    256c:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <main_fw_giveAway+0x1c5e>
				uint8_t localMsgLen = ringbuffer_fw_ringBufferPull(true, mainInterpreterBuffer, (uint8_t) (sizeof(mainInterpreterBuffer) - 1));
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	6f e8       	ldi	r22, 0x8F	; 143
    2574:	74 e0       	ldi	r23, 0x04	; 4
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	0e 94 af 24 	call	0x495e	; 0x495e <ringbuffer_fw_ringBufferPull>
				ringbuffer_fw_freeSemaphore(true); isLocked = false;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	0e 94 f7 23 	call	0x47ee	; 0x47ee <ringbuffer_fw_freeSemaphore>
			&main_nmeaSatsEphemerisGlonass);
}

static void doInterpret(uchar msg[], uint8_t len)
{
	if (!main_fw_strncmp(msg, PM_GPIB_SCM_IDN, sizeof(PM_GPIB_SCM_IDN))) {
    2582:	46 e0       	ldi	r20, 0x06	; 6
    2584:	50 e0       	ldi	r21, 0x00	; 0
    2586:	67 e6       	ldi	r22, 0x67	; 103
    2588:	7d e0       	ldi	r23, 0x0D	; 13
    258a:	8f e8       	ldi	r24, 0x8F	; 143
    258c:	94 e0       	ldi	r25, 0x04	; 4
    258e:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    2592:	89 2b       	or	r24, r25
    2594:	a1 f5       	brne	.+104    	; 0x25fe <main_fw_giveAway+0x10a>
		/* GPIB commands - SCPI/SCM - *IDN? */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GPIB_SCM_IDN, sizeof(PM_FORMAT_GPIB_SCM_IDN));
    2596:	2c e1       	ldi	r18, 0x1C	; 28
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	53 e0       	ldi	r21, 0x03	; 3
    259e:	6f e8       	ldi	r22, 0x8F	; 143
    25a0:	73 e0       	ldi	r23, 0x03	; 3
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    25a8:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <mainCoef_b00_dev_version>
    25ac:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <mainCoef_b00_dev_version+0x1>
    25b0:	9c 01       	movw	r18, r24
    25b2:	33 27       	eor	r19, r19
    25b4:	3f 93       	push	r19
    25b6:	2f 93       	push	r18
    25b8:	1f 92       	push	r1
    25ba:	9f 93       	push	r25
    25bc:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <mainCoef_b00_dev_serial+0x1>
    25c0:	8f 93       	push	r24
    25c2:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <mainCoef_b00_dev_serial>
    25c6:	8f 93       	push	r24
    25c8:	88 ec       	ldi	r24, 0xC8	; 200
    25ca:	95 e0       	ldi	r25, 0x05	; 5
    25cc:	9f 93       	push	r25
    25ce:	8f 93       	push	r24
    25d0:	8f e8       	ldi	r24, 0x8F	; 143
    25d2:	93 e0       	ldi	r25, 0x03	; 3
    25d4:	9f 93       	push	r25
    25d6:	8f 93       	push	r24
    25d8:	8f e0       	ldi	r24, 0x0F	; 15
    25da:	94 e0       	ldi	r25, 0x04	; 4
    25dc:	9f 93       	push	r25
    25de:	8f 93       	push	r24
    25e0:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				&(mainCoef_b00_dev_header[0]),
				mainCoef_b00_dev_serial,
				mainCoef_b00_dev_version >> 8,
				mainCoef_b00_dev_version & 0xff);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    25e4:	28 2f       	mov	r18, r24
    25e6:	4f e0       	ldi	r20, 0x0F	; 15
    25e8:	54 e0       	ldi	r21, 0x04	; 4
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	92 c3       	rjmp	.+1828   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_AFCOFF, sizeof(PM_COMMAND_AFCOFF))) {
    25fe:	47 e0       	ldi	r20, 0x07	; 7
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	6f ec       	ldi	r22, 0xCF	; 207
    2604:	7d e0       	ldi	r23, 0x0D	; 13
    2606:	8f e8       	ldi	r24, 0x8F	; 143
    2608:	94 e0       	ldi	r25, 0x04	; 4
    260a:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    260e:	89 2b       	or	r24, r25
    2610:	31 f4       	brne	.+12     	; 0x261e <main_fw_giveAway+0x12a>
		/* automatic frequency control OFF */
		main_bf.mainIsAFC = false;
    2612:	e0 e0       	ldi	r30, 0x00	; 0
    2614:	f1 e0       	ldi	r31, 0x01	; 1
    2616:	80 81       	ld	r24, Z
    2618:	8e 7f       	andi	r24, 0xFE	; 254
    261a:	80 83       	st	Z, r24
    261c:	82 c3       	rjmp	.+1796   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_AFCON, sizeof(PM_COMMAND_AFCON))) {
    261e:	46 e0       	ldi	r20, 0x06	; 6
    2620:	50 e0       	ldi	r21, 0x00	; 0
    2622:	69 ec       	ldi	r22, 0xC9	; 201
    2624:	7d e0       	ldi	r23, 0x0D	; 13
    2626:	8f e8       	ldi	r24, 0x8F	; 143
    2628:	94 e0       	ldi	r25, 0x04	; 4
    262a:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    262e:	89 2b       	or	r24, r25
    2630:	31 f4       	brne	.+12     	; 0x263e <main_fw_giveAway+0x14a>
		/* automatic frequency control ON */
		main_bf.mainIsAFC = true;
    2632:	e0 e0       	ldi	r30, 0x00	; 0
    2634:	f1 e0       	ldi	r31, 0x01	; 1
    2636:	80 81       	ld	r24, Z
    2638:	81 60       	ori	r24, 0x01	; 1
    263a:	80 83       	st	Z, r24
    263c:	72 c3       	rjmp	.+1764   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_APCOFF, sizeof(PM_COMMAND_APCOFF))) {
    263e:	47 e0       	ldi	r20, 0x07	; 7
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	62 ec       	ldi	r22, 0xC2	; 194
    2644:	7d e0       	ldi	r23, 0x0D	; 13
    2646:	8f e8       	ldi	r24, 0x8F	; 143
    2648:	94 e0       	ldi	r25, 0x04	; 4
    264a:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    264e:	89 2b       	or	r24, r25
    2650:	31 f4       	brne	.+12     	; 0x265e <main_fw_giveAway+0x16a>
		/* automatic phase control OFF */
		main_bf.mainIsAPC = false;
    2652:	e0 e0       	ldi	r30, 0x00	; 0
    2654:	f1 e0       	ldi	r31, 0x01	; 1
    2656:	80 81       	ld	r24, Z
    2658:	8d 7f       	andi	r24, 0xFD	; 253
    265a:	80 83       	st	Z, r24
    265c:	62 c3       	rjmp	.+1732   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_APCON, sizeof(PM_COMMAND_APCON))) {
    265e:	46 e0       	ldi	r20, 0x06	; 6
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	6c eb       	ldi	r22, 0xBC	; 188
    2664:	7d e0       	ldi	r23, 0x0D	; 13
    2666:	8f e8       	ldi	r24, 0x8F	; 143
    2668:	94 e0       	ldi	r25, 0x04	; 4
    266a:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    266e:	89 2b       	or	r24, r25
    2670:	31 f4       	brne	.+12     	; 0x267e <main_fw_giveAway+0x18a>
		/* automatic phase control ON */
		main_bf.mainIsAPC = true;
    2672:	e0 e0       	ldi	r30, 0x00	; 0
    2674:	f1 e0       	ldi	r31, 0x01	; 1
    2676:	80 81       	ld	r24, Z
    2678:	82 60       	ori	r24, 0x02	; 2
    267a:	80 83       	st	Z, r24
    267c:	52 c3       	rjmp	.+1700   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_HALT, sizeof(PM_COMMAND_HALT))) {
    267e:	45 e0       	ldi	r20, 0x05	; 5
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	67 eb       	ldi	r22, 0xB7	; 183
    2684:	7d e0       	ldi	r23, 0x0D	; 13
    2686:	8f e8       	ldi	r24, 0x8F	; 143
    2688:	94 e0       	ldi	r25, 0x04	; 4
    268a:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    268e:	89 2b       	or	r24, r25
    2690:	71 f5       	brne	.+92     	; 0x26ee <main_fw_giveAway+0x1fa>
		/* stop AVR controller and enter sleep state */
		uint8_t cnt = 250;
		main_bf.mainIsTimerTest = false;
    2692:	e0 e0       	ldi	r30, 0x00	; 0
    2694:	f1 e0       	ldi	r31, 0x01	; 1
    2696:	80 81       	ld	r24, Z
    2698:	8b 7f       	andi	r24, 0xFB	; 251
    269a:	80 83       	st	Z, r24
		main_bf.mainIsUsbCommTest = false;
    269c:	80 81       	ld	r24, Z
    269e:	8f 7e       	andi	r24, 0xEF	; 239
    26a0:	80 83       	st	Z, r24
		main_bf.mainIsSerComm = true;
    26a2:	80 81       	ld	r24, Z
    26a4:	88 60       	ori	r24, 0x08	; 8
    26a6:	80 83       	st	Z, r24
		serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_STBY, sizeof(PM_FORMAT_GPS_STBY));
    26a8:	40 e1       	ldi	r20, 0x10	; 16
    26aa:	64 e9       	ldi	r22, 0x94	; 148
    26ac:	79 e0       	ldi	r23, 0x09	; 9
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	0e 94 57 26 	call	0x4cae	; 0x4cae <serial_fw_copyAndSendNmea>
    26b4:	03 c0       	rjmp	.+6      	; 0x26bc <main_fw_giveAway+0x1c8>

		/* send message until the send buffer is clear */
		while (serial_fw_isTxRunning()) {
			wdt_reset();
    26b6:	a8 95       	wdr
			usbPoll();
    26b8:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <usbPoll>
		main_bf.mainIsUsbCommTest = false;
		main_bf.mainIsSerComm = true;
		serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_STBY, sizeof(PM_FORMAT_GPS_STBY));

		/* send message until the send buffer is clear */
		while (serial_fw_isTxRunning()) {
    26bc:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <serial_fw_isTxRunning>
    26c0:	81 11       	cpse	r24, r1
    26c2:	f9 cf       	rjmp	.-14     	; 0x26b6 <main_fw_giveAway+0x1c2>
    26c4:	19 ef       	ldi	r17, 0xF9	; 249
			usbPoll();
		};

		/* give some time for the GPS module before powering down */
		while (--cnt) {
			wdt_reset();
    26c6:	a8 95       	wdr
			usbPoll();
    26c8:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <usbPoll>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26cc:	87 e8       	ldi	r24, 0x87	; 135
    26ce:	93 e1       	ldi	r25, 0x13	; 19
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <main_fw_giveAway+0x1dc>
    26d4:	00 c0       	rjmp	.+0      	; 0x26d6 <main_fw_giveAway+0x1e2>
    26d6:	00 00       	nop
    26d8:	11 50       	subi	r17, 0x01	; 1
			wdt_reset();
			usbPoll();
		};

		/* give some time for the GPS module before powering down */
		while (--cnt) {
    26da:	a9 f7       	brne	.-22     	; 0x26c6 <main_fw_giveAway+0x1d2>
			wdt_reset();
			usbPoll();
			_delay_ms(1);
		}

		main_bf.mainIsSerComm = false;
    26dc:	e0 e0       	ldi	r30, 0x00	; 0
    26de:	f1 e0       	ldi	r31, 0x01	; 1
    26e0:	80 81       	ld	r24, Z
    26e2:	87 7f       	andi	r24, 0xF7	; 247
    26e4:	80 83       	st	Z, r24
		main_bf.mainStopAvr = true;
    26e6:	80 81       	ld	r24, Z
    26e8:	80 62       	ori	r24, 0x20	; 32
    26ea:	80 83       	st	Z, r24
    26ec:	1a c3       	rjmp	.+1588   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_HELP, sizeof(PM_COMMAND_HELP))) {
    26ee:	45 e0       	ldi	r20, 0x05	; 5
    26f0:	50 e0       	ldi	r21, 0x00	; 0
    26f2:	62 eb       	ldi	r22, 0xB2	; 178
    26f4:	7d e0       	ldi	r23, 0x0D	; 13
    26f6:	8f e8       	ldi	r24, 0x8F	; 143
    26f8:	94 e0       	ldi	r25, 0x04	; 4
    26fa:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    26fe:	89 2b       	or	r24, r25
    2700:	e1 f5       	brne	.+120    	; 0x277a <main_fw_giveAway+0x286>
		/* help information */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_VERSION, sizeof(PM_FORMAT_VERSION));
    2702:	22 e4       	ldi	r18, 0x42	; 66
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	42 eb       	ldi	r20, 0xB2	; 178
    2708:	59 e0       	ldi	r21, 0x09	; 9
    270a:	6f e8       	ldi	r22, 0x8F	; 143
    270c:	73 e0       	ldi	r23, 0x03	; 3
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		int len = snprintf((char*) mainPrepareBuffer, sizeof(mainPrepareBuffer) - 1, (char*) mainFormatBuffer, VERSION_HIGH, VERSION_LOW);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	8f 93       	push	r24
    2718:	86 e4       	ldi	r24, 0x46	; 70
    271a:	8f 93       	push	r24
    271c:	1f 92       	push	r1
    271e:	8a ea       	ldi	r24, 0xAA	; 170
    2720:	8f 93       	push	r24
    2722:	8f e8       	ldi	r24, 0x8F	; 143
    2724:	93 e0       	ldi	r25, 0x03	; 3
    2726:	9f 93       	push	r25
    2728:	8f 93       	push	r24
    272a:	1f 92       	push	r1
    272c:	8f e7       	ldi	r24, 0x7F	; 127
    272e:	8f 93       	push	r24
    2730:	8f e0       	ldi	r24, 0x0F	; 15
    2732:	94 e0       	ldi	r25, 0x04	; 4
    2734:	9f 93       	push	r25
    2736:	8f 93       	push	r24
    2738:	0e 94 96 3d 	call	0x7b2c	; 0x7b2c <snprintf>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    273c:	28 2f       	mov	r18, r24
    273e:	4f e0       	ldi	r20, 0x0F	; 15
    2740:	54 e0       	ldi	r21, 0x04	; 4
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
		ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP01, sizeof(PM_INTERPRETER_HELP01));
    274a:	22 e4       	ldi	r18, 0x42	; 66
    274c:	45 e2       	ldi	r20, 0x25	; 37
    274e:	5d e0       	ldi	r21, 0x0D	; 13
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
		main_bf.mainHelpConcatNr = 1;
    2758:	e1 e0       	ldi	r30, 0x01	; 1
    275a:	f1 e0       	ldi	r31, 0x01	; 1
    275c:	80 81       	ld	r24, Z
    275e:	81 7e       	andi	r24, 0xE1	; 225
    2760:	82 60       	ori	r24, 0x02	; 2
    2762:	80 83       	st	Z, r24
		main_bf.mainIsUsbCommTest = false;
    2764:	e0 e0       	ldi	r30, 0x00	; 0
    2766:	f1 e0       	ldi	r31, 0x01	; 1
    2768:	80 81       	ld	r24, Z
    276a:	8f 7e       	andi	r24, 0xEF	; 239
    276c:	80 83       	st	Z, r24
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	d4 c2       	rjmp	.+1448   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_INFO, sizeof(PM_COMMAND_INFO))) {
    277a:	45 e0       	ldi	r20, 0x05	; 5
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	6d ea       	ldi	r22, 0xAD	; 173
    2780:	7d e0       	ldi	r23, 0x0D	; 13
    2782:	8f e8       	ldi	r24, 0x8F	; 143
    2784:	94 e0       	ldi	r25, 0x04	; 4
    2786:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    278a:	89 2b       	or	r24, r25
    278c:	b1 f4       	brne	.+44     	; 0x27ba <main_fw_giveAway+0x2c6>
		/* timer 2 overflow counter TEST */
		main_bf.mainIsTimerTest = !(main_bf.mainIsTimerTest);
    278e:	e0 e0       	ldi	r30, 0x00	; 0
    2790:	f1 e0       	ldi	r31, 0x01	; 1
    2792:	80 81       	ld	r24, Z
    2794:	82 fb       	bst	r24, 2
    2796:	99 27       	eor	r25, r25
    2798:	90 f9       	bld	r25, 0
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	89 27       	eor	r24, r25
    279e:	90 81       	ld	r25, Z
    27a0:	80 fb       	bst	r24, 0
    27a2:	92 f9       	bld	r25, 2
    27a4:	90 83       	st	Z, r25
		if (main_bf.mainIsTimerTest) {
    27a6:	80 81       	ld	r24, Z
    27a8:	82 ff       	sbrs	r24, 2
    27aa:	bb c2       	rjmp	.+1398   	; 0x2d22 <main_fw_giveAway+0x82e>
			main_bf.mainIsSerComm = false;
    27ac:	80 81       	ld	r24, Z
    27ae:	87 7f       	andi	r24, 0xF7	; 247
    27b0:	80 83       	st	Z, r24
			main_bf.mainIsUsbCommTest = false;
    27b2:	80 81       	ld	r24, Z
    27b4:	8f 7e       	andi	r24, 0xEF	; 239
    27b6:	80 83       	st	Z, r24
    27b8:	b4 c2       	rjmp	.+1384   	; 0x2d22 <main_fw_giveAway+0x82e>
		}

	} else if (!main_fw_strncmp(msg, PM_COMMAND_LEDOFF, sizeof(PM_COMMAND_LEDOFF))) {
    27ba:	47 e0       	ldi	r20, 0x07	; 7
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	66 ea       	ldi	r22, 0xA6	; 166
    27c0:	7d e0       	ldi	r23, 0x0D	; 13
    27c2:	8f e8       	ldi	r24, 0x8F	; 143
    27c4:	94 e0       	ldi	r25, 0x04	; 4
    27c6:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    27ca:	89 2b       	or	r24, r25
    27cc:	99 f4       	brne	.+38     	; 0x27f4 <main_fw_giveAway+0x300>
		/* backlight of the LCD module OFF */
		const uint8_t lcdLedMode = LCD_LED_MODE_OFF;
    27ce:	19 82       	std	Y+1, r1	; 0x01
		main_bf.mainLcdLedMode = lcdLedMode;
    27d0:	e1 e0       	ldi	r30, 0x01	; 1
    27d2:	f1 e0       	ldi	r31, 0x01	; 1
    27d4:	80 81       	ld	r24, Z
    27d6:	8f 71       	andi	r24, 0x1F	; 31
    27d8:	80 83       	st	Z, r24

		memory_fw_writeEEpromPage((uint8_t*) &lcdLedMode, sizeof(uint8_t), offsetof(eeprom_layout_t, b00.b00_lcdLedMode));
    27da:	44 e1       	ldi	r20, 0x14	; 20
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	61 e0       	ldi	r22, 0x01	; 1
    27e0:	ce 01       	movw	r24, r28
    27e2:	01 96       	adiw	r24, 0x01	; 1
    27e4:	0e 94 2a 23 	call	0x4654	; 0x4654 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_HEADER_NR, offsetof(eeprom_layout_t, b00.b00_crc));
    27e8:	6e e1       	ldi	r22, 0x1E	; 30
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <recalcEepromCrc>
    27f2:	97 c2       	rjmp	.+1326   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_LEDON, sizeof(PM_COMMAND_LEDON))) {
    27f4:	46 e0       	ldi	r20, 0x06	; 6
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	60 ea       	ldi	r22, 0xA0	; 160
    27fa:	7d e0       	ldi	r23, 0x0D	; 13
    27fc:	8f e8       	ldi	r24, 0x8F	; 143
    27fe:	94 e0       	ldi	r25, 0x04	; 4
    2800:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    2804:	89 2b       	or	r24, r25
    2806:	a9 f4       	brne	.+42     	; 0x2832 <main_fw_giveAway+0x33e>
		/* backlight of the LCD module ON */
		const uint8_t lcdLedMode = LCD_LED_MODE_ON;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	89 83       	std	Y+1, r24	; 0x01
		main_bf.mainLcdLedMode = lcdLedMode;
    280c:	e1 e0       	ldi	r30, 0x01	; 1
    280e:	f1 e0       	ldi	r31, 0x01	; 1
    2810:	80 81       	ld	r24, Z
    2812:	8f 71       	andi	r24, 0x1F	; 31
    2814:	80 62       	ori	r24, 0x20	; 32
    2816:	80 83       	st	Z, r24

		memory_fw_writeEEpromPage((uint8_t*) &lcdLedMode, sizeof(uint8_t), offsetof(eeprom_layout_t, b00.b00_lcdLedMode));
    2818:	44 e1       	ldi	r20, 0x14	; 20
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	61 e0       	ldi	r22, 0x01	; 1
    281e:	ce 01       	movw	r24, r28
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	0e 94 2a 23 	call	0x4654	; 0x4654 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_HEADER_NR, offsetof(eeprom_layout_t, b00.b00_crc));
    2826:	6e e1       	ldi	r22, 0x1E	; 30
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <recalcEepromCrc>
    2830:	78 c2       	rjmp	.+1264   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_SEROFF, sizeof(PM_COMMAND_SEROFF))) {
    2832:	47 e0       	ldi	r20, 0x07	; 7
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	61 e9       	ldi	r22, 0x91	; 145
    2838:	7d e0       	ldi	r23, 0x0D	; 13
    283a:	8f e8       	ldi	r24, 0x8F	; 143
    283c:	94 e0       	ldi	r25, 0x04	; 4
    283e:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    2842:	89 2b       	or	r24, r25
    2844:	31 f4       	brne	.+12     	; 0x2852 <main_fw_giveAway+0x35e>
		/* serial communication OFF */
		main_bf.mainIsSerComm = false;
    2846:	e0 e0       	ldi	r30, 0x00	; 0
    2848:	f1 e0       	ldi	r31, 0x01	; 1
    284a:	80 81       	ld	r24, Z
    284c:	87 7f       	andi	r24, 0xF7	; 247
    284e:	80 83       	st	Z, r24
    2850:	68 c2       	rjmp	.+1232   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_SERON, sizeof(PM_COMMAND_SERON))) {
    2852:	46 e0       	ldi	r20, 0x06	; 6
    2854:	50 e0       	ldi	r21, 0x00	; 0
    2856:	6b e8       	ldi	r22, 0x8B	; 139
    2858:	7d e0       	ldi	r23, 0x0D	; 13
    285a:	8f e8       	ldi	r24, 0x8F	; 143
    285c:	94 e0       	ldi	r25, 0x04	; 4
    285e:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    2862:	89 2b       	or	r24, r25
    2864:	61 f4       	brne	.+24     	; 0x287e <main_fw_giveAway+0x38a>
		/* serial communication ON */
		main_bf.mainIsSerComm = true;
    2866:	e0 e0       	ldi	r30, 0x00	; 0
    2868:	f1 e0       	ldi	r31, 0x01	; 1
    286a:	80 81       	ld	r24, Z
    286c:	88 60       	ori	r24, 0x08	; 8
    286e:	80 83       	st	Z, r24
		main_bf.mainIsTimerTest = false;
    2870:	80 81       	ld	r24, Z
    2872:	8b 7f       	andi	r24, 0xFB	; 251
    2874:	80 83       	st	Z, r24
		main_bf.mainIsUsbCommTest = false;
    2876:	80 81       	ld	r24, Z
    2878:	8f 7e       	andi	r24, 0xEF	; 239
    287a:	80 83       	st	Z, r24
    287c:	52 c2       	rjmp	.+1188   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_memcmp(msg, PM_COMMAND_SERBAUD, sizeof(PM_COMMAND_SERBAUD) - 1)) {
    287e:	47 e0       	ldi	r20, 0x07	; 7
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	68 e9       	ldi	r22, 0x98	; 152
    2884:	7d e0       	ldi	r23, 0x0D	; 13
    2886:	8f e8       	ldi	r24, 0x8F	; 143
    2888:	94 e0       	ldi	r25, 0x04	; 4
    288a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <main_fw_memcmp>
    288e:	89 2b       	or	r24, r25
    2890:	09 f0       	breq	.+2      	; 0x2894 <main_fw_giveAway+0x3a0>
    2892:	46 c0       	rjmp	.+140    	; 0x2920 <main_fw_giveAway+0x42c>
		/* serial communication baud parameter */
		sscanf((char*) msg + sizeof(PM_COMMAND_SERBAUD) - 1, "%d", &serialCoef_b03_serial_baud);
    2894:	82 e2       	ldi	r24, 0x22	; 34
    2896:	95 e0       	ldi	r25, 0x05	; 5
    2898:	9f 93       	push	r25
    289a:	8f 93       	push	r24
    289c:	8f e0       	ldi	r24, 0x0F	; 15
    289e:	91 e0       	ldi	r25, 0x01	; 1
    28a0:	9f 93       	push	r25
    28a2:	8f 93       	push	r24
    28a4:	86 e9       	ldi	r24, 0x96	; 150
    28a6:	94 e0       	ldi	r25, 0x04	; 4
    28a8:	9f 93       	push	r25
    28aa:	8f 93       	push	r24
    28ac:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <sscanf>
		serial_fw_setCommBaud(serialCoef_b03_serial_baud);
    28b0:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <serialCoef_b03_serial_baud>
    28b4:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <serialCoef_b03_serial_baud+0x1>
    28b8:	0e 94 e5 25 	call	0x4bca	; 0x4bca <serial_fw_setCommBaud>

		/* write current baud rate as the default/startup value to the EEPROM */
		memory_fw_writeEEpromPage((uint8_t*) &serialCoef_b03_serial_baud, sizeof(uint16_t), offsetof(eeprom_layout_t, b03.b03_serial_baud));
    28bc:	40 e6       	ldi	r20, 0x60	; 96
    28be:	50 e0       	ldi	r21, 0x00	; 0
    28c0:	62 e0       	ldi	r22, 0x02	; 2
    28c2:	82 e2       	ldi	r24, 0x22	; 34
    28c4:	95 e0       	ldi	r25, 0x05	; 5
    28c6:	0e 94 2a 23 	call	0x4654	; 0x4654 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_GPS_NR, offsetof(eeprom_layout_t, b03.b03_crc));
    28ca:	6e e7       	ldi	r22, 0x7E	; 126
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	83 e0       	ldi	r24, 0x03	; 3
    28d0:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <recalcEepromCrc>

		/* user information */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SET_BAUD, sizeof(PM_FORMAT_SET_BAUD));
    28d4:	2a e2       	ldi	r18, 0x2A	; 42
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	45 e5       	ldi	r20, 0x55	; 85
    28da:	53 e0       	ldi	r21, 0x03	; 3
    28dc:	6f e8       	ldi	r22, 0x8F	; 143
    28de:	73 e0       	ldi	r23, 0x03	; 3
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    28e6:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <serialCoef_b03_serial_baud+0x1>
    28ea:	8f 93       	push	r24
    28ec:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <serialCoef_b03_serial_baud>
    28f0:	8f 93       	push	r24
    28f2:	8f e8       	ldi	r24, 0x8F	; 143
    28f4:	93 e0       	ldi	r25, 0x03	; 3
    28f6:	9f 93       	push	r25
    28f8:	8f 93       	push	r24
    28fa:	8f e0       	ldi	r24, 0x0F	; 15
    28fc:	94 e0       	ldi	r25, 0x04	; 4
    28fe:	9f 93       	push	r25
    2900:	8f 93       	push	r24
    2902:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				serialCoef_b03_serial_baud);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2906:	28 2f       	mov	r18, r24
    2908:	4f e0       	ldi	r20, 0x0F	; 15
    290a:	54 e0       	ldi	r21, 0x04	; 4
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	01 c2       	rjmp	.+1026   	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_STACK, sizeof(PM_COMMAND_STACK))) {
    2920:	46 e0       	ldi	r20, 0x06	; 6
    2922:	50 e0       	ldi	r21, 0x00	; 0
    2924:	65 e8       	ldi	r22, 0x85	; 133
    2926:	7d e0       	ldi	r23, 0x0D	; 13
    2928:	8f e8       	ldi	r24, 0x8F	; 143
    292a:	94 e0       	ldi	r25, 0x04	; 4
    292c:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    2930:	89 2b       	or	r24, r25
    2932:	69 f4       	brne	.+26     	; 0x294e <main_fw_giveAway+0x45a>
		/* Stack Check facility */
		main_bf.mainStackCheck = !(main_bf.mainStackCheck);
    2934:	e0 e0       	ldi	r30, 0x00	; 0
    2936:	f1 e0       	ldi	r31, 0x01	; 1
    2938:	80 81       	ld	r24, Z
    293a:	86 fb       	bst	r24, 6
    293c:	99 27       	eor	r25, r25
    293e:	90 f9       	bld	r25, 0
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	89 27       	eor	r24, r25
    2944:	90 81       	ld	r25, Z
    2946:	80 fb       	bst	r24, 0
    2948:	96 f9       	bld	r25, 6
    294a:	90 83       	st	Z, r25
    294c:	ea c1       	rjmp	.+980    	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_TEST, sizeof(PM_COMMAND_TEST))) {
    294e:	45 e0       	ldi	r20, 0x05	; 5
    2950:	50 e0       	ldi	r21, 0x00	; 0
    2952:	60 e8       	ldi	r22, 0x80	; 128
    2954:	7d e0       	ldi	r23, 0x0D	; 13
    2956:	8f e8       	ldi	r24, 0x8F	; 143
    2958:	94 e0       	ldi	r25, 0x04	; 4
    295a:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    295e:	89 2b       	or	r24, r25
    2960:	b1 f4       	brne	.+44     	; 0x298e <main_fw_giveAway+0x49a>
		/* special communication TEST */
		main_bf.mainIsUsbCommTest = !(main_bf.mainIsUsbCommTest);
    2962:	e0 e0       	ldi	r30, 0x00	; 0
    2964:	f1 e0       	ldi	r31, 0x01	; 1
    2966:	80 81       	ld	r24, Z
    2968:	84 fb       	bst	r24, 4
    296a:	99 27       	eor	r25, r25
    296c:	90 f9       	bld	r25, 0
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	89 27       	eor	r24, r25
    2972:	90 81       	ld	r25, Z
    2974:	80 fb       	bst	r24, 0
    2976:	94 f9       	bld	r25, 4
    2978:	90 83       	st	Z, r25
		if (main_bf.mainIsUsbCommTest) {
    297a:	80 81       	ld	r24, Z
    297c:	84 ff       	sbrs	r24, 4
    297e:	d1 c1       	rjmp	.+930    	; 0x2d22 <main_fw_giveAway+0x82e>
			main_bf.mainIsSerComm = false;
    2980:	80 81       	ld	r24, Z
    2982:	87 7f       	andi	r24, 0xF7	; 247
    2984:	80 83       	st	Z, r24
			main_bf.mainIsTimerTest = false;
    2986:	80 81       	ld	r24, Z
    2988:	8b 7f       	andi	r24, 0xFB	; 251
    298a:	80 83       	st	Z, r24
    298c:	ca c1       	rjmp	.+916    	; 0x2d22 <main_fw_giveAway+0x82e>
		}

	} else if (!main_fw_strncmp(msg, PM_COMMAND_WRITEPWM, sizeof(PM_COMMAND_WRITEPWM))) {
    298e:	49 e0       	ldi	r20, 0x09	; 9
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	67 e7       	ldi	r22, 0x77	; 119
    2994:	7d e0       	ldi	r23, 0x0D	; 13
    2996:	8f e8       	ldi	r24, 0x8F	; 143
    2998:	94 e0       	ldi	r25, 0x04	; 4
    299a:	0e 94 33 0c 	call	0x1866	; 0x1866 <main_fw_strncmp>
    299e:	89 2b       	or	r24, r25
    29a0:	f9 f4       	brne	.+62     	; 0x29e0 <main_fw_giveAway+0x4ec>
		/* write current PWM value as the default/startup value to the EEPROM */
		uint8_t sreg = SREG;
    29a2:	8f b7       	in	r24, 0x3f	; 63
		cli();
    29a4:	f8 94       	cli
		pullCoef_b02_pwm_initial		= fastPwmLoopVal;
    29a6:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <fastPwmLoopVal>
    29aa:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <pullCoef_b02_pwm_initial>
		pullCoef_b02_pwm_initial_sub	= fastPwmSubLoopVal;
    29ae:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <fastPwmSubLoopVal>
    29b2:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <pullCoef_b02_pwm_initial_sub>
		SREG = sreg;
    29b6:	8f bf       	out	0x3f, r24	; 63

		memory_fw_writeEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial));
    29b8:	4a e5       	ldi	r20, 0x5A	; 90
    29ba:	50 e0       	ldi	r21, 0x00	; 0
    29bc:	61 e0       	ldi	r22, 0x01	; 1
    29be:	82 e4       	ldi	r24, 0x42	; 66
    29c0:	95 e0       	ldi	r25, 0x05	; 5
    29c2:	0e 94 2a 23 	call	0x4654	; 0x4654 <memory_fw_writeEEpromPage>
		memory_fw_writeEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial_sub, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial_sub));
    29c6:	4b e5       	ldi	r20, 0x5B	; 91
    29c8:	50 e0       	ldi	r21, 0x00	; 0
    29ca:	61 e0       	ldi	r22, 0x01	; 1
    29cc:	81 e4       	ldi	r24, 0x41	; 65
    29ce:	95 e0       	ldi	r25, 0x05	; 5
    29d0:	0e 94 2a 23 	call	0x4654	; 0x4654 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_REFOSC_NR, offsetof(eeprom_layout_t, b02.b02_crc));
    29d4:	6e e5       	ldi	r22, 0x5E	; 94
    29d6:	70 e0       	ldi	r23, 0x00	; 0
    29d8:	82 e0       	ldi	r24, 0x02	; 2
    29da:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <recalcEepromCrc>
    29de:	a1 c1       	rjmp	.+834    	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (!main_fw_memcmp(msg, PM_COMMAND_WRITETEMP, sizeof(PM_COMMAND_WRITETEMP) - 1)) {
    29e0:	49 e0       	ldi	r20, 0x09	; 9
    29e2:	50 e0       	ldi	r21, 0x00	; 0
    29e4:	6d e6       	ldi	r22, 0x6D	; 109
    29e6:	7d e0       	ldi	r23, 0x0D	; 13
    29e8:	8f e8       	ldi	r24, 0x8F	; 143
    29ea:	94 e0       	ldi	r25, 0x04	; 4
    29ec:	0e 94 4b 0c 	call	0x1896	; 0x1896 <main_fw_memcmp>
    29f0:	89 2b       	or	r24, r25
    29f2:	09 f0       	breq	.+2      	; 0x29f6 <main_fw_giveAway+0x502>
    29f4:	5e c0       	rjmp	.+188    	; 0x2ab2 <main_fw_giveAway+0x5be>
		float localTemp = 0.0f;
    29f6:	19 82       	std	Y+1, r1	; 0x01
    29f8:	1a 82       	std	Y+2, r1	; 0x02
    29fa:	1b 82       	std	Y+3, r1	; 0x03
    29fc:	1c 82       	std	Y+4, r1	; 0x04
		/* take current temperature value to correct the displayed values */
		sscanf(((char*) msg) + sizeof(PM_COMMAND_WRITETEMP) - 1, "%f", &localTemp);
    29fe:	ce 01       	movw	r24, r28
    2a00:	01 96       	adiw	r24, 0x01	; 1
    2a02:	9f 93       	push	r25
    2a04:	8f 93       	push	r24
    2a06:	82 e1       	ldi	r24, 0x12	; 18
    2a08:	91 e0       	ldi	r25, 0x01	; 1
    2a0a:	9f 93       	push	r25
    2a0c:	8f 93       	push	r24
    2a0e:	88 e9       	ldi	r24, 0x98	; 152
    2a10:	94 e0       	ldi	r25, 0x04	; 4
    2a12:	9f 93       	push	r25
    2a14:	8f 93       	push	r24
    2a16:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <sscanf>
		if (localTemp) {
    2a1a:	c9 80       	ldd	r12, Y+1	; 0x01
    2a1c:	da 80       	ldd	r13, Y+2	; 0x02
    2a1e:	eb 80       	ldd	r14, Y+3	; 0x03
    2a20:	fc 80       	ldd	r15, Y+4	; 0x04
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	a9 01       	movw	r20, r18
    2a34:	c7 01       	movw	r24, r14
    2a36:	b6 01       	movw	r22, r12
    2a38:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    2a3c:	88 23       	and	r24, r24
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <main_fw_giveAway+0x54e>
    2a40:	70 c1       	rjmp	.+736    	; 0x2d22 <main_fw_giveAway+0x82e>
			/* calculate the new correction value */
			mainCoef_b01_temp_ofs_adc_25C_steps = (acAdcCh[ADC_CH_TEMP] - ((localTemp - 25.0f) / mainCoef_b01_temp_k_p1step_adc_K));
    2a42:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <acAdcCh+0x4>
    2a46:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <acAdcCh+0x5>
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	0e 94 cc 30 	call	0x6198	; 0x6198 <__floatunsisf>
    2a54:	4b 01       	movw	r8, r22
    2a56:	5c 01       	movw	r10, r24
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	48 ec       	ldi	r20, 0xC8	; 200
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	c7 01       	movw	r24, r14
    2a62:	b6 01       	movw	r22, r12
    2a64:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    2a68:	20 91 b4 05 	lds	r18, 0x05B4	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K>
    2a6c:	30 91 b5 05 	lds	r19, 0x05B5	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    2a70:	40 91 b6 05 	lds	r20, 0x05B6	; 0x8005b6 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    2a74:	50 91 b7 05 	lds	r21, 0x05B7	; 0x8005b7 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
    2a78:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    2a7c:	9b 01       	movw	r18, r22
    2a7e:	ac 01       	movw	r20, r24
    2a80:	c5 01       	movw	r24, r10
    2a82:	b4 01       	movw	r22, r8
    2a84:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    2a88:	60 93 b8 05 	sts	0x05B8, r22	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps>
    2a8c:	70 93 b9 05 	sts	0x05B9, r23	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    2a90:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    2a94:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>

			/* write the correction value to the EEPROM */
			memory_fw_writeEEpromPage((uint8_t*) &mainCoef_b01_temp_ofs_adc_25C_steps, sizeof(float), offsetof(eeprom_layout_t, b01.b01_temp_ofs_adc_25C_steps));
    2a98:	48 e2       	ldi	r20, 0x28	; 40
    2a9a:	50 e0       	ldi	r21, 0x00	; 0
    2a9c:	64 e0       	ldi	r22, 0x04	; 4
    2a9e:	88 eb       	ldi	r24, 0xB8	; 184
    2aa0:	95 e0       	ldi	r25, 0x05	; 5
    2aa2:	0e 94 2a 23 	call	0x4654	; 0x4654 <memory_fw_writeEEpromPage>
			recalcEepromCrc(BLOCK_MEASURING_NR, offsetof(eeprom_layout_t, b01.b01_crc));
    2aa6:	6e e3       	ldi	r22, 0x3E	; 62
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <recalcEepromCrc>
    2ab0:	38 c1       	rjmp	.+624    	; 0x2d22 <main_fw_giveAway+0x82e>
		}
	} else if (msg[0] == PM_COMMAND_PLUSSIGN[0]) {
    2ab2:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <mainInterpreterBuffer>
    2ab6:	8b 32       	cpi	r24, 0x2B	; 43
    2ab8:	a9 f4       	brne	.+42     	; 0x2ae4 <main_fw_giveAway+0x5f0>
		/* correct the PWM value up */
		sscanf(((char*) msg) + 1, "%f", &mainPwmTerminalAdj);
    2aba:	8b e9       	ldi	r24, 0x9B	; 155
    2abc:	95 e0       	ldi	r25, 0x05	; 5
    2abe:	9f 93       	push	r25
    2ac0:	8f 93       	push	r24
    2ac2:	82 e1       	ldi	r24, 0x12	; 18
    2ac4:	91 e0       	ldi	r25, 0x01	; 1
    2ac6:	9f 93       	push	r25
    2ac8:	8f 93       	push	r24
    2aca:	80 e9       	ldi	r24, 0x90	; 144
    2acc:	94 e0       	ldi	r25, 0x04	; 4
    2ace:	9f 93       	push	r25
    2ad0:	8f 93       	push	r24
    2ad2:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <sscanf>
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	1f c1       	rjmp	.+574    	; 0x2d22 <main_fw_giveAway+0x82e>

	} else if (msg[0] == PM_COMMAND_MINUSSIGN[0]) {
    2ae4:	8d 32       	cpi	r24, 0x2D	; 45
    2ae6:	31 f5       	brne	.+76     	; 0x2b34 <main_fw_giveAway+0x640>
		/* correct the PWM value down */
		sscanf(((char*) msg) + 1, "%f", &mainPwmTerminalAdj);
    2ae8:	8b e9       	ldi	r24, 0x9B	; 155
    2aea:	95 e0       	ldi	r25, 0x05	; 5
    2aec:	9f 93       	push	r25
    2aee:	8f 93       	push	r24
    2af0:	82 e1       	ldi	r24, 0x12	; 18
    2af2:	91 e0       	ldi	r25, 0x01	; 1
    2af4:	9f 93       	push	r25
    2af6:	8f 93       	push	r24
    2af8:	80 e9       	ldi	r24, 0x90	; 144
    2afa:	94 e0       	ldi	r25, 0x04	; 4
    2afc:	9f 93       	push	r25
    2afe:	8f 93       	push	r24
    2b00:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <sscanf>
		mainPwmTerminalAdj = -mainPwmTerminalAdj;
    2b04:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <mainPwmTerminalAdj>
    2b08:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x1>
    2b0c:	a0 91 9d 05 	lds	r26, 0x059D	; 0x80059d <mainPwmTerminalAdj+0x2>
    2b10:	b0 91 9e 05 	lds	r27, 0x059E	; 0x80059e <mainPwmTerminalAdj+0x3>
    2b14:	b0 58       	subi	r27, 0x80	; 128
    2b16:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <mainPwmTerminalAdj>
    2b1a:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <mainPwmTerminalAdj+0x1>
    2b1e:	a0 93 9d 05 	sts	0x059D, r26	; 0x80059d <mainPwmTerminalAdj+0x2>
    2b22:	b0 93 9e 05 	sts	0x059E, r27	; 0x80059e <mainPwmTerminalAdj+0x3>
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
    2b32:	f7 c0       	rjmp	.+494    	; 0x2d22 <main_fw_giveAway+0x82e>

	} else {
		/* unknown command */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_INTERPRETER_UNKNOWN, sizeof(PM_INTERPRETER_UNKNOWN));
    2b34:	21 e3       	ldi	r18, 0x31	; 49
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	44 ef       	ldi	r20, 0xF4	; 244
    2b3a:	59 e0       	ldi	r21, 0x09	; 9
    2b3c:	6f e8       	ldi	r22, 0x8F	; 143
    2b3e:	73 e0       	ldi	r23, 0x03	; 3
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		int len = snprintf((char*) mainPrepareBuffer, sizeof(mainPrepareBuffer) - 1, (char*) mainFormatBuffer, msg);
    2b46:	8f e8       	ldi	r24, 0x8F	; 143
    2b48:	94 e0       	ldi	r25, 0x04	; 4
    2b4a:	9f 93       	push	r25
    2b4c:	8f 93       	push	r24
    2b4e:	8f e8       	ldi	r24, 0x8F	; 143
    2b50:	93 e0       	ldi	r25, 0x03	; 3
    2b52:	9f 93       	push	r25
    2b54:	8f 93       	push	r24
    2b56:	1f 92       	push	r1
    2b58:	8f e7       	ldi	r24, 0x7F	; 127
    2b5a:	8f 93       	push	r24
    2b5c:	8f e0       	ldi	r24, 0x0F	; 15
    2b5e:	94 e0       	ldi	r25, 0x04	; 4
    2b60:	9f 93       	push	r25
    2b62:	8f 93       	push	r24
    2b64:	0e 94 96 3d 	call	0x7b2c	; 0x7b2c <snprintf>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2b68:	28 2f       	mov	r18, r24
    2b6a:	4f e0       	ldi	r20, 0x0F	; 15
    2b6c:	54 e0       	ldi	r21, 0x04	; 4
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	f8 94       	cli
    2b7a:	de bf       	out	0x3e, r29	; 62
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	cd bf       	out	0x3d, r28	; 61
    2b80:	d0 c0       	rjmp	.+416    	; 0x2d22 <main_fw_giveAway+0x82e>
#endif

				doInterpret(mainInterpreterBuffer, localMsgLen);								// message is clean to process
			}

		} else if (main_bf.mainHelpConcatNr && !(statusRcv & RINGBUFFER_MSG_STATUS_AVAIL)) {	// during help printing, go ahead when receive buffer is empty again
    2b82:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2b86:	96 95       	lsr	r25
    2b88:	9f 70       	andi	r25, 0x0F	; 15
    2b8a:	11 f4       	brne	.+4      	; 0x2b90 <main_fw_giveAway+0x69c>
    2b8c:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <main_fw_giveAway+0x1c5e>
    2b90:	80 ff       	sbrs	r24, 0
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <main_fw_giveAway+0x6a4>
    2b94:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <main_fw_giveAway+0x1c5e>
			ringbuffer_fw_freeSemaphore(true); isLocked = false;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	0e 94 f7 23 	call	0x47ee	; 0x47ee <ringbuffer_fw_freeSemaphore>

			switch (main_bf.mainHelpConcatNr) {
    2b9e:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    2ba2:	e6 95       	lsr	r30
    2ba4:	ef 70       	andi	r30, 0x0F	; 15
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	31 97       	sbiw	r30, 0x01	; 1
    2baa:	ed 30       	cpi	r30, 0x0D	; 13
    2bac:	f1 05       	cpc	r31, r1
    2bae:	08 f0       	brcs	.+2      	; 0x2bb2 <main_fw_giveAway+0x6be>
    2bb0:	b3 c0       	rjmp	.+358    	; 0x2d18 <main_fw_giveAway+0x824>
    2bb2:	ec 5c       	subi	r30, 0xCC	; 204
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	0c 94 87 3b 	jmp	0x770e	; 0x770e <__tablejump2__>
			case 1:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP02, sizeof(PM_INTERPRETER_HELP02));
    2bba:	2f e6       	ldi	r18, 0x6F	; 111
    2bbc:	46 eb       	ldi	r20, 0xB6	; 182
    2bbe:	5c e0       	ldi	r21, 0x0C	; 12
    2bc0:	61 e0       	ldi	r22, 0x01	; 1
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 2;
    2bc8:	e1 e0       	ldi	r30, 0x01	; 1
    2bca:	f1 e0       	ldi	r31, 0x01	; 1
    2bcc:	80 81       	ld	r24, Z
    2bce:	81 7e       	andi	r24, 0xE1	; 225
    2bd0:	84 60       	ori	r24, 0x04	; 4
    2bd2:	80 83       	st	Z, r24
    2bd4:	a6 c0       	rjmp	.+332    	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 2:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP03, sizeof(PM_INTERPRETER_HELP03));
    2bd6:	27 e6       	ldi	r18, 0x67	; 103
    2bd8:	4f e4       	ldi	r20, 0x4F	; 79
    2bda:	5c e0       	ldi	r21, 0x0C	; 12
    2bdc:	61 e0       	ldi	r22, 0x01	; 1
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 3;
    2be4:	e1 e0       	ldi	r30, 0x01	; 1
    2be6:	f1 e0       	ldi	r31, 0x01	; 1
    2be8:	80 81       	ld	r24, Z
    2bea:	81 7e       	andi	r24, 0xE1	; 225
    2bec:	86 60       	ori	r24, 0x06	; 6
    2bee:	80 83       	st	Z, r24
    2bf0:	98 c0       	rjmp	.+304    	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 3:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP04, sizeof(PM_INTERPRETER_HELP04));
    2bf2:	2e e2       	ldi	r18, 0x2E	; 46
    2bf4:	41 e2       	ldi	r20, 0x21	; 33
    2bf6:	5c e0       	ldi	r21, 0x0C	; 12
    2bf8:	61 e0       	ldi	r22, 0x01	; 1
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 4;
    2c00:	e1 e0       	ldi	r30, 0x01	; 1
    2c02:	f1 e0       	ldi	r31, 0x01	; 1
    2c04:	80 81       	ld	r24, Z
    2c06:	81 7e       	andi	r24, 0xE1	; 225
    2c08:	88 60       	ori	r24, 0x08	; 8
    2c0a:	80 83       	st	Z, r24
    2c0c:	8a c0       	rjmp	.+276    	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 4:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP05, sizeof(PM_INTERPRETER_HELP05));
    2c0e:	27 e1       	ldi	r18, 0x17	; 23
    2c10:	4a e0       	ldi	r20, 0x0A	; 10
    2c12:	5c e0       	ldi	r21, 0x0C	; 12
    2c14:	61 e0       	ldi	r22, 0x01	; 1
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 5;
    2c1c:	e1 e0       	ldi	r30, 0x01	; 1
    2c1e:	f1 e0       	ldi	r31, 0x01	; 1
    2c20:	80 81       	ld	r24, Z
    2c22:	81 7e       	andi	r24, 0xE1	; 225
    2c24:	8a 60       	ori	r24, 0x0A	; 10
    2c26:	80 83       	st	Z, r24
    2c28:	7c c0       	rjmp	.+248    	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 5:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP06, sizeof(PM_INTERPRETER_HELP06));
    2c2a:	2b e2       	ldi	r18, 0x2B	; 43
    2c2c:	4f ed       	ldi	r20, 0xDF	; 223
    2c2e:	5b e0       	ldi	r21, 0x0B	; 11
    2c30:	61 e0       	ldi	r22, 0x01	; 1
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 6;
    2c38:	e1 e0       	ldi	r30, 0x01	; 1
    2c3a:	f1 e0       	ldi	r31, 0x01	; 1
    2c3c:	80 81       	ld	r24, Z
    2c3e:	81 7e       	andi	r24, 0xE1	; 225
    2c40:	8c 60       	ori	r24, 0x0C	; 12
    2c42:	80 83       	st	Z, r24
    2c44:	6e c0       	rjmp	.+220    	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 6:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP07, sizeof(PM_INTERPRETER_HELP07));
    2c46:	2f e3       	ldi	r18, 0x3F	; 63
    2c48:	40 ea       	ldi	r20, 0xA0	; 160
    2c4a:	5b e0       	ldi	r21, 0x0B	; 11
    2c4c:	61 e0       	ldi	r22, 0x01	; 1
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 7;
    2c54:	e1 e0       	ldi	r30, 0x01	; 1
    2c56:	f1 e0       	ldi	r31, 0x01	; 1
    2c58:	80 81       	ld	r24, Z
    2c5a:	81 7e       	andi	r24, 0xE1	; 225
    2c5c:	8e 60       	ori	r24, 0x0E	; 14
    2c5e:	80 83       	st	Z, r24
    2c60:	60 c0       	rjmp	.+192    	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 7:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP08, sizeof(PM_INTERPRETER_HELP08));
    2c62:	2c e2       	ldi	r18, 0x2C	; 44
    2c64:	44 e7       	ldi	r20, 0x74	; 116
    2c66:	5b e0       	ldi	r21, 0x0B	; 11
    2c68:	61 e0       	ldi	r22, 0x01	; 1
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 8;
    2c70:	e1 e0       	ldi	r30, 0x01	; 1
    2c72:	f1 e0       	ldi	r31, 0x01	; 1
    2c74:	80 81       	ld	r24, Z
    2c76:	81 7e       	andi	r24, 0xE1	; 225
    2c78:	80 61       	ori	r24, 0x10	; 16
    2c7a:	80 83       	st	Z, r24
    2c7c:	52 c0       	rjmp	.+164    	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 8:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP09, sizeof(PM_INTERPRETER_HELP09));
    2c7e:	25 e5       	ldi	r18, 0x55	; 85
    2c80:	4f e1       	ldi	r20, 0x1F	; 31
    2c82:	5b e0       	ldi	r21, 0x0B	; 11
    2c84:	61 e0       	ldi	r22, 0x01	; 1
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 9;
    2c8c:	e1 e0       	ldi	r30, 0x01	; 1
    2c8e:	f1 e0       	ldi	r31, 0x01	; 1
    2c90:	80 81       	ld	r24, Z
    2c92:	81 7e       	andi	r24, 0xE1	; 225
    2c94:	82 61       	ori	r24, 0x12	; 18
    2c96:	80 83       	st	Z, r24
    2c98:	44 c0       	rjmp	.+136    	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 9:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP10, sizeof(PM_INTERPRETER_HELP10));
    2c9a:	28 e2       	ldi	r18, 0x28	; 40
    2c9c:	47 ef       	ldi	r20, 0xF7	; 247
    2c9e:	5a e0       	ldi	r21, 0x0A	; 10
    2ca0:	61 e0       	ldi	r22, 0x01	; 1
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 10;
    2ca8:	e1 e0       	ldi	r30, 0x01	; 1
    2caa:	f1 e0       	ldi	r31, 0x01	; 1
    2cac:	80 81       	ld	r24, Z
    2cae:	81 7e       	andi	r24, 0xE1	; 225
    2cb0:	84 61       	ori	r24, 0x14	; 20
    2cb2:	80 83       	st	Z, r24
    2cb4:	36 c0       	rjmp	.+108    	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 10:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP11, sizeof(PM_INTERPRETER_HELP11));
    2cb6:	2f e1       	ldi	r18, 0x1F	; 31
    2cb8:	48 ed       	ldi	r20, 0xD8	; 216
    2cba:	5a e0       	ldi	r21, 0x0A	; 10
    2cbc:	61 e0       	ldi	r22, 0x01	; 1
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 11;
    2cc4:	e1 e0       	ldi	r30, 0x01	; 1
    2cc6:	f1 e0       	ldi	r31, 0x01	; 1
    2cc8:	80 81       	ld	r24, Z
    2cca:	81 7e       	andi	r24, 0xE1	; 225
    2ccc:	86 61       	ori	r24, 0x16	; 22
    2cce:	80 83       	st	Z, r24
    2cd0:	28 c0       	rjmp	.+80     	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 11:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP12, sizeof(PM_INTERPRETER_HELP12));
    2cd2:	24 e7       	ldi	r18, 0x74	; 116
    2cd4:	44 e6       	ldi	r20, 0x64	; 100
    2cd6:	5a e0       	ldi	r21, 0x0A	; 10
    2cd8:	61 e0       	ldi	r22, 0x01	; 1
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 12;
    2ce0:	e1 e0       	ldi	r30, 0x01	; 1
    2ce2:	f1 e0       	ldi	r31, 0x01	; 1
    2ce4:	80 81       	ld	r24, Z
    2ce6:	81 7e       	andi	r24, 0xE1	; 225
    2ce8:	88 61       	ori	r24, 0x18	; 24
    2cea:	80 83       	st	Z, r24
    2cec:	1a c0       	rjmp	.+52     	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 12:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP13, sizeof(PM_INTERPRETER_HELP13));
    2cee:	20 e3       	ldi	r18, 0x30	; 48
    2cf0:	44 e3       	ldi	r20, 0x34	; 52
    2cf2:	5a e0       	ldi	r21, 0x0A	; 10
    2cf4:	61 e0       	ldi	r22, 0x01	; 1
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 13;
    2cfc:	e1 e0       	ldi	r30, 0x01	; 1
    2cfe:	f1 e0       	ldi	r31, 0x01	; 1
    2d00:	80 81       	ld	r24, Z
    2d02:	81 7e       	andi	r24, 0xE1	; 225
    2d04:	8a 61       	ori	r24, 0x1A	; 26
    2d06:	80 83       	st	Z, r24
    2d08:	0c c0       	rjmp	.+24     	; 0x2d22 <main_fw_giveAway+0x82e>
				break;

			case 13:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP14, sizeof(PM_INTERPRETER_HELP14));
    2d0a:	2f e0       	ldi	r18, 0x0F	; 15
    2d0c:	45 e2       	ldi	r20, 0x25	; 37
    2d0e:	5a e0       	ldi	r21, 0x0A	; 10
    2d10:	61 e0       	ldi	r22, 0x01	; 1
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
				// no break
			default:
				main_bf.mainHelpConcatNr = 0;
    2d18:	e1 e0       	ldi	r30, 0x01	; 1
    2d1a:	f1 e0       	ldi	r31, 0x01	; 1
    2d1c:	80 81       	ld	r24, Z
    2d1e:	81 7e       	andi	r24, 0xE1	; 225
    2d20:	80 83       	st	Z, r24
	uint16_t localStampICR1;
	uint8_t len = 0;

	{
		/* get the timers */
		uint8_t sreg = SREG;
    2d22:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2d24:	f8 94       	cli

		/* get the current ms and ticks timer */
		uint8_t localTCNT1L = TCNT1L;						// low byte first
    2d26:	70 90 84 00 	lds	r7, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		uint8_t localTCNT1H = TCNT1H;
    2d2a:	60 90 85 00 	lds	r6, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		localFastCtr1ms = fastCtr1ms;						// make a copy of the running clock
    2d2e:	c0 90 37 05 	lds	r12, 0x0537	; 0x800537 <fastCtr1ms>
    2d32:	d0 90 38 05 	lds	r13, 0x0538	; 0x800538 <fastCtr1ms+0x1>
    2d36:	e0 90 39 05 	lds	r14, 0x0539	; 0x800539 <fastCtr1ms+0x2>
    2d3a:	f0 90 3a 05 	lds	r15, 0x053A	; 0x80053a <fastCtr1ms+0x3>

		/* get the last stamped time as ms and ticks */
		uint8_t localICR1L = ICR1L;							// low byte first
    2d3e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		uint8_t localICR1H = ICR1H;
    2d42:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock
    2d46:	40 91 3b 05 	lds	r20, 0x053B	; 0x80053b <fastStampCtr1ms>
    2d4a:	50 91 3c 05 	lds	r21, 0x053C	; 0x80053c <fastStampCtr1ms+0x1>
    2d4e:	60 91 3d 05 	lds	r22, 0x053D	; 0x80053d <fastStampCtr1ms+0x2>
    2d52:	70 91 3e 05 	lds	r23, 0x053E	; 0x80053e <fastStampCtr1ms+0x3>

		SREG = sreg;
    2d56:	9f bf       	out	0x3f, r25	; 63

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
		localStampICR1	= localICR1L  | (localICR1H  << 8);
	}

	if (localAdcConvertNowCntrLast != acAdcConvertNowCntr) {  // a new PPS impulse has arrived
    2d58:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <acAdcConvertNowCntr>
    2d5c:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <localAdcConvertNowCntrLast.2931>
    2d60:	29 17       	cp	r18, r25
    2d62:	d9 f1       	breq	.+118    	; 0x2dda <main_fw_giveAway+0x8e6>
		localAdcConvertNowCntrLast = acAdcConvertNowCntr;
    2d64:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <localAdcConvertNowCntrLast.2931>
		localNoPpsCnt = 0;
    2d68:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <localNoPpsCnt.2933>

		ppsStampCtr1ms_last = ppsStampCtr1ms;
    2d6c:	80 90 8b 05 	lds	r8, 0x058B	; 0x80058b <ppsStampCtr1ms>
    2d70:	90 90 8c 05 	lds	r9, 0x058C	; 0x80058c <ppsStampCtr1ms+0x1>
    2d74:	a0 90 8d 05 	lds	r10, 0x058D	; 0x80058d <ppsStampCtr1ms+0x2>
    2d78:	b0 90 8e 05 	lds	r11, 0x058E	; 0x80058e <ppsStampCtr1ms+0x3>
    2d7c:	80 92 85 05 	sts	0x0585, r8	; 0x800585 <ppsStampCtr1ms_last>
    2d80:	90 92 86 05 	sts	0x0586, r9	; 0x800586 <ppsStampCtr1ms_last+0x1>
    2d84:	a0 92 87 05 	sts	0x0587, r10	; 0x800587 <ppsStampCtr1ms_last+0x2>
    2d88:	b0 92 88 05 	sts	0x0588, r11	; 0x800588 <ppsStampCtr1ms_last+0x3>
		ppsStampICR1_last   = ppsStampICR1;
    2d8c:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <ppsStampICR1>
    2d90:	f0 91 8a 05 	lds	r31, 0x058A	; 0x80058a <ppsStampICR1+0x1>
    2d94:	f0 93 84 05 	sts	0x0584, r31	; 0x800584 <ppsStampICR1_last+0x1>
    2d98:	e0 93 83 05 	sts	0x0583, r30	; 0x800583 <ppsStampICR1_last>

		ppsStampCtr1ms = localStampCtr1ms;
    2d9c:	66 27       	eor	r22, r22
    2d9e:	77 27       	eor	r23, r23
    2da0:	40 93 8b 05 	sts	0x058B, r20	; 0x80058b <ppsStampCtr1ms>
    2da4:	50 93 8c 05 	sts	0x058C, r21	; 0x80058c <ppsStampCtr1ms+0x1>
    2da8:	60 93 8d 05 	sts	0x058D, r22	; 0x80058d <ppsStampCtr1ms+0x2>
    2dac:	70 93 8e 05 	sts	0x058E, r23	; 0x80058e <ppsStampCtr1ms+0x3>
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock

		SREG = sreg;

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
		localStampICR1	= localICR1L  | (localICR1H  << 8);
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	93 2b       	or	r25, r19

		ppsStampCtr1ms_last = ppsStampCtr1ms;
		ppsStampICR1_last   = ppsStampICR1;

		ppsStampCtr1ms = localStampCtr1ms;
		ppsStampICR1   = localStampICR1;
    2db4:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <ppsStampICR1+0x1>
    2db8:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <ppsStampICR1>

		/* reload timer */
		localFastCtr1ms_next = localFastCtr1ms + LocalCtr1sSpanMs + LocalCtr250msBorderMs;
    2dbc:	d7 01       	movw	r26, r14
    2dbe:	c6 01       	movw	r24, r12
    2dc0:	8e 51       	subi	r24, 0x1E	; 30
    2dc2:	9b 4f       	sbci	r25, 0xFB	; 251
    2dc4:	af 4f       	sbci	r26, 0xFF	; 255
    2dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    2dc8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <localFastCtr1ms_next.2932>
    2dcc:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <localFastCtr1ms_next.2932+0x1>
    2dd0:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <localFastCtr1ms_next.2932+0x2>
    2dd4:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <localFastCtr1ms_next.2932+0x3>
    2dd8:	5f c0       	rjmp	.+190    	; 0x2e98 <main_fw_giveAway+0x9a4>

	} else if (localFastCtr1ms >= localFastCtr1ms_next) {  	// the timer has elapsed without a PPS impulse
    2dda:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <localFastCtr1ms_next.2932>
    2dde:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <localFastCtr1ms_next.2932+0x1>
    2de2:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <localFastCtr1ms_next.2932+0x2>
    2de6:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <localFastCtr1ms_next.2932+0x3>
    2dea:	c8 16       	cp	r12, r24
    2dec:	d9 06       	cpc	r13, r25
    2dee:	ea 06       	cpc	r14, r26
    2df0:	fb 06       	cpc	r15, r27
    2df2:	c0 f1       	brcs	.+112    	; 0x2e64 <main_fw_giveAway+0x970>
		if (++localNoPpsCnt > 180) {
    2df4:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <localNoPpsCnt.2933>
    2df8:	2f 5f       	subi	r18, 0xFF	; 255
    2dfa:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <localNoPpsCnt.2933>
    2dfe:	25 3b       	cpi	r18, 0xB5	; 181
    2e00:	20 f0       	brcs	.+8      	; 0x2e0a <main_fw_giveAway+0x916>
			localNoPpsCnt = 180;							// clamp to 3 minutes
    2e02:	24 eb       	ldi	r18, 0xB4	; 180
    2e04:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <localNoPpsCnt.2933>
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <main_fw_giveAway+0x91a>
		}
		if (localNoPpsCnt >= 5) {
    2e0a:	25 30       	cpi	r18, 0x05	; 5
    2e0c:	50 f0       	brcs	.+20     	; 0x2e22 <main_fw_giveAway+0x92e>
			mainRefClkState = REFCLK_STATE_NOSYNC;			// reset clock state when at least 5 seconds without a reference signal
    2e0e:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <mainRefClkState>
			mainPpm = 0.0f;
    2e12:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <mainPpm>
    2e16:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <mainPpm+0x1>
    2e1a:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <mainPpm+0x2>
    2e1e:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <mainPpm+0x3>
		}

		if ((localFastCtr1ms_next + LocalCtr1sSpanMs) > localFastCtr1ms) {
    2e22:	88 51       	subi	r24, 0x18	; 24
    2e24:	9c 4f       	sbci	r25, 0xFC	; 252
    2e26:	af 4f       	sbci	r26, 0xFF	; 255
    2e28:	bf 4f       	sbci	r27, 0xFF	; 255
    2e2a:	c8 16       	cp	r12, r24
    2e2c:	d9 06       	cpc	r13, r25
    2e2e:	ea 06       	cpc	r14, r26
    2e30:	fb 06       	cpc	r15, r27
    2e32:	48 f4       	brcc	.+18     	; 0x2e46 <main_fw_giveAway+0x952>
			/* adjust */
			localFastCtr1ms_next += LocalCtr1sSpanMs;		// +1 second
    2e34:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <localFastCtr1ms_next.2932>
    2e38:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <localFastCtr1ms_next.2932+0x1>
    2e3c:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <localFastCtr1ms_next.2932+0x2>
    2e40:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <localFastCtr1ms_next.2932+0x3>
    2e44:	29 c0       	rjmp	.+82     	; 0x2e98 <main_fw_giveAway+0x9a4>

		} else {
			/* reload / initial timer */
			localFastCtr1ms_next = localFastCtr1ms + LocalCtr1sSpanMs + LocalCtr250msBorderMs;
    2e46:	d7 01       	movw	r26, r14
    2e48:	c6 01       	movw	r24, r12
    2e4a:	8e 51       	subi	r24, 0x1E	; 30
    2e4c:	9b 4f       	sbci	r25, 0xFB	; 251
    2e4e:	af 4f       	sbci	r26, 0xFF	; 255
    2e50:	bf 4f       	sbci	r27, 0xFF	; 255
    2e52:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <localFastCtr1ms_next.2932>
    2e56:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <localFastCtr1ms_next.2932+0x1>
    2e5a:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <localFastCtr1ms_next.2932+0x2>
    2e5e:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <localFastCtr1ms_next.2932+0x3>
    2e62:	1a c0       	rjmp	.+52     	; 0x2e98 <main_fw_giveAway+0x9a4>
		}

	} else {
		/* nothing has happened - do some bulk data if a job is ready to be done */

		if (serialCtxtBufferState == SERIAL_CTXT_BUFFER_STATE_SEND) {
    2e64:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <serialCtxtBufferState>
    2e68:	82 30       	cpi	r24, 0x02	; 2
    2e6a:	91 f4       	brne	.+36     	; 0x2e90 <main_fw_giveAway+0x99c>
			main_fw_parseNmeaLineData();
    2e6c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <main_fw_parseNmeaLineData>

			/* if serial data from the GPS module is required, send it to USB in-port */
			if (main_bf.mainIsSerComm) {
    2e70:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2e74:	83 ff       	sbrs	r24, 3
    2e76:	08 c0       	rjmp	.+16     	; 0x2e88 <main_fw_giveAway+0x994>
				ringbuffer_fw_ringBufferWaitAppend(false, false, serialCtxtRxBuffer, serialCtxtRxBufferLen);
    2e78:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <serialCtxtRxBufferLen>
    2e7c:	41 e1       	ldi	r20, 0x11	; 17
    2e7e:	52 e0       	ldi	r21, 0x02	; 2
    2e80:	60 e0       	ldi	r22, 0x00	; 0
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
			}

			/* mark the serial buffer as to be ready again for receiving GPS data */
			serialCtxtRxBufferLen = 0;
    2e88:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <serialCtxtRxBufferLen>
			serialCtxtBufferState = 0;
    2e8c:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <serialCtxtBufferState>
		}

		/* PWM offset due to phase accumulator */
		calcPhaseResidue();
    2e90:	0e 94 03 0c 	call	0x1806	; 0x1806 <calcPhaseResidue>
    2e94:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <main_fw_giveAway+0x1d40>
	 *
	 * 1)	Linker option:		--Wl,-u,vfprintf  --Wl,-u,vfscanf
	 * 2)	Linker libraries:	-lm  -lprintf_flt  -lscanf_flt
	 */

	if (mainGpsInitVal) {
    2e98:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <mainGpsInitVal>
    2e9c:	88 23       	and	r24, r24
    2e9e:	91 f1       	breq	.+100    	; 0x2f04 <main_fw_giveAway+0xa10>
		/* activate GPS module for GPS / GALILEO / QZSS as well as GLONASS reception */

		mainGpsInitVal++;
    2ea0:	8f 5f       	subi	r24, 0xFF	; 255
    2ea2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <mainGpsInitVal>
		if (5 == mainGpsInitVal) {  // XXX init of GPS-Module is here
    2ea6:	85 30       	cpi	r24, 0x05	; 5
    2ea8:	39 f4       	brne	.+14     	; 0x2eb8 <main_fw_giveAway+0x9c4>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WARM_RESTART, sizeof(PM_FORMAT_GPS_WARM_RESTART));
    2eaa:	4e e0       	ldi	r20, 0x0E	; 14
    2eac:	64 ea       	ldi	r22, 0xA4	; 164
    2eae:	79 e0       	ldi	r23, 0x09	; 9
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	0e 94 57 26 	call	0x4cae	; 0x4cae <serial_fw_copyAndSendNmea>
    2eb6:	26 c0       	rjmp	.+76     	; 0x2f04 <main_fw_giveAway+0xa10>

		} else if (10 == mainGpsInitVal) {
    2eb8:	8a 30       	cpi	r24, 0x0A	; 10
    2eba:	39 f4       	brne	.+14     	; 0x2eca <main_fw_giveAway+0x9d6>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST0_EAST0, sizeof(PM_FORMAT_GPS_WEST0_EAST0));  // disable all GNSS systems
    2ebc:	42 e1       	ldi	r20, 0x12	; 18
    2ebe:	62 e8       	ldi	r22, 0x82	; 130
    2ec0:	79 e0       	ldi	r23, 0x09	; 9
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	0e 94 57 26 	call	0x4cae	; 0x4cae <serial_fw_copyAndSendNmea>
    2ec8:	1d c0       	rjmp	.+58     	; 0x2f04 <main_fw_giveAway+0xa10>

		} else if (11 == mainGpsInitVal) {
    2eca:	8b 30       	cpi	r24, 0x0B	; 11
    2ecc:	39 f4       	brne	.+14     	; 0x2edc <main_fw_giveAway+0x9e8>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST0, sizeof(PM_FORMAT_GPS_WEST1_EAST0));  // activate GPS, QZSS & Galileo
    2ece:	42 e1       	ldi	r20, 0x12	; 18
    2ed0:	60 e7       	ldi	r22, 0x70	; 112
    2ed2:	79 e0       	ldi	r23, 0x09	; 9
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	0e 94 57 26 	call	0x4cae	; 0x4cae <serial_fw_copyAndSendNmea>
    2eda:	14 c0       	rjmp	.+40     	; 0x2f04 <main_fw_giveAway+0xa10>

		} else if (12 == mainGpsInitVal) {
    2edc:	8c 30       	cpi	r24, 0x0C	; 12
    2ede:	39 f4       	brne	.+14     	; 0x2eee <main_fw_giveAway+0x9fa>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST1, sizeof(PM_FORMAT_GPS_WEST1_EAST1));  // activate GLONASS also
    2ee0:	42 e1       	ldi	r20, 0x12	; 18
    2ee2:	6e e5       	ldi	r22, 0x5E	; 94
    2ee4:	79 e0       	ldi	r23, 0x09	; 9
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	0e 94 57 26 	call	0x4cae	; 0x4cae <serial_fw_copyAndSendNmea>
    2eec:	0b c0       	rjmp	.+22     	; 0x2f04 <main_fw_giveAway+0xa10>

		} else if (70 == mainGpsInitVal) {
    2eee:	86 34       	cpi	r24, 0x46	; 70
    2ef0:	49 f4       	brne	.+18     	; 0x2f04 <main_fw_giveAway+0xa10>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST1, sizeof(PM_FORMAT_GPS_WEST1_EAST1));  // activate GLONASS also (sent every minute)
    2ef2:	42 e1       	ldi	r20, 0x12	; 18
    2ef4:	6e e5       	ldi	r22, 0x5E	; 94
    2ef6:	79 e0       	ldi	r23, 0x09	; 9
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	0e 94 57 26 	call	0x4cae	; 0x4cae <serial_fw_copyAndSendNmea>
			mainGpsInitVal = 10;
    2efe:	8a e0       	ldi	r24, 0x0A	; 10
    2f00:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <mainGpsInitVal>
		}
	}

	mainAdcPullVolts	= ( acAdcCh[ADC_CH_PWMPULL] * mainCoef_b01_ref_AREF_V) / 1024.0f;
    2f04:	09 e8       	ldi	r16, 0x89	; 137
    2f06:	13 e0       	ldi	r17, 0x03	; 3
    2f08:	d8 01       	movw	r26, r16
    2f0a:	6d 91       	ld	r22, X+
    2f0c:	7c 91       	ld	r23, X
    2f0e:	80 90 c0 05 	lds	r8, 0x05C0	; 0x8005c0 <mainCoef_b01_ref_AREF_V>
    2f12:	90 90 c1 05 	lds	r9, 0x05C1	; 0x8005c1 <mainCoef_b01_ref_AREF_V+0x1>
    2f16:	a0 90 c2 05 	lds	r10, 0x05C2	; 0x8005c2 <mainCoef_b01_ref_AREF_V+0x2>
    2f1a:	b0 90 c3 05 	lds	r11, 0x05C3	; 0x8005c3 <mainCoef_b01_ref_AREF_V+0x3>
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	0e 94 cc 30 	call	0x6198	; 0x6198 <__floatunsisf>
    2f26:	a5 01       	movw	r20, r10
    2f28:	94 01       	movw	r18, r8
    2f2a:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e8       	ldi	r20, 0x80	; 128
    2f34:	5a e3       	ldi	r21, 0x3A	; 58
    2f36:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    2f3a:	60 93 7b 05 	sts	0x057B, r22	; 0x80057b <mainAdcPullVolts>
    2f3e:	70 93 7c 05 	sts	0x057C, r23	; 0x80057c <mainAdcPullVolts+0x1>
    2f42:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <mainAdcPullVolts+0x2>
    2f46:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <mainAdcPullVolts+0x3>
	mainAdcPhaseVolts	= ( acAdcCh[ADC_CH_PHASE]	* mainCoef_b01_ref_AREF_V) / 1024.0f;
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	62 81       	ldd	r22, Z+2	; 0x02
    2f4e:	73 81       	ldd	r23, Z+3	; 0x03
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 cc 30 	call	0x6198	; 0x6198 <__floatunsisf>
    2f58:	9b 01       	movw	r18, r22
    2f5a:	ac 01       	movw	r20, r24
    2f5c:	c5 01       	movw	r24, r10
    2f5e:	b4 01       	movw	r22, r8
    2f60:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e8       	ldi	r20, 0x80	; 128
    2f6a:	5a e3       	ldi	r21, 0x3A	; 58
    2f6c:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    2f70:	60 93 77 05 	sts	0x0577, r22	; 0x800577 <mainAdcPhaseVolts>
    2f74:	70 93 78 05 	sts	0x0578, r23	; 0x800578 <mainAdcPhaseVolts+0x1>
    2f78:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <mainAdcPhaseVolts+0x2>
    2f7c:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <mainAdcPhaseVolts+0x3>
	mainAdcTemp			= ((acAdcCh[ADC_CH_TEMP]	- mainCoef_b01_temp_ofs_adc_25C_steps) * mainCoef_b01_temp_k_p1step_adc_K) + 25.0f;
    2f80:	d8 01       	movw	r26, r16
    2f82:	14 96       	adiw	r26, 0x04	; 4
    2f84:	6d 91       	ld	r22, X+
    2f86:	7c 91       	ld	r23, X
    2f88:	15 97       	sbiw	r26, 0x05	; 5
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	0e 94 cc 30 	call	0x6198	; 0x6198 <__floatunsisf>
    2f92:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps>
    2f96:	30 91 b9 05 	lds	r19, 0x05B9	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    2f9a:	40 91 ba 05 	lds	r20, 0x05BA	; 0x8005ba <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    2f9e:	50 91 bb 05 	lds	r21, 0x05BB	; 0x8005bb <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>
    2fa2:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    2fa6:	20 91 b4 05 	lds	r18, 0x05B4	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K>
    2faa:	30 91 b5 05 	lds	r19, 0x05B5	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    2fae:	40 91 b6 05 	lds	r20, 0x05B6	; 0x8005b6 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    2fb2:	50 91 b7 05 	lds	r21, 0x05B7	; 0x8005b7 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
    2fb6:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	48 ec       	ldi	r20, 0xC8	; 200
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    2fc6:	60 93 73 05 	sts	0x0573, r22	; 0x800573 <mainAdcTemp>
    2fca:	70 93 74 05 	sts	0x0574, r23	; 0x800574 <mainAdcTemp+0x1>
    2fce:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <mainAdcTemp+0x2>
    2fd2:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <mainAdcTemp+0x3>

	if (main_bf.mainIsTimerTest) {
    2fd6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2fda:	82 ff       	sbrs	r24, 2
    2fdc:	4e c2       	rjmp	.+1180   	; 0x347a <main_fw_giveAway+0xf86>
		/* print NMEA data */
		memory_fw_copyBuffer(true, mainPrepareBuffer, PM_FORMAT_GP00, sizeof(PM_FORMAT_GP00) + 1);
    2fde:	21 e1       	ldi	r18, 0x11	; 17
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	4e e4       	ldi	r20, 0x4E	; 78
    2fe4:	59 e0       	ldi	r21, 0x09	; 9
    2fe6:	6f e0       	ldi	r22, 0x0F	; 15
    2fe8:	74 e0       	ldi	r23, 0x04	; 4
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, sizeof(PM_FORMAT_GP00) + 1);
    2ff0:	21 e1       	ldi	r18, 0x11	; 17
    2ff2:	4f e0       	ldi	r20, 0x0F	; 15
    2ff4:	54 e0       	ldi	r21, 0x04	; 4
    2ff6:	60 e0       	ldi	r22, 0x00	; 0
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP01, sizeof(PM_FORMAT_GP01));
    2ffe:	28 e2       	ldi	r18, 0x28	; 40
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	46 e2       	ldi	r20, 0x26	; 38
    3004:	59 e0       	ldi	r21, 0x09	; 9
    3006:	6f e8       	ldi	r22, 0x8F	; 143
    3008:	73 e0       	ldi	r23, 0x03	; 3
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3010:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <main_nmeaTimeUtcMilsec+0x1>
    3014:	8f 93       	push	r24
    3016:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <main_nmeaTimeUtcMilsec>
    301a:	8f 93       	push	r24
    301c:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <main_nmeaTimeUtcInt+0x3>
    3020:	8f 93       	push	r24
    3022:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    3026:	8f 93       	push	r24
    3028:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    302c:	8f 93       	push	r24
    302e:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <main_nmeaTimeUtcInt>
    3032:	8f 93       	push	r24
    3034:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <main_nmeaDate+0x3>
    3038:	8f 93       	push	r24
    303a:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <main_nmeaDate+0x2>
    303e:	8f 93       	push	r24
    3040:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <main_nmeaDate+0x1>
    3044:	8f 93       	push	r24
    3046:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <main_nmeaDate>
    304a:	8f 93       	push	r24
    304c:	0f 2e       	mov	r0, r31
    304e:	ff e8       	ldi	r31, 0x8F	; 143
    3050:	af 2e       	mov	r10, r31
    3052:	f3 e0       	ldi	r31, 0x03	; 3
    3054:	bf 2e       	mov	r11, r31
    3056:	f0 2d       	mov	r31, r0
    3058:	bf 92       	push	r11
    305a:	af 92       	push	r10
    305c:	0f e0       	ldi	r16, 0x0F	; 15
    305e:	14 e0       	ldi	r17, 0x04	; 4
    3060:	1f 93       	push	r17
    3062:	0f 93       	push	r16
    3064:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				main_nmeaDate,
				main_nmeaTimeUtcInt,
				main_nmeaTimeUtcMilsec);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3068:	28 2f       	mov	r18, r24
    306a:	a8 01       	movw	r20, r16
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP02, sizeof(PM_FORMAT_GP02));
    3074:	25 e2       	ldi	r18, 0x25	; 37
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	41 e0       	ldi	r20, 0x01	; 1
    307a:	59 e0       	ldi	r21, 0x09	; 9
    307c:	b5 01       	movw	r22, r10
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3084:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <main_nmeaPosFixIndicator+0x1>
    3088:	8f 93       	push	r24
    308a:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaPosFixIndicator>
    308e:	8f 93       	push	r24
    3090:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <main_nmeaMode2+0x1>
    3094:	8f 93       	push	r24
    3096:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <main_nmeaMode2>
    309a:	8f 93       	push	r24
    309c:	bf 92       	push	r11
    309e:	af 92       	push	r10
    30a0:	1f 93       	push	r17
    30a2:	0f 93       	push	r16
    30a4:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				main_nmeaMode2,
				main_nmeaPosFixIndicator);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    30a8:	28 2f       	mov	r18, r24
    30aa:	a8 01       	movw	r20, r16
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP03, sizeof(PM_FORMAT_GP03));
    30b4:	23 e5       	ldi	r18, 0x53	; 83
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	4e ea       	ldi	r20, 0xAE	; 174
    30ba:	58 e0       	ldi	r21, 0x08	; 8
    30bc:	b5 01       	movw	r22, r10
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    30c4:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <main_nmeaSatsEphemerisGlonass+0x1>
    30c8:	8f 93       	push	r24
    30ca:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGlonass>
    30ce:	8f 93       	push	r24
    30d0:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <main_nmeaSatsEphemerisGpsGalileoQzss+0x1>
    30d4:	8f 93       	push	r24
    30d6:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaSatsEphemerisGpsGalileoQzss>
    30da:	8f 93       	push	r24
    30dc:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <main_nmeaSatsUsed+0x1>
    30e0:	8f 93       	push	r24
    30e2:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <main_nmeaSatsUsed>
    30e6:	8f 93       	push	r24
    30e8:	bf 92       	push	r11
    30ea:	af 92       	push	r10
    30ec:	1f 93       	push	r17
    30ee:	0f 93       	push	r16
    30f0:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				main_nmeaSatsUsed,
				main_nmeaSatsEphemerisGpsGalileoQzss,
				main_nmeaSatsEphemerisGlonass);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	28 2f       	mov	r18, r24
    3100:	a8 01       	movw	r20, r16
    3102:	60 e0       	ldi	r22, 0x00	; 0
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP04, sizeof(PM_FORMAT_GP04));
    310a:	2f e2       	ldi	r18, 0x2F	; 47
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	4f e7       	ldi	r20, 0x7F	; 127
    3110:	58 e0       	ldi	r21, 0x08	; 8
    3112:	b5 01       	movw	r22, r10
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    311a:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <main_nmeaVdop+0x3>
    311e:	8f 93       	push	r24
    3120:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <main_nmeaVdop+0x2>
    3124:	8f 93       	push	r24
    3126:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <main_nmeaVdop+0x1>
    312a:	8f 93       	push	r24
    312c:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <main_nmeaVdop>
    3130:	8f 93       	push	r24
    3132:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <main_nmeaHdop+0x3>
    3136:	8f 93       	push	r24
    3138:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <main_nmeaHdop+0x2>
    313c:	8f 93       	push	r24
    313e:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <main_nmeaHdop+0x1>
    3142:	8f 93       	push	r24
    3144:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <main_nmeaHdop>
    3148:	8f 93       	push	r24
    314a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <main_nmeaPdop+0x3>
    314e:	8f 93       	push	r24
    3150:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <main_nmeaPdop+0x2>
    3154:	8f 93       	push	r24
    3156:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <main_nmeaPdop+0x1>
    315a:	8f 93       	push	r24
    315c:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <main_nmeaPdop>
    3160:	8f 93       	push	r24
    3162:	bf 92       	push	r11
    3164:	af 92       	push	r10
    3166:	1f 93       	push	r17
    3168:	0f 93       	push	r16
    316a:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				main_nmeaPdop,
				main_nmeaHdop,
				main_nmeaVdop);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    316e:	28 2f       	mov	r18, r24
    3170:	a8 01       	movw	r20, r16
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
    317a:	2b e3       	ldi	r18, 0x3B	; 59
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	44 e4       	ldi	r20, 0x44	; 68
    3180:	58 e0       	ldi	r21, 0x08	; 8
    3182:	b5 01       	movw	r22, r10
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    318a:	10 91 45 05 	lds	r17, 0x0545	; 0x800545 <main_nmeaAltitudeM>
    318e:	00 91 46 05 	lds	r16, 0x0546	; 0x800546 <main_nmeaAltitudeM+0x1>
    3192:	b0 90 47 05 	lds	r11, 0x0547	; 0x800547 <main_nmeaAltitudeM+0x2>
    3196:	a0 90 48 05 	lds	r10, 0x0548	; 0x800548 <main_nmeaAltitudeM+0x3>
    319a:	e0 91 4a 05 	lds	r30, 0x054A	; 0x80054a <main_nmeaPosLon>
    319e:	f0 91 4b 05 	lds	r31, 0x054B	; 0x80054b <main_nmeaPosLon+0x1>
    31a2:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <main_nmeaPosLon+0x2>
    31a6:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <main_nmeaPosLon+0x3>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
				main_nmeaPosLat,
				(main_nmeaPosLonSign > 0 ?  main_nmeaPosLonSign : '-'),
    31aa:	20 91 49 05 	lds	r18, 0x0549	; 0x800549 <main_nmeaPosLonSign>
				main_nmeaHdop,
				main_nmeaVdop);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    31ae:	0f b6       	in	r0, 0x3f	; 63
    31b0:	f8 94       	cli
    31b2:	de bf       	out	0x3e, r29	; 62
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	cd bf       	out	0x3d, r28	; 61
    31b8:	22 23       	and	r18, r18
    31ba:	11 f0       	breq	.+4      	; 0x31c0 <main_fw_giveAway+0xccc>
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	02 c0       	rjmp	.+4      	; 0x31c4 <main_fw_giveAway+0xcd0>
    31c0:	2d e2       	ldi	r18, 0x2D	; 45
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 91 4f 05 	lds	r20, 0x054F	; 0x80054f <main_nmeaPosLat>
    31c8:	50 91 50 05 	lds	r21, 0x0550	; 0x800550 <main_nmeaPosLat+0x1>
    31cc:	60 91 51 05 	lds	r22, 0x0551	; 0x800551 <main_nmeaPosLat+0x2>
    31d0:	70 91 52 05 	lds	r23, 0x0552	; 0x800552 <main_nmeaPosLat+0x3>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
    31d4:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <main_nmeaPosLatSign>
				main_nmeaHdop,
				main_nmeaVdop);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    31d8:	88 23       	and	r24, r24
    31da:	11 f0       	breq	.+4      	; 0x31e0 <main_fw_giveAway+0xcec>
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	02 c0       	rjmp	.+4      	; 0x31e4 <main_fw_giveAway+0xcf0>
    31e0:	8d e2       	ldi	r24, 0x2D	; 45
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	af 92       	push	r10
    31e6:	bf 92       	push	r11
    31e8:	0f 93       	push	r16
    31ea:	1f 93       	push	r17
    31ec:	bf 93       	push	r27
    31ee:	af 93       	push	r26
    31f0:	ff 93       	push	r31
    31f2:	ef 93       	push	r30
    31f4:	3f 93       	push	r19
    31f6:	2f 93       	push	r18
    31f8:	7f 93       	push	r23
    31fa:	6f 93       	push	r22
    31fc:	5f 93       	push	r21
    31fe:	4f 93       	push	r20
    3200:	9f 93       	push	r25
    3202:	8f 93       	push	r24
    3204:	8f e8       	ldi	r24, 0x8F	; 143
    3206:	93 e0       	ldi	r25, 0x03	; 3
    3208:	9f 93       	push	r25
    320a:	8f 93       	push	r24
    320c:	8f e0       	ldi	r24, 0x0F	; 15
    320e:	94 e0       	ldi	r25, 0x04	; 4
    3210:	9f 93       	push	r25
    3212:	8f 93       	push	r24
    3214:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
				main_nmeaPosLat,
				(main_nmeaPosLonSign > 0 ?  main_nmeaPosLonSign : '-'),
				main_nmeaPosLon,
				main_nmeaAltitudeM);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3218:	28 2f       	mov	r18, r24
    321a:	4f e0       	ldi	r20, 0x0F	; 15
    321c:	54 e0       	ldi	r21, 0x04	; 4
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		if (!localNoPpsCnt) {
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <localNoPpsCnt.2933>
    3234:	81 11       	cpse	r24, r1
    3236:	85 c0       	rjmp	.+266    	; 0x3342 <main_fw_giveAway+0xe4e>
			/* print ADC values - only valid when a PPS has arrived */

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA01, sizeof(PM_FORMAT_TA01));
    3238:	2d e1       	ldi	r18, 0x1D	; 29
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	47 e2       	ldi	r20, 0x27	; 39
    323e:	58 e0       	ldi	r21, 0x08	; 8
    3240:	6f e8       	ldi	r22, 0x8F	; 143
    3242:	73 e0       	ldi	r23, 0x03	; 3
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    324a:	0f 2e       	mov	r0, r31
    324c:	f9 e8       	ldi	r31, 0x89	; 137
    324e:	8f 2e       	mov	r8, r31
    3250:	f3 e0       	ldi	r31, 0x03	; 3
    3252:	9f 2e       	mov	r9, r31
    3254:	f0 2d       	mov	r31, r0
    3256:	f4 01       	movw	r30, r8
    3258:	80 81       	ld	r24, Z
    325a:	91 81       	ldd	r25, Z+1	; 0x01
    325c:	20 91 7e 05 	lds	r18, 0x057E	; 0x80057e <mainAdcPullVolts+0x3>
    3260:	2f 93       	push	r18
    3262:	20 91 7d 05 	lds	r18, 0x057D	; 0x80057d <mainAdcPullVolts+0x2>
    3266:	2f 93       	push	r18
    3268:	20 91 7c 05 	lds	r18, 0x057C	; 0x80057c <mainAdcPullVolts+0x1>
    326c:	2f 93       	push	r18
    326e:	20 91 7b 05 	lds	r18, 0x057B	; 0x80057b <mainAdcPullVolts>
    3272:	2f 93       	push	r18
    3274:	9f 93       	push	r25
    3276:	8f 93       	push	r24
    3278:	0f 2e       	mov	r0, r31
    327a:	ff e8       	ldi	r31, 0x8F	; 143
    327c:	af 2e       	mov	r10, r31
    327e:	f3 e0       	ldi	r31, 0x03	; 3
    3280:	bf 2e       	mov	r11, r31
    3282:	f0 2d       	mov	r31, r0
    3284:	bf 92       	push	r11
    3286:	af 92       	push	r10
    3288:	0f e0       	ldi	r16, 0x0F	; 15
    328a:	14 e0       	ldi	r17, 0x04	; 4
    328c:	1f 93       	push	r17
    328e:	0f 93       	push	r16
    3290:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
					acAdcCh[ADC_CH_PWMPULL],
					mainAdcPullVolts);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3294:	28 2f       	mov	r18, r24
    3296:	a8 01       	movw	r20, r16
    3298:	60 e0       	ldi	r22, 0x00	; 0
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA02, sizeof(PM_FORMAT_TA02));
    32a0:	2d e1       	ldi	r18, 0x1D	; 29
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	4a e0       	ldi	r20, 0x0A	; 10
    32a6:	58 e0       	ldi	r21, 0x08	; 8
    32a8:	b5 01       	movw	r22, r10
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    32b0:	d4 01       	movw	r26, r8
    32b2:	12 96       	adiw	r26, 0x02	; 2
    32b4:	8d 91       	ld	r24, X+
    32b6:	9c 91       	ld	r25, X
    32b8:	13 97       	sbiw	r26, 0x03	; 3
    32ba:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <mainAdcPhaseVolts+0x3>
    32be:	2f 93       	push	r18
    32c0:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <mainAdcPhaseVolts+0x2>
    32c4:	2f 93       	push	r18
    32c6:	20 91 78 05 	lds	r18, 0x0578	; 0x800578 <mainAdcPhaseVolts+0x1>
    32ca:	2f 93       	push	r18
    32cc:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <mainAdcPhaseVolts>
    32d0:	2f 93       	push	r18
    32d2:	9f 93       	push	r25
    32d4:	8f 93       	push	r24
    32d6:	bf 92       	push	r11
    32d8:	af 92       	push	r10
    32da:	1f 93       	push	r17
    32dc:	0f 93       	push	r16
    32de:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
					acAdcCh[ADC_CH_PHASE],
					mainAdcPhaseVolts);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    32e2:	28 2f       	mov	r18, r24
    32e4:	a8 01       	movw	r20, r16
    32e6:	60 e0       	ldi	r22, 0x00	; 0
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA03, sizeof(PM_FORMAT_TA03));
    32ee:	2d e1       	ldi	r18, 0x1D	; 29
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	4d ee       	ldi	r20, 0xED	; 237
    32f4:	57 e0       	ldi	r21, 0x07	; 7
    32f6:	b5 01       	movw	r22, r10
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    32fe:	f4 01       	movw	r30, r8
    3300:	84 81       	ldd	r24, Z+4	; 0x04
    3302:	95 81       	ldd	r25, Z+5	; 0x05
    3304:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <mainAdcTemp+0x3>
    3308:	2f 93       	push	r18
    330a:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <mainAdcTemp+0x2>
    330e:	2f 93       	push	r18
    3310:	20 91 74 05 	lds	r18, 0x0574	; 0x800574 <mainAdcTemp+0x1>
    3314:	2f 93       	push	r18
    3316:	20 91 73 05 	lds	r18, 0x0573	; 0x800573 <mainAdcTemp>
    331a:	2f 93       	push	r18
    331c:	9f 93       	push	r25
    331e:	8f 93       	push	r24
    3320:	bf 92       	push	r11
    3322:	af 92       	push	r10
    3324:	1f 93       	push	r17
    3326:	0f 93       	push	r16
    3328:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
					acAdcCh[ADC_CH_TEMP],
					mainAdcTemp);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    332c:	28 2f       	mov	r18, r24
    332e:	a8 01       	movw	r20, r16
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	0f be       	out	0x3f, r0	; 63
    3340:	cd bf       	out	0x3d, r28	; 61
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA11, sizeof(PM_FORMAT_TA11));
    3342:	28 e3       	ldi	r18, 0x38	; 56
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	45 eb       	ldi	r20, 0xB5	; 181
    3348:	57 e0       	ldi	r21, 0x07	; 7
    334a:	6f e8       	ldi	r22, 0x8F	; 143
    334c:	73 e0       	ldi	r23, 0x03	; 3
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		uint8_t localICR1H = ICR1H;
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock

		SREG = sreg;

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	96 29       	or	r25, r6
					mainAdcTemp);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA11, sizeof(PM_FORMAT_TA11));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3358:	9f 93       	push	r25
    335a:	7f 92       	push	r7
    335c:	ff 92       	push	r15
    335e:	ef 92       	push	r14
    3360:	df 92       	push	r13
    3362:	cf 92       	push	r12
    3364:	0f 2e       	mov	r0, r31
    3366:	ff e8       	ldi	r31, 0x8F	; 143
    3368:	ef 2e       	mov	r14, r31
    336a:	f3 e0       	ldi	r31, 0x03	; 3
    336c:	ff 2e       	mov	r15, r31
    336e:	f0 2d       	mov	r31, r0
    3370:	ff 92       	push	r15
    3372:	ef 92       	push	r14
    3374:	0f e0       	ldi	r16, 0x0F	; 15
    3376:	14 e0       	ldi	r17, 0x04	; 4
    3378:	1f 93       	push	r17
    337a:	0f 93       	push	r16
    337c:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				localFastCtr1ms,
				localFastTCNT1);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3380:	28 2f       	mov	r18, r24
    3382:	a8 01       	movw	r20, r16
    3384:	60 e0       	ldi	r22, 0x00	; 0
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA12, sizeof(PM_FORMAT_TA12));
    338c:	24 e7       	ldi	r18, 0x74	; 116
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	41 e4       	ldi	r20, 0x41	; 65
    3392:	57 e0       	ldi	r21, 0x07	; 7
    3394:	b7 01       	movw	r22, r14
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    339c:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <ppsStampICR1_last+0x1>
    33a0:	8f 93       	push	r24
    33a2:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <ppsStampICR1_last>
    33a6:	8f 93       	push	r24
    33a8:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <ppsStampCtr1ms_last+0x3>
    33ac:	8f 93       	push	r24
    33ae:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <ppsStampCtr1ms_last+0x2>
    33b2:	8f 93       	push	r24
    33b4:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <ppsStampCtr1ms_last+0x1>
    33b8:	8f 93       	push	r24
    33ba:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <ppsStampCtr1ms_last>
    33be:	8f 93       	push	r24
    33c0:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <ppsStampICR1+0x1>
    33c4:	8f 93       	push	r24
    33c6:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <ppsStampICR1>
    33ca:	8f 93       	push	r24
    33cc:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <ppsStampCtr1ms+0x3>
    33d0:	8f 93       	push	r24
    33d2:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <ppsStampCtr1ms+0x2>
    33d6:	8f 93       	push	r24
    33d8:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <ppsStampCtr1ms+0x1>
    33dc:	8f 93       	push	r24
    33de:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <ppsStampCtr1ms>
    33e2:	8f 93       	push	r24
    33e4:	ff 92       	push	r15
    33e6:	ef 92       	push	r14
    33e8:	1f 93       	push	r17
    33ea:	0f 93       	push	r16
    33ec:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				ppsStampCtr1ms,
				ppsStampICR1,
				ppsStampCtr1ms_last,
				ppsStampICR1_last);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    33f0:	28 2f       	mov	r18, r24
    33f2:	a8 01       	movw	r20, r16
    33f4:	60 e0       	ldi	r22, 0x00	; 0
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA13, sizeof(PM_FORMAT_TA13));
    33fc:	24 e2       	ldi	r18, 0x24	; 36
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	4d e1       	ldi	r20, 0x1D	; 29
    3402:	57 e0       	ldi	r21, 0x07	; 7
    3404:	b7 01       	movw	r22, r14
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    340c:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <fastPwmSubLoopVal>
    3410:	1f 92       	push	r1
    3412:	8f 93       	push	r24
    3414:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <fastPwmLoopVal>
    3418:	1f 92       	push	r1
    341a:	8f 93       	push	r24
    341c:	ff 92       	push	r15
    341e:	ef 92       	push	r14
    3420:	1f 93       	push	r17
    3422:	0f 93       	push	r16
    3424:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				fastPwmLoopVal,
				fastPwmSubLoopVal);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	f8 94       	cli
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	cd bf       	out	0x3d, r28	; 61
    3432:	28 2f       	mov	r18, r24
    3434:	a8 01       	movw	r20, r16
    3436:	60 e0       	ldi	r22, 0x00	; 0
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA14, sizeof(PM_FORMAT_TA14));
    343e:	20 e2       	ldi	r18, 0x20	; 32
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	4d ef       	ldi	r20, 0xFD	; 253
    3444:	56 e0       	ldi	r21, 0x06	; 6
    3446:	b7 01       	movw	r22, r14
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    344e:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3452:	1f 92       	push	r1
    3454:	8f 93       	push	r24
    3456:	ff 92       	push	r15
    3458:	ef 92       	push	r14
    345a:	1f 93       	push	r17
    345c:	0f 93       	push	r16
    345e:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				mainRefClkState);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3462:	28 2f       	mov	r18, r24
    3464:	a8 01       	movw	r20, r16
    3466:	60 e0       	ldi	r22, 0x00	; 0
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	0f 90       	pop	r0
	}

	if (!localNoPpsCnt) {
    347a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <localNoPpsCnt.2933>
    347e:	81 11       	cpse	r24, r1
    3480:	c0 c6       	rjmp	.+3456   	; 0x4202 <main_fw_giveAway+0x1d0e>
		/* PPS - 1 Hz Ref.-Clk. - State Machine */

		/* central calculations */
		static float localMeanClockDiffSum = 0.0f;
		float qrgDev_Hz;
		int32_t local20MHzClockDiff =   (20000L * (((int32_t) ppsStampCtr1ms) - ((int32_t) ppsStampCtr1ms_last)))
    3482:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <ppsStampCtr1ms>
    3486:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <ppsStampCtr1ms+0x1>
    348a:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <ppsStampCtr1ms+0x2>
    348e:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <ppsStampCtr1ms+0x3>
    3492:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <ppsStampCtr1ms_last>
    3496:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <ppsStampCtr1ms_last+0x1>
    349a:	a0 91 87 05 	lds	r26, 0x0587	; 0x800587 <ppsStampCtr1ms_last+0x2>
    349e:	b0 91 88 05 	lds	r27, 0x0588	; 0x800588 <ppsStampCtr1ms_last+0x3>
    34a2:	9a 01       	movw	r18, r20
    34a4:	ab 01       	movw	r20, r22
    34a6:	28 1b       	sub	r18, r24
    34a8:	39 0b       	sbc	r19, r25
    34aa:	4a 0b       	sbc	r20, r26
    34ac:	5b 0b       	sbc	r21, r27
    34ae:	a0 e2       	ldi	r26, 0x20	; 32
    34b0:	be e4       	ldi	r27, 0x4E	; 78
    34b2:	0e 94 9c 3b 	call	0x7738	; 0x7738 <__muluhisi3>
							    	  +           (((int32_t) ppsStampICR1)   - ((int32_t) ppsStampICR1_last))
    34b6:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <ppsStampICR1>
    34ba:	30 91 8a 05 	lds	r19, 0x058A	; 0x80058a <ppsStampICR1+0x1>
    34be:	49 01       	movw	r8, r18
    34c0:	a1 2c       	mov	r10, r1
    34c2:	b1 2c       	mov	r11, r1
    34c4:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <ppsStampICR1_last>
    34c8:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <ppsStampICR1_last+0x1>
    34cc:	82 1a       	sub	r8, r18
    34ce:	93 0a       	sbc	r9, r19
    34d0:	a1 08       	sbc	r10, r1
    34d2:	b1 08       	sbc	r11, r1
    34d4:	86 0e       	add	r8, r22
    34d6:	97 1e       	adc	r9, r23
    34d8:	a8 1e       	adc	r10, r24
    34da:	b9 1e       	adc	r11, r25
		/* PPS - 1 Hz Ref.-Clk. - State Machine */

		/* central calculations */
		static float localMeanClockDiffSum = 0.0f;
		float qrgDev_Hz;
		int32_t local20MHzClockDiff =   (20000L * (((int32_t) ppsStampCtr1ms) - ((int32_t) ppsStampCtr1ms_last)))
    34dc:	75 01       	movw	r14, r10
    34de:	64 01       	movw	r12, r8
    34e0:	bd e2       	ldi	r27, 0x2D	; 45
    34e2:	db 1a       	sub	r13, r27
    34e4:	b1 e3       	ldi	r27, 0x31	; 49
    34e6:	eb 0a       	sbc	r14, r27
    34e8:	b1 e0       	ldi	r27, 0x01	; 1
    34ea:	fb 0a       	sbc	r15, r27
							    	  +           (((int32_t) ppsStampICR1)   - ((int32_t) ppsStampICR1_last))
							    	  -  20000000L;

		float localMeanFloatClockDiff = localMeanClockDiffSum / MEAN_QRG_CLOCK_STAGES_F;
    34ec:	40 90 23 01 	lds	r4, 0x0123	; 0x800123 <localMeanClockDiffSum.2944>
    34f0:	50 90 24 01 	lds	r5, 0x0124	; 0x800124 <localMeanClockDiffSum.2944+0x1>
    34f4:	60 90 25 01 	lds	r6, 0x0125	; 0x800125 <localMeanClockDiffSum.2944+0x2>
    34f8:	70 90 26 01 	lds	r7, 0x0126	; 0x800126 <localMeanClockDiffSum.2944+0x3>
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 ea       	ldi	r20, 0xA0	; 160
    3502:	50 e4       	ldi	r21, 0x40	; 64
    3504:	c3 01       	movw	r24, r6
    3506:	b2 01       	movw	r22, r4
    3508:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    350c:	6e 83       	std	Y+6, r22	; 0x06
    350e:	7f 83       	std	Y+7, r23	; 0x07
    3510:	88 87       	std	Y+8, r24	; 0x08
    3512:	99 87       	std	Y+9, r25	; 0x09
		float localPpm = 0.0f;
		if ((local20MHzClockDiff < -CLOCK_DIFF_OUT) || (CLOCK_DIFF_OUT < local20MHzClockDiff)) {
    3514:	ec e9       	ldi	r30, 0x9C	; 156
    3516:	8e 1a       	sub	r8, r30
    3518:	ec e2       	ldi	r30, 0x2C	; 44
    351a:	9e 0a       	sbc	r9, r30
    351c:	e1 e3       	ldi	r30, 0x31	; 49
    351e:	ae 0a       	sbc	r10, r30
    3520:	e1 e0       	ldi	r30, 0x01	; 1
    3522:	be 0a       	sbc	r11, r30
    3524:	f9 ec       	ldi	r31, 0xC9	; 201
    3526:	8f 16       	cp	r8, r31
    3528:	91 04       	cpc	r9, r1
    352a:	a1 04       	cpc	r10, r1
    352c:	b1 04       	cpc	r11, r1
    352e:	d0 f0       	brcs	.+52     	; 0x3564 <main_fw_giveAway+0x1070>
			/* bad value - ignore */
			local20MHzClockDiff = 0;
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	5f e3       	ldi	r21, 0x3F	; 63
    3538:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    353c:	26 2e       	mov	r2, r22
    353e:	37 2e       	mov	r3, r23
    3540:	88 2e       	mov	r8, r24
    3542:	99 2e       	mov	r9, r25
			localPpm = (localMeanFloatClockDiff / 20.0f);
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 ea       	ldi	r20, 0xA0	; 160
    354a:	51 e4       	ldi	r21, 0x41	; 65
    354c:	6e 81       	ldd	r22, Y+6	; 0x06
    354e:	7f 81       	ldd	r23, Y+7	; 0x07
    3550:	88 85       	ldd	r24, Y+8	; 0x08
    3552:	99 85       	ldd	r25, Y+9	; 0x09
    3554:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    3558:	2b 01       	movw	r4, r22
    355a:	3c 01       	movw	r6, r24

		float localMeanFloatClockDiff = localMeanClockDiffSum / MEAN_QRG_CLOCK_STAGES_F;
		float localPpm = 0.0f;
		if ((local20MHzClockDiff < -CLOCK_DIFF_OUT) || (CLOCK_DIFF_OUT < local20MHzClockDiff)) {
			/* bad value - ignore */
			local20MHzClockDiff = 0;
    355c:	c1 2c       	mov	r12, r1
    355e:	d1 2c       	mov	r13, r1
    3560:	76 01       	movw	r14, r12
    3562:	5e c0       	rjmp	.+188    	; 0x3620 <main_fw_giveAway+0x112c>
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
			localPpm = (localMeanFloatClockDiff / 20.0f);

		} else if ((-CLOCK_DIFF_COARSE_FINE < local20MHzClockDiff) && (local20MHzClockDiff < CLOCK_DIFF_COARSE_FINE)) {
    3564:	d7 01       	movw	r26, r14
    3566:	c6 01       	movw	r24, r12
    3568:	43 96       	adiw	r24, 0x13	; 19
    356a:	a1 1d       	adc	r26, r1
    356c:	b1 1d       	adc	r27, r1
    356e:	87 97       	sbiw	r24, 0x27	; 39
    3570:	a1 05       	cpc	r26, r1
    3572:	b1 05       	cpc	r27, r1
    3574:	98 f5       	brcc	.+102    	; 0x35dc <main_fw_giveAway+0x10e8>
			/* fine mode */
			localMeanClockDiffSum += (((float) local20MHzClockDiff) - localMeanFloatClockDiff);
    3576:	c7 01       	movw	r24, r14
    3578:	b6 01       	movw	r22, r12
    357a:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    357e:	2e 81       	ldd	r18, Y+6	; 0x06
    3580:	3f 81       	ldd	r19, Y+7	; 0x07
    3582:	48 85       	ldd	r20, Y+8	; 0x08
    3584:	59 85       	ldd	r21, Y+9	; 0x09
    3586:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    358a:	9b 01       	movw	r18, r22
    358c:	ac 01       	movw	r20, r24
    358e:	c3 01       	movw	r24, r6
    3590:	b2 01       	movw	r22, r4
    3592:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    3596:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <localMeanClockDiffSum.2944>
    359a:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <localMeanClockDiffSum.2944+0x1>
    359e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <localMeanClockDiffSum.2944+0x2>
    35a2:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <localMeanClockDiffSum.2944+0x3>
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e0       	ldi	r20, 0x00	; 0
    35ac:	5f e3       	ldi	r21, 0x3F	; 63
    35ae:	6e 81       	ldd	r22, Y+6	; 0x06
    35b0:	7f 81       	ldd	r23, Y+7	; 0x07
    35b2:	88 85       	ldd	r24, Y+8	; 0x08
    35b4:	99 85       	ldd	r25, Y+9	; 0x09
    35b6:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    35ba:	26 2e       	mov	r2, r22
    35bc:	37 2e       	mov	r3, r23
    35be:	88 2e       	mov	r8, r24
    35c0:	99 2e       	mov	r9, r25
			localPpm = (localMeanFloatClockDiff / 20.0f);
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 ea       	ldi	r20, 0xA0	; 160
    35c8:	51 e4       	ldi	r21, 0x41	; 65
    35ca:	6e 81       	ldd	r22, Y+6	; 0x06
    35cc:	7f 81       	ldd	r23, Y+7	; 0x07
    35ce:	88 85       	ldd	r24, Y+8	; 0x08
    35d0:	99 85       	ldd	r25, Y+9	; 0x09
    35d2:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    35d6:	2b 01       	movw	r4, r22
    35d8:	3c 01       	movw	r6, r24
    35da:	22 c0       	rjmp	.+68     	; 0x3620 <main_fw_giveAway+0x112c>

		} else {
			/* re-init the mean value sum when being in coarse mode */
			localMeanClockDiffSum = 0.0f;
    35dc:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <localMeanClockDiffSum.2944>
    35e0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <localMeanClockDiffSum.2944+0x1>
    35e4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <localMeanClockDiffSum.2944+0x2>
    35e8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <localMeanClockDiffSum.2944+0x3>
			qrgDev_Hz = (local20MHzClockDiff / 2.0f);
    35ec:	c7 01       	movw	r24, r14
    35ee:	b6 01       	movw	r22, r12
    35f0:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    35f4:	2b 01       	movw	r4, r22
    35f6:	3c 01       	movw	r6, r24
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e0       	ldi	r20, 0x00	; 0
    35fe:	5f e3       	ldi	r21, 0x3F	; 63
    3600:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    3604:	26 2e       	mov	r2, r22
    3606:	37 2e       	mov	r3, r23
    3608:	88 2e       	mov	r8, r24
    360a:	99 2e       	mov	r9, r25
			localPpm = (local20MHzClockDiff / 20.0f);
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 ea       	ldi	r20, 0xA0	; 160
    3612:	51 e4       	ldi	r21, 0x41	; 65
    3614:	c3 01       	movw	r24, r6
    3616:	b2 01       	movw	r22, r4
    3618:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    361c:	2b 01       	movw	r4, r22
    361e:	3c 01       	movw	r6, r24
		}

		if (main_bf.mainIsTimerTest && (!main_bf.mainIsAFC)) {
    3620:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3624:	82 ff       	sbrs	r24, 2
    3626:	5c c0       	rjmp	.+184    	; 0x36e0 <main_fw_giveAway+0x11ec>
    3628:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    362c:	80 fd       	sbrc	r24, 0
    362e:	58 c0       	rjmp	.+176    	; 0x36e0 <main_fw_giveAway+0x11ec>
			/* monitoring frequency even when AFC is switched off */
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA01, sizeof(PM_FORMAT_IA01));
    3630:	2a e3       	ldi	r18, 0x3A	; 58
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	47 ef       	ldi	r20, 0xF7	; 247
    3636:	55 e0       	ldi	r21, 0x05	; 5
    3638:	6f e8       	ldi	r22, 0x8F	; 143
    363a:	73 e0       	ldi	r23, 0x03	; 3
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3642:	ff 92       	push	r15
    3644:	ef 92       	push	r14
    3646:	df 92       	push	r13
    3648:	cf 92       	push	r12
    364a:	0f 2e       	mov	r0, r31
    364c:	ff e8       	ldi	r31, 0x8F	; 143
    364e:	af 2e       	mov	r10, r31
    3650:	f3 e0       	ldi	r31, 0x03	; 3
    3652:	bf 2e       	mov	r11, r31
    3654:	f0 2d       	mov	r31, r0
    3656:	bf 92       	push	r11
    3658:	af 92       	push	r10
    365a:	0f e0       	ldi	r16, 0x0F	; 15
    365c:	14 e0       	ldi	r17, 0x04	; 4
    365e:	1f 93       	push	r17
    3660:	0f 93       	push	r16
    3662:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3666:	28 2f       	mov	r18, r24
    3668:	a8 01       	movw	r20, r16
    366a:	60 e0       	ldi	r22, 0x00	; 0
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
    3672:	28 e6       	ldi	r18, 0x68	; 104
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	4f e8       	ldi	r20, 0x8F	; 143
    3678:	55 e0       	ldi	r21, 0x05	; 5
    367a:	b5 01       	movw	r22, r10
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
					localMeanFloatClockDiff,
					qrgDev_Hz,
					mainPpm + 2.5f);
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	40 e2       	ldi	r20, 0x20	; 32
    3688:	50 e4       	ldi	r21, 0x40	; 64
    368a:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <mainPpm>
    368e:	70 91 80 05 	lds	r23, 0x0580	; 0x800580 <mainPpm+0x1>
    3692:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <mainPpm+0x2>
    3696:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <mainPpm+0x3>
    369a:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
			int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    369e:	9f 93       	push	r25
    36a0:	8f 93       	push	r24
    36a2:	7f 93       	push	r23
    36a4:	6f 93       	push	r22
    36a6:	9f 92       	push	r9
    36a8:	8f 92       	push	r8
    36aa:	3f 92       	push	r3
    36ac:	2f 92       	push	r2
    36ae:	29 85       	ldd	r18, Y+9	; 0x09
    36b0:	2f 93       	push	r18
    36b2:	38 85       	ldd	r19, Y+8	; 0x08
    36b4:	3f 93       	push	r19
    36b6:	8f 81       	ldd	r24, Y+7	; 0x07
    36b8:	8f 93       	push	r24
    36ba:	9e 81       	ldd	r25, Y+6	; 0x06
    36bc:	9f 93       	push	r25
    36be:	bf 92       	push	r11
    36c0:	af 92       	push	r10
    36c2:	1f 93       	push	r17
    36c4:	0f 93       	push	r16
    36c6:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
					localMeanFloatClockDiff,
					qrgDev_Hz,
					mainPpm + 2.5f);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    36ca:	28 2f       	mov	r18, r24
    36cc:	a8 01       	movw	r20, r16
    36ce:	60 e0       	ldi	r22, 0x00	; 0
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	cd bf       	out	0x3d, r28	; 61
		}


		/* frequency & phase correction modules */

		if (main_bf.mainIsAFC) {
    36e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    36e4:	80 ff       	sbrs	r24, 0
    36e6:	f7 c1       	rjmp	.+1006   	; 0x3ad6 <main_fw_giveAway+0x15e2>
	const  uint8_t holdOffTimeStart = 20;
	static uint8_t holdOffTime = 0;

	uint8_t localIsOffset = false;

	if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    36e8:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    36ec:	84 30       	cpi	r24, 0x04	; 4
    36ee:	80 f4       	brcc	.+32     	; 0x3710 <main_fw_giveAway+0x121c>
		/* Help APC to find its phase - when found, stop offset */
		meanFloatClockDiff += 0.1f;							// 0.1 Hz @ 20 MHz below center frequency to let the phase wander and
    36f0:	2d ec       	ldi	r18, 0xCD	; 205
    36f2:	3c ec       	ldi	r19, 0xCC	; 204
    36f4:	4c ec       	ldi	r20, 0xCC	; 204
    36f6:	5d e3       	ldi	r21, 0x3D	; 61
    36f8:	6e 81       	ldd	r22, Y+6	; 0x06
    36fa:	7f 81       	ldd	r23, Y+7	; 0x07
    36fc:	88 85       	ldd	r24, Y+8	; 0x08
    36fe:	99 85       	ldd	r25, Y+9	; 0x09
    3700:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    3704:	6e 83       	std	Y+6, r22	; 0x06
    3706:	7f 83       	std	Y+7, r23	; 0x07
    3708:	88 87       	std	Y+8, r24	; 0x08
    370a:	99 87       	std	Y+9, r25	; 0x09
															// the phase locker find its position to lock in
		localIsOffset = true;
    370c:	11 e0       	ldi	r17, 0x01	; 1
    370e:	01 c0       	rjmp	.+2      	; 0x3712 <main_fw_giveAway+0x121e>
	/* frequency shift calculation */

	const  uint8_t holdOffTimeStart = 20;
	static uint8_t holdOffTime = 0;

	uint8_t localIsOffset = false;
    3710:	10 e0       	ldi	r17, 0x00	; 0
		meanFloatClockDiff += 0.1f;							// 0.1 Hz @ 20 MHz below center frequency to let the phase wander and
															// the phase locker find its position to lock in
		localIsOffset = true;
	}

	if ((-1000.0f < meanFloatClockDiff) &&
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	4a e7       	ldi	r20, 0x7A	; 122
    3718:	54 ec       	ldi	r21, 0xC4	; 196
    371a:	6e 81       	ldd	r22, Y+6	; 0x06
    371c:	7f 81       	ldd	r23, Y+7	; 0x07
    371e:	88 85       	ldd	r24, Y+8	; 0x08
    3720:	99 85       	ldd	r25, Y+9	; 0x09
    3722:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__gesf2>
    3726:	18 16       	cp	r1, r24
    3728:	0c f0       	brlt	.+2      	; 0x372c <main_fw_giveAway+0x1238>
    372a:	c0 c1       	rjmp	.+896    	; 0x3aac <main_fw_giveAway+0x15b8>
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	4a e7       	ldi	r20, 0x7A	; 122
    3732:	54 e4       	ldi	r21, 0x44	; 68
    3734:	6e 81       	ldd	r22, Y+6	; 0x06
    3736:	7f 81       	ldd	r23, Y+7	; 0x07
    3738:	88 85       	ldd	r24, Y+8	; 0x08
    373a:	99 85       	ldd	r25, Y+9	; 0x09
    373c:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    3740:	88 23       	and	r24, r24
    3742:	0c f0       	brlt	.+2      	; 0x3746 <main_fw_giveAway+0x1252>
    3744:	b3 c1       	rjmp	.+870    	; 0x3aac <main_fw_giveAway+0x15b8>
		( 1000.0f > meanFloatClockDiff)) {
		/* keep measuring window between +/-50ppm */
		ppm -=  (localIsOffset ?  0.005f : 0.0f);			// correct the clock offset
    3746:	11 11       	cpse	r17, r1
    3748:	04 c0       	rjmp	.+8      	; 0x3752 <main_fw_giveAway+0x125e>
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	a9 01       	movw	r20, r18
    3750:	04 c0       	rjmp	.+8      	; 0x375a <main_fw_giveAway+0x1266>
    3752:	2a e0       	ldi	r18, 0x0A	; 10
    3754:	37 ed       	ldi	r19, 0xD7	; 215
    3756:	43 ea       	ldi	r20, 0xA3	; 163
    3758:	5b e3       	ldi	r21, 0x3B	; 59
    375a:	c3 01       	movw	r24, r6
    375c:	b2 01       	movw	r22, r4
    375e:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    3762:	b6 2e       	mov	r11, r22
    3764:	a7 2e       	mov	r10, r23
    3766:	18 2f       	mov	r17, r24
    3768:	09 2f       	mov	r16, r25

		float pwmCorSteps;
		if ((-CLOCK_DIFF_FAST_FRAME <= int20MHzClockDiff) && (int20MHzClockDiff <= CLOCK_DIFF_FAST_FRAME)) {
    376a:	d7 01       	movw	r26, r14
    376c:	c6 01       	movw	r24, r12
    376e:	03 96       	adiw	r24, 0x03	; 3
    3770:	a1 1d       	adc	r26, r1
    3772:	b1 1d       	adc	r27, r1
    3774:	07 97       	sbiw	r24, 0x07	; 7
    3776:	a1 05       	cpc	r26, r1
    3778:	b1 05       	cpc	r27, r1
    377a:	00 f5       	brcc	.+64     	; 0x37bc <main_fw_giveAway+0x12c8>
			/* fine pitching */
			pwmCorSteps = ((-meanFloatClockDiff / 20.0f) / mainCoef_b02_qrg_k_pPwmStep_25C_ppm) / PWM_COR_STEPS_FINE_DIV_F;
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 ea       	ldi	r20, 0xA0	; 160
    3782:	51 e4       	ldi	r21, 0x41	; 65
    3784:	6e 81       	ldd	r22, Y+6	; 0x06
    3786:	7f 81       	ldd	r23, Y+7	; 0x07
    3788:	88 85       	ldd	r24, Y+8	; 0x08
    378a:	99 85       	ldd	r25, Y+9	; 0x09
    378c:	90 58       	subi	r25, 0x80	; 128
    378e:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    3792:	20 91 a8 05 	lds	r18, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    3796:	30 91 a9 05 	lds	r19, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    379a:	40 91 aa 05 	lds	r20, 0x05AA	; 0x8005aa <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    379e:	50 91 ab 05 	lds	r21, 0x05AB	; 0x8005ab <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    37a2:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	40 e2       	ldi	r20, 0x20	; 32
    37ac:	51 e4       	ldi	r21, 0x41	; 65
    37ae:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    37b2:	6a 87       	std	Y+10, r22	; 0x0a
    37b4:	7e 87       	std	Y+14, r23	; 0x0e
    37b6:	8f 87       	std	Y+15, r24	; 0x0f
    37b8:	98 8b       	std	Y+16, r25	; 0x10
    37ba:	25 c0       	rjmp	.+74     	; 0x3806 <main_fw_giveAway+0x1312>

		} else {
			/* coarse pitching */
			pwmCorSteps = ((((float) -int20MHzClockDiff) / 20.0f) / mainCoef_b02_qrg_k_pPwmStep_25C_ppm) / PWM_COR_STEPS_COARSE_DIV_F;  // used also in main_fw_calcPhase()
    37bc:	66 27       	eor	r22, r22
    37be:	77 27       	eor	r23, r23
    37c0:	cb 01       	movw	r24, r22
    37c2:	6c 19       	sub	r22, r12
    37c4:	7d 09       	sbc	r23, r13
    37c6:	8e 09       	sbc	r24, r14
    37c8:	9f 09       	sbc	r25, r15
    37ca:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	40 ea       	ldi	r20, 0xA0	; 160
    37d4:	51 e4       	ldi	r21, 0x41	; 65
    37d6:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    37da:	20 91 a8 05 	lds	r18, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    37de:	30 91 a9 05 	lds	r19, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    37e2:	40 91 aa 05 	lds	r20, 0x05AA	; 0x8005aa <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    37e6:	50 91 ab 05 	lds	r21, 0x05AB	; 0x8005ab <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    37ea:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    37ee:	2d ec       	ldi	r18, 0xCD	; 205
    37f0:	3c ec       	ldi	r19, 0xCC	; 204
    37f2:	4c e8       	ldi	r20, 0x8C	; 140
    37f4:	5f e3       	ldi	r21, 0x3F	; 63
    37f6:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    37fa:	6a 87       	std	Y+10, r22	; 0x0a
    37fc:	7e 87       	std	Y+14, r23	; 0x0e
    37fe:	8f 87       	std	Y+15, r24	; 0x0f
    3800:	98 8b       	std	Y+16, r25	; 0x10
			mainRefClkState = REFCLK_STATE_NOSYNC;
    3802:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <mainRefClkState>
		}

		/* determine the new state of the FSM */
		if ((-0.015f <= ppm) && (ppm <= 0.015f) && (mainRefClkState == REFCLK_STATE_SEARCH_PHASE)) {  // single step tuning with counter stabilizer
    3806:	2f e8       	ldi	r18, 0x8F	; 143
    3808:	32 ec       	ldi	r19, 0xC2	; 194
    380a:	45 e7       	ldi	r20, 0x75	; 117
    380c:	5c eb       	ldi	r21, 0xBC	; 188
    380e:	6b 2d       	mov	r22, r11
    3810:	7a 2d       	mov	r23, r10
    3812:	81 2f       	mov	r24, r17
    3814:	90 2f       	mov	r25, r16
    3816:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__gesf2>
    381a:	88 23       	and	r24, r24
    381c:	c4 f0       	brlt	.+48     	; 0x384e <main_fw_giveAway+0x135a>
    381e:	2f e8       	ldi	r18, 0x8F	; 143
    3820:	32 ec       	ldi	r19, 0xC2	; 194
    3822:	45 e7       	ldi	r20, 0x75	; 117
    3824:	5c e3       	ldi	r21, 0x3C	; 60
    3826:	6b 2d       	mov	r22, r11
    3828:	7a 2d       	mov	r23, r10
    382a:	81 2f       	mov	r24, r17
    382c:	90 2f       	mov	r25, r16
    382e:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    3832:	18 16       	cp	r1, r24
    3834:	64 f0       	brlt	.+24     	; 0x384e <main_fw_giveAway+0x135a>
    3836:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    383a:	82 30       	cpi	r24, 0x02	; 2
    383c:	41 f4       	brne	.+16     	; 0x384e <main_fw_giveAway+0x135a>
			/* Upgrading: switch on the frequency mean value counter */
			if (!holdOffTime) {
    383e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2820>
    3842:	81 11       	cpse	r24, r1
    3844:	7c c0       	rjmp	.+248    	; 0x393e <main_fw_giveAway+0x144a>
				mainRefClkState = REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED;
    3846:	83 e0       	ldi	r24, 0x03	; 3
    3848:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
    384c:	78 c0       	rjmp	.+240    	; 0x393e <main_fw_giveAway+0x144a>
			}

		} else if ((-0.045f <= ppm) && (ppm <= 0.045f) && (mainRefClkState == REFCLK_STATE_SEARCH_QRG)) {	 // entering phase window (deviation less than 1 Hz @ 20 MHz)
    384e:	2c ee       	ldi	r18, 0xEC	; 236
    3850:	31 e5       	ldi	r19, 0x51	; 81
    3852:	48 e3       	ldi	r20, 0x38	; 56
    3854:	5d eb       	ldi	r21, 0xBD	; 189
    3856:	6b 2d       	mov	r22, r11
    3858:	7a 2d       	mov	r23, r10
    385a:	81 2f       	mov	r24, r17
    385c:	90 2f       	mov	r25, r16
    385e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__gesf2>
    3862:	88 23       	and	r24, r24
    3864:	dc f0       	brlt	.+54     	; 0x389c <main_fw_giveAway+0x13a8>
    3866:	2c ee       	ldi	r18, 0xEC	; 236
    3868:	31 e5       	ldi	r19, 0x51	; 81
    386a:	48 e3       	ldi	r20, 0x38	; 56
    386c:	5d e3       	ldi	r21, 0x3D	; 61
    386e:	6b 2d       	mov	r22, r11
    3870:	7a 2d       	mov	r23, r10
    3872:	81 2f       	mov	r24, r17
    3874:	90 2f       	mov	r25, r16
    3876:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    387a:	18 16       	cp	r1, r24
    387c:	7c f0       	brlt	.+30     	; 0x389c <main_fw_giveAway+0x13a8>
    387e:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3882:	81 30       	cpi	r24, 0x01	; 1
    3884:	59 f4       	brne	.+22     	; 0x389c <main_fw_giveAway+0x13a8>
			/* Upgrading: search phase window */
			if (!holdOffTime) {
    3886:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2820>
    388a:	81 11       	cpse	r24, r1
    388c:	58 c0       	rjmp	.+176    	; 0x393e <main_fw_giveAway+0x144a>
				mainRefClkState = REFCLK_STATE_SEARCH_PHASE;
    388e:	82 e0       	ldi	r24, 0x02	; 2
    3890:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
				holdOffTime = holdOffTimeStart;
    3894:	84 e1       	ldi	r24, 0x14	; 20
    3896:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2820>
    389a:	51 c0       	rjmp	.+162    	; 0x393e <main_fw_giveAway+0x144a>
			}

		} else if ((-0.095f <= ppm) && (ppm <= 0.095f) && (mainRefClkState > REFCLK_STATE_SEARCH_QRG)) {  // do not fall out of phase window
    389c:	2c e5       	ldi	r18, 0x5C	; 92
    389e:	3f e8       	ldi	r19, 0x8F	; 143
    38a0:	42 ec       	ldi	r20, 0xC2	; 194
    38a2:	5d eb       	ldi	r21, 0xBD	; 189
    38a4:	6b 2d       	mov	r22, r11
    38a6:	7a 2d       	mov	r23, r10
    38a8:	81 2f       	mov	r24, r17
    38aa:	90 2f       	mov	r25, r16
    38ac:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__gesf2>
    38b0:	88 23       	and	r24, r24
    38b2:	84 f0       	brlt	.+32     	; 0x38d4 <main_fw_giveAway+0x13e0>
    38b4:	2c e5       	ldi	r18, 0x5C	; 92
    38b6:	3f e8       	ldi	r19, 0x8F	; 143
    38b8:	42 ec       	ldi	r20, 0xC2	; 194
    38ba:	5d e3       	ldi	r21, 0x3D	; 61
    38bc:	6b 2d       	mov	r22, r11
    38be:	7a 2d       	mov	r23, r10
    38c0:	81 2f       	mov	r24, r17
    38c2:	90 2f       	mov	r25, r16
    38c4:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    38c8:	18 16       	cp	r1, r24
    38ca:	24 f0       	brlt	.+8      	; 0x38d4 <main_fw_giveAway+0x13e0>
    38cc:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    38d0:	82 30       	cpi	r24, 0x02	; 2
    38d2:	a8 f5       	brcc	.+106    	; 0x393e <main_fw_giveAway+0x144a>
			/* hysteresis: keep state a bit longer */

		} else if ((-25.0 <= ppm) && (ppm <= 25.0f)) {  // searching QRG until 1 Hz resolution is established
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	48 ec       	ldi	r20, 0xC8	; 200
    38da:	51 ec       	ldi	r21, 0xC1	; 193
    38dc:	6b 2d       	mov	r22, r11
    38de:	7a 2d       	mov	r23, r10
    38e0:	81 2f       	mov	r24, r17
    38e2:	90 2f       	mov	r25, r16
    38e4:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__gesf2>
    38e8:	88 23       	and	r24, r24
    38ea:	24 f1       	brlt	.+72     	; 0x3934 <main_fw_giveAway+0x1440>
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	48 ec       	ldi	r20, 0xC8	; 200
    38f2:	51 e4       	ldi	r21, 0x41	; 65
    38f4:	6b 2d       	mov	r22, r11
    38f6:	7a 2d       	mov	r23, r10
    38f8:	81 2f       	mov	r24, r17
    38fa:	90 2f       	mov	r25, r16
    38fc:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    3900:	18 16       	cp	r1, r24
    3902:	c4 f0       	brlt	.+48     	; 0x3934 <main_fw_giveAway+0x1440>
			if (mainRefClkState > REFCLK_STATE_SEARCH_QRG) {
    3904:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3908:	82 30       	cpi	r24, 0x02	; 2
    390a:	38 f0       	brcs	.+14     	; 0x391a <main_fw_giveAway+0x1426>
				/* Downgrading */
				mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
				holdOffTime = holdOffTimeStart;
    3912:	84 e1       	ldi	r24, 0x14	; 20
    3914:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2820>
    3918:	12 c0       	rjmp	.+36     	; 0x393e <main_fw_giveAway+0x144a>

			} else if (mainRefClkState < REFCLK_STATE_SEARCH_QRG) {
    391a:	81 11       	cpse	r24, r1
    391c:	10 c0       	rjmp	.+32     	; 0x393e <main_fw_giveAway+0x144a>
				/* Upgrading */
				if (!holdOffTime) {
    391e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2820>
    3922:	81 11       	cpse	r24, r1
    3924:	0c c0       	rjmp	.+24     	; 0x393e <main_fw_giveAway+0x144a>
					mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
					holdOffTime = holdOffTimeStart;
    392c:	84 e1       	ldi	r24, 0x14	; 20
    392e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2820>
    3932:	05 c0       	rjmp	.+10     	; 0x393e <main_fw_giveAway+0x144a>
				}
			}

		} else {
			/* no valid frequency detected */
			mainRefClkState = REFCLK_STATE_NOSYNC;
    3934:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <mainRefClkState>
			holdOffTime = holdOffTimeStart;
    3938:	84 e1       	ldi	r24, 0x14	; 20
    393a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2820>
		}

		/* windowing and adding of the new PWM value */

		uint8_t sreg = SREG;
    393e:	8f b7       	in	r24, 0x3f	; 63
		cli();
    3940:	f8 94       	cli
		uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
    3942:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <fastPwmLoopVal>
    3946:	9d 83       	std	Y+5, r25	; 0x05
		uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
    3948:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <fastPwmSubLoopVal>
    394c:	99 83       	std	Y+1, r25	; 0x01
		SREG = sreg;
    394e:	8f bf       	out	0x3f, r24	; 63

		if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    3950:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3954:	84 30       	cpi	r24, 0x04	; 4
    3956:	c8 f4       	brcc	.+50     	; 0x398a <main_fw_giveAway+0x1496>
			/* adjusting the PWM registers and make the new value public - only when hand-over to Phase Correction is not made */
			(void) main_fw_calcTimerAdj(pwmCorSteps, &localFastPwmLoopVal, &localFastPwmSubLoopVal);
    3958:	9e 01       	movw	r18, r28
    395a:	2f 5f       	subi	r18, 0xFF	; 255
    395c:	3f 4f       	sbci	r19, 0xFF	; 255
    395e:	ae 01       	movw	r20, r28
    3960:	4b 5f       	subi	r20, 0xFB	; 251
    3962:	5f 4f       	sbci	r21, 0xFF	; 255
    3964:	ba 85       	ldd	r27, Y+10	; 0x0a
    3966:	ae 85       	ldd	r26, Y+14	; 0x0e
    3968:	ff 85       	ldd	r31, Y+15	; 0x0f
    396a:	e8 89       	ldd	r30, Y+16	; 0x10
    396c:	6b 2f       	mov	r22, r27
    396e:	7a 2f       	mov	r23, r26
    3970:	8f 2f       	mov	r24, r31
    3972:	9e 2f       	mov	r25, r30
    3974:	0e 94 12 0b 	call	0x1624	; 0x1624 <main_fw_calcTimerAdj>

			uint8_t sreg = SREG;
    3978:	8f b7       	in	r24, 0x3f	; 63
			cli();
    397a:	f8 94       	cli
			fastPwmLoopVal		= localFastPwmLoopVal;
    397c:	9d 81       	ldd	r25, Y+5	; 0x05
    397e:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubLoopVal;
    3982:	99 81       	ldd	r25, Y+1	; 0x01
    3984:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <fastPwmSubLoopVal>
			SREG = sreg;
    3988:	8f bf       	out	0x3f, r24	; 63
		}

		if (main_bf.mainIsTimerTest) {
    398a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    398e:	82 ff       	sbrs	r24, 2
    3990:	8d c0       	rjmp	.+282    	; 0x3aac <main_fw_giveAway+0x15b8>
			/* monitoring */
			int len;
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA01, sizeof(PM_FORMAT_IA01));
    3992:	2a e3       	ldi	r18, 0x3A	; 58
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	47 ef       	ldi	r20, 0xF7	; 247
    3998:	55 e0       	ldi	r21, 0x05	; 5
    399a:	6f e8       	ldi	r22, 0x8F	; 143
    399c:	73 e0       	ldi	r23, 0x03	; 3
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    39a4:	ff 92       	push	r15
    39a6:	ef 92       	push	r14
    39a8:	df 92       	push	r13
    39aa:	cf 92       	push	r12
    39ac:	af e8       	ldi	r26, 0x8F	; 143
    39ae:	b3 e0       	ldi	r27, 0x03	; 3
    39b0:	bf 93       	push	r27
    39b2:	af 93       	push	r26
    39b4:	af e0       	ldi	r26, 0x0F	; 15
    39b6:	b4 e0       	ldi	r27, 0x04	; 4
    39b8:	bf 93       	push	r27
    39ba:	af 93       	push	r26
    39bc:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
					int20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    39c0:	28 2f       	mov	r18, r24
    39c2:	4f e0       	ldi	r20, 0x0F	; 15
    39c4:	54 e0       	ldi	r21, 0x04	; 4
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
    39ce:	28 e6       	ldi	r18, 0x68	; 104
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	4f e8       	ldi	r20, 0x8F	; 143
    39d4:	55 e0       	ldi	r21, 0x05	; 5
    39d6:	6f e8       	ldi	r22, 0x8F	; 143
    39d8:	73 e0       	ldi	r23, 0x03	; 3
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    39e0:	0f 93       	push	r16
    39e2:	1f 93       	push	r17
    39e4:	af 92       	push	r10
    39e6:	bf 92       	push	r11
    39e8:	9f 92       	push	r9
    39ea:	8f 92       	push	r8
    39ec:	3f 92       	push	r3
    39ee:	2f 92       	push	r2
    39f0:	f9 85       	ldd	r31, Y+9	; 0x09
    39f2:	ff 93       	push	r31
    39f4:	28 85       	ldd	r18, Y+8	; 0x08
    39f6:	2f 93       	push	r18
    39f8:	3f 81       	ldd	r19, Y+7	; 0x07
    39fa:	3f 93       	push	r19
    39fc:	8e 81       	ldd	r24, Y+6	; 0x06
    39fe:	8f 93       	push	r24
    3a00:	af e8       	ldi	r26, 0x8F	; 143
    3a02:	b3 e0       	ldi	r27, 0x03	; 3
    3a04:	bf 93       	push	r27
    3a06:	af 93       	push	r26
    3a08:	af e0       	ldi	r26, 0x0F	; 15
    3a0a:	b4 e0       	ldi	r27, 0x04	; 4
    3a0c:	bf 93       	push	r27
    3a0e:	af 93       	push	r26
    3a10:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
					meanFloatClockDiff,
					qrgDev_Hz,
					ppm);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3a14:	28 2f       	mov	r18, r24
    3a16:	4f e0       	ldi	r20, 0x0F	; 15
    3a18:	54 e0       	ldi	r21, 0x04	; 4
    3a1a:	60 e0       	ldi	r22, 0x00	; 0
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA03, sizeof(PM_FORMAT_IA03));
    3a22:	21 e4       	ldi	r18, 0x41	; 65
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	4e e4       	ldi	r20, 0x4E	; 78
    3a28:	55 e0       	ldi	r21, 0x05	; 5
    3a2a:	6f e8       	ldi	r22, 0x8F	; 143
    3a2c:	73 e0       	ldi	r23, 0x03	; 3
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3a34:	f8 89       	ldd	r31, Y+16	; 0x10
    3a36:	ff 93       	push	r31
    3a38:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a3a:	2f 93       	push	r18
    3a3c:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a3e:	3f 93       	push	r19
    3a40:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a42:	8f 93       	push	r24
}

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    3a44:	6d 81       	ldd	r22, Y+5	; 0x05
    3a46:	70 e0       	ldi	r23, 0x00	; 0
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    3a50:	6b 01       	movw	r12, r22
    3a52:	7c 01       	movw	r14, r24
    3a54:	69 81       	ldd	r22, Y+1	; 0x01
    3a56:	70 e0       	ldi	r23, 0x00	; 0
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	40 e8       	ldi	r20, 0x80	; 128
    3a66:	5b e3       	ldi	r21, 0x3B	; 59
    3a68:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    3a6c:	9b 01       	movw	r18, r22
    3a6e:	ac 01       	movw	r20, r24
    3a70:	c7 01       	movw	r24, r14
    3a72:	b6 01       	movw	r22, r12
    3a74:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
					qrgDev_Hz,
					ppm);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA03, sizeof(PM_FORMAT_IA03));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3a78:	9f 93       	push	r25
    3a7a:	8f 93       	push	r24
    3a7c:	7f 93       	push	r23
    3a7e:	6f 93       	push	r22
    3a80:	af e8       	ldi	r26, 0x8F	; 143
    3a82:	b3 e0       	ldi	r27, 0x03	; 3
    3a84:	bf 93       	push	r27
    3a86:	af 93       	push	r26
    3a88:	af e0       	ldi	r26, 0x0F	; 15
    3a8a:	b4 e0       	ldi	r27, 0x04	; 4
    3a8c:	bf 93       	push	r27
    3a8e:	af 93       	push	r26
    3a90:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
					main_fw_calcTimerToFloat(localFastPwmLoopVal, localFastPwmSubLoopVal),
					pwmCorSteps);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	f8 94       	cli
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	0f be       	out	0x3f, r0	; 63
    3a9c:	cd bf       	out	0x3d, r28	; 61
    3a9e:	28 2f       	mov	r18, r24
    3aa0:	4f e0       	ldi	r20, 0x0F	; 15
    3aa2:	54 e0       	ldi	r21, 0x04	; 4
    3aa4:	60 e0       	ldi	r22, 0x00	; 0
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
	} else {
		/* frequency search and lock loop - out if sync */
		// mainRefClkState = REFCLK_STATE_NOSYNC;  // single spike should not destroy time base - deactivated
	}

	if (--holdOffTime == 255) {
    3aac:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2820>
    3ab0:	81 50       	subi	r24, 0x01	; 1
    3ab2:	18 f0       	brcs	.+6      	; 0x3aba <main_fw_giveAway+0x15c6>
    3ab4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2820>
    3ab8:	02 c0       	rjmp	.+4      	; 0x3abe <main_fw_giveAway+0x15ca>
		holdOffTime = 0;
    3aba:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <holdOffTime.2820>

		if (main_bf.mainIsAFC) {
			/* AFC = automatic frequency calculation */
			calcQrg(local20MHzClockDiff, localMeanFloatClockDiff, qrgDev_Hz, localPpm);

			if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    3abe:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3ac2:	84 30       	cpi	r24, 0x04	; 4
    3ac4:	40 f4       	brcc	.+16     	; 0x3ad6 <main_fw_giveAway+0x15e2>
				/* phase corrections are done by the AFC unit */
				mainPpm = localPpm;
    3ac6:	40 92 7f 05 	sts	0x057F, r4	; 0x80057f <mainPpm>
    3aca:	50 92 80 05 	sts	0x0580, r5	; 0x800580 <mainPpm+0x1>
    3ace:	60 92 81 05 	sts	0x0581, r6	; 0x800581 <mainPpm+0x2>
    3ad2:	70 92 82 05 	sts	0x0582, r7	; 0x800582 <mainPpm+0x3>
			}
		}

		if (main_bf.mainIsAPC) {
    3ad6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3ada:	81 ff       	sbrs	r24, 1
    3adc:	92 c3       	rjmp	.+1828   	; 0x4202 <main_fw_giveAway+0x1d0e>
	/* APC = automatic phase control */

	static float phaseMeanPhaseErrorSum	= 0.0f;
	static float phaseStepsErrorSum		= 0.0f;

	uint8_t adcPhase = acAdcCh[ADC_CH_PHASE];
    3ade:	60 91 8b 03 	lds	r22, 0x038B	; 0x80038b <acAdcCh+0x2>
    3ae2:	70 91 8c 03 	lds	r23, 0x038C	; 0x80038c <acAdcCh+0x3>

	/* Handling of new mainRefClkState value */
	if (mainRefClkState >= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    3ae6:	10 91 9f 05 	lds	r17, 0x059F	; 0x80059f <mainRefClkState>
    3aea:	13 30       	cpi	r17, 0x03	; 3
    3aec:	08 f4       	brcc	.+2      	; 0x3af0 <main_fw_giveAway+0x15fc>
    3aee:	80 c0       	rjmp	.+256    	; 0x3bf0 <main_fw_giveAway+0x16fc>
		if ((ADC_PHASE_LO_LOCKING <= adcPhase) && (adcPhase <= ADC_PHASE_HI_LOCKING)) {
    3af0:	8c ee       	ldi	r24, 0xEC	; 236
    3af2:	86 0f       	add	r24, r22
    3af4:	8e 3d       	cpi	r24, 0xDE	; 222
    3af6:	08 f0       	brcs	.+2      	; 0x3afa <main_fw_giveAway+0x1606>
    3af8:	62 c0       	rjmp	.+196    	; 0x3bbe <main_fw_giveAway+0x16ca>
			if (mainRefClkState < REFCLK_STATE_LOCKING_PHASE) {
    3afa:	17 30       	cpi	r17, 0x07	; 7
    3afc:	d8 f4       	brcc	.+54     	; 0x3b34 <main_fw_giveAway+0x1640>
				/* up-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
    3afe:	87 e0       	ldi	r24, 0x07	; 7
    3b00:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
				phaseMeanPhaseErrorSum	= 0.0f;
    3b04:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <phaseMeanPhaseErrorSum.2844>
    3b08:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <phaseMeanPhaseErrorSum.2844+0x1>
    3b0c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <phaseMeanPhaseErrorSum.2844+0x2>
    3b10:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <phaseMeanPhaseErrorSum.2844+0x3>

				uint8_t sreg = SREG;
    3b14:	8f b7       	in	r24, 0x3f	; 63
				cli();
    3b16:	f8 94       	cli
				fastPwmSingleDiffSum = 0.0f;
    3b18:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <fastPwmSingleDiffSum>
    3b1c:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <fastPwmSingleDiffSum+0x1>
    3b20:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <fastPwmSingleDiffSum+0x2>
    3b24:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <fastPwmSingleDiffSum+0x3>
				SREG = sreg;
    3b28:	8f bf       	out	0x3f, r24	; 63
			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
			}

			if ((ADC_PHASE_LO_INSYNC <= adcPhase) && (adcPhase <= ADC_PHASE_HI_INSYNC)) {
    3b2a:	80 eb       	ldi	r24, 0xB0	; 176
    3b2c:	86 0f       	add	r24, r22
    3b2e:	84 37       	cpi	r24, 0x74	; 116
    3b30:	60 f0       	brcs	.+24     	; 0x3b4a <main_fw_giveAway+0x1656>
    3b32:	5e c0       	rjmp	.+188    	; 0x3bf0 <main_fw_giveAway+0x16fc>
				uint8_t sreg = SREG;
				cli();
				fastPwmSingleDiffSum = 0.0f;
				SREG = sreg;

			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
    3b34:	18 30       	cpi	r17, 0x08	; 8
    3b36:	08 f4       	brcc	.+2      	; 0x3b3a <main_fw_giveAway+0x1646>
    3b38:	23 c3       	rjmp	.+1606   	; 0x4180 <main_fw_giveAway+0x1c8c>
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
    3b3a:	87 e0       	ldi	r24, 0x07	; 7
    3b3c:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
			}

			if ((ADC_PHASE_LO_INSYNC <= adcPhase) && (adcPhase <= ADC_PHASE_HI_INSYNC)) {
    3b40:	80 eb       	ldi	r24, 0xB0	; 176
    3b42:	86 0f       	add	r24, r22
    3b44:	84 37       	cpi	r24, 0x74	; 116
    3b46:	30 f0       	brcs	.+12     	; 0x3b54 <main_fw_giveAway+0x1660>
    3b48:	61 c3       	rjmp	.+1730   	; 0x420c <main_fw_giveAway+0x1d18>
				if (mainRefClkState < REFCLK_STATE_IN_SYNC) {
    3b4a:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3b4e:	8f 30       	cpi	r24, 0x0F	; 15
    3b50:	08 f0       	brcs	.+2      	; 0x3b54 <main_fw_giveAway+0x1660>
    3b52:	4e c0       	rjmp	.+156    	; 0x3bf0 <main_fw_giveAway+0x16fc>
					mainRefClkState = REFCLK_STATE_IN_SYNC;
    3b54:	8f e0       	ldi	r24, 0x0F	; 15
    3b56:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
    3b5a:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
    3b5c:	69 58       	subi	r22, 0x89	; 137
    3b5e:	71 09       	sbc	r23, r1
    3b60:	07 2e       	mov	r0, r23
    3b62:	00 0c       	add	r0, r0
    3b64:	88 0b       	sbc	r24, r24
    3b66:	99 0b       	sbc	r25, r25
    3b68:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    3b6c:	26 e1       	ldi	r18, 0x16	; 22
    3b6e:	31 e5       	ldi	r19, 0x51	; 81
    3b70:	42 e0       	ldi	r20, 0x02	; 2
    3b72:	50 e4       	ldi	r21, 0x40	; 64
    3b74:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    3b78:	4b 01       	movw	r8, r22
    3b7a:	5c 01       	movw	r10, r24
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
		/* phase correction */
		phaseStepsPhase = (float) (pow(fabs(phaseErr) * 45.00f, 1.20f));  	// magic values  XXX PHASE: trimming is done here
    3b7c:	9f 77       	andi	r25, 0x7F	; 127
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	44 e3       	ldi	r20, 0x34	; 52
    3b84:	52 e4       	ldi	r21, 0x42	; 66
    3b86:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    3b8a:	2a e9       	ldi	r18, 0x9A	; 154
    3b8c:	39 e9       	ldi	r19, 0x99	; 153
    3b8e:	49 e9       	ldi	r20, 0x99	; 153
    3b90:	5f e3       	ldi	r21, 0x3F	; 63
    3b92:	0e 94 48 32 	call	0x6490	; 0x6490 <pow>
    3b96:	46 2f       	mov	r20, r22
    3b98:	57 2f       	mov	r21, r23
    3b9a:	68 2f       	mov	r22, r24
    3b9c:	79 2f       	mov	r23, r25
    3b9e:	2a 01       	movw	r4, r20
    3ba0:	3b 01       	movw	r6, r22
		if (phaseErr < 0.0f) {
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	a9 01       	movw	r20, r18
    3ba8:	c5 01       	movw	r24, r10
    3baa:	b4 01       	movw	r22, r8
    3bac:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    3bb0:	88 23       	and	r24, r24
    3bb2:	0c f4       	brge	.+2      	; 0x3bb6 <main_fw_giveAway+0x16c2>
    3bb4:	52 c0       	rjmp	.+164    	; 0x3c5a <main_fw_giveAway+0x1766>
    3bb6:	c1 2c       	mov	r12, r1
    3bb8:	d1 2c       	mov	r13, r1
    3bba:	76 01       	movw	r14, r12
    3bbc:	a2 c0       	rjmp	.+324    	; 0x3d02 <main_fw_giveAway+0x180e>
				}
			}

		} else {
			/* lost phase: hand-over to AFC */
			if (mainRefClkState >= REFCLK_STATE_LOCKING_PHASE) {
    3bbe:	17 30       	cpi	r17, 0x07	; 7
    3bc0:	08 f4       	brcc	.+2      	; 0x3bc4 <main_fw_giveAway+0x16d0>
    3bc2:	e4 c2       	rjmp	.+1480   	; 0x418c <main_fw_giveAway+0x1c98>
				mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
				phaseMeanPhaseErrorSum	= 0.0f;
    3bca:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <phaseMeanPhaseErrorSum.2844>
    3bce:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <phaseMeanPhaseErrorSum.2844+0x1>
    3bd2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <phaseMeanPhaseErrorSum.2844+0x2>
    3bd6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <phaseMeanPhaseErrorSum.2844+0x3>

				uint8_t sreg = SREG;
    3bda:	8f b7       	in	r24, 0x3f	; 63
				cli();
    3bdc:	f8 94       	cli
				fastPwmSingleDiffSum = 0.0f;
    3bde:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <fastPwmSingleDiffSum>
    3be2:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <fastPwmSingleDiffSum+0x1>
    3be6:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <fastPwmSingleDiffSum+0x2>
    3bea:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <fastPwmSingleDiffSum+0x3>
				SREG = sreg;
    3bee:	8f bf       	out	0x3f, r24	; 63
    3bf0:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
    3bf2:	69 58       	subi	r22, 0x89	; 137
    3bf4:	71 09       	sbc	r23, r1
    3bf6:	07 2e       	mov	r0, r23
    3bf8:	00 0c       	add	r0, r0
    3bfa:	88 0b       	sbc	r24, r24
    3bfc:	99 0b       	sbc	r25, r25
    3bfe:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    3c02:	26 e1       	ldi	r18, 0x16	; 22
    3c04:	31 e5       	ldi	r19, 0x51	; 81
    3c06:	42 e0       	ldi	r20, 0x02	; 2
    3c08:	50 e4       	ldi	r21, 0x40	; 64
    3c0a:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    3c0e:	4b 01       	movw	r8, r22
    3c10:	5c 01       	movw	r10, r24
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
    3c12:	10 91 9f 05 	lds	r17, 0x059F	; 0x80059f <mainRefClkState>
    3c16:	17 30       	cpi	r17, 0x07	; 7
    3c18:	08 f4       	brcc	.+2      	; 0x3c1c <main_fw_giveAway+0x1728>
    3c1a:	26 c1       	rjmp	.+588    	; 0x3e68 <main_fw_giveAway+0x1974>
		/* phase correction */
		phaseStepsPhase = (float) (pow(fabs(phaseErr) * 45.00f, 1.20f));  	// magic values  XXX PHASE: trimming is done here
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	44 e3       	ldi	r20, 0x34	; 52
    3c22:	52 e4       	ldi	r21, 0x42	; 66
    3c24:	c5 01       	movw	r24, r10
    3c26:	b4 01       	movw	r22, r8
    3c28:	9f 77       	andi	r25, 0x7F	; 127
    3c2a:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    3c2e:	2a e9       	ldi	r18, 0x9A	; 154
    3c30:	39 e9       	ldi	r19, 0x99	; 153
    3c32:	49 e9       	ldi	r20, 0x99	; 153
    3c34:	5f e3       	ldi	r21, 0x3F	; 63
    3c36:	0e 94 48 32 	call	0x6490	; 0x6490 <pow>
    3c3a:	46 2f       	mov	r20, r22
    3c3c:	57 2f       	mov	r21, r23
    3c3e:	68 2f       	mov	r22, r24
    3c40:	79 2f       	mov	r23, r25
    3c42:	2a 01       	movw	r4, r20
    3c44:	3b 01       	movw	r6, r22
		if (phaseErr < 0.0f) {
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	a9 01       	movw	r20, r18
    3c4c:	c5 01       	movw	r24, r10
    3c4e:	b4 01       	movw	r22, r8
    3c50:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    3c54:	88 23       	and	r24, r24
    3c56:	34 f4       	brge	.+12     	; 0x3c64 <main_fw_giveAway+0x1770>
    3c58:	01 c0       	rjmp	.+2      	; 0x3c5c <main_fw_giveAway+0x1768>
	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
    3c5a:	1f e0       	ldi	r17, 0x0F	; 15
		/* phase correction */
		phaseStepsPhase = (float) (pow(fabs(phaseErr) * 45.00f, 1.20f));  	// magic values  XXX PHASE: trimming is done here
		if (phaseErr < 0.0f) {
			phaseStepsPhase = -phaseStepsPhase;
    3c5c:	77 fa       	bst	r7, 7
    3c5e:	70 94       	com	r7
    3c60:	77 f8       	bld	r7, 7
    3c62:	70 94       	com	r7
		}

		if (mainRefClkState < REFCLK_STATE_IN_SYNC) {
    3c64:	1f 30       	cpi	r17, 0x0F	; 15
    3c66:	08 f0       	brcs	.+2      	; 0x3c6a <main_fw_giveAway+0x1776>
    3c68:	45 c0       	rjmp	.+138    	; 0x3cf4 <main_fw_giveAway+0x1800>
			/* Hard phase banging to keep in sync - should be avoided due to high phase noise */
			if (phaseStepsPhase) {
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	a9 01       	movw	r20, r18
    3c70:	c3 01       	movw	r24, r6
    3c72:	b2 01       	movw	r22, r4
    3c74:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    3c78:	88 23       	and	r24, r24
    3c7a:	09 f4       	brne	.+2      	; 0x3c7e <main_fw_giveAway+0x178a>
    3c7c:	3f c0       	rjmp	.+126    	; 0x3cfc <main_fw_giveAway+0x1808>
				uint8_t sreg = SREG;
    3c7e:	1f b7       	in	r17, 0x3f	; 63
				cli();
    3c80:	f8 94       	cli
				fastPwmSingleDiffSum += phaseStepsPhase;						// PHASE OFFFSET accumulator
    3c82:	a3 01       	movw	r20, r6
    3c84:	92 01       	movw	r18, r4
    3c86:	60 91 2c 05 	lds	r22, 0x052C	; 0x80052c <fastPwmSingleDiffSum>
    3c8a:	70 91 2d 05 	lds	r23, 0x052D	; 0x80052d <fastPwmSingleDiffSum+0x1>
    3c8e:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <fastPwmSingleDiffSum+0x2>
    3c92:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <fastPwmSingleDiffSum+0x3>
    3c96:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    3c9a:	60 93 2c 05 	sts	0x052C, r22	; 0x80052c <fastPwmSingleDiffSum>
    3c9e:	70 93 2d 05 	sts	0x052D, r23	; 0x80052d <fastPwmSingleDiffSum+0x1>
    3ca2:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <fastPwmSingleDiffSum+0x2>
    3ca6:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <fastPwmSingleDiffSum+0x3>
				SREG = sreg;
    3caa:	1f bf       	out	0x3f, r17	; 63

				/* Calculate and execute phase correction */
				calcPhaseResidue();												// first call - to be called many times during the whole second until next pulse comes
    3cac:	0e 94 03 0c 	call	0x1806	; 0x1806 <calcPhaseResidue>

				/* One time frequency correction */
				phaseStepsFrequency += phaseMeanPhaseErrorSum * 0.00000150f;	// magic value  XXX ONE TIME FREQUENCY trimming is done here
    3cb0:	2c e9       	ldi	r18, 0x9C	; 156
    3cb2:	33 e5       	ldi	r19, 0x53	; 83
    3cb4:	49 ec       	ldi	r20, 0xC9	; 201
    3cb6:	55 e3       	ldi	r21, 0x35	; 53
    3cb8:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <phaseMeanPhaseErrorSum.2844>
    3cbc:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <phaseMeanPhaseErrorSum.2844+0x1>
    3cc0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <phaseMeanPhaseErrorSum.2844+0x2>
    3cc4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <phaseMeanPhaseErrorSum.2844+0x3>
    3cc8:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	a9 01       	movw	r20, r18
    3cd2:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    3cd6:	6b 01       	movw	r12, r22
    3cd8:	7c 01       	movw	r14, r24
				phaseMeanPhaseErrorSum = 0.0f;									// reset frequency offset register to avoid lagging behavior
    3cda:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <phaseMeanPhaseErrorSum.2844>
    3cde:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <phaseMeanPhaseErrorSum.2844+0x1>
    3ce2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <phaseMeanPhaseErrorSum.2844+0x2>
    3ce6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <phaseMeanPhaseErrorSum.2844+0x3>
			}
		}
	}

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
    3cea:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3cee:	87 30       	cpi	r24, 0x07	; 7
    3cf0:	40 f4       	brcc	.+16     	; 0x3d02 <main_fw_giveAway+0x180e>
    3cf2:	bf c0       	rjmp	.+382    	; 0x3e72 <main_fw_giveAway+0x197e>
		phaseStepsPhase = (float) (pow(fabs(phaseErr) * 45.00f, 1.20f));  	// magic values  XXX PHASE: trimming is done here
		if (phaseErr < 0.0f) {
			phaseStepsPhase = -phaseStepsPhase;
		}

		if (mainRefClkState < REFCLK_STATE_IN_SYNC) {
    3cf4:	c1 2c       	mov	r12, r1
    3cf6:	d1 2c       	mov	r13, r1
    3cf8:	76 01       	movw	r14, r12
    3cfa:	03 c0       	rjmp	.+6      	; 0x3d02 <main_fw_giveAway+0x180e>
			/* Hard phase banging to keep in sync - should be avoided due to high phase noise */
			if (phaseStepsPhase) {
    3cfc:	c1 2c       	mov	r12, r1
    3cfe:	d1 2c       	mov	r13, r1
    3d00:	76 01       	movw	r14, r12
		}
	}

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
		static float lastPhaseStepsPhase = 0.0f;
		float diffPhaseStepsPhase = phaseStepsPhase - lastPhaseStepsPhase;
    3d02:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <lastPhaseStepsPhase.2854>
    3d06:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <lastPhaseStepsPhase.2854+0x1>
    3d0a:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <lastPhaseStepsPhase.2854+0x2>
    3d0e:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <lastPhaseStepsPhase.2854+0x3>
    3d12:	c3 01       	movw	r24, r6
    3d14:	b2 01       	movw	r22, r4
    3d16:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    3d1a:	6e 83       	std	Y+6, r22	; 0x06
    3d1c:	7f 83       	std	Y+7, r23	; 0x07
    3d1e:	88 87       	std	Y+8, r24	; 0x08
    3d20:	99 87       	std	Y+9, r25	; 0x09
		uint8_t isAfterSignRev = false;

		/* Find out direction to or from optimum point */
		if (((phaseStepsPhase > 0) && (diffPhaseStepsPhase > 0)) ||
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	a9 01       	movw	r20, r18
    3d28:	c3 01       	movw	r24, r6
    3d2a:	b2 01       	movw	r22, r4
    3d2c:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__gesf2>
    3d30:	18 16       	cp	r1, r24
    3d32:	64 f4       	brge	.+24     	; 0x3d4c <main_fw_giveAway+0x1858>
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	a9 01       	movw	r20, r18
    3d3a:	6e 81       	ldd	r22, Y+6	; 0x06
    3d3c:	7f 81       	ldd	r23, Y+7	; 0x07
    3d3e:	88 85       	ldd	r24, Y+8	; 0x08
    3d40:	99 85       	ldd	r25, Y+9	; 0x09
    3d42:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__gesf2>
    3d46:	18 16       	cp	r1, r24
    3d48:	0c f4       	brge	.+2      	; 0x3d4c <main_fw_giveAway+0x1858>
    3d4a:	37 c2       	rjmp	.+1134   	; 0x41ba <main_fw_giveAway+0x1cc6>
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	a9 01       	movw	r20, r18
    3d52:	c3 01       	movw	r24, r6
    3d54:	b2 01       	movw	r22, r4
    3d56:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    3d5a:	88 23       	and	r24, r24
    3d5c:	0c f0       	brlt	.+2      	; 0x3d60 <main_fw_giveAway+0x186c>
    3d5e:	3a c2       	rjmp	.+1140   	; 0x41d4 <main_fw_giveAway+0x1ce0>
		    ((phaseStepsPhase < 0) && (diffPhaseStepsPhase < 0))) {
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	a9 01       	movw	r20, r18
    3d66:	6e 81       	ldd	r22, Y+6	; 0x06
    3d68:	7f 81       	ldd	r23, Y+7	; 0x07
    3d6a:	88 85       	ldd	r24, Y+8	; 0x08
    3d6c:	99 85       	ldd	r25, Y+9	; 0x09
    3d6e:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    3d72:	88 23       	and	r24, r24
    3d74:	0c f0       	brlt	.+2      	; 0x3d78 <main_fw_giveAway+0x1884>
    3d76:	2e c2       	rjmp	.+1116   	; 0x41d4 <main_fw_giveAway+0x1ce0>
    3d78:	20 c2       	rjmp	.+1088   	; 0x41ba <main_fw_giveAway+0x1cc6>
			isAfterSignRev = true;
		}
		lastPhaseStepsPhase = phaseStepsPhase;

		/* frequency drift correction */
		phaseStepsFrequency += phaseStepsPhase * (isAfterSignRev ?  0.00001500f
    3d7a:	c3 01       	movw	r24, r6
    3d7c:	b2 01       	movw	r22, r4
    3d7e:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    3d82:	9b 01       	movw	r18, r22
    3d84:	ac 01       	movw	r20, r24
    3d86:	c7 01       	movw	r24, r14
    3d88:	b6 01       	movw	r22, r12
    3d8a:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    3d8e:	6b 01       	movw	r12, r22
    3d90:	7c 01       	movw	r14, r24
																 :  0.00000200f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here

		/* mainPpm calculations */
		float phaseStepsErrorDiff = phaseStepsErrorSum / MEAN_PHASE_PPM_STAGES_F;
    3d92:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
    3d96:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
    3d9a:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <__data_end+0x2>
    3d9e:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <__data_end+0x3>
    3da2:	8e 83       	std	Y+6, r24	; 0x06
    3da4:	9f 83       	std	Y+7, r25	; 0x07
    3da6:	a8 87       	std	Y+8, r26	; 0x08
    3da8:	b9 87       	std	Y+9, r27	; 0x09
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	40 ee       	ldi	r20, 0xE0	; 224
    3db0:	50 e4       	ldi	r21, 0x40	; 64
    3db2:	bc 01       	movw	r22, r24
    3db4:	cd 01       	movw	r24, r26
    3db6:	0e 94 24 30 	call	0x6048	; 0x6048 <__divsf3>
    3dba:	6a 87       	std	Y+10, r22	; 0x0a
    3dbc:	7b 87       	std	Y+11, r23	; 0x0b
    3dbe:	8c 87       	std	Y+12, r24	; 0x0c
    3dc0:	9d 87       	std	Y+13, r25	; 0x0d
		mainPpm = mainCoef_b02_qrg_k_pPwmStep_25C_ppm * phaseStepsErrorDiff;
    3dc2:	20 91 a8 05 	lds	r18, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    3dc6:	30 91 a9 05 	lds	r19, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    3dca:	40 91 aa 05 	lds	r20, 0x05AA	; 0x8005aa <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    3dce:	50 91 ab 05 	lds	r21, 0x05AB	; 0x8005ab <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    3dd2:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    3dd6:	60 93 7f 05 	sts	0x057F, r22	; 0x80057f <mainPpm>
    3dda:	70 93 80 05 	sts	0x0580, r23	; 0x800580 <mainPpm+0x1>
    3dde:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <mainPpm+0x2>
    3de2:	90 93 82 05 	sts	0x0582, r25	; 0x800582 <mainPpm+0x3>
		if (phaseStepsFrequency >= 0.0f) {
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	a9 01       	movw	r20, r18
    3dec:	c7 01       	movw	r24, r14
    3dee:	b6 01       	movw	r22, r12
    3df0:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__gesf2>
    3df4:	88 23       	and	r24, r24
    3df6:	cc f0       	brlt	.+50     	; 0x3e2a <main_fw_giveAway+0x1936>
			phaseStepsErrorSum += (phaseStepsFrequency - phaseStepsErrorDiff);
    3df8:	2a 85       	ldd	r18, Y+10	; 0x0a
    3dfa:	3b 85       	ldd	r19, Y+11	; 0x0b
    3dfc:	4c 85       	ldd	r20, Y+12	; 0x0c
    3dfe:	5d 85       	ldd	r21, Y+13	; 0x0d
    3e00:	c7 01       	movw	r24, r14
    3e02:	b6 01       	movw	r22, r12
    3e04:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    3e08:	9b 01       	movw	r18, r22
    3e0a:	ac 01       	movw	r20, r24
    3e0c:	6e 81       	ldd	r22, Y+6	; 0x06
    3e0e:	7f 81       	ldd	r23, Y+7	; 0x07
    3e10:	88 85       	ldd	r24, Y+8	; 0x08
    3e12:	99 85       	ldd	r25, Y+9	; 0x09
    3e14:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    3e18:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <__data_end>
    3e1c:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <__data_end+0x1>
    3e20:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x2>
    3e24:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x3>
    3e28:	19 c0       	rjmp	.+50     	; 0x3e5c <main_fw_giveAway+0x1968>
		} else {
			phaseStepsErrorSum += (-phaseStepsFrequency - phaseStepsErrorDiff);
    3e2a:	2a 85       	ldd	r18, Y+10	; 0x0a
    3e2c:	3b 85       	ldd	r19, Y+11	; 0x0b
    3e2e:	4c 85       	ldd	r20, Y+12	; 0x0c
    3e30:	5d 85       	ldd	r21, Y+13	; 0x0d
    3e32:	c7 01       	movw	r24, r14
    3e34:	b6 01       	movw	r22, r12
    3e36:	90 58       	subi	r25, 0x80	; 128
    3e38:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <__subsf3>
    3e3c:	9b 01       	movw	r18, r22
    3e3e:	ac 01       	movw	r20, r24
    3e40:	6e 81       	ldd	r22, Y+6	; 0x06
    3e42:	7f 81       	ldd	r23, Y+7	; 0x07
    3e44:	88 85       	ldd	r24, Y+8	; 0x08
    3e46:	99 85       	ldd	r25, Y+9	; 0x09
    3e48:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    3e4c:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <__data_end>
    3e50:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <__data_end+0x1>
    3e54:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x2>
    3e58:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x3>
		}

		/* Execute frequency correction */
		(void) pwmTimerCorrection(phaseStepsFrequency, false);
    3e5c:	40 e0       	ldi	r20, 0x00	; 0
    3e5e:	c7 01       	movw	r24, r14
    3e60:	b6 01       	movw	r22, r12
    3e62:	0e 94 b8 0b 	call	0x1770	; 0x1770 <pwmTimerCorrection>
    3e66:	05 c0       	rjmp	.+10     	; 0x3e72 <main_fw_giveAway+0x197e>
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;
    3e68:	41 2c       	mov	r4, r1
    3e6a:	51 2c       	mov	r5, r1
    3e6c:	32 01       	movw	r6, r4
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
	float phaseStepsFrequency	= 0.0f;
    3e6e:	73 01       	movw	r14, r6
    3e70:	62 01       	movw	r12, r4

		/* Execute frequency correction */
		(void) pwmTimerCorrection(phaseStepsFrequency, false);
	}

	if (main_bf.mainIsTimerTest) {
    3e72:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3e76:	82 ff       	sbrs	r24, 2
    3e78:	c4 c1       	rjmp	.+904    	; 0x4202 <main_fw_giveAway+0x1d0e>
		/* monitoring */
		int len;
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA11, sizeof(PM_FORMAT_IA11));
    3e7a:	20 e6       	ldi	r18, 0x60	; 96
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	4e ee       	ldi	r20, 0xEE	; 238
    3e80:	54 e0       	ldi	r21, 0x04	; 4
    3e82:	6f e8       	ldi	r22, 0x8F	; 143
    3e84:	73 e0       	ldi	r23, 0x03	; 3
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3e8c:	7f 92       	push	r7
    3e8e:	6f 92       	push	r6
    3e90:	5f 92       	push	r5
    3e92:	4f 92       	push	r4
    3e94:	ff 92       	push	r15
    3e96:	ef 92       	push	r14
    3e98:	df 92       	push	r13
    3e9a:	cf 92       	push	r12
    3e9c:	bf 92       	push	r11
    3e9e:	af 92       	push	r10
    3ea0:	9f 92       	push	r9
    3ea2:	8f 92       	push	r8
    3ea4:	0f 2e       	mov	r0, r31
    3ea6:	ff e8       	ldi	r31, 0x8F	; 143
    3ea8:	ef 2e       	mov	r14, r31
    3eaa:	f3 e0       	ldi	r31, 0x03	; 3
    3eac:	ff 2e       	mov	r15, r31
    3eae:	f0 2d       	mov	r31, r0
    3eb0:	ff 92       	push	r15
    3eb2:	ef 92       	push	r14
    3eb4:	0f e0       	ldi	r16, 0x0F	; 15
    3eb6:	14 e0       	ldi	r17, 0x04	; 4
    3eb8:	1f 93       	push	r17
    3eba:	0f 93       	push	r16
    3ebc:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				phaseErr,
				phaseStepsFrequency,
				phaseStepsPhase);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3ec0:	28 2f       	mov	r18, r24
    3ec2:	a8 01       	movw	r20, r16
    3ec4:	60 e0       	ldi	r22, 0x00	; 0
    3ec6:	80 e0       	ldi	r24, 0x00	; 0
    3ec8:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA12, sizeof(PM_FORMAT_IA12));
    3ecc:	20 e3       	ldi	r18, 0x30	; 48
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	4e eb       	ldi	r20, 0xBE	; 190
    3ed2:	54 e0       	ldi	r21, 0x04	; 4
    3ed4:	b7 01       	movw	r22, r14
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3edc:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <fastPwmSingleDiffSum+0x3>
    3ee0:	8f 93       	push	r24
    3ee2:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <fastPwmSingleDiffSum+0x2>
    3ee6:	8f 93       	push	r24
    3ee8:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <fastPwmSingleDiffSum+0x1>
    3eec:	8f 93       	push	r24
    3eee:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <fastPwmSingleDiffSum>
    3ef2:	8f 93       	push	r24
    3ef4:	ff 92       	push	r15
    3ef6:	ef 92       	push	r14
    3ef8:	1f 93       	push	r17
    3efa:	0f 93       	push	r16
    3efc:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				fastPwmSingleDiffSum);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3f00:	28 2f       	mov	r18, r24
    3f02:	a8 01       	movw	r20, r16
    3f04:	60 e0       	ldi	r22, 0x00	; 0
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
    3f0c:	0f b6       	in	r0, 0x3f	; 63
    3f0e:	f8 94       	cli
    3f10:	de bf       	out	0x3e, r29	; 62
    3f12:	0f be       	out	0x3f, r0	; 63
    3f14:	cd bf       	out	0x3d, r28	; 61
    3f16:	75 c1       	rjmp	.+746    	; 0x4202 <main_fw_giveAway+0x1d0e>

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
			if (stackCheckMungWall[idx] != 0x5a) {
    3f18:	21 91       	ld	r18, Z+
    3f1a:	2a 35       	cpi	r18, 0x5A	; 90
    3f1c:	89 f0       	breq	.+34     	; 0x3f40 <main_fw_giveAway+0x1a4c>
    3f1e:	02 c0       	rjmp	.+4      	; 0x3f24 <main_fw_giveAway+0x1a30>
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t localCheckAddr = (uint16_t) (&(stackCheckMungWall[idx]));
    3f24:	84 52       	subi	r24, 0x24	; 36
    3f26:	9a 4f       	sbci	r25, 0xFA	; 250
				if (mainSCMungwallAddr > localCheckAddr) {
    3f28:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <mainSCMungwallAddr>
    3f2c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <mainSCMungwallAddr+0x1>
    3f30:	82 17       	cp	r24, r18
    3f32:	93 07       	cpc	r25, r19
    3f34:	50 f4       	brcc	.+20     	; 0x3f4a <main_fw_giveAway+0x1a56>
					mainSCMungwallAddr = localCheckAddr;
    3f36:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <mainSCMungwallAddr+0x1>
    3f3a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mainSCMungwallAddr>
    3f3e:	05 c0       	rjmp	.+10     	; 0x3f4a <main_fw_giveAway+0x1a56>
	}

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
    3f40:	01 96       	adiw	r24, 0x01	; 1
    3f42:	80 32       	cpi	r24, 0x20	; 32
    3f44:	b2 e0       	ldi	r27, 0x02	; 2
    3f46:	9b 07       	cpc	r25, r27
    3f48:	39 f7       	brne	.-50     	; 0x3f18 <main_fw_giveAway+0x1a24>
				/* leave loop body */
				break;
			}
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC01, sizeof(PM_FORMAT_SC01));
    3f4a:	25 e4       	ldi	r18, 0x45	; 69
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	48 ed       	ldi	r20, 0xD8	; 216
    3f50:	53 e0       	ldi	r21, 0x03	; 3
    3f52:	6f e8       	ldi	r22, 0x8F	; 143
    3f54:	73 e0       	ldi	r23, 0x03	; 3
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3f5c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mainSCStackAddr+0x1>
    3f60:	8f 93       	push	r24
    3f62:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mainSCStackAddr>
    3f66:	8f 93       	push	r24
    3f68:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <mainSCMungwallAddr+0x1>
    3f6c:	8f 93       	push	r24
    3f6e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mainSCMungwallAddr>
    3f72:	8f 93       	push	r24
    3f74:	0f 2e       	mov	r0, r31
    3f76:	ff e8       	ldi	r31, 0x8F	; 143
    3f78:	ef 2e       	mov	r14, r31
    3f7a:	f3 e0       	ldi	r31, 0x03	; 3
    3f7c:	ff 2e       	mov	r15, r31
    3f7e:	f0 2d       	mov	r31, r0
    3f80:	ff 92       	push	r15
    3f82:	ef 92       	push	r14
    3f84:	0f e0       	ldi	r16, 0x0F	; 15
    3f86:	14 e0       	ldi	r17, 0x04	; 4
    3f88:	1f 93       	push	r17
    3f8a:	0f 93       	push	r16
    3f8c:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				mainSCMungwallAddr,
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3f90:	28 2f       	mov	r18, r24
    3f92:	a8 01       	movw	r20, r16
    3f94:	60 e0       	ldi	r22, 0x00	; 0
    3f96:	80 e0       	ldi	r24, 0x00	; 0
    3f98:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
    3f9c:	2d e3       	ldi	r18, 0x3D	; 61
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	4b e9       	ldi	r20, 0x9B	; 155
    3fa2:	53 e0       	ldi	r21, 0x03	; 3
    3fa4:	b7 01       	movw	r22, r14
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
				twiState.isProcessing,
				twiState.errStart,
				twiState.adrAck,
				twiState.adrAckValid,
				twiState.dataAck,
				twiState.dataAckValid);
    3fac:	e0 e4       	ldi	r30, 0x40	; 64
    3fae:	f1 e0       	ldi	r31, 0x01	; 1
    3fb0:	60 81       	ld	r22, Z
    3fb2:	66 fb       	bst	r22, 6
    3fb4:	66 27       	eor	r22, r22
    3fb6:	60 f9       	bld	r22, 0
				twiState.doStart,
				twiState.isProcessing,
				twiState.errStart,
				twiState.adrAck,
				twiState.adrAckValid,
				twiState.dataAck,
    3fb8:	50 81       	ld	r21, Z
    3fba:	57 fb       	bst	r21, 7
    3fbc:	55 27       	eor	r21, r21
    3fbe:	50 f9       	bld	r21, 0
				twiState.state,
				twiState.doStart,
				twiState.isProcessing,
				twiState.errStart,
				twiState.adrAck,
				twiState.adrAckValid,
    3fc0:	40 81       	ld	r20, Z
    3fc2:	42 95       	swap	r20
    3fc4:	41 70       	andi	r20, 0x01	; 1
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
				twiState.isProcessing,
				twiState.errStart,
				twiState.adrAck,
    3fc6:	30 81       	ld	r19, Z
    3fc8:	35 fb       	bst	r19, 5
    3fca:	33 27       	eor	r19, r19
    3fcc:	30 f9       	bld	r19, 0
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
				twiState.isProcessing,
				twiState.errStart,
    3fce:	20 81       	ld	r18, Z
    3fd0:	23 fb       	bst	r18, 3
    3fd2:	22 27       	eor	r18, r18
    3fd4:	20 f9       	bld	r18, 0

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
				twiState.isProcessing,
    3fd6:	90 81       	ld	r25, Z
    3fd8:	96 95       	lsr	r25
    3fda:	91 70       	andi	r25, 0x01	; 1
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
    3fdc:	80 81       	ld	r24, Z
    3fde:	81 70       	andi	r24, 0x01	; 1
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
    3fe0:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <twiState>
				mainSCMungwallAddr,
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3fe4:	1f 92       	push	r1
    3fe6:	6f 93       	push	r22
    3fe8:	1f 92       	push	r1
    3fea:	5f 93       	push	r21
    3fec:	1f 92       	push	r1
    3fee:	4f 93       	push	r20
    3ff0:	1f 92       	push	r1
    3ff2:	3f 93       	push	r19
    3ff4:	1f 92       	push	r1
    3ff6:	2f 93       	push	r18
    3ff8:	1f 92       	push	r1
    3ffa:	9f 93       	push	r25
    3ffc:	1f 92       	push	r1
    3ffe:	8f 93       	push	r24
    4000:	1f 92       	push	r1
    4002:	7f 93       	push	r23
    4004:	ff 92       	push	r15
    4006:	ef 92       	push	r14
    4008:	1f 93       	push	r17
    400a:	0f 93       	push	r16
    400c:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				twiState.errStart,
				twiState.adrAck,
				twiState.adrAckValid,
				twiState.dataAck,
				twiState.dataAckValid);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    4010:	28 2f       	mov	r18, r24
    4012:	a8 01       	movw	r20, r16
    4014:	60 e0       	ldi	r22, 0x00	; 0
    4016:	80 e0       	ldi	r24, 0x00	; 0
    4018:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>
    401c:	0f b6       	in	r0, 0x3f	; 63
    401e:	f8 94       	cli
    4020:	de bf       	out	0x3e, r29	; 62
    4022:	0f be       	out	0x3f, r0	; 63
    4024:	cd bf       	out	0x3d, r28	; 61
	}

	/* Show status at connected LCD devices */
	twi_mcp23017_av1624_fw_showStatus();
    4026:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <twi_mcp23017_av1624_fw_showStatus>
	twi_smart_lcd_fw_showStatus();
    402a:	0e 94 80 10 	call	0x2100	; 0x2100 <twi_smart_lcd_fw_showStatus>

	if (mainPwmTerminalAdj) {
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	a9 01       	movw	r20, r18
    4034:	60 91 9b 05 	lds	r22, 0x059B	; 0x80059b <mainPwmTerminalAdj>
    4038:	70 91 9c 05 	lds	r23, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x1>
    403c:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainPwmTerminalAdj+0x2>
    4040:	90 91 9e 05 	lds	r25, 0x059E	; 0x80059e <mainPwmTerminalAdj+0x3>
    4044:	0e 94 1f 30 	call	0x603e	; 0x603e <__cmpsf2>
    4048:	88 23       	and	r24, r24
    404a:	09 f4       	brne	.+2      	; 0x404e <main_fw_giveAway+0x1b5a>
    404c:	f3 c0       	rjmp	.+486    	; 0x4234 <main_fw_giveAway+0x1d40>
		uint8_t localFastPwmSubLoopValNext;
		uint8_t localFastPwmLoopValNext;

		{
			/* correct PWM with  +/- <value> */
			uint8_t sreg = SREG;
    404e:	ff b6       	in	r15, 0x3f	; 63
			cli();
    4050:	f8 94       	cli
			localFastPwmLoopValBefore		= fastPwmLoopVal;
    4052:	10 91 36 05 	lds	r17, 0x0536	; 0x800536 <fastPwmLoopVal>
			localFastPwmSubLoopValBefore	= fastPwmSubLoopVal;
    4056:	00 91 35 05 	lds	r16, 0x0535	; 0x800535 <fastPwmSubLoopVal>
			SREG = sreg;
    405a:	ff be       	out	0x3f, r15	; 63

			/* calculate next value */
			localFastPwmLoopValNext		= localFastPwmLoopValBefore;
    405c:	19 83       	std	Y+1, r17	; 0x01
			localFastPwmSubLoopValNext	= localFastPwmSubLoopValBefore;
    405e:	0d 83       	std	Y+5, r16	; 0x05
			(void) main_fw_calcTimerAdj(mainPwmTerminalAdj, &localFastPwmLoopValNext, &localFastPwmSubLoopValNext);
    4060:	60 91 9b 05 	lds	r22, 0x059B	; 0x80059b <mainPwmTerminalAdj>
    4064:	70 91 9c 05 	lds	r23, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x1>
    4068:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainPwmTerminalAdj+0x2>
    406c:	90 91 9e 05 	lds	r25, 0x059E	; 0x80059e <mainPwmTerminalAdj+0x3>
    4070:	9e 01       	movw	r18, r28
    4072:	2b 5f       	subi	r18, 0xFB	; 251
    4074:	3f 4f       	sbci	r19, 0xFF	; 255
    4076:	ae 01       	movw	r20, r28
    4078:	4f 5f       	subi	r20, 0xFF	; 255
    407a:	5f 4f       	sbci	r21, 0xFF	; 255
    407c:	0e 94 12 0b 	call	0x1624	; 0x1624 <main_fw_calcTimerAdj>

			/* write back the global variables for PWM and sub-PWM */
			cli();
    4080:	f8 94       	cli
			fastPwmLoopVal		= localFastPwmLoopValNext;
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubLoopValNext;
    4088:	8d 81       	ldd	r24, Y+5	; 0x05
    408a:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <fastPwmSubLoopVal>
			SREG = sreg;
    408e:	ff be       	out	0x3f, r15	; 63
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_ID01, sizeof(PM_FORMAT_ID01));
    4090:	26 e6       	ldi	r18, 0x66	; 102
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	47 e9       	ldi	r20, 0x97	; 151
    4096:	56 e0       	ldi	r21, 0x06	; 6
    4098:	6f e8       	ldi	r22, 0x8F	; 143
    409a:	73 e0       	ldi	r23, 0x03	; 3
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		uint8_t len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    40a2:	1f 92       	push	r1
    40a4:	0f 93       	push	r16
    40a6:	1f 92       	push	r1
    40a8:	1f 93       	push	r17
    40aa:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <mainPwmTerminalAdj+0x3>
    40ae:	8f 93       	push	r24
    40b0:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainPwmTerminalAdj+0x2>
    40b4:	8f 93       	push	r24
    40b6:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x1>
    40ba:	8f 93       	push	r24
    40bc:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <mainPwmTerminalAdj>
    40c0:	8f 93       	push	r24
    40c2:	0f 2e       	mov	r0, r31
    40c4:	ff e8       	ldi	r31, 0x8F	; 143
    40c6:	ef 2e       	mov	r14, r31
    40c8:	f3 e0       	ldi	r31, 0x03	; 3
    40ca:	ff 2e       	mov	r15, r31
    40cc:	f0 2d       	mov	r31, r0
    40ce:	ff 92       	push	r15
    40d0:	ef 92       	push	r14
    40d2:	0f e0       	ldi	r16, 0x0F	; 15
    40d4:	14 e0       	ldi	r17, 0x04	; 4
    40d6:	1f 93       	push	r17
    40d8:	0f 93       	push	r16
    40da:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				mainPwmTerminalAdj,
				localFastPwmLoopValBefore,
				localFastPwmSubLoopValBefore);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    40de:	28 2f       	mov	r18, r24
    40e0:	a8 01       	movw	r20, r16
    40e2:	60 e0       	ldi	r22, 0x00	; 0
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_ID02, sizeof(PM_FORMAT_ID02));
    40ea:	26 e6       	ldi	r18, 0x66	; 102
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	41 e3       	ldi	r20, 0x31	; 49
    40f0:	56 e0       	ldi	r21, 0x06	; 6
    40f2:	b7 01       	movw	r22, r14
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    40fa:	8d 81       	ldd	r24, Y+5	; 0x05
    40fc:	1f 92       	push	r1
    40fe:	8f 93       	push	r24
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	1f 92       	push	r1
    4104:	8f 93       	push	r24
    4106:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <mainPwmTerminalAdj+0x3>
    410a:	8f 93       	push	r24
    410c:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainPwmTerminalAdj+0x2>
    4110:	8f 93       	push	r24
    4112:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x1>
    4116:	8f 93       	push	r24
    4118:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <mainPwmTerminalAdj>
    411c:	8f 93       	push	r24
    411e:	ff 92       	push	r15
    4120:	ef 92       	push	r14
    4122:	1f 93       	push	r17
    4124:	0f 93       	push	r16
    4126:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <sprintf>
				mainPwmTerminalAdj,
				localFastPwmLoopValNext,
				localFastPwmSubLoopValNext);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    412a:	28 2f       	mov	r18, r24
    412c:	a8 01       	movw	r20, r16
    412e:	60 e0       	ldi	r22, 0x00	; 0
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		// reset data entry
		mainPwmTerminalAdj = 0.0f;
    4136:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <mainPwmTerminalAdj>
    413a:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <mainPwmTerminalAdj+0x1>
    413e:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <mainPwmTerminalAdj+0x2>
    4142:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <mainPwmTerminalAdj+0x3>
    4146:	0f b6       	in	r0, 0x3f	; 63
    4148:	f8 94       	cli
    414a:	de bf       	out	0x3e, r29	; 62
    414c:	0f be       	out	0x3f, r0	; 63
    414e:	cd bf       	out	0x3d, r28	; 61
    4150:	71 c0       	rjmp	.+226    	; 0x4234 <main_fw_giveAway+0x1d40>
				break;
			}
		}

		if (isLocked) {
			ringbuffer_fw_freeSemaphore(true);
    4152:	81 e0       	ldi	r24, 0x01	; 1
    4154:	0e 94 f7 23 	call	0x47ee	; 0x47ee <ringbuffer_fw_freeSemaphore>
    4158:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <main_fw_giveAway+0x82e>
    415c:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
    415e:	69 58       	subi	r22, 0x89	; 137
    4160:	71 09       	sbc	r23, r1
    4162:	07 2e       	mov	r0, r23
    4164:	00 0c       	add	r0, r0
    4166:	88 0b       	sbc	r24, r24
    4168:	99 0b       	sbc	r25, r25
    416a:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    416e:	26 e1       	ldi	r18, 0x16	; 22
    4170:	31 e5       	ldi	r19, 0x51	; 81
    4172:	42 e0       	ldi	r20, 0x02	; 2
    4174:	50 e4       	ldi	r21, 0x40	; 64
    4176:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    417a:	4b 01       	movw	r8, r22
    417c:	5c 01       	movw	r10, r24
    417e:	4e cd       	rjmp	.-1380   	; 0x3c1c <main_fw_giveAway+0x1728>
			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
			}

			if ((ADC_PHASE_LO_INSYNC <= adcPhase) && (adcPhase <= ADC_PHASE_HI_INSYNC)) {
    4180:	80 eb       	ldi	r24, 0xB0	; 176
    4182:	86 0f       	add	r24, r22
    4184:	84 37       	cpi	r24, 0x74	; 116
    4186:	08 f4       	brcc	.+2      	; 0x418a <main_fw_giveAway+0x1c96>
    4188:	e0 cc       	rjmp	.-1600   	; 0x3b4a <main_fw_giveAway+0x1656>
    418a:	e8 cf       	rjmp	.-48     	; 0x415c <main_fw_giveAway+0x1c68>
    418c:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
    418e:	69 58       	subi	r22, 0x89	; 137
    4190:	71 09       	sbc	r23, r1
    4192:	07 2e       	mov	r0, r23
    4194:	00 0c       	add	r0, r0
    4196:	88 0b       	sbc	r24, r24
    4198:	99 0b       	sbc	r25, r25
    419a:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    419e:	26 e1       	ldi	r18, 0x16	; 22
    41a0:	31 e5       	ldi	r19, 0x51	; 81
    41a2:	42 e0       	ldi	r20, 0x02	; 2
    41a4:	50 e4       	ldi	r21, 0x40	; 64
    41a6:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    41aa:	4b 01       	movw	r8, r22
    41ac:	5c 01       	movw	r10, r24
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;
    41ae:	41 2c       	mov	r4, r1
    41b0:	51 2c       	mov	r5, r1
    41b2:	32 01       	movw	r6, r4
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
	float phaseStepsFrequency	= 0.0f;
    41b4:	73 01       	movw	r14, r6
    41b6:	62 01       	movw	r12, r4
    41b8:	5c ce       	rjmp	.-840    	; 0x3e72 <main_fw_giveAway+0x197e>
		/* Find out direction to or from optimum point */
		if (((phaseStepsPhase > 0) && (diffPhaseStepsPhase > 0)) ||
		    ((phaseStepsPhase < 0) && (diffPhaseStepsPhase < 0))) {
			isAfterSignRev = true;
		}
		lastPhaseStepsPhase = phaseStepsPhase;
    41ba:	40 92 1a 01 	sts	0x011A, r4	; 0x80011a <lastPhaseStepsPhase.2854>
    41be:	50 92 1b 01 	sts	0x011B, r5	; 0x80011b <lastPhaseStepsPhase.2854+0x1>
    41c2:	60 92 1c 01 	sts	0x011C, r6	; 0x80011c <lastPhaseStepsPhase.2854+0x2>
    41c6:	70 92 1d 01 	sts	0x011D, r7	; 0x80011d <lastPhaseStepsPhase.2854+0x3>

		/* frequency drift correction */
		phaseStepsFrequency += phaseStepsPhase * (isAfterSignRev ?  0.00001500f
																 :  0.00000200f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here
    41ca:	22 e8       	ldi	r18, 0x82	; 130
    41cc:	38 ea       	ldi	r19, 0xA8	; 168
    41ce:	4b e7       	ldi	r20, 0x7B	; 123
    41d0:	57 e3       	ldi	r21, 0x37	; 55
    41d2:	d3 cd       	rjmp	.-1114   	; 0x3d7a <main_fw_giveAway+0x1886>
		/* Find out direction to or from optimum point */
		if (((phaseStepsPhase > 0) && (diffPhaseStepsPhase > 0)) ||
		    ((phaseStepsPhase < 0) && (diffPhaseStepsPhase < 0))) {
			isAfterSignRev = true;
		}
		lastPhaseStepsPhase = phaseStepsPhase;
    41d4:	40 92 1a 01 	sts	0x011A, r4	; 0x80011a <lastPhaseStepsPhase.2854>
    41d8:	50 92 1b 01 	sts	0x011B, r5	; 0x80011b <lastPhaseStepsPhase.2854+0x1>
    41dc:	60 92 1c 01 	sts	0x011C, r6	; 0x80011c <lastPhaseStepsPhase.2854+0x2>
    41e0:	70 92 1d 01 	sts	0x011D, r7	; 0x80011d <lastPhaseStepsPhase.2854+0x3>

		/* frequency drift correction */
		phaseStepsFrequency += phaseStepsPhase * (isAfterSignRev ?  0.00001500f
																 :  0.00000200f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here
    41e4:	2d eb       	ldi	r18, 0xBD	; 189
    41e6:	37 e3       	ldi	r19, 0x37	; 55
    41e8:	46 e0       	ldi	r20, 0x06	; 6
    41ea:	56 e3       	ldi	r21, 0x36	; 54
    41ec:	c6 cd       	rjmp	.-1140   	; 0x3d7a <main_fw_giveAway+0x1886>

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
			if (stackCheckMungWall[idx] != 0x5a) {
    41ee:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <stackCheckMungWall>
    41f2:	8a 35       	cpi	r24, 0x5A	; 90
    41f4:	09 f0       	breq	.+2      	; 0x41f8 <main_fw_giveAway+0x1d04>
    41f6:	94 ce       	rjmp	.-728    	; 0x3f20 <main_fw_giveAway+0x1a2c>
    41f8:	ed ed       	ldi	r30, 0xDD	; 221
    41fa:	f5 e0       	ldi	r31, 0x05	; 5
	}

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	8b ce       	rjmp	.-746    	; 0x3f18 <main_fw_giveAway+0x1a24>
			/* APC = automatic phase control */
			calcPhase();
		}
	}

	if (main_bf.mainStackCheck) {
    4202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4206:	86 fd       	sbrc	r24, 6
    4208:	f2 cf       	rjmp	.-28     	; 0x41ee <main_fw_giveAway+0x1cfa>
    420a:	0d cf       	rjmp	.-486    	; 0x4026 <main_fw_giveAway+0x1b32>
    420c:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
    420e:	69 58       	subi	r22, 0x89	; 137
    4210:	71 09       	sbc	r23, r1
    4212:	07 2e       	mov	r0, r23
    4214:	00 0c       	add	r0, r0
    4216:	88 0b       	sbc	r24, r24
    4218:	99 0b       	sbc	r25, r25
    421a:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    421e:	26 e1       	ldi	r18, 0x16	; 22
    4220:	31 e5       	ldi	r19, 0x51	; 81
    4222:	42 e0       	ldi	r20, 0x02	; 2
    4224:	50 e4       	ldi	r21, 0x40	; 64
    4226:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    422a:	4b 01       	movw	r8, r22
    422c:	5c 01       	movw	r10, r24
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
    422e:	10 91 9f 05 	lds	r17, 0x059F	; 0x80059f <mainRefClkState>
    4232:	f4 cc       	rjmp	.-1560   	; 0x3c1c <main_fw_giveAway+0x1728>
		clkPullPwm_fw_setPin(true);								// for debugging purposes only
	}
#else
	/* due to the fact that the clkFastCtr interrupts every 12.8 µs there is no chance to power down */
#endif
}
    4234:	60 96       	adiw	r28, 0x10	; 16
    4236:	0f b6       	in	r0, 0x3f	; 63
    4238:	f8 94       	cli
    423a:	de bf       	out	0x3e, r29	; 62
    423c:	0f be       	out	0x3f, r0	; 63
    423e:	cd bf       	out	0x3d, r28	; 61
    4240:	df 91       	pop	r29
    4242:	cf 91       	pop	r28
    4244:	1f 91       	pop	r17
    4246:	0f 91       	pop	r16
    4248:	ff 90       	pop	r15
    424a:	ef 90       	pop	r14
    424c:	df 90       	pop	r13
    424e:	cf 90       	pop	r12
    4250:	bf 90       	pop	r11
    4252:	af 90       	pop	r10
    4254:	9f 90       	pop	r9
    4256:	8f 90       	pop	r8
    4258:	7f 90       	pop	r7
    425a:	6f 90       	pop	r6
    425c:	5f 90       	pop	r5
    425e:	4f 90       	pop	r4
    4260:	3f 90       	pop	r3
    4262:	2f 90       	pop	r2
    4264:	08 95       	ret

00004266 <main>:
int main(void)
{
	/* init AVR */
	{
		/* initial interrupt set-up */
		cli();
    4266:	f8 94       	cli
	__asm__ __volatile__ ("reti" ::: "memory");
}


static inline void vectortable_to_firmware(void) {
	cli();
    4268:	f8 94       	cli
	asm volatile											// set active vector table into the Firmware section
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	85 bf       	out	0x35, r24	; 53
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	85 bf       	out	0x35, r24	; 53
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4272:	0f b6       	in	r0, 0x3f	; 63
    4274:	f8 94       	cli
    4276:	a8 95       	wdr
    4278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    427c:	88 61       	ori	r24, 0x18	; 24
    427e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4282:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4286:	0f be       	out	0x3f, r0	; 63
		cli();
		vectortable_to_firmware();
		wdt_init();

		/* activate hardware for this configuration */
		PRR    = 0xEF;										// disable all modules within the Power Reduction Register
    4288:	8f ee       	ldi	r24, 0xEF	; 239
    428a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		ACSR  |= _BV(ACD);									// switch on Analog Comparator Disable
    428e:	80 b7       	in	r24, 0x30	; 48
    4290:	80 68       	ori	r24, 0x80	; 128
    4292:	80 bf       	out	0x30, r24	; 48
		DIDR1 |= (0b11 << AIN0D);							// disable digital input buffers on AIN0 and AIN1
    4294:	ef e7       	ldi	r30, 0x7F	; 127
    4296:	f0 e0       	ldi	r31, 0x00	; 0
    4298:	80 81       	ld	r24, Z
    429a:	83 60       	ori	r24, 0x03	; 3
    429c:	80 83       	st	Z, r24
		MCUCR &= ~(_BV(PUD));								// switch off Pull-Up Disable
    429e:	85 b7       	in	r24, 0x35	; 53
    42a0:	8f 7e       	andi	r24, 0xEF	; 239
    42a2:	85 bf       	out	0x35, r24	; 53

		/* PWM & debugging first */
		clkPullPwm_fw_init();
    42a4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <clkPullPwm_fw_init>
    42a8:	ec ef       	ldi	r30, 0xFC	; 252
    42aa:	f7 e0       	ldi	r31, 0x07	; 7
    42ac:	2c ed       	ldi	r18, 0xDC	; 220
    42ae:	35 e0       	ldi	r19, 0x05	; 5

		/* Stack-Check init before the modules */
		for (int idx = MAIN_STACK_CHECK_SIZE; idx;) {		// DEBUG
			stackCheckMungWall[--idx] = 0x5a;
    42b0:	8a e5       	ldi	r24, 0x5A	; 90
    42b2:	82 93       	st	-Z, r24

		/* PWM & debugging first */
		clkPullPwm_fw_init();

		/* Stack-Check init before the modules */
		for (int idx = MAIN_STACK_CHECK_SIZE; idx;) {		// DEBUG
    42b4:	e2 17       	cp	r30, r18
    42b6:	f3 07       	cpc	r31, r19
    42b8:	e1 f7       	brne	.-8      	; 0x42b2 <main+0x4c>
			stackCheckMungWall[--idx] = 0x5a;
		}

		/* init the other modules */
		clkFastCtr_fw_init();
    42ba:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <clkFastCtr_fw_init>
		anlgComp_fw_init();
    42be:	0e 94 28 09 	call	0x1250	; 0x1250 <anlgComp_fw_init>
		serial_fw_init();
    42c2:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <serial_fw_init>

		usb_fw_init();
    42c6:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <usb_fw_init>
		sei();
    42ca:	78 94       	sei
		usbIsUp = true;
    42cc:	81 e0       	ldi	r24, 0x01	; 1
    42ce:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <usbIsUp>

		/* init TWI submodule, clock and ports */
		twi_fw_init();
    42d2:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <twi_fw_init>
		twi_mcp23017_fw_init();
    42d6:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <twi_mcp23017_fw_init>
		twi_mcp23017_av1624_fw_init();
    42da:	0e 94 94 2a 	call	0x5528	; 0x5528 <twi_mcp23017_av1624_fw_init>
		twi_smart_lcd_fw_init();
    42de:	0e 94 ca 2b 	call	0x5794	; 0x5794 <twi_smart_lcd_fw_init>

		/* check CRC of all blocks and update with default values if the data is non-valid */
		memory_fw_manageNonVolatileData();
    42e2:	0e 94 d6 23 	call	0x47ac	; 0x47ac <memory_fw_manageNonVolatileData>

		/* read MEASURING coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_HEADER_NR)) {
    42e6:	60 e0       	ldi	r22, 0x00	; 0
    42e8:	8f e8       	ldi	r24, 0x8F	; 143
    42ea:	93 e0       	ldi	r25, 0x03	; 3
    42ec:	0e 94 09 23 	call	0x4612	; 0x4612 <memory_fw_readEepromValidBlock>
    42f0:	88 23       	and	r24, r24
    42f2:	11 f1       	breq	.+68     	; 0x4338 <main+0xd2>
			eeprom_b00_t* b00 = (eeprom_b00_t*) &mainFormatBuffer;
			memcpy(mainCoef_b00_dev_header, b00->b00_header, sizeof(mainCoef_b00_dev_header) - 1);
    42f4:	cf e8       	ldi	r28, 0x8F	; 143
    42f6:	d3 e0       	ldi	r29, 0x03	; 3
    42f8:	20 e1       	ldi	r18, 0x10	; 16
    42fa:	fe 01       	movw	r30, r28
    42fc:	a8 ec       	ldi	r26, 0xC8	; 200
    42fe:	b5 e0       	ldi	r27, 0x05	; 5
    4300:	01 90       	ld	r0, Z+
    4302:	0d 92       	st	X+, r0
    4304:	2a 95       	dec	r18
    4306:	e1 f7       	brne	.-8      	; 0x4300 <main+0x9a>
			mainCoef_b00_dev_header[sizeof(mainCoef_b00_dev_header) - 1] = 0;
    4308:	10 92 d8 05 	sts	0x05D8, r1	; 0x8005d8 <mainCoef_b00_dev_header+0x10>

			mainCoef_b00_dev_serial					= b00->b00_device_serial;
    430c:	2a 89       	ldd	r18, Y+18	; 0x12
    430e:	3b 89       	ldd	r19, Y+19	; 0x13
    4310:	30 93 c7 05 	sts	0x05C7, r19	; 0x8005c7 <mainCoef_b00_dev_serial+0x1>
    4314:	20 93 c6 05 	sts	0x05C6, r18	; 0x8005c6 <mainCoef_b00_dev_serial>
			mainCoef_b00_dev_version				= b00->b00_version;
    4318:	28 89       	ldd	r18, Y+16	; 0x10
    431a:	39 89       	ldd	r19, Y+17	; 0x11
    431c:	30 93 c5 05 	sts	0x05C5, r19	; 0x8005c5 <mainCoef_b00_dev_version+0x1>
    4320:	20 93 c4 05 	sts	0x05C4, r18	; 0x8005c4 <mainCoef_b00_dev_version>
			main_bf.mainLcdLedMode					= b00->b00_lcdLedMode;
    4324:	8c 89       	ldd	r24, Y+20	; 0x14
    4326:	e1 e0       	ldi	r30, 0x01	; 1
    4328:	f1 e0       	ldi	r31, 0x01	; 1
    432a:	82 95       	swap	r24
    432c:	88 0f       	add	r24, r24
    432e:	80 7e       	andi	r24, 0xE0	; 224
    4330:	90 81       	ld	r25, Z
    4332:	9f 71       	andi	r25, 0x1F	; 31
    4334:	89 2b       	or	r24, r25
    4336:	80 83       	st	Z, r24
		}

		/* read MEASURING coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_MEASURING_NR)) {
    4338:	61 e0       	ldi	r22, 0x01	; 1
    433a:	8f e8       	ldi	r24, 0x8F	; 143
    433c:	93 e0       	ldi	r25, 0x03	; 3
    433e:	0e 94 09 23 	call	0x4612	; 0x4612 <memory_fw_readEepromValidBlock>
    4342:	88 23       	and	r24, r24
    4344:	91 f1       	breq	.+100    	; 0x43aa <main+0x144>
			eeprom_b01_t* b01 = (eeprom_b01_t*) &mainFormatBuffer;
			mainCoef_b01_ref_AREF_V					= b01->b01_ref_AREF_V;
    4346:	ef e8       	ldi	r30, 0x8F	; 143
    4348:	f3 e0       	ldi	r31, 0x03	; 3
    434a:	80 81       	ld	r24, Z
    434c:	91 81       	ldd	r25, Z+1	; 0x01
    434e:	a2 81       	ldd	r26, Z+2	; 0x02
    4350:	b3 81       	ldd	r27, Z+3	; 0x03
    4352:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <mainCoef_b01_ref_AREF_V>
    4356:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <mainCoef_b01_ref_AREF_V+0x1>
    435a:	a0 93 c2 05 	sts	0x05C2, r26	; 0x8005c2 <mainCoef_b01_ref_AREF_V+0x2>
    435e:	b0 93 c3 05 	sts	0x05C3, r27	; 0x8005c3 <mainCoef_b01_ref_AREF_V+0x3>
			mainCoef_b01_ref_1V1_V					= b01->b01_ref_1V1_V;
    4362:	84 81       	ldd	r24, Z+4	; 0x04
    4364:	95 81       	ldd	r25, Z+5	; 0x05
    4366:	a6 81       	ldd	r26, Z+6	; 0x06
    4368:	b7 81       	ldd	r27, Z+7	; 0x07
    436a:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <mainCoef_b01_ref_1V1_V>
    436e:	90 93 bd 05 	sts	0x05BD, r25	; 0x8005bd <mainCoef_b01_ref_1V1_V+0x1>
    4372:	a0 93 be 05 	sts	0x05BE, r26	; 0x8005be <mainCoef_b01_ref_1V1_V+0x2>
    4376:	b0 93 bf 05 	sts	0x05BF, r27	; 0x8005bf <mainCoef_b01_ref_1V1_V+0x3>
			mainCoef_b01_temp_ofs_adc_25C_steps		= b01->b01_temp_ofs_adc_25C_steps;
    437a:	80 85       	ldd	r24, Z+8	; 0x08
    437c:	91 85       	ldd	r25, Z+9	; 0x09
    437e:	a2 85       	ldd	r26, Z+10	; 0x0a
    4380:	b3 85       	ldd	r27, Z+11	; 0x0b
    4382:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps>
    4386:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    438a:	a0 93 ba 05 	sts	0x05BA, r26	; 0x8005ba <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    438e:	b0 93 bb 05 	sts	0x05BB, r27	; 0x8005bb <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>
			mainCoef_b01_temp_k_p1step_adc_K		= b01->b01_temp_k_p1step_adc_K;
    4392:	84 85       	ldd	r24, Z+12	; 0x0c
    4394:	95 85       	ldd	r25, Z+13	; 0x0d
    4396:	a6 85       	ldd	r26, Z+14	; 0x0e
    4398:	b7 85       	ldd	r27, Z+15	; 0x0f
    439a:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K>
    439e:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    43a2:	a0 93 b6 05 	sts	0x05B6, r26	; 0x8005b6 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    43a6:	b0 93 b7 05 	sts	0x05B7, r27	; 0x8005b7 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
		}

		/* read REFERENCE OSCILLATOR (REFOSC) coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_REFOSC_NR)) {
    43aa:	62 e0       	ldi	r22, 0x02	; 2
    43ac:	8f e8       	ldi	r24, 0x8F	; 143
    43ae:	93 e0       	ldi	r25, 0x03	; 3
    43b0:	0e 94 09 23 	call	0x4612	; 0x4612 <memory_fw_readEepromValidBlock>
    43b4:	88 23       	and	r24, r24
    43b6:	f1 f1       	breq	.+124    	; 0x4434 <main+0x1ce>
			eeprom_b02_t* b02 = (eeprom_b02_t*) &mainFormatBuffer;
			mainCoef_b02_qrg_ofs_minV_25C_ppm		= b02->b02_qrg_ofs_minV_25C_ppm;
    43b8:	ef e8       	ldi	r30, 0x8F	; 143
    43ba:	f3 e0       	ldi	r31, 0x03	; 3
    43bc:	80 81       	ld	r24, Z
    43be:	91 81       	ldd	r25, Z+1	; 0x01
    43c0:	a2 81       	ldd	r26, Z+2	; 0x02
    43c2:	b3 81       	ldd	r27, Z+3	; 0x03
    43c4:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <mainCoef_b02_qrg_ofs_minV_25C_ppm>
    43c8:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x1>
    43cc:	a0 93 b2 05 	sts	0x05B2, r26	; 0x8005b2 <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x2>
    43d0:	b0 93 b3 05 	sts	0x05B3, r27	; 0x8005b3 <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x3>
			mainCoef_b02_qrg_ofs_maxV_25C_ppm		= b02->b02_qrg_ofs_maxV_25C_ppm;
    43d4:	84 81       	ldd	r24, Z+4	; 0x04
    43d6:	95 81       	ldd	r25, Z+5	; 0x05
    43d8:	a6 81       	ldd	r26, Z+6	; 0x06
    43da:	b7 81       	ldd	r27, Z+7	; 0x07
    43dc:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <mainCoef_b02_qrg_ofs_maxV_25C_ppm>
    43e0:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x1>
    43e4:	a0 93 ae 05 	sts	0x05AE, r26	; 0x8005ae <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x2>
    43e8:	b0 93 af 05 	sts	0x05AF, r27	; 0x8005af <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x3>
			mainCoef_b02_qrg_k_pPwmStep_25C_ppm		= b02->b02_qrg_k_pPwmStep_25C_ppm;
    43ec:	80 85       	ldd	r24, Z+8	; 0x08
    43ee:	91 85       	ldd	r25, Z+9	; 0x09
    43f0:	a2 85       	ldd	r26, Z+10	; 0x0a
    43f2:	b3 85       	ldd	r27, Z+11	; 0x0b
    43f4:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    43f8:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    43fc:	a0 93 aa 05 	sts	0x05AA, r26	; 0x8005aa <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    4400:	b0 93 ab 05 	sts	0x05AB, r27	; 0x8005ab <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
			mainCoef_b02_pwm_minV_V					= b02->b02_pwm_minV_V;
    4404:	82 89       	ldd	r24, Z+18	; 0x12
    4406:	93 89       	ldd	r25, Z+19	; 0x13
    4408:	a4 89       	ldd	r26, Z+20	; 0x14
    440a:	b5 89       	ldd	r27, Z+21	; 0x15
    440c:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <mainCoef_b02_pwm_minV_V>
    4410:	90 93 a5 05 	sts	0x05A5, r25	; 0x8005a5 <mainCoef_b02_pwm_minV_V+0x1>
    4414:	a0 93 a6 05 	sts	0x05A6, r26	; 0x8005a6 <mainCoef_b02_pwm_minV_V+0x2>
    4418:	b0 93 a7 05 	sts	0x05A7, r27	; 0x8005a7 <mainCoef_b02_pwm_minV_V+0x3>
			mainCoef_b02_pwm_maxV_V					= b02->b02_pwm_maxV_V;
    441c:	86 89       	ldd	r24, Z+22	; 0x16
    441e:	97 89       	ldd	r25, Z+23	; 0x17
    4420:	a0 8d       	ldd	r26, Z+24	; 0x18
    4422:	b1 8d       	ldd	r27, Z+25	; 0x19
    4424:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <mainCoef_b02_pwm_maxV_V>
    4428:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <mainCoef_b02_pwm_maxV_V+0x1>
    442c:	a0 93 a2 05 	sts	0x05A2, r26	; 0x8005a2 <mainCoef_b02_pwm_maxV_V+0x2>
    4430:	b0 93 a3 05 	sts	0x05A3, r27	; 0x8005a3 <mainCoef_b02_pwm_maxV_V+0x3>

			/*	b02_pwm_initial			treated by df4iah_fw_clkPullPwm */
			/* 	b02_pwm_initial_sub		treated by df4iah_fw_clkPullPwm */
		}

		if (!(main_bf.mainIsLcdAttached) && !(main_bf.mainIsSmartAttached)) {
    4434:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4438:	88 23       	and	r24, r24
    443a:	2c f0       	brlt	.+10     	; 0x4446 <main+0x1e0>
    443c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    4440:	80 ff       	sbrs	r24, 0
			/* enter HELP command in USB host OUT queue */
			main_fw_sendInitialHelp();
    4442:	0e 94 72 12 	call	0x24e4	; 0x24e4 <main_fw_sendInitialHelp>
		}
	}

	/* run the chip */
    while (!(main_bf.mainStopAvr)) {
    4446:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    444a:	85 fd       	sbrc	r24, 5
    444c:	07 c0       	rjmp	.+14     	; 0x445c <main+0x1f6>
    444e:	c0 e0       	ldi	r28, 0x00	; 0
    4450:	d1 e0       	ldi	r29, 0x01	; 1
    	main_fw_giveAway();
    4452:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <main_fw_giveAway>
			main_fw_sendInitialHelp();
		}
	}

	/* run the chip */
    while (!(main_bf.mainStopAvr)) {
    4456:	88 81       	ld	r24, Y
    4458:	85 ff       	sbrs	r24, 5
    445a:	fb cf       	rjmp	.-10     	; 0x4452 <main+0x1ec>
    445c:	0f b6       	in	r0, 0x3f	; 63
    445e:	f8 94       	cli
    4460:	a8 95       	wdr
    4462:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4466:	88 61       	ori	r24, 0x18	; 24
    4468:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    446c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4470:	0f be       	out	0x3f, r0	; 63

    /* stop AVR */
    {
		wdt_close();

		twi_mcp23017_av1624_fw_close();
    4472:	0e 94 20 2b 	call	0x5640	; 0x5640 <twi_mcp23017_av1624_fw_close>
		twi_mcp23017_fw_close();
    4476:	0e 94 30 2a 	call	0x5460	; 0x5460 <twi_mcp23017_fw_close>
		twi_fw_close();
    447a:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <twi_fw_close>

		usbIsUp = false;
    447e:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <usbIsUp>
		cli();
    4482:	f8 94       	cli
		usb_fw_close();
    4484:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <usb_fw_close>

		serial_fw_close();
    4488:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <serial_fw_close>
		anlgComp_fw_close();
    448c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <anlgComp_fw_close>
		clkFastCtr_fw_close();
    4490:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <clkFastCtr_fw_close>
		clkPullPwm_fw_close();
    4494:	0e 94 ad 0a 	call	0x155a	; 0x155a <clkPullPwm_fw_close>

		// all pins are set to be input
		DDRB = 0x00;
    4498:	14 b8       	out	0x04, r1	; 4
		DDRC = 0x00;
    449a:	17 b8       	out	0x07, r1	; 7
		DDRD = 0x00;
    449c:	1a b8       	out	0x0a, r1	; 10

		// all pull-ups are being switched off
		PORTB = 0x00;
    449e:	15 b8       	out	0x05, r1	; 5
		PORTC = 0x00;
    44a0:	18 b8       	out	0x08, r1	; 8
		PORTD = 0x00;
    44a2:	1b b8       	out	0x0b, r1	; 11

		// switch off Pull-Up Disable
		MCUCR &= ~(_BV(PUD));
    44a4:	85 b7       	in	r24, 0x35	; 53
    44a6:	8f 7e       	andi	r24, 0xEF	; 239
    44a8:	85 bf       	out	0x35, r24	; 53

		{
			/* enter and keep in sleep mode */
			for (;;) {
				set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    44aa:	83 b7       	in	r24, 0x33	; 51
    44ac:	81 7f       	andi	r24, 0xF1	; 241
    44ae:	84 60       	ori	r24, 0x04	; 4
    44b0:	83 bf       	out	0x33, r24	; 51
				uint8_t sreg = SREG;
    44b2:	9f b7       	in	r25, 0x3f	; 63
				cli();
    44b4:	f8 94       	cli
				// if (some_condition) {
					sleep_enable();
    44b6:	83 b7       	in	r24, 0x33	; 51
    44b8:	81 60       	ori	r24, 0x01	; 1
    44ba:	83 bf       	out	0x33, r24	; 51
					sleep_bod_disable();
    44bc:	85 b7       	in	r24, 0x35	; 53
    44be:	80 66       	ori	r24, 0x60	; 96
    44c0:	85 bf       	out	0x35, r24	; 53
    44c2:	8f 7d       	andi	r24, 0xDF	; 223
    44c4:	85 bf       	out	0x35, r24	; 53
				//	SREG = sreg;
					sleep_cpu();
    44c6:	88 95       	sleep
					sleep_disable();
    44c8:	83 b7       	in	r24, 0x33	; 51
    44ca:	8e 7f       	andi	r24, 0xFE	; 254
    44cc:	83 bf       	out	0x33, r24	; 51
				// }
				SREG = sreg;
    44ce:	9f bf       	out	0x3f, r25	; 63
			}
    44d0:	ec cf       	rjmp	.-40     	; 0x44aa <main+0x244>

000044d2 <memory_fw_copyBuffer>:
	}
}

void memory_fw_writeFlashPage(uint8_t source[], pagebuf_t size, uint32_t baddr)
{
	memory_bl_writeFlashPage(source, size, baddr);
    44d2:	cf 93       	push	r28
    44d4:	df 93       	push	r29
    44d6:	eb 01       	movw	r28, r22
    44d8:	64 2f       	mov	r22, r20
    44da:	75 2f       	mov	r23, r21
    44dc:	88 23       	and	r24, r24
    44de:	31 f0       	breq	.+12     	; 0x44ec <memory_fw_copyBuffer+0x1a>
    44e0:	21 15       	cp	r18, r1
    44e2:	31 05       	cpc	r19, r1
    44e4:	41 f4       	brne	.+16     	; 0x44f6 <memory_fw_copyBuffer+0x24>
    44e6:	8c 2f       	mov	r24, r28
    44e8:	9d 2f       	mov	r25, r29
    44ea:	12 c0       	rjmp	.+36     	; 0x4510 <memory_fw_copyBuffer+0x3e>
    44ec:	a9 01       	movw	r20, r18
    44ee:	ce 01       	movw	r24, r28
    44f0:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <memcpy>
    44f4:	0d c0       	rjmp	.+26     	; 0x4510 <memory_fw_copyBuffer+0x3e>
    44f6:	e4 2f       	mov	r30, r20
    44f8:	f5 2f       	mov	r31, r21
    44fa:	de 01       	movw	r26, r28
    44fc:	2c 0f       	add	r18, r28
    44fe:	3d 1f       	adc	r19, r29
    4500:	94 91       	lpm	r25, Z
    4502:	9d 93       	st	X+, r25
    4504:	31 96       	adiw	r30, 0x01	; 1
    4506:	a2 17       	cp	r26, r18
    4508:	b3 07       	cpc	r27, r19
    450a:	d1 f7       	brne	.-12     	; 0x4500 <memory_fw_copyBuffer+0x2e>
    450c:	8c 2f       	mov	r24, r28
    450e:	9d 2f       	mov	r25, r29
    4510:	df 91       	pop	r29
    4512:	cf 91       	pop	r28
    4514:	08 95       	ret

00004516 <memory_fw_getSealMarker>:
    4516:	20 e1       	ldi	r18, 0x10	; 16
    4518:	82 9f       	mul	r24, r18
    451a:	c0 01       	movw	r24, r0
    451c:	11 24       	eor	r1, r1
    451e:	8c 60       	ori	r24, 0x0C	; 12
    4520:	90 6b       	ori	r25, 0xB0	; 176
    4522:	08 95       	ret

00004524 <memory_fw_calcBlockCrc>:
    4524:	cf 93       	push	r28
    4526:	fc 01       	movw	r30, r24
    4528:	dc 01       	movw	r26, r24
    452a:	5e 96       	adiw	r26, 0x1e	; 30
    452c:	25 ea       	ldi	r18, 0xA5	; 165
    452e:	35 ea       	ldi	r19, 0xA5	; 165
    4530:	c0 e1       	ldi	r28, 0x10	; 16
    4532:	24 c0       	rjmp	.+72     	; 0x457c <memory_fw_calcBlockCrc+0x58>
    4534:	b9 01       	movw	r22, r18
    4536:	66 0f       	add	r22, r22
    4538:	77 1f       	adc	r23, r23
    453a:	82 2f       	mov	r24, r18
    453c:	81 70       	andi	r24, 0x01	; 1
    453e:	93 2f       	mov	r25, r19
    4540:	99 1f       	adc	r25, r25
    4542:	99 27       	eor	r25, r25
    4544:	99 1f       	adc	r25, r25
    4546:	98 27       	eor	r25, r24
    4548:	35 fb       	bst	r19, 5
    454a:	44 27       	eor	r20, r20
    454c:	40 f9       	bld	r20, 0
    454e:	94 27       	eor	r25, r20
    4550:	33 fb       	bst	r19, 3
    4552:	33 27       	eor	r19, r19
    4554:	30 f9       	bld	r19, 0
    4556:	93 27       	eor	r25, r19
    4558:	27 fb       	bst	r18, 7
    455a:	88 27       	eor	r24, r24
    455c:	80 f9       	bld	r24, 0
    455e:	98 27       	eor	r25, r24
    4560:	22 fb       	bst	r18, 2
    4562:	22 27       	eor	r18, r18
    4564:	20 f9       	bld	r18, 0
    4566:	29 27       	eor	r18, r25
    4568:	cb 01       	movw	r24, r22
    456a:	82 2b       	or	r24, r18
    456c:	9c 01       	movw	r18, r24
    456e:	51 50       	subi	r21, 0x01	; 1
    4570:	09 f7       	brne	.-62     	; 0x4534 <memory_fw_calcBlockCrc+0x10>
    4572:	81 91       	ld	r24, Z+
    4574:	28 27       	eor	r18, r24
    4576:	ea 17       	cp	r30, r26
    4578:	fb 07       	cpc	r31, r27
    457a:	11 f0       	breq	.+4      	; 0x4580 <memory_fw_calcBlockCrc+0x5c>
    457c:	5c 2f       	mov	r21, r28
    457e:	da cf       	rjmp	.-76     	; 0x4534 <memory_fw_calcBlockCrc+0x10>
    4580:	c9 01       	movw	r24, r18
    4582:	cf 91       	pop	r28
    4584:	08 95       	ret

00004586 <memory_fw_readEEpromPage>:
    4586:	cf 92       	push	r12
    4588:	df 92       	push	r13
    458a:	ef 92       	push	r14
    458c:	ff 92       	push	r15
    458e:	0f 93       	push	r16
    4590:	1f 93       	push	r17
    4592:	cf 93       	push	r28
    4594:	df 93       	push	r29
    4596:	66 23       	and	r22, r22
    4598:	99 f0       	breq	.+38     	; 0x45c0 <memory_fw_readEEpromPage+0x3a>
    459a:	06 2f       	mov	r16, r22
    459c:	6c 01       	movw	r12, r24
    459e:	c4 2f       	mov	r28, r20
    45a0:	d5 2f       	mov	r29, r21
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	11 e0       	ldi	r17, 0x01	; 1
    45a6:	19 0f       	add	r17, r25
    45a8:	76 01       	movw	r14, r12
    45aa:	e9 0e       	add	r14, r25
    45ac:	f1 1c       	adc	r15, r1
    45ae:	ce 01       	movw	r24, r28
    45b0:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <eeprom_read_byte>
    45b4:	f7 01       	movw	r30, r14
    45b6:	80 83       	st	Z, r24
    45b8:	21 96       	adiw	r28, 0x01	; 1
    45ba:	91 2f       	mov	r25, r17
    45bc:	10 13       	cpse	r17, r16
    45be:	f2 cf       	rjmp	.-28     	; 0x45a4 <memory_fw_readEEpromPage+0x1e>
    45c0:	df 91       	pop	r29
    45c2:	cf 91       	pop	r28
    45c4:	1f 91       	pop	r17
    45c6:	0f 91       	pop	r16
    45c8:	ff 90       	pop	r15
    45ca:	ef 90       	pop	r14
    45cc:	df 90       	pop	r13
    45ce:	cf 90       	pop	r12
    45d0:	08 95       	ret

000045d2 <memory_fw_isEepromBlockValid>:
    45d2:	88 30       	cpi	r24, 0x08	; 8
    45d4:	d8 f4       	brcc	.+54     	; 0x460c <memory_fw_isEepromBlockValid+0x3a>
    45d6:	90 e2       	ldi	r25, 0x20	; 32
    45d8:	89 9f       	mul	r24, r25
    45da:	a0 01       	movw	r20, r0
    45dc:	11 24       	eor	r1, r1
    45de:	60 e2       	ldi	r22, 0x20	; 32
    45e0:	8f e8       	ldi	r24, 0x8F	; 143
    45e2:	93 e0       	ldi	r25, 0x03	; 3
    45e4:	0e 94 c3 22 	call	0x4586	; 0x4586 <memory_fw_readEEpromPage>
    45e8:	8f e8       	ldi	r24, 0x8F	; 143
    45ea:	93 e0       	ldi	r25, 0x03	; 3
    45ec:	0e 94 92 22 	call	0x4524	; 0x4524 <memory_fw_calcBlockCrc>
    45f0:	ef e8       	ldi	r30, 0x8F	; 143
    45f2:	f3 e0       	ldi	r31, 0x03	; 3
    45f4:	27 8d       	ldd	r18, Z+31	; 0x1f
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	32 2f       	mov	r19, r18
    45fa:	22 27       	eor	r18, r18
    45fc:	46 8d       	ldd	r20, Z+30	; 0x1e
    45fe:	24 2b       	or	r18, r20
    4600:	41 e0       	ldi	r20, 0x01	; 1
    4602:	28 17       	cp	r18, r24
    4604:	39 07       	cpc	r19, r25
    4606:	19 f0       	breq	.+6      	; 0x460e <memory_fw_isEepromBlockValid+0x3c>
    4608:	40 e0       	ldi	r20, 0x00	; 0
    460a:	01 c0       	rjmp	.+2      	; 0x460e <memory_fw_isEepromBlockValid+0x3c>
    460c:	40 e0       	ldi	r20, 0x00	; 0
    460e:	84 2f       	mov	r24, r20
    4610:	08 95       	ret

00004612 <memory_fw_readEepromValidBlock>:
    4612:	0f 93       	push	r16
    4614:	1f 93       	push	r17
    4616:	cf 93       	push	r28
    4618:	68 30       	cpi	r22, 0x08	; 8
    461a:	a8 f4       	brcc	.+42     	; 0x4646 <memory_fw_readEepromValidBlock+0x34>
    461c:	c6 2f       	mov	r28, r22
    461e:	8c 01       	movw	r16, r24
    4620:	86 2f       	mov	r24, r22
    4622:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <memory_fw_isEepromBlockValid>
    4626:	88 23       	and	r24, r24
    4628:	89 f0       	breq	.+34     	; 0x464c <memory_fw_readEepromValidBlock+0x3a>
    462a:	83 e0       	ldi	r24, 0x03	; 3
    462c:	0f 38       	cpi	r16, 0x8F	; 143
    462e:	18 07       	cpc	r17, r24
    4630:	61 f0       	breq	.+24     	; 0x464a <memory_fw_readEepromValidBlock+0x38>
    4632:	80 e2       	ldi	r24, 0x20	; 32
    4634:	c8 9f       	mul	r28, r24
    4636:	a0 01       	movw	r20, r0
    4638:	11 24       	eor	r1, r1
    463a:	60 e2       	ldi	r22, 0x20	; 32
    463c:	c8 01       	movw	r24, r16
    463e:	0e 94 c3 22 	call	0x4586	; 0x4586 <memory_fw_readEEpromPage>
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	03 c0       	rjmp	.+6      	; 0x464c <memory_fw_readEepromValidBlock+0x3a>
    4646:	80 e0       	ldi	r24, 0x00	; 0
    4648:	01 c0       	rjmp	.+2      	; 0x464c <memory_fw_readEepromValidBlock+0x3a>
    464a:	81 e0       	ldi	r24, 0x01	; 1
    464c:	cf 91       	pop	r28
    464e:	1f 91       	pop	r17
    4650:	0f 91       	pop	r16
    4652:	08 95       	ret

00004654 <memory_fw_writeEEpromPage>:
}

void memory_fw_writeEEpromPage(uint8_t source[], pagebuf_t size, uint16_t baddr)
{
    4654:	cf 92       	push	r12
    4656:	df 92       	push	r13
    4658:	ef 92       	push	r14
    465a:	ff 92       	push	r15
    465c:	0f 93       	push	r16
    465e:	1f 93       	push	r17
    4660:	cf 93       	push	r28
    4662:	df 93       	push	r29
    4664:	6c 01       	movw	r12, r24
    4666:	8a 01       	movw	r16, r20
	uint8_t idx = 0;

	while (size--) {								// decrease number of bytes to write
    4668:	8f ef       	ldi	r24, 0xFF	; 255
    466a:	86 0f       	add	r24, r22
    466c:	66 23       	and	r22, r22
    466e:	a1 f0       	breq	.+40     	; 0x4698 <memory_fw_writeEEpromPage+0x44>
    4670:	7a 01       	movw	r14, r20
    4672:	9f ef       	ldi	r25, 0xFF	; 255
    4674:	e9 1a       	sub	r14, r25
    4676:	f9 0a       	sbc	r15, r25
    4678:	e8 0e       	add	r14, r24
    467a:	f1 1c       	adc	r15, r1
    467c:	ea 01       	movw	r28, r20
    467e:	9c 2f       	mov	r25, r28
    4680:	90 1b       	sub	r25, r16
		eeprom_write_byte((uint8_t*) baddr, source[idx++]);
    4682:	f6 01       	movw	r30, r12
    4684:	e9 0f       	add	r30, r25
    4686:	f1 1d       	adc	r31, r1
    4688:	60 81       	ld	r22, Z
    468a:	ce 01       	movw	r24, r28
    468c:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <eeprom_write_byte>
		baddr++;									// select next byte
    4690:	21 96       	adiw	r28, 0x01	; 1

void memory_fw_writeEEpromPage(uint8_t source[], pagebuf_t size, uint16_t baddr)
{
	uint8_t idx = 0;

	while (size--) {								// decrease number of bytes to write
    4692:	ce 15       	cp	r28, r14
    4694:	df 05       	cpc	r29, r15
    4696:	99 f7       	brne	.-26     	; 0x467e <memory_fw_writeEEpromPage+0x2a>
		eeprom_write_byte((uint8_t*) baddr, source[idx++]);
		baddr++;									// select next byte
	}												// loop until all bytes written

	// eeprom_busy_wait();
}
    4698:	df 91       	pop	r29
    469a:	cf 91       	pop	r28
    469c:	1f 91       	pop	r17
    469e:	0f 91       	pop	r16
    46a0:	ff 90       	pop	r15
    46a2:	ef 90       	pop	r14
    46a4:	df 90       	pop	r13
    46a6:	cf 90       	pop	r12
    46a8:	08 95       	ret

000046aa <memory_fw_writeEepromBlockMakeValid>:
	// bad usage
	return false;
}

uint8_t memory_fw_writeEepromBlockMakeValid(uint8_t* source, uint8_t blockNr)
{
    46aa:	1f 93       	push	r17
    46ac:	cf 93       	push	r28
    46ae:	df 93       	push	r29
	if (blockNr < BLOCK_COUNT) {
    46b0:	68 30       	cpi	r22, 0x08	; 8
    46b2:	38 f5       	brcc	.+78     	; 0x4702 <memory_fw_writeEepromBlockMakeValid+0x58>
    46b4:	16 2f       	mov	r17, r22
    46b6:	ec 01       	movw	r28, r24
		uint16_t oldCrcBlock = source[30] | (source[31] << 8);
		uint16_t oldCrcCalc  = memory_fw_calcBlockCrc(source);
    46b8:	0e 94 92 22 	call	0x4524	; 0x4524 <memory_fw_calcBlockCrc>
}

uint8_t memory_fw_writeEepromBlockMakeValid(uint8_t* source, uint8_t blockNr)
{
	if (blockNr < BLOCK_COUNT) {
		uint16_t oldCrcBlock = source[30] | (source[31] << 8);
    46bc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	32 2f       	mov	r19, r18
    46c2:	22 27       	eor	r18, r18
    46c4:	4e 8d       	ldd	r20, Y+30	; 0x1e
    46c6:	24 2b       	or	r18, r20
		uint16_t oldCrcCalc  = memory_fw_calcBlockCrc(source);

		if (oldCrcBlock != oldCrcCalc) {
    46c8:	28 17       	cp	r18, r24
    46ca:	39 07       	cpc	r19, r25
    46cc:	e1 f0       	breq	.+56     	; 0x4706 <memory_fw_writeEepromBlockMakeValid+0x5c>
			/* initial CRC calc marker found, seal the content */
			source[30] = (oldCrcCalc & 0xff);
    46ce:	8e 8f       	std	Y+30, r24	; 0x1e
			source[31] = (oldCrcCalc >> 8);
    46d0:	9f 8f       	std	Y+31, r25	; 0x1f

			/* any recalculation of the CRC is counted */
			uint16_t counter = source[28] | (source[29] << 8);
    46d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	98 2f       	mov	r25, r24
    46d8:	88 27       	eor	r24, r24
    46da:	2c 8d       	ldd	r18, Y+28	; 0x1c
    46dc:	82 2b       	or	r24, r18

			counter++;
    46de:	01 96       	adiw	r24, 0x01	; 1
			source[28] = (counter & 0xff);
    46e0:	8c 8f       	std	Y+28, r24	; 0x1c
			source[29] = (counter >> 8);
    46e2:	9d 8f       	std	Y+29, r25	; 0x1d

			/* re-calc the CRC */
			uint16_t newCrcCalc = memory_fw_calcBlockCrc(source);
    46e4:	ce 01       	movw	r24, r28
    46e6:	0e 94 92 22 	call	0x4524	; 0x4524 <memory_fw_calcBlockCrc>

			source[30] = (newCrcCalc & 0xff);
    46ea:	8e 8f       	std	Y+30, r24	; 0x1e
			source[31] = (newCrcCalc >> 8);
    46ec:	9f 8f       	std	Y+31, r25	; 0x1f

			memory_fw_writeEEpromPage(source, 1 << 5, blockNr << 5);
    46ee:	80 e2       	ldi	r24, 0x20	; 32
    46f0:	18 9f       	mul	r17, r24
    46f2:	a0 01       	movw	r20, r0
    46f4:	11 24       	eor	r1, r1
    46f6:	60 e2       	ldi	r22, 0x20	; 32
    46f8:	ce 01       	movw	r24, r28
    46fa:	0e 94 2a 23 	call	0x4654	; 0x4654 <memory_fw_writeEEpromPage>
		}

		// block valid
		return true;
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	03 c0       	rjmp	.+6      	; 0x4708 <memory_fw_writeEepromBlockMakeValid+0x5e>
	}

	// bad usage
	return false;
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	01 c0       	rjmp	.+2      	; 0x4708 <memory_fw_writeEepromBlockMakeValid+0x5e>

			memory_fw_writeEEpromPage(source, 1 << 5, blockNr << 5);
		}

		// block valid
		return true;
    4706:	81 e0       	ldi	r24, 0x01	; 1
	}

	// bad usage
	return false;
}
    4708:	df 91       	pop	r29
    470a:	cf 91       	pop	r28
    470c:	1f 91       	pop	r17
    470e:	08 95       	ret

00004710 <memory_fw_manageBlock>:
	// bad usage or not valid block
	return false;
}

uint8_t memory_fw_manageBlock(uint8_t blockNr)
{
    4710:	ef 92       	push	r14
    4712:	ff 92       	push	r15
    4714:	0f 93       	push	r16
    4716:	1f 93       	push	r17
    4718:	cf 93       	push	r28
	if (blockNr < BLOCK_COUNT) {
    471a:	88 30       	cpi	r24, 0x08	; 8
    471c:	f0 f5       	brcc	.+124    	; 0x479a <memory_fw_manageBlock+0x8a>
    471e:	c8 2f       	mov	r28, r24
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
    4720:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <memory_fw_isEepromBlockValid>
    4724:	81 11       	cpse	r24, r1
    4726:	3b c0       	rjmp	.+118    	; 0x479e <memory_fw_manageBlock+0x8e>
	}
}

uint16_t memory_fw_getSealMarker(uint8_t blockNr)
{
	return (0xb00c | (blockNr << 4));
    4728:	2c 2f       	mov	r18, r28
    472a:	30 e0       	ldi	r19, 0x00	; 0
uint8_t memory_fw_manageBlock(uint8_t blockNr)
{
	if (blockNr < BLOCK_COUNT) {
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
			/* the block is non-valid, reload the EEPROM block with the default data */
			uint16_t oldCrcBlock = mainFormatBuffer[30] | (mainFormatBuffer[31] << 8);
    472c:	ef e8       	ldi	r30, 0x8F	; 143
    472e:	f3 e0       	ldi	r31, 0x03	; 3
    4730:	87 8d       	ldd	r24, Z+31	; 0x1f
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	98 2f       	mov	r25, r24
    4736:	88 27       	eor	r24, r24
    4738:	46 8d       	ldd	r20, Z+30	; 0x1e
    473a:	84 2b       	or	r24, r20
	}
}

uint16_t memory_fw_getSealMarker(uint8_t blockNr)
{
	return (0xb00c | (blockNr << 4));
    473c:	a9 01       	movw	r20, r18
    473e:	42 95       	swap	r20
    4740:	52 95       	swap	r21
    4742:	50 7f       	andi	r21, 0xF0	; 240
    4744:	54 27       	eor	r21, r20
    4746:	40 7f       	andi	r20, 0xF0	; 240
    4748:	54 27       	eor	r21, r20
    474a:	4c 60       	ori	r20, 0x0C	; 12
    474c:	50 6b       	ori	r21, 0xB0	; 176
	if (blockNr < BLOCK_COUNT) {
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
			/* the block is non-valid, reload the EEPROM block with the default data */
			uint16_t oldCrcBlock = mainFormatBuffer[30] | (mainFormatBuffer[31] << 8);

			if (oldCrcBlock != memory_fw_getSealMarker(blockNr)) {
    474e:	84 17       	cp	r24, r20
    4750:	95 07       	cpc	r25, r21
    4752:	e1 f0       	breq	.+56     	; 0x478c <memory_fw_manageBlock+0x7c>
				uint16_t counter = mainFormatBuffer[28] | (mainFormatBuffer[29] << 8);
    4754:	7f 01       	movw	r14, r30
    4756:	05 8d       	ldd	r16, Z+29	; 0x1d
    4758:	10 e0       	ldi	r17, 0x00	; 0
    475a:	10 2f       	mov	r17, r16
    475c:	00 27       	eor	r16, r16
    475e:	84 8d       	ldd	r24, Z+28	; 0x1c
    4760:	08 2b       	or	r16, r24

				/* reading default values if not CRC calc marker for sealing is found */
				memory_fw_readFlashPage(mainFormatBuffer,
						(1 << 5) - 4,								// load default data, without counter and special marked CRC value
						(((uint16_t) ((void*) &eeprom_defaultValues_content)) + (blockNr << 5)));
    4762:	22 0f       	add	r18, r18
    4764:	33 1f       	adc	r19, r19
    4766:	22 95       	swap	r18
    4768:	32 95       	swap	r19
    476a:	30 7f       	andi	r19, 0xF0	; 240
    476c:	32 27       	eor	r19, r18
    476e:	20 7f       	andi	r18, 0xF0	; 240
    4770:	32 27       	eor	r19, r18
    4772:	2a 52       	subi	r18, 0x2A	; 42
    4774:	32 4f       	sbci	r19, 0xF2	; 242

			if (oldCrcBlock != memory_fw_getSealMarker(blockNr)) {
				uint16_t counter = mainFormatBuffer[28] | (mainFormatBuffer[29] << 8);

				/* reading default values if not CRC calc marker for sealing is found */
				memory_fw_readFlashPage(mainFormatBuffer,
    4776:	40 e0       	ldi	r20, 0x00	; 0
    4778:	50 e0       	ldi	r21, 0x00	; 0
	memory_bl_eraseFlash();
}

void memory_fw_readFlashPage(uint8_t target[], pagebuf_t size, uint32_t baddr)
{
	memory_bl_readFlashPage(target, size, baddr);
    477a:	6c e1       	ldi	r22, 0x1C	; 28
    477c:	cf 01       	movw	r24, r30
    477e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <memory_bl_readFlashPage>
				/* reading default values if not CRC calc marker for sealing is found */
				memory_fw_readFlashPage(mainFormatBuffer,
						(1 << 5) - 4,								// load default data, without counter and special marked CRC value
						(((uint16_t) ((void*) &eeprom_defaultValues_content)) + (blockNr << 5)));

				counter++;
    4782:	0f 5f       	subi	r16, 0xFF	; 255
    4784:	1f 4f       	sbci	r17, 0xFF	; 255
				mainFormatBuffer[28] = (counter & 0xff);
    4786:	f7 01       	movw	r30, r14
    4788:	04 8f       	std	Z+28, r16	; 0x1c
				mainFormatBuffer[29] = (counter >> 8);
    478a:	15 8f       	std	Z+29, r17	; 0x1d
			}

			/* update CRC and write to EEPROM */
			memory_fw_writeEepromBlockMakeValid(mainFormatBuffer, blockNr);
    478c:	6c 2f       	mov	r22, r28
    478e:	8f e8       	ldi	r24, 0x8F	; 143
    4790:	93 e0       	ldi	r25, 0x03	; 3
    4792:	0e 94 55 23 	call	0x46aa	; 0x46aa <memory_fw_writeEepromBlockMakeValid>
			return 1;
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	03 c0       	rjmp	.+6      	; 0x47a0 <memory_fw_manageBlock+0x90>
			return 0;
		}
	}

	// bad usage or not a valid block
	return 0;
    479a:	80 e0       	ldi	r24, 0x00	; 0
    479c:	01 c0       	rjmp	.+2      	; 0x47a0 <memory_fw_manageBlock+0x90>
			memory_fw_writeEepromBlockMakeValid(mainFormatBuffer, blockNr);
			return 1;

		} else {
			// no correction made
			return 0;
    479e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// bad usage or not a valid block
	return 0;
}
    47a0:	cf 91       	pop	r28
    47a2:	1f 91       	pop	r17
    47a4:	0f 91       	pop	r16
    47a6:	ff 90       	pop	r15
    47a8:	ef 90       	pop	r14
    47aa:	08 95       	ret

000047ac <memory_fw_manageNonVolatileData>:

uint8_t memory_fw_manageNonVolatileData()
{
    47ac:	cf 93       	push	r28
    47ae:	df 93       	push	r29
    47b0:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t ret = 0;
    47b2:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t status;

	for (int blockIdx = 0; blockIdx < BLOCK_COUNT; ++blockIdx) {
		status = memory_fw_manageBlock(blockIdx);
    47b4:	8c 2f       	mov	r24, r28
    47b6:	0e 94 88 23 	call	0x4710	; 0x4710 <memory_fw_manageBlock>
		if (status) {
    47ba:	81 11       	cpse	r24, r1
			++ret;
    47bc:	df 5f       	subi	r29, 0xFF	; 255
    47be:	cf 5f       	subi	r28, 0xFF	; 255
uint8_t memory_fw_manageNonVolatileData()
{
	uint8_t ret = 0;
	uint8_t status;

	for (int blockIdx = 0; blockIdx < BLOCK_COUNT; ++blockIdx) {
    47c0:	c8 30       	cpi	r28, 0x08	; 8
    47c2:	c1 f7       	brne	.-16     	; 0x47b4 <memory_fw_manageNonVolatileData+0x8>
		}
	}

	// count of block that needed reloading of default values
	return ret;
}
    47c4:	8d 2f       	mov	r24, r29
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	08 95       	ret

000047cc <ringbuffer_fw_getSemaphore>:


uint8_t ringbuffer_fw_getSemaphore(uint8_t isSend)
{
	uint8_t isLocked;
	uint8_t* semPtr = (isSend ?  &usbRingBufferSendSemaphore : &usbRingBufferRcvSemaphore);
    47cc:	81 11       	cpse	r24, r1
    47ce:	03 c0       	rjmp	.+6      	; 0x47d6 <ringbuffer_fw_getSemaphore+0xa>
    47d0:	e4 e2       	ldi	r30, 0x24	; 36
    47d2:	f5 e0       	ldi	r31, 0x05	; 5
    47d4:	02 c0       	rjmp	.+4      	; 0x47da <ringbuffer_fw_getSemaphore+0xe>
    47d6:	e5 e2       	ldi	r30, 0x25	; 37
    47d8:	f5 e0       	ldi	r31, 0x05	; 5
		  "=r" (sreg)
		: "p" (semPtr)
		: "r19"
	);
#else
	uint8_t sreg = SREG;
    47da:	8f b7       	in	r24, 0x3f	; 63
	cli();
    47dc:	f8 94       	cli
	isLocked = *semPtr;
    47de:	90 81       	ld	r25, Z
	*semPtr = true;
    47e0:	21 e0       	ldi	r18, 0x01	; 1
    47e2:	20 83       	st	Z, r18
	SREG = sreg;
    47e4:	8f bf       	out	0x3f, r24	; 63
#endif
	return !isLocked;
    47e6:	81 e0       	ldi	r24, 0x01	; 1
    47e8:	91 11       	cpse	r25, r1
    47ea:	80 e0       	ldi	r24, 0x00	; 0
}
    47ec:	08 95       	ret

000047ee <ringbuffer_fw_freeSemaphore>:
//static uint8_t ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len);
void ringbuffer_fw_freeSemaphore(uint8_t isSend)
{
	/* free semaphore */
	{
		uint8_t* semPtr = (isSend ?  &usbRingBufferSendSemaphore : &usbRingBufferRcvSemaphore);
    47ee:	81 11       	cpse	r24, r1
    47f0:	03 c0       	rjmp	.+6      	; 0x47f8 <ringbuffer_fw_freeSemaphore+0xa>
    47f2:	e4 e2       	ldi	r30, 0x24	; 36
    47f4:	f5 e0       	ldi	r31, 0x05	; 5
    47f6:	02 c0       	rjmp	.+4      	; 0x47fc <ringbuffer_fw_freeSemaphore+0xe>
    47f8:	e5 e2       	ldi	r30, 0x25	; 37
    47fa:	f5 e0       	ldi	r31, 0x05	; 5
		uint8_t sreg = SREG;
    47fc:	8f b7       	in	r24, 0x3f	; 63
		cli();
    47fe:	f8 94       	cli
		*semPtr = false;
    4800:	10 82       	st	Z, r1
		SREG = sreg;
    4802:	8f bf       	out	0x3f, r24	; 63
    4804:	08 95       	ret

00004806 <ringbuffer_fw_ringBufferPush>:
	}
}

/*static*/ uint8_t ringbuffer_fw_ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
    4806:	8f 92       	push	r8
    4808:	9f 92       	push	r9
    480a:	af 92       	push	r10
    480c:	bf 92       	push	r11
    480e:	cf 92       	push	r12
    4810:	df 92       	push	r13
    4812:	ef 92       	push	r14
    4814:	ff 92       	push	r15
    4816:	0f 93       	push	r16
    4818:	1f 93       	push	r17
    481a:	cf 93       	push	r28
    481c:	df 93       	push	r29
    481e:	98 2f       	mov	r25, r24
	uint8_t retLen = 0;
	uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);

	uint8_t sreg = SREG;
    4820:	8f b7       	in	r24, 0x3f	; 63
	cli();
    4822:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4824:	99 23       	and	r25, r25
    4826:	29 f0       	breq	.+10     	; 0x4832 <ringbuffer_fw_ringBufferPush+0x2c>
    4828:	30 91 29 05 	lds	r19, 0x0529	; 0x800529 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    482c:	70 91 28 05 	lds	r23, 0x0528	; 0x800528 <usbRingBufferSendPullIdx>
    4830:	04 c0       	rjmp	.+8      	; 0x483a <ringbuffer_fw_ringBufferPush+0x34>
	uint8_t retLen = 0;
	uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4832:	30 91 27 05 	lds	r19, 0x0527	; 0x800527 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4836:	70 91 26 05 	lds	r23, 0x0526	; 0x800526 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    483a:	8f bf       	out	0x3f, r24	; 63

	if (!(((pushIdx + 1) == pullIdx) || (((pushIdx + 1) == bufferSize) && !pullIdx))) {
    483c:	a3 2f       	mov	r26, r19
    483e:	b0 e0       	ldi	r27, 0x00	; 0
    4840:	e7 2f       	mov	r30, r23
    4842:	f0 e0       	ldi	r31, 0x00	; 0
    4844:	8d 01       	movw	r16, r26
    4846:	0f 5f       	subi	r16, 0xFF	; 255
    4848:	1f 4f       	sbci	r17, 0xFF	; 255
    484a:	0e 17       	cp	r16, r30
    484c:	1f 07       	cpc	r17, r31
    484e:	09 f4       	brne	.+2      	; 0x4852 <ringbuffer_fw_ringBufferPush+0x4c>
    4850:	75 c0       	rjmp	.+234    	; 0x493c <ringbuffer_fw_ringBufferPush+0x136>
    4852:	3f 37       	cpi	r19, 0x7F	; 127
    4854:	19 f4       	brne	.+6      	; 0x485c <ringbuffer_fw_ringBufferPush+0x56>
    4856:	77 23       	and	r23, r23
    4858:	09 f4       	brne	.+2      	; 0x485c <ringbuffer_fw_ringBufferPush+0x56>
    485a:	72 c0       	rjmp	.+228    	; 0x4940 <ringbuffer_fw_ringBufferPush+0x13a>
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    485c:	91 11       	cpse	r25, r1
    485e:	07 c0       	rjmp	.+14     	; 0x486e <ringbuffer_fw_ringBufferPush+0x68>
    4860:	0f 2e       	mov	r0, r31
    4862:	f9 e8       	ldi	r31, 0x89	; 137
    4864:	ef 2e       	mov	r14, r31
    4866:	f2 e0       	ldi	r31, 0x02	; 2
    4868:	ff 2e       	mov	r15, r31
    486a:	f0 2d       	mov	r31, r0
    486c:	06 c0       	rjmp	.+12     	; 0x487a <ringbuffer_fw_ringBufferPush+0x74>
    486e:	0f 2e       	mov	r0, r31
    4870:	f9 e0       	ldi	r31, 0x09	; 9
    4872:	ef 2e       	mov	r14, r31
    4874:	f3 e0       	ldi	r31, 0x03	; 3
    4876:	ff 2e       	mov	r15, r31
    4878:	f0 2d       	mov	r31, r0
		uint8_t lenTop = min((pullIdx > pushIdx ?  (pullIdx - pushIdx - 1) : bufferSize - pushIdx - (!pullIdx ?  1 : 0)), len);
    487a:	c2 2f       	mov	r28, r18
    487c:	d0 e0       	ldi	r29, 0x00	; 0
    487e:	37 17       	cp	r19, r23
    4880:	80 f4       	brcc	.+32     	; 0x48a2 <ringbuffer_fw_ringBufferPush+0x9c>
    4882:	8f 01       	movw	r16, r30
    4884:	0a 1b       	sub	r16, r26
    4886:	1b 0b       	sbc	r17, r27
    4888:	01 50       	subi	r16, 0x01	; 1
    488a:	11 09       	sbc	r17, r1
    488c:	c0 17       	cp	r28, r16
    488e:	d1 07       	cpc	r29, r17
    4890:	0c f4       	brge	.+2      	; 0x4894 <ringbuffer_fw_ringBufferPush+0x8e>
    4892:	8e 01       	movw	r16, r28
    4894:	d0 2e       	mov	r13, r16
		uint8_t lenBot = min((((pullIdx > pushIdx) || !pullIdx) ?  0 : pullIdx - 1), len - lenTop);
    4896:	11 27       	eor	r17, r17
    4898:	c0 1b       	sub	r28, r16
    489a:	d1 0b       	sbc	r29, r17
    489c:	e0 e0       	ldi	r30, 0x00	; 0
    489e:	f0 e0       	ldi	r31, 0x00	; 0
    48a0:	1a c0       	rjmp	.+52     	; 0x48d6 <ringbuffer_fw_ringBufferPush+0xd0>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
	SREG = sreg;

	if (!(((pushIdx + 1) == pullIdx) || (((pushIdx + 1) == bufferSize) && !pullIdx))) {
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
		uint8_t lenTop = min((pullIdx > pushIdx ?  (pullIdx - pushIdx - 1) : bufferSize - pushIdx - (!pullIdx ?  1 : 0)), len);
    48a2:	00 e8       	ldi	r16, 0x80	; 128
    48a4:	10 e0       	ldi	r17, 0x00	; 0
    48a6:	0a 1b       	sub	r16, r26
    48a8:	1b 0b       	sbc	r17, r27
    48aa:	a1 e0       	ldi	r26, 0x01	; 1
    48ac:	b0 e0       	ldi	r27, 0x00	; 0
    48ae:	77 23       	and	r23, r23
    48b0:	11 f0       	breq	.+4      	; 0x48b6 <ringbuffer_fw_ringBufferPush+0xb0>
    48b2:	a0 e0       	ldi	r26, 0x00	; 0
    48b4:	b0 e0       	ldi	r27, 0x00	; 0
    48b6:	0a 1b       	sub	r16, r26
    48b8:	1b 0b       	sbc	r17, r27
    48ba:	c0 17       	cp	r28, r16
    48bc:	d1 07       	cpc	r29, r17
    48be:	0c f4       	brge	.+2      	; 0x48c2 <ringbuffer_fw_ringBufferPush+0xbc>
    48c0:	8e 01       	movw	r16, r28
    48c2:	d0 2e       	mov	r13, r16
		uint8_t lenBot = min((((pullIdx > pushIdx) || !pullIdx) ?  0 : pullIdx - 1), len - lenTop);
    48c4:	11 27       	eor	r17, r17
    48c6:	c0 1b       	sub	r28, r16
    48c8:	d1 0b       	sbc	r29, r17
    48ca:	77 23       	and	r23, r23
    48cc:	11 f0       	breq	.+4      	; 0x48d2 <ringbuffer_fw_ringBufferPush+0xcc>
    48ce:	31 97       	sbiw	r30, 0x01	; 1
    48d0:	02 c0       	rjmp	.+4      	; 0x48d6 <ringbuffer_fw_ringBufferPush+0xd0>
    48d2:	e0 e0       	ldi	r30, 0x00	; 0
    48d4:	f0 e0       	ldi	r31, 0x00	; 0
    48d6:	ec 17       	cp	r30, r28
    48d8:	fd 07       	cpc	r31, r29
    48da:	0c f4       	brge	.+2      	; 0x48de <ringbuffer_fw_ringBufferPush+0xd8>
    48dc:	ef 01       	movw	r28, r30
    48de:	5a 01       	movw	r10, r20
    48e0:	86 2e       	mov	r8, r22
    48e2:	99 2e       	mov	r9, r25
    48e4:	cc 2e       	mov	r12, r28

		if (lenTop) {
    48e6:	dd 20       	and	r13, r13
    48e8:	39 f0       	breq	.+14     	; 0x48f8 <ringbuffer_fw_ringBufferPush+0xf2>
			memory_fw_copyBuffer(isPgm, &(ringBuffer[pushIdx]), inData, lenTop);
    48ea:	b7 01       	movw	r22, r14
    48ec:	63 0f       	add	r22, r19
    48ee:	71 1d       	adc	r23, r1
    48f0:	98 01       	movw	r18, r16
    48f2:	88 2d       	mov	r24, r8
    48f4:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			retLen += lenTop;
		}

		if (lenBot) {
    48f8:	cc 20       	and	r12, r12
    48fa:	51 f0       	breq	.+20     	; 0x4910 <ringbuffer_fw_ringBufferPush+0x10a>
    48fc:	9e 01       	movw	r18, r28
    48fe:	33 27       	eor	r19, r19
			memory_fw_copyBuffer(isPgm, &(ringBuffer[0]), &(inData[lenTop]), lenBot);
    4900:	a5 01       	movw	r20, r10
    4902:	40 0f       	add	r20, r16
    4904:	51 1f       	adc	r21, r17
    4906:	b7 01       	movw	r22, r14
    4908:	88 2d       	mov	r24, r8
    490a:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
			retLen += lenBot;
    490e:	dc 0c       	add	r13, r12
		}

		// advance the index
		if (isSend) {
    4910:	99 20       	and	r9, r9
    4912:	51 f0       	breq	.+20     	; 0x4928 <ringbuffer_fw_ringBufferPush+0x122>
			uint8_t sreg = SREG;
    4914:	9f b7       	in	r25, 0x3f	; 63
			cli();
    4916:	f8 94       	cli
			usbRingBufferSendPushIdx += retLen;
    4918:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <usbRingBufferSendPushIdx>
    491c:	8d 0d       	add	r24, r13
			usbRingBufferSendPushIdx %= bufferSize;
    491e:	8f 77       	andi	r24, 0x7F	; 127
    4920:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <usbRingBufferSendPushIdx>
			SREG = sreg;
    4924:	9f bf       	out	0x3f, r25	; 63
    4926:	0d c0       	rjmp	.+26     	; 0x4942 <ringbuffer_fw_ringBufferPush+0x13c>

		} else {
			uint8_t sreg = SREG;
    4928:	9f b7       	in	r25, 0x3f	; 63
			cli();
    492a:	f8 94       	cli
			usbRingBufferRcvPushIdx += retLen;
    492c:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <usbRingBufferRcvPushIdx>
    4930:	8d 0d       	add	r24, r13
			usbRingBufferRcvPushIdx %= bufferSize;
    4932:	8f 77       	andi	r24, 0x7F	; 127
    4934:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <usbRingBufferRcvPushIdx>
			SREG = sreg;
    4938:	9f bf       	out	0x3f, r25	; 63
    493a:	03 c0       	rjmp	.+6      	; 0x4942 <ringbuffer_fw_ringBufferPush+0x13c>
	}
}

/*static*/ uint8_t ringbuffer_fw_ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
	uint8_t retLen = 0;
    493c:	d1 2c       	mov	r13, r1
    493e:	01 c0       	rjmp	.+2      	; 0x4942 <ringbuffer_fw_ringBufferPush+0x13c>
    4940:	d1 2c       	mov	r13, r1
			usbRingBufferRcvPushIdx %= bufferSize;
			SREG = sreg;
		}
	}
	return retLen;
}
    4942:	8d 2d       	mov	r24, r13
    4944:	df 91       	pop	r29
    4946:	cf 91       	pop	r28
    4948:	1f 91       	pop	r17
    494a:	0f 91       	pop	r16
    494c:	ff 90       	pop	r15
    494e:	ef 90       	pop	r14
    4950:	df 90       	pop	r13
    4952:	cf 90       	pop	r12
    4954:	bf 90       	pop	r11
    4956:	af 90       	pop	r10
    4958:	9f 90       	pop	r9
    495a:	8f 90       	pop	r8
    495c:	08 95       	ret

0000495e <ringbuffer_fw_ringBufferPull>:

uint8_t ringbuffer_fw_ringBufferPull(uint8_t isSend, uchar outData[], uint8_t size)
{
    495e:	9f 92       	push	r9
    4960:	af 92       	push	r10
    4962:	bf 92       	push	r11
    4964:	cf 92       	push	r12
    4966:	df 92       	push	r13
    4968:	ef 92       	push	r14
    496a:	ff 92       	push	r15
    496c:	0f 93       	push	r16
    496e:	1f 93       	push	r17
    4970:	cf 93       	push	r28
    4972:	df 93       	push	r29
	uint8_t len = 0;

	uint8_t sreg = SREG;
    4974:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4976:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4978:	88 23       	and	r24, r24
    497a:	29 f0       	breq	.+10     	; 0x4986 <ringbuffer_fw_ringBufferPull+0x28>
    497c:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4980:	50 91 28 05 	lds	r21, 0x0528	; 0x800528 <usbRingBufferSendPullIdx>
    4984:	04 c0       	rjmp	.+8      	; 0x498e <ringbuffer_fw_ringBufferPull+0x30>
{
	uint8_t len = 0;

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4986:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    498a:	50 91 26 05 	lds	r21, 0x0526	; 0x800526 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    498e:	2f bf       	out	0x3f, r18	; 63

	if ((pushIdx != pullIdx) && (size > 1)) {
    4990:	95 17       	cp	r25, r21
    4992:	09 f4       	brne	.+2      	; 0x4996 <ringbuffer_fw_ringBufferPull+0x38>
    4994:	63 c0       	rjmp	.+198    	; 0x4a5c <ringbuffer_fw_ringBufferPull+0xfe>
    4996:	42 30       	cpi	r20, 0x02	; 2
    4998:	08 f4       	brcc	.+2      	; 0x499c <ringbuffer_fw_ringBufferPull+0x3e>
    499a:	60 c0       	rjmp	.+192    	; 0x4a5c <ringbuffer_fw_ringBufferPull+0xfe>
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    499c:	81 11       	cpse	r24, r1
    499e:	03 c0       	rjmp	.+6      	; 0x49a6 <ringbuffer_fw_ringBufferPull+0x48>
    49a0:	09 e8       	ldi	r16, 0x89	; 137
    49a2:	12 e0       	ldi	r17, 0x02	; 2
    49a4:	02 c0       	rjmp	.+4      	; 0x49aa <ringbuffer_fw_ringBufferPull+0x4c>
    49a6:	09 e0       	ldi	r16, 0x09	; 9
    49a8:	13 e0       	ldi	r17, 0x03	; 3
		uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);
		uint8_t lenTop = min((pushIdx > pullIdx ?  (pushIdx - pullIdx) : bufferSize - pullIdx), size - 1);
    49aa:	c4 2f       	mov	r28, r20
    49ac:	d0 e0       	ldi	r29, 0x00	; 0
    49ae:	21 97       	sbiw	r28, 0x01	; 1
    49b0:	59 17       	cp	r21, r25
    49b2:	80 f4       	brcc	.+32     	; 0x49d4 <ringbuffer_fw_ringBufferPull+0x76>
    49b4:	29 2f       	mov	r18, r25
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	25 1b       	sub	r18, r21
    49ba:	31 09       	sbc	r19, r1
    49bc:	c2 17       	cp	r28, r18
    49be:	d3 07       	cpc	r29, r19
    49c0:	0c f4       	brge	.+2      	; 0x49c4 <ringbuffer_fw_ringBufferPull+0x66>
    49c2:	9e 01       	movw	r18, r28
    49c4:	e2 2e       	mov	r14, r18
		uint8_t lenBot = min((pushIdx > pullIdx ?  0 : pushIdx), size - 1 - lenTop);
    49c6:	69 01       	movw	r12, r18
    49c8:	dd 24       	eor	r13, r13
    49ca:	cc 19       	sub	r28, r12
    49cc:	dd 09       	sbc	r29, r13
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	0f c0       	rjmp	.+30     	; 0x49f2 <ringbuffer_fw_ringBufferPull+0x94>
	SREG = sreg;

	if ((pushIdx != pullIdx) && (size > 1)) {
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
		uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);
		uint8_t lenTop = min((pushIdx > pullIdx ?  (pushIdx - pullIdx) : bufferSize - pullIdx), size - 1);
    49d4:	20 e8       	ldi	r18, 0x80	; 128
    49d6:	30 e0       	ldi	r19, 0x00	; 0
    49d8:	25 1b       	sub	r18, r21
    49da:	31 09       	sbc	r19, r1
    49dc:	c2 17       	cp	r28, r18
    49de:	d3 07       	cpc	r29, r19
    49e0:	0c f4       	brge	.+2      	; 0x49e4 <ringbuffer_fw_ringBufferPull+0x86>
    49e2:	9e 01       	movw	r18, r28
    49e4:	e2 2e       	mov	r14, r18
		uint8_t lenBot = min((pushIdx > pullIdx ?  0 : pushIdx), size - 1 - lenTop);
    49e6:	69 01       	movw	r12, r18
    49e8:	dd 24       	eor	r13, r13
    49ea:	cc 19       	sub	r28, r12
    49ec:	dd 09       	sbc	r29, r13
    49ee:	29 2f       	mov	r18, r25
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	2c 17       	cp	r18, r28
    49f4:	3d 07       	cpc	r19, r29
    49f6:	0c f4       	brge	.+2      	; 0x49fa <ringbuffer_fw_ringBufferPull+0x9c>
    49f8:	e9 01       	movw	r28, r18
    49fa:	5b 01       	movw	r10, r22
    49fc:	f8 2e       	mov	r15, r24
    49fe:	9c 2e       	mov	r9, r28

		if (lenTop) {
    4a00:	ee 20       	and	r14, r14
    4a02:	39 f0       	breq	.+14     	; 0x4a12 <ringbuffer_fw_ringBufferPull+0xb4>
			memcpy(outData, &(ringBuffer[pullIdx]), lenTop);
    4a04:	b8 01       	movw	r22, r16
    4a06:	65 0f       	add	r22, r21
    4a08:	71 1d       	adc	r23, r1
    4a0a:	a6 01       	movw	r20, r12
    4a0c:	c5 01       	movw	r24, r10
    4a0e:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <memcpy>
			len += lenTop;
		}

		if (lenBot) {
    4a12:	99 20       	and	r9, r9
    4a14:	49 f0       	breq	.+18     	; 0x4a28 <ringbuffer_fw_ringBufferPull+0xca>
    4a16:	ae 01       	movw	r20, r28
    4a18:	55 27       	eor	r21, r21
			memcpy(&(outData[lenTop]), &(ringBuffer[0]), lenBot);
    4a1a:	b8 01       	movw	r22, r16
    4a1c:	c5 01       	movw	r24, r10
    4a1e:	8c 0d       	add	r24, r12
    4a20:	9d 1d       	adc	r25, r13
    4a22:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <memcpy>
			len += lenBot;
    4a26:	e9 0c       	add	r14, r9
		}

		outData[len] = 0;
    4a28:	f5 01       	movw	r30, r10
    4a2a:	ee 0d       	add	r30, r14
    4a2c:	f1 1d       	adc	r31, r1
    4a2e:	10 82       	st	Z, r1

		// advance the index
		if (isSend) {
    4a30:	ff 20       	and	r15, r15
    4a32:	51 f0       	breq	.+20     	; 0x4a48 <ringbuffer_fw_ringBufferPull+0xea>
			uint8_t sreg = SREG;
    4a34:	9f b7       	in	r25, 0x3f	; 63
			cli();
    4a36:	f8 94       	cli
			usbRingBufferSendPullIdx += len;
    4a38:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <usbRingBufferSendPullIdx>
    4a3c:	8e 0d       	add	r24, r14
			usbRingBufferSendPullIdx %= bufferSize;
    4a3e:	8f 77       	andi	r24, 0x7F	; 127
    4a40:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <usbRingBufferSendPullIdx>
			SREG = sreg;
    4a44:	9f bf       	out	0x3f, r25	; 63
    4a46:	11 c0       	rjmp	.+34     	; 0x4a6a <ringbuffer_fw_ringBufferPull+0x10c>

		} else {
			uint8_t sreg = SREG;
    4a48:	9f b7       	in	r25, 0x3f	; 63
			cli();
    4a4a:	f8 94       	cli
			usbRingBufferRcvPullIdx += len;
    4a4c:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <usbRingBufferRcvPullIdx>
    4a50:	8e 0d       	add	r24, r14
			usbRingBufferRcvPullIdx %= bufferSize;
    4a52:	8f 77       	andi	r24, 0x7F	; 127
    4a54:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <usbRingBufferRcvPullIdx>
			SREG = sreg;
    4a58:	9f bf       	out	0x3f, r25	; 63
    4a5a:	07 c0       	rjmp	.+14     	; 0x4a6a <ringbuffer_fw_ringBufferPull+0x10c>
		}
	} else if (!size) {
    4a5c:	41 11       	cpse	r20, r1
    4a5e:	04 c0       	rjmp	.+8      	; 0x4a68 <ringbuffer_fw_ringBufferPull+0x10a>
		outData[0] = 0;
    4a60:	fb 01       	movw	r30, r22
    4a62:	10 82       	st	Z, r1
	return retLen;
}

uint8_t ringbuffer_fw_ringBufferPull(uint8_t isSend, uchar outData[], uint8_t size)
{
	uint8_t len = 0;
    4a64:	e1 2c       	mov	r14, r1
    4a66:	01 c0       	rjmp	.+2      	; 0x4a6a <ringbuffer_fw_ringBufferPull+0x10c>
    4a68:	e1 2c       	mov	r14, r1
		}
	} else if (!size) {
		outData[0] = 0;
	}
	return len;
}
    4a6a:	8e 2d       	mov	r24, r14
    4a6c:	df 91       	pop	r29
    4a6e:	cf 91       	pop	r28
    4a70:	1f 91       	pop	r17
    4a72:	0f 91       	pop	r16
    4a74:	ff 90       	pop	r15
    4a76:	ef 90       	pop	r14
    4a78:	df 90       	pop	r13
    4a7a:	cf 90       	pop	r12
    4a7c:	bf 90       	pop	r11
    4a7e:	af 90       	pop	r10
    4a80:	9f 90       	pop	r9
    4a82:	08 95       	ret

00004a84 <ringbuffer_fw_getStatusNextMsg>:

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;

	uint8_t sreg = SREG;
    4a84:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4a86:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4a88:	88 23       	and	r24, r24
    4a8a:	49 f0       	breq	.+18     	; 0x4a9e <ringbuffer_fw_getStatusNextMsg+0x1a>
    4a8c:	20 91 29 05 	lds	r18, 0x0529	; 0x800529 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4a90:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <usbRingBufferSendPullIdx>
	SREG = sreg;
    4a94:	9f bf       	out	0x3f, r25	; 63

	if (pullIdx != pushIdx) {
    4a96:	28 13       	cpse	r18, r24
    4a98:	0c c0       	rjmp	.+24     	; 0x4ab2 <ringbuffer_fw_getStatusNextMsg+0x2e>
	return len;
}

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
    4a9c:	08 95       	ret

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4a9e:	20 91 27 05 	lds	r18, 0x0527	; 0x800527 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4aa2:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    4aa6:	9f bf       	out	0x3f, r25	; 63

	if (pullIdx != pushIdx) {
    4aa8:	28 17       	cp	r18, r24
    4aaa:	61 f0       	breq	.+24     	; 0x4ac4 <ringbuffer_fw_getStatusNextMsg+0x40>
		status |= RINGBUFFER_MSG_STATUS_AVAIL;

		/* test for NMEA message */
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    4aac:	e9 e8       	ldi	r30, 0x89	; 137
    4aae:	f2 e0       	ldi	r31, 0x02	; 2
    4ab0:	02 c0       	rjmp	.+4      	; 0x4ab6 <ringbuffer_fw_getStatusNextMsg+0x32>
    4ab2:	e9 e0       	ldi	r30, 0x09	; 9
    4ab4:	f3 e0       	ldi	r31, 0x03	; 3
		if (*(ringBuffer + pullIdx) == MSG_PATTERN_NMEA) {	// first character identifies message type
    4ab6:	e8 0f       	add	r30, r24
    4ab8:	f1 1d       	adc	r31, r1
    4aba:	80 81       	ld	r24, Z
    4abc:	84 32       	cpi	r24, 0x24	; 36
    4abe:	21 f4       	brne	.+8      	; 0x4ac8 <ringbuffer_fw_getStatusNextMsg+0x44>
			status |= RINGBUFFER_MSG_STATUS_IS_NMEA;
    4ac0:	81 e1       	ldi	r24, 0x11	; 17
    4ac2:	08 95       	ret
	return len;
}

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
    4ac6:	08 95       	ret
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
	SREG = sreg;

	if (pullIdx != pushIdx) {
		status |= RINGBUFFER_MSG_STATUS_AVAIL;
    4ac8:	81 e0       	ldi	r24, 0x01	; 1
		if (*(ringBuffer + pullIdx) == MSG_PATTERN_NMEA) {	// first character identifies message type
			status |= RINGBUFFER_MSG_STATUS_IS_NMEA;
		}
	}
	return status;
}
    4aca:	08 95       	ret

00004acc <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore>:

void ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore(uint8_t isSend)
{
    4acc:	cf 93       	push	r28
    4ace:	c8 2f       	mov	r28, r24
	for (;;) {
		if (ringbuffer_fw_getSemaphore(isSend)) {
    4ad0:	8c 2f       	mov	r24, r28
    4ad2:	0e 94 e6 23 	call	0x47cc	; 0x47cc <ringbuffer_fw_getSemaphore>
    4ad6:	88 23       	and	r24, r24
    4ad8:	c9 f0       	breq	.+50     	; 0x4b0c <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x40>
			uint8_t pushIdx;
			uint8_t pullIdx;

			if (isSend) {
    4ada:	cc 23       	and	r28, r28
    4adc:	41 f0       	breq	.+16     	; 0x4aee <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x22>
				uint8_t sreg = SREG;
    4ade:	2f b7       	in	r18, 0x3f	; 63
				cli();
    4ae0:	f8 94       	cli
				pushIdx = usbRingBufferSendPushIdx;
    4ae2:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <usbRingBufferSendPushIdx>
				pullIdx = usbRingBufferSendPullIdx;
    4ae6:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <usbRingBufferSendPullIdx>
				SREG = sreg;
    4aea:	2f bf       	out	0x3f, r18	; 63
    4aec:	07 c0       	rjmp	.+14     	; 0x4afc <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x30>

			} else {
				uint8_t sreg = SREG;
    4aee:	2f b7       	in	r18, 0x3f	; 63
				cli();
    4af0:	f8 94       	cli
				pushIdx = usbRingBufferRcvPushIdx;
    4af2:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <usbRingBufferRcvPushIdx>
				pullIdx = usbRingBufferRcvPullIdx;
    4af6:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <usbRingBufferRcvPullIdx>
				SREG = sreg;
    4afa:	2f bf       	out	0x3f, r18	; 63
			}

			if (pullIdx == pushIdx) {
    4afc:	98 17       	cp	r25, r24
    4afe:	51 f0       	breq	.+20     	; 0x4b14 <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x48>
				// buffer is empty, break loop and hold semaphore
				break;
			}

			ringbuffer_fw_freeSemaphore(isSend);
    4b00:	8c 2f       	mov	r24, r28
    4b02:	0e 94 f7 23 	call	0x47ee	; 0x47ee <ringbuffer_fw_freeSemaphore>

			// give the CPU away for a moment to delay, do not use giveAway() that would make a loop
		    wdt_reset();
    4b06:	a8 95       	wdr
		    usbPoll();
    4b08:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <usbPoll>
		}

		// give the CPU away for a moment to delay, do not use giveAway() that would make a loop
	    wdt_reset();
    4b0c:	a8 95       	wdr
	    usbPoll();
    4b0e:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <usbPoll>
	}
    4b12:	de cf       	rjmp	.-68     	; 0x4ad0 <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x4>
}
    4b14:	cf 91       	pop	r28
    4b16:	08 95       	ret

00004b18 <ringbuffer_fw_ringBufferWaitAppend>:

uint8_t ringbuffer_fw_ringBufferWaitAppend(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
    4b18:	ff 92       	push	r15
    4b1a:	0f 93       	push	r16
    4b1c:	1f 93       	push	r17
    4b1e:	cf 93       	push	r28
    4b20:	df 93       	push	r29
    4b22:	c8 2f       	mov	r28, r24
    4b24:	d6 2f       	mov	r29, r22
    4b26:	8a 01       	movw	r16, r20
    4b28:	f2 2e       	mov	r15, r18
	ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore(isSend);
    4b2a:	0e 94 66 25 	call	0x4acc	; 0x4acc <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore>
    uint8_t retLen = ringbuffer_fw_ringBufferPush(isSend, isPgm, inData, len);
    4b2e:	2f 2d       	mov	r18, r15
    4b30:	a8 01       	movw	r20, r16
    4b32:	6d 2f       	mov	r22, r29
    4b34:	8c 2f       	mov	r24, r28
    4b36:	0e 94 03 24 	call	0x4806	; 0x4806 <ringbuffer_fw_ringBufferPush>
    4b3a:	d8 2f       	mov	r29, r24
	ringbuffer_fw_freeSemaphore(isSend);
    4b3c:	8c 2f       	mov	r24, r28
    4b3e:	0e 94 f7 23 	call	0x47ee	; 0x47ee <ringbuffer_fw_freeSemaphore>
    return retLen;
}
    4b42:	8d 2f       	mov	r24, r29
    4b44:	df 91       	pop	r29
    4b46:	cf 91       	pop	r28
    4b48:	1f 91       	pop	r17
    4b4a:	0f 91       	pop	r16
    4b4c:	ff 90       	pop	r15
    4b4e:	08 95       	ret

00004b50 <serial_fw_sendNmea>:
	return (serialCtxtTxBufferLen > 0) ?  true : false;
}

static void serial_fw_sendNmea(void)
{
	uint8_t sreg = SREG;
    4b50:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4b52:	f8 94       	cli

	/* clear TRANSMIT COMPLETE */
	UCSR0A &= ~(_BV(TXC0));
    4b54:	e0 ec       	ldi	r30, 0xC0	; 192
    4b56:	f0 e0       	ldi	r31, 0x00	; 0
    4b58:	80 81       	ld	r24, Z
    4b5a:	8f 7b       	andi	r24, 0xBF	; 191
    4b5c:	80 83       	st	Z, r24

	/* initial load of USART data register, after this the ISR will handle it until the serial TX buffer is completed */
	UDR0 = serialCtxtTxBuffer[serialCtxtTxBufferIdx++];
    4b5e:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <serialCtxtTxBufferIdx>
    4b62:	81 e0       	ldi	r24, 0x01	; 1
    4b64:	8e 0f       	add	r24, r30
    4b66:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <serialCtxtTxBufferIdx>
    4b6a:	f0 e0       	ldi	r31, 0x00	; 0
    4b6c:	e7 53       	subi	r30, 0x37	; 55
    4b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b70:	80 81       	ld	r24, Z
    4b72:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	SREG = sreg;
    4b76:	9f bf       	out	0x3f, r25	; 63

	/* enable DATA REGISTER EMPTY INTERRUPT - the interrupt will arrive after initial UDSR0 loading */
	UART_CTRL |= _BV(UDRIE0);								// this will shoot an interrupt because UDR0 is ready again to be filled (UDRE0 is true)
    4b78:	e1 ec       	ldi	r30, 0xC1	; 193
    4b7a:	f0 e0       	ldi	r31, 0x00	; 0
    4b7c:	80 81       	ld	r24, Z
    4b7e:	80 62       	ori	r24, 0x20	; 32
    4b80:	80 83       	st	Z, r24
    4b82:	08 95       	ret

00004b84 <serial_fw_close>:
}

void serial_fw_close(void)
{
	// interrupt: clearing Global Interrupt Flag when interrupts are changed
	uint8_t sreg = SREG;
    4b84:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4b86:	f8 94       	cli
	UART_CTRL = UART_CTRL & ~(_BV(RXCIE0)					|			// UCSR0B: disable all serial interrupts,
    4b88:	e1 ec       	ldi	r30, 0xC1	; 193
    4b8a:	f0 e0       	ldi	r31, 0x00	; 0
    4b8c:	80 81       	ld	r24, Z
    4b8e:	87 70       	andi	r24, 0x07	; 7
    4b90:	80 83       	st	Z, r24
							  _BV(TXCIE0)					|
							  _BV(UDRIE0)					|
							  _BV(RXEN0)					|			// and TX/RX ports
							  _BV(TXEN0));
	SREG = sreg;
    4b92:	9f bf       	out	0x3f, r25	; 63
#ifdef UART_DOUBLESPEED
		UART_STATUS &= ~(_BV(UART_DOUBLE));
#endif

	// setting IO pins: pull-up off
	UART_PORT &= ~(_BV(UART_RX_PNUM));									// RX pull-up off
    4b94:	58 98       	cbi	0x0b, 0	; 11

	/* no more power is needed for this module */
	PRR |= _BV(PRUSART0);
    4b96:	e4 e6       	ldi	r30, 0x64	; 100
    4b98:	f0 e0       	ldi	r31, 0x00	; 0
    4b9a:	80 81       	ld	r24, Z
    4b9c:	82 60       	ori	r24, 0x02	; 2
    4b9e:	80 83       	st	Z, r24
    4ba0:	08 95       	ret

00004ba2 <serial_fw_serRxIsrOn>:
}

void serial_fw_serRxIsrOn(uint8_t flag)
{
	if (flag) {
    4ba2:	88 23       	and	r24, r24
    4ba4:	49 f0       	breq	.+18     	; 0x4bb8 <serial_fw_serRxIsrOn+0x16>
		// interrupt: clearing Global Interrupt Flag when interrupts are changed
		uint8_t sreg = SREG;
    4ba6:	9f b7       	in	r25, 0x3f	; 63
		cli();
    4ba8:	f8 94       	cli
		UART_CTRL |= _BV(RXCIE0);											// UCSR0B: enable interrupts for RX data received
    4baa:	e1 ec       	ldi	r30, 0xC1	; 193
    4bac:	f0 e0       	ldi	r31, 0x00	; 0
    4bae:	80 81       	ld	r24, Z
    4bb0:	80 68       	ori	r24, 0x80	; 128
    4bb2:	80 83       	st	Z, r24
		SREG = sreg;
    4bb4:	9f bf       	out	0x3f, r25	; 63
    4bb6:	08 95       	ret

	} else {
		// interrupt: clearing Global Interrupt Flag when interrupts are changed
		uint8_t sreg = SREG;
    4bb8:	9f b7       	in	r25, 0x3f	; 63
		cli();
    4bba:	f8 94       	cli
		UART_CTRL &= ~(_BV(RXCIE0));										// UCSR0B: disable interrupts for RX data received
    4bbc:	e1 ec       	ldi	r30, 0xC1	; 193
    4bbe:	f0 e0       	ldi	r31, 0x00	; 0
    4bc0:	80 81       	ld	r24, Z
    4bc2:	8f 77       	andi	r24, 0x7F	; 127
    4bc4:	80 83       	st	Z, r24
		SREG = sreg;
    4bc6:	9f bf       	out	0x3f, r25	; 63
    4bc8:	08 95       	ret

00004bca <serial_fw_setCommBaud>:
	}
}

void serial_fw_setCommBaud(uint16_t baud)
{
    4bca:	9c 01       	movw	r18, r24
	UART_BAUD_HIGH = ((UART_CALC_BAUDRATE(baud)>>8) & 0xff);
    4bcc:	bc 01       	movw	r22, r24
    4bce:	76 95       	lsr	r23
    4bd0:	67 95       	ror	r22
    4bd2:	cb 01       	movw	r24, r22
    4bd4:	a0 e0       	ldi	r26, 0x00	; 0
    4bd6:	b0 e0       	ldi	r27, 0x00	; 0
    4bd8:	bc 01       	movw	r22, r24
    4bda:	cd 01       	movw	r24, r26
    4bdc:	60 53       	subi	r22, 0x30	; 48
    4bde:	7d 4e       	sbci	r23, 0xED	; 237
    4be0:	8c 4e       	sbci	r24, 0xEC	; 236
    4be2:	9f 4f       	sbci	r25, 0xFF	; 255
    4be4:	40 e0       	ldi	r20, 0x00	; 0
    4be6:	50 e0       	ldi	r21, 0x00	; 0
    4be8:	0e 94 46 3b 	call	0x768c	; 0x768c <__udivmodsi4>
    4bec:	da 01       	movw	r26, r20
    4bee:	c9 01       	movw	r24, r18
    4bf0:	01 97       	sbiw	r24, 0x01	; 1
    4bf2:	a1 09       	sbc	r26, r1
    4bf4:	b1 09       	sbc	r27, r1
    4bf6:	89 2f       	mov	r24, r25
    4bf8:	9a 2f       	mov	r25, r26
    4bfa:	ab 2f       	mov	r26, r27
    4bfc:	bb 27       	eor	r27, r27
    4bfe:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UART_BAUD_LOW  = ( UART_CALC_BAUDRATE(baud)     & 0xff);
    4c02:	21 50       	subi	r18, 0x01	; 1
    4c04:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4c08:	08 95       	ret

00004c0a <serial_fw_init>:
}

void serial_fw_init(void)
{
	/* power up this module */
	PRR &= ~(_BV(PRUSART0));
    4c0a:	e4 e6       	ldi	r30, 0x64	; 100
    4c0c:	f0 e0       	ldi	r31, 0x00	; 0
    4c0e:	80 81       	ld	r24, Z
    4c10:	8d 7f       	andi	r24, 0xFD	; 253
    4c12:	80 83       	st	Z, r24

	// setting IO pins: pull-up on
	MCUCR     &= ~(_BV(PUD));											// ensure PUD is off --> activation of all pull-ups
    4c14:	85 b7       	in	r24, 0x35	; 53
    4c16:	8f 7e       	andi	r24, 0xEF	; 239
    4c18:	85 bf       	out	0x35, r24	; 53
	UART_PORT |=   _BV(UART_RX_PNUM);									// RX pull-up on
    4c1a:	58 9a       	sbi	0x0b, 0	; 11

	/* read GPS coefficients */
	if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_GPS_NR)) {
    4c1c:	63 e0       	ldi	r22, 0x03	; 3
    4c1e:	8f e8       	ldi	r24, 0x8F	; 143
    4c20:	93 e0       	ldi	r25, 0x03	; 3
    4c22:	0e 94 09 23 	call	0x4612	; 0x4612 <memory_fw_readEepromValidBlock>
    4c26:	88 23       	and	r24, r24
    4c28:	a1 f0       	breq	.+40     	; 0x4c52 <serial_fw_init+0x48>
		eeprom_b03_t* b03 = (eeprom_b03_t*) &mainFormatBuffer;
		serialCoef_b03_serial_baud = b03->b03_serial_baud;
    4c2a:	ef e8       	ldi	r30, 0x8F	; 143
    4c2c:	f3 e0       	ldi	r31, 0x03	; 3
    4c2e:	80 81       	ld	r24, Z
    4c30:	91 81       	ldd	r25, Z+1	; 0x01
    4c32:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <serialCoef_b03_serial_baud+0x1>
    4c36:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <serialCoef_b03_serial_baud>
		serialCoef_b03_bitsParityStopbits = b03->b03_serial_bitsParityStopbits;
    4c3a:	82 81       	ldd	r24, Z+2	; 0x02
    4c3c:	93 81       	ldd	r25, Z+3	; 0x03
    4c3e:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <serialCoef_b03_bitsParityStopbits+0x1>
    4c42:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <serialCoef_b03_bitsParityStopbits>
		serialCoef_b03_gps_comm_mode = b03->b03_gps_comm_mode;
    4c46:	84 81       	ldd	r24, Z+4	; 0x04
    4c48:	95 81       	ldd	r25, Z+5	; 0x05
    4c4a:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <serialCoef_b03_gps_comm_mode+0x1>
    4c4e:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <serialCoef_b03_gps_comm_mode>
	}

	// setting baud rate
	serial_fw_setCommBaud(serialCoef_b03_serial_baud);
    4c52:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <serialCoef_b03_serial_baud>
    4c56:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <serialCoef_b03_serial_baud+0x1>
    4c5a:	0e 94 e5 25 	call	0x4bca	; 0x4bca <serial_fw_setCommBaud>
#ifdef UART_DOUBLESPEED
	UART_STATUS = _BV(UART_DOUBLE);										// UCSR0A: U2X0
#endif

	// enabling the Transmitter and the Receiver
	UART_CTRL  =  _BV(RXEN0) 	|										// RXEN0=1,
    4c5e:	88 e1       	ldi	r24, 0x18	; 24
    4c60:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
				  _BV(TXEN0);											// TXEN0=1

	// setting frame format
	UART_CTRL2 = (0b00<<UMSEL00) 															|	// UCSR0C: asynchronous USART,
				 (( getCommParity(serialCoef_b03_bitsParityStopbits)		& 0b11)<<UPM00)	|	// parity 0=off, 2=even, 3=odd, 1=(do not use)
    4c64:	20 91 20 05 	lds	r18, 0x0520	; 0x800520 <serialCoef_b03_bitsParityStopbits>
    4c68:	30 91 21 05 	lds	r19, 0x0521	; 0x800521 <serialCoef_b03_bitsParityStopbits+0x1>
	// enabling the Transmitter and the Receiver
	UART_CTRL  =  _BV(RXEN0) 	|										// RXEN0=1,
				  _BV(TXEN0);											// TXEN0=1

	// setting frame format
	UART_CTRL2 = (0b00<<UMSEL00) 															|	// UCSR0C: asynchronous USART,
    4c6c:	83 e0       	ldi	r24, 0x03	; 3
    4c6e:	82 0f       	add	r24, r18
    4c70:	83 70       	andi	r24, 0x03	; 3
    4c72:	88 0f       	add	r24, r24
    4c74:	93 2f       	mov	r25, r19
    4c76:	90 73       	andi	r25, 0x30	; 48
    4c78:	89 2b       	or	r24, r25
	return (val & DEFAULT_PARITY_N0_E2_O3_MASK) >> DEFAULT_PARITY_N0_E2_O3_BITPOS;
}

static uint16_t getCommStopBits(uint16_t val)
{
	return (val & DEFAULT_STOPBITS_MASK) >> DEFAULT_STOPBITS_BITPOS;
    4c7a:	22 27       	eor	r18, r18
    4c7c:	33 70       	andi	r19, 0x03	; 3
	// enabling the Transmitter and the Receiver
	UART_CTRL  =  _BV(RXEN0) 	|										// RXEN0=1,
				  _BV(TXEN0);											// TXEN0=1

	// setting frame format
	UART_CTRL2 = (0b00<<UMSEL00) 															|	// UCSR0C: asynchronous USART,
    4c7e:	9f ef       	ldi	r25, 0xFF	; 255
    4c80:	93 0f       	add	r25, r19
    4c82:	91 70       	andi	r25, 0x01	; 1
    4c84:	99 0f       	add	r25, r25
    4c86:	99 0f       	add	r25, r25
    4c88:	99 0f       	add	r25, r25
    4c8a:	89 2b       	or	r24, r25
    4c8c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				 (( getCommParity(serialCoef_b03_bitsParityStopbits)		& 0b11)<<UPM00)	|	// parity 0=off, 2=even, 3=odd, 1=(do not use)
				 (((getCommStopBits(serialCoef_b03_bitsParityStopbits) - 1)	&  0b1)<<USBS0) |	// stop bits == 2
				 (((getCommDataBits(serialCoef_b03_bitsParityStopbits) - 5)	& 0b11)<<UCSZ00);	// bits 5..8

	// this is a dummy operation to clear the RX ready bit
	serialCtxtTxBufferIdx = UDR0;
    4c90:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	serialCtxtTxBufferIdx = 0;
    4c94:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <serialCtxtTxBufferIdx>

	serial_fw_serRxIsrOn(true);
    4c98:	81 e0       	ldi	r24, 0x01	; 1
    4c9a:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <serial_fw_serRxIsrOn>
    4c9e:	08 95       	ret

00004ca0 <serial_fw_isTxRunning>:
	UART_BAUD_LOW  = ( UART_CALC_BAUDRATE(baud)     & 0xff);
}

uint8_t serial_fw_isTxRunning(void)
{
	return (serialCtxtTxBufferLen > 0) ?  true : false;
    4ca0:	81 e0       	ldi	r24, 0x01	; 1
    4ca2:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4ca6:	91 11       	cpse	r25, r1
    4ca8:	01 c0       	rjmp	.+2      	; 0x4cac <serial_fw_isTxRunning+0xc>
    4caa:	80 e0       	ldi	r24, 0x00	; 0
}
    4cac:	08 95       	ret

00004cae <serial_fw_copyAndSendNmea>:
	/* enable DATA REGISTER EMPTY INTERRUPT - the interrupt will arrive after initial UDSR0 loading */
	UART_CTRL |= _BV(UDRIE0);								// this will shoot an interrupt because UDR0 is ready again to be filled (UDRE0 is true)
}

void serial_fw_copyAndSendNmea(uint8_t isPgm, const uchar inData[], uint8_t len)
{
    4cae:	cf 93       	push	r28
	if (len) {
    4cb0:	44 23       	and	r20, r20
    4cb2:	71 f0       	breq	.+28     	; 0x4cd0 <serial_fw_copyAndSendNmea+0x22>
    4cb4:	c4 2f       	mov	r28, r20
    4cb6:	ab 01       	movw	r20, r22
		memory_fw_copyBuffer(isPgm, serialCtxtTxBuffer, inData, len);
    4cb8:	2c 2f       	mov	r18, r28
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	69 ec       	ldi	r22, 0xC9	; 201
    4cbe:	71 e0       	ldi	r23, 0x01	; 1
    4cc0:	0e 94 69 22 	call	0x44d2	; 0x44d2 <memory_fw_copyBuffer>
		serialCtxtTxBufferIdx = 0;
    4cc4:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <serialCtxtTxBufferIdx>
		serialCtxtTxBufferLen = len;
    4cc8:	c0 93 1c 05 	sts	0x051C, r28	; 0x80051c <serialCtxtTxBufferLen>
		serial_fw_sendNmea();
    4ccc:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <serial_fw_sendNmea>
	}
}
    4cd0:	cf 91       	pop	r28
    4cd2:	08 95       	ret

00004cd4 <serial_fw_pullAndSendNmea_havingSemaphore>:

void serial_fw_pullAndSendNmea_havingSemaphore(uint8_t isSend)
{
    4cd4:	cf 93       	push	r28
    4cd6:	c8 2f       	mov	r28, r24
	/* check if serial TX buffer is clear and the USART0 is ready for a new character to be sent */
	uint8_t sreg = SREG;
    4cd8:	8f b7       	in	r24, 0x3f	; 63
	cli();
    4cda:	f8 94       	cli
	uint8_t isTxRdy = UCSR0A & _BV(UDRE0);
    4cdc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	SREG = sreg;
    4ce0:	8f bf       	out	0x3f, r24	; 63

	if (!serialCtxtTxBufferLen && isTxRdy) {
    4ce2:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4ce6:	81 11       	cpse	r24, r1
    4ce8:	38 c0       	rjmp	.+112    	; 0x4d5a <serial_fw_pullAndSendNmea_havingSemaphore+0x86>
    4cea:	95 ff       	sbrs	r25, 5
    4cec:	36 c0       	rjmp	.+108    	; 0x4d5a <serial_fw_pullAndSendNmea_havingSemaphore+0x86>
		/* get message and free semaphore */
		serialCtxtTxBufferLen = ringbuffer_fw_ringBufferPull(isSend, serialCtxtTxBuffer, SERIALCTXT_TX_BUFFER_SIZE - 3);
    4cee:	4d e3       	ldi	r20, 0x3D	; 61
    4cf0:	69 ec       	ldi	r22, 0xC9	; 201
    4cf2:	71 e0       	ldi	r23, 0x01	; 1
    4cf4:	8c 2f       	mov	r24, r28
    4cf6:	0e 94 af 24 	call	0x495e	; 0x495e <ringbuffer_fw_ringBufferPull>
    4cfa:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <serialCtxtTxBufferLen>
		ringbuffer_fw_freeSemaphore(isSend);
    4cfe:	8c 2f       	mov	r24, r28
    4d00:	0e 94 f7 23 	call	0x47ee	; 0x47ee <ringbuffer_fw_freeSemaphore>

		/* drop serial TX data if transportation is not activated */
		if (!(main_bf.mainIsSerComm)) {
    4d04:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4d08:	83 ff       	sbrs	r24, 3
			serialCtxtTxBufferLen = 0;
    4d0a:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <serialCtxtTxBufferLen>
		}

		serialCtxtTxBufferIdx = 0;
    4d0e:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <serialCtxtTxBufferIdx>
		if (serialCtxtTxBufferLen) {
    4d12:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4d16:	88 23       	and	r24, r24
    4d18:	19 f1       	breq	.+70     	; 0x4d60 <serial_fw_pullAndSendNmea_havingSemaphore+0x8c>
			if (serialCtxtTxBuffer[--serialCtxtTxBufferLen]) {  // chop off trailing NULL char
    4d1a:	ef ef       	ldi	r30, 0xFF	; 255
    4d1c:	e8 0f       	add	r30, r24
    4d1e:	e0 93 1c 05 	sts	0x051C, r30	; 0x80051c <serialCtxtTxBufferLen>
    4d22:	f0 e0       	ldi	r31, 0x00	; 0
    4d24:	e7 53       	subi	r30, 0x37	; 55
    4d26:	fe 4f       	sbci	r31, 0xFE	; 254
    4d28:	90 81       	ld	r25, Z
    4d2a:	91 11       	cpse	r25, r1
				serialCtxtTxBufferLen++;						// restore length, if not NULL
    4d2c:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <serialCtxtTxBufferLen>
			}
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\r';	// obligatory NMEA message ends with CR LF
    4d30:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4d34:	ae 2f       	mov	r26, r30
    4d36:	b0 e0       	ldi	r27, 0x00	; 0
    4d38:	a7 53       	subi	r26, 0x37	; 55
    4d3a:	be 4f       	sbci	r27, 0xFE	; 254
    4d3c:	8d e0       	ldi	r24, 0x0D	; 13
    4d3e:	8c 93       	st	X, r24
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\n';
    4d40:	82 e0       	ldi	r24, 0x02	; 2
    4d42:	8e 0f       	add	r24, r30
    4d44:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <serialCtxtTxBufferLen>
		serialCtxtTxBufferIdx = 0;
		if (serialCtxtTxBufferLen) {
			if (serialCtxtTxBuffer[--serialCtxtTxBufferLen]) {  // chop off trailing NULL char
				serialCtxtTxBufferLen++;						// restore length, if not NULL
			}
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\r';	// obligatory NMEA message ends with CR LF
    4d48:	ef 5f       	subi	r30, 0xFF	; 255
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\n';
    4d4a:	f0 e0       	ldi	r31, 0x00	; 0
    4d4c:	e7 53       	subi	r30, 0x37	; 55
    4d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d50:	8a e0       	ldi	r24, 0x0A	; 10
    4d52:	80 83       	st	Z, r24

			serial_fw_sendNmea();
    4d54:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <serial_fw_sendNmea>
    4d58:	03 c0       	rjmp	.+6      	; 0x4d60 <serial_fw_pullAndSendNmea_havingSemaphore+0x8c>
		}

	} else {  // now we are not ready yet, call us later again
		ringbuffer_fw_freeSemaphore(isSend);
    4d5a:	8c 2f       	mov	r24, r28
    4d5c:	0e 94 f7 23 	call	0x47ee	; 0x47ee <ringbuffer_fw_freeSemaphore>
	}
}
    4d60:	cf 91       	pop	r28
    4d62:	08 95       	ret

00004d64 <__vector_18>:
 *
 * = 35 clocks --> 1.75 µs until sei() is done
 */
//void serial_ISR_RXC0(void) - __vector_18
ISR(USART_RX_vect, ISR_BLOCK)
{
    4d64:	1f 92       	push	r1
    4d66:	0f 92       	push	r0
    4d68:	0f b6       	in	r0, 0x3f	; 63
    4d6a:	0f 92       	push	r0
    4d6c:	11 24       	eor	r1, r1
    4d6e:	2f 93       	push	r18
    4d70:	3f 93       	push	r19
    4d72:	4f 93       	push	r20
    4d74:	5f 93       	push	r21
    4d76:	6f 93       	push	r22
    4d78:	7f 93       	push	r23
    4d7a:	8f 93       	push	r24
    4d7c:	9f 93       	push	r25
    4d7e:	af 93       	push	r26
    4d80:	bf 93       	push	r27
    4d82:	cf 93       	push	r28
    4d84:	df 93       	push	r29
    4d86:	ef 93       	push	r30
    4d88:	ff 93       	push	r31
	/* read the data byte received */
	uint8_t rxData = UDR0;
    4d8a:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	/* since here we can allow global interrupts again */
	sei();
    4d8e:	78 94       	sei

	if (!serialCtxtBufferState && (serialCtxtRxBufferLen < (SERIALCTXT_RX_BUFFER_SIZE - 3))) {
    4d90:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <serialCtxtBufferState>
    4d94:	81 11       	cpse	r24, r1
    4d96:	51 c0       	rjmp	.+162    	; 0x4e3a <__vector_18+0xd6>
    4d98:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <serialCtxtRxBufferLen>
    4d9c:	85 37       	cpi	r24, 0x75	; 117
    4d9e:	08 f0       	brcs	.+2      	; 0x4da2 <__vector_18+0x3e>
    4da0:	4c c0       	rjmp	.+152    	; 0x4e3a <__vector_18+0xd6>
		serialCtxtBufferState = SERIAL_CTXT_BUFFER_STATE_BLOCK;
    4da2:	81 e0       	ldi	r24, 0x01	; 1
    4da4:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <serialCtxtBufferState>

		/* if data is at the hook, get it first */
		if (serialCtxtNmeaRxHookBufIdx) {
    4da8:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <serialCtxtNmeaRxHookBufIdx>
    4dac:	88 23       	and	r24, r24
    4dae:	f9 f0       	breq	.+62     	; 0x4dee <__vector_18+0x8a>
			uint8_t sreg = SREG;
    4db0:	5f b7       	in	r21, 0x3f	; 63
			cli();
    4db2:	f8 94       	cli

			for (int idx = 0; idx < serialCtxtNmeaRxHookBufIdx; ++idx) {
    4db4:	60 91 19 05 	lds	r22, 0x0519	; 0x800519 <serialCtxtNmeaRxHookBufIdx>
    4db8:	70 e0       	ldi	r23, 0x00	; 0
    4dba:	16 16       	cp	r1, r22
    4dbc:	17 06       	cpc	r1, r23
    4dbe:	a4 f4       	brge	.+40     	; 0x4de8 <__vector_18+0x84>
    4dc0:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <serialCtxtRxBufferLen>
    4dc4:	a9 e0       	ldi	r26, 0x09	; 9
    4dc6:	b2 e0       	ldi	r27, 0x02	; 2
    4dc8:	80 e0       	ldi	r24, 0x00	; 0
    4dca:	90 e0       	ldi	r25, 0x00	; 0
				serialCtxtRxBuffer[serialCtxtRxBufferLen++] = serialCtxtNmeaRxHookBuf[idx];
    4dcc:	21 e0       	ldi	r18, 0x01	; 1
    4dce:	2e 0f       	add	r18, r30
    4dd0:	3d 91       	ld	r19, X+
    4dd2:	f0 e0       	ldi	r31, 0x00	; 0
    4dd4:	ef 5e       	subi	r30, 0xEF	; 239
    4dd6:	fd 4f       	sbci	r31, 0xFD	; 253
    4dd8:	30 83       	st	Z, r19
		/* if data is at the hook, get it first */
		if (serialCtxtNmeaRxHookBufIdx) {
			uint8_t sreg = SREG;
			cli();

			for (int idx = 0; idx < serialCtxtNmeaRxHookBufIdx; ++idx) {
    4dda:	01 96       	adiw	r24, 0x01	; 1
				serialCtxtRxBuffer[serialCtxtRxBufferLen++] = serialCtxtNmeaRxHookBuf[idx];
    4ddc:	e2 2f       	mov	r30, r18
		/* if data is at the hook, get it first */
		if (serialCtxtNmeaRxHookBufIdx) {
			uint8_t sreg = SREG;
			cli();

			for (int idx = 0; idx < serialCtxtNmeaRxHookBufIdx; ++idx) {
    4dde:	86 17       	cp	r24, r22
    4de0:	97 07       	cpc	r25, r23
    4de2:	a4 f3       	brlt	.-24     	; 0x4dcc <__vector_18+0x68>
    4de4:	20 93 1d 05 	sts	0x051D, r18	; 0x80051d <serialCtxtRxBufferLen>
				serialCtxtRxBuffer[serialCtxtRxBufferLen++] = serialCtxtNmeaRxHookBuf[idx];
			}

			/* hook is processed and cleared */
			serialCtxtNmeaRxHookBufIdx = 0;
    4de8:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <serialCtxtNmeaRxHookBufIdx>

			SREG = sreg;
    4dec:	5f bf       	out	0x3f, r21	; 63
		}

		/* append data to the buffer */
		serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    4dee:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <serialCtxtRxBufferLen>
    4df2:	a1 e0       	ldi	r26, 0x01	; 1
    4df4:	ae 0f       	add	r26, r30
    4df6:	a0 93 1d 05 	sts	0x051D, r26	; 0x80051d <serialCtxtRxBufferLen>
    4dfa:	ce 2f       	mov	r28, r30
    4dfc:	d0 e0       	ldi	r29, 0x00	; 0
    4dfe:	cf 5e       	subi	r28, 0xEF	; 239
    4e00:	dd 4f       	sbci	r29, 0xFD	; 253
    4e02:	48 83       	st	Y, r20

		if (serialCtxtRxBufferLen >= (SERIALCTXT_RX_BUFFER_SIZE - 3)) {
    4e04:	a5 37       	cpi	r26, 0x75	; 117
    4e06:	80 f0       	brcs	.+32     	; 0x4e28 <__vector_18+0xc4>
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = '\r';
    4e08:	b0 e0       	ldi	r27, 0x00	; 0
    4e0a:	af 5e       	subi	r26, 0xEF	; 239
    4e0c:	bd 4f       	sbci	r27, 0xFD	; 253
    4e0e:	8d e0       	ldi	r24, 0x0D	; 13
    4e10:	8c 93       	st	X, r24
			rxData = '\n';
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    4e12:	83 e0       	ldi	r24, 0x03	; 3
    4e14:	8e 0f       	add	r24, r30
    4e16:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <serialCtxtRxBufferLen>

		/* append data to the buffer */
		serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;

		if (serialCtxtRxBufferLen >= (SERIALCTXT_RX_BUFFER_SIZE - 3)) {
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = '\r';
    4e1a:	ee 5f       	subi	r30, 0xFE	; 254
			rxData = '\n';
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    4e1c:	f0 e0       	ldi	r31, 0x00	; 0
    4e1e:	ef 5e       	subi	r30, 0xEF	; 239
    4e20:	fd 4f       	sbci	r31, 0xFD	; 253
    4e22:	8a e0       	ldi	r24, 0x0A	; 10
    4e24:	80 83       	st	Z, r24
    4e26:	02 c0       	rjmp	.+4      	; 0x4e2c <__vector_18+0xc8>
		}

		/* if the end of a NMEA sentence is detected, send this serial RX buffer to the receive (IN) ring buffer */
		if (rxData == '\n') {  // a NMEA sentence stops with:  <sentence...*checksum\r\n>
    4e28:	4a 30       	cpi	r20, 0x0A	; 10
    4e2a:	21 f4       	brne	.+8      	; 0x4e34 <__vector_18+0xd0>
			/* mark this job to be done in the main context */
			serialCtxtBufferState = SERIAL_CTXT_BUFFER_STATE_SEND;
    4e2c:	82 e0       	ldi	r24, 0x02	; 2
    4e2e:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <serialCtxtBufferState>
    4e32:	14 c0       	rjmp	.+40     	; 0x4e5c <__vector_18+0xf8>

		} else {
			/* append more data */
			serialCtxtBufferState = 0;
    4e34:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <serialCtxtBufferState>
    4e38:	11 c0       	rjmp	.+34     	; 0x4e5c <__vector_18+0xf8>
		}
	} else if (serialCtxtNmeaRxHookBufIdx < SERIALCTXT_NMEA_RX_HOOK_SIZE) {
    4e3a:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <serialCtxtNmeaRxHookBufIdx>
    4e3e:	88 30       	cpi	r24, 0x08	; 8
    4e40:	68 f4       	brcc	.+26     	; 0x4e5c <__vector_18+0xf8>
		uint8_t sreg = SREG;
    4e42:	8f b7       	in	r24, 0x3f	; 63
		cli();
    4e44:	f8 94       	cli
		serialCtxtNmeaRxHookBuf[serialCtxtNmeaRxHookBufIdx++] = rxData;
    4e46:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <serialCtxtNmeaRxHookBufIdx>
    4e4a:	91 e0       	ldi	r25, 0x01	; 1
    4e4c:	9e 0f       	add	r25, r30
    4e4e:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <serialCtxtNmeaRxHookBufIdx>
    4e52:	f0 e0       	ldi	r31, 0x00	; 0
    4e54:	e7 5f       	subi	r30, 0xF7	; 247
    4e56:	fd 4f       	sbci	r31, 0xFD	; 253
    4e58:	40 83       	st	Z, r20
		SREG = sreg;
    4e5a:	8f bf       	out	0x3f, r24	; 63
	}
}
    4e5c:	ff 91       	pop	r31
    4e5e:	ef 91       	pop	r30
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	bf 91       	pop	r27
    4e66:	af 91       	pop	r26
    4e68:	9f 91       	pop	r25
    4e6a:	8f 91       	pop	r24
    4e6c:	7f 91       	pop	r23
    4e6e:	6f 91       	pop	r22
    4e70:	5f 91       	pop	r21
    4e72:	4f 91       	pop	r20
    4e74:	3f 91       	pop	r19
    4e76:	2f 91       	pop	r18
    4e78:	0f 90       	pop	r0
    4e7a:	0f be       	out	0x3f, r0	; 63
    4e7c:	0f 90       	pop	r0
    4e7e:	1f 90       	pop	r1
    4e80:	18 95       	reti

00004e82 <__vector_19>:
 *
 * = 22 clocks --> 1.10 µs until sei() is done
 */
//void serial_ISR_UDRE0(void) - __vector_19
ISR(USART_UDRE_vect, ISR_BLOCK)
{
    4e82:	1f 92       	push	r1
    4e84:	0f 92       	push	r0
    4e86:	0f b6       	in	r0, 0x3f	; 63
    4e88:	0f 92       	push	r0
    4e8a:	11 24       	eor	r1, r1
    4e8c:	8f 93       	push	r24
    4e8e:	9f 93       	push	r25
    4e90:	ef 93       	push	r30
    4e92:	ff 93       	push	r31
	UCSR0B &= ~(_BV(UDRIE0));								// disable interrupt for register empty
    4e94:	e1 ec       	ldi	r30, 0xC1	; 193
    4e96:	f0 e0       	ldi	r31, 0x00	; 0
    4e98:	80 81       	ld	r24, Z
    4e9a:	8f 7d       	andi	r24, 0xDF	; 223
    4e9c:	80 83       	st	Z, r24
	sei();
    4e9e:	78 94       	sei

	/* first look if the serial buffer is filled */
	if (serialCtxtTxBufferIdx < serialCtxtTxBufferLen) {
    4ea0:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <serialCtxtTxBufferIdx>
    4ea4:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4ea8:	98 17       	cp	r25, r24
    4eaa:	c8 f4       	brcc	.+50     	; 0x4ede <__vector_19+0x5c>
		cli();
    4eac:	f8 94       	cli
		UDR0 = serialCtxtTxBuffer[serialCtxtTxBufferIdx++];	// UDRE0 becomes cleared
    4eae:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <serialCtxtTxBufferIdx>
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	8e 0f       	add	r24, r30
    4eb6:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <serialCtxtTxBufferIdx>
    4eba:	f0 e0       	ldi	r31, 0x00	; 0
    4ebc:	e7 53       	subi	r30, 0x37	; 55
    4ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    4ec0:	80 81       	ld	r24, Z
    4ec2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		UCSR0B |= _BV(UDRIE0);								// enables interrupt for register empty
    4ec6:	e1 ec       	ldi	r30, 0xC1	; 193
    4ec8:	f0 e0       	ldi	r31, 0x00	; 0
    4eca:	80 81       	ld	r24, Z
    4ecc:	80 62       	ori	r24, 0x20	; 32
    4ece:	80 83       	st	Z, r24
		sei();
    4ed0:	78 94       	sei
	}

	/* then check if job is now done */
	if (serialCtxtTxBufferIdx >= serialCtxtTxBufferLen) {
    4ed2:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <serialCtxtTxBufferIdx>
    4ed6:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4eda:	98 17       	cp	r25, r24
    4edc:	48 f0       	brcs	.+18     	; 0x4ef0 <__vector_19+0x6e>
		/* job is done - turn off data register empty interrupt */
		cli();
    4ede:	f8 94       	cli
		UCSR0B &= ~(_BV(UDRIE0));							// disable interrupt for register empty
    4ee0:	e1 ec       	ldi	r30, 0xC1	; 193
    4ee2:	f0 e0       	ldi	r31, 0x00	; 0
    4ee4:	80 81       	ld	r24, Z
    4ee6:	8f 7d       	andi	r24, 0xDF	; 223
    4ee8:	80 83       	st	Z, r24
		sei();
    4eea:	78 94       	sei

		/* mark buffer as free */
		serialCtxtTxBufferLen = 0;
    4eec:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <serialCtxtTxBufferLen>
	}
}
    4ef0:	ff 91       	pop	r31
    4ef2:	ef 91       	pop	r30
    4ef4:	9f 91       	pop	r25
    4ef6:	8f 91       	pop	r24
    4ef8:	0f 90       	pop	r0
    4efa:	0f be       	out	0x3f, r0	; 63
    4efc:	0f 90       	pop	r0
    4efe:	1f 90       	pop	r1
    4f00:	18 95       	reti

00004f02 <__vector_20>:

//void serial_ISR_TXC0(void) - __vector_20
ISR(USART_TX_vect, ISR_NOBLOCK)
{
    4f02:	78 94       	sei
    4f04:	1f 92       	push	r1
    4f06:	0f 92       	push	r0
    4f08:	0f b6       	in	r0, 0x3f	; 63
    4f0a:	0f 92       	push	r0
    4f0c:	11 24       	eor	r1, r1
	// not used yet
}
    4f0e:	0f 90       	pop	r0
    4f10:	0f be       	out	0x3f, r0	; 63
    4f12:	0f 90       	pop	r0
    4f14:	1f 90       	pop	r1
    4f16:	18 95       	reti

00004f18 <twi_fw_init>:


void twi_fw_init(void)
{
	/* power up this module */
	PRR &= ~(_BV(PRTWI));
    4f18:	e4 e6       	ldi	r30, 0x64	; 100
    4f1a:	f0 e0       	ldi	r31, 0x00	; 0
    4f1c:	80 81       	ld	r24, Z
    4f1e:	8f 77       	andi	r24, 0x7F	; 127
    4f20:	80 83       	st	Z, r24

	uint8_t sreg = SREG;
    4f22:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4f24:	f8 94       	cli

	// setting IO pins: pull-up on
	TWI_DDR   &= ~((_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM)));	// define SDA and SCL pins as input, as long the TWI alternate port function has not taken over
    4f26:	87 b1       	in	r24, 0x07	; 7
    4f28:	8f 7c       	andi	r24, 0xCF	; 207
    4f2a:	87 b9       	out	0x07, r24	; 7
	TWI_PORT  |=   (_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM));		// SDA and SCL pull-up
    4f2c:	88 b1       	in	r24, 0x08	; 8
    4f2e:	80 63       	ori	r24, 0x30	; 48
    4f30:	88 b9       	out	0x08, r24	; 8

	// SCL frequency: using 400 kHz for SCL @20 MHz clock
	TWSR = 0; 							 						// prescaler = 1
    4f32:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 17;													// gives 400 kHz @20 MHz clock
    4f36:	81 e1       	ldi	r24, 0x11	; 17
    4f38:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// TWI interface enabled and interrupt cleared
	TWCR = (_BV(TWINT) | _BV(TWEN));
    4f3c:	84 e8       	ldi	r24, 0x84	; 132
    4f3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	SREG = sreg;
    4f42:	9f bf       	out	0x3f, r25	; 63
    4f44:	08 95       	ret

00004f46 <twi_fw_close>:
}

void twi_fw_close(void)
{
	// TWI interface disabled
	TWCR = 0;
    4f46:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// setting IO pins: pull-up off
	TWI_PORT  |= ~(_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM));	// SDA and SCL pull-up off
    4f4a:	88 b1       	in	r24, 0x08	; 8
    4f4c:	8f 6c       	ori	r24, 0xCF	; 207
    4f4e:	88 b9       	out	0x08, r24	; 8

	/* no more power is needed for this module */
	PRR |= _BV(PRTWI);
    4f50:	e4 e6       	ldi	r30, 0x64	; 100
    4f52:	f0 e0       	ldi	r31, 0x00	; 0
    4f54:	80 81       	ld	r24, Z
    4f56:	80 68       	ori	r24, 0x80	; 128
    4f58:	80 83       	st	Z, r24
    4f5a:	08 95       	ret

00004f5c <twi_fw_waitUntilDone>:
}


void twi_fw_waitUntilDone(void) {
    4f5c:	cf 93       	push	r28
    4f5e:	df 93       	push	r29
	while (twiState.doStart || twiState.isProcessing) {
    4f60:	c0 e4       	ldi	r28, 0x40	; 64
    4f62:	d1 e0       	ldi	r29, 0x01	; 1
    4f64:	05 c0       	rjmp	.+10     	; 0x4f70 <twi_fw_waitUntilDone+0x14>
		wdt_reset();
    4f66:	a8 95       	wdr
		if (usbIsUp) {
    4f68:	99 23       	and	r25, r25
    4f6a:	21 f0       	breq	.+8      	; 0x4f74 <twi_fw_waitUntilDone+0x18>
			usbPoll();
    4f6c:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <usbPoll>


void twi_fw_waitUntilDone(void) {
	while (twiState.doStart || twiState.isProcessing) {
		wdt_reset();
		if (usbIsUp) {
    4f70:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <usbIsUp>
	PRR |= _BV(PRTWI);
}


void twi_fw_waitUntilDone(void) {
	while (twiState.doStart || twiState.isProcessing) {
    4f74:	88 81       	ld	r24, Y
    4f76:	80 fd       	sbrc	r24, 0
    4f78:	f6 cf       	rjmp	.-20     	; 0x4f66 <twi_fw_waitUntilDone+0xa>
    4f7a:	88 81       	ld	r24, Y
    4f7c:	81 fd       	sbrc	r24, 1
    4f7e:	f3 cf       	rjmp	.-26     	; 0x4f66 <twi_fw_waitUntilDone+0xa>
		wdt_reset();
		if (usbIsUp) {
			usbPoll();
		}
	}
}
    4f80:	df 91       	pop	r29
    4f82:	cf 91       	pop	r28
    4f84:	08 95       	ret

00004f86 <isr_sendStart>:
	return twiSeq2Data[0];
}

void isr_sendStart(uint8_t sendSignal, uint8_t isRepeatedStart)
{
	uint8_t sreg = SREG;
    4f86:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4f88:	f8 94       	cli

	if (((!twiState.isProcessing && twiState.doStart) ||
    4f8a:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <twiState+0x1>
    4f8e:	21 fd       	sbrc	r18, 1
    4f90:	04 c0       	rjmp	.+8      	; 0x4f9a <isr_sendStart+0x14>
    4f92:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <twiState+0x1>
    4f96:	20 fd       	sbrc	r18, 0
    4f98:	06 c0       	rjmp	.+12     	; 0x4fa6 <isr_sendStart+0x20>
		 ( twiState.isProcessing && isRepeatedStart)) &&
    4f9a:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <twiState+0x1>
void isr_sendStart(uint8_t sendSignal, uint8_t isRepeatedStart)
{
	uint8_t sreg = SREG;
	cli();

	if (((!twiState.isProcessing && twiState.doStart) ||
    4f9e:	21 ff       	sbrs	r18, 1
    4fa0:	24 c0       	rjmp	.+72     	; 0x4fea <isr_sendStart+0x64>
		 ( twiState.isProcessing && isRepeatedStart)) &&
    4fa2:	66 23       	and	r22, r22
    4fa4:	11 f1       	breq	.+68     	; 0x4fea <isr_sendStart+0x64>
    4fa6:	20 91 11 05 	lds	r18, 0x0511	; 0x800511 <twiSeq2DataCnt>
    4faa:	22 23       	and	r18, r18
    4fac:	f1 f0       	breq	.+60     	; 0x4fea <isr_sendStart+0x64>
		twiSeq2DataCnt) {

		twiState.isProcessing	= true;
    4fae:	e0 e4       	ldi	r30, 0x40	; 64
    4fb0:	f1 e0       	ldi	r31, 0x01	; 1
    4fb2:	20 81       	ld	r18, Z
    4fb4:	22 60       	ori	r18, 0x02	; 2
    4fb6:	20 83       	st	Z, r18
		twiState.doStart		= false;
    4fb8:	20 81       	ld	r18, Z
    4fba:	2e 7f       	andi	r18, 0xFE	; 254
    4fbc:	20 83       	st	Z, r18
		twiState.errStart		= false;
    4fbe:	20 81       	ld	r18, Z
    4fc0:	27 7f       	andi	r18, 0xF7	; 247
    4fc2:	20 83       	st	Z, r18
		twiState.adrAck			= false;
    4fc4:	20 81       	ld	r18, Z
    4fc6:	2f 7d       	andi	r18, 0xDF	; 223
    4fc8:	20 83       	st	Z, r18
		twiState.adrAckValid	= false;
    4fca:	20 81       	ld	r18, Z
    4fcc:	2f 7e       	andi	r18, 0xEF	; 239
    4fce:	20 83       	st	Z, r18
		twiState.dataAck		= false;
    4fd0:	20 81       	ld	r18, Z
    4fd2:	2f 77       	andi	r18, 0x7F	; 127
    4fd4:	20 83       	st	Z, r18
		twiState.dataAckValid	= false;
    4fd6:	20 81       	ld	r18, Z
    4fd8:	2f 7b       	andi	r18, 0xBF	; 191
    4fda:	20 83       	st	Z, r18
		twiSeq2DataIdx			= 0;
    4fdc:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <twiSeq2DataIdx>

		if (sendSignal) {
    4fe0:	88 23       	and	r24, r24
    4fe2:	19 f0       	breq	.+6      	; 0x4fea <isr_sendStart+0x64>
			/* send START or REPEATED START */
			TWCR = (_BV(TWINT) | _BV(TWSTA) | _BV(TWEN) | _BV(TWIE));	// start-TWI/rise clock, send START, TWI enabled, TWINT-Interrupt enabled
    4fe4:	85 ea       	ldi	r24, 0xA5	; 165
    4fe6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		}
	}

	SREG = sreg;
    4fea:	9f bf       	out	0x3f, r25	; 63
    4fec:	08 95       	ret

00004fee <twi_fw_sendCmdSendData1>:
		}
	}
}

void twi_fw_sendCmdSendData1(uint8_t addr, uint8_t cmd, uint8_t data1)
{
    4fee:	1f 93       	push	r17
    4ff0:	cf 93       	push	r28
    4ff2:	df 93       	push	r29
    4ff4:	18 2f       	mov	r17, r24
    4ff6:	d6 2f       	mov	r29, r22
    4ff8:	c4 2f       	mov	r28, r20
	uint8_t sreg;

	twi_fw_waitUntilDone();
    4ffa:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <twi_fw_waitUntilDone>

	sreg = SREG;
    4ffe:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5000:	f8 94       	cli
	twiSeq1Adr = addr;
    5002:	10 93 12 05 	sts	0x0512, r17	; 0x800512 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    5006:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    500a:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	8e 0f       	add	r24, r30
    5012:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    5016:	f0 e0       	ldi	r31, 0x00	; 0
    5018:	e1 5d       	subi	r30, 0xD1	; 209
    501a:	fe 4f       	sbci	r31, 0xFE	; 254
    501c:	d0 83       	st	Z, r29
	twiState.isRepeatedStart = false;
    501e:	a0 e4       	ldi	r26, 0x40	; 64
    5020:	b1 e0       	ldi	r27, 0x01	; 1
    5022:	8c 91       	ld	r24, X
    5024:	8b 7f       	andi	r24, 0xFB	; 251
    5026:	8c 93       	st	X, r24
	twiSeq2Data[twiSeq2DataCnt++] = data1;
    5028:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    502c:	81 e0       	ldi	r24, 0x01	; 1
    502e:	8e 0f       	add	r24, r30
    5030:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    5034:	f0 e0       	ldi	r31, 0x00	; 0
    5036:	e1 5d       	subi	r30, 0xD1	; 209
    5038:	fe 4f       	sbci	r31, 0xFE	; 254
    503a:	c0 83       	st	Z, r28
	twiState.doStart = true;
    503c:	8c 91       	ld	r24, X
    503e:	81 60       	ori	r24, 0x01	; 1
    5040:	8c 93       	st	X, r24
	SREG = sreg;
    5042:	9f bf       	out	0x3f, r25	; 63

	isr_sendStart(true, false);
    5044:	60 e0       	ldi	r22, 0x00	; 0
    5046:	81 e0       	ldi	r24, 0x01	; 1
    5048:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <isr_sendStart>
}
    504c:	df 91       	pop	r29
    504e:	cf 91       	pop	r28
    5050:	1f 91       	pop	r17
    5052:	08 95       	ret

00005054 <twi_fw_sendCmdSendData1SendData2>:

void twi_fw_sendCmdSendData1SendData2(uint8_t addr, uint8_t cmd, uint8_t data1, uint8_t data2)
{
    5054:	0f 93       	push	r16
    5056:	1f 93       	push	r17
    5058:	cf 93       	push	r28
    505a:	df 93       	push	r29
    505c:	08 2f       	mov	r16, r24
    505e:	16 2f       	mov	r17, r22
    5060:	d4 2f       	mov	r29, r20
    5062:	c2 2f       	mov	r28, r18
	uint8_t sreg;

	twi_fw_waitUntilDone();
    5064:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <twi_fw_waitUntilDone>

	sreg = SREG;
    5068:	9f b7       	in	r25, 0x3f	; 63
	cli();
    506a:	f8 94       	cli
	twiSeq1Adr = addr;
    506c:	00 93 12 05 	sts	0x0512, r16	; 0x800512 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    5070:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    5074:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    5078:	81 e0       	ldi	r24, 0x01	; 1
    507a:	8e 0f       	add	r24, r30
    507c:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    5080:	f0 e0       	ldi	r31, 0x00	; 0
    5082:	e1 5d       	subi	r30, 0xD1	; 209
    5084:	fe 4f       	sbci	r31, 0xFE	; 254
    5086:	10 83       	st	Z, r17
	twiState.isRepeatedStart = false;
    5088:	a0 e4       	ldi	r26, 0x40	; 64
    508a:	b1 e0       	ldi	r27, 0x01	; 1
    508c:	8c 91       	ld	r24, X
    508e:	8b 7f       	andi	r24, 0xFB	; 251
    5090:	8c 93       	st	X, r24
	twiSeq2Data[twiSeq2DataCnt++] = data1;
    5092:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	8e 0f       	add	r24, r30
    509a:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    509e:	f0 e0       	ldi	r31, 0x00	; 0
    50a0:	e1 5d       	subi	r30, 0xD1	; 209
    50a2:	fe 4f       	sbci	r31, 0xFE	; 254
    50a4:	d0 83       	st	Z, r29
	twiSeq2Data[twiSeq2DataCnt++] = data2;
    50a6:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    50aa:	81 e0       	ldi	r24, 0x01	; 1
    50ac:	8e 0f       	add	r24, r30
    50ae:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    50b2:	f0 e0       	ldi	r31, 0x00	; 0
    50b4:	e1 5d       	subi	r30, 0xD1	; 209
    50b6:	fe 4f       	sbci	r31, 0xFE	; 254
    50b8:	c0 83       	st	Z, r28
	twiState.doStart = true;
    50ba:	8c 91       	ld	r24, X
    50bc:	81 60       	ori	r24, 0x01	; 1
    50be:	8c 93       	st	X, r24
	SREG = sreg;
    50c0:	9f bf       	out	0x3f, r25	; 63

	isr_sendStart(true, false);
    50c2:	60 e0       	ldi	r22, 0x00	; 0
    50c4:	81 e0       	ldi	r24, 0x01	; 1
    50c6:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <isr_sendStart>
}
    50ca:	df 91       	pop	r29
    50cc:	cf 91       	pop	r28
    50ce:	1f 91       	pop	r17
    50d0:	0f 91       	pop	r16
    50d2:	08 95       	ret

000050d4 <twi_fw_sendCmdSendData1SendDataVar>:

void twi_fw_sendCmdSendData1SendDataVar(uint8_t addr, uint8_t cmd, uint8_t cnt, uint8_t data[])
{
    50d4:	ff 92       	push	r15
    50d6:	0f 93       	push	r16
    50d8:	1f 93       	push	r17
    50da:	cf 93       	push	r28
    50dc:	df 93       	push	r29
    50de:	f8 2e       	mov	r15, r24
    50e0:	06 2f       	mov	r16, r22
    50e2:	14 2f       	mov	r17, r20
    50e4:	e9 01       	movw	r28, r18
	int i;
	uint8_t sreg;

	twi_fw_waitUntilDone();
    50e6:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <twi_fw_waitUntilDone>

	sreg = SREG;
    50ea:	9f b7       	in	r25, 0x3f	; 63
	cli();
    50ec:	f8 94       	cli
	twiSeq1Adr = addr;
    50ee:	f0 92 12 05 	sts	0x0512, r15	; 0x800512 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    50f2:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    50f6:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    50fa:	81 e0       	ldi	r24, 0x01	; 1
    50fc:	8e 0f       	add	r24, r30
    50fe:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    5102:	f0 e0       	ldi	r31, 0x00	; 0
    5104:	e1 5d       	subi	r30, 0xD1	; 209
    5106:	fe 4f       	sbci	r31, 0xFE	; 254
    5108:	00 83       	st	Z, r16
	twiState.isRepeatedStart = false;
    510a:	e0 e4       	ldi	r30, 0x40	; 64
    510c:	f1 e0       	ldi	r31, 0x01	; 1
    510e:	80 81       	ld	r24, Z
    5110:	8b 7f       	andi	r24, 0xFB	; 251
    5112:	80 83       	st	Z, r24
	for (i = 0; i < cnt; ++i) {
    5114:	11 23       	and	r17, r17
    5116:	91 f0       	breq	.+36     	; 0x513c <twi_fw_sendCmdSendData1SendDataVar+0x68>
    5118:	de 01       	movw	r26, r28
    511a:	9e 01       	movw	r18, r28
    511c:	21 0f       	add	r18, r17
    511e:	31 1d       	adc	r19, r1
		twiSeq2Data[twiSeq2DataCnt++] = data[i];
    5120:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    5124:	81 e0       	ldi	r24, 0x01	; 1
    5126:	8e 0f       	add	r24, r30
    5128:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    512c:	f0 e0       	ldi	r31, 0x00	; 0
    512e:	8d 91       	ld	r24, X+
    5130:	e1 5d       	subi	r30, 0xD1	; 209
    5132:	fe 4f       	sbci	r31, 0xFE	; 254
    5134:	80 83       	st	Z, r24
	cli();
	twiSeq1Adr = addr;
	twiSeq2DataCnt = 0;
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
	twiState.isRepeatedStart = false;
	for (i = 0; i < cnt; ++i) {
    5136:	a2 17       	cp	r26, r18
    5138:	b3 07       	cpc	r27, r19
    513a:	91 f7       	brne	.-28     	; 0x5120 <twi_fw_sendCmdSendData1SendDataVar+0x4c>
		twiSeq2Data[twiSeq2DataCnt++] = data[i];
	}
	twiState.doStart = true;
    513c:	e0 e4       	ldi	r30, 0x40	; 64
    513e:	f1 e0       	ldi	r31, 0x01	; 1
    5140:	80 81       	ld	r24, Z
    5142:	81 60       	ori	r24, 0x01	; 1
    5144:	80 83       	st	Z, r24
	SREG = sreg;
    5146:	9f bf       	out	0x3f, r25	; 63

	isr_sendStart(true, false);
    5148:	60 e0       	ldi	r22, 0x00	; 0
    514a:	81 e0       	ldi	r24, 0x01	; 1
    514c:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <isr_sendStart>
}
    5150:	df 91       	pop	r29
    5152:	cf 91       	pop	r28
    5154:	1f 91       	pop	r17
    5156:	0f 91       	pop	r16
    5158:	ff 90       	pop	r15
    515a:	08 95       	ret

0000515c <twi_fw_sendCmdReadData1>:

uint8_t twi_fw_sendCmdReadData1(uint8_t addr, uint8_t cmd)
{
    515c:	cf 93       	push	r28
    515e:	df 93       	push	r29
    5160:	d8 2f       	mov	r29, r24
    5162:	c6 2f       	mov	r28, r22
	uint8_t sreg;

	twi_fw_waitUntilDone();
    5164:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <twi_fw_waitUntilDone>

	sreg = SREG;
    5168:	9f b7       	in	r25, 0x3f	; 63
	cli();
    516a:	f8 94       	cli
	twiSeq1Adr = addr;
    516c:	d0 93 12 05 	sts	0x0512, r29	; 0x800512 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    5170:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    5174:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    5178:	81 e0       	ldi	r24, 0x01	; 1
    517a:	8e 0f       	add	r24, r30
    517c:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    5180:	f0 e0       	ldi	r31, 0x00	; 0
    5182:	e1 5d       	subi	r30, 0xD1	; 209
    5184:	fe 4f       	sbci	r31, 0xFE	; 254
    5186:	c0 83       	st	Z, r28
	twiState.isRepeatedStart = true;
    5188:	e0 e4       	ldi	r30, 0x40	; 64
    518a:	f1 e0       	ldi	r31, 0x01	; 1
    518c:	80 81       	ld	r24, Z
    518e:	84 60       	ori	r24, 0x04	; 4
    5190:	80 83       	st	Z, r24
	twiSeq2DataRcvCnt = 4;
    5192:	84 e0       	ldi	r24, 0x04	; 4
    5194:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <twiSeq2DataRcvCnt>
	twiState.doStart = true;
    5198:	80 81       	ld	r24, Z
    519a:	81 60       	ori	r24, 0x01	; 1
    519c:	80 83       	st	Z, r24
	SREG = sreg;
    519e:	9f bf       	out	0x3f, r25	; 63

	isr_sendStart(true, false);
    51a0:	60 e0       	ldi	r22, 0x00	; 0
    51a2:	81 e0       	ldi	r24, 0x01	; 1
    51a4:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <isr_sendStart>
	twi_fw_waitUntilDone();
    51a8:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <twi_fw_waitUntilDone>

	return twiSeq2Data[0];
    51ac:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <twiSeq2Data>
}
    51b0:	df 91       	pop	r29
    51b2:	cf 91       	pop	r28
    51b4:	08 95       	ret

000051b6 <isr_sendStop>:
	SREG = sreg;
}

void isr_sendStop(uint8_t sendSignal)
{
	uint8_t sreg = SREG;
    51b6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    51b8:	f8 94       	cli

	if (sendSignal && twiState.isProcessing) {
    51ba:	88 23       	and	r24, r24
    51bc:	39 f0       	breq	.+14     	; 0x51cc <isr_sendStop+0x16>
    51be:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <twiState+0x1>
    51c2:	81 ff       	sbrs	r24, 1
    51c4:	03 c0       	rjmp	.+6      	; 0x51cc <isr_sendStop+0x16>
		/* send stop */
		TWCR = (_BV(TWINT) | _BV(TWSTO) | _BV(TWEN) | _BV(TWIE));
    51c6:	85 e9       	ldi	r24, 0x95	; 149
    51c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}

	twiSeq2DataCnt = 0;
    51cc:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <twiSeq2DataCnt>
	twiState.isProcessing = false;
    51d0:	e0 e4       	ldi	r30, 0x40	; 64
    51d2:	f1 e0       	ldi	r31, 0x01	; 1
    51d4:	80 81       	ld	r24, Z
    51d6:	8d 7f       	andi	r24, 0xFD	; 253
    51d8:	80 83       	st	Z, r24

	SREG = sreg;
    51da:	9f bf       	out	0x3f, r25	; 63
    51dc:	08 95       	ret

000051de <__vector_24>:
/* Forward declaration */
static uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur);

//void twi_ISR_TWI(void) - __vector_24
ISR(TWI_vect, ISR_BLOCK)
{	/* TWI */
    51de:	1f 92       	push	r1
    51e0:	0f 92       	push	r0
    51e2:	0f b6       	in	r0, 0x3f	; 63
    51e4:	0f 92       	push	r0
    51e6:	11 24       	eor	r1, r1
    51e8:	2f 93       	push	r18
    51ea:	3f 93       	push	r19
    51ec:	4f 93       	push	r20
    51ee:	5f 93       	push	r21
    51f0:	6f 93       	push	r22
    51f2:	7f 93       	push	r23
    51f4:	8f 93       	push	r24
    51f6:	9f 93       	push	r25
    51f8:	af 93       	push	r26
    51fa:	bf 93       	push	r27
    51fc:	cf 93       	push	r28
    51fe:	ef 93       	push	r30
    5200:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    5202:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5206:	e8 2f       	mov	r30, r24
    5208:	e8 7f       	andi	r30, 0xF8	; 248
	uint8_t twd = TWDR;
    520a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    520e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);			// TWI interrupt flag reset, TWI enabled and TWINT-Interrupt enabled
}

static uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
	uint8_t twcr_new = twcr_cur & 0x4f;
    5212:	c2 2f       	mov	r28, r18
    5214:	cf 74       	andi	r28, 0x4F	; 79

	/* publish the state */
	twiState.state = tws;
    5216:	e0 93 3f 01 	sts	0x013F, r30	; 0x80013f <twiState>

	switch(tws) {
    521a:	8e 2f       	mov	r24, r30
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	fc 01       	movw	r30, r24
    5220:	38 97       	sbiw	r30, 0x08	; 8
    5222:	e1 35       	cpi	r30, 0x51	; 81
    5224:	f1 05       	cpc	r31, r1
    5226:	08 f0       	brcs	.+2      	; 0x522a <__vector_24+0x4c>
    5228:	c6 c0       	rjmp	.+396    	; 0x53b6 <__vector_24+0x1d8>
    522a:	ef 5b       	subi	r30, 0xBF	; 191
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	0c 94 87 3b 	jmp	0x770e	; 0x770e <__tablejump2__>
	case TWI_TWSR_START:
		/* MASTER: send SLA - slave WRITE address */
		TWDR = (twiSeq1Adr << 1);  						// I2C device address - write mode after first start
    5232:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    5236:	88 0f       	add	r24, r24
    5238:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    523c:	c0 c0       	rjmp	.+384    	; 0x53be <__vector_24+0x1e0>
		break;

	case TWI_TWSR_REPEATEDSTART:
		/* MASTER: send SLA - slave address */
		TWDR = (twiSeq1Adr << 1) | 1; 					// I2C device address - read mode after repeated start
    523e:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    5242:	88 0f       	add	r24, r24
    5244:	81 60       	ori	r24, 0x01	; 1
    5246:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

		twiState.isRepeatedStart = false;
    524a:	e0 e4       	ldi	r30, 0x40	; 64
    524c:	f1 e0       	ldi	r31, 0x01	; 1
    524e:	80 81       	ld	r24, Z
    5250:	8b 7f       	andi	r24, 0xFB	; 251
    5252:	80 83       	st	Z, r24
		twiSeq2DataCnt = twiSeq2DataRcvCnt;
    5254:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq2DataRcvCnt>
    5258:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
		isr_sendStart(false, true);						// has received repeated start
    525c:	61 e0       	ldi	r22, 0x01	; 1
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <isr_sendStart>
    5264:	ac c0       	rjmp	.+344    	; 0x53be <__vector_24+0x1e0>
		break;

	case TWI_TWSR_M_SLAW_ADDR_ACK:
	case TWI_TWSR_M_SLAR_ADDR_ACK:
		twiState.adrAck			= true;
    5266:	e0 e4       	ldi	r30, 0x40	; 64
    5268:	f1 e0       	ldi	r31, 0x01	; 1
    526a:	80 81       	ld	r24, Z
    526c:	80 62       	ori	r24, 0x20	; 32
    526e:	80 83       	st	Z, r24
		twiState.adrAckValid	= true;
    5270:	80 81       	ld	r24, Z
    5272:	80 61       	ori	r24, 0x10	; 16
    5274:	80 83       	st	Z, r24

		if (twiSeq1Adr == TWI_MCP23017_ADDR) {
    5276:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    527a:	80 32       	cpi	r24, 0x20	; 32
    527c:	31 f4       	brne	.+12     	; 0x528a <__vector_24+0xac>
			main_bf.mainIsLcdAttached = true;
    527e:	e0 e0       	ldi	r30, 0x00	; 0
    5280:	f1 e0       	ldi	r31, 0x01	; 1
    5282:	80 81       	ld	r24, Z
    5284:	80 68       	ori	r24, 0x80	; 128
    5286:	80 83       	st	Z, r24
    5288:	09 c0       	rjmp	.+18     	; 0x529c <__vector_24+0xbe>
		} else if (twiSeq1Adr == TWI_SMART_LCD_ADDR) {
    528a:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    528e:	82 32       	cpi	r24, 0x22	; 34
    5290:	29 f4       	brne	.+10     	; 0x529c <__vector_24+0xbe>
			main_bf.mainIsSmartAttached = true;
    5292:	e1 e0       	ldi	r30, 0x01	; 1
    5294:	f1 e0       	ldi	r31, 0x01	; 1
    5296:	80 81       	ld	r24, Z
    5298:	81 60       	ori	r24, 0x01	; 1
    529a:	80 83       	st	Z, r24
		}

		if (twiState.state == TWI_TWSR_M_SLAW_ADDR_ACK) {
    529c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <twiState>
    52a0:	88 31       	cpi	r24, 0x18	; 24
    52a2:	29 f4       	brne	.+10     	; 0x52ae <__vector_24+0xd0>
			/* send command data */
			TWDR = twiSeq2Data[0];							// internal command or address register of the I2C device
    52a4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <twiSeq2Data>
    52a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    52ac:	88 c0       	rjmp	.+272    	; 0x53be <__vector_24+0x1e0>
		} else {
			twcr_new |= _BV(TWEA);							// ACK the next coming data byte
    52ae:	c0 64       	ori	r28, 0x40	; 64
    52b0:	86 c0       	rjmp	.+268    	; 0x53be <__vector_24+0x1e0>
		}
		break;

	case TWI_TWSR_M_SLAW_ADDR_NACK:
	case TWI_TWSR_M_SLAR_ADDR_NACK:
		twiState.adrAck			= false;
    52b2:	e0 e4       	ldi	r30, 0x40	; 64
    52b4:	f1 e0       	ldi	r31, 0x01	; 1
    52b6:	80 81       	ld	r24, Z
    52b8:	8f 7d       	andi	r24, 0xDF	; 223
    52ba:	80 83       	st	Z, r24
		twiState.adrAckValid	= true;
    52bc:	80 81       	ld	r24, Z
    52be:	80 61       	ori	r24, 0x10	; 16
    52c0:	80 83       	st	Z, r24

		if (twiSeq1Adr == TWI_MCP23017_ADDR) {
    52c2:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    52c6:	80 32       	cpi	r24, 0x20	; 32
    52c8:	31 f4       	brne	.+12     	; 0x52d6 <__vector_24+0xf8>
			main_bf.mainIsLcdAttached = false;
    52ca:	e0 e0       	ldi	r30, 0x00	; 0
    52cc:	f1 e0       	ldi	r31, 0x01	; 1
    52ce:	80 81       	ld	r24, Z
    52d0:	8f 77       	andi	r24, 0x7F	; 127
    52d2:	80 83       	st	Z, r24
    52d4:	09 c0       	rjmp	.+18     	; 0x52e8 <__vector_24+0x10a>
		} else if (twiSeq1Adr == TWI_SMART_LCD_ADDR) {
    52d6:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    52da:	82 32       	cpi	r24, 0x22	; 34
    52dc:	29 f4       	brne	.+10     	; 0x52e8 <__vector_24+0x10a>
			main_bf.mainIsSmartAttached = false;
    52de:	e1 e0       	ldi	r30, 0x01	; 1
    52e0:	f1 e0       	ldi	r31, 0x01	; 1
    52e2:	80 81       	ld	r24, Z
    52e4:	8e 7f       	andi	r24, 0xFE	; 254
    52e6:	80 83       	st	Z, r24
		}

		isr_sendStop(false);
    52e8:	80 e0       	ldi	r24, 0x00	; 0
    52ea:	0e 94 db 28 	call	0x51b6	; 0x51b6 <isr_sendStop>
		twcr_new |= _BV(TWSTO);
    52ee:	c0 61       	ori	r28, 0x10	; 16
    52f0:	66 c0       	rjmp	.+204    	; 0x53be <__vector_24+0x1e0>
		break;

	case TWI_TWSR_M_SLAW_DATA_ACK:
		++twiSeq2DataIdx;
    52f2:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twiSeq2DataIdx>
    52f6:	8f 5f       	subi	r24, 0xFF	; 255
    52f8:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataIdx>
		twiState.dataAck		= true;
    52fc:	e0 e4       	ldi	r30, 0x40	; 64
    52fe:	f1 e0       	ldi	r31, 0x01	; 1
    5300:	80 81       	ld	r24, Z
    5302:	80 68       	ori	r24, 0x80	; 128
    5304:	80 83       	st	Z, r24
		twiState.dataAckValid	= true;
    5306:	80 81       	ld	r24, Z
    5308:	80 64       	ori	r24, 0x40	; 64
    530a:	80 83       	st	Z, r24

		if (twiSeq2DataIdx < twiSeq2DataCnt) {
    530c:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <twiSeq2DataIdx>
    5310:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <twiSeq2DataCnt>
    5314:	98 17       	cp	r25, r24
    5316:	48 f4       	brcc	.+18     	; 0x532a <__vector_24+0x14c>
			/* send data */
			TWDR = twiSeq2Data[twiSeq2DataIdx];
    5318:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twiSeq2DataIdx>
    531c:	f0 e0       	ldi	r31, 0x00	; 0
    531e:	e1 5d       	subi	r30, 0xD1	; 209
    5320:	fe 4f       	sbci	r31, 0xFE	; 254
    5322:	80 81       	ld	r24, Z
    5324:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5328:	4a c0       	rjmp	.+148    	; 0x53be <__vector_24+0x1e0>

		} else {
			if (twiState.isRepeatedStart) {
    532a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <twiState+0x1>
    532e:	82 ff       	sbrs	r24, 2
    5330:	06 c0       	rjmp	.+12     	; 0x533e <__vector_24+0x160>
				isr_sendStart(false, true);
    5332:	61 e0       	ldi	r22, 0x01	; 1
    5334:	80 e0       	ldi	r24, 0x00	; 0
    5336:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <isr_sendStart>
				twcr_new |= _BV(TWSTA);
    533a:	c0 62       	ori	r28, 0x20	; 32
    533c:	40 c0       	rjmp	.+128    	; 0x53be <__vector_24+0x1e0>
			} else {
				isr_sendStop(false);
    533e:	80 e0       	ldi	r24, 0x00	; 0
    5340:	0e 94 db 28 	call	0x51b6	; 0x51b6 <isr_sendStop>
				twcr_new |= _BV(TWSTO);
    5344:	c0 61       	ori	r28, 0x10	; 16
    5346:	3b c0       	rjmp	.+118    	; 0x53be <__vector_24+0x1e0>
			}
		}
		break;

	case TWI_TWSR_M_SLAW_DATA_NACK:
		isr_sendStop(false);
    5348:	80 e0       	ldi	r24, 0x00	; 0
    534a:	0e 94 db 28 	call	0x51b6	; 0x51b6 <isr_sendStop>
		twcr_new |= _BV(TWSTO);
    534e:	c0 61       	ori	r28, 0x10	; 16
    5350:	36 c0       	rjmp	.+108    	; 0x53be <__vector_24+0x1e0>
		break;

	case TWI_TWSR_M_SLAR_DATA_ACK:
	case TWI_TWSR_M_SLAR_DATA_NACK:
		/* receive data */
		twiSeq2Data[twiSeq2DataIdx++]	= TWDR;
    5352:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twiSeq2DataIdx>
    5356:	81 e0       	ldi	r24, 0x01	; 1
    5358:	8e 0f       	add	r24, r30
    535a:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataIdx>
    535e:	f0 e0       	ldi	r31, 0x00	; 0
    5360:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5364:	e1 5d       	subi	r30, 0xD1	; 209
    5366:	fe 4f       	sbci	r31, 0xFE	; 254
    5368:	80 83       	st	Z, r24
		twiState.dataAck				= true;
    536a:	e0 e4       	ldi	r30, 0x40	; 64
    536c:	f1 e0       	ldi	r31, 0x01	; 1
    536e:	80 81       	ld	r24, Z
    5370:	80 68       	ori	r24, 0x80	; 128
    5372:	80 83       	st	Z, r24
		twiState.dataAckValid			= true;
    5374:	80 81       	ld	r24, Z
    5376:	80 64       	ori	r24, 0x40	; 64
    5378:	80 83       	st	Z, r24

		if ((twiState.state == TWI_TWSR_M_SLAR_DATA_NACK) || (twiSeq2DataIdx >= twiSeq2DataCnt)) {
    537a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <twiState>
    537e:	88 35       	cpi	r24, 0x58	; 88
    5380:	31 f0       	breq	.+12     	; 0x538e <__vector_24+0x1b0>
    5382:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <twiSeq2DataIdx>
    5386:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <twiSeq2DataCnt>
    538a:	98 17       	cp	r25, r24
    538c:	28 f0       	brcs	.+10     	; 0x5398 <__vector_24+0x1ba>
			isr_sendStop(false);
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	0e 94 db 28 	call	0x51b6	; 0x51b6 <isr_sendStop>
			twcr_new |= _BV(TWSTO);
    5394:	c0 61       	ori	r28, 0x10	; 16
    5396:	13 c0       	rjmp	.+38     	; 0x53be <__vector_24+0x1e0>
		} else if ((twiSeq2DataIdx + 1) >= twiSeq2DataCnt) {
    5398:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twiSeq2DataIdx>
    539c:	40 91 11 05 	lds	r20, 0x0511	; 0x800511 <twiSeq2DataCnt>
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	01 96       	adiw	r24, 0x01	; 1
    53a4:	50 e0       	ldi	r21, 0x00	; 0
    53a6:	84 17       	cp	r24, r20
    53a8:	95 07       	cpc	r25, r21
    53aa:	1c f0       	brlt	.+6      	; 0x53b2 <__vector_24+0x1d4>
			twcr_new &= ~_BV(TWEA);							// NACK last data byte
    53ac:	c2 2f       	mov	r28, r18
    53ae:	cf 70       	andi	r28, 0x0F	; 15
    53b0:	06 c0       	rjmp	.+12     	; 0x53be <__vector_24+0x1e0>
		} else {
			twcr_new |= _BV(TWEA);							// ACK to get further data
    53b2:	c0 64       	ori	r28, 0x40	; 64
    53b4:	04 c0       	rjmp	.+8      	; 0x53be <__vector_24+0x1e0>
		}
		break;

	default:
		isr_sendStop(false);
    53b6:	80 e0       	ldi	r24, 0x00	; 0
    53b8:	0e 94 db 28 	call	0x51b6	; 0x51b6 <isr_sendStop>
		twcr_new |= _BV(TWSTO);
    53bc:	c0 61       	ori	r28, 0x10	; 16
	uint8_t tws = TWSR & (0b11111 << TWS3);
	uint8_t twd = TWDR;
	uint8_t twcr_cur = TWCR;

	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);			// TWI interrupt flag reset, TWI enabled and TWINT-Interrupt enabled
    53be:	c5 68       	ori	r28, 0x85	; 133
    53c0:	c0 93 bc 00 	sts	0x00BC, r28	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    53c4:	ff 91       	pop	r31
    53c6:	ef 91       	pop	r30
    53c8:	cf 91       	pop	r28
    53ca:	bf 91       	pop	r27
    53cc:	af 91       	pop	r26
    53ce:	9f 91       	pop	r25
    53d0:	8f 91       	pop	r24
    53d2:	7f 91       	pop	r23
    53d4:	6f 91       	pop	r22
    53d6:	5f 91       	pop	r21
    53d8:	4f 91       	pop	r20
    53da:	3f 91       	pop	r19
    53dc:	2f 91       	pop	r18
    53de:	0f 90       	pop	r0
    53e0:	0f be       	out	0x3f, r0	; 63
    53e2:	0f 90       	pop	r0
    53e4:	1f 90       	pop	r1
    53e6:	18 95       	reti

000053e8 <twi_mcp23017_fw_init>:
	uint8_t clr_data = 0x00;  // clear data
	uint8_t set_data = 0xff;  // set data
	uint8_t conData = _BV(IOCON_SEQOP) | _BV(IOCON_ODR);	// BANK=0, no MIRROR, BYTE mode, do not overwrite INT bits (ODR),

	/* IOCON */
	(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IOCON, conData);
    53e8:	44 e2       	ldi	r20, 0x24	; 36
    53ea:	6a e0       	ldi	r22, 0x0A	; 10
    53ec:	80 e2       	ldi	r24, 0x20	; 32
    53ee:	0e 94 f7 27 	call	0x4fee	; 0x4fee <twi_fw_sendCmdSendData1>
	twi_fw_waitUntilDone();
    53f2:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <twi_fw_waitUntilDone>

	if (!main_bf.mainIsLcdAttached) {
    53f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    53fa:	88 23       	and	r24, r24
    53fc:	84 f5       	brge	.+96     	; 0x545e <twi_mcp23017_fw_init+0x76>
	}

	/* GPIO */

	/* GPPU */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPPUA, set_data, set_data);  // pull up all GPIO bits - setting port-A and port-B
    53fe:	2f ef       	ldi	r18, 0xFF	; 255
    5400:	4f ef       	ldi	r20, 0xFF	; 255
    5402:	6c e0       	ldi	r22, 0x0C	; 12
    5404:	80 e2       	ldi	r24, 0x20	; 32
    5406:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>

	/* IODIR */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data, clr_data);  // 0=output / 1=input - setting port-A and port-B
    540a:	20 e0       	ldi	r18, 0x00	; 0
    540c:	4f ef       	ldi	r20, 0xFF	; 255
    540e:	60 e0       	ldi	r22, 0x00	; 0
    5410:	80 e2       	ldi	r24, 0x20	; 32
    5412:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>

	/* IPOL */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IPOLA, clr_data, clr_data);  // no pin inversion - setting port-A and port-B
    5416:	20 e0       	ldi	r18, 0x00	; 0
    5418:	40 e0       	ldi	r20, 0x00	; 0
    541a:	62 e0       	ldi	r22, 0x02	; 2
    541c:	80 e2       	ldi	r24, 0x20	; 32
    541e:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>

	/* GPIO */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPIOA, clr_data, clr_data);  // all data out cleared - setting port-A and port-B
    5422:	20 e0       	ldi	r18, 0x00	; 0
    5424:	40 e0       	ldi	r20, 0x00	; 0
    5426:	62 e1       	ldi	r22, 0x12	; 18
    5428:	80 e2       	ldi	r24, 0x20	; 32
    542a:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>

	/* OLAT */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATA, clr_data, clr_data);  // all data cleared - setting port-A and port-B
    542e:	20 e0       	ldi	r18, 0x00	; 0
    5430:	40 e0       	ldi	r20, 0x00	; 0
    5432:	64 e1       	ldi	r22, 0x14	; 20
    5434:	80 e2       	ldi	r24, 0x20	; 32
    5436:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>


	/* INTERRUPTS */

	/* GPINTEN */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPINTENA, clr_data, clr_data);  // no INT used - setting port-A and port-B
    543a:	20 e0       	ldi	r18, 0x00	; 0
    543c:	40 e0       	ldi	r20, 0x00	; 0
    543e:	64 e0       	ldi	r22, 0x04	; 4
    5440:	80 e2       	ldi	r24, 0x20	; 32
    5442:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>

	/* DEFVAL */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_DEFVALA, clr_data, clr_data);  // unused - setting port-A and port-B
    5446:	20 e0       	ldi	r18, 0x00	; 0
    5448:	40 e0       	ldi	r20, 0x00	; 0
    544a:	66 e0       	ldi	r22, 0x06	; 6
    544c:	80 e2       	ldi	r24, 0x20	; 32
    544e:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>

	/* INTCON */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_INTCONA, set_data, set_data);  // unused - setting port-A and port-B
    5452:	2f ef       	ldi	r18, 0xFF	; 255
    5454:	4f ef       	ldi	r20, 0xFF	; 255
    5456:	68 e0       	ldi	r22, 0x08	; 8
    5458:	80 e2       	ldi	r24, 0x20	; 32
    545a:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>
    545e:	08 95       	ret

00005460 <twi_mcp23017_fw_close>:
	uint8_t set_data = 0xff;  // set data

	/* INTERRUPTS */

	/* GPINTEN */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPINTENA, clr_data, clr_data);  // no INT enable - setting port-A and port-B
    5460:	20 e0       	ldi	r18, 0x00	; 0
    5462:	40 e0       	ldi	r20, 0x00	; 0
    5464:	64 e0       	ldi	r22, 0x04	; 4
    5466:	80 e2       	ldi	r24, 0x20	; 32
    5468:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>


	/* GPIO */

	/* GPPU */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPPUA, set_data, set_data);  // setting port-A and port-B
    546c:	2f ef       	ldi	r18, 0xFF	; 255
    546e:	4f ef       	ldi	r20, 0xFF	; 255
    5470:	6c e0       	ldi	r22, 0x0C	; 12
    5472:	80 e2       	ldi	r24, 0x20	; 32
    5474:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>

	/* IODIR */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data, set_data);  // setting port-A and port-B
    5478:	2f ef       	ldi	r18, 0xFF	; 255
    547a:	4f ef       	ldi	r20, 0xFF	; 255
    547c:	60 e0       	ldi	r22, 0x00	; 0
    547e:	80 e2       	ldi	r24, 0x20	; 32
    5480:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>
    5484:	08 95       	ret

00005486 <twi_mcp23017_fw_setPortA_DirOut>:
void twi_mcp23017_fw_setPortA_DirOut(uint8_t isOut)
{
	uint8_t clr_data = 0x00;  // clear data
	uint8_t set_data = 0xff;  // set data

	if (isOut) {
    5486:	88 23       	and	r24, r24
    5488:	31 f0       	breq	.+12     	; 0x5496 <twi_mcp23017_fw_setPortA_DirOut+0x10>
		(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, clr_data);  // 0=output - setting port-A
    548a:	40 e0       	ldi	r20, 0x00	; 0
    548c:	60 e0       	ldi	r22, 0x00	; 0
    548e:	80 e2       	ldi	r24, 0x20	; 32
    5490:	0e 94 f7 27 	call	0x4fee	; 0x4fee <twi_fw_sendCmdSendData1>
    5494:	08 95       	ret

	} else {
		(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data);  // 1=input  - setting port-A
    5496:	4f ef       	ldi	r20, 0xFF	; 255
    5498:	60 e0       	ldi	r22, 0x00	; 0
    549a:	80 e2       	ldi	r24, 0x20	; 32
    549c:	0e 94 f7 27 	call	0x4fee	; 0x4fee <twi_fw_sendCmdSendData1>
    54a0:	08 95       	ret

000054a2 <twi_mcp23017_fw_setPortB>:
	}
}

void twi_mcp23017_fw_setPortB(uint8_t portB)
{
	(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATB, portB);
    54a2:	48 2f       	mov	r20, r24
    54a4:	65 e1       	ldi	r22, 0x15	; 21
    54a6:	80 e2       	ldi	r24, 0x20	; 32
    54a8:	0e 94 f7 27 	call	0x4fee	; 0x4fee <twi_fw_sendCmdSendData1>
    54ac:	08 95       	ret

000054ae <twi_mcp23017_fw_setPortBA>:
}

void twi_mcp23017_fw_setPortBA(uint8_t portB, uint8_t portA)
{
    54ae:	46 2f       	mov	r20, r22
	portB |= (portA & 0x01) << 7;							// XXX defective MCP23017 work-around
    54b0:	90 e8       	ldi	r25, 0x80	; 128
    54b2:	69 9f       	mul	r22, r25
    54b4:	90 01       	movw	r18, r0
    54b6:	11 24       	eor	r1, r1
    54b8:	28 2b       	or	r18, r24
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATA, portA, portB);
    54ba:	64 e1       	ldi	r22, 0x14	; 20
    54bc:	80 e2       	ldi	r24, 0x20	; 32
    54be:	0e 94 2a 28 	call	0x5054	; 0x5054 <twi_fw_sendCmdSendData1SendData2>
    54c2:	08 95       	ret

000054c4 <twi_mcp23017_fw_readPortA>:
}

uint8_t twi_mcp23017_fw_readPortA(void)
{
	return twi_fw_sendCmdReadData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPIOA);
    54c4:	62 e1       	ldi	r22, 0x12	; 18
    54c6:	80 e2       	ldi	r24, 0x20	; 32
    54c8:	0e 94 ae 28 	call	0x515c	; 0x515c <twi_fw_sendCmdReadData1>
}
    54cc:	08 95       	ret

000054ce <twi_mcp23017_av1624_fw_waitUntilReady>:
	twi_mcp23017_fw_setPortA_DirOut(false);
}


void twi_mcp23017_av1624_fw_waitUntilReady(void)
{
    54ce:	1f 93       	push	r17
    54d0:	cf 93       	push	r28
    54d2:	df 93       	push	r29
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    54d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    54d8:	82 95       	swap	r24
    54da:	86 95       	lsr	r24
    54dc:	87 70       	andi	r24, 0x07	; 7
    54de:	81 30       	cpi	r24, 0x01	; 1
    54e0:	11 f0       	breq	.+4      	; 0x54e6 <twi_mcp23017_av1624_fw_waitUntilReady+0x18>
    54e2:	10 e0       	ldi	r17, 0x00	; 0
    54e4:	01 c0       	rjmp	.+2      	; 0x54e8 <twi_mcp23017_av1624_fw_waitUntilReady+0x1a>
    54e6:	18 e0       	ldi	r17, 0x08	; 8

	twi_mcp23017_fw_setPortA_DirOut(false);
    54e8:	80 e0       	ldi	r24, 0x00	; 0
    54ea:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>

	for (;;) {
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    54ee:	c1 2f       	mov	r28, r17
    54f0:	c2 60       	ori	r28, 0x02	; 2
		twi_mcp23017_fw_setPortB(0b0011 | lightBF);
    54f2:	13 60       	ori	r17, 0x03	; 3
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	twi_mcp23017_fw_setPortA_DirOut(false);

	for (;;) {
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    54f4:	8c 2f       	mov	r24, r28
    54f6:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <twi_mcp23017_fw_setPortB>
		twi_mcp23017_fw_setPortB(0b0011 | lightBF);
    54fa:	81 2f       	mov	r24, r17
    54fc:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <twi_mcp23017_fw_setPortB>
		uint8_t status = twi_mcp23017_fw_readPortA();
    5500:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <twi_mcp23017_fw_readPortA>
    5504:	d8 2f       	mov	r29, r24
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    5506:	8c 2f       	mov	r24, r28
    5508:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <twi_mcp23017_fw_setPortB>

		if (!(status & 0x80)) {
    550c:	dd 23       	and	r29, r29
    550e:	44 f4       	brge	.+16     	; 0x5520 <twi_mcp23017_av1624_fw_waitUntilReady+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5510:	82 e4       	ldi	r24, 0x42	; 66
    5512:	8a 95       	dec	r24
    5514:	f1 f7       	brne	.-4      	; 0x5512 <twi_mcp23017_av1624_fw_waitUntilReady+0x44>
    5516:	00 c0       	rjmp	.+0      	; 0x5518 <twi_mcp23017_av1624_fw_waitUntilReady+0x4a>
			break;
		}

		_delay_us(10);
		wdt_reset();
    5518:	a8 95       	wdr
		usbPoll();
    551a:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <usbPoll>
	}
    551e:	ea cf       	rjmp	.-44     	; 0x54f4 <twi_mcp23017_av1624_fw_waitUntilReady+0x26>
}
    5520:	df 91       	pop	r29
    5522:	cf 91       	pop	r28
    5524:	1f 91       	pop	r17
    5526:	08 95       	ret

00005528 <twi_mcp23017_av1624_fw_init>:
	 * 	PB7		(free)
	 */

	// wait > 30 ms --> done

	if (!(main_bf.mainIsLcdAttached)) {
    5528:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    552c:	88 23       	and	r24, r24
    552e:	0c f0       	brlt	.+2      	; 0x5532 <twi_mcp23017_av1624_fw_init+0xa>
    5530:	86 c0       	rjmp	.+268    	; 0x563e <twi_mcp23017_av1624_fw_init+0x116>
		return;
	}

	twi_mcp23017_av1624_fw_waitUntilReady();											// within this function the main_bf.mainIsSmartAttached is being set/cleared
    5532:	0e 94 67 2a 	call	0x54ce	; 0x54ce <twi_mcp23017_av1624_fw_waitUntilReady>

	// set interface width to 8bits - (1)
	twi_mcp23017_fw_setPortA_DirOut(true);
    5536:	81 e0       	ldi	r24, 0x01	; 1
    5538:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    553c:	6c e3       	ldi	r22, 0x3C	; 60
    553e:	80 e0       	ldi	r24, 0x00	; 0
    5540:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    5544:	6c e3       	ldi	r22, 0x3C	; 60
    5546:	81 e0       	ldi	r24, 0x01	; 1
    5548:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    554c:	6c e3       	ldi	r22, 0x3C	; 60
    554e:	80 e0       	ldi	r24, 0x00	; 0
    5550:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    5554:	80 e0       	ldi	r24, 0x00	; 0
    5556:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
    555a:	8b e1       	ldi	r24, 0x1B	; 27
    555c:	8a 95       	dec	r24
    555e:	f1 f7       	brne	.-4      	; 0x555c <twi_mcp23017_av1624_fw_init+0x34>
    5560:	00 00       	nop

	// > 4.1 µs
	_delay_us(4.1f);

	// set interface width to 8bits - (2)
	twi_mcp23017_fw_setPortA_DirOut(true);
    5562:	81 e0       	ldi	r24, 0x01	; 1
    5564:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    5568:	6c e3       	ldi	r22, 0x3C	; 60
    556a:	80 e0       	ldi	r24, 0x00	; 0
    556c:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    5570:	6c e3       	ldi	r22, 0x3C	; 60
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    5578:	6c e3       	ldi	r22, 0x3C	; 60
    557a:	80 e0       	ldi	r24, 0x00	; 0
    557c:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    5580:	80 e0       	ldi	r24, 0x00	; 0
    5582:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
    5586:	83 ef       	ldi	r24, 0xF3	; 243
    5588:	91 e0       	ldi	r25, 0x01	; 1
    558a:	01 97       	sbiw	r24, 0x01	; 1
    558c:	f1 f7       	brne	.-4      	; 0x558a <twi_mcp23017_av1624_fw_init+0x62>
    558e:	00 c0       	rjmp	.+0      	; 0x5590 <twi_mcp23017_av1624_fw_init+0x68>
    5590:	00 00       	nop

	// > 100 µs
	_delay_us(100.0f);

	// set interface width to 8bits - (3)
	twi_mcp23017_fw_setPortA_DirOut(true);
    5592:	81 e0       	ldi	r24, 0x01	; 1
    5594:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    5598:	6c e3       	ldi	r22, 0x3C	; 60
    559a:	80 e0       	ldi	r24, 0x00	; 0
    559c:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    55a0:	6c e3       	ldi	r22, 0x3C	; 60
    55a2:	81 e0       	ldi	r24, 0x01	; 1
    55a4:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    55a8:	6c e3       	ldi	r22, 0x3C	; 60
    55aa:	80 e0       	ldi	r24, 0x00	; 0
    55ac:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>

	// set interface width to 8bits - (4)
	twi_mcp23017_av1624_fw_waitUntilReady();
    55b0:	0e 94 67 2a 	call	0x54ce	; 0x54ce <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    55ba:	6c e3       	ldi	r22, 0x3C	; 60
    55bc:	80 e0       	ldi	r24, 0x00	; 0
    55be:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    55c2:	6c e3       	ldi	r22, 0x3C	; 60
    55c4:	81 e0       	ldi	r24, 0x01	; 1
    55c6:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    55ca:	6c e3       	ldi	r22, 0x3C	; 60
    55cc:	80 e0       	ldi	r24, 0x00	; 0
    55ce:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>


	// display ON
	twi_mcp23017_av1624_fw_waitUntilReady();
    55d2:	0e 94 67 2a 	call	0x54ce	; 0x54ce <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    55d6:	81 e0       	ldi	r24, 0x01	; 1
    55d8:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001100);
    55dc:	6c e0       	ldi	r22, 0x0C	; 12
    55de:	80 e0       	ldi	r24, 0x00	; 0
    55e0:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00001100);
    55e4:	6c e0       	ldi	r22, 0x0C	; 12
    55e6:	81 e0       	ldi	r24, 0x01	; 1
    55e8:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001100);
    55ec:	6c e0       	ldi	r22, 0x0C	; 12
    55ee:	80 e0       	ldi	r24, 0x00	; 0
    55f0:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>

	// display CLEAR
	twi_mcp23017_av1624_fw_waitUntilReady();
    55f4:	0e 94 67 2a 	call	0x54ce	; 0x54ce <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    55fe:	61 e0       	ldi	r22, 0x01	; 1
    5600:	80 e0       	ldi	r24, 0x00	; 0
    5602:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000001);
    5606:	61 e0       	ldi	r22, 0x01	; 1
    5608:	81 e0       	ldi	r24, 0x01	; 1
    560a:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    560e:	61 e0       	ldi	r22, 0x01	; 1
    5610:	80 e0       	ldi	r24, 0x00	; 0
    5612:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>

	// display Entry Mode Set
	twi_mcp23017_av1624_fw_waitUntilReady();
    5616:	0e 94 67 2a 	call	0x54ce	; 0x54ce <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    561a:	81 e0       	ldi	r24, 0x01	; 1
    561c:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000110);
    5620:	66 e0       	ldi	r22, 0x06	; 6
    5622:	80 e0       	ldi	r24, 0x00	; 0
    5624:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000110);
    5628:	66 e0       	ldi	r22, 0x06	; 6
    562a:	81 e0       	ldi	r24, 0x01	; 1
    562c:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b1000, 0b00000110);
    5630:	66 e0       	ldi	r22, 0x06	; 6
    5632:	88 e0       	ldi	r24, 0x08	; 8
    5634:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    5638:	80 e0       	ldi	r24, 0x00	; 0
    563a:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
    563e:	08 95       	ret

00005640 <twi_mcp23017_av1624_fw_close>:
}

void twi_mcp23017_av1624_fw_close(void)
{
	if (!(main_bf.mainIsLcdAttached)) {
    5640:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5644:	88 23       	and	r24, r24
    5646:	34 f5       	brge	.+76     	; 0x5694 <twi_mcp23017_av1624_fw_close+0x54>
		return;
	}

	// display CLEAR
	twi_mcp23017_fw_setPortA_DirOut(true);
    5648:	81 e0       	ldi	r24, 0x01	; 1
    564a:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    564e:	61 e0       	ldi	r22, 0x01	; 1
    5650:	80 e0       	ldi	r24, 0x00	; 0
    5652:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000001);
    5656:	61 e0       	ldi	r22, 0x01	; 1
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    565e:	61 e0       	ldi	r22, 0x01	; 1
    5660:	80 e0       	ldi	r24, 0x00	; 0
    5662:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    5666:	80 e0       	ldi	r24, 0x00	; 0
    5668:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>

	// display OFF
	twi_mcp23017_av1624_fw_waitUntilReady();
    566c:	0e 94 67 2a 	call	0x54ce	; 0x54ce <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    5670:	81 e0       	ldi	r24, 0x01	; 1
    5672:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001000);
    5676:	68 e0       	ldi	r22, 0x08	; 8
    5678:	80 e0       	ldi	r24, 0x00	; 0
    567a:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00001000);
    567e:	68 e0       	ldi	r22, 0x08	; 8
    5680:	81 e0       	ldi	r24, 0x01	; 1
    5682:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001000);
    5686:	68 e0       	ldi	r22, 0x08	; 8
    5688:	80 e0       	ldi	r24, 0x00	; 0
    568a:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    568e:	80 e0       	ldi	r24, 0x00	; 0
    5690:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
    5694:	08 95       	ret

00005696 <twi_mcp23017_av1624_fw_gotoPosition>:
		usbPoll();
	}
}

void twi_mcp23017_av1624_fw_gotoPosition(uint8_t line, uint8_t column)
{
    5696:	cf 93       	push	r28
    5698:	df 93       	push	r29
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    569a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    569e:	92 95       	swap	r25
    56a0:	96 95       	lsr	r25
    56a2:	97 70       	andi	r25, 0x07	; 7
    56a4:	91 30       	cpi	r25, 0x01	; 1
    56a6:	11 f0       	breq	.+4      	; 0x56ac <twi_mcp23017_av1624_fw_gotoPosition+0x16>
    56a8:	d0 e0       	ldi	r29, 0x00	; 0
    56aa:	01 c0       	rjmp	.+2      	; 0x56ae <twi_mcp23017_av1624_fw_gotoPosition+0x18>
    56ac:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t ddramAdrCmd = (0x80 | ((line % 2) << 6) | (column % 16));
    56ae:	c6 2f       	mov	r28, r22
    56b0:	cf 70       	andi	r28, 0x0F	; 15
    56b2:	c0 68       	ori	r28, 0x80	; 128
    56b4:	28 2f       	mov	r18, r24
    56b6:	21 70       	andi	r18, 0x01	; 1
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	00 24       	eor	r0, r0
    56bc:	36 95       	lsr	r19
    56be:	27 95       	ror	r18
    56c0:	07 94       	ror	r0
    56c2:	36 95       	lsr	r19
    56c4:	27 95       	ror	r18
    56c6:	07 94       	ror	r0
    56c8:	32 2f       	mov	r19, r18
    56ca:	20 2d       	mov	r18, r0
    56cc:	c2 2b       	or	r28, r18

	twi_mcp23017_av1624_fw_waitUntilReady();
    56ce:	0e 94 67 2a 	call	0x54ce	; 0x54ce <twi_mcp23017_av1624_fw_waitUntilReady>

	// set DDRAM address
	twi_mcp23017_fw_setPortA_DirOut(true);
    56d2:	81 e0       	ldi	r24, 0x01	; 1
    56d4:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
    56d8:	6c 2f       	mov	r22, r28
    56da:	8d 2f       	mov	r24, r29
    56dc:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001 | lightBF, ddramAdrCmd);
    56e0:	6c 2f       	mov	r22, r28
    56e2:	8d 2f       	mov	r24, r29
    56e4:	81 60       	ori	r24, 0x01	; 1
    56e6:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
    56ea:	6c 2f       	mov	r22, r28
    56ec:	8d 2f       	mov	r24, r29
    56ee:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    56f2:	80 e0       	ldi	r24, 0x00	; 0
    56f4:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
}
    56f8:	df 91       	pop	r29
    56fa:	cf 91       	pop	r28
    56fc:	08 95       	ret

000056fe <twi_mcp23017_av1624_fw_writeString>:

void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
    56fe:	cf 92       	push	r12
    5700:	df 92       	push	r13
    5702:	ef 92       	push	r14
    5704:	ff 92       	push	r15
    5706:	0f 93       	push	r16
    5708:	1f 93       	push	r17
    570a:	cf 93       	push	r28
    570c:	df 93       	push	r29
    570e:	7c 01       	movw	r14, r24
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    5710:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    5714:	82 95       	swap	r24
    5716:	86 95       	lsr	r24
    5718:	87 70       	andi	r24, 0x07	; 7
    571a:	81 30       	cpi	r24, 0x01	; 1
    571c:	11 f0       	breq	.+4      	; 0x5722 <twi_mcp23017_av1624_fw_writeString+0x24>
    571e:	d1 2c       	mov	r13, r1
    5720:	03 c0       	rjmp	.+6      	; 0x5728 <twi_mcp23017_av1624_fw_writeString+0x2a>
    5722:	68 94       	set
    5724:	dd 24       	eor	r13, r13
    5726:	d3 f8       	bld	r13, 3

	for (int idx = 0; idx < len; ++idx) {
    5728:	66 23       	and	r22, r22
    572a:	31 f1       	breq	.+76     	; 0x5778 <twi_mcp23017_av1624_fw_writeString+0x7a>
    572c:	87 01       	movw	r16, r14
    572e:	e6 0e       	add	r14, r22
    5730:	f1 1c       	adc	r15, r1

		twi_mcp23017_av1624_fw_waitUntilReady();

		// write data
		twi_mcp23017_fw_setPortA_DirOut(true);
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    5732:	dd 2d       	mov	r29, r13
    5734:	d4 60       	ori	r29, 0x04	; 4
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
    5736:	8d 2d       	mov	r24, r13
    5738:	85 60       	ori	r24, 0x05	; 5
    573a:	c8 2e       	mov	r12, r24
void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	for (int idx = 0; idx < len; ++idx) {
		uint8_t c = buffer[idx];
    573c:	f8 01       	movw	r30, r16
    573e:	c1 91       	ld	r28, Z+
    5740:	8f 01       	movw	r16, r30
		c = recodeChar(c);

		twi_mcp23017_av1624_fw_waitUntilReady();
    5742:	0e 94 67 2a 	call	0x54ce	; 0x54ce <twi_mcp23017_av1624_fw_waitUntilReady>

		// write data
		twi_mcp23017_fw_setPortA_DirOut(true);
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    574c:	6c 2f       	mov	r22, r28
    574e:	8d 2f       	mov	r24, r29
    5750:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
    5754:	6c 2f       	mov	r22, r28
    5756:	8c 2d       	mov	r24, r12
    5758:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    575c:	6c 2f       	mov	r22, r28
    575e:	8d 2f       	mov	r24, r29
    5760:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0000 | lightBF, c);
    5764:	6c 2f       	mov	r22, r28
    5766:	8d 2d       	mov	r24, r13
    5768:	0e 94 57 2a 	call	0x54ae	; 0x54ae <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortA_DirOut(false);
    576c:	80 e0       	ldi	r24, 0x00	; 0
    576e:	0e 94 43 2a 	call	0x5486	; 0x5486 <twi_mcp23017_fw_setPortA_DirOut>

void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	for (int idx = 0; idx < len; ++idx) {
    5772:	0e 15       	cp	r16, r14
    5774:	1f 05       	cpc	r17, r15
    5776:	11 f7       	brne	.-60     	; 0x573c <twi_mcp23017_av1624_fw_writeString+0x3e>
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
		twi_mcp23017_fw_setPortBA(0b0000 | lightBF, c);
		twi_mcp23017_fw_setPortA_DirOut(false);
	}
}
    5778:	df 91       	pop	r29
    577a:	cf 91       	pop	r28
    577c:	1f 91       	pop	r17
    577e:	0f 91       	pop	r16
    5780:	ff 90       	pop	r15
    5782:	ef 90       	pop	r14
    5784:	df 90       	pop	r13
    5786:	cf 90       	pop	r12
    5788:	08 95       	ret

0000578a <twi_smart_lcd_fw_get_version>:
}


uint8_t twi_smart_lcd_fw_get_version(void)
{
	return twi_fw_sendCmdReadData1(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_GETVER);		// within this function the main_bf.mainIsSmartAttached is being set
    578a:	61 e0       	ldi	r22, 0x01	; 1
    578c:	82 e2       	ldi	r24, 0x22	; 34
    578e:	0e 94 ae 28 	call	0x515c	; 0x515c <twi_fw_sendCmdReadData1>
}
    5792:	08 95       	ret

00005794 <twi_smart_lcd_fw_init>:
extern uchar mainPrepareBuffer[MAIN_PREPARE_BUFFER_SIZE];


void twi_smart_lcd_fw_init(void)
{
	uint8_t ver = twi_smart_lcd_fw_get_version();
    5794:	0e 94 c5 2b 	call	0x578a	; 0x578a <twi_smart_lcd_fw_get_version>
    5798:	08 95       	ret

0000579a <twi_smart_lcd_fw_set_clk_state>:
	return twi_fw_sendCmdReadData1(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_GETVER);		// within this function the main_bf.mainIsSmartAttached is being set
}

void twi_smart_lcd_fw_set_clk_state(uint8_t clk_state, int16_t phase100)
{
	mainPrepareBuffer[0] = clk_state;
    579a:	ef e0       	ldi	r30, 0x0F	; 15
    579c:	f4 e0       	ldi	r31, 0x04	; 4
    579e:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (phase100 & 0xff);
    57a0:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) (phase100 >> 8);
    57a2:	72 83       	std	Z+2, r23	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_CLK_STATE, 3, (uint8_t*) &mainPrepareBuffer);
    57a4:	9f 01       	movw	r18, r30
    57a6:	43 e0       	ldi	r20, 0x03	; 3
    57a8:	60 e8       	ldi	r22, 0x80	; 128
    57aa:	82 e2       	ldi	r24, 0x22	; 34
    57ac:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    57b0:	08 95       	ret

000057b2 <twi_smart_lcd_fw_set_date>:
}

void twi_smart_lcd_fw_set_date(uint16_t year, uint8_t month, uint8_t day)
{
	mainPrepareBuffer[0] = (uint8_t) (year & 0xff);
    57b2:	ef e0       	ldi	r30, 0x0F	; 15
    57b4:	f4 e0       	ldi	r31, 0x04	; 4
    57b6:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (year >>  8);
    57b8:	91 83       	std	Z+1, r25	; 0x01
	mainPrepareBuffer[2] = month;
    57ba:	62 83       	std	Z+2, r22	; 0x02
	mainPrepareBuffer[3] = day;
    57bc:	43 83       	std	Z+3, r20	; 0x03
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY, 4, (uint8_t*) &mainPrepareBuffer);
    57be:	9f 01       	movw	r18, r30
    57c0:	44 e0       	ldi	r20, 0x04	; 4
    57c2:	61 e8       	ldi	r22, 0x81	; 129
    57c4:	82 e2       	ldi	r24, 0x22	; 34
    57c6:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    57ca:	08 95       	ret

000057cc <twi_smart_lcd_fw_set_time>:
}

void twi_smart_lcd_fw_set_time(uint8_t hour, uint8_t minute, uint8_t second)
{
	mainPrepareBuffer[0] = hour;
    57cc:	ef e0       	ldi	r30, 0x0F	; 15
    57ce:	f4 e0       	ldi	r31, 0x04	; 4
    57d0:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = minute;
    57d2:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = second;
    57d4:	42 83       	std	Z+2, r20	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC, 3, (uint8_t*) &mainPrepareBuffer);
    57d6:	9f 01       	movw	r18, r30
    57d8:	43 e0       	ldi	r20, 0x03	; 3
    57da:	62 e8       	ldi	r22, 0x82	; 130
    57dc:	82 e2       	ldi	r24, 0x22	; 34
    57de:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    57e2:	08 95       	ret

000057e4 <twi_smart_lcd_fw_set_ppm>:
}

void twi_smart_lcd_fw_set_ppm(int16_t ppm_int, uint16_t ppm_frac1000)
{
	mainPrepareBuffer[0] = (uint8_t) (ppm_int & 0xff);
    57e4:	ef e0       	ldi	r30, 0x0F	; 15
    57e6:	f4 e0       	ldi	r31, 0x04	; 4
    57e8:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (ppm_int >> 8);
    57ea:	91 83       	std	Z+1, r25	; 0x01
	mainPrepareBuffer[2] = (uint8_t) (ppm_frac1000 & 0xff);
    57ec:	62 83       	std	Z+2, r22	; 0x02
	mainPrepareBuffer[3] = (uint8_t) (ppm_frac1000 >> 8);
    57ee:	73 83       	std	Z+3, r23	; 0x03
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_PPM, 4, (uint8_t*) &mainPrepareBuffer);
    57f0:	9f 01       	movw	r18, r30
    57f2:	44 e0       	ldi	r20, 0x04	; 4
    57f4:	63 e8       	ldi	r22, 0x83	; 131
    57f6:	82 e2       	ldi	r24, 0x22	; 34
    57f8:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    57fc:	08 95       	ret

000057fe <twi_smart_lcd_fw_set_pwm>:
}

void twi_smart_lcd_fw_set_pwm(uint8_t pwm_int, uint8_t pwm_frac)
{
	mainPrepareBuffer[0] = pwm_int;
    57fe:	ef e0       	ldi	r30, 0x0F	; 15
    5800:	f4 e0       	ldi	r31, 0x04	; 4
    5802:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = pwm_frac;
    5804:	61 83       	std	Z+1, r22	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_TCXO_PWM, 2, (uint8_t*) &mainPrepareBuffer);
    5806:	9f 01       	movw	r18, r30
    5808:	42 e0       	ldi	r20, 0x02	; 2
    580a:	64 e8       	ldi	r22, 0x84	; 132
    580c:	82 e2       	ldi	r24, 0x22	; 34
    580e:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    5812:	08 95       	ret

00005814 <twi_smart_lcd_fw_set_pv>:
}

void twi_smart_lcd_fw_set_pv(uint8_t pv_int, uint16_t pv_frac)
{
	mainPrepareBuffer[0] = pv_int;
    5814:	ef e0       	ldi	r30, 0x0F	; 15
    5816:	f4 e0       	ldi	r31, 0x04	; 4
    5818:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (pv_frac & 0xff);
    581a:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) (pv_frac >> 8);
    581c:	72 83       	std	Z+2, r23	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_TCXO_VC, 3, (uint8_t*) &mainPrepareBuffer);
    581e:	9f 01       	movw	r18, r30
    5820:	43 e0       	ldi	r20, 0x03	; 3
    5822:	65 e8       	ldi	r22, 0x85	; 133
    5824:	82 e2       	ldi	r24, 0x22	; 34
    5826:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    582a:	08 95       	ret

0000582c <twi_smart_lcd_fw_set_sat_use>:
}

void twi_smart_lcd_fw_set_sat_use(uint8_t sat_west, uint8_t sat_east, uint8_t sat_used)
{
	mainPrepareBuffer[0] = sat_west;
    582c:	ef e0       	ldi	r30, 0x0F	; 15
    582e:	f4 e0       	ldi	r31, 0x04	; 4
    5830:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = sat_east;
    5832:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = sat_used;
    5834:	42 83       	std	Z+2, r20	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_SATS, 3, (uint8_t*) &mainPrepareBuffer);
    5836:	9f 01       	movw	r18, r30
    5838:	43 e0       	ldi	r20, 0x03	; 3
    583a:	68 e8       	ldi	r22, 0x88	; 136
    583c:	82 e2       	ldi	r24, 0x22	; 34
    583e:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    5842:	08 95       	ret

00005844 <twi_smart_lcd_fw_set_sat_dop>:
}

void twi_smart_lcd_fw_set_sat_dop(uint16_t sat_dop100)
{
	mainPrepareBuffer[0] = (uint8_t) (sat_dop100 & 0xff);
    5844:	ef e0       	ldi	r30, 0x0F	; 15
    5846:	f4 e0       	ldi	r31, 0x04	; 4
    5848:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (sat_dop100 >> 8);
    584a:	91 83       	std	Z+1, r25	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_DOP, 2, (uint8_t*) &mainPrepareBuffer);
    584c:	9f 01       	movw	r18, r30
    584e:	42 e0       	ldi	r20, 0x02	; 2
    5850:	69 e8       	ldi	r22, 0x89	; 137
    5852:	82 e2       	ldi	r24, 0x22	; 34
    5854:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    5858:	08 95       	ret

0000585a <twi_smart_lcd_fw_set_pos_state>:
}

void twi_smart_lcd_fw_set_pos_state(uint8_t state_fi, uint8_t state_m2)
{
	mainPrepareBuffer[0] = state_fi;
    585a:	ef e0       	ldi	r30, 0x0F	; 15
    585c:	f4 e0       	ldi	r31, 0x04	; 4
    585e:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = state_m2;
    5860:	61 83       	std	Z+1, r22	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_STATE, 2, (uint8_t*) &mainPrepareBuffer);
    5862:	9f 01       	movw	r18, r30
    5864:	42 e0       	ldi	r20, 0x02	; 2
    5866:	6a e8       	ldi	r22, 0x8A	; 138
    5868:	82 e2       	ldi	r24, 0x22	; 34
    586a:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    586e:	08 95       	ret

00005870 <twi_smart_lcd_fw_set_pos_lat>:
}

void twi_smart_lcd_fw_set_pos_lat(uint8_t lat_sgn, uint8_t lat_deg, uint8_t lat_min_int, uint16_t lat_min_frac10000)
{
	mainPrepareBuffer[0] = (uint8_t) lat_sgn;
    5870:	ef e0       	ldi	r30, 0x0F	; 15
    5872:	f4 e0       	ldi	r31, 0x04	; 4
    5874:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) lat_deg;
    5876:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) lat_min_int;
    5878:	42 83       	std	Z+2, r20	; 0x02
	mainPrepareBuffer[3] = (uint8_t) (lat_min_frac10000 & 0xff);
    587a:	23 83       	std	Z+3, r18	; 0x03
	mainPrepareBuffer[4] = (uint8_t) (lat_min_frac10000 >> 8);
    587c:	34 83       	std	Z+4, r19	; 0x04
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_LAT, 5, (uint8_t*) &mainPrepareBuffer);
    587e:	9f 01       	movw	r18, r30
    5880:	45 e0       	ldi	r20, 0x05	; 5
    5882:	6b e8       	ldi	r22, 0x8B	; 139
    5884:	82 e2       	ldi	r24, 0x22	; 34
    5886:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    588a:	08 95       	ret

0000588c <twi_smart_lcd_fw_set_pos_lon>:
}

void twi_smart_lcd_fw_set_pos_lon(uint8_t lon_sgn, uint8_t lon_deg, uint8_t lon_min_int, uint16_t lon_min_frac10000)
{
	mainPrepareBuffer[0] = (uint8_t) lon_sgn;
    588c:	ef e0       	ldi	r30, 0x0F	; 15
    588e:	f4 e0       	ldi	r31, 0x04	; 4
    5890:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) lon_deg;
    5892:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) lon_min_int;
    5894:	42 83       	std	Z+2, r20	; 0x02
	mainPrepareBuffer[3] = (uint8_t) (lon_min_frac10000 & 0xff);
    5896:	23 83       	std	Z+3, r18	; 0x03
	mainPrepareBuffer[4] = (uint8_t) (lon_min_frac10000 >> 8);
    5898:	34 83       	std	Z+4, r19	; 0x04
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_LON, 5, (uint8_t*) &mainPrepareBuffer);
    589a:	9f 01       	movw	r18, r30
    589c:	45 e0       	ldi	r20, 0x05	; 5
    589e:	6c e8       	ldi	r22, 0x8C	; 140
    58a0:	82 e2       	ldi	r24, 0x22	; 34
    58a2:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    58a6:	08 95       	ret

000058a8 <twi_smart_lcd_fw_set_pos_height>:
}

void twi_smart_lcd_fw_set_pos_height(uint16_t height)
{
	mainPrepareBuffer[0] = (uint8_t) (height & 0xff);
    58a8:	ef e0       	ldi	r30, 0x0F	; 15
    58aa:	f4 e0       	ldi	r31, 0x04	; 4
    58ac:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (height >> 8);
    58ae:	91 83       	std	Z+1, r25	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT, 2, (uint8_t*) &mainPrepareBuffer);
    58b0:	9f 01       	movw	r18, r30
    58b2:	42 e0       	ldi	r20, 0x02	; 2
    58b4:	6d e8       	ldi	r22, 0x8D	; 141
    58b6:	82 e2       	ldi	r24, 0x22	; 34
    58b8:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar>
    58bc:	08 95       	ret

000058be <usb_fw_sendInInterrupt>:
 */
void usb_fw_sendInInterrupt(void)
{
	static uchar bufferInt[5] = "<INT>";

	if (usbInterruptIsReady()) {
    58be:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <usbTxStatus1>
    58c2:	84 ff       	sbrs	r24, 4
    58c4:	05 c0       	rjmp	.+10     	; 0x58d0 <usb_fw_sendInInterrupt+0x12>
		/* send next packet if a new time-slot is ready to send */
		usbSetInterrupt(bufferInt, sizeof(bufferInt));
    58c6:	65 e0       	ldi	r22, 0x05	; 5
    58c8:	88 e0       	ldi	r24, 0x08	; 8
    58ca:	91 e0       	ldi	r25, 0x01	; 1
    58cc:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <usbSetInterrupt>
    58d0:	08 95       	ret

000058d2 <usb_fw_init>:

/*  -- 8< -- */

void usb_fw_init(void)
{
	usbInit();
    58d2:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <usbInit>
	USB_INTR_ENABLE &= ~(_BV(USB_INTR_ENABLE_BIT));
    58d6:	e8 98       	cbi	0x1d, 0	; 29
	usbDeviceDisconnect();									// enforce re-enumeration, do this while interrupts are disabled!
    58d8:	21 98       	cbi	0x04, 1	; 4
    58da:	29 98       	cbi	0x05, 1	; 5
    58dc:	89 ef       	ldi	r24, 0xF9	; 249
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    58de:	e7 e8       	ldi	r30, 0x87	; 135
    58e0:	f3 e1       	ldi	r31, 0x13	; 19
    58e2:	31 97       	sbiw	r30, 0x01	; 1
    58e4:	f1 f7       	brne	.-4      	; 0x58e2 <usb_fw_init+0x10>
    58e6:	00 c0       	rjmp	.+0      	; 0x58e8 <usb_fw_init+0x16>
    58e8:	00 00       	nop

    uint8_t i = 250;
    while (--i) {											// fake USB disconnect for > 250 ms
        _delay_ms(1);
        wdt_reset();
    58ea:	a8 95       	wdr
    58ec:	81 50       	subi	r24, 0x01	; 1
	usbInit();
	USB_INTR_ENABLE &= ~(_BV(USB_INTR_ENABLE_BIT));
	usbDeviceDisconnect();									// enforce re-enumeration, do this while interrupts are disabled!

    uint8_t i = 250;
    while (--i) {											// fake USB disconnect for > 250 ms
    58ee:	b9 f7       	brne	.-18     	; 0x58de <usb_fw_init+0xc>
        _delay_ms(1);
        wdt_reset();
    }

    usbDeviceConnect();
    58f0:	21 9a       	sbi	0x04, 1	; 4
    58f2:	29 9a       	sbi	0x05, 1	; 5
	USB_INTR_ENABLE |= _BV(USB_INTR_ENABLE_BIT);
    58f4:	e8 9a       	sbi	0x1d, 0	; 29
    58f6:	08 95       	ret

000058f8 <usb_fw_close>:
}

void usb_fw_close(void)
{
	USB_INTR_ENABLE &= ~(_BV(USB_INTR_ENABLE_BIT));
    58f8:	e8 98       	cbi	0x1d, 0	; 29
	usbDeviceDisconnect();
    58fa:	21 98       	cbi	0x04, 1	; 4
    58fc:	29 98       	cbi	0x05, 1	; 5
    58fe:	08 95       	ret

00005900 <usbFunctionSetup>:

/* usbFunctionSetup() is called when the host does a setup of the USB function. For more
 * information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
    5900:	fc 01       	movw	r30, r24
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;

    if (((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_VENDOR) &&
    5902:	90 81       	ld	r25, Z
    5904:	89 2f       	mov	r24, r25
    5906:	80 76       	andi	r24, 0x60	; 96
    5908:	80 34       	cpi	r24, 0x40	; 64
    590a:	81 f5       	brne	.+96     	; 0x596c <usbFunctionSetup+0x6c>
    	((rq->bmRequestType & USBRQ_RCPT_MASK) == USBRQ_RCPT_DEVICE)) {
    590c:	9f 71       	andi	r25, 0x1F	; 31
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;

    if (((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_VENDOR) &&
    590e:	81 f5       	brne	.+96     	; 0x5970 <usbFunctionSetup+0x70>
    	((rq->bmRequestType & USBRQ_RCPT_MASK) == USBRQ_RCPT_DEVICE)) {
    	//usbSetupCntr++;

    	if (rq->bRequest == USBCUSTOMRQ_ECHO) {				// echo -- used for reliability tests
    5910:	81 81       	ldd	r24, Z+1	; 0x01
    5912:	81 11       	cpse	r24, r1
    5914:	11 c0       	rjmp	.+34     	; 0x5938 <usbFunctionSetup+0x38>
    		usbCtxtSetupReplyBuffer[0] = rq->wValue.bytes[0];
    5916:	a1 e4       	ldi	r26, 0x41	; 65
    5918:	b1 e0       	ldi	r27, 0x01	; 1
    591a:	82 81       	ldd	r24, Z+2	; 0x02
    591c:	8c 93       	st	X, r24
    		usbCtxtSetupReplyBuffer[1] = rq->wValue.bytes[1];
    591e:	83 81       	ldd	r24, Z+3	; 0x03
    5920:	11 96       	adiw	r26, 0x01	; 1
    5922:	8c 93       	st	X, r24
    5924:	11 97       	sbiw	r26, 0x01	; 1
    		usbCtxtSetupReplyBuffer[2] = rq->wIndex.bytes[0];
    5926:	84 81       	ldd	r24, Z+4	; 0x04
    5928:	12 96       	adiw	r26, 0x02	; 2
    592a:	8c 93       	st	X, r24
    592c:	12 97       	sbiw	r26, 0x02	; 2
    		usbCtxtSetupReplyBuffer[3] = rq->wIndex.bytes[1];
    592e:	85 81       	ldd	r24, Z+5	; 0x05
    5930:	13 96       	adiw	r26, 0x03	; 3
    5932:	8c 93       	st	X, r24
    		len = 4;
    5934:	84 e0       	ldi	r24, 0x04	; 4
    5936:	1f c0       	rjmp	.+62     	; 0x5976 <usbFunctionSetup+0x76>

    	} else if (rq->bRequest == USBCUSTOMRQ_RECV) {		// receive data from this USB function
    5938:	82 30       	cpi	r24, 0x02	; 2
    593a:	59 f4       	brne	.+22     	; 0x5952 <usbFunctionSetup+0x52>
    		uint8_t sreg = SREG;
    593c:	8f b7       	in	r24, 0x3f	; 63
    		cli();
    593e:	f8 94       	cli
			cntRcv = rq->wLength.word;
    5940:	26 81       	ldd	r18, Z+6	; 0x06
    5942:	37 81       	ldd	r19, Z+7	; 0x07
    5944:	30 93 17 05 	sts	0x0517, r19	; 0x800517 <cntRcv+0x1>
    5948:	20 93 16 05 	sts	0x0516, r18	; 0x800516 <cntRcv>
			len = USB_NO_MSG;								// use usbFunctionRead() to obtain the data
    		SREG = sreg;
    594c:	8f bf       	out	0x3f, r24	; 63

    	} else if (rq->bRequest == USBCUSTOMRQ_RECV) {		// receive data from this USB function
    		uint8_t sreg = SREG;
    		cli();
			cntRcv = rq->wLength.word;
			len = USB_NO_MSG;								// use usbFunctionRead() to obtain the data
    594e:	8f ef       	ldi	r24, 0xFF	; 255
    5950:	12 c0       	rjmp	.+36     	; 0x5976 <usbFunctionSetup+0x76>
    		SREG = sreg;

    	} else if (rq->bRequest == USBCUSTOMRQ_SEND) {		// send data from host to this USB function
    5952:	81 30       	cpi	r24, 0x01	; 1
    5954:	79 f4       	brne	.+30     	; 0x5974 <usbFunctionSetup+0x74>
    		uint8_t sreg = SREG;
    5956:	8f b7       	in	r24, 0x3f	; 63
    		cli();
    5958:	f8 94       	cli
			cntSend = rq->wLength.word;
    595a:	26 81       	ldd	r18, Z+6	; 0x06
    595c:	37 81       	ldd	r19, Z+7	; 0x07
    595e:	30 93 15 05 	sts	0x0515, r19	; 0x800515 <cntSend+0x1>
    5962:	20 93 14 05 	sts	0x0514, r18	; 0x800514 <cntSend>
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    		SREG = sreg;
    5966:	8f bf       	out	0x3f, r24	; 63

    	} else if (rq->bRequest == USBCUSTOMRQ_SEND) {		// send data from host to this USB function
    		uint8_t sreg = SREG;
    		cli();
			cntSend = rq->wLength.word;
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    5968:	8f ef       	ldi	r24, 0xFF	; 255
    596a:	05 c0       	rjmp	.+10     	; 0x5976 <usbFunctionSetup+0x76>
 * information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;
    596c:	80 e0       	ldi	r24, 0x00	; 0
    596e:	03 c0       	rjmp	.+6      	; 0x5976 <usbFunctionSetup+0x76>
    5970:	80 e0       	ldi	r24, 0x00	; 0
    5972:	01 c0       	rjmp	.+2      	; 0x5976 <usbFunctionSetup+0x76>
    5974:	80 e0       	ldi	r24, 0x00	; 0
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    		SREG = sreg;
    	}
    }

	usbMsgPtr = (usbMsgPtr_t) usbCtxtSetupReplyBuffer;
    5976:	21 e4       	ldi	r18, 0x41	; 65
    5978:	31 e0       	ldi	r19, 0x01	; 1
    597a:	30 93 0b 08 	sts	0x080B, r19	; 0x80080b <usbMsgPtr+0x1>
    597e:	20 93 0a 08 	sts	0x080A, r18	; 0x80080a <usbMsgPtr>
    return len;
}
    5982:	08 95       	ret

00005984 <usbFunctionRead>:

/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionRead(uchar *data, uchar len)
{
    5984:	cf 92       	push	r12
    5986:	df 92       	push	r13
    5988:	ef 92       	push	r14
    598a:	ff 92       	push	r15
    598c:	1f 93       	push	r17
    598e:	cf 93       	push	r28
    5990:	df 93       	push	r29
    5992:	fc 01       	movw	r30, r24
    5994:	46 2f       	mov	r20, r22
	uint8_t retLen = 0;

	if (main_bf.mainIsUsbCommTest) {
    5996:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    599a:	84 ff       	sbrs	r24, 4
    599c:	a0 c0       	rjmp	.+320    	; 0x5ade <usbFunctionRead+0x15a>
		/* special communication TEST */
		if (cntRcv) {
    599e:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <cntRcv>
    59a2:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <cntRcv+0x1>
    59a6:	89 2b       	or	r24, r25
    59a8:	09 f4       	brne	.+2      	; 0x59ac <usbFunctionRead+0x28>
    59aa:	ce c0       	rjmp	.+412    	; 0x5b48 <usbFunctionRead+0x1c4>
#if 1
			data[retLen++] = '0' + ((doTestCntr / 1000) % 10);
    59ac:	c0 91 d9 05 	lds	r28, 0x05D9	; 0x8005d9 <doTestCntr>
    59b0:	d0 91 da 05 	lds	r29, 0x05DA	; 0x8005da <doTestCntr+0x1>
    59b4:	9e 01       	movw	r18, r28
    59b6:	36 95       	lsr	r19
    59b8:	27 95       	ror	r18
    59ba:	36 95       	lsr	r19
    59bc:	27 95       	ror	r18
    59be:	36 95       	lsr	r19
    59c0:	27 95       	ror	r18
    59c2:	a5 ec       	ldi	r26, 0xC5	; 197
    59c4:	b0 e2       	ldi	r27, 0x20	; 32
    59c6:	0e 94 8d 3b 	call	0x771a	; 0x771a <__umulhisi3>
    59ca:	7c 01       	movw	r14, r24
    59cc:	f6 94       	lsr	r15
    59ce:	e7 94       	ror	r14
    59d0:	f6 94       	lsr	r15
    59d2:	e7 94       	ror	r14
    59d4:	f6 94       	lsr	r15
    59d6:	e7 94       	ror	r14
    59d8:	f6 94       	lsr	r15
    59da:	e7 94       	ror	r14
    59dc:	97 01       	movw	r18, r14
    59de:	ad ec       	ldi	r26, 0xCD	; 205
    59e0:	bc ec       	ldi	r27, 0xCC	; 204
    59e2:	0e 94 8d 3b 	call	0x771a	; 0x771a <__umulhisi3>
    59e6:	96 95       	lsr	r25
    59e8:	87 95       	ror	r24
    59ea:	96 95       	lsr	r25
    59ec:	87 95       	ror	r24
    59ee:	96 95       	lsr	r25
    59f0:	87 95       	ror	r24
    59f2:	9c 01       	movw	r18, r24
    59f4:	22 0f       	add	r18, r18
    59f6:	33 1f       	adc	r19, r19
    59f8:	88 0f       	add	r24, r24
    59fa:	99 1f       	adc	r25, r25
    59fc:	88 0f       	add	r24, r24
    59fe:	99 1f       	adc	r25, r25
    5a00:	88 0f       	add	r24, r24
    5a02:	99 1f       	adc	r25, r25
    5a04:	82 0f       	add	r24, r18
    5a06:	93 1f       	adc	r25, r19
    5a08:	97 01       	movw	r18, r14
    5a0a:	28 1b       	sub	r18, r24
    5a0c:	39 0b       	sbc	r19, r25
    5a0e:	c9 01       	movw	r24, r18
    5a10:	80 5d       	subi	r24, 0xD0	; 208
    5a12:	80 83       	st	Z, r24
			data[retLen++] = '0' + ((doTestCntr /  100) % 10);
    5a14:	9e 01       	movw	r18, r28
    5a16:	36 95       	lsr	r19
    5a18:	27 95       	ror	r18
    5a1a:	36 95       	lsr	r19
    5a1c:	27 95       	ror	r18
    5a1e:	ab e7       	ldi	r26, 0x7B	; 123
    5a20:	b4 e1       	ldi	r27, 0x14	; 20
    5a22:	0e 94 8d 3b 	call	0x771a	; 0x771a <__umulhisi3>
    5a26:	7c 01       	movw	r14, r24
    5a28:	f6 94       	lsr	r15
    5a2a:	e7 94       	ror	r14
    5a2c:	97 01       	movw	r18, r14
    5a2e:	ad ec       	ldi	r26, 0xCD	; 205
    5a30:	bc ec       	ldi	r27, 0xCC	; 204
    5a32:	0e 94 8d 3b 	call	0x771a	; 0x771a <__umulhisi3>
    5a36:	96 95       	lsr	r25
    5a38:	87 95       	ror	r24
    5a3a:	96 95       	lsr	r25
    5a3c:	87 95       	ror	r24
    5a3e:	96 95       	lsr	r25
    5a40:	87 95       	ror	r24
    5a42:	9c 01       	movw	r18, r24
    5a44:	22 0f       	add	r18, r18
    5a46:	33 1f       	adc	r19, r19
    5a48:	88 0f       	add	r24, r24
    5a4a:	99 1f       	adc	r25, r25
    5a4c:	88 0f       	add	r24, r24
    5a4e:	99 1f       	adc	r25, r25
    5a50:	88 0f       	add	r24, r24
    5a52:	99 1f       	adc	r25, r25
    5a54:	82 0f       	add	r24, r18
    5a56:	93 1f       	adc	r25, r19
    5a58:	97 01       	movw	r18, r14
    5a5a:	28 1b       	sub	r18, r24
    5a5c:	39 0b       	sbc	r19, r25
    5a5e:	c9 01       	movw	r24, r18
    5a60:	80 5d       	subi	r24, 0xD0	; 208
    5a62:	81 83       	std	Z+1, r24	; 0x01
			data[retLen++] = '0' + ((doTestCntr /   10) % 10);
    5a64:	9e 01       	movw	r18, r28
    5a66:	0e 94 8d 3b 	call	0x771a	; 0x771a <__umulhisi3>
    5a6a:	7c 01       	movw	r14, r24
    5a6c:	f6 94       	lsr	r15
    5a6e:	e7 94       	ror	r14
    5a70:	f6 94       	lsr	r15
    5a72:	e7 94       	ror	r14
    5a74:	f6 94       	lsr	r15
    5a76:	e7 94       	ror	r14
    5a78:	97 01       	movw	r18, r14
    5a7a:	0e 94 8d 3b 	call	0x771a	; 0x771a <__umulhisi3>
    5a7e:	96 95       	lsr	r25
    5a80:	87 95       	ror	r24
    5a82:	96 95       	lsr	r25
    5a84:	87 95       	ror	r24
    5a86:	96 95       	lsr	r25
    5a88:	87 95       	ror	r24
    5a8a:	9c 01       	movw	r18, r24
    5a8c:	22 0f       	add	r18, r18
    5a8e:	33 1f       	adc	r19, r19
    5a90:	88 0f       	add	r24, r24
    5a92:	99 1f       	adc	r25, r25
    5a94:	88 0f       	add	r24, r24
    5a96:	99 1f       	adc	r25, r25
    5a98:	88 0f       	add	r24, r24
    5a9a:	99 1f       	adc	r25, r25
    5a9c:	82 0f       	add	r24, r18
    5a9e:	93 1f       	adc	r25, r19
    5aa0:	97 01       	movw	r18, r14
    5aa2:	28 1b       	sub	r18, r24
    5aa4:	39 0b       	sbc	r19, r25
    5aa6:	c9 01       	movw	r24, r18
    5aa8:	80 5d       	subi	r24, 0xD0	; 208
    5aaa:	82 83       	std	Z+2, r24	; 0x02
			data[retLen++] = '0' + ( doTestCntr++       % 10);
    5aac:	ce 01       	movw	r24, r28
    5aae:	01 96       	adiw	r24, 0x01	; 1
    5ab0:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <doTestCntr+0x1>
    5ab4:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <doTestCntr>
    5ab8:	c7 01       	movw	r24, r14
    5aba:	88 0f       	add	r24, r24
    5abc:	99 1f       	adc	r25, r25
    5abe:	ee 0c       	add	r14, r14
    5ac0:	ff 1c       	adc	r15, r15
    5ac2:	ee 0c       	add	r14, r14
    5ac4:	ff 1c       	adc	r15, r15
    5ac6:	ee 0c       	add	r14, r14
    5ac8:	ff 1c       	adc	r15, r15
    5aca:	e8 0e       	add	r14, r24
    5acc:	f9 1e       	adc	r15, r25
    5ace:	ce 19       	sub	r28, r14
    5ad0:	df 09       	sbc	r29, r15
    5ad2:	c0 5d       	subi	r28, 0xD0	; 208
    5ad4:	c3 83       	std	Z+3, r28	; 0x03
#else
			data[retLen++] = '0' +  (    cntRcv /  100)      ;
			data[retLen++] = '0' + ((    cntRcv /   10) % 10);
			data[retLen++] = '0' + (     cntRcv         % 10);
#endif
			data[retLen++] = ':';
    5ad6:	8a e3       	ldi	r24, 0x3A	; 58
    5ad8:	84 83       	std	Z+4, r24	; 0x04
    5ada:	15 e0       	ldi	r17, 0x05	; 5
    5adc:	01 c0       	rjmp	.+2      	; 0x5ae0 <usbFunctionRead+0x15c>
/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionRead(uchar *data, uchar len)
{
	uint8_t retLen = 0;
    5ade:	10 e0       	ldi	r17, 0x00	; 0
#endif
			data[retLen++] = ':';
		}
	}

	signed int readCnt = min(cntRcv, len) - retLen;			// number of characters to be sent - no trailing \0 character counted
    5ae0:	e1 2e       	mov	r14, r17
    5ae2:	f1 2c       	mov	r15, r1
    5ae4:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <cntRcv>
    5ae8:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <cntRcv+0x1>
    5aec:	50 e0       	ldi	r21, 0x00	; 0
    5aee:	84 17       	cp	r24, r20
    5af0:	95 07       	cpc	r25, r21
    5af2:	08 f4       	brcc	.+2      	; 0x5af6 <usbFunctionRead+0x172>
    5af4:	ac 01       	movw	r20, r24
    5af6:	6f 01       	movw	r12, r30
    5af8:	ea 01       	movw	r28, r20
    5afa:	ce 19       	sub	r28, r14
    5afc:	df 09       	sbc	r29, r15
	if (readCnt > 0) {
    5afe:	1c 16       	cp	r1, r28
    5b00:	1d 06       	cpc	r1, r29
    5b02:	24 f5       	brge	.+72     	; 0x5b4c <usbFunctionRead+0x1c8>
		uint8_t hasSemaphore;
		do {
			hasSemaphore = ringbuffer_fw_getSemaphore(false);
    5b04:	80 e0       	ldi	r24, 0x00	; 0
    5b06:	0e 94 e6 23 	call	0x47cc	; 0x47cc <ringbuffer_fw_getSemaphore>
			if (!hasSemaphore) {
			    wdt_reset();
			    usbPoll();
			}
#endif
		} while(!hasSemaphore);
    5b0a:	88 23       	and	r24, r24
    5b0c:	d9 f3       	breq	.-10     	; 0x5b04 <usbFunctionRead+0x180>

		/* pull next part of the message from the ring buffer and send it to the host IN */
		uint8_t pullLen = ringbuffer_fw_ringBufferPull(false, data + retLen, readCnt + 1);
    5b0e:	4c 2f       	mov	r20, r28
    5b10:	4f 5f       	subi	r20, 0xFF	; 255
    5b12:	b6 01       	movw	r22, r12
    5b14:	6e 0d       	add	r22, r14
    5b16:	7f 1d       	adc	r23, r15
    5b18:	80 e0       	ldi	r24, 0x00	; 0
    5b1a:	0e 94 af 24 	call	0x495e	; 0x495e <ringbuffer_fw_ringBufferPull>
    5b1e:	c8 2f       	mov	r28, r24
		ringbuffer_fw_freeSemaphore(false);
    5b20:	80 e0       	ldi	r24, 0x00	; 0
    5b22:	0e 94 f7 23 	call	0x47ee	; 0x47ee <ringbuffer_fw_freeSemaphore>
		cntRcv -= retLen + pullLen;
    5b26:	4c 2f       	mov	r20, r28
    5b28:	50 e0       	ldi	r21, 0x00	; 0
    5b2a:	41 0f       	add	r20, r17
    5b2c:	51 1d       	adc	r21, r1
    5b2e:	20 91 16 05 	lds	r18, 0x0516	; 0x800516 <cntRcv>
    5b32:	30 91 17 05 	lds	r19, 0x0517	; 0x800517 <cntRcv+0x1>
    5b36:	24 1b       	sub	r18, r20
    5b38:	35 0b       	sbc	r19, r21
    5b3a:	30 93 17 05 	sts	0x0517, r19	; 0x800517 <cntRcv+0x1>
    5b3e:	20 93 16 05 	sts	0x0516, r18	; 0x800516 <cntRcv>
		return retLen + pullLen;
    5b42:	8c 2f       	mov	r24, r28
    5b44:	81 0f       	add	r24, r17
    5b46:	03 c0       	rjmp	.+6      	; 0x5b4e <usbFunctionRead+0x1ca>
/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionRead(uchar *data, uchar len)
{
	uint8_t retLen = 0;
    5b48:	80 e0       	ldi	r24, 0x00	; 0
    5b4a:	01 c0       	rjmp	.+2      	; 0x5b4e <usbFunctionRead+0x1ca>
    5b4c:	81 2f       	mov	r24, r17
		return retLen + pullLen;

	} else {
		return retLen;
	}
}
    5b4e:	df 91       	pop	r29
    5b50:	cf 91       	pop	r28
    5b52:	1f 91       	pop	r17
    5b54:	ff 90       	pop	r15
    5b56:	ef 90       	pop	r14
    5b58:	df 90       	pop	r13
    5b5a:	cf 90       	pop	r12
    5b5c:	08 95       	ret

00005b5e <usbFunctionWrite>:

/* usbFunctionWrite() is called when the host sends a chunk of data to the
 * device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionWrite(uchar *data, uchar len)
{
    5b5e:	1f 93       	push	r17
    5b60:	cf 93       	push	r28
    5b62:	df 93       	push	r29
    5b64:	c6 2f       	mov	r28, r22
	if (cntSend > len) {
    5b66:	46 2f       	mov	r20, r22
    5b68:	50 e0       	ldi	r21, 0x00	; 0
    5b6a:	20 91 14 05 	lds	r18, 0x0514	; 0x800514 <cntSend>
    5b6e:	30 91 15 05 	lds	r19, 0x0515	; 0x800515 <cntSend+0x1>
    5b72:	42 17       	cp	r20, r18
    5b74:	53 07       	cpc	r21, r19
    5b76:	c0 f4       	brcc	.+48     	; 0x5ba8 <usbFunctionWrite+0x4a>
		/* append first or any substring to the inBuffer */
		cntSend -= len;
    5b78:	24 1b       	sub	r18, r20
    5b7a:	35 0b       	sbc	r19, r21
    5b7c:	30 93 15 05 	sts	0x0515, r19	; 0x800515 <cntSend+0x1>
    5b80:	20 93 14 05 	sts	0x0514, r18	; 0x800514 <cntSend>

		uint8_t sreg = SREG;
    5b84:	1f b7       	in	r17, 0x3f	; 63
		cli();
    5b86:	f8 94       	cli
		memcpy(&(usbIsrCtxtBuffer[usbIsrCtxtBufferIdx]), data, len);
    5b88:	d0 91 13 05 	lds	r29, 0x0513	; 0x800513 <usbIsrCtxtBufferIdx>
    5b8c:	2d 2f       	mov	r18, r29
    5b8e:	30 e0       	ldi	r19, 0x00	; 0
    5b90:	bc 01       	movw	r22, r24
    5b92:	c9 01       	movw	r24, r18
    5b94:	87 5b       	subi	r24, 0xB7	; 183
    5b96:	9e 4f       	sbci	r25, 0xFE	; 254
    5b98:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <memcpy>
		usbIsrCtxtBufferIdx += len;
    5b9c:	cd 0f       	add	r28, r29
    5b9e:	c0 93 13 05 	sts	0x0513, r28	; 0x800513 <usbIsrCtxtBufferIdx>
		SREG = sreg;
    5ba2:	1f bf       	out	0x3f, r17	; 63
		return 0;											// go ahead with more transfer requests
    5ba4:	80 e0       	ldi	r24, 0x00	; 0
    5ba6:	29 c0       	rjmp	.+82     	; 0x5bfa <usbFunctionWrite+0x9c>

	} else {
		/* append last substring to the inBuffer and push it to the OUT ring buffer (host --> USB function) */
		if (cntSend > 0) {
    5ba8:	23 2b       	or	r18, r19
    5baa:	a9 f0       	breq	.+42     	; 0x5bd6 <usbFunctionWrite+0x78>
			uint8_t sreg = SREG;
    5bac:	1f b7       	in	r17, 0x3f	; 63
			cli();
    5bae:	f8 94       	cli
			memcpy(&(usbIsrCtxtBuffer[usbIsrCtxtBufferIdx]), data, cntSend);
    5bb0:	c0 91 14 05 	lds	r28, 0x0514	; 0x800514 <cntSend>
    5bb4:	50 91 15 05 	lds	r21, 0x0515	; 0x800515 <cntSend+0x1>
    5bb8:	d0 91 13 05 	lds	r29, 0x0513	; 0x800513 <usbIsrCtxtBufferIdx>
    5bbc:	2d 2f       	mov	r18, r29
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	4c 2f       	mov	r20, r28
    5bc2:	bc 01       	movw	r22, r24
    5bc4:	c9 01       	movw	r24, r18
    5bc6:	87 5b       	subi	r24, 0xB7	; 183
    5bc8:	9e 4f       	sbci	r25, 0xFE	; 254
    5bca:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <memcpy>
			usbIsrCtxtBufferIdx += cntSend;
    5bce:	cd 0f       	add	r28, r29
    5bd0:	c0 93 13 05 	sts	0x0513, r28	; 0x800513 <usbIsrCtxtBufferIdx>
			SREG = sreg;
    5bd4:	1f bf       	out	0x3f, r17	; 63
		}

		/* push OUT string (send) from host to the USB function's ring buffer */
		ringbuffer_fw_ringBufferWaitAppend(true, false, usbIsrCtxtBuffer, usbIsrCtxtBufferIdx);
    5bd6:	20 91 13 05 	lds	r18, 0x0513	; 0x800513 <usbIsrCtxtBufferIdx>
    5bda:	49 e4       	ldi	r20, 0x49	; 73
    5bdc:	51 e0       	ldi	r21, 0x01	; 1
    5bde:	60 e0       	ldi	r22, 0x00	; 0
    5be0:	81 e0       	ldi	r24, 0x01	; 1
    5be2:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <ringbuffer_fw_ringBufferWaitAppend>

		uint8_t sreg = SREG;
    5be6:	8f b7       	in	r24, 0x3f	; 63
		cli();
    5be8:	f8 94       	cli
		usbIsrCtxtBufferIdx = cntSend = 0;
    5bea:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <cntSend+0x1>
    5bee:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <cntSend>
    5bf2:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <usbIsrCtxtBufferIdx>
		SREG = sreg;
    5bf6:	8f bf       	out	0x3f, r24	; 63
		return 1;											// no more data transfers accepted
    5bf8:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    5bfa:	df 91       	pop	r29
    5bfc:	cf 91       	pop	r28
    5bfe:	1f 91       	pop	r17
    5c00:	08 95       	ret

00005c02 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    5c02:	cf 93       	push	r28
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
    5c04:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <usbTxStatus1>
    5c08:	2e 31       	cpi	r18, 0x1E	; 30
    5c0a:	01 f1       	breq	.+64     	; 0x5c4c <usbSetInterrupt+0x4a>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    5c0c:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <usbTxStatus1>
    5c10:	24 ff       	sbrs	r18, 4
    5c12:	07 c0       	rjmp	.+14     	; 0x5c22 <usbSetInterrupt+0x20>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    5c14:	ef e8       	ldi	r30, 0x8F	; 143
    5c16:	f5 e0       	ldi	r31, 0x05	; 5
    5c18:	31 81       	ldd	r19, Z+1	; 0x01
    5c1a:	28 e8       	ldi	r18, 0x88	; 136
    5c1c:	23 27       	eor	r18, r19
    5c1e:	21 83       	std	Z+1, r18	; 0x01
    5c20:	03 c0       	rjmp	.+6      	; 0x5c28 <usbSetInterrupt+0x26>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    5c22:	2a e5       	ldi	r18, 0x5A	; 90
    5c24:	20 93 8f 05 	sts	0x058F, r18	; 0x80058f <usbTxStatus1>
    5c28:	e8 2f       	mov	r30, r24
    5c2a:	f9 2f       	mov	r31, r25
    5c2c:	a1 e9       	ldi	r26, 0x91	; 145
    5c2e:	b5 e0       	ldi	r27, 0x05	; 5
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    5c30:	86 2f       	mov	r24, r22
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    5c32:	91 91       	ld	r25, Z+
    5c34:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    5c36:	81 50       	subi	r24, 0x01	; 1
    5c38:	e1 f7       	brne	.-8      	; 0x5c32 <usbSetInterrupt+0x30>
    5c3a:	c6 2f       	mov	r28, r22
    usbCrc16Append(&txStatus->buffer[1], len);
    5c3c:	81 e9       	ldi	r24, 0x91	; 145
    5c3e:	95 e0       	ldi	r25, 0x05	; 5
    5c40:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    5c44:	64 e0       	ldi	r22, 0x04	; 4
    5c46:	6c 0f       	add	r22, r28
    5c48:	60 93 8f 05 	sts	0x058F, r22	; 0x80058f <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
    5c4c:	cf 91       	pop	r28
    5c4e:	08 95       	ret

00005c50 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
    5c50:	cf 93       	push	r28
    5c52:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
    5c54:	60 91 0c 08 	lds	r22, 0x080C	; 0x80080c <usbRxLen>
    5c58:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
    5c5a:	0a f4       	brpl	.+2      	; 0x5c5e <usbPoll+0xe>
    5c5c:	fb c0       	rjmp	.+502    	; 0x5e54 <usbPoll+0x204>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    5c5e:	20 91 09 08 	lds	r18, 0x0809	; 0x800809 <usbInputBufOffset>
    5c62:	8c e0       	ldi	r24, 0x0C	; 12
    5c64:	90 e0       	ldi	r25, 0x00	; 0
    5c66:	82 1b       	sub	r24, r18
    5c68:	91 09       	sbc	r25, r1
    5c6a:	ec 01       	movw	r28, r24
    5c6c:	c0 5f       	subi	r28, 0xF0	; 240
    5c6e:	d7 4f       	sbci	r29, 0xF7	; 247
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
    5c70:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <usbRxToken>
    5c74:	8d 32       	cpi	r24, 0x2D	; 45
    5c76:	09 f0       	breq	.+2      	; 0x5c7a <usbPoll+0x2a>
    5c78:	db c0       	rjmp	.+438    	; 0x5e30 <usbPoll+0x1e0>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
    5c7a:	68 30       	cpi	r22, 0x08	; 8
    5c7c:	09 f0       	breq	.+2      	; 0x5c80 <usbPoll+0x30>
    5c7e:	e8 c0       	rjmp	.+464    	; 0x5e50 <usbPoll+0x200>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    5c80:	83 ec       	ldi	r24, 0xC3	; 195
    5c82:	80 93 fc 07 	sts	0x07FC, r24	; 0x8007fc <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    5c86:	8a e5       	ldi	r24, 0x5A	; 90
    5c88:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <usbTxLen>
        usbMsgFlags = 0;
    5c8c:	10 92 db 05 	sts	0x05DB, r1	; 0x8005db <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
    5c90:	88 81       	ld	r24, Y
    5c92:	98 2f       	mov	r25, r24
    5c94:	90 76       	andi	r25, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    5c96:	21 f0       	breq	.+8      	; 0x5ca0 <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
    5c98:	ce 01       	movw	r24, r28
    5c9a:	0e 94 80 2c 	call	0x5900	; 0x5900 <usbFunctionSetup>
    5c9e:	b4 c0       	rjmp	.+360    	; 0x5e08 <usbPoll+0x1b8>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    5ca0:	2a 81       	ldd	r18, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
    5ca2:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    5ca4:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
    5ca8:	99 81       	ldd	r25, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    5caa:	91 11       	cpse	r25, r1
    5cac:	13 c0       	rjmp	.+38     	; 0x5cd4 <usbPoll+0x84>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
    5cae:	8f 71       	andi	r24, 0x1F	; 31
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
    5cb0:	82 30       	cpi	r24, 0x02	; 2
    5cb2:	51 f4       	brne	.+20     	; 0x5cc8 <usbPoll+0x78>
    5cb4:	31 38       	cpi	r19, 0x81	; 129
    5cb6:	41 f4       	brne	.+16     	; 0x5cc8 <usbPoll+0x78>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
    5cb8:	90 91 8f 05 	lds	r25, 0x058F	; 0x80058f <usbTxStatus1>
    5cbc:	81 e0       	ldi	r24, 0x01	; 1
    5cbe:	9e 31       	cpi	r25, 0x1E	; 30
    5cc0:	09 f0       	breq	.+2      	; 0x5cc4 <usbPoll+0x74>
    5cc2:	80 e0       	ldi	r24, 0x00	; 0
    5cc4:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <usbTxBuf+0x9>
#endif
        dataPtr[1] = 0;
    5cc8:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5ccc:	25 e0       	ldi	r18, 0x05	; 5
    5cce:	38 e0       	ldi	r19, 0x08	; 8
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
    5cd0:	82 e0       	ldi	r24, 0x02	; 2
    5cd2:	96 c0       	rjmp	.+300    	; 0x5e00 <usbPoll+0x1b0>
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
    5cd4:	89 2f       	mov	r24, r25
    5cd6:	8d 7f       	andi	r24, 0xFD	; 253
    5cd8:	81 30       	cpi	r24, 0x01	; 1
    5cda:	99 f4       	brne	.+38     	; 0x5d02 <usbPoll+0xb2>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
    5cdc:	21 11       	cpse	r18, r1
    5cde:	7d c0       	rjmp	.+250    	; 0x5dda <usbPoll+0x18a>
    5ce0:	31 38       	cpi	r19, 0x81	; 129
    5ce2:	09 f0       	breq	.+2      	; 0x5ce6 <usbPoll+0x96>
    5ce4:	7e c0       	rjmp	.+252    	; 0x5de2 <usbPoll+0x192>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
    5ce6:	91 30       	cpi	r25, 0x01	; 1
    5ce8:	11 f0       	breq	.+4      	; 0x5cee <usbPoll+0x9e>
    5cea:	8e e1       	ldi	r24, 0x1E	; 30
    5cec:	01 c0       	rjmp	.+2      	; 0x5cf0 <usbPoll+0xa0>
    5cee:	8a e5       	ldi	r24, 0x5A	; 90
    5cf0:	ef e8       	ldi	r30, 0x8F	; 143
    5cf2:	f5 e0       	ldi	r31, 0x05	; 5
    5cf4:	80 83       	st	Z, r24
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    5cf6:	8b e4       	ldi	r24, 0x4B	; 75
    5cf8:	81 83       	std	Z+1, r24	; 0x01
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5cfa:	25 e0       	ldi	r18, 0x05	; 5
    5cfc:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5cfe:	80 e0       	ldi	r24, 0x00	; 0
    5d00:	7f c0       	rjmp	.+254    	; 0x5e00 <usbPoll+0x1b0>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    5d02:	95 30       	cpi	r25, 0x05	; 5
    5d04:	31 f4       	brne	.+12     	; 0x5d12 <usbPoll+0xc2>
        usbNewDeviceAddr = value;
    5d06:	20 93 0d 08 	sts	0x080D, r18	; 0x80080d <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5d0a:	25 e0       	ldi	r18, 0x05	; 5
    5d0c:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5d0e:	80 e0       	ldi	r24, 0x00	; 0
    5d10:	77 c0       	rjmp	.+238    	; 0x5e00 <usbPoll+0x1b0>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    5d12:	96 30       	cpi	r25, 0x06	; 6
    5d14:	09 f0       	breq	.+2      	; 0x5d18 <usbPoll+0xc8>
    5d16:	46 c0       	rjmp	.+140    	; 0x5da4 <usbPoll+0x154>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    5d18:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    5d1a:	81 30       	cpi	r24, 0x01	; 1
    5d1c:	41 f4       	brne	.+16     	; 0x5d2e <usbPoll+0xde>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    5d1e:	8f e8       	ldi	r24, 0x8F	; 143
    5d20:	9e e0       	ldi	r25, 0x0E	; 14
    5d22:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5d26:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5d2a:	82 e1       	ldi	r24, 0x12	; 18
    5d2c:	37 c0       	rjmp	.+110    	; 0x5d9c <usbPoll+0x14c>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    5d2e:	82 30       	cpi	r24, 0x02	; 2
    5d30:	41 f4       	brne	.+16     	; 0x5d42 <usbPoll+0xf2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    5d32:	86 e7       	ldi	r24, 0x76	; 118
    5d34:	9e e0       	ldi	r25, 0x0E	; 14
    5d36:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5d3a:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5d3e:	89 e1       	ldi	r24, 0x19	; 25
    5d40:	2d c0       	rjmp	.+90     	; 0x5d9c <usbPoll+0x14c>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    5d42:	83 30       	cpi	r24, 0x03	; 3
    5d44:	41 f5       	brne	.+80     	; 0x5d96 <usbPoll+0x146>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
    5d46:	21 11       	cpse	r18, r1
    5d48:	08 c0       	rjmp	.+16     	; 0x5d5a <usbPoll+0x10a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    5d4a:	89 ee       	ldi	r24, 0xE9	; 233
    5d4c:	9e e0       	ldi	r25, 0x0E	; 14
    5d4e:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5d52:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5d56:	84 e0       	ldi	r24, 0x04	; 4
    5d58:	21 c0       	rjmp	.+66     	; 0x5d9c <usbPoll+0x14c>
        SWITCH_CASE(1)
    5d5a:	21 30       	cpi	r18, 0x01	; 1
    5d5c:	41 f4       	brne	.+16     	; 0x5d6e <usbPoll+0x11e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    5d5e:	8b ed       	ldi	r24, 0xDB	; 219
    5d60:	9e e0       	ldi	r25, 0x0E	; 14
    5d62:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5d66:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5d6a:	8e e0       	ldi	r24, 0x0E	; 14
    5d6c:	17 c0       	rjmp	.+46     	; 0x5d9c <usbPoll+0x14c>
        SWITCH_CASE(2)
    5d6e:	22 30       	cpi	r18, 0x02	; 2
    5d70:	41 f4       	brne	.+16     	; 0x5d82 <usbPoll+0x132>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    5d72:	81 eb       	ldi	r24, 0xB1	; 177
    5d74:	9e e0       	ldi	r25, 0x0E	; 14
    5d76:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5d7a:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5d7e:	8a e2       	ldi	r24, 0x2A	; 42
    5d80:	0d c0       	rjmp	.+26     	; 0x5d9c <usbPoll+0x14c>
        SWITCH_CASE(3)
    5d82:	23 30       	cpi	r18, 0x03	; 3
    5d84:	51 f4       	brne	.+20     	; 0x5d9a <usbPoll+0x14a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
    5d86:	81 ea       	ldi	r24, 0xA1	; 161
    5d88:	9e e0       	ldi	r25, 0x0E	; 14
    5d8a:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5d8e:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5d92:	80 e1       	ldi	r24, 0x10	; 16
    5d94:	03 c0       	rjmp	.+6      	; 0x5d9c <usbPoll+0x14c>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5d96:	80 e0       	ldi	r24, 0x00	; 0
    5d98:	01 c0       	rjmp	.+2      	; 0x5d9c <usbPoll+0x14c>
    5d9a:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    5d9c:	90 e4       	ldi	r25, 0x40	; 64
    5d9e:	90 93 db 05 	sts	0x05DB, r25	; 0x8005db <usbMsgFlags>
    5da2:	32 c0       	rjmp	.+100    	; 0x5e08 <usbPoll+0x1b8>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    5da4:	98 30       	cpi	r25, 0x08	; 8
    5da6:	09 f1       	breq	.+66     	; 0x5dea <usbPoll+0x19a>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    5da8:	99 30       	cpi	r25, 0x09	; 9
    5daa:	49 f4       	brne	.+18     	; 0x5dbe <usbPoll+0x16e>
        usbConfiguration = value;
    5dac:	20 93 0f 08 	sts	0x080F, r18	; 0x80080f <usbConfiguration>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    5db0:	8a e5       	ldi	r24, 0x5A	; 90
    5db2:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <usbTxStatus1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5db6:	25 e0       	ldi	r18, 0x05	; 5
    5db8:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5dba:	80 e0       	ldi	r24, 0x00	; 0
    5dbc:	21 c0       	rjmp	.+66     	; 0x5e00 <usbPoll+0x1b0>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    5dbe:	9a 30       	cpi	r25, 0x0A	; 10
    5dc0:	c1 f0       	breq	.+48     	; 0x5df2 <usbPoll+0x1a2>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    5dc2:	9b 30       	cpi	r25, 0x0B	; 11
    5dc4:	d1 f4       	brne	.+52     	; 0x5dfa <usbPoll+0x1aa>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    5dc6:	ef e8       	ldi	r30, 0x8F	; 143
    5dc8:	f5 e0       	ldi	r31, 0x05	; 5
    5dca:	8b e4       	ldi	r24, 0x4B	; 75
    5dcc:	81 83       	std	Z+1, r24	; 0x01
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    5dce:	8a e5       	ldi	r24, 0x5A	; 90
    5dd0:	80 83       	st	Z, r24
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5dd2:	25 e0       	ldi	r18, 0x05	; 5
    5dd4:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5dd6:	80 e0       	ldi	r24, 0x00	; 0
    5dd8:	13 c0       	rjmp	.+38     	; 0x5e00 <usbPoll+0x1b0>
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5dda:	25 e0       	ldi	r18, 0x05	; 5
    5ddc:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5dde:	80 e0       	ldi	r24, 0x00	; 0
    5de0:	0f c0       	rjmp	.+30     	; 0x5e00 <usbPoll+0x1b0>
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5de2:	25 e0       	ldi	r18, 0x05	; 5
    5de4:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5de6:	80 e0       	ldi	r24, 0x00	; 0
    5de8:	0b c0       	rjmp	.+22     	; 0x5e00 <usbPoll+0x1b0>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
    5dea:	2f e0       	ldi	r18, 0x0F	; 15
    5dec:	38 e0       	ldi	r19, 0x08	; 8
        len = 1;
    5dee:	81 e0       	ldi	r24, 0x01	; 1
    5df0:	07 c0       	rjmp	.+14     	; 0x5e00 <usbPoll+0x1b0>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5df2:	25 e0       	ldi	r18, 0x05	; 5
    5df4:	38 e0       	ldi	r19, 0x08	; 8
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
    5df6:	81 e0       	ldi	r24, 0x01	; 1
    5df8:	03 c0       	rjmp	.+6      	; 0x5e00 <usbPoll+0x1b0>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5dfa:	25 e0       	ldi	r18, 0x05	; 5
    5dfc:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5dfe:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
    5e00:	30 93 0b 08 	sts	0x080B, r19	; 0x80080b <usbMsgPtr+0x1>
    5e04:	20 93 0a 08 	sts	0x080A, r18	; 0x80080a <usbMsgPtr>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
    5e08:	8f 3f       	cpi	r24, 0xFF	; 255
    5e0a:	41 f4       	brne	.+16     	; 0x5e1c <usbPoll+0x1cc>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
    5e0c:	98 81       	ld	r25, Y
    5e0e:	99 23       	and	r25, r25
    5e10:	0c f4       	brge	.+2      	; 0x5e14 <usbPoll+0x1c4>
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
    5e12:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
    5e14:	90 e8       	ldi	r25, 0x80	; 128
    5e16:	90 93 db 05 	sts	0x05DB, r25	; 0x8005db <usbMsgFlags>
    5e1a:	07 c0       	rjmp	.+14     	; 0x5e2a <usbPoll+0x1da>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    5e1c:	9f 81       	ldd	r25, Y+7	; 0x07
    5e1e:	91 11       	cpse	r25, r1
    5e20:	04 c0       	rjmp	.+8      	; 0x5e2a <usbPoll+0x1da>
    5e22:	9e 81       	ldd	r25, Y+6	; 0x06
    5e24:	98 17       	cp	r25, r24
    5e26:	08 f4       	brcc	.+2      	; 0x5e2a <usbPoll+0x1da>
    5e28:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    5e2a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <usbMsgLen>
    5e2e:	10 c0       	rjmp	.+32     	; 0x5e50 <usbPoll+0x200>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    5e30:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <usbMsgFlags>
    5e34:	88 23       	and	r24, r24
    5e36:	64 f4       	brge	.+24     	; 0x5e50 <usbPoll+0x200>
            uchar rval = usbFunctionWrite(data, len);
    5e38:	ce 01       	movw	r24, r28
    5e3a:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
    5e3e:	8f 3f       	cpi	r24, 0xFF	; 255
    5e40:	21 f4       	brne	.+8      	; 0x5e4a <usbPoll+0x1fa>
                usbTxLen = USBPID_STALL;
    5e42:	8e e1       	ldi	r24, 0x1E	; 30
    5e44:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <usbTxLen>
    5e48:	03 c0       	rjmp	.+6      	; 0x5e50 <usbPoll+0x200>
            }else if(rval != 0){    /* This was the final package */
    5e4a:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
    5e4c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    5e50:	10 92 0c 08 	sts	0x080C, r1	; 0x80080c <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    5e54:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <usbTxLen>
    5e58:	84 ff       	sbrs	r24, 4
    5e5a:	5c c0       	rjmp	.+184    	; 0x5f14 <usbPoll+0x2c4>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    5e5c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <usbMsgLen>
    5e60:	9f 3f       	cpi	r25, 0xFF	; 255
    5e62:	09 f4       	brne	.+2      	; 0x5e66 <usbPoll+0x216>
    5e64:	57 c0       	rjmp	.+174    	; 0x5f14 <usbPoll+0x2c4>
    5e66:	c9 2f       	mov	r28, r25
    5e68:	99 30       	cpi	r25, 0x09	; 9
    5e6a:	08 f0       	brcs	.+2      	; 0x5e6e <usbPoll+0x21e>
    5e6c:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    5e6e:	9c 1b       	sub	r25, r28
    5e70:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    5e74:	ec ef       	ldi	r30, 0xFC	; 252
    5e76:	f7 e0       	ldi	r31, 0x07	; 7
    5e78:	90 81       	ld	r25, Z
    5e7a:	88 e8       	ldi	r24, 0x88	; 136
    5e7c:	89 27       	eor	r24, r25
    5e7e:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    5e80:	cc 23       	and	r28, r28
    5e82:	09 f4       	brne	.+2      	; 0x5e86 <usbPoll+0x236>
    5e84:	58 c0       	rjmp	.+176    	; 0x5f36 <usbPoll+0x2e6>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    5e86:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <usbMsgFlags>
    5e8a:	88 23       	and	r24, r24
    5e8c:	3c f4       	brge	.+14     	; 0x5e9c <usbPoll+0x24c>
            len = usbFunctionRead(data, len);
    5e8e:	6c 2f       	mov	r22, r28
    5e90:	8d ef       	ldi	r24, 0xFD	; 253
    5e92:	97 e0       	ldi	r25, 0x07	; 7
    5e94:	0e 94 c2 2c 	call	0x5984	; 0x5984 <usbFunctionRead>
    5e98:	c8 2f       	mov	r28, r24
    5e9a:	28 c0       	rjmp	.+80     	; 0x5eec <usbPoll+0x29c>
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
    5e9c:	20 91 0a 08 	lds	r18, 0x080A	; 0x80080a <usbMsgPtr>
    5ea0:	30 91 0b 08 	lds	r19, 0x080B	; 0x80080b <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    5ea4:	86 ff       	sbrs	r24, 6
    5ea6:	10 c0       	rjmp	.+32     	; 0x5ec8 <usbPoll+0x278>
    5ea8:	ad ef       	ldi	r26, 0xFD	; 253
    5eaa:	b7 e0       	ldi	r27, 0x07	; 7
    5eac:	f9 01       	movw	r30, r18
    5eae:	9c 2f       	mov	r25, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    5eb0:	84 91       	lpm	r24, Z
                    *data++ = c;
    5eb2:	8d 93       	st	X+, r24
                    r++;
    5eb4:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
    5eb6:	91 50       	subi	r25, 0x01	; 1
    5eb8:	d9 f7       	brne	.-10     	; 0x5eb0 <usbPoll+0x260>
    5eba:	2f 5f       	subi	r18, 0xFF	; 255
    5ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ebe:	8f ef       	ldi	r24, 0xFF	; 255
    5ec0:	8c 0f       	add	r24, r28
    5ec2:	28 0f       	add	r18, r24
    5ec4:	31 1d       	adc	r19, r1
    5ec6:	0e c0       	rjmp	.+28     	; 0x5ee4 <usbPoll+0x294>
    5ec8:	ad ef       	ldi	r26, 0xFD	; 253
    5eca:	b7 e0       	ldi	r27, 0x07	; 7
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    5ecc:	f9 01       	movw	r30, r18
    5ece:	9c 2f       	mov	r25, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
    5ed0:	81 91       	ld	r24, Z+
    5ed2:	8d 93       	st	X+, r24
                    r++;
                }while(--i);
    5ed4:	91 50       	subi	r25, 0x01	; 1
    5ed6:	e1 f7       	brne	.-8      	; 0x5ed0 <usbPoll+0x280>
    5ed8:	2f 5f       	subi	r18, 0xFF	; 255
    5eda:	3f 4f       	sbci	r19, 0xFF	; 255
    5edc:	8f ef       	ldi	r24, 0xFF	; 255
    5ede:	8c 0f       	add	r24, r28
    5ee0:	28 0f       	add	r18, r24
    5ee2:	31 1d       	adc	r19, r1
            }
            usbMsgPtr = r;
    5ee4:	30 93 0b 08 	sts	0x080B, r19	; 0x80080b <usbMsgPtr+0x1>
    5ee8:	20 93 0a 08 	sts	0x080A, r18	; 0x80080a <usbMsgPtr>
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
    5eec:	c9 30       	cpi	r28, 0x09	; 9
    5eee:	60 f4       	brcc	.+24     	; 0x5f08 <usbPoll+0x2b8>
        usbCrc16Append(&usbTxBuf[1], len);
    5ef0:	6c 2f       	mov	r22, r28
    5ef2:	8d ef       	ldi	r24, 0xFD	; 253
    5ef4:	97 e0       	ldi	r25, 0x07	; 7
    5ef6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    5efa:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    5efc:	cc 30       	cpi	r28, 0x0C	; 12
    5efe:	40 f4       	brcc	.+16     	; 0x5f10 <usbPoll+0x2c0>
            usbMsgLen = USB_NO_MSG;
    5f00:	8f ef       	ldi	r24, 0xFF	; 255
    5f02:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <usbMsgLen>
    5f06:	04 c0       	rjmp	.+8      	; 0x5f10 <usbPoll+0x2c0>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    5f08:	8f ef       	ldi	r24, 0xFF	; 255
    5f0a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <usbMsgLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
    5f0e:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    5f10:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    5f14:	86 b1       	in	r24, 0x06	; 6
    5f16:	8c 70       	andi	r24, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
    5f18:	a9 f4       	brne	.+42     	; 0x5f44 <usbPoll+0x2f4>
    5f1a:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    5f1c:	86 b1       	in	r24, 0x06	; 6
    5f1e:	8c 70       	andi	r24, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
    5f20:	89 f4       	brne	.+34     	; 0x5f44 <usbPoll+0x2f4>
    5f22:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    5f24:	d9 f7       	brne	.-10     	; 0x5f1c <usbPoll+0x2cc>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    5f26:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <usbNewDeviceAddr>
    usbDeviceAddr = 0;
    5f2a:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <usbDeviceAddr>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    5f2e:	8a e5       	ldi	r24, 0x5A	; 90
    5f30:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <usbTxStatus1>
    5f34:	07 c0       	rjmp	.+14     	; 0x5f44 <usbPoll+0x2f4>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    5f36:	60 e0       	ldi	r22, 0x00	; 0
    5f38:	8d ef       	ldi	r24, 0xFD	; 253
    5f3a:	97 e0       	ldi	r25, 0x07	; 7
    5f3c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    5f40:	c4 e0       	ldi	r28, 0x04	; 4
    5f42:	de cf       	rjmp	.-68     	; 0x5f00 <usbPoll+0x2b0>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    5f44:	df 91       	pop	r29
    5f46:	cf 91       	pop	r28
    5f48:	08 95       	ret

00005f4a <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    5f4a:	e9 e6       	ldi	r30, 0x69	; 105
    5f4c:	f0 e0       	ldi	r31, 0x00	; 0
    5f4e:	80 81       	ld	r24, Z
    5f50:	83 60       	ori	r24, 0x03	; 3
    5f52:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    5f54:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    5f56:	ef e8       	ldi	r30, 0x8F	; 143
    5f58:	f5 e0       	ldi	r31, 0x05	; 5
    5f5a:	8b e4       	ldi	r24, 0x4B	; 75
    5f5c:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    5f5e:	8a e5       	ldi	r24, 0x5A	; 90
    5f60:	80 83       	st	Z, r24
    5f62:	08 95       	ret

00005f64 <__subsf3>:
    5f64:	50 58       	subi	r21, 0x80	; 128

00005f66 <__addsf3>:
    5f66:	bb 27       	eor	r27, r27
    5f68:	aa 27       	eor	r26, r26
    5f6a:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__addsf3x>
    5f6e:	0c 94 84 31 	jmp	0x6308	; 0x6308 <__fp_round>
    5f72:	0e 94 76 31 	call	0x62ec	; 0x62ec <__fp_pscA>
    5f76:	38 f0       	brcs	.+14     	; 0x5f86 <__addsf3+0x20>
    5f78:	0e 94 7d 31 	call	0x62fa	; 0x62fa <__fp_pscB>
    5f7c:	20 f0       	brcs	.+8      	; 0x5f86 <__addsf3+0x20>
    5f7e:	39 f4       	brne	.+14     	; 0x5f8e <__addsf3+0x28>
    5f80:	9f 3f       	cpi	r25, 0xFF	; 255
    5f82:	19 f4       	brne	.+6      	; 0x5f8a <__addsf3+0x24>
    5f84:	26 f4       	brtc	.+8      	; 0x5f8e <__addsf3+0x28>
    5f86:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <__fp_nan>
    5f8a:	0e f4       	brtc	.+2      	; 0x5f8e <__addsf3+0x28>
    5f8c:	e0 95       	com	r30
    5f8e:	e7 fb       	bst	r30, 7
    5f90:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__fp_inf>

00005f94 <__addsf3x>:
    5f94:	e9 2f       	mov	r30, r25
    5f96:	0e 94 95 31 	call	0x632a	; 0x632a <__fp_split3>
    5f9a:	58 f3       	brcs	.-42     	; 0x5f72 <__addsf3+0xc>
    5f9c:	ba 17       	cp	r27, r26
    5f9e:	62 07       	cpc	r22, r18
    5fa0:	73 07       	cpc	r23, r19
    5fa2:	84 07       	cpc	r24, r20
    5fa4:	95 07       	cpc	r25, r21
    5fa6:	20 f0       	brcs	.+8      	; 0x5fb0 <__addsf3x+0x1c>
    5fa8:	79 f4       	brne	.+30     	; 0x5fc8 <__addsf3x+0x34>
    5faa:	a6 f5       	brtc	.+104    	; 0x6014 <__addsf3x+0x80>
    5fac:	0c 94 cf 31 	jmp	0x639e	; 0x639e <__fp_zero>
    5fb0:	0e f4       	brtc	.+2      	; 0x5fb4 <__addsf3x+0x20>
    5fb2:	e0 95       	com	r30
    5fb4:	0b 2e       	mov	r0, r27
    5fb6:	ba 2f       	mov	r27, r26
    5fb8:	a0 2d       	mov	r26, r0
    5fba:	0b 01       	movw	r0, r22
    5fbc:	b9 01       	movw	r22, r18
    5fbe:	90 01       	movw	r18, r0
    5fc0:	0c 01       	movw	r0, r24
    5fc2:	ca 01       	movw	r24, r20
    5fc4:	a0 01       	movw	r20, r0
    5fc6:	11 24       	eor	r1, r1
    5fc8:	ff 27       	eor	r31, r31
    5fca:	59 1b       	sub	r21, r25
    5fcc:	99 f0       	breq	.+38     	; 0x5ff4 <__addsf3x+0x60>
    5fce:	59 3f       	cpi	r21, 0xF9	; 249
    5fd0:	50 f4       	brcc	.+20     	; 0x5fe6 <__addsf3x+0x52>
    5fd2:	50 3e       	cpi	r21, 0xE0	; 224
    5fd4:	68 f1       	brcs	.+90     	; 0x6030 <__addsf3x+0x9c>
    5fd6:	1a 16       	cp	r1, r26
    5fd8:	f0 40       	sbci	r31, 0x00	; 0
    5fda:	a2 2f       	mov	r26, r18
    5fdc:	23 2f       	mov	r18, r19
    5fde:	34 2f       	mov	r19, r20
    5fe0:	44 27       	eor	r20, r20
    5fe2:	58 5f       	subi	r21, 0xF8	; 248
    5fe4:	f3 cf       	rjmp	.-26     	; 0x5fcc <__addsf3x+0x38>
    5fe6:	46 95       	lsr	r20
    5fe8:	37 95       	ror	r19
    5fea:	27 95       	ror	r18
    5fec:	a7 95       	ror	r26
    5fee:	f0 40       	sbci	r31, 0x00	; 0
    5ff0:	53 95       	inc	r21
    5ff2:	c9 f7       	brne	.-14     	; 0x5fe6 <__addsf3x+0x52>
    5ff4:	7e f4       	brtc	.+30     	; 0x6014 <__addsf3x+0x80>
    5ff6:	1f 16       	cp	r1, r31
    5ff8:	ba 0b       	sbc	r27, r26
    5ffa:	62 0b       	sbc	r22, r18
    5ffc:	73 0b       	sbc	r23, r19
    5ffe:	84 0b       	sbc	r24, r20
    6000:	ba f0       	brmi	.+46     	; 0x6030 <__addsf3x+0x9c>
    6002:	91 50       	subi	r25, 0x01	; 1
    6004:	a1 f0       	breq	.+40     	; 0x602e <__addsf3x+0x9a>
    6006:	ff 0f       	add	r31, r31
    6008:	bb 1f       	adc	r27, r27
    600a:	66 1f       	adc	r22, r22
    600c:	77 1f       	adc	r23, r23
    600e:	88 1f       	adc	r24, r24
    6010:	c2 f7       	brpl	.-16     	; 0x6002 <__addsf3x+0x6e>
    6012:	0e c0       	rjmp	.+28     	; 0x6030 <__addsf3x+0x9c>
    6014:	ba 0f       	add	r27, r26
    6016:	62 1f       	adc	r22, r18
    6018:	73 1f       	adc	r23, r19
    601a:	84 1f       	adc	r24, r20
    601c:	48 f4       	brcc	.+18     	; 0x6030 <__addsf3x+0x9c>
    601e:	87 95       	ror	r24
    6020:	77 95       	ror	r23
    6022:	67 95       	ror	r22
    6024:	b7 95       	ror	r27
    6026:	f7 95       	ror	r31
    6028:	9e 3f       	cpi	r25, 0xFE	; 254
    602a:	08 f0       	brcs	.+2      	; 0x602e <__addsf3x+0x9a>
    602c:	b0 cf       	rjmp	.-160    	; 0x5f8e <__addsf3+0x28>
    602e:	93 95       	inc	r25
    6030:	88 0f       	add	r24, r24
    6032:	08 f0       	brcs	.+2      	; 0x6036 <__addsf3x+0xa2>
    6034:	99 27       	eor	r25, r25
    6036:	ee 0f       	add	r30, r30
    6038:	97 95       	ror	r25
    603a:	87 95       	ror	r24
    603c:	08 95       	ret

0000603e <__cmpsf2>:
    603e:	0e 94 20 31 	call	0x6240	; 0x6240 <__fp_cmp>
    6042:	08 f4       	brcc	.+2      	; 0x6046 <__cmpsf2+0x8>
    6044:	81 e0       	ldi	r24, 0x01	; 1
    6046:	08 95       	ret

00006048 <__divsf3>:
    6048:	0e 94 38 30 	call	0x6070	; 0x6070 <__divsf3x>
    604c:	0c 94 84 31 	jmp	0x6308	; 0x6308 <__fp_round>
    6050:	0e 94 7d 31 	call	0x62fa	; 0x62fa <__fp_pscB>
    6054:	58 f0       	brcs	.+22     	; 0x606c <__divsf3+0x24>
    6056:	0e 94 76 31 	call	0x62ec	; 0x62ec <__fp_pscA>
    605a:	40 f0       	brcs	.+16     	; 0x606c <__divsf3+0x24>
    605c:	29 f4       	brne	.+10     	; 0x6068 <__divsf3+0x20>
    605e:	5f 3f       	cpi	r21, 0xFF	; 255
    6060:	29 f0       	breq	.+10     	; 0x606c <__divsf3+0x24>
    6062:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__fp_inf>
    6066:	51 11       	cpse	r21, r1
    6068:	0c 94 d0 31 	jmp	0x63a0	; 0x63a0 <__fp_szero>
    606c:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <__fp_nan>

00006070 <__divsf3x>:
    6070:	0e 94 95 31 	call	0x632a	; 0x632a <__fp_split3>
    6074:	68 f3       	brcs	.-38     	; 0x6050 <__divsf3+0x8>

00006076 <__divsf3_pse>:
    6076:	99 23       	and	r25, r25
    6078:	b1 f3       	breq	.-20     	; 0x6066 <__divsf3+0x1e>
    607a:	55 23       	and	r21, r21
    607c:	91 f3       	breq	.-28     	; 0x6062 <__divsf3+0x1a>
    607e:	95 1b       	sub	r25, r21
    6080:	55 0b       	sbc	r21, r21
    6082:	bb 27       	eor	r27, r27
    6084:	aa 27       	eor	r26, r26
    6086:	62 17       	cp	r22, r18
    6088:	73 07       	cpc	r23, r19
    608a:	84 07       	cpc	r24, r20
    608c:	38 f0       	brcs	.+14     	; 0x609c <__divsf3_pse+0x26>
    608e:	9f 5f       	subi	r25, 0xFF	; 255
    6090:	5f 4f       	sbci	r21, 0xFF	; 255
    6092:	22 0f       	add	r18, r18
    6094:	33 1f       	adc	r19, r19
    6096:	44 1f       	adc	r20, r20
    6098:	aa 1f       	adc	r26, r26
    609a:	a9 f3       	breq	.-22     	; 0x6086 <__divsf3_pse+0x10>
    609c:	35 d0       	rcall	.+106    	; 0x6108 <__divsf3_pse+0x92>
    609e:	0e 2e       	mov	r0, r30
    60a0:	3a f0       	brmi	.+14     	; 0x60b0 <__divsf3_pse+0x3a>
    60a2:	e0 e8       	ldi	r30, 0x80	; 128
    60a4:	32 d0       	rcall	.+100    	; 0x610a <__divsf3_pse+0x94>
    60a6:	91 50       	subi	r25, 0x01	; 1
    60a8:	50 40       	sbci	r21, 0x00	; 0
    60aa:	e6 95       	lsr	r30
    60ac:	00 1c       	adc	r0, r0
    60ae:	ca f7       	brpl	.-14     	; 0x60a2 <__divsf3_pse+0x2c>
    60b0:	2b d0       	rcall	.+86     	; 0x6108 <__divsf3_pse+0x92>
    60b2:	fe 2f       	mov	r31, r30
    60b4:	29 d0       	rcall	.+82     	; 0x6108 <__divsf3_pse+0x92>
    60b6:	66 0f       	add	r22, r22
    60b8:	77 1f       	adc	r23, r23
    60ba:	88 1f       	adc	r24, r24
    60bc:	bb 1f       	adc	r27, r27
    60be:	26 17       	cp	r18, r22
    60c0:	37 07       	cpc	r19, r23
    60c2:	48 07       	cpc	r20, r24
    60c4:	ab 07       	cpc	r26, r27
    60c6:	b0 e8       	ldi	r27, 0x80	; 128
    60c8:	09 f0       	breq	.+2      	; 0x60cc <__divsf3_pse+0x56>
    60ca:	bb 0b       	sbc	r27, r27
    60cc:	80 2d       	mov	r24, r0
    60ce:	bf 01       	movw	r22, r30
    60d0:	ff 27       	eor	r31, r31
    60d2:	93 58       	subi	r25, 0x83	; 131
    60d4:	5f 4f       	sbci	r21, 0xFF	; 255
    60d6:	3a f0       	brmi	.+14     	; 0x60e6 <__divsf3_pse+0x70>
    60d8:	9e 3f       	cpi	r25, 0xFE	; 254
    60da:	51 05       	cpc	r21, r1
    60dc:	78 f0       	brcs	.+30     	; 0x60fc <__divsf3_pse+0x86>
    60de:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__fp_inf>
    60e2:	0c 94 d0 31 	jmp	0x63a0	; 0x63a0 <__fp_szero>
    60e6:	5f 3f       	cpi	r21, 0xFF	; 255
    60e8:	e4 f3       	brlt	.-8      	; 0x60e2 <__divsf3_pse+0x6c>
    60ea:	98 3e       	cpi	r25, 0xE8	; 232
    60ec:	d4 f3       	brlt	.-12     	; 0x60e2 <__divsf3_pse+0x6c>
    60ee:	86 95       	lsr	r24
    60f0:	77 95       	ror	r23
    60f2:	67 95       	ror	r22
    60f4:	b7 95       	ror	r27
    60f6:	f7 95       	ror	r31
    60f8:	9f 5f       	subi	r25, 0xFF	; 255
    60fa:	c9 f7       	brne	.-14     	; 0x60ee <__divsf3_pse+0x78>
    60fc:	88 0f       	add	r24, r24
    60fe:	91 1d       	adc	r25, r1
    6100:	96 95       	lsr	r25
    6102:	87 95       	ror	r24
    6104:	97 f9       	bld	r25, 7
    6106:	08 95       	ret
    6108:	e1 e0       	ldi	r30, 0x01	; 1
    610a:	66 0f       	add	r22, r22
    610c:	77 1f       	adc	r23, r23
    610e:	88 1f       	adc	r24, r24
    6110:	bb 1f       	adc	r27, r27
    6112:	62 17       	cp	r22, r18
    6114:	73 07       	cpc	r23, r19
    6116:	84 07       	cpc	r24, r20
    6118:	ba 07       	cpc	r27, r26
    611a:	20 f0       	brcs	.+8      	; 0x6124 <__divsf3_pse+0xae>
    611c:	62 1b       	sub	r22, r18
    611e:	73 0b       	sbc	r23, r19
    6120:	84 0b       	sbc	r24, r20
    6122:	ba 0b       	sbc	r27, r26
    6124:	ee 1f       	adc	r30, r30
    6126:	88 f7       	brcc	.-30     	; 0x610a <__divsf3_pse+0x94>
    6128:	e0 95       	com	r30
    612a:	08 95       	ret

0000612c <__fixsfsi>:
    612c:	0e 94 9d 30 	call	0x613a	; 0x613a <__fixunssfsi>
    6130:	68 94       	set
    6132:	b1 11       	cpse	r27, r1
    6134:	0c 94 d0 31 	jmp	0x63a0	; 0x63a0 <__fp_szero>
    6138:	08 95       	ret

0000613a <__fixunssfsi>:
    613a:	0e 94 9d 31 	call	0x633a	; 0x633a <__fp_splitA>
    613e:	88 f0       	brcs	.+34     	; 0x6162 <__fixunssfsi+0x28>
    6140:	9f 57       	subi	r25, 0x7F	; 127
    6142:	98 f0       	brcs	.+38     	; 0x616a <__fixunssfsi+0x30>
    6144:	b9 2f       	mov	r27, r25
    6146:	99 27       	eor	r25, r25
    6148:	b7 51       	subi	r27, 0x17	; 23
    614a:	b0 f0       	brcs	.+44     	; 0x6178 <__fixunssfsi+0x3e>
    614c:	e1 f0       	breq	.+56     	; 0x6186 <__fixunssfsi+0x4c>
    614e:	66 0f       	add	r22, r22
    6150:	77 1f       	adc	r23, r23
    6152:	88 1f       	adc	r24, r24
    6154:	99 1f       	adc	r25, r25
    6156:	1a f0       	brmi	.+6      	; 0x615e <__fixunssfsi+0x24>
    6158:	ba 95       	dec	r27
    615a:	c9 f7       	brne	.-14     	; 0x614e <__fixunssfsi+0x14>
    615c:	14 c0       	rjmp	.+40     	; 0x6186 <__fixunssfsi+0x4c>
    615e:	b1 30       	cpi	r27, 0x01	; 1
    6160:	91 f0       	breq	.+36     	; 0x6186 <__fixunssfsi+0x4c>
    6162:	0e 94 cf 31 	call	0x639e	; 0x639e <__fp_zero>
    6166:	b1 e0       	ldi	r27, 0x01	; 1
    6168:	08 95       	ret
    616a:	0c 94 cf 31 	jmp	0x639e	; 0x639e <__fp_zero>
    616e:	67 2f       	mov	r22, r23
    6170:	78 2f       	mov	r23, r24
    6172:	88 27       	eor	r24, r24
    6174:	b8 5f       	subi	r27, 0xF8	; 248
    6176:	39 f0       	breq	.+14     	; 0x6186 <__fixunssfsi+0x4c>
    6178:	b9 3f       	cpi	r27, 0xF9	; 249
    617a:	cc f3       	brlt	.-14     	; 0x616e <__fixunssfsi+0x34>
    617c:	86 95       	lsr	r24
    617e:	77 95       	ror	r23
    6180:	67 95       	ror	r22
    6182:	b3 95       	inc	r27
    6184:	d9 f7       	brne	.-10     	; 0x617c <__fixunssfsi+0x42>
    6186:	3e f4       	brtc	.+14     	; 0x6196 <__fixunssfsi+0x5c>
    6188:	90 95       	com	r25
    618a:	80 95       	com	r24
    618c:	70 95       	com	r23
    618e:	61 95       	neg	r22
    6190:	7f 4f       	sbci	r23, 0xFF	; 255
    6192:	8f 4f       	sbci	r24, 0xFF	; 255
    6194:	9f 4f       	sbci	r25, 0xFF	; 255
    6196:	08 95       	ret

00006198 <__floatunsisf>:
    6198:	e8 94       	clt
    619a:	09 c0       	rjmp	.+18     	; 0x61ae <__floatsisf+0x12>

0000619c <__floatsisf>:
    619c:	97 fb       	bst	r25, 7
    619e:	3e f4       	brtc	.+14     	; 0x61ae <__floatsisf+0x12>
    61a0:	90 95       	com	r25
    61a2:	80 95       	com	r24
    61a4:	70 95       	com	r23
    61a6:	61 95       	neg	r22
    61a8:	7f 4f       	sbci	r23, 0xFF	; 255
    61aa:	8f 4f       	sbci	r24, 0xFF	; 255
    61ac:	9f 4f       	sbci	r25, 0xFF	; 255
    61ae:	99 23       	and	r25, r25
    61b0:	a9 f0       	breq	.+42     	; 0x61dc <__floatsisf+0x40>
    61b2:	f9 2f       	mov	r31, r25
    61b4:	96 e9       	ldi	r25, 0x96	; 150
    61b6:	bb 27       	eor	r27, r27
    61b8:	93 95       	inc	r25
    61ba:	f6 95       	lsr	r31
    61bc:	87 95       	ror	r24
    61be:	77 95       	ror	r23
    61c0:	67 95       	ror	r22
    61c2:	b7 95       	ror	r27
    61c4:	f1 11       	cpse	r31, r1
    61c6:	f8 cf       	rjmp	.-16     	; 0x61b8 <__floatsisf+0x1c>
    61c8:	fa f4       	brpl	.+62     	; 0x6208 <__floatsisf+0x6c>
    61ca:	bb 0f       	add	r27, r27
    61cc:	11 f4       	brne	.+4      	; 0x61d2 <__floatsisf+0x36>
    61ce:	60 ff       	sbrs	r22, 0
    61d0:	1b c0       	rjmp	.+54     	; 0x6208 <__floatsisf+0x6c>
    61d2:	6f 5f       	subi	r22, 0xFF	; 255
    61d4:	7f 4f       	sbci	r23, 0xFF	; 255
    61d6:	8f 4f       	sbci	r24, 0xFF	; 255
    61d8:	9f 4f       	sbci	r25, 0xFF	; 255
    61da:	16 c0       	rjmp	.+44     	; 0x6208 <__floatsisf+0x6c>
    61dc:	88 23       	and	r24, r24
    61de:	11 f0       	breq	.+4      	; 0x61e4 <__floatsisf+0x48>
    61e0:	96 e9       	ldi	r25, 0x96	; 150
    61e2:	11 c0       	rjmp	.+34     	; 0x6206 <__floatsisf+0x6a>
    61e4:	77 23       	and	r23, r23
    61e6:	21 f0       	breq	.+8      	; 0x61f0 <__floatsisf+0x54>
    61e8:	9e e8       	ldi	r25, 0x8E	; 142
    61ea:	87 2f       	mov	r24, r23
    61ec:	76 2f       	mov	r23, r22
    61ee:	05 c0       	rjmp	.+10     	; 0x61fa <__floatsisf+0x5e>
    61f0:	66 23       	and	r22, r22
    61f2:	71 f0       	breq	.+28     	; 0x6210 <__floatsisf+0x74>
    61f4:	96 e8       	ldi	r25, 0x86	; 134
    61f6:	86 2f       	mov	r24, r22
    61f8:	70 e0       	ldi	r23, 0x00	; 0
    61fa:	60 e0       	ldi	r22, 0x00	; 0
    61fc:	2a f0       	brmi	.+10     	; 0x6208 <__floatsisf+0x6c>
    61fe:	9a 95       	dec	r25
    6200:	66 0f       	add	r22, r22
    6202:	77 1f       	adc	r23, r23
    6204:	88 1f       	adc	r24, r24
    6206:	da f7       	brpl	.-10     	; 0x61fe <__floatsisf+0x62>
    6208:	88 0f       	add	r24, r24
    620a:	96 95       	lsr	r25
    620c:	87 95       	ror	r24
    620e:	97 f9       	bld	r25, 7
    6210:	08 95       	ret

00006212 <floor>:
    6212:	0e 94 b7 31 	call	0x636e	; 0x636e <__fp_trunc>
    6216:	90 f0       	brcs	.+36     	; 0x623c <floor+0x2a>
    6218:	9f 37       	cpi	r25, 0x7F	; 127
    621a:	48 f4       	brcc	.+18     	; 0x622e <floor+0x1c>
    621c:	91 11       	cpse	r25, r1
    621e:	16 f0       	brts	.+4      	; 0x6224 <floor+0x12>
    6220:	0c 94 d0 31 	jmp	0x63a0	; 0x63a0 <__fp_szero>
    6224:	60 e0       	ldi	r22, 0x00	; 0
    6226:	70 e0       	ldi	r23, 0x00	; 0
    6228:	80 e8       	ldi	r24, 0x80	; 128
    622a:	9f eb       	ldi	r25, 0xBF	; 191
    622c:	08 95       	ret
    622e:	26 f4       	brtc	.+8      	; 0x6238 <floor+0x26>
    6230:	1b 16       	cp	r1, r27
    6232:	61 1d       	adc	r22, r1
    6234:	71 1d       	adc	r23, r1
    6236:	81 1d       	adc	r24, r1
    6238:	0c 94 4a 31 	jmp	0x6294	; 0x6294 <__fp_mintl>
    623c:	0c 94 65 31 	jmp	0x62ca	; 0x62ca <__fp_mpack>

00006240 <__fp_cmp>:
    6240:	99 0f       	add	r25, r25
    6242:	00 08       	sbc	r0, r0
    6244:	55 0f       	add	r21, r21
    6246:	aa 0b       	sbc	r26, r26
    6248:	e0 e8       	ldi	r30, 0x80	; 128
    624a:	fe ef       	ldi	r31, 0xFE	; 254
    624c:	16 16       	cp	r1, r22
    624e:	17 06       	cpc	r1, r23
    6250:	e8 07       	cpc	r30, r24
    6252:	f9 07       	cpc	r31, r25
    6254:	c0 f0       	brcs	.+48     	; 0x6286 <__fp_cmp+0x46>
    6256:	12 16       	cp	r1, r18
    6258:	13 06       	cpc	r1, r19
    625a:	e4 07       	cpc	r30, r20
    625c:	f5 07       	cpc	r31, r21
    625e:	98 f0       	brcs	.+38     	; 0x6286 <__fp_cmp+0x46>
    6260:	62 1b       	sub	r22, r18
    6262:	73 0b       	sbc	r23, r19
    6264:	84 0b       	sbc	r24, r20
    6266:	95 0b       	sbc	r25, r21
    6268:	39 f4       	brne	.+14     	; 0x6278 <__fp_cmp+0x38>
    626a:	0a 26       	eor	r0, r26
    626c:	61 f0       	breq	.+24     	; 0x6286 <__fp_cmp+0x46>
    626e:	23 2b       	or	r18, r19
    6270:	24 2b       	or	r18, r20
    6272:	25 2b       	or	r18, r21
    6274:	21 f4       	brne	.+8      	; 0x627e <__fp_cmp+0x3e>
    6276:	08 95       	ret
    6278:	0a 26       	eor	r0, r26
    627a:	09 f4       	brne	.+2      	; 0x627e <__fp_cmp+0x3e>
    627c:	a1 40       	sbci	r26, 0x01	; 1
    627e:	a6 95       	lsr	r26
    6280:	8f ef       	ldi	r24, 0xFF	; 255
    6282:	81 1d       	adc	r24, r1
    6284:	81 1d       	adc	r24, r1
    6286:	08 95       	ret

00006288 <__fp_inf>:
    6288:	97 f9       	bld	r25, 7
    628a:	9f 67       	ori	r25, 0x7F	; 127
    628c:	80 e8       	ldi	r24, 0x80	; 128
    628e:	70 e0       	ldi	r23, 0x00	; 0
    6290:	60 e0       	ldi	r22, 0x00	; 0
    6292:	08 95       	ret

00006294 <__fp_mintl>:
    6294:	88 23       	and	r24, r24
    6296:	71 f4       	brne	.+28     	; 0x62b4 <__fp_mintl+0x20>
    6298:	77 23       	and	r23, r23
    629a:	21 f0       	breq	.+8      	; 0x62a4 <__fp_mintl+0x10>
    629c:	98 50       	subi	r25, 0x08	; 8
    629e:	87 2b       	or	r24, r23
    62a0:	76 2f       	mov	r23, r22
    62a2:	07 c0       	rjmp	.+14     	; 0x62b2 <__fp_mintl+0x1e>
    62a4:	66 23       	and	r22, r22
    62a6:	11 f4       	brne	.+4      	; 0x62ac <__fp_mintl+0x18>
    62a8:	99 27       	eor	r25, r25
    62aa:	0d c0       	rjmp	.+26     	; 0x62c6 <__fp_mintl+0x32>
    62ac:	90 51       	subi	r25, 0x10	; 16
    62ae:	86 2b       	or	r24, r22
    62b0:	70 e0       	ldi	r23, 0x00	; 0
    62b2:	60 e0       	ldi	r22, 0x00	; 0
    62b4:	2a f0       	brmi	.+10     	; 0x62c0 <__fp_mintl+0x2c>
    62b6:	9a 95       	dec	r25
    62b8:	66 0f       	add	r22, r22
    62ba:	77 1f       	adc	r23, r23
    62bc:	88 1f       	adc	r24, r24
    62be:	da f7       	brpl	.-10     	; 0x62b6 <__fp_mintl+0x22>
    62c0:	88 0f       	add	r24, r24
    62c2:	96 95       	lsr	r25
    62c4:	87 95       	ror	r24
    62c6:	97 f9       	bld	r25, 7
    62c8:	08 95       	ret

000062ca <__fp_mpack>:
    62ca:	9f 3f       	cpi	r25, 0xFF	; 255
    62cc:	31 f0       	breq	.+12     	; 0x62da <__fp_mpack_finite+0xc>

000062ce <__fp_mpack_finite>:
    62ce:	91 50       	subi	r25, 0x01	; 1
    62d0:	20 f4       	brcc	.+8      	; 0x62da <__fp_mpack_finite+0xc>
    62d2:	87 95       	ror	r24
    62d4:	77 95       	ror	r23
    62d6:	67 95       	ror	r22
    62d8:	b7 95       	ror	r27
    62da:	88 0f       	add	r24, r24
    62dc:	91 1d       	adc	r25, r1
    62de:	96 95       	lsr	r25
    62e0:	87 95       	ror	r24
    62e2:	97 f9       	bld	r25, 7
    62e4:	08 95       	ret

000062e6 <__fp_nan>:
    62e6:	9f ef       	ldi	r25, 0xFF	; 255
    62e8:	80 ec       	ldi	r24, 0xC0	; 192
    62ea:	08 95       	ret

000062ec <__fp_pscA>:
    62ec:	00 24       	eor	r0, r0
    62ee:	0a 94       	dec	r0
    62f0:	16 16       	cp	r1, r22
    62f2:	17 06       	cpc	r1, r23
    62f4:	18 06       	cpc	r1, r24
    62f6:	09 06       	cpc	r0, r25
    62f8:	08 95       	ret

000062fa <__fp_pscB>:
    62fa:	00 24       	eor	r0, r0
    62fc:	0a 94       	dec	r0
    62fe:	12 16       	cp	r1, r18
    6300:	13 06       	cpc	r1, r19
    6302:	14 06       	cpc	r1, r20
    6304:	05 06       	cpc	r0, r21
    6306:	08 95       	ret

00006308 <__fp_round>:
    6308:	09 2e       	mov	r0, r25
    630a:	03 94       	inc	r0
    630c:	00 0c       	add	r0, r0
    630e:	11 f4       	brne	.+4      	; 0x6314 <__fp_round+0xc>
    6310:	88 23       	and	r24, r24
    6312:	52 f0       	brmi	.+20     	; 0x6328 <__fp_round+0x20>
    6314:	bb 0f       	add	r27, r27
    6316:	40 f4       	brcc	.+16     	; 0x6328 <__fp_round+0x20>
    6318:	bf 2b       	or	r27, r31
    631a:	11 f4       	brne	.+4      	; 0x6320 <__fp_round+0x18>
    631c:	60 ff       	sbrs	r22, 0
    631e:	04 c0       	rjmp	.+8      	; 0x6328 <__fp_round+0x20>
    6320:	6f 5f       	subi	r22, 0xFF	; 255
    6322:	7f 4f       	sbci	r23, 0xFF	; 255
    6324:	8f 4f       	sbci	r24, 0xFF	; 255
    6326:	9f 4f       	sbci	r25, 0xFF	; 255
    6328:	08 95       	ret

0000632a <__fp_split3>:
    632a:	57 fd       	sbrc	r21, 7
    632c:	90 58       	subi	r25, 0x80	; 128
    632e:	44 0f       	add	r20, r20
    6330:	55 1f       	adc	r21, r21
    6332:	59 f0       	breq	.+22     	; 0x634a <__fp_splitA+0x10>
    6334:	5f 3f       	cpi	r21, 0xFF	; 255
    6336:	71 f0       	breq	.+28     	; 0x6354 <__fp_splitA+0x1a>
    6338:	47 95       	ror	r20

0000633a <__fp_splitA>:
    633a:	88 0f       	add	r24, r24
    633c:	97 fb       	bst	r25, 7
    633e:	99 1f       	adc	r25, r25
    6340:	61 f0       	breq	.+24     	; 0x635a <__fp_splitA+0x20>
    6342:	9f 3f       	cpi	r25, 0xFF	; 255
    6344:	79 f0       	breq	.+30     	; 0x6364 <__fp_splitA+0x2a>
    6346:	87 95       	ror	r24
    6348:	08 95       	ret
    634a:	12 16       	cp	r1, r18
    634c:	13 06       	cpc	r1, r19
    634e:	14 06       	cpc	r1, r20
    6350:	55 1f       	adc	r21, r21
    6352:	f2 cf       	rjmp	.-28     	; 0x6338 <__fp_split3+0xe>
    6354:	46 95       	lsr	r20
    6356:	f1 df       	rcall	.-30     	; 0x633a <__fp_splitA>
    6358:	08 c0       	rjmp	.+16     	; 0x636a <__fp_splitA+0x30>
    635a:	16 16       	cp	r1, r22
    635c:	17 06       	cpc	r1, r23
    635e:	18 06       	cpc	r1, r24
    6360:	99 1f       	adc	r25, r25
    6362:	f1 cf       	rjmp	.-30     	; 0x6346 <__fp_splitA+0xc>
    6364:	86 95       	lsr	r24
    6366:	71 05       	cpc	r23, r1
    6368:	61 05       	cpc	r22, r1
    636a:	08 94       	sec
    636c:	08 95       	ret

0000636e <__fp_trunc>:
    636e:	0e 94 9d 31 	call	0x633a	; 0x633a <__fp_splitA>
    6372:	a0 f0       	brcs	.+40     	; 0x639c <__fp_trunc+0x2e>
    6374:	be e7       	ldi	r27, 0x7E	; 126
    6376:	b9 17       	cp	r27, r25
    6378:	88 f4       	brcc	.+34     	; 0x639c <__fp_trunc+0x2e>
    637a:	bb 27       	eor	r27, r27
    637c:	9f 38       	cpi	r25, 0x8F	; 143
    637e:	60 f4       	brcc	.+24     	; 0x6398 <__fp_trunc+0x2a>
    6380:	16 16       	cp	r1, r22
    6382:	b1 1d       	adc	r27, r1
    6384:	67 2f       	mov	r22, r23
    6386:	78 2f       	mov	r23, r24
    6388:	88 27       	eor	r24, r24
    638a:	98 5f       	subi	r25, 0xF8	; 248
    638c:	f7 cf       	rjmp	.-18     	; 0x637c <__fp_trunc+0xe>
    638e:	86 95       	lsr	r24
    6390:	77 95       	ror	r23
    6392:	67 95       	ror	r22
    6394:	b1 1d       	adc	r27, r1
    6396:	93 95       	inc	r25
    6398:	96 39       	cpi	r25, 0x96	; 150
    639a:	c8 f3       	brcs	.-14     	; 0x638e <__fp_trunc+0x20>
    639c:	08 95       	ret

0000639e <__fp_zero>:
    639e:	e8 94       	clt

000063a0 <__fp_szero>:
    63a0:	bb 27       	eor	r27, r27
    63a2:	66 27       	eor	r22, r22
    63a4:	77 27       	eor	r23, r23
    63a6:	cb 01       	movw	r24, r22
    63a8:	97 f9       	bld	r25, 7
    63aa:	08 95       	ret

000063ac <__gesf2>:
    63ac:	0e 94 20 31 	call	0x6240	; 0x6240 <__fp_cmp>
    63b0:	08 f4       	brcc	.+2      	; 0x63b4 <__gesf2+0x8>
    63b2:	8f ef       	ldi	r24, 0xFF	; 255
    63b4:	08 95       	ret

000063b6 <__mulsf3>:
    63b6:	0e 94 ee 31 	call	0x63dc	; 0x63dc <__mulsf3x>
    63ba:	0c 94 84 31 	jmp	0x6308	; 0x6308 <__fp_round>
    63be:	0e 94 76 31 	call	0x62ec	; 0x62ec <__fp_pscA>
    63c2:	38 f0       	brcs	.+14     	; 0x63d2 <__mulsf3+0x1c>
    63c4:	0e 94 7d 31 	call	0x62fa	; 0x62fa <__fp_pscB>
    63c8:	20 f0       	brcs	.+8      	; 0x63d2 <__mulsf3+0x1c>
    63ca:	95 23       	and	r25, r21
    63cc:	11 f0       	breq	.+4      	; 0x63d2 <__mulsf3+0x1c>
    63ce:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__fp_inf>
    63d2:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <__fp_nan>
    63d6:	11 24       	eor	r1, r1
    63d8:	0c 94 d0 31 	jmp	0x63a0	; 0x63a0 <__fp_szero>

000063dc <__mulsf3x>:
    63dc:	0e 94 95 31 	call	0x632a	; 0x632a <__fp_split3>
    63e0:	70 f3       	brcs	.-36     	; 0x63be <__mulsf3+0x8>

000063e2 <__mulsf3_pse>:
    63e2:	95 9f       	mul	r25, r21
    63e4:	c1 f3       	breq	.-16     	; 0x63d6 <__mulsf3+0x20>
    63e6:	95 0f       	add	r25, r21
    63e8:	50 e0       	ldi	r21, 0x00	; 0
    63ea:	55 1f       	adc	r21, r21
    63ec:	62 9f       	mul	r22, r18
    63ee:	f0 01       	movw	r30, r0
    63f0:	72 9f       	mul	r23, r18
    63f2:	bb 27       	eor	r27, r27
    63f4:	f0 0d       	add	r31, r0
    63f6:	b1 1d       	adc	r27, r1
    63f8:	63 9f       	mul	r22, r19
    63fa:	aa 27       	eor	r26, r26
    63fc:	f0 0d       	add	r31, r0
    63fe:	b1 1d       	adc	r27, r1
    6400:	aa 1f       	adc	r26, r26
    6402:	64 9f       	mul	r22, r20
    6404:	66 27       	eor	r22, r22
    6406:	b0 0d       	add	r27, r0
    6408:	a1 1d       	adc	r26, r1
    640a:	66 1f       	adc	r22, r22
    640c:	82 9f       	mul	r24, r18
    640e:	22 27       	eor	r18, r18
    6410:	b0 0d       	add	r27, r0
    6412:	a1 1d       	adc	r26, r1
    6414:	62 1f       	adc	r22, r18
    6416:	73 9f       	mul	r23, r19
    6418:	b0 0d       	add	r27, r0
    641a:	a1 1d       	adc	r26, r1
    641c:	62 1f       	adc	r22, r18
    641e:	83 9f       	mul	r24, r19
    6420:	a0 0d       	add	r26, r0
    6422:	61 1d       	adc	r22, r1
    6424:	22 1f       	adc	r18, r18
    6426:	74 9f       	mul	r23, r20
    6428:	33 27       	eor	r19, r19
    642a:	a0 0d       	add	r26, r0
    642c:	61 1d       	adc	r22, r1
    642e:	23 1f       	adc	r18, r19
    6430:	84 9f       	mul	r24, r20
    6432:	60 0d       	add	r22, r0
    6434:	21 1d       	adc	r18, r1
    6436:	82 2f       	mov	r24, r18
    6438:	76 2f       	mov	r23, r22
    643a:	6a 2f       	mov	r22, r26
    643c:	11 24       	eor	r1, r1
    643e:	9f 57       	subi	r25, 0x7F	; 127
    6440:	50 40       	sbci	r21, 0x00	; 0
    6442:	9a f0       	brmi	.+38     	; 0x646a <__mulsf3_pse+0x88>
    6444:	f1 f0       	breq	.+60     	; 0x6482 <__mulsf3_pse+0xa0>
    6446:	88 23       	and	r24, r24
    6448:	4a f0       	brmi	.+18     	; 0x645c <__mulsf3_pse+0x7a>
    644a:	ee 0f       	add	r30, r30
    644c:	ff 1f       	adc	r31, r31
    644e:	bb 1f       	adc	r27, r27
    6450:	66 1f       	adc	r22, r22
    6452:	77 1f       	adc	r23, r23
    6454:	88 1f       	adc	r24, r24
    6456:	91 50       	subi	r25, 0x01	; 1
    6458:	50 40       	sbci	r21, 0x00	; 0
    645a:	a9 f7       	brne	.-22     	; 0x6446 <__mulsf3_pse+0x64>
    645c:	9e 3f       	cpi	r25, 0xFE	; 254
    645e:	51 05       	cpc	r21, r1
    6460:	80 f0       	brcs	.+32     	; 0x6482 <__mulsf3_pse+0xa0>
    6462:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__fp_inf>
    6466:	0c 94 d0 31 	jmp	0x63a0	; 0x63a0 <__fp_szero>
    646a:	5f 3f       	cpi	r21, 0xFF	; 255
    646c:	e4 f3       	brlt	.-8      	; 0x6466 <__mulsf3_pse+0x84>
    646e:	98 3e       	cpi	r25, 0xE8	; 232
    6470:	d4 f3       	brlt	.-12     	; 0x6466 <__mulsf3_pse+0x84>
    6472:	86 95       	lsr	r24
    6474:	77 95       	ror	r23
    6476:	67 95       	ror	r22
    6478:	b7 95       	ror	r27
    647a:	f7 95       	ror	r31
    647c:	e7 95       	ror	r30
    647e:	9f 5f       	subi	r25, 0xFF	; 255
    6480:	c1 f7       	brne	.-16     	; 0x6472 <__mulsf3_pse+0x90>
    6482:	fe 2b       	or	r31, r30
    6484:	88 0f       	add	r24, r24
    6486:	91 1d       	adc	r25, r1
    6488:	96 95       	lsr	r25
    648a:	87 95       	ror	r24
    648c:	97 f9       	bld	r25, 7
    648e:	08 95       	ret

00006490 <pow>:
    6490:	fa 01       	movw	r30, r20
    6492:	ee 0f       	add	r30, r30
    6494:	ff 1f       	adc	r31, r31
    6496:	30 96       	adiw	r30, 0x00	; 0
    6498:	21 05       	cpc	r18, r1
    649a:	31 05       	cpc	r19, r1
    649c:	a1 f1       	breq	.+104    	; 0x6506 <pow+0x76>
    649e:	61 15       	cp	r22, r1
    64a0:	71 05       	cpc	r23, r1
    64a2:	61 f4       	brne	.+24     	; 0x64bc <pow+0x2c>
    64a4:	80 38       	cpi	r24, 0x80	; 128
    64a6:	bf e3       	ldi	r27, 0x3F	; 63
    64a8:	9b 07       	cpc	r25, r27
    64aa:	49 f1       	breq	.+82     	; 0x64fe <pow+0x6e>
    64ac:	68 94       	set
    64ae:	90 38       	cpi	r25, 0x80	; 128
    64b0:	81 05       	cpc	r24, r1
    64b2:	61 f0       	breq	.+24     	; 0x64cc <pow+0x3c>
    64b4:	80 38       	cpi	r24, 0x80	; 128
    64b6:	bf ef       	ldi	r27, 0xFF	; 255
    64b8:	9b 07       	cpc	r25, r27
    64ba:	41 f0       	breq	.+16     	; 0x64cc <pow+0x3c>
    64bc:	99 23       	and	r25, r25
    64be:	4a f5       	brpl	.+82     	; 0x6512 <pow+0x82>
    64c0:	ff 3f       	cpi	r31, 0xFF	; 255
    64c2:	e1 05       	cpc	r30, r1
    64c4:	31 05       	cpc	r19, r1
    64c6:	21 05       	cpc	r18, r1
    64c8:	19 f1       	breq	.+70     	; 0x6510 <pow+0x80>
    64ca:	e8 94       	clt
    64cc:	08 94       	sec
    64ce:	e7 95       	ror	r30
    64d0:	d9 01       	movw	r26, r18
    64d2:	aa 23       	and	r26, r26
    64d4:	29 f4       	brne	.+10     	; 0x64e0 <pow+0x50>
    64d6:	ab 2f       	mov	r26, r27
    64d8:	be 2f       	mov	r27, r30
    64da:	f8 5f       	subi	r31, 0xF8	; 248
    64dc:	d0 f3       	brcs	.-12     	; 0x64d2 <pow+0x42>
    64de:	10 c0       	rjmp	.+32     	; 0x6500 <pow+0x70>
    64e0:	ff 5f       	subi	r31, 0xFF	; 255
    64e2:	70 f4       	brcc	.+28     	; 0x6500 <pow+0x70>
    64e4:	a6 95       	lsr	r26
    64e6:	e0 f7       	brcc	.-8      	; 0x64e0 <pow+0x50>
    64e8:	f7 39       	cpi	r31, 0x97	; 151
    64ea:	50 f0       	brcs	.+20     	; 0x6500 <pow+0x70>
    64ec:	19 f0       	breq	.+6      	; 0x64f4 <pow+0x64>
    64ee:	ff 3a       	cpi	r31, 0xAF	; 175
    64f0:	38 f4       	brcc	.+14     	; 0x6500 <pow+0x70>
    64f2:	9f 77       	andi	r25, 0x7F	; 127
    64f4:	9f 93       	push	r25
    64f6:	0d d0       	rcall	.+26     	; 0x6512 <pow+0x82>
    64f8:	0f 90       	pop	r0
    64fa:	07 fc       	sbrc	r0, 7
    64fc:	90 58       	subi	r25, 0x80	; 128
    64fe:	08 95       	ret
    6500:	46 f0       	brts	.+16     	; 0x6512 <pow+0x82>
    6502:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <__fp_nan>
    6506:	60 e0       	ldi	r22, 0x00	; 0
    6508:	70 e0       	ldi	r23, 0x00	; 0
    650a:	80 e8       	ldi	r24, 0x80	; 128
    650c:	9f e3       	ldi	r25, 0x3F	; 63
    650e:	08 95       	ret
    6510:	4f e7       	ldi	r20, 0x7F	; 127
    6512:	9f 77       	andi	r25, 0x7F	; 127
    6514:	5f 93       	push	r21
    6516:	4f 93       	push	r20
    6518:	3f 93       	push	r19
    651a:	2f 93       	push	r18
    651c:	0e 94 43 33 	call	0x6686	; 0x6686 <log>
    6520:	2f 91       	pop	r18
    6522:	3f 91       	pop	r19
    6524:	4f 91       	pop	r20
    6526:	5f 91       	pop	r21
    6528:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    652c:	0c 94 a0 32 	jmp	0x6540	; 0x6540 <exp>
    6530:	29 f4       	brne	.+10     	; 0x653c <pow+0xac>
    6532:	16 f0       	brts	.+4      	; 0x6538 <pow+0xa8>
    6534:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__fp_inf>
    6538:	0c 94 cf 31 	jmp	0x639e	; 0x639e <__fp_zero>
    653c:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <__fp_nan>

00006540 <exp>:
    6540:	0e 94 9d 31 	call	0x633a	; 0x633a <__fp_splitA>
    6544:	a8 f3       	brcs	.-22     	; 0x6530 <pow+0xa0>
    6546:	96 38       	cpi	r25, 0x86	; 134
    6548:	a0 f7       	brcc	.-24     	; 0x6532 <pow+0xa2>
    654a:	07 f8       	bld	r0, 7
    654c:	0f 92       	push	r0
    654e:	e8 94       	clt
    6550:	2b e3       	ldi	r18, 0x3B	; 59
    6552:	3a ea       	ldi	r19, 0xAA	; 170
    6554:	48 eb       	ldi	r20, 0xB8	; 184
    6556:	5f e7       	ldi	r21, 0x7F	; 127
    6558:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__mulsf3_pse>
    655c:	0f 92       	push	r0
    655e:	0f 92       	push	r0
    6560:	0f 92       	push	r0
    6562:	4d b7       	in	r20, 0x3d	; 61
    6564:	5e b7       	in	r21, 0x3e	; 62
    6566:	0f 92       	push	r0
    6568:	0e 94 8b 33 	call	0x6716	; 0x6716 <modf>
    656c:	e4 e2       	ldi	r30, 0x24	; 36
    656e:	f1 e0       	ldi	r31, 0x01	; 1
    6570:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <__fp_powser>
    6574:	4f 91       	pop	r20
    6576:	5f 91       	pop	r21
    6578:	ef 91       	pop	r30
    657a:	ff 91       	pop	r31
    657c:	e5 95       	asr	r30
    657e:	ee 1f       	adc	r30, r30
    6580:	ff 1f       	adc	r31, r31
    6582:	49 f0       	breq	.+18     	; 0x6596 <exp+0x56>
    6584:	fe 57       	subi	r31, 0x7E	; 126
    6586:	e0 68       	ori	r30, 0x80	; 128
    6588:	44 27       	eor	r20, r20
    658a:	ee 0f       	add	r30, r30
    658c:	44 1f       	adc	r20, r20
    658e:	fa 95       	dec	r31
    6590:	e1 f7       	brne	.-8      	; 0x658a <exp+0x4a>
    6592:	41 95       	neg	r20
    6594:	55 0b       	sbc	r21, r21
    6596:	0e 94 05 33 	call	0x660a	; 0x660a <ldexp>
    659a:	0f 90       	pop	r0
    659c:	07 fe       	sbrs	r0, 7
    659e:	0c 94 f9 32 	jmp	0x65f2	; 0x65f2 <inverse>
    65a2:	08 95       	ret

000065a4 <__fp_powser>:
    65a4:	df 93       	push	r29
    65a6:	cf 93       	push	r28
    65a8:	1f 93       	push	r17
    65aa:	0f 93       	push	r16
    65ac:	ff 92       	push	r15
    65ae:	ef 92       	push	r14
    65b0:	df 92       	push	r13
    65b2:	7b 01       	movw	r14, r22
    65b4:	8c 01       	movw	r16, r24
    65b6:	68 94       	set
    65b8:	06 c0       	rjmp	.+12     	; 0x65c6 <__fp_powser+0x22>
    65ba:	da 2e       	mov	r13, r26
    65bc:	ef 01       	movw	r28, r30
    65be:	0e 94 ee 31 	call	0x63dc	; 0x63dc <__mulsf3x>
    65c2:	fe 01       	movw	r30, r28
    65c4:	e8 94       	clt
    65c6:	a5 91       	lpm	r26, Z+
    65c8:	25 91       	lpm	r18, Z+
    65ca:	35 91       	lpm	r19, Z+
    65cc:	45 91       	lpm	r20, Z+
    65ce:	55 91       	lpm	r21, Z+
    65d0:	a6 f3       	brts	.-24     	; 0x65ba <__fp_powser+0x16>
    65d2:	ef 01       	movw	r28, r30
    65d4:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__addsf3x>
    65d8:	fe 01       	movw	r30, r28
    65da:	97 01       	movw	r18, r14
    65dc:	a8 01       	movw	r20, r16
    65de:	da 94       	dec	r13
    65e0:	69 f7       	brne	.-38     	; 0x65bc <__fp_powser+0x18>
    65e2:	df 90       	pop	r13
    65e4:	ef 90       	pop	r14
    65e6:	ff 90       	pop	r15
    65e8:	0f 91       	pop	r16
    65ea:	1f 91       	pop	r17
    65ec:	cf 91       	pop	r28
    65ee:	df 91       	pop	r29
    65f0:	08 95       	ret

000065f2 <inverse>:
    65f2:	9b 01       	movw	r18, r22
    65f4:	ac 01       	movw	r20, r24
    65f6:	60 e0       	ldi	r22, 0x00	; 0
    65f8:	70 e0       	ldi	r23, 0x00	; 0
    65fa:	80 e8       	ldi	r24, 0x80	; 128
    65fc:	9f e3       	ldi	r25, 0x3F	; 63
    65fe:	0c 94 24 30 	jmp	0x6048	; 0x6048 <__divsf3>
    6602:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__fp_inf>
    6606:	0c 94 65 31 	jmp	0x62ca	; 0x62ca <__fp_mpack>

0000660a <ldexp>:
    660a:	0e 94 9d 31 	call	0x633a	; 0x633a <__fp_splitA>
    660e:	d8 f3       	brcs	.-10     	; 0x6606 <inverse+0x14>
    6610:	99 23       	and	r25, r25
    6612:	c9 f3       	breq	.-14     	; 0x6606 <inverse+0x14>
    6614:	94 0f       	add	r25, r20
    6616:	51 1d       	adc	r21, r1
    6618:	a3 f3       	brvs	.-24     	; 0x6602 <inverse+0x10>
    661a:	91 50       	subi	r25, 0x01	; 1
    661c:	50 40       	sbci	r21, 0x00	; 0
    661e:	94 f0       	brlt	.+36     	; 0x6644 <ldexp+0x3a>
    6620:	59 f0       	breq	.+22     	; 0x6638 <ldexp+0x2e>
    6622:	88 23       	and	r24, r24
    6624:	32 f0       	brmi	.+12     	; 0x6632 <ldexp+0x28>
    6626:	66 0f       	add	r22, r22
    6628:	77 1f       	adc	r23, r23
    662a:	88 1f       	adc	r24, r24
    662c:	91 50       	subi	r25, 0x01	; 1
    662e:	50 40       	sbci	r21, 0x00	; 0
    6630:	c1 f7       	brne	.-16     	; 0x6622 <ldexp+0x18>
    6632:	9e 3f       	cpi	r25, 0xFE	; 254
    6634:	51 05       	cpc	r21, r1
    6636:	2c f7       	brge	.-54     	; 0x6602 <inverse+0x10>
    6638:	88 0f       	add	r24, r24
    663a:	91 1d       	adc	r25, r1
    663c:	96 95       	lsr	r25
    663e:	87 95       	ror	r24
    6640:	97 f9       	bld	r25, 7
    6642:	08 95       	ret
    6644:	5f 3f       	cpi	r21, 0xFF	; 255
    6646:	ac f0       	brlt	.+42     	; 0x6672 <ldexp+0x68>
    6648:	98 3e       	cpi	r25, 0xE8	; 232
    664a:	9c f0       	brlt	.+38     	; 0x6672 <ldexp+0x68>
    664c:	bb 27       	eor	r27, r27
    664e:	86 95       	lsr	r24
    6650:	77 95       	ror	r23
    6652:	67 95       	ror	r22
    6654:	b7 95       	ror	r27
    6656:	08 f4       	brcc	.+2      	; 0x665a <ldexp+0x50>
    6658:	b1 60       	ori	r27, 0x01	; 1
    665a:	93 95       	inc	r25
    665c:	c1 f7       	brne	.-16     	; 0x664e <ldexp+0x44>
    665e:	bb 0f       	add	r27, r27
    6660:	58 f7       	brcc	.-42     	; 0x6638 <ldexp+0x2e>
    6662:	11 f4       	brne	.+4      	; 0x6668 <ldexp+0x5e>
    6664:	60 ff       	sbrs	r22, 0
    6666:	e8 cf       	rjmp	.-48     	; 0x6638 <ldexp+0x2e>
    6668:	6f 5f       	subi	r22, 0xFF	; 255
    666a:	7f 4f       	sbci	r23, 0xFF	; 255
    666c:	8f 4f       	sbci	r24, 0xFF	; 255
    666e:	9f 4f       	sbci	r25, 0xFF	; 255
    6670:	e3 cf       	rjmp	.-58     	; 0x6638 <ldexp+0x2e>
    6672:	0c 94 d0 31 	jmp	0x63a0	; 0x63a0 <__fp_szero>
    6676:	16 f0       	brts	.+4      	; 0x667c <ldexp+0x72>
    6678:	0c 94 65 31 	jmp	0x62ca	; 0x62ca <__fp_mpack>
    667c:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <__fp_nan>
    6680:	68 94       	set
    6682:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__fp_inf>

00006686 <log>:
    6686:	0e 94 9d 31 	call	0x633a	; 0x633a <__fp_splitA>
    668a:	a8 f3       	brcs	.-22     	; 0x6676 <ldexp+0x6c>
    668c:	99 23       	and	r25, r25
    668e:	c1 f3       	breq	.-16     	; 0x6680 <ldexp+0x76>
    6690:	ae f3       	brts	.-22     	; 0x667c <ldexp+0x72>
    6692:	df 93       	push	r29
    6694:	cf 93       	push	r28
    6696:	1f 93       	push	r17
    6698:	0f 93       	push	r16
    669a:	ff 92       	push	r15
    669c:	c9 2f       	mov	r28, r25
    669e:	dd 27       	eor	r29, r29
    66a0:	88 23       	and	r24, r24
    66a2:	2a f0       	brmi	.+10     	; 0x66ae <log+0x28>
    66a4:	21 97       	sbiw	r28, 0x01	; 1
    66a6:	66 0f       	add	r22, r22
    66a8:	77 1f       	adc	r23, r23
    66aa:	88 1f       	adc	r24, r24
    66ac:	da f7       	brpl	.-10     	; 0x66a4 <log+0x1e>
    66ae:	20 e0       	ldi	r18, 0x00	; 0
    66b0:	30 e0       	ldi	r19, 0x00	; 0
    66b2:	40 e8       	ldi	r20, 0x80	; 128
    66b4:	5f eb       	ldi	r21, 0xBF	; 191
    66b6:	9f e3       	ldi	r25, 0x3F	; 63
    66b8:	88 39       	cpi	r24, 0x98	; 152
    66ba:	20 f0       	brcs	.+8      	; 0x66c4 <log+0x3e>
    66bc:	80 3e       	cpi	r24, 0xE0	; 224
    66be:	38 f0       	brcs	.+14     	; 0x66ce <log+0x48>
    66c0:	21 96       	adiw	r28, 0x01	; 1
    66c2:	8f 77       	andi	r24, 0x7F	; 127
    66c4:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    66c8:	ec e4       	ldi	r30, 0x4C	; 76
    66ca:	f1 e0       	ldi	r31, 0x01	; 1
    66cc:	04 c0       	rjmp	.+8      	; 0x66d6 <log+0x50>
    66ce:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__addsf3>
    66d2:	e9 e7       	ldi	r30, 0x79	; 121
    66d4:	f1 e0       	ldi	r31, 0x01	; 1
    66d6:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <__fp_powser>
    66da:	8b 01       	movw	r16, r22
    66dc:	be 01       	movw	r22, r28
    66de:	ec 01       	movw	r28, r24
    66e0:	fb 2e       	mov	r15, r27
    66e2:	6f 57       	subi	r22, 0x7F	; 127
    66e4:	71 09       	sbc	r23, r1
    66e6:	75 95       	asr	r23
    66e8:	77 1f       	adc	r23, r23
    66ea:	88 0b       	sbc	r24, r24
    66ec:	99 0b       	sbc	r25, r25
    66ee:	0e 94 ce 30 	call	0x619c	; 0x619c <__floatsisf>
    66f2:	28 e1       	ldi	r18, 0x18	; 24
    66f4:	32 e7       	ldi	r19, 0x72	; 114
    66f6:	41 e3       	ldi	r20, 0x31	; 49
    66f8:	5f e3       	ldi	r21, 0x3F	; 63
    66fa:	0e 94 ee 31 	call	0x63dc	; 0x63dc <__mulsf3x>
    66fe:	af 2d       	mov	r26, r15
    6700:	98 01       	movw	r18, r16
    6702:	ae 01       	movw	r20, r28
    6704:	ff 90       	pop	r15
    6706:	0f 91       	pop	r16
    6708:	1f 91       	pop	r17
    670a:	cf 91       	pop	r28
    670c:	df 91       	pop	r29
    670e:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__addsf3x>
    6712:	0c 94 84 31 	jmp	0x6308	; 0x6308 <__fp_round>

00006716 <modf>:
    6716:	fa 01       	movw	r30, r20
    6718:	dc 01       	movw	r26, r24
    671a:	aa 0f       	add	r26, r26
    671c:	bb 1f       	adc	r27, r27
    671e:	9b 01       	movw	r18, r22
    6720:	ac 01       	movw	r20, r24
    6722:	bf 57       	subi	r27, 0x7F	; 127
    6724:	28 f4       	brcc	.+10     	; 0x6730 <modf+0x1a>
    6726:	22 27       	eor	r18, r18
    6728:	33 27       	eor	r19, r19
    672a:	44 27       	eor	r20, r20
    672c:	50 78       	andi	r21, 0x80	; 128
    672e:	20 c0       	rjmp	.+64     	; 0x6770 <modf+0x5a>
    6730:	b7 51       	subi	r27, 0x17	; 23
    6732:	90 f4       	brcc	.+36     	; 0x6758 <modf+0x42>
    6734:	ab 2f       	mov	r26, r27
    6736:	00 24       	eor	r0, r0
    6738:	46 95       	lsr	r20
    673a:	37 95       	ror	r19
    673c:	27 95       	ror	r18
    673e:	01 1c       	adc	r0, r1
    6740:	a3 95       	inc	r26
    6742:	d2 f3       	brmi	.-12     	; 0x6738 <modf+0x22>
    6744:	00 20       	and	r0, r0
    6746:	71 f0       	breq	.+28     	; 0x6764 <modf+0x4e>
    6748:	22 0f       	add	r18, r18
    674a:	33 1f       	adc	r19, r19
    674c:	44 1f       	adc	r20, r20
    674e:	b3 95       	inc	r27
    6750:	da f3       	brmi	.-10     	; 0x6748 <modf+0x32>
    6752:	0e d0       	rcall	.+28     	; 0x6770 <modf+0x5a>
    6754:	0c 94 b2 2f 	jmp	0x5f64	; 0x5f64 <__subsf3>
    6758:	61 30       	cpi	r22, 0x01	; 1
    675a:	71 05       	cpc	r23, r1
    675c:	a0 e8       	ldi	r26, 0x80	; 128
    675e:	8a 07       	cpc	r24, r26
    6760:	b9 46       	sbci	r27, 0x69	; 105
    6762:	30 f4       	brcc	.+12     	; 0x6770 <modf+0x5a>
    6764:	9b 01       	movw	r18, r22
    6766:	ac 01       	movw	r20, r24
    6768:	66 27       	eor	r22, r22
    676a:	77 27       	eor	r23, r23
    676c:	88 27       	eor	r24, r24
    676e:	90 78       	andi	r25, 0x80	; 128
    6770:	30 96       	adiw	r30, 0x00	; 0
    6772:	21 f0       	breq	.+8      	; 0x677c <modf+0x66>
    6774:	20 83       	st	Z, r18
    6776:	31 83       	std	Z+1, r19	; 0x01
    6778:	42 83       	std	Z+2, r20	; 0x02
    677a:	53 83       	std	Z+3, r21	; 0x03
    677c:	08 95       	ret

0000677e <vfprintf>:
    677e:	a3 e1       	ldi	r26, 0x13	; 19
    6780:	b0 e0       	ldi	r27, 0x00	; 0
    6782:	e5 ec       	ldi	r30, 0xC5	; 197
    6784:	f3 e3       	ldi	r31, 0x33	; 51
    6786:	0c 94 a7 3b 	jmp	0x774e	; 0x774e <__prologue_saves__>
    678a:	6c 01       	movw	r12, r24
    678c:	4b 01       	movw	r8, r22
    678e:	2a 01       	movw	r4, r20
    6790:	fc 01       	movw	r30, r24
    6792:	17 82       	std	Z+7, r1	; 0x07
    6794:	16 82       	std	Z+6, r1	; 0x06
    6796:	83 81       	ldd	r24, Z+3	; 0x03
    6798:	81 ff       	sbrs	r24, 1
    679a:	43 c3       	rjmp	.+1670   	; 0x6e22 <vfprintf+0x6a4>
    679c:	ae 01       	movw	r20, r28
    679e:	4f 5f       	subi	r20, 0xFF	; 255
    67a0:	5f 4f       	sbci	r21, 0xFF	; 255
    67a2:	3a 01       	movw	r6, r20
    67a4:	f6 01       	movw	r30, r12
    67a6:	93 81       	ldd	r25, Z+3	; 0x03
    67a8:	f4 01       	movw	r30, r8
    67aa:	93 fd       	sbrc	r25, 3
    67ac:	85 91       	lpm	r24, Z+
    67ae:	93 ff       	sbrs	r25, 3
    67b0:	81 91       	ld	r24, Z+
    67b2:	4f 01       	movw	r8, r30
    67b4:	88 23       	and	r24, r24
    67b6:	09 f4       	brne	.+2      	; 0x67ba <vfprintf+0x3c>
    67b8:	30 c3       	rjmp	.+1632   	; 0x6e1a <vfprintf+0x69c>
    67ba:	85 32       	cpi	r24, 0x25	; 37
    67bc:	39 f4       	brne	.+14     	; 0x67cc <vfprintf+0x4e>
    67be:	93 fd       	sbrc	r25, 3
    67c0:	85 91       	lpm	r24, Z+
    67c2:	93 ff       	sbrs	r25, 3
    67c4:	81 91       	ld	r24, Z+
    67c6:	4f 01       	movw	r8, r30
    67c8:	85 32       	cpi	r24, 0x25	; 37
    67ca:	39 f4       	brne	.+14     	; 0x67da <vfprintf+0x5c>
    67cc:	b6 01       	movw	r22, r12
    67ce:	90 e0       	ldi	r25, 0x00	; 0
    67d0:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    67d4:	52 01       	movw	r10, r4
    67d6:	25 01       	movw	r4, r10
    67d8:	e5 cf       	rjmp	.-54     	; 0x67a4 <vfprintf+0x26>
    67da:	10 e0       	ldi	r17, 0x00	; 0
    67dc:	f1 2c       	mov	r15, r1
    67de:	20 e0       	ldi	r18, 0x00	; 0
    67e0:	20 32       	cpi	r18, 0x20	; 32
    67e2:	a0 f4       	brcc	.+40     	; 0x680c <vfprintf+0x8e>
    67e4:	8b 32       	cpi	r24, 0x2B	; 43
    67e6:	69 f0       	breq	.+26     	; 0x6802 <vfprintf+0x84>
    67e8:	30 f4       	brcc	.+12     	; 0x67f6 <vfprintf+0x78>
    67ea:	80 32       	cpi	r24, 0x20	; 32
    67ec:	59 f0       	breq	.+22     	; 0x6804 <vfprintf+0x86>
    67ee:	83 32       	cpi	r24, 0x23	; 35
    67f0:	69 f4       	brne	.+26     	; 0x680c <vfprintf+0x8e>
    67f2:	20 61       	ori	r18, 0x10	; 16
    67f4:	2c c0       	rjmp	.+88     	; 0x684e <vfprintf+0xd0>
    67f6:	8d 32       	cpi	r24, 0x2D	; 45
    67f8:	39 f0       	breq	.+14     	; 0x6808 <vfprintf+0x8a>
    67fa:	80 33       	cpi	r24, 0x30	; 48
    67fc:	39 f4       	brne	.+14     	; 0x680c <vfprintf+0x8e>
    67fe:	21 60       	ori	r18, 0x01	; 1
    6800:	26 c0       	rjmp	.+76     	; 0x684e <vfprintf+0xd0>
    6802:	22 60       	ori	r18, 0x02	; 2
    6804:	24 60       	ori	r18, 0x04	; 4
    6806:	23 c0       	rjmp	.+70     	; 0x684e <vfprintf+0xd0>
    6808:	28 60       	ori	r18, 0x08	; 8
    680a:	21 c0       	rjmp	.+66     	; 0x684e <vfprintf+0xd0>
    680c:	27 fd       	sbrc	r18, 7
    680e:	27 c0       	rjmp	.+78     	; 0x685e <vfprintf+0xe0>
    6810:	30 ed       	ldi	r19, 0xD0	; 208
    6812:	38 0f       	add	r19, r24
    6814:	3a 30       	cpi	r19, 0x0A	; 10
    6816:	78 f4       	brcc	.+30     	; 0x6836 <vfprintf+0xb8>
    6818:	26 ff       	sbrs	r18, 6
    681a:	06 c0       	rjmp	.+12     	; 0x6828 <vfprintf+0xaa>
    681c:	fa e0       	ldi	r31, 0x0A	; 10
    681e:	1f 9f       	mul	r17, r31
    6820:	30 0d       	add	r19, r0
    6822:	11 24       	eor	r1, r1
    6824:	13 2f       	mov	r17, r19
    6826:	13 c0       	rjmp	.+38     	; 0x684e <vfprintf+0xd0>
    6828:	4a e0       	ldi	r20, 0x0A	; 10
    682a:	f4 9e       	mul	r15, r20
    682c:	30 0d       	add	r19, r0
    682e:	11 24       	eor	r1, r1
    6830:	f3 2e       	mov	r15, r19
    6832:	20 62       	ori	r18, 0x20	; 32
    6834:	0c c0       	rjmp	.+24     	; 0x684e <vfprintf+0xd0>
    6836:	8e 32       	cpi	r24, 0x2E	; 46
    6838:	21 f4       	brne	.+8      	; 0x6842 <vfprintf+0xc4>
    683a:	26 fd       	sbrc	r18, 6
    683c:	ee c2       	rjmp	.+1500   	; 0x6e1a <vfprintf+0x69c>
    683e:	20 64       	ori	r18, 0x40	; 64
    6840:	06 c0       	rjmp	.+12     	; 0x684e <vfprintf+0xd0>
    6842:	8c 36       	cpi	r24, 0x6C	; 108
    6844:	11 f4       	brne	.+4      	; 0x684a <vfprintf+0xcc>
    6846:	20 68       	ori	r18, 0x80	; 128
    6848:	02 c0       	rjmp	.+4      	; 0x684e <vfprintf+0xd0>
    684a:	88 36       	cpi	r24, 0x68	; 104
    684c:	41 f4       	brne	.+16     	; 0x685e <vfprintf+0xe0>
    684e:	f4 01       	movw	r30, r8
    6850:	93 fd       	sbrc	r25, 3
    6852:	85 91       	lpm	r24, Z+
    6854:	93 ff       	sbrs	r25, 3
    6856:	81 91       	ld	r24, Z+
    6858:	4f 01       	movw	r8, r30
    685a:	81 11       	cpse	r24, r1
    685c:	c1 cf       	rjmp	.-126    	; 0x67e0 <vfprintf+0x62>
    685e:	9b eb       	ldi	r25, 0xBB	; 187
    6860:	98 0f       	add	r25, r24
    6862:	93 30       	cpi	r25, 0x03	; 3
    6864:	18 f4       	brcc	.+6      	; 0x686c <vfprintf+0xee>
    6866:	20 61       	ori	r18, 0x10	; 16
    6868:	80 5e       	subi	r24, 0xE0	; 224
    686a:	06 c0       	rjmp	.+12     	; 0x6878 <vfprintf+0xfa>
    686c:	9b e9       	ldi	r25, 0x9B	; 155
    686e:	98 0f       	add	r25, r24
    6870:	93 30       	cpi	r25, 0x03	; 3
    6872:	08 f0       	brcs	.+2      	; 0x6876 <vfprintf+0xf8>
    6874:	71 c1       	rjmp	.+738    	; 0x6b58 <vfprintf+0x3da>
    6876:	2f 7e       	andi	r18, 0xEF	; 239
    6878:	26 ff       	sbrs	r18, 6
    687a:	16 e0       	ldi	r17, 0x06	; 6
    687c:	2f 73       	andi	r18, 0x3F	; 63
    687e:	32 2e       	mov	r3, r18
    6880:	85 36       	cpi	r24, 0x65	; 101
    6882:	19 f4       	brne	.+6      	; 0x688a <vfprintf+0x10c>
    6884:	20 64       	ori	r18, 0x40	; 64
    6886:	32 2e       	mov	r3, r18
    6888:	08 c0       	rjmp	.+16     	; 0x689a <vfprintf+0x11c>
    688a:	86 36       	cpi	r24, 0x66	; 102
    688c:	21 f4       	brne	.+8      	; 0x6896 <vfprintf+0x118>
    688e:	f2 2f       	mov	r31, r18
    6890:	f0 68       	ori	r31, 0x80	; 128
    6892:	3f 2e       	mov	r3, r31
    6894:	02 c0       	rjmp	.+4      	; 0x689a <vfprintf+0x11c>
    6896:	11 11       	cpse	r17, r1
    6898:	11 50       	subi	r17, 0x01	; 1
    689a:	37 fe       	sbrs	r3, 7
    689c:	07 c0       	rjmp	.+14     	; 0x68ac <vfprintf+0x12e>
    689e:	1c 33       	cpi	r17, 0x3C	; 60
    68a0:	50 f4       	brcc	.+20     	; 0x68b6 <vfprintf+0x138>
    68a2:	ee 24       	eor	r14, r14
    68a4:	e3 94       	inc	r14
    68a6:	e1 0e       	add	r14, r17
    68a8:	27 e0       	ldi	r18, 0x07	; 7
    68aa:	0b c0       	rjmp	.+22     	; 0x68c2 <vfprintf+0x144>
    68ac:	18 30       	cpi	r17, 0x08	; 8
    68ae:	38 f0       	brcs	.+14     	; 0x68be <vfprintf+0x140>
    68b0:	27 e0       	ldi	r18, 0x07	; 7
    68b2:	17 e0       	ldi	r17, 0x07	; 7
    68b4:	05 c0       	rjmp	.+10     	; 0x68c0 <vfprintf+0x142>
    68b6:	27 e0       	ldi	r18, 0x07	; 7
    68b8:	4c e3       	ldi	r20, 0x3C	; 60
    68ba:	e4 2e       	mov	r14, r20
    68bc:	02 c0       	rjmp	.+4      	; 0x68c2 <vfprintf+0x144>
    68be:	21 2f       	mov	r18, r17
    68c0:	e1 2c       	mov	r14, r1
    68c2:	52 01       	movw	r10, r4
    68c4:	44 e0       	ldi	r20, 0x04	; 4
    68c6:	a4 0e       	add	r10, r20
    68c8:	b1 1c       	adc	r11, r1
    68ca:	f2 01       	movw	r30, r4
    68cc:	60 81       	ld	r22, Z
    68ce:	71 81       	ldd	r23, Z+1	; 0x01
    68d0:	82 81       	ldd	r24, Z+2	; 0x02
    68d2:	93 81       	ldd	r25, Z+3	; 0x03
    68d4:	0e 2d       	mov	r16, r14
    68d6:	a3 01       	movw	r20, r6
    68d8:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <__ftoa_engine>
    68dc:	2c 01       	movw	r4, r24
    68de:	09 81       	ldd	r16, Y+1	; 0x01
    68e0:	00 ff       	sbrs	r16, 0
    68e2:	02 c0       	rjmp	.+4      	; 0x68e8 <vfprintf+0x16a>
    68e4:	03 ff       	sbrs	r16, 3
    68e6:	07 c0       	rjmp	.+14     	; 0x68f6 <vfprintf+0x178>
    68e8:	31 fc       	sbrc	r3, 1
    68ea:	08 c0       	rjmp	.+16     	; 0x68fc <vfprintf+0x17e>
    68ec:	32 fe       	sbrs	r3, 2
    68ee:	09 c0       	rjmp	.+18     	; 0x6902 <vfprintf+0x184>
    68f0:	30 e2       	ldi	r19, 0x20	; 32
    68f2:	23 2e       	mov	r2, r19
    68f4:	07 c0       	rjmp	.+14     	; 0x6904 <vfprintf+0x186>
    68f6:	2d e2       	ldi	r18, 0x2D	; 45
    68f8:	22 2e       	mov	r2, r18
    68fa:	04 c0       	rjmp	.+8      	; 0x6904 <vfprintf+0x186>
    68fc:	9b e2       	ldi	r25, 0x2B	; 43
    68fe:	29 2e       	mov	r2, r25
    6900:	01 c0       	rjmp	.+2      	; 0x6904 <vfprintf+0x186>
    6902:	21 2c       	mov	r2, r1
    6904:	80 2f       	mov	r24, r16
    6906:	8c 70       	andi	r24, 0x0C	; 12
    6908:	19 f0       	breq	.+6      	; 0x6910 <vfprintf+0x192>
    690a:	21 10       	cpse	r2, r1
    690c:	68 c2       	rjmp	.+1232   	; 0x6dde <vfprintf+0x660>
    690e:	a8 c2       	rjmp	.+1360   	; 0x6e60 <vfprintf+0x6e2>
    6910:	37 fe       	sbrs	r3, 7
    6912:	0f c0       	rjmp	.+30     	; 0x6932 <vfprintf+0x1b4>
    6914:	e4 0c       	add	r14, r4
    6916:	04 ff       	sbrs	r16, 4
    6918:	04 c0       	rjmp	.+8      	; 0x6922 <vfprintf+0x1a4>
    691a:	8a 81       	ldd	r24, Y+2	; 0x02
    691c:	81 33       	cpi	r24, 0x31	; 49
    691e:	09 f4       	brne	.+2      	; 0x6922 <vfprintf+0x1a4>
    6920:	ea 94       	dec	r14
    6922:	1e 14       	cp	r1, r14
    6924:	74 f5       	brge	.+92     	; 0x6982 <vfprintf+0x204>
    6926:	f8 e0       	ldi	r31, 0x08	; 8
    6928:	fe 15       	cp	r31, r14
    692a:	78 f5       	brcc	.+94     	; 0x698a <vfprintf+0x20c>
    692c:	88 e0       	ldi	r24, 0x08	; 8
    692e:	e8 2e       	mov	r14, r24
    6930:	2c c0       	rjmp	.+88     	; 0x698a <vfprintf+0x20c>
    6932:	36 fc       	sbrc	r3, 6
    6934:	2a c0       	rjmp	.+84     	; 0x698a <vfprintf+0x20c>
    6936:	81 2f       	mov	r24, r17
    6938:	90 e0       	ldi	r25, 0x00	; 0
    693a:	84 15       	cp	r24, r4
    693c:	95 05       	cpc	r25, r5
    693e:	9c f0       	brlt	.+38     	; 0x6966 <vfprintf+0x1e8>
    6940:	2c ef       	ldi	r18, 0xFC	; 252
    6942:	42 16       	cp	r4, r18
    6944:	2f ef       	ldi	r18, 0xFF	; 255
    6946:	52 06       	cpc	r5, r18
    6948:	74 f0       	brlt	.+28     	; 0x6966 <vfprintf+0x1e8>
    694a:	43 2d       	mov	r20, r3
    694c:	40 68       	ori	r20, 0x80	; 128
    694e:	34 2e       	mov	r3, r20
    6950:	0a c0       	rjmp	.+20     	; 0x6966 <vfprintf+0x1e8>
    6952:	e2 e0       	ldi	r30, 0x02	; 2
    6954:	f0 e0       	ldi	r31, 0x00	; 0
    6956:	ec 0f       	add	r30, r28
    6958:	fd 1f       	adc	r31, r29
    695a:	e1 0f       	add	r30, r17
    695c:	f1 1d       	adc	r31, r1
    695e:	80 81       	ld	r24, Z
    6960:	80 33       	cpi	r24, 0x30	; 48
    6962:	19 f4       	brne	.+6      	; 0x696a <vfprintf+0x1ec>
    6964:	11 50       	subi	r17, 0x01	; 1
    6966:	11 11       	cpse	r17, r1
    6968:	f4 cf       	rjmp	.-24     	; 0x6952 <vfprintf+0x1d4>
    696a:	37 fe       	sbrs	r3, 7
    696c:	0e c0       	rjmp	.+28     	; 0x698a <vfprintf+0x20c>
    696e:	ee 24       	eor	r14, r14
    6970:	e3 94       	inc	r14
    6972:	e1 0e       	add	r14, r17
    6974:	81 2f       	mov	r24, r17
    6976:	90 e0       	ldi	r25, 0x00	; 0
    6978:	48 16       	cp	r4, r24
    697a:	59 06       	cpc	r5, r25
    697c:	2c f4       	brge	.+10     	; 0x6988 <vfprintf+0x20a>
    697e:	14 19       	sub	r17, r4
    6980:	04 c0       	rjmp	.+8      	; 0x698a <vfprintf+0x20c>
    6982:	ee 24       	eor	r14, r14
    6984:	e3 94       	inc	r14
    6986:	01 c0       	rjmp	.+2      	; 0x698a <vfprintf+0x20c>
    6988:	10 e0       	ldi	r17, 0x00	; 0
    698a:	37 fe       	sbrs	r3, 7
    698c:	06 c0       	rjmp	.+12     	; 0x699a <vfprintf+0x21c>
    698e:	14 14       	cp	r1, r4
    6990:	15 04       	cpc	r1, r5
    6992:	34 f4       	brge	.+12     	; 0x69a0 <vfprintf+0x222>
    6994:	c2 01       	movw	r24, r4
    6996:	01 96       	adiw	r24, 0x01	; 1
    6998:	05 c0       	rjmp	.+10     	; 0x69a4 <vfprintf+0x226>
    699a:	85 e0       	ldi	r24, 0x05	; 5
    699c:	90 e0       	ldi	r25, 0x00	; 0
    699e:	02 c0       	rjmp	.+4      	; 0x69a4 <vfprintf+0x226>
    69a0:	81 e0       	ldi	r24, 0x01	; 1
    69a2:	90 e0       	ldi	r25, 0x00	; 0
    69a4:	21 10       	cpse	r2, r1
    69a6:	01 96       	adiw	r24, 0x01	; 1
    69a8:	11 23       	and	r17, r17
    69aa:	31 f0       	breq	.+12     	; 0x69b8 <vfprintf+0x23a>
    69ac:	21 2f       	mov	r18, r17
    69ae:	30 e0       	ldi	r19, 0x00	; 0
    69b0:	2f 5f       	subi	r18, 0xFF	; 255
    69b2:	3f 4f       	sbci	r19, 0xFF	; 255
    69b4:	82 0f       	add	r24, r18
    69b6:	93 1f       	adc	r25, r19
    69b8:	2f 2d       	mov	r18, r15
    69ba:	30 e0       	ldi	r19, 0x00	; 0
    69bc:	82 17       	cp	r24, r18
    69be:	93 07       	cpc	r25, r19
    69c0:	14 f4       	brge	.+4      	; 0x69c6 <vfprintf+0x248>
    69c2:	f8 1a       	sub	r15, r24
    69c4:	01 c0       	rjmp	.+2      	; 0x69c8 <vfprintf+0x24a>
    69c6:	f1 2c       	mov	r15, r1
    69c8:	83 2d       	mov	r24, r3
    69ca:	89 70       	andi	r24, 0x09	; 9
    69cc:	49 f4       	brne	.+18     	; 0x69e0 <vfprintf+0x262>
    69ce:	ff 20       	and	r15, r15
    69d0:	39 f0       	breq	.+14     	; 0x69e0 <vfprintf+0x262>
    69d2:	b6 01       	movw	r22, r12
    69d4:	80 e2       	ldi	r24, 0x20	; 32
    69d6:	90 e0       	ldi	r25, 0x00	; 0
    69d8:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    69dc:	fa 94       	dec	r15
    69de:	f7 cf       	rjmp	.-18     	; 0x69ce <vfprintf+0x250>
    69e0:	22 20       	and	r2, r2
    69e2:	29 f0       	breq	.+10     	; 0x69ee <vfprintf+0x270>
    69e4:	b6 01       	movw	r22, r12
    69e6:	82 2d       	mov	r24, r2
    69e8:	90 e0       	ldi	r25, 0x00	; 0
    69ea:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    69ee:	33 fc       	sbrc	r3, 3
    69f0:	09 c0       	rjmp	.+18     	; 0x6a04 <vfprintf+0x286>
    69f2:	ff 20       	and	r15, r15
    69f4:	39 f0       	breq	.+14     	; 0x6a04 <vfprintf+0x286>
    69f6:	b6 01       	movw	r22, r12
    69f8:	80 e3       	ldi	r24, 0x30	; 48
    69fa:	90 e0       	ldi	r25, 0x00	; 0
    69fc:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6a00:	fa 94       	dec	r15
    6a02:	f7 cf       	rjmp	.-18     	; 0x69f2 <vfprintf+0x274>
    6a04:	37 fe       	sbrs	r3, 7
    6a06:	5a c0       	rjmp	.+180    	; 0x6abc <vfprintf+0x33e>
    6a08:	94 2d       	mov	r25, r4
    6a0a:	85 2d       	mov	r24, r5
    6a0c:	57 fe       	sbrs	r5, 7
    6a0e:	02 c0       	rjmp	.+4      	; 0x6a14 <vfprintf+0x296>
    6a10:	90 e0       	ldi	r25, 0x00	; 0
    6a12:	80 e0       	ldi	r24, 0x00	; 0
    6a14:	29 2e       	mov	r2, r25
    6a16:	38 2e       	mov	r3, r24
    6a18:	20 e0       	ldi	r18, 0x00	; 0
    6a1a:	30 e0       	ldi	r19, 0x00	; 0
    6a1c:	a2 01       	movw	r20, r4
    6a1e:	4e 19       	sub	r20, r14
    6a20:	51 09       	sbc	r21, r1
    6a22:	5d 87       	std	Y+13, r21	; 0x0d
    6a24:	4c 87       	std	Y+12, r20	; 0x0c
    6a26:	a2 01       	movw	r20, r4
    6a28:	42 19       	sub	r20, r2
    6a2a:	53 09       	sbc	r21, r3
    6a2c:	5f 87       	std	Y+15, r21	; 0x0f
    6a2e:	4e 87       	std	Y+14, r20	; 0x0e
    6a30:	61 2f       	mov	r22, r17
    6a32:	70 e0       	ldi	r23, 0x00	; 0
    6a34:	44 27       	eor	r20, r20
    6a36:	55 27       	eor	r21, r21
    6a38:	46 1b       	sub	r20, r22
    6a3a:	57 0b       	sbc	r21, r23
    6a3c:	59 8b       	std	Y+17, r21	; 0x11
    6a3e:	48 8b       	std	Y+16, r20	; 0x10
    6a40:	5f ef       	ldi	r21, 0xFF	; 255
    6a42:	25 16       	cp	r2, r21
    6a44:	35 06       	cpc	r3, r21
    6a46:	49 f4       	brne	.+18     	; 0x6a5a <vfprintf+0x2dc>
    6a48:	b6 01       	movw	r22, r12
    6a4a:	8e e2       	ldi	r24, 0x2E	; 46
    6a4c:	90 e0       	ldi	r25, 0x00	; 0
    6a4e:	2a 8b       	std	Y+18, r18	; 0x12
    6a50:	3b 8b       	std	Y+19, r19	; 0x13
    6a52:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6a56:	3b 89       	ldd	r19, Y+19	; 0x13
    6a58:	2a 89       	ldd	r18, Y+18	; 0x12
    6a5a:	42 14       	cp	r4, r2
    6a5c:	53 04       	cpc	r5, r3
    6a5e:	6c f0       	brlt	.+26     	; 0x6a7a <vfprintf+0x2fc>
    6a60:	4c 85       	ldd	r20, Y+12	; 0x0c
    6a62:	5d 85       	ldd	r21, Y+13	; 0x0d
    6a64:	42 15       	cp	r20, r2
    6a66:	53 05       	cpc	r21, r3
    6a68:	44 f4       	brge	.+16     	; 0x6a7a <vfprintf+0x2fc>
    6a6a:	ee 85       	ldd	r30, Y+14	; 0x0e
    6a6c:	ff 85       	ldd	r31, Y+15	; 0x0f
    6a6e:	e2 0f       	add	r30, r18
    6a70:	f3 1f       	adc	r31, r19
    6a72:	e6 0d       	add	r30, r6
    6a74:	f7 1d       	adc	r31, r7
    6a76:	81 81       	ldd	r24, Z+1	; 0x01
    6a78:	01 c0       	rjmp	.+2      	; 0x6a7c <vfprintf+0x2fe>
    6a7a:	80 e3       	ldi	r24, 0x30	; 48
    6a7c:	51 e0       	ldi	r21, 0x01	; 1
    6a7e:	25 1a       	sub	r2, r21
    6a80:	31 08       	sbc	r3, r1
    6a82:	2f 5f       	subi	r18, 0xFF	; 255
    6a84:	3f 4f       	sbci	r19, 0xFF	; 255
    6a86:	48 89       	ldd	r20, Y+16	; 0x10
    6a88:	59 89       	ldd	r21, Y+17	; 0x11
    6a8a:	24 16       	cp	r2, r20
    6a8c:	35 06       	cpc	r3, r21
    6a8e:	4c f0       	brlt	.+18     	; 0x6aa2 <vfprintf+0x324>
    6a90:	b6 01       	movw	r22, r12
    6a92:	90 e0       	ldi	r25, 0x00	; 0
    6a94:	2a 8b       	std	Y+18, r18	; 0x12
    6a96:	3b 8b       	std	Y+19, r19	; 0x13
    6a98:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6a9c:	2a 89       	ldd	r18, Y+18	; 0x12
    6a9e:	3b 89       	ldd	r19, Y+19	; 0x13
    6aa0:	cf cf       	rjmp	.-98     	; 0x6a40 <vfprintf+0x2c2>
    6aa2:	24 14       	cp	r2, r4
    6aa4:	35 04       	cpc	r3, r5
    6aa6:	39 f4       	brne	.+14     	; 0x6ab6 <vfprintf+0x338>
    6aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    6aaa:	96 33       	cpi	r25, 0x36	; 54
    6aac:	18 f4       	brcc	.+6      	; 0x6ab4 <vfprintf+0x336>
    6aae:	95 33       	cpi	r25, 0x35	; 53
    6ab0:	11 f4       	brne	.+4      	; 0x6ab6 <vfprintf+0x338>
    6ab2:	04 ff       	sbrs	r16, 4
    6ab4:	81 e3       	ldi	r24, 0x31	; 49
    6ab6:	b6 01       	movw	r22, r12
    6ab8:	90 e0       	ldi	r25, 0x00	; 0
    6aba:	4b c0       	rjmp	.+150    	; 0x6b52 <vfprintf+0x3d4>
    6abc:	8a 81       	ldd	r24, Y+2	; 0x02
    6abe:	81 33       	cpi	r24, 0x31	; 49
    6ac0:	09 f0       	breq	.+2      	; 0x6ac4 <vfprintf+0x346>
    6ac2:	0f 7e       	andi	r16, 0xEF	; 239
    6ac4:	b6 01       	movw	r22, r12
    6ac6:	90 e0       	ldi	r25, 0x00	; 0
    6ac8:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6acc:	11 11       	cpse	r17, r1
    6ace:	05 c0       	rjmp	.+10     	; 0x6ada <vfprintf+0x35c>
    6ad0:	34 fc       	sbrc	r3, 4
    6ad2:	18 c0       	rjmp	.+48     	; 0x6b04 <vfprintf+0x386>
    6ad4:	85 e6       	ldi	r24, 0x65	; 101
    6ad6:	90 e0       	ldi	r25, 0x00	; 0
    6ad8:	17 c0       	rjmp	.+46     	; 0x6b08 <vfprintf+0x38a>
    6ada:	b6 01       	movw	r22, r12
    6adc:	8e e2       	ldi	r24, 0x2E	; 46
    6ade:	90 e0       	ldi	r25, 0x00	; 0
    6ae0:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6ae4:	82 e0       	ldi	r24, 0x02	; 2
    6ae6:	ee 24       	eor	r14, r14
    6ae8:	e3 94       	inc	r14
    6aea:	e8 0e       	add	r14, r24
    6aec:	f3 01       	movw	r30, r6
    6aee:	e8 0f       	add	r30, r24
    6af0:	f1 1d       	adc	r31, r1
    6af2:	80 81       	ld	r24, Z
    6af4:	b6 01       	movw	r22, r12
    6af6:	90 e0       	ldi	r25, 0x00	; 0
    6af8:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6afc:	11 50       	subi	r17, 0x01	; 1
    6afe:	8e 2d       	mov	r24, r14
    6b00:	91 f7       	brne	.-28     	; 0x6ae6 <vfprintf+0x368>
    6b02:	e6 cf       	rjmp	.-52     	; 0x6ad0 <vfprintf+0x352>
    6b04:	85 e4       	ldi	r24, 0x45	; 69
    6b06:	90 e0       	ldi	r25, 0x00	; 0
    6b08:	b6 01       	movw	r22, r12
    6b0a:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6b0e:	57 fc       	sbrc	r5, 7
    6b10:	05 c0       	rjmp	.+10     	; 0x6b1c <vfprintf+0x39e>
    6b12:	41 14       	cp	r4, r1
    6b14:	51 04       	cpc	r5, r1
    6b16:	39 f4       	brne	.+14     	; 0x6b26 <vfprintf+0x3a8>
    6b18:	04 ff       	sbrs	r16, 4
    6b1a:	05 c0       	rjmp	.+10     	; 0x6b26 <vfprintf+0x3a8>
    6b1c:	51 94       	neg	r5
    6b1e:	41 94       	neg	r4
    6b20:	51 08       	sbc	r5, r1
    6b22:	8d e2       	ldi	r24, 0x2D	; 45
    6b24:	01 c0       	rjmp	.+2      	; 0x6b28 <vfprintf+0x3aa>
    6b26:	8b e2       	ldi	r24, 0x2B	; 43
    6b28:	b6 01       	movw	r22, r12
    6b2a:	90 e0       	ldi	r25, 0x00	; 0
    6b2c:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6b30:	80 e3       	ldi	r24, 0x30	; 48
    6b32:	9a e0       	ldi	r25, 0x0A	; 10
    6b34:	49 16       	cp	r4, r25
    6b36:	51 04       	cpc	r5, r1
    6b38:	2c f0       	brlt	.+10     	; 0x6b44 <vfprintf+0x3c6>
    6b3a:	8f 5f       	subi	r24, 0xFF	; 255
    6b3c:	5a e0       	ldi	r21, 0x0A	; 10
    6b3e:	45 1a       	sub	r4, r21
    6b40:	51 08       	sbc	r5, r1
    6b42:	f7 cf       	rjmp	.-18     	; 0x6b32 <vfprintf+0x3b4>
    6b44:	b6 01       	movw	r22, r12
    6b46:	90 e0       	ldi	r25, 0x00	; 0
    6b48:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6b4c:	b6 01       	movw	r22, r12
    6b4e:	c2 01       	movw	r24, r4
    6b50:	c0 96       	adiw	r24, 0x30	; 48
    6b52:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6b56:	57 c1       	rjmp	.+686    	; 0x6e06 <vfprintf+0x688>
    6b58:	83 36       	cpi	r24, 0x63	; 99
    6b5a:	31 f0       	breq	.+12     	; 0x6b68 <vfprintf+0x3ea>
    6b5c:	83 37       	cpi	r24, 0x73	; 115
    6b5e:	79 f0       	breq	.+30     	; 0x6b7e <vfprintf+0x400>
    6b60:	83 35       	cpi	r24, 0x53	; 83
    6b62:	09 f0       	breq	.+2      	; 0x6b66 <vfprintf+0x3e8>
    6b64:	58 c0       	rjmp	.+176    	; 0x6c16 <vfprintf+0x498>
    6b66:	21 c0       	rjmp	.+66     	; 0x6baa <vfprintf+0x42c>
    6b68:	52 01       	movw	r10, r4
    6b6a:	e2 e0       	ldi	r30, 0x02	; 2
    6b6c:	ae 0e       	add	r10, r30
    6b6e:	b1 1c       	adc	r11, r1
    6b70:	f2 01       	movw	r30, r4
    6b72:	80 81       	ld	r24, Z
    6b74:	89 83       	std	Y+1, r24	; 0x01
    6b76:	01 e0       	ldi	r16, 0x01	; 1
    6b78:	10 e0       	ldi	r17, 0x00	; 0
    6b7a:	23 01       	movw	r4, r6
    6b7c:	14 c0       	rjmp	.+40     	; 0x6ba6 <vfprintf+0x428>
    6b7e:	52 01       	movw	r10, r4
    6b80:	f2 e0       	ldi	r31, 0x02	; 2
    6b82:	af 0e       	add	r10, r31
    6b84:	b1 1c       	adc	r11, r1
    6b86:	f2 01       	movw	r30, r4
    6b88:	40 80       	ld	r4, Z
    6b8a:	51 80       	ldd	r5, Z+1	; 0x01
    6b8c:	26 ff       	sbrs	r18, 6
    6b8e:	03 c0       	rjmp	.+6      	; 0x6b96 <vfprintf+0x418>
    6b90:	61 2f       	mov	r22, r17
    6b92:	70 e0       	ldi	r23, 0x00	; 0
    6b94:	02 c0       	rjmp	.+4      	; 0x6b9a <vfprintf+0x41c>
    6b96:	6f ef       	ldi	r22, 0xFF	; 255
    6b98:	7f ef       	ldi	r23, 0xFF	; 255
    6b9a:	c2 01       	movw	r24, r4
    6b9c:	2a 8b       	std	Y+18, r18	; 0x12
    6b9e:	0e 94 15 3d 	call	0x7a2a	; 0x7a2a <strnlen>
    6ba2:	8c 01       	movw	r16, r24
    6ba4:	2a 89       	ldd	r18, Y+18	; 0x12
    6ba6:	2f 77       	andi	r18, 0x7F	; 127
    6ba8:	15 c0       	rjmp	.+42     	; 0x6bd4 <vfprintf+0x456>
    6baa:	52 01       	movw	r10, r4
    6bac:	f2 e0       	ldi	r31, 0x02	; 2
    6bae:	af 0e       	add	r10, r31
    6bb0:	b1 1c       	adc	r11, r1
    6bb2:	f2 01       	movw	r30, r4
    6bb4:	40 80       	ld	r4, Z
    6bb6:	51 80       	ldd	r5, Z+1	; 0x01
    6bb8:	26 ff       	sbrs	r18, 6
    6bba:	03 c0       	rjmp	.+6      	; 0x6bc2 <vfprintf+0x444>
    6bbc:	61 2f       	mov	r22, r17
    6bbe:	70 e0       	ldi	r23, 0x00	; 0
    6bc0:	02 c0       	rjmp	.+4      	; 0x6bc6 <vfprintf+0x448>
    6bc2:	6f ef       	ldi	r22, 0xFF	; 255
    6bc4:	7f ef       	ldi	r23, 0xFF	; 255
    6bc6:	c2 01       	movw	r24, r4
    6bc8:	2a 8b       	std	Y+18, r18	; 0x12
    6bca:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <strnlen_P>
    6bce:	8c 01       	movw	r16, r24
    6bd0:	2a 89       	ldd	r18, Y+18	; 0x12
    6bd2:	20 68       	ori	r18, 0x80	; 128
    6bd4:	32 2e       	mov	r3, r18
    6bd6:	23 fd       	sbrc	r18, 3
    6bd8:	1a c0       	rjmp	.+52     	; 0x6c0e <vfprintf+0x490>
    6bda:	8f 2d       	mov	r24, r15
    6bdc:	90 e0       	ldi	r25, 0x00	; 0
    6bde:	08 17       	cp	r16, r24
    6be0:	19 07       	cpc	r17, r25
    6be2:	a8 f4       	brcc	.+42     	; 0x6c0e <vfprintf+0x490>
    6be4:	b6 01       	movw	r22, r12
    6be6:	80 e2       	ldi	r24, 0x20	; 32
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    6bea:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6bee:	fa 94       	dec	r15
    6bf0:	f4 cf       	rjmp	.-24     	; 0x6bda <vfprintf+0x45c>
    6bf2:	f2 01       	movw	r30, r4
    6bf4:	37 fc       	sbrc	r3, 7
    6bf6:	85 91       	lpm	r24, Z+
    6bf8:	37 fe       	sbrs	r3, 7
    6bfa:	81 91       	ld	r24, Z+
    6bfc:	2f 01       	movw	r4, r30
    6bfe:	b6 01       	movw	r22, r12
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6c06:	f1 10       	cpse	r15, r1
    6c08:	fa 94       	dec	r15
    6c0a:	01 50       	subi	r16, 0x01	; 1
    6c0c:	11 09       	sbc	r17, r1
    6c0e:	01 15       	cp	r16, r1
    6c10:	11 05       	cpc	r17, r1
    6c12:	79 f7       	brne	.-34     	; 0x6bf2 <vfprintf+0x474>
    6c14:	f8 c0       	rjmp	.+496    	; 0x6e06 <vfprintf+0x688>
    6c16:	84 36       	cpi	r24, 0x64	; 100
    6c18:	11 f0       	breq	.+4      	; 0x6c1e <vfprintf+0x4a0>
    6c1a:	89 36       	cpi	r24, 0x69	; 105
    6c1c:	59 f5       	brne	.+86     	; 0x6c74 <vfprintf+0x4f6>
    6c1e:	52 01       	movw	r10, r4
    6c20:	27 ff       	sbrs	r18, 7
    6c22:	09 c0       	rjmp	.+18     	; 0x6c36 <vfprintf+0x4b8>
    6c24:	f4 e0       	ldi	r31, 0x04	; 4
    6c26:	af 0e       	add	r10, r31
    6c28:	b1 1c       	adc	r11, r1
    6c2a:	f2 01       	movw	r30, r4
    6c2c:	60 81       	ld	r22, Z
    6c2e:	71 81       	ldd	r23, Z+1	; 0x01
    6c30:	82 81       	ldd	r24, Z+2	; 0x02
    6c32:	93 81       	ldd	r25, Z+3	; 0x03
    6c34:	0a c0       	rjmp	.+20     	; 0x6c4a <vfprintf+0x4cc>
    6c36:	f2 e0       	ldi	r31, 0x02	; 2
    6c38:	af 0e       	add	r10, r31
    6c3a:	b1 1c       	adc	r11, r1
    6c3c:	f2 01       	movw	r30, r4
    6c3e:	60 81       	ld	r22, Z
    6c40:	71 81       	ldd	r23, Z+1	; 0x01
    6c42:	07 2e       	mov	r0, r23
    6c44:	00 0c       	add	r0, r0
    6c46:	88 0b       	sbc	r24, r24
    6c48:	99 0b       	sbc	r25, r25
    6c4a:	2f 76       	andi	r18, 0x6F	; 111
    6c4c:	32 2e       	mov	r3, r18
    6c4e:	97 ff       	sbrs	r25, 7
    6c50:	09 c0       	rjmp	.+18     	; 0x6c64 <vfprintf+0x4e6>
    6c52:	90 95       	com	r25
    6c54:	80 95       	com	r24
    6c56:	70 95       	com	r23
    6c58:	61 95       	neg	r22
    6c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    6c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c60:	20 68       	ori	r18, 0x80	; 128
    6c62:	32 2e       	mov	r3, r18
    6c64:	2a e0       	ldi	r18, 0x0A	; 10
    6c66:	30 e0       	ldi	r19, 0x00	; 0
    6c68:	a3 01       	movw	r20, r6
    6c6a:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <__ultoa_invert>
    6c6e:	e8 2e       	mov	r14, r24
    6c70:	e6 18       	sub	r14, r6
    6c72:	3f c0       	rjmp	.+126    	; 0x6cf2 <vfprintf+0x574>
    6c74:	02 2f       	mov	r16, r18
    6c76:	85 37       	cpi	r24, 0x75	; 117
    6c78:	21 f4       	brne	.+8      	; 0x6c82 <vfprintf+0x504>
    6c7a:	0f 7e       	andi	r16, 0xEF	; 239
    6c7c:	2a e0       	ldi	r18, 0x0A	; 10
    6c7e:	30 e0       	ldi	r19, 0x00	; 0
    6c80:	1d c0       	rjmp	.+58     	; 0x6cbc <vfprintf+0x53e>
    6c82:	09 7f       	andi	r16, 0xF9	; 249
    6c84:	8f 36       	cpi	r24, 0x6F	; 111
    6c86:	91 f0       	breq	.+36     	; 0x6cac <vfprintf+0x52e>
    6c88:	18 f4       	brcc	.+6      	; 0x6c90 <vfprintf+0x512>
    6c8a:	88 35       	cpi	r24, 0x58	; 88
    6c8c:	59 f0       	breq	.+22     	; 0x6ca4 <vfprintf+0x526>
    6c8e:	c5 c0       	rjmp	.+394    	; 0x6e1a <vfprintf+0x69c>
    6c90:	80 37       	cpi	r24, 0x70	; 112
    6c92:	19 f0       	breq	.+6      	; 0x6c9a <vfprintf+0x51c>
    6c94:	88 37       	cpi	r24, 0x78	; 120
    6c96:	11 f0       	breq	.+4      	; 0x6c9c <vfprintf+0x51e>
    6c98:	c0 c0       	rjmp	.+384    	; 0x6e1a <vfprintf+0x69c>
    6c9a:	00 61       	ori	r16, 0x10	; 16
    6c9c:	04 ff       	sbrs	r16, 4
    6c9e:	09 c0       	rjmp	.+18     	; 0x6cb2 <vfprintf+0x534>
    6ca0:	04 60       	ori	r16, 0x04	; 4
    6ca2:	07 c0       	rjmp	.+14     	; 0x6cb2 <vfprintf+0x534>
    6ca4:	24 ff       	sbrs	r18, 4
    6ca6:	08 c0       	rjmp	.+16     	; 0x6cb8 <vfprintf+0x53a>
    6ca8:	06 60       	ori	r16, 0x06	; 6
    6caa:	06 c0       	rjmp	.+12     	; 0x6cb8 <vfprintf+0x53a>
    6cac:	28 e0       	ldi	r18, 0x08	; 8
    6cae:	30 e0       	ldi	r19, 0x00	; 0
    6cb0:	05 c0       	rjmp	.+10     	; 0x6cbc <vfprintf+0x53e>
    6cb2:	20 e1       	ldi	r18, 0x10	; 16
    6cb4:	30 e0       	ldi	r19, 0x00	; 0
    6cb6:	02 c0       	rjmp	.+4      	; 0x6cbc <vfprintf+0x53e>
    6cb8:	20 e1       	ldi	r18, 0x10	; 16
    6cba:	32 e0       	ldi	r19, 0x02	; 2
    6cbc:	52 01       	movw	r10, r4
    6cbe:	07 ff       	sbrs	r16, 7
    6cc0:	09 c0       	rjmp	.+18     	; 0x6cd4 <vfprintf+0x556>
    6cc2:	f4 e0       	ldi	r31, 0x04	; 4
    6cc4:	af 0e       	add	r10, r31
    6cc6:	b1 1c       	adc	r11, r1
    6cc8:	f2 01       	movw	r30, r4
    6cca:	60 81       	ld	r22, Z
    6ccc:	71 81       	ldd	r23, Z+1	; 0x01
    6cce:	82 81       	ldd	r24, Z+2	; 0x02
    6cd0:	93 81       	ldd	r25, Z+3	; 0x03
    6cd2:	08 c0       	rjmp	.+16     	; 0x6ce4 <vfprintf+0x566>
    6cd4:	f2 e0       	ldi	r31, 0x02	; 2
    6cd6:	af 0e       	add	r10, r31
    6cd8:	b1 1c       	adc	r11, r1
    6cda:	f2 01       	movw	r30, r4
    6cdc:	60 81       	ld	r22, Z
    6cde:	71 81       	ldd	r23, Z+1	; 0x01
    6ce0:	80 e0       	ldi	r24, 0x00	; 0
    6ce2:	90 e0       	ldi	r25, 0x00	; 0
    6ce4:	a3 01       	movw	r20, r6
    6ce6:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <__ultoa_invert>
    6cea:	e8 2e       	mov	r14, r24
    6cec:	e6 18       	sub	r14, r6
    6cee:	0f 77       	andi	r16, 0x7F	; 127
    6cf0:	30 2e       	mov	r3, r16
    6cf2:	36 fe       	sbrs	r3, 6
    6cf4:	0b c0       	rjmp	.+22     	; 0x6d0c <vfprintf+0x58e>
    6cf6:	33 2d       	mov	r19, r3
    6cf8:	3e 7f       	andi	r19, 0xFE	; 254
    6cfa:	e1 16       	cp	r14, r17
    6cfc:	50 f4       	brcc	.+20     	; 0x6d12 <vfprintf+0x594>
    6cfe:	34 fe       	sbrs	r3, 4
    6d00:	0a c0       	rjmp	.+20     	; 0x6d16 <vfprintf+0x598>
    6d02:	32 fc       	sbrc	r3, 2
    6d04:	08 c0       	rjmp	.+16     	; 0x6d16 <vfprintf+0x598>
    6d06:	33 2d       	mov	r19, r3
    6d08:	3e 7e       	andi	r19, 0xEE	; 238
    6d0a:	05 c0       	rjmp	.+10     	; 0x6d16 <vfprintf+0x598>
    6d0c:	0e 2d       	mov	r16, r14
    6d0e:	33 2d       	mov	r19, r3
    6d10:	03 c0       	rjmp	.+6      	; 0x6d18 <vfprintf+0x59a>
    6d12:	0e 2d       	mov	r16, r14
    6d14:	01 c0       	rjmp	.+2      	; 0x6d18 <vfprintf+0x59a>
    6d16:	01 2f       	mov	r16, r17
    6d18:	34 ff       	sbrs	r19, 4
    6d1a:	0c c0       	rjmp	.+24     	; 0x6d34 <vfprintf+0x5b6>
    6d1c:	fe 01       	movw	r30, r28
    6d1e:	ee 0d       	add	r30, r14
    6d20:	f1 1d       	adc	r31, r1
    6d22:	80 81       	ld	r24, Z
    6d24:	80 33       	cpi	r24, 0x30	; 48
    6d26:	11 f4       	brne	.+4      	; 0x6d2c <vfprintf+0x5ae>
    6d28:	39 7e       	andi	r19, 0xE9	; 233
    6d2a:	08 c0       	rjmp	.+16     	; 0x6d3c <vfprintf+0x5be>
    6d2c:	32 ff       	sbrs	r19, 2
    6d2e:	05 c0       	rjmp	.+10     	; 0x6d3a <vfprintf+0x5bc>
    6d30:	0e 5f       	subi	r16, 0xFE	; 254
    6d32:	04 c0       	rjmp	.+8      	; 0x6d3c <vfprintf+0x5be>
    6d34:	83 2f       	mov	r24, r19
    6d36:	86 78       	andi	r24, 0x86	; 134
    6d38:	09 f0       	breq	.+2      	; 0x6d3c <vfprintf+0x5be>
    6d3a:	0f 5f       	subi	r16, 0xFF	; 255
    6d3c:	33 fd       	sbrc	r19, 3
    6d3e:	13 c0       	rjmp	.+38     	; 0x6d66 <vfprintf+0x5e8>
    6d40:	30 ff       	sbrs	r19, 0
    6d42:	06 c0       	rjmp	.+12     	; 0x6d50 <vfprintf+0x5d2>
    6d44:	1e 2d       	mov	r17, r14
    6d46:	0f 15       	cp	r16, r15
    6d48:	18 f4       	brcc	.+6      	; 0x6d50 <vfprintf+0x5d2>
    6d4a:	1f 0d       	add	r17, r15
    6d4c:	10 1b       	sub	r17, r16
    6d4e:	0f 2d       	mov	r16, r15
    6d50:	0f 15       	cp	r16, r15
    6d52:	68 f4       	brcc	.+26     	; 0x6d6e <vfprintf+0x5f0>
    6d54:	b6 01       	movw	r22, r12
    6d56:	80 e2       	ldi	r24, 0x20	; 32
    6d58:	90 e0       	ldi	r25, 0x00	; 0
    6d5a:	3b 8b       	std	Y+19, r19	; 0x13
    6d5c:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6d60:	0f 5f       	subi	r16, 0xFF	; 255
    6d62:	3b 89       	ldd	r19, Y+19	; 0x13
    6d64:	f5 cf       	rjmp	.-22     	; 0x6d50 <vfprintf+0x5d2>
    6d66:	0f 15       	cp	r16, r15
    6d68:	10 f4       	brcc	.+4      	; 0x6d6e <vfprintf+0x5f0>
    6d6a:	f0 1a       	sub	r15, r16
    6d6c:	01 c0       	rjmp	.+2      	; 0x6d70 <vfprintf+0x5f2>
    6d6e:	f1 2c       	mov	r15, r1
    6d70:	34 ff       	sbrs	r19, 4
    6d72:	12 c0       	rjmp	.+36     	; 0x6d98 <vfprintf+0x61a>
    6d74:	b6 01       	movw	r22, r12
    6d76:	80 e3       	ldi	r24, 0x30	; 48
    6d78:	90 e0       	ldi	r25, 0x00	; 0
    6d7a:	3b 8b       	std	Y+19, r19	; 0x13
    6d7c:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6d80:	3b 89       	ldd	r19, Y+19	; 0x13
    6d82:	32 ff       	sbrs	r19, 2
    6d84:	17 c0       	rjmp	.+46     	; 0x6db4 <vfprintf+0x636>
    6d86:	31 fd       	sbrc	r19, 1
    6d88:	03 c0       	rjmp	.+6      	; 0x6d90 <vfprintf+0x612>
    6d8a:	88 e7       	ldi	r24, 0x78	; 120
    6d8c:	90 e0       	ldi	r25, 0x00	; 0
    6d8e:	02 c0       	rjmp	.+4      	; 0x6d94 <vfprintf+0x616>
    6d90:	88 e5       	ldi	r24, 0x58	; 88
    6d92:	90 e0       	ldi	r25, 0x00	; 0
    6d94:	b6 01       	movw	r22, r12
    6d96:	0c c0       	rjmp	.+24     	; 0x6db0 <vfprintf+0x632>
    6d98:	83 2f       	mov	r24, r19
    6d9a:	86 78       	andi	r24, 0x86	; 134
    6d9c:	59 f0       	breq	.+22     	; 0x6db4 <vfprintf+0x636>
    6d9e:	31 ff       	sbrs	r19, 1
    6da0:	02 c0       	rjmp	.+4      	; 0x6da6 <vfprintf+0x628>
    6da2:	8b e2       	ldi	r24, 0x2B	; 43
    6da4:	01 c0       	rjmp	.+2      	; 0x6da8 <vfprintf+0x62a>
    6da6:	80 e2       	ldi	r24, 0x20	; 32
    6da8:	37 fd       	sbrc	r19, 7
    6daa:	8d e2       	ldi	r24, 0x2D	; 45
    6dac:	b6 01       	movw	r22, r12
    6dae:	90 e0       	ldi	r25, 0x00	; 0
    6db0:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6db4:	e1 16       	cp	r14, r17
    6db6:	38 f4       	brcc	.+14     	; 0x6dc6 <vfprintf+0x648>
    6db8:	b6 01       	movw	r22, r12
    6dba:	80 e3       	ldi	r24, 0x30	; 48
    6dbc:	90 e0       	ldi	r25, 0x00	; 0
    6dbe:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6dc2:	11 50       	subi	r17, 0x01	; 1
    6dc4:	f7 cf       	rjmp	.-18     	; 0x6db4 <vfprintf+0x636>
    6dc6:	ea 94       	dec	r14
    6dc8:	f3 01       	movw	r30, r6
    6dca:	ee 0d       	add	r30, r14
    6dcc:	f1 1d       	adc	r31, r1
    6dce:	80 81       	ld	r24, Z
    6dd0:	b6 01       	movw	r22, r12
    6dd2:	90 e0       	ldi	r25, 0x00	; 0
    6dd4:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6dd8:	e1 10       	cpse	r14, r1
    6dda:	f5 cf       	rjmp	.-22     	; 0x6dc6 <vfprintf+0x648>
    6ddc:	14 c0       	rjmp	.+40     	; 0x6e06 <vfprintf+0x688>
    6dde:	f4 e0       	ldi	r31, 0x04	; 4
    6de0:	ff 15       	cp	r31, r15
    6de2:	58 f5       	brcc	.+86     	; 0x6e3a <vfprintf+0x6bc>
    6de4:	84 e0       	ldi	r24, 0x04	; 4
    6de6:	f8 1a       	sub	r15, r24
    6de8:	33 fe       	sbrs	r3, 3
    6dea:	1e c0       	rjmp	.+60     	; 0x6e28 <vfprintf+0x6aa>
    6dec:	21 10       	cpse	r2, r1
    6dee:	26 c0       	rjmp	.+76     	; 0x6e3c <vfprintf+0x6be>
    6df0:	03 ff       	sbrs	r16, 3
    6df2:	2a c0       	rjmp	.+84     	; 0x6e48 <vfprintf+0x6ca>
    6df4:	06 ea       	ldi	r16, 0xA6	; 166
    6df6:	11 e0       	ldi	r17, 0x01	; 1
    6df8:	f3 2d       	mov	r31, r3
    6dfa:	f0 71       	andi	r31, 0x10	; 16
    6dfc:	3f 2e       	mov	r3, r31
    6dfe:	f8 01       	movw	r30, r16
    6e00:	84 91       	lpm	r24, Z
    6e02:	81 11       	cpse	r24, r1
    6e04:	24 c0       	rjmp	.+72     	; 0x6e4e <vfprintf+0x6d0>
    6e06:	ff 20       	and	r15, r15
    6e08:	09 f4       	brne	.+2      	; 0x6e0c <vfprintf+0x68e>
    6e0a:	e5 cc       	rjmp	.-1590   	; 0x67d6 <vfprintf+0x58>
    6e0c:	b6 01       	movw	r22, r12
    6e0e:	80 e2       	ldi	r24, 0x20	; 32
    6e10:	90 e0       	ldi	r25, 0x00	; 0
    6e12:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6e16:	fa 94       	dec	r15
    6e18:	f6 cf       	rjmp	.-20     	; 0x6e06 <vfprintf+0x688>
    6e1a:	f6 01       	movw	r30, r12
    6e1c:	86 81       	ldd	r24, Z+6	; 0x06
    6e1e:	97 81       	ldd	r25, Z+7	; 0x07
    6e20:	26 c0       	rjmp	.+76     	; 0x6e6e <vfprintf+0x6f0>
    6e22:	8f ef       	ldi	r24, 0xFF	; 255
    6e24:	9f ef       	ldi	r25, 0xFF	; 255
    6e26:	23 c0       	rjmp	.+70     	; 0x6e6e <vfprintf+0x6f0>
    6e28:	b6 01       	movw	r22, r12
    6e2a:	80 e2       	ldi	r24, 0x20	; 32
    6e2c:	90 e0       	ldi	r25, 0x00	; 0
    6e2e:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6e32:	fa 94       	dec	r15
    6e34:	f1 10       	cpse	r15, r1
    6e36:	f8 cf       	rjmp	.-16     	; 0x6e28 <vfprintf+0x6aa>
    6e38:	d9 cf       	rjmp	.-78     	; 0x6dec <vfprintf+0x66e>
    6e3a:	f1 2c       	mov	r15, r1
    6e3c:	b6 01       	movw	r22, r12
    6e3e:	82 2d       	mov	r24, r2
    6e40:	90 e0       	ldi	r25, 0x00	; 0
    6e42:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6e46:	d4 cf       	rjmp	.-88     	; 0x6df0 <vfprintf+0x672>
    6e48:	0a ea       	ldi	r16, 0xAA	; 170
    6e4a:	11 e0       	ldi	r17, 0x01	; 1
    6e4c:	d5 cf       	rjmp	.-86     	; 0x6df8 <vfprintf+0x67a>
    6e4e:	31 10       	cpse	r3, r1
    6e50:	80 52       	subi	r24, 0x20	; 32
    6e52:	b6 01       	movw	r22, r12
    6e54:	90 e0       	ldi	r25, 0x00	; 0
    6e56:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <fputc>
    6e5a:	0f 5f       	subi	r16, 0xFF	; 255
    6e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    6e5e:	cf cf       	rjmp	.-98     	; 0x6dfe <vfprintf+0x680>
    6e60:	23 e0       	ldi	r18, 0x03	; 3
    6e62:	2f 15       	cp	r18, r15
    6e64:	10 f4       	brcc	.+4      	; 0x6e6a <vfprintf+0x6ec>
    6e66:	83 e0       	ldi	r24, 0x03	; 3
    6e68:	be cf       	rjmp	.-132    	; 0x6de6 <vfprintf+0x668>
    6e6a:	f1 2c       	mov	r15, r1
    6e6c:	c1 cf       	rjmp	.-126    	; 0x6df0 <vfprintf+0x672>
    6e6e:	63 96       	adiw	r28, 0x13	; 19
    6e70:	e2 e1       	ldi	r30, 0x12	; 18
    6e72:	0c 94 c3 3b 	jmp	0x7786	; 0x7786 <__epilogue_restores__>

00006e76 <putval>:
    6e76:	20 fd       	sbrc	r18, 0
    6e78:	09 c0       	rjmp	.+18     	; 0x6e8c <putval+0x16>
    6e7a:	fc 01       	movw	r30, r24
    6e7c:	23 fd       	sbrc	r18, 3
    6e7e:	05 c0       	rjmp	.+10     	; 0x6e8a <putval+0x14>
    6e80:	22 ff       	sbrs	r18, 2
    6e82:	02 c0       	rjmp	.+4      	; 0x6e88 <putval+0x12>
    6e84:	73 83       	std	Z+3, r23	; 0x03
    6e86:	62 83       	std	Z+2, r22	; 0x02
    6e88:	51 83       	std	Z+1, r21	; 0x01
    6e8a:	40 83       	st	Z, r20
    6e8c:	08 95       	ret

00006e8e <mulacc>:
    6e8e:	44 fd       	sbrc	r20, 4
    6e90:	10 c0       	rjmp	.+32     	; 0x6eb2 <mulacc+0x24>
    6e92:	46 fd       	sbrc	r20, 6
    6e94:	10 c0       	rjmp	.+32     	; 0x6eb6 <mulacc+0x28>
    6e96:	db 01       	movw	r26, r22
    6e98:	fc 01       	movw	r30, r24
    6e9a:	aa 0f       	add	r26, r26
    6e9c:	bb 1f       	adc	r27, r27
    6e9e:	ee 1f       	adc	r30, r30
    6ea0:	ff 1f       	adc	r31, r31
    6ea2:	10 94       	com	r1
    6ea4:	d1 f7       	brne	.-12     	; 0x6e9a <mulacc+0xc>
    6ea6:	6a 0f       	add	r22, r26
    6ea8:	7b 1f       	adc	r23, r27
    6eaa:	8e 1f       	adc	r24, r30
    6eac:	9f 1f       	adc	r25, r31
    6eae:	31 e0       	ldi	r19, 0x01	; 1
    6eb0:	03 c0       	rjmp	.+6      	; 0x6eb8 <mulacc+0x2a>
    6eb2:	33 e0       	ldi	r19, 0x03	; 3
    6eb4:	01 c0       	rjmp	.+2      	; 0x6eb8 <mulacc+0x2a>
    6eb6:	34 e0       	ldi	r19, 0x04	; 4
    6eb8:	66 0f       	add	r22, r22
    6eba:	77 1f       	adc	r23, r23
    6ebc:	88 1f       	adc	r24, r24
    6ebe:	99 1f       	adc	r25, r25
    6ec0:	31 50       	subi	r19, 0x01	; 1
    6ec2:	d1 f7       	brne	.-12     	; 0x6eb8 <mulacc+0x2a>
    6ec4:	62 0f       	add	r22, r18
    6ec6:	71 1d       	adc	r23, r1
    6ec8:	81 1d       	adc	r24, r1
    6eca:	91 1d       	adc	r25, r1
    6ecc:	08 95       	ret

00006ece <skip_spaces>:
    6ece:	0f 93       	push	r16
    6ed0:	1f 93       	push	r17
    6ed2:	cf 93       	push	r28
    6ed4:	df 93       	push	r29
    6ed6:	8c 01       	movw	r16, r24
    6ed8:	c8 01       	movw	r24, r16
    6eda:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    6ede:	ec 01       	movw	r28, r24
    6ee0:	97 fd       	sbrc	r25, 7
    6ee2:	08 c0       	rjmp	.+16     	; 0x6ef4 <skip_spaces+0x26>
    6ee4:	0e 94 ca 3c 	call	0x7994	; 0x7994 <isspace>
    6ee8:	89 2b       	or	r24, r25
    6eea:	b1 f7       	brne	.-20     	; 0x6ed8 <skip_spaces+0xa>
    6eec:	b8 01       	movw	r22, r16
    6eee:	ce 01       	movw	r24, r28
    6ef0:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <ungetc>
    6ef4:	ce 01       	movw	r24, r28
    6ef6:	df 91       	pop	r29
    6ef8:	cf 91       	pop	r28
    6efa:	1f 91       	pop	r17
    6efc:	0f 91       	pop	r16
    6efe:	08 95       	ret

00006f00 <conv_int>:
    6f00:	a0 e0       	ldi	r26, 0x00	; 0
    6f02:	b0 e0       	ldi	r27, 0x00	; 0
    6f04:	e6 e8       	ldi	r30, 0x86	; 134
    6f06:	f7 e3       	ldi	r31, 0x37	; 55
    6f08:	0c 94 ad 3b 	jmp	0x775a	; 0x775a <__prologue_saves__+0xc>
    6f0c:	7c 01       	movw	r14, r24
    6f0e:	8b 01       	movw	r16, r22
    6f10:	6a 01       	movw	r12, r20
    6f12:	d2 2f       	mov	r29, r18
    6f14:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    6f18:	9c 01       	movw	r18, r24
    6f1a:	33 27       	eor	r19, r19
    6f1c:	2b 32       	cpi	r18, 0x2B	; 43
    6f1e:	31 05       	cpc	r19, r1
    6f20:	21 f0       	breq	.+8      	; 0x6f2a <conv_int+0x2a>
    6f22:	2d 32       	cpi	r18, 0x2D	; 45
    6f24:	31 05       	cpc	r19, r1
    6f26:	59 f4       	brne	.+22     	; 0x6f3e <conv_int+0x3e>
    6f28:	d0 68       	ori	r29, 0x80	; 128
    6f2a:	01 50       	subi	r16, 0x01	; 1
    6f2c:	11 09       	sbc	r17, r1
    6f2e:	11 f4       	brne	.+4      	; 0x6f34 <conv_int+0x34>
    6f30:	80 e0       	ldi	r24, 0x00	; 0
    6f32:	69 c0       	rjmp	.+210    	; 0x7006 <conv_int+0x106>
    6f34:	c7 01       	movw	r24, r14
    6f36:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    6f3a:	97 fd       	sbrc	r25, 7
    6f3c:	f9 cf       	rjmp	.-14     	; 0x6f30 <conv_int+0x30>
    6f3e:	cd 2f       	mov	r28, r29
    6f40:	cd 7f       	andi	r28, 0xFD	; 253
    6f42:	2d 2f       	mov	r18, r29
    6f44:	20 73       	andi	r18, 0x30	; 48
    6f46:	09 f5       	brne	.+66     	; 0x6f8a <conv_int+0x8a>
    6f48:	80 33       	cpi	r24, 0x30	; 48
    6f4a:	f9 f4       	brne	.+62     	; 0x6f8a <conv_int+0x8a>
    6f4c:	58 01       	movw	r10, r16
    6f4e:	81 e0       	ldi	r24, 0x01	; 1
    6f50:	a8 1a       	sub	r10, r24
    6f52:	b1 08       	sbc	r11, r1
    6f54:	09 f4       	brne	.+2      	; 0x6f58 <conv_int+0x58>
    6f56:	43 c0       	rjmp	.+134    	; 0x6fde <conv_int+0xde>
    6f58:	c7 01       	movw	r24, r14
    6f5a:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    6f5e:	97 fd       	sbrc	r25, 7
    6f60:	3e c0       	rjmp	.+124    	; 0x6fde <conv_int+0xde>
    6f62:	28 2f       	mov	r18, r24
    6f64:	2f 7d       	andi	r18, 0xDF	; 223
    6f66:	28 35       	cpi	r18, 0x58	; 88
    6f68:	51 f4       	brne	.+20     	; 0x6f7e <conv_int+0x7e>
    6f6a:	c2 64       	ori	r28, 0x42	; 66
    6f6c:	02 50       	subi	r16, 0x02	; 2
    6f6e:	11 09       	sbc	r17, r1
    6f70:	b1 f1       	breq	.+108    	; 0x6fde <conv_int+0xde>
    6f72:	c7 01       	movw	r24, r14
    6f74:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    6f78:	97 ff       	sbrs	r25, 7
    6f7a:	07 c0       	rjmp	.+14     	; 0x6f8a <conv_int+0x8a>
    6f7c:	30 c0       	rjmp	.+96     	; 0x6fde <conv_int+0xde>
    6f7e:	d6 ff       	sbrs	r29, 6
    6f80:	02 c0       	rjmp	.+4      	; 0x6f86 <conv_int+0x86>
    6f82:	c2 60       	ori	r28, 0x02	; 2
    6f84:	01 c0       	rjmp	.+2      	; 0x6f88 <conv_int+0x88>
    6f86:	c2 61       	ori	r28, 0x12	; 18
    6f88:	85 01       	movw	r16, r10
    6f8a:	81 2c       	mov	r8, r1
    6f8c:	91 2c       	mov	r9, r1
    6f8e:	54 01       	movw	r10, r8
    6f90:	20 ed       	ldi	r18, 0xD0	; 208
    6f92:	28 0f       	add	r18, r24
    6f94:	28 30       	cpi	r18, 0x08	; 8
    6f96:	80 f0       	brcs	.+32     	; 0x6fb8 <conv_int+0xb8>
    6f98:	c4 ff       	sbrs	r28, 4
    6f9a:	04 c0       	rjmp	.+8      	; 0x6fa4 <conv_int+0xa4>
    6f9c:	b7 01       	movw	r22, r14
    6f9e:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <ungetc>
    6fa2:	1a c0       	rjmp	.+52     	; 0x6fd8 <conv_int+0xd8>
    6fa4:	2a 30       	cpi	r18, 0x0A	; 10
    6fa6:	40 f0       	brcs	.+16     	; 0x6fb8 <conv_int+0xb8>
    6fa8:	c6 ff       	sbrs	r28, 6
    6faa:	f8 cf       	rjmp	.-16     	; 0x6f9c <conv_int+0x9c>
    6fac:	2f 7d       	andi	r18, 0xDF	; 223
    6fae:	3f ee       	ldi	r19, 0xEF	; 239
    6fb0:	32 0f       	add	r19, r18
    6fb2:	36 30       	cpi	r19, 0x06	; 6
    6fb4:	98 f7       	brcc	.-26     	; 0x6f9c <conv_int+0x9c>
    6fb6:	27 50       	subi	r18, 0x07	; 7
    6fb8:	4c 2f       	mov	r20, r28
    6fba:	c5 01       	movw	r24, r10
    6fbc:	b4 01       	movw	r22, r8
    6fbe:	0e 94 47 37 	call	0x6e8e	; 0x6e8e <mulacc>
    6fc2:	4b 01       	movw	r8, r22
    6fc4:	5c 01       	movw	r10, r24
    6fc6:	c2 60       	ori	r28, 0x02	; 2
    6fc8:	01 50       	subi	r16, 0x01	; 1
    6fca:	11 09       	sbc	r17, r1
    6fcc:	59 f0       	breq	.+22     	; 0x6fe4 <conv_int+0xe4>
    6fce:	c7 01       	movw	r24, r14
    6fd0:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    6fd4:	97 ff       	sbrs	r25, 7
    6fd6:	dc cf       	rjmp	.-72     	; 0x6f90 <conv_int+0x90>
    6fd8:	c1 fd       	sbrc	r28, 1
    6fda:	04 c0       	rjmp	.+8      	; 0x6fe4 <conv_int+0xe4>
    6fdc:	a9 cf       	rjmp	.-174    	; 0x6f30 <conv_int+0x30>
    6fde:	81 2c       	mov	r8, r1
    6fe0:	91 2c       	mov	r9, r1
    6fe2:	54 01       	movw	r10, r8
    6fe4:	c7 ff       	sbrs	r28, 7
    6fe6:	08 c0       	rjmp	.+16     	; 0x6ff8 <conv_int+0xf8>
    6fe8:	b0 94       	com	r11
    6fea:	a0 94       	com	r10
    6fec:	90 94       	com	r9
    6fee:	80 94       	com	r8
    6ff0:	81 1c       	adc	r8, r1
    6ff2:	91 1c       	adc	r9, r1
    6ff4:	a1 1c       	adc	r10, r1
    6ff6:	b1 1c       	adc	r11, r1
    6ff8:	2c 2f       	mov	r18, r28
    6ffa:	b5 01       	movw	r22, r10
    6ffc:	a4 01       	movw	r20, r8
    6ffe:	c6 01       	movw	r24, r12
    7000:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <putval>
    7004:	81 e0       	ldi	r24, 0x01	; 1
    7006:	cd b7       	in	r28, 0x3d	; 61
    7008:	de b7       	in	r29, 0x3e	; 62
    700a:	ec e0       	ldi	r30, 0x0C	; 12
    700c:	0c 94 c9 3b 	jmp	0x7792	; 0x7792 <__epilogue_restores__+0xc>

00007010 <conv_brk>:
    7010:	a0 e2       	ldi	r26, 0x20	; 32
    7012:	b0 e0       	ldi	r27, 0x00	; 0
    7014:	ee e0       	ldi	r30, 0x0E	; 14
    7016:	f8 e3       	ldi	r31, 0x38	; 56
    7018:	0c 94 a9 3b 	jmp	0x7752	; 0x7752 <__prologue_saves__+0x4>
    701c:	4c 01       	movw	r8, r24
    701e:	5b 01       	movw	r10, r22
    7020:	7a 01       	movw	r14, r20
    7022:	8e 01       	movw	r16, r28
    7024:	0f 5f       	subi	r16, 0xFF	; 255
    7026:	1f 4f       	sbci	r17, 0xFF	; 255
    7028:	68 01       	movw	r12, r16
    702a:	80 e2       	ldi	r24, 0x20	; 32
    702c:	f8 01       	movw	r30, r16
    702e:	11 92       	st	Z+, r1
    7030:	8a 95       	dec	r24
    7032:	e9 f7       	brne	.-6      	; 0x702e <conv_brk+0x1e>
    7034:	f4 01       	movw	r30, r8
    7036:	63 80       	ldd	r6, Z+3	; 0x03
    7038:	40 e0       	ldi	r20, 0x00	; 0
    703a:	50 e0       	ldi	r21, 0x00	; 0
    703c:	71 2c       	mov	r7, r1
    703e:	41 2c       	mov	r4, r1
    7040:	80 e0       	ldi	r24, 0x00	; 0
    7042:	a1 e0       	ldi	r26, 0x01	; 1
    7044:	b0 e0       	ldi	r27, 0x00	; 0
    7046:	f9 01       	movw	r30, r18
    7048:	63 fc       	sbrc	r6, 3
    704a:	55 90       	lpm	r5, Z+
    704c:	63 fe       	sbrs	r6, 3
    704e:	51 90       	ld	r5, Z+
    7050:	8f 01       	movw	r16, r30
    7052:	95 2d       	mov	r25, r5
    7054:	9f 01       	movw	r18, r30
    7056:	51 10       	cpse	r5, r1
    7058:	03 c0       	rjmp	.+6      	; 0x7060 <conv_brk+0x50>
    705a:	80 e0       	ldi	r24, 0x00	; 0
    705c:	90 e0       	ldi	r25, 0x00	; 0
    705e:	80 c0       	rjmp	.+256    	; 0x7160 <conv_brk+0x150>
    7060:	fe e5       	ldi	r31, 0x5E	; 94
    7062:	5f 12       	cpse	r5, r31
    7064:	03 c0       	rjmp	.+6      	; 0x706c <conv_brk+0x5c>
    7066:	41 15       	cp	r20, r1
    7068:	51 05       	cpc	r21, r1
    706a:	61 f1       	breq	.+88     	; 0x70c4 <conv_brk+0xb4>
    706c:	68 2f       	mov	r22, r24
    706e:	70 e0       	ldi	r23, 0x00	; 0
    7070:	64 17       	cp	r22, r20
    7072:	75 07       	cpc	r23, r21
    7074:	4c f4       	brge	.+18     	; 0x7088 <conv_brk+0x78>
    7076:	6d e5       	ldi	r22, 0x5D	; 93
    7078:	56 16       	cp	r5, r22
    707a:	69 f1       	breq	.+90     	; 0x70d6 <conv_brk+0xc6>
    707c:	ed e2       	ldi	r30, 0x2D	; 45
    707e:	5e 12       	cpse	r5, r30
    7080:	03 c0       	rjmp	.+6      	; 0x7088 <conv_brk+0x78>
    7082:	44 20       	and	r4, r4
    7084:	09 f1       	breq	.+66     	; 0x70c8 <conv_brk+0xb8>
    7086:	03 c0       	rjmp	.+6      	; 0x708e <conv_brk+0x7e>
    7088:	41 10       	cpse	r4, r1
    708a:	01 c0       	rjmp	.+2      	; 0x708e <conv_brk+0x7e>
    708c:	75 2c       	mov	r7, r5
    708e:	69 2f       	mov	r22, r25
    7090:	66 95       	lsr	r22
    7092:	66 95       	lsr	r22
    7094:	66 95       	lsr	r22
    7096:	f6 01       	movw	r30, r12
    7098:	e6 0f       	add	r30, r22
    709a:	f1 1d       	adc	r31, r1
    709c:	69 2f       	mov	r22, r25
    709e:	67 70       	andi	r22, 0x07	; 7
    70a0:	8d 01       	movw	r16, r26
    70a2:	02 c0       	rjmp	.+4      	; 0x70a8 <conv_brk+0x98>
    70a4:	00 0f       	add	r16, r16
    70a6:	11 1f       	adc	r17, r17
    70a8:	6a 95       	dec	r22
    70aa:	e2 f7       	brpl	.-8      	; 0x70a4 <conv_brk+0x94>
    70ac:	b8 01       	movw	r22, r16
    70ae:	70 81       	ld	r23, Z
    70b0:	67 2b       	or	r22, r23
    70b2:	60 83       	st	Z, r22
    70b4:	97 15       	cp	r25, r7
    70b6:	59 f0       	breq	.+22     	; 0x70ce <conv_brk+0xbe>
    70b8:	97 15       	cp	r25, r7
    70ba:	10 f4       	brcc	.+4      	; 0x70c0 <conv_brk+0xb0>
    70bc:	9f 5f       	subi	r25, 0xFF	; 255
    70be:	e7 cf       	rjmp	.-50     	; 0x708e <conv_brk+0x7e>
    70c0:	91 50       	subi	r25, 0x01	; 1
    70c2:	e5 cf       	rjmp	.-54     	; 0x708e <conv_brk+0x7e>
    70c4:	81 e0       	ldi	r24, 0x01	; 1
    70c6:	04 c0       	rjmp	.+8      	; 0x70d0 <conv_brk+0xc0>
    70c8:	44 24       	eor	r4, r4
    70ca:	43 94       	inc	r4
    70cc:	01 c0       	rjmp	.+2      	; 0x70d0 <conv_brk+0xc0>
    70ce:	41 2c       	mov	r4, r1
    70d0:	4f 5f       	subi	r20, 0xFF	; 255
    70d2:	5f 4f       	sbci	r21, 0xFF	; 255
    70d4:	b8 cf       	rjmp	.-144    	; 0x7046 <conv_brk+0x36>
    70d6:	44 20       	and	r4, r4
    70d8:	19 f0       	breq	.+6      	; 0x70e0 <conv_brk+0xd0>
    70da:	9e 81       	ldd	r25, Y+6	; 0x06
    70dc:	90 62       	ori	r25, 0x20	; 32
    70de:	9e 83       	std	Y+6, r25	; 0x06
    70e0:	81 11       	cpse	r24, r1
    70e2:	03 c0       	rjmp	.+6      	; 0x70ea <conv_brk+0xda>
    70e4:	77 24       	eor	r7, r7
    70e6:	73 94       	inc	r7
    70e8:	18 c0       	rjmp	.+48     	; 0x711a <conv_brk+0x10a>
    70ea:	f6 01       	movw	r30, r12
    70ec:	9e 01       	movw	r18, r28
    70ee:	2f 5d       	subi	r18, 0xDF	; 223
    70f0:	3f 4f       	sbci	r19, 0xFF	; 255
    70f2:	80 81       	ld	r24, Z
    70f4:	80 95       	com	r24
    70f6:	81 93       	st	Z+, r24
    70f8:	e2 17       	cp	r30, r18
    70fa:	f3 07       	cpc	r31, r19
    70fc:	d1 f7       	brne	.-12     	; 0x70f2 <conv_brk+0xe2>
    70fe:	f2 cf       	rjmp	.-28     	; 0x70e4 <conv_brk+0xd4>
    7100:	e1 14       	cp	r14, r1
    7102:	f1 04       	cpc	r15, r1
    7104:	29 f0       	breq	.+10     	; 0x7110 <conv_brk+0x100>
    7106:	f7 01       	movw	r30, r14
    7108:	80 83       	st	Z, r24
    710a:	c7 01       	movw	r24, r14
    710c:	01 96       	adiw	r24, 0x01	; 1
    710e:	7c 01       	movw	r14, r24
    7110:	91 e0       	ldi	r25, 0x01	; 1
    7112:	a9 1a       	sub	r10, r25
    7114:	b1 08       	sbc	r11, r1
    7116:	71 2c       	mov	r7, r1
    7118:	e9 f0       	breq	.+58     	; 0x7154 <conv_brk+0x144>
    711a:	c4 01       	movw	r24, r8
    711c:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    7120:	97 fd       	sbrc	r25, 7
    7122:	16 c0       	rjmp	.+44     	; 0x7150 <conv_brk+0x140>
    7124:	28 2f       	mov	r18, r24
    7126:	26 95       	lsr	r18
    7128:	26 95       	lsr	r18
    712a:	26 95       	lsr	r18
    712c:	f6 01       	movw	r30, r12
    712e:	e2 0f       	add	r30, r18
    7130:	f1 1d       	adc	r31, r1
    7132:	20 81       	ld	r18, Z
    7134:	30 e0       	ldi	r19, 0x00	; 0
    7136:	ac 01       	movw	r20, r24
    7138:	47 70       	andi	r20, 0x07	; 7
    713a:	55 27       	eor	r21, r21
    713c:	02 c0       	rjmp	.+4      	; 0x7142 <conv_brk+0x132>
    713e:	35 95       	asr	r19
    7140:	27 95       	ror	r18
    7142:	4a 95       	dec	r20
    7144:	e2 f7       	brpl	.-8      	; 0x713e <conv_brk+0x12e>
    7146:	20 fd       	sbrc	r18, 0
    7148:	db cf       	rjmp	.-74     	; 0x7100 <conv_brk+0xf0>
    714a:	b4 01       	movw	r22, r8
    714c:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <ungetc>
    7150:	71 10       	cpse	r7, r1
    7152:	83 cf       	rjmp	.-250    	; 0x705a <conv_brk+0x4a>
    7154:	e1 14       	cp	r14, r1
    7156:	f1 04       	cpc	r15, r1
    7158:	11 f0       	breq	.+4      	; 0x715e <conv_brk+0x14e>
    715a:	f7 01       	movw	r30, r14
    715c:	10 82       	st	Z, r1
    715e:	c8 01       	movw	r24, r16
    7160:	a0 96       	adiw	r28, 0x20	; 32
    7162:	e0 e1       	ldi	r30, 0x10	; 16
    7164:	0c 94 c5 3b 	jmp	0x778a	; 0x778a <__epilogue_restores__+0x4>

00007168 <conv_flt>:
    7168:	a6 e0       	ldi	r26, 0x06	; 6
    716a:	b0 e0       	ldi	r27, 0x00	; 0
    716c:	ea eb       	ldi	r30, 0xBA	; 186
    716e:	f8 e3       	ldi	r31, 0x38	; 56
    7170:	0c 94 a7 3b 	jmp	0x774e	; 0x774e <__prologue_saves__>
    7174:	5c 01       	movw	r10, r24
    7176:	7b 01       	movw	r14, r22
    7178:	1a 01       	movw	r2, r20
    717a:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    717e:	9e 83       	std	Y+6, r25	; 0x06
    7180:	8d 83       	std	Y+5, r24	; 0x05
    7182:	99 27       	eor	r25, r25
    7184:	8b 32       	cpi	r24, 0x2B	; 43
    7186:	91 05       	cpc	r25, r1
    7188:	21 f0       	breq	.+8      	; 0x7192 <conv_flt+0x2a>
    718a:	8d 97       	sbiw	r24, 0x2d	; 45
    718c:	89 f4       	brne	.+34     	; 0x71b0 <conv_flt+0x48>
    718e:	10 e8       	ldi	r17, 0x80	; 128
    7190:	01 c0       	rjmp	.+2      	; 0x7194 <conv_flt+0x2c>
    7192:	10 e0       	ldi	r17, 0x00	; 0
    7194:	21 e0       	ldi	r18, 0x01	; 1
    7196:	e2 1a       	sub	r14, r18
    7198:	f1 08       	sbc	r15, r1
    719a:	11 f4       	brne	.+4      	; 0x71a0 <conv_flt+0x38>
    719c:	80 e0       	ldi	r24, 0x00	; 0
    719e:	2c c1       	rjmp	.+600    	; 0x73f8 <conv_flt+0x290>
    71a0:	c5 01       	movw	r24, r10
    71a2:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    71a6:	9e 83       	std	Y+6, r25	; 0x06
    71a8:	8d 83       	std	Y+5, r24	; 0x05
    71aa:	97 ff       	sbrs	r25, 7
    71ac:	02 c0       	rjmp	.+4      	; 0x71b2 <conv_flt+0x4a>
    71ae:	f6 cf       	rjmp	.-20     	; 0x719c <conv_flt+0x34>
    71b0:	10 e0       	ldi	r17, 0x00	; 0
    71b2:	8d 81       	ldd	r24, Y+5	; 0x05
    71b4:	9e 81       	ldd	r25, Y+6	; 0x06
    71b6:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <tolower>
    71ba:	89 36       	cpi	r24, 0x69	; 105
    71bc:	91 05       	cpc	r25, r1
    71be:	49 f0       	breq	.+18     	; 0x71d2 <conv_flt+0x6a>
    71c0:	8e 36       	cpi	r24, 0x6E	; 110
    71c2:	91 05       	cpc	r25, r1
    71c4:	09 f0       	breq	.+2      	; 0x71c8 <conv_flt+0x60>
    71c6:	3b c0       	rjmp	.+118    	; 0x723e <conv_flt+0xd6>
    71c8:	6f ef       	ldi	r22, 0xFF	; 255
    71ca:	86 2e       	mov	r8, r22
    71cc:	6e e0       	ldi	r22, 0x0E	; 14
    71ce:	96 2e       	mov	r9, r22
    71d0:	04 c0       	rjmp	.+8      	; 0x71da <conv_flt+0x72>
    71d2:	72 e0       	ldi	r23, 0x02	; 2
    71d4:	87 2e       	mov	r8, r23
    71d6:	7f e0       	ldi	r23, 0x0F	; 15
    71d8:	97 2e       	mov	r9, r23
    71da:	ef ef       	ldi	r30, 0xFF	; 255
    71dc:	8e 1a       	sub	r8, r30
    71de:	9e 0a       	sbc	r9, r30
    71e0:	f4 01       	movw	r30, r8
    71e2:	31 97       	sbiw	r30, 0x01	; 1
    71e4:	04 91       	lpm	r16, Z
    71e6:	00 23       	and	r16, r16
    71e8:	c9 f0       	breq	.+50     	; 0x721c <conv_flt+0xb4>
    71ea:	81 e0       	ldi	r24, 0x01	; 1
    71ec:	e8 1a       	sub	r14, r24
    71ee:	f1 08       	sbc	r15, r1
    71f0:	71 f0       	breq	.+28     	; 0x720e <conv_flt+0xa6>
    71f2:	c5 01       	movw	r24, r10
    71f4:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    71f8:	6c 01       	movw	r12, r24
    71fa:	97 fd       	sbrc	r25, 7
    71fc:	08 c0       	rjmp	.+16     	; 0x720e <conv_flt+0xa6>
    71fe:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <tolower>
    7202:	08 17       	cp	r16, r24
    7204:	51 f3       	breq	.-44     	; 0x71da <conv_flt+0x72>
    7206:	b5 01       	movw	r22, r10
    7208:	c6 01       	movw	r24, r12
    720a:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <ungetc>
    720e:	95 e0       	ldi	r25, 0x05	; 5
    7210:	89 16       	cp	r8, r25
    7212:	9f e0       	ldi	r25, 0x0F	; 15
    7214:	99 06       	cpc	r9, r25
    7216:	09 f0       	breq	.+2      	; 0x721a <conv_flt+0xb2>
    7218:	c1 cf       	rjmp	.-126    	; 0x719c <conv_flt+0x34>
    721a:	05 c0       	rjmp	.+10     	; 0x7226 <conv_flt+0xbe>
    721c:	f2 e0       	ldi	r31, 0x02	; 2
    721e:	8f 16       	cp	r8, r31
    7220:	ff e0       	ldi	r31, 0x0F	; 15
    7222:	9f 06       	cpc	r9, r31
    7224:	29 f0       	breq	.+10     	; 0x7230 <conv_flt+0xc8>
    7226:	80 e0       	ldi	r24, 0x00	; 0
    7228:	90 e0       	ldi	r25, 0x00	; 0
    722a:	a0 e8       	ldi	r26, 0x80	; 128
    722c:	bf e7       	ldi	r27, 0x7F	; 127
    722e:	04 c0       	rjmp	.+8      	; 0x7238 <conv_flt+0xd0>
    7230:	80 e0       	ldi	r24, 0x00	; 0
    7232:	90 e0       	ldi	r25, 0x00	; 0
    7234:	a0 ec       	ldi	r26, 0xC0	; 192
    7236:	bf e7       	ldi	r27, 0x7F	; 127
    7238:	bc 01       	movw	r22, r24
    723a:	cd 01       	movw	r24, r26
    723c:	cd c0       	rjmp	.+410    	; 0x73d8 <conv_flt+0x270>
    723e:	41 2c       	mov	r4, r1
    7240:	51 2c       	mov	r5, r1
    7242:	32 01       	movw	r6, r4
    7244:	c1 2c       	mov	r12, r1
    7246:	d1 2c       	mov	r13, r1
    7248:	2d 81       	ldd	r18, Y+5	; 0x05
    724a:	20 53       	subi	r18, 0x30	; 48
    724c:	2a 30       	cpi	r18, 0x0A	; 10
    724e:	18 f5       	brcc	.+70     	; 0x7296 <conv_flt+0x12e>
    7250:	01 2f       	mov	r16, r17
    7252:	02 60       	ori	r16, 0x02	; 2
    7254:	81 2f       	mov	r24, r17
    7256:	88 70       	andi	r24, 0x08	; 8
    7258:	12 ff       	sbrs	r17, 2
    725a:	06 c0       	rjmp	.+12     	; 0x7268 <conv_flt+0x100>
    725c:	81 11       	cpse	r24, r1
    725e:	21 c0       	rjmp	.+66     	; 0x72a2 <conv_flt+0x13a>
    7260:	2f ef       	ldi	r18, 0xFF	; 255
    7262:	c2 1a       	sub	r12, r18
    7264:	d2 0a       	sbc	r13, r18
    7266:	1d c0       	rjmp	.+58     	; 0x72a2 <conv_flt+0x13a>
    7268:	88 23       	and	r24, r24
    726a:	19 f0       	breq	.+6      	; 0x7272 <conv_flt+0x10a>
    726c:	81 e0       	ldi	r24, 0x01	; 1
    726e:	c8 1a       	sub	r12, r24
    7270:	d1 08       	sbc	r13, r1
    7272:	40 e2       	ldi	r20, 0x20	; 32
    7274:	c3 01       	movw	r24, r6
    7276:	b2 01       	movw	r22, r4
    7278:	0e 94 47 37 	call	0x6e8e	; 0x6e8e <mulacc>
    727c:	2b 01       	movw	r4, r22
    727e:	3c 01       	movw	r6, r24
    7280:	98 e9       	ldi	r25, 0x98	; 152
    7282:	49 16       	cp	r4, r25
    7284:	99 e9       	ldi	r25, 0x99	; 153
    7286:	59 06       	cpc	r5, r25
    7288:	69 06       	cpc	r6, r25
    728a:	99 e1       	ldi	r25, 0x19	; 25
    728c:	79 06       	cpc	r7, r25
    728e:	48 f0       	brcs	.+18     	; 0x72a2 <conv_flt+0x13a>
    7290:	01 2f       	mov	r16, r17
    7292:	06 60       	ori	r16, 0x06	; 6
    7294:	06 c0       	rjmp	.+12     	; 0x72a2 <conv_flt+0x13a>
    7296:	2e 3f       	cpi	r18, 0xFE	; 254
    7298:	91 f4       	brne	.+36     	; 0x72be <conv_flt+0x156>
    729a:	13 fd       	sbrc	r17, 3
    729c:	10 c0       	rjmp	.+32     	; 0x72be <conv_flt+0x156>
    729e:	01 2f       	mov	r16, r17
    72a0:	08 60       	ori	r16, 0x08	; 8
    72a2:	e1 e0       	ldi	r30, 0x01	; 1
    72a4:	ee 1a       	sub	r14, r30
    72a6:	f1 08       	sbc	r15, r1
    72a8:	49 f0       	breq	.+18     	; 0x72bc <conv_flt+0x154>
    72aa:	c5 01       	movw	r24, r10
    72ac:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    72b0:	9e 83       	std	Y+6, r25	; 0x06
    72b2:	8d 83       	std	Y+5, r24	; 0x05
    72b4:	10 2f       	mov	r17, r16
    72b6:	97 ff       	sbrs	r25, 7
    72b8:	c7 cf       	rjmp	.-114    	; 0x7248 <conv_flt+0xe0>
    72ba:	01 c0       	rjmp	.+2      	; 0x72be <conv_flt+0x156>
    72bc:	10 2f       	mov	r17, r16
    72be:	11 ff       	sbrs	r17, 1
    72c0:	6d cf       	rjmp	.-294    	; 0x719c <conv_flt+0x34>
    72c2:	8d 81       	ldd	r24, Y+5	; 0x05
    72c4:	8f 7d       	andi	r24, 0xDF	; 223
    72c6:	85 34       	cpi	r24, 0x45	; 69
    72c8:	09 f0       	breq	.+2      	; 0x72cc <conv_flt+0x164>
    72ca:	4e c0       	rjmp	.+156    	; 0x7368 <conv_flt+0x200>
    72cc:	47 01       	movw	r8, r14
    72ce:	f1 e0       	ldi	r31, 0x01	; 1
    72d0:	8f 1a       	sub	r8, r31
    72d2:	91 08       	sbc	r9, r1
    72d4:	09 f4       	brne	.+2      	; 0x72d8 <conv_flt+0x170>
    72d6:	62 cf       	rjmp	.-316    	; 0x719c <conv_flt+0x34>
    72d8:	c5 01       	movw	r24, r10
    72da:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    72de:	9e 83       	std	Y+6, r25	; 0x06
    72e0:	8d 83       	std	Y+5, r24	; 0x05
    72e2:	97 fd       	sbrc	r25, 7
    72e4:	5b cf       	rjmp	.-330    	; 0x719c <conv_flt+0x34>
    72e6:	99 27       	eor	r25, r25
    72e8:	8b 32       	cpi	r24, 0x2B	; 43
    72ea:	91 05       	cpc	r25, r1
    72ec:	19 f0       	breq	.+6      	; 0x72f4 <conv_flt+0x18c>
    72ee:	8d 97       	sbiw	r24, 0x2d	; 45
    72f0:	61 f4       	brne	.+24     	; 0x730a <conv_flt+0x1a2>
    72f2:	10 61       	ori	r17, 0x10	; 16
    72f4:	47 01       	movw	r8, r14
    72f6:	22 e0       	ldi	r18, 0x02	; 2
    72f8:	82 1a       	sub	r8, r18
    72fa:	91 08       	sbc	r9, r1
    72fc:	09 f4       	brne	.+2      	; 0x7300 <conv_flt+0x198>
    72fe:	4e cf       	rjmp	.-356    	; 0x719c <conv_flt+0x34>
    7300:	c5 01       	movw	r24, r10
    7302:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    7306:	9e 83       	std	Y+6, r25	; 0x06
    7308:	8d 83       	std	Y+5, r24	; 0x05
    730a:	8d 81       	ldd	r24, Y+5	; 0x05
    730c:	9e 81       	ldd	r25, Y+6	; 0x06
    730e:	c0 97       	sbiw	r24, 0x30	; 48
    7310:	0a 97       	sbiw	r24, 0x0a	; 10
    7312:	08 f0       	brcs	.+2      	; 0x7316 <conv_flt+0x1ae>
    7314:	43 cf       	rjmp	.-378    	; 0x719c <conv_flt+0x34>
    7316:	74 01       	movw	r14, r8
    7318:	81 2c       	mov	r8, r1
    731a:	91 2c       	mov	r9, r1
    731c:	b4 01       	movw	r22, r8
    731e:	99 0c       	add	r9, r9
    7320:	88 0b       	sbc	r24, r24
    7322:	99 0b       	sbc	r25, r25
    7324:	2d 81       	ldd	r18, Y+5	; 0x05
    7326:	20 53       	subi	r18, 0x30	; 48
    7328:	40 e2       	ldi	r20, 0x20	; 32
    732a:	0e 94 47 37 	call	0x6e8e	; 0x6e8e <mulacc>
    732e:	ab 01       	movw	r20, r22
    7330:	bc 01       	movw	r22, r24
    7332:	4a 01       	movw	r8, r20
    7334:	81 e0       	ldi	r24, 0x01	; 1
    7336:	e8 1a       	sub	r14, r24
    7338:	f1 08       	sbc	r15, r1
    733a:	71 f0       	breq	.+28     	; 0x7358 <conv_flt+0x1f0>
    733c:	c5 01       	movw	r24, r10
    733e:	49 83       	std	Y+1, r20	; 0x01
    7340:	5a 83       	std	Y+2, r21	; 0x02
    7342:	6b 83       	std	Y+3, r22	; 0x03
    7344:	7c 83       	std	Y+4, r23	; 0x04
    7346:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    734a:	9e 83       	std	Y+6, r25	; 0x06
    734c:	8d 83       	std	Y+5, r24	; 0x05
    734e:	c0 97       	sbiw	r24, 0x30	; 48
    7350:	49 81       	ldd	r20, Y+1	; 0x01
    7352:	5a 81       	ldd	r21, Y+2	; 0x02
    7354:	0a 97       	sbiw	r24, 0x0a	; 10
    7356:	10 f3       	brcs	.-60     	; 0x731c <conv_flt+0x1b4>
    7358:	14 ff       	sbrs	r17, 4
    735a:	04 c0       	rjmp	.+8      	; 0x7364 <conv_flt+0x1fc>
    735c:	88 24       	eor	r8, r8
    735e:	99 24       	eor	r9, r9
    7360:	84 1a       	sub	r8, r20
    7362:	95 0a       	sbc	r9, r21
    7364:	c8 0c       	add	r12, r8
    7366:	d9 1c       	adc	r13, r9
    7368:	ef 28       	or	r14, r15
    736a:	41 f0       	breq	.+16     	; 0x737c <conv_flt+0x214>
    736c:	ed 81       	ldd	r30, Y+5	; 0x05
    736e:	fe 81       	ldd	r31, Y+6	; 0x06
    7370:	f7 fd       	sbrc	r31, 7
    7372:	04 c0       	rjmp	.+8      	; 0x737c <conv_flt+0x214>
    7374:	b5 01       	movw	r22, r10
    7376:	cf 01       	movw	r24, r30
    7378:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <ungetc>
    737c:	c3 01       	movw	r24, r6
    737e:	b2 01       	movw	r22, r4
    7380:	0e 94 cc 30 	call	0x6198	; 0x6198 <__floatunsisf>
    7384:	d7 fe       	sbrs	r13, 7
    7386:	08 c0       	rjmp	.+16     	; 0x7398 <conv_flt+0x230>
    7388:	d1 94       	neg	r13
    738a:	c1 94       	neg	r12
    738c:	d1 08       	sbc	r13, r1
    738e:	5e e1       	ldi	r21, 0x1E	; 30
    7390:	85 2e       	mov	r8, r21
    7392:	5f e0       	ldi	r21, 0x0F	; 15
    7394:	95 2e       	mov	r9, r21
    7396:	04 c0       	rjmp	.+8      	; 0x73a0 <conv_flt+0x238>
    7398:	46 e3       	ldi	r20, 0x36	; 54
    739a:	84 2e       	mov	r8, r20
    739c:	4f e0       	ldi	r20, 0x0F	; 15
    739e:	94 2e       	mov	r9, r20
    73a0:	54 01       	movw	r10, r8
    73a2:	f8 e1       	ldi	r31, 0x18	; 24
    73a4:	af 1a       	sub	r10, r31
    73a6:	b1 08       	sbc	r11, r1
    73a8:	30 e2       	ldi	r19, 0x20	; 32
    73aa:	e3 2e       	mov	r14, r19
    73ac:	f1 2c       	mov	r15, r1
    73ae:	ce 14       	cp	r12, r14
    73b0:	df 04       	cpc	r13, r15
    73b2:	50 f0       	brcs	.+20     	; 0x73c8 <conv_flt+0x260>
    73b4:	f4 01       	movw	r30, r8
    73b6:	25 91       	lpm	r18, Z+
    73b8:	35 91       	lpm	r19, Z+
    73ba:	45 91       	lpm	r20, Z+
    73bc:	54 91       	lpm	r21, Z
    73be:	0e 94 db 31 	call	0x63b6	; 0x63b6 <__mulsf3>
    73c2:	ce 18       	sub	r12, r14
    73c4:	df 08       	sbc	r13, r15
    73c6:	f3 cf       	rjmp	.-26     	; 0x73ae <conv_flt+0x246>
    73c8:	24 e0       	ldi	r18, 0x04	; 4
    73ca:	82 1a       	sub	r8, r18
    73cc:	91 08       	sbc	r9, r1
    73ce:	f6 94       	lsr	r15
    73d0:	e7 94       	ror	r14
    73d2:	8a 14       	cp	r8, r10
    73d4:	9b 04       	cpc	r9, r11
    73d6:	59 f7       	brne	.-42     	; 0x73ae <conv_flt+0x246>
    73d8:	17 ff       	sbrs	r17, 7
    73da:	05 c0       	rjmp	.+10     	; 0x73e6 <conv_flt+0x27e>
    73dc:	dc 01       	movw	r26, r24
    73de:	cb 01       	movw	r24, r22
    73e0:	b0 58       	subi	r27, 0x80	; 128
    73e2:	bc 01       	movw	r22, r24
    73e4:	cd 01       	movw	r24, r26
    73e6:	21 14       	cp	r2, r1
    73e8:	31 04       	cpc	r3, r1
    73ea:	29 f0       	breq	.+10     	; 0x73f6 <conv_flt+0x28e>
    73ec:	f1 01       	movw	r30, r2
    73ee:	60 83       	st	Z, r22
    73f0:	71 83       	std	Z+1, r23	; 0x01
    73f2:	82 83       	std	Z+2, r24	; 0x02
    73f4:	93 83       	std	Z+3, r25	; 0x03
    73f6:	81 e0       	ldi	r24, 0x01	; 1
    73f8:	26 96       	adiw	r28, 0x06	; 6
    73fa:	e2 e1       	ldi	r30, 0x12	; 18
    73fc:	0c 94 c3 3b 	jmp	0x7786	; 0x7786 <__epilogue_restores__>

00007400 <vfscanf>:
    7400:	a1 e0       	ldi	r26, 0x01	; 1
    7402:	b0 e0       	ldi	r27, 0x00	; 0
    7404:	e6 e0       	ldi	r30, 0x06	; 6
    7406:	fa e3       	ldi	r31, 0x3A	; 58
    7408:	0c 94 a9 3b 	jmp	0x7752	; 0x7752 <__prologue_saves__+0x4>
    740c:	6c 01       	movw	r12, r24
    740e:	2b 01       	movw	r4, r22
    7410:	4a 01       	movw	r8, r20
    7412:	fc 01       	movw	r30, r24
    7414:	17 82       	std	Z+7, r1	; 0x07
    7416:	16 82       	std	Z+6, r1	; 0x06
    7418:	a1 2c       	mov	r10, r1
    741a:	f6 01       	movw	r30, r12
    741c:	f3 80       	ldd	r15, Z+3	; 0x03
    741e:	f2 01       	movw	r30, r4
    7420:	f3 fc       	sbrc	r15, 3
    7422:	85 91       	lpm	r24, Z+
    7424:	f3 fe       	sbrs	r15, 3
    7426:	81 91       	ld	r24, Z+
    7428:	48 2f       	mov	r20, r24
    742a:	2f 01       	movw	r4, r30
    742c:	88 23       	and	r24, r24
    742e:	09 f4       	brne	.+2      	; 0x7432 <vfscanf+0x32>
    7430:	10 c1       	rjmp	.+544    	; 0x7652 <vfscanf+0x252>
    7432:	90 e0       	ldi	r25, 0x00	; 0
    7434:	49 83       	std	Y+1, r20	; 0x01
    7436:	0e 94 ca 3c 	call	0x7994	; 0x7994 <isspace>
    743a:	49 81       	ldd	r20, Y+1	; 0x01
    743c:	89 2b       	or	r24, r25
    743e:	21 f0       	breq	.+8      	; 0x7448 <vfscanf+0x48>
    7440:	c6 01       	movw	r24, r12
    7442:	0e 94 67 37 	call	0x6ece	; 0x6ece <skip_spaces>
    7446:	e9 cf       	rjmp	.-46     	; 0x741a <vfscanf+0x1a>
    7448:	45 32       	cpi	r20, 0x25	; 37
    744a:	41 f4       	brne	.+16     	; 0x745c <vfscanf+0x5c>
    744c:	f2 01       	movw	r30, r4
    744e:	f3 fc       	sbrc	r15, 3
    7450:	45 91       	lpm	r20, Z+
    7452:	f3 fe       	sbrs	r15, 3
    7454:	41 91       	ld	r20, Z+
    7456:	2f 01       	movw	r4, r30
    7458:	45 32       	cpi	r20, 0x25	; 37
    745a:	69 f4       	brne	.+26     	; 0x7476 <vfscanf+0x76>
    745c:	c6 01       	movw	r24, r12
    745e:	49 83       	std	Y+1, r20	; 0x01
    7460:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    7464:	49 81       	ldd	r20, Y+1	; 0x01
    7466:	97 fd       	sbrc	r25, 7
    7468:	f2 c0       	rjmp	.+484    	; 0x764e <vfscanf+0x24e>
    746a:	48 17       	cp	r20, r24
    746c:	b1 f2       	breq	.-84     	; 0x741a <vfscanf+0x1a>
    746e:	b6 01       	movw	r22, r12
    7470:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <ungetc>
    7474:	ee c0       	rjmp	.+476    	; 0x7652 <vfscanf+0x252>
    7476:	4a 32       	cpi	r20, 0x2A	; 42
    7478:	39 f4       	brne	.+14     	; 0x7488 <vfscanf+0x88>
    747a:	f3 fc       	sbrc	r15, 3
    747c:	45 91       	lpm	r20, Z+
    747e:	f3 fe       	sbrs	r15, 3
    7480:	41 91       	ld	r20, Z+
    7482:	2f 01       	movw	r4, r30
    7484:	51 e0       	ldi	r21, 0x01	; 1
    7486:	01 c0       	rjmp	.+2      	; 0x748a <vfscanf+0x8a>
    7488:	50 e0       	ldi	r21, 0x00	; 0
    748a:	32 01       	movw	r6, r4
    748c:	00 e0       	ldi	r16, 0x00	; 0
    748e:	10 e0       	ldi	r17, 0x00	; 0
    7490:	20 ed       	ldi	r18, 0xD0	; 208
    7492:	24 0f       	add	r18, r20
    7494:	2a 30       	cpi	r18, 0x0A	; 10
    7496:	88 f4       	brcc	.+34     	; 0x74ba <vfscanf+0xba>
    7498:	52 60       	ori	r21, 0x02	; 2
    749a:	b8 01       	movw	r22, r16
    749c:	80 e0       	ldi	r24, 0x00	; 0
    749e:	90 e0       	ldi	r25, 0x00	; 0
    74a0:	40 e2       	ldi	r20, 0x20	; 32
    74a2:	59 83       	std	Y+1, r21	; 0x01
    74a4:	0e 94 47 37 	call	0x6e8e	; 0x6e8e <mulacc>
    74a8:	8b 01       	movw	r16, r22
    74aa:	f3 01       	movw	r30, r6
    74ac:	f3 fc       	sbrc	r15, 3
    74ae:	45 91       	lpm	r20, Z+
    74b0:	f3 fe       	sbrs	r15, 3
    74b2:	41 91       	ld	r20, Z+
    74b4:	3f 01       	movw	r6, r30
    74b6:	59 81       	ldd	r21, Y+1	; 0x01
    74b8:	eb cf       	rjmp	.-42     	; 0x7490 <vfscanf+0x90>
    74ba:	b5 2e       	mov	r11, r21
    74bc:	34 2f       	mov	r19, r20
    74be:	23 01       	movw	r4, r6
    74c0:	51 ff       	sbrs	r21, 1
    74c2:	04 c0       	rjmp	.+8      	; 0x74cc <vfscanf+0xcc>
    74c4:	01 15       	cp	r16, r1
    74c6:	11 05       	cpc	r17, r1
    74c8:	19 f4       	brne	.+6      	; 0x74d0 <vfscanf+0xd0>
    74ca:	c3 c0       	rjmp	.+390    	; 0x7652 <vfscanf+0x252>
    74cc:	0f ef       	ldi	r16, 0xFF	; 255
    74ce:	1f ef       	ldi	r17, 0xFF	; 255
    74d0:	48 36       	cpi	r20, 0x68	; 104
    74d2:	19 f0       	breq	.+6      	; 0x74da <vfscanf+0xda>
    74d4:	4c 36       	cpi	r20, 0x6C	; 108
    74d6:	59 f0       	breq	.+22     	; 0x74ee <vfscanf+0xee>
    74d8:	13 c0       	rjmp	.+38     	; 0x7500 <vfscanf+0x100>
    74da:	f3 01       	movw	r30, r6
    74dc:	f3 fc       	sbrc	r15, 3
    74de:	35 91       	lpm	r19, Z+
    74e0:	f3 fe       	sbrs	r15, 3
    74e2:	31 91       	ld	r19, Z+
    74e4:	2f 01       	movw	r4, r30
    74e6:	38 36       	cpi	r19, 0x68	; 104
    74e8:	59 f4       	brne	.+22     	; 0x7500 <vfscanf+0x100>
    74ea:	58 60       	ori	r21, 0x08	; 8
    74ec:	b5 2e       	mov	r11, r21
    74ee:	fb 2d       	mov	r31, r11
    74f0:	f4 60       	ori	r31, 0x04	; 4
    74f2:	bf 2e       	mov	r11, r31
    74f4:	f2 01       	movw	r30, r4
    74f6:	f3 fc       	sbrc	r15, 3
    74f8:	35 91       	lpm	r19, Z+
    74fa:	f3 fe       	sbrs	r15, 3
    74fc:	31 91       	ld	r19, Z+
    74fe:	2f 01       	movw	r4, r30
    7500:	33 23       	and	r19, r19
    7502:	09 f4       	brne	.+2      	; 0x7506 <vfscanf+0x106>
    7504:	a6 c0       	rjmp	.+332    	; 0x7652 <vfscanf+0x252>
    7506:	63 2f       	mov	r22, r19
    7508:	70 e0       	ldi	r23, 0x00	; 0
    750a:	8d ee       	ldi	r24, 0xED	; 237
    750c:	9e e0       	ldi	r25, 0x0E	; 14
    750e:	39 83       	std	Y+1, r19	; 0x01
    7510:	0e 94 db 3c 	call	0x79b6	; 0x79b6 <strchr_P>
    7514:	39 81       	ldd	r19, Y+1	; 0x01
    7516:	89 2b       	or	r24, r25
    7518:	09 f4       	brne	.+2      	; 0x751c <vfscanf+0x11c>
    751a:	9b c0       	rjmp	.+310    	; 0x7652 <vfscanf+0x252>
    751c:	b0 fc       	sbrc	r11, 0
    751e:	07 c0       	rjmp	.+14     	; 0x752e <vfscanf+0x12e>
    7520:	f4 01       	movw	r30, r8
    7522:	e0 80       	ld	r14, Z
    7524:	f1 80       	ldd	r15, Z+1	; 0x01
    7526:	c4 01       	movw	r24, r8
    7528:	02 96       	adiw	r24, 0x02	; 2
    752a:	4c 01       	movw	r8, r24
    752c:	02 c0       	rjmp	.+4      	; 0x7532 <vfscanf+0x132>
    752e:	e1 2c       	mov	r14, r1
    7530:	f1 2c       	mov	r15, r1
    7532:	3e 36       	cpi	r19, 0x6E	; 110
    7534:	51 f4       	brne	.+20     	; 0x754a <vfscanf+0x14a>
    7536:	f6 01       	movw	r30, r12
    7538:	46 81       	ldd	r20, Z+6	; 0x06
    753a:	57 81       	ldd	r21, Z+7	; 0x07
    753c:	60 e0       	ldi	r22, 0x00	; 0
    753e:	70 e0       	ldi	r23, 0x00	; 0
    7540:	2b 2d       	mov	r18, r11
    7542:	c7 01       	movw	r24, r14
    7544:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <putval>
    7548:	68 cf       	rjmp	.-304    	; 0x741a <vfscanf+0x1a>
    754a:	33 36       	cpi	r19, 0x63	; 99
    754c:	a9 f4       	brne	.+42     	; 0x7578 <vfscanf+0x178>
    754e:	b1 fc       	sbrc	r11, 1
    7550:	02 c0       	rjmp	.+4      	; 0x7556 <vfscanf+0x156>
    7552:	01 e0       	ldi	r16, 0x01	; 1
    7554:	10 e0       	ldi	r17, 0x00	; 0
    7556:	c6 01       	movw	r24, r12
    7558:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    755c:	97 fd       	sbrc	r25, 7
    755e:	77 c0       	rjmp	.+238    	; 0x764e <vfscanf+0x24e>
    7560:	e1 14       	cp	r14, r1
    7562:	f1 04       	cpc	r15, r1
    7564:	29 f0       	breq	.+10     	; 0x7570 <vfscanf+0x170>
    7566:	f7 01       	movw	r30, r14
    7568:	80 83       	st	Z, r24
    756a:	c7 01       	movw	r24, r14
    756c:	01 96       	adiw	r24, 0x01	; 1
    756e:	7c 01       	movw	r14, r24
    7570:	01 50       	subi	r16, 0x01	; 1
    7572:	11 09       	sbc	r17, r1
    7574:	81 f7       	brne	.-32     	; 0x7556 <vfscanf+0x156>
    7576:	67 c0       	rjmp	.+206    	; 0x7646 <vfscanf+0x246>
    7578:	3b 35       	cpi	r19, 0x5B	; 91
    757a:	59 f4       	brne	.+22     	; 0x7592 <vfscanf+0x192>
    757c:	92 01       	movw	r18, r4
    757e:	a7 01       	movw	r20, r14
    7580:	b8 01       	movw	r22, r16
    7582:	c6 01       	movw	r24, r12
    7584:	0e 94 08 38 	call	0x7010	; 0x7010 <conv_brk>
    7588:	2c 01       	movw	r4, r24
    758a:	89 2b       	or	r24, r25
    758c:	09 f0       	breq	.+2      	; 0x7590 <vfscanf+0x190>
    758e:	5b c0       	rjmp	.+182    	; 0x7646 <vfscanf+0x246>
    7590:	55 c0       	rjmp	.+170    	; 0x763c <vfscanf+0x23c>
    7592:	c6 01       	movw	r24, r12
    7594:	39 83       	std	Y+1, r19	; 0x01
    7596:	0e 94 67 37 	call	0x6ece	; 0x6ece <skip_spaces>
    759a:	39 81       	ldd	r19, Y+1	; 0x01
    759c:	97 fd       	sbrc	r25, 7
    759e:	57 c0       	rjmp	.+174    	; 0x764e <vfscanf+0x24e>
    75a0:	3f 36       	cpi	r19, 0x6F	; 111
    75a2:	d9 f1       	breq	.+118    	; 0x761a <vfscanf+0x21a>
    75a4:	40 f4       	brcc	.+16     	; 0x75b6 <vfscanf+0x1b6>
    75a6:	34 36       	cpi	r19, 0x64	; 100
    75a8:	a1 f1       	breq	.+104    	; 0x7612 <vfscanf+0x212>
    75aa:	39 36       	cpi	r19, 0x69	; 105
    75ac:	c9 f1       	breq	.+114    	; 0x7620 <vfscanf+0x220>
    75ae:	38 35       	cpi	r19, 0x58	; 88
    75b0:	09 f0       	breq	.+2      	; 0x75b4 <vfscanf+0x1b4>
    75b2:	3d c0       	rjmp	.+122    	; 0x762e <vfscanf+0x22e>
    75b4:	2a c0       	rjmp	.+84     	; 0x760a <vfscanf+0x20a>
    75b6:	33 37       	cpi	r19, 0x73	; 115
    75b8:	a1 f0       	breq	.+40     	; 0x75e2 <vfscanf+0x1e2>
    75ba:	18 f4       	brcc	.+6      	; 0x75c2 <vfscanf+0x1c2>
    75bc:	30 37       	cpi	r19, 0x70	; 112
    75be:	29 f1       	breq	.+74     	; 0x760a <vfscanf+0x20a>
    75c0:	36 c0       	rjmp	.+108    	; 0x762e <vfscanf+0x22e>
    75c2:	35 37       	cpi	r19, 0x75	; 117
    75c4:	31 f1       	breq	.+76     	; 0x7612 <vfscanf+0x212>
    75c6:	38 37       	cpi	r19, 0x78	; 120
    75c8:	01 f1       	breq	.+64     	; 0x760a <vfscanf+0x20a>
    75ca:	31 c0       	rjmp	.+98     	; 0x762e <vfscanf+0x22e>
    75cc:	e1 14       	cp	r14, r1
    75ce:	f1 04       	cpc	r15, r1
    75d0:	29 f0       	breq	.+10     	; 0x75dc <vfscanf+0x1dc>
    75d2:	f7 01       	movw	r30, r14
    75d4:	60 82       	st	Z, r6
    75d6:	c7 01       	movw	r24, r14
    75d8:	01 96       	adiw	r24, 0x01	; 1
    75da:	7c 01       	movw	r14, r24
    75dc:	01 50       	subi	r16, 0x01	; 1
    75de:	11 09       	sbc	r17, r1
    75e0:	71 f0       	breq	.+28     	; 0x75fe <vfscanf+0x1fe>
    75e2:	c6 01       	movw	r24, r12
    75e4:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <fgetc>
    75e8:	3c 01       	movw	r6, r24
    75ea:	97 fd       	sbrc	r25, 7
    75ec:	08 c0       	rjmp	.+16     	; 0x75fe <vfscanf+0x1fe>
    75ee:	0e 94 ca 3c 	call	0x7994	; 0x7994 <isspace>
    75f2:	89 2b       	or	r24, r25
    75f4:	59 f3       	breq	.-42     	; 0x75cc <vfscanf+0x1cc>
    75f6:	b6 01       	movw	r22, r12
    75f8:	c3 01       	movw	r24, r6
    75fa:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <ungetc>
    75fe:	e1 14       	cp	r14, r1
    7600:	f1 04       	cpc	r15, r1
    7602:	09 f1       	breq	.+66     	; 0x7646 <vfscanf+0x246>
    7604:	f7 01       	movw	r30, r14
    7606:	10 82       	st	Z, r1
    7608:	1e c0       	rjmp	.+60     	; 0x7646 <vfscanf+0x246>
    760a:	fb 2d       	mov	r31, r11
    760c:	f0 64       	ori	r31, 0x40	; 64
    760e:	bf 2e       	mov	r11, r31
    7610:	07 c0       	rjmp	.+14     	; 0x7620 <vfscanf+0x220>
    7612:	8b 2d       	mov	r24, r11
    7614:	80 62       	ori	r24, 0x20	; 32
    7616:	b8 2e       	mov	r11, r24
    7618:	03 c0       	rjmp	.+6      	; 0x7620 <vfscanf+0x220>
    761a:	9b 2d       	mov	r25, r11
    761c:	90 61       	ori	r25, 0x10	; 16
    761e:	b9 2e       	mov	r11, r25
    7620:	2b 2d       	mov	r18, r11
    7622:	a7 01       	movw	r20, r14
    7624:	b8 01       	movw	r22, r16
    7626:	c6 01       	movw	r24, r12
    7628:	0e 94 80 37 	call	0x6f00	; 0x6f00 <conv_int>
    762c:	05 c0       	rjmp	.+10     	; 0x7638 <vfscanf+0x238>
    762e:	a7 01       	movw	r20, r14
    7630:	b8 01       	movw	r22, r16
    7632:	c6 01       	movw	r24, r12
    7634:	0e 94 b4 38 	call	0x7168	; 0x7168 <conv_flt>
    7638:	81 11       	cpse	r24, r1
    763a:	05 c0       	rjmp	.+10     	; 0x7646 <vfscanf+0x246>
    763c:	f6 01       	movw	r30, r12
    763e:	83 81       	ldd	r24, Z+3	; 0x03
    7640:	80 73       	andi	r24, 0x30	; 48
    7642:	29 f4       	brne	.+10     	; 0x764e <vfscanf+0x24e>
    7644:	06 c0       	rjmp	.+12     	; 0x7652 <vfscanf+0x252>
    7646:	b0 fc       	sbrc	r11, 0
    7648:	e8 ce       	rjmp	.-560    	; 0x741a <vfscanf+0x1a>
    764a:	a3 94       	inc	r10
    764c:	e6 ce       	rjmp	.-564    	; 0x741a <vfscanf+0x1a>
    764e:	aa 20       	and	r10, r10
    7650:	19 f0       	breq	.+6      	; 0x7658 <vfscanf+0x258>
    7652:	8a 2d       	mov	r24, r10
    7654:	90 e0       	ldi	r25, 0x00	; 0
    7656:	02 c0       	rjmp	.+4      	; 0x765c <vfscanf+0x25c>
    7658:	8f ef       	ldi	r24, 0xFF	; 255
    765a:	9f ef       	ldi	r25, 0xFF	; 255
    765c:	21 96       	adiw	r28, 0x01	; 1
    765e:	e0 e1       	ldi	r30, 0x10	; 16
    7660:	0c 94 c5 3b 	jmp	0x778a	; 0x778a <__epilogue_restores__+0x4>

00007664 <__divmodhi4>:
    7664:	97 fb       	bst	r25, 7
    7666:	07 2e       	mov	r0, r23
    7668:	16 f4       	brtc	.+4      	; 0x766e <__divmodhi4+0xa>
    766a:	00 94       	com	r0
    766c:	07 d0       	rcall	.+14     	; 0x767c <__divmodhi4_neg1>
    766e:	77 fd       	sbrc	r23, 7
    7670:	09 d0       	rcall	.+18     	; 0x7684 <__divmodhi4_neg2>
    7672:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__udivmodhi4>
    7676:	07 fc       	sbrc	r0, 7
    7678:	05 d0       	rcall	.+10     	; 0x7684 <__divmodhi4_neg2>
    767a:	3e f4       	brtc	.+14     	; 0x768a <__divmodhi4_exit>

0000767c <__divmodhi4_neg1>:
    767c:	90 95       	com	r25
    767e:	81 95       	neg	r24
    7680:	9f 4f       	sbci	r25, 0xFF	; 255
    7682:	08 95       	ret

00007684 <__divmodhi4_neg2>:
    7684:	70 95       	com	r23
    7686:	61 95       	neg	r22
    7688:	7f 4f       	sbci	r23, 0xFF	; 255

0000768a <__divmodhi4_exit>:
    768a:	08 95       	ret

0000768c <__udivmodsi4>:
    768c:	a1 e2       	ldi	r26, 0x21	; 33
    768e:	1a 2e       	mov	r1, r26
    7690:	aa 1b       	sub	r26, r26
    7692:	bb 1b       	sub	r27, r27
    7694:	fd 01       	movw	r30, r26
    7696:	0d c0       	rjmp	.+26     	; 0x76b2 <__udivmodsi4_ep>

00007698 <__udivmodsi4_loop>:
    7698:	aa 1f       	adc	r26, r26
    769a:	bb 1f       	adc	r27, r27
    769c:	ee 1f       	adc	r30, r30
    769e:	ff 1f       	adc	r31, r31
    76a0:	a2 17       	cp	r26, r18
    76a2:	b3 07       	cpc	r27, r19
    76a4:	e4 07       	cpc	r30, r20
    76a6:	f5 07       	cpc	r31, r21
    76a8:	20 f0       	brcs	.+8      	; 0x76b2 <__udivmodsi4_ep>
    76aa:	a2 1b       	sub	r26, r18
    76ac:	b3 0b       	sbc	r27, r19
    76ae:	e4 0b       	sbc	r30, r20
    76b0:	f5 0b       	sbc	r31, r21

000076b2 <__udivmodsi4_ep>:
    76b2:	66 1f       	adc	r22, r22
    76b4:	77 1f       	adc	r23, r23
    76b6:	88 1f       	adc	r24, r24
    76b8:	99 1f       	adc	r25, r25
    76ba:	1a 94       	dec	r1
    76bc:	69 f7       	brne	.-38     	; 0x7698 <__udivmodsi4_loop>
    76be:	60 95       	com	r22
    76c0:	70 95       	com	r23
    76c2:	80 95       	com	r24
    76c4:	90 95       	com	r25
    76c6:	9b 01       	movw	r18, r22
    76c8:	ac 01       	movw	r20, r24
    76ca:	bd 01       	movw	r22, r26
    76cc:	cf 01       	movw	r24, r30
    76ce:	08 95       	ret

000076d0 <__divmodsi4>:
    76d0:	05 2e       	mov	r0, r21
    76d2:	97 fb       	bst	r25, 7
    76d4:	1e f4       	brtc	.+6      	; 0x76dc <__divmodsi4+0xc>
    76d6:	00 94       	com	r0
    76d8:	0e 94 7f 3b 	call	0x76fe	; 0x76fe <__negsi2>
    76dc:	57 fd       	sbrc	r21, 7
    76de:	07 d0       	rcall	.+14     	; 0x76ee <__divmodsi4_neg2>
    76e0:	0e 94 46 3b 	call	0x768c	; 0x768c <__udivmodsi4>
    76e4:	07 fc       	sbrc	r0, 7
    76e6:	03 d0       	rcall	.+6      	; 0x76ee <__divmodsi4_neg2>
    76e8:	4e f4       	brtc	.+18     	; 0x76fc <__divmodsi4_exit>
    76ea:	0c 94 7f 3b 	jmp	0x76fe	; 0x76fe <__negsi2>

000076ee <__divmodsi4_neg2>:
    76ee:	50 95       	com	r21
    76f0:	40 95       	com	r20
    76f2:	30 95       	com	r19
    76f4:	21 95       	neg	r18
    76f6:	3f 4f       	sbci	r19, 0xFF	; 255
    76f8:	4f 4f       	sbci	r20, 0xFF	; 255
    76fa:	5f 4f       	sbci	r21, 0xFF	; 255

000076fc <__divmodsi4_exit>:
    76fc:	08 95       	ret

000076fe <__negsi2>:
    76fe:	90 95       	com	r25
    7700:	80 95       	com	r24
    7702:	70 95       	com	r23
    7704:	61 95       	neg	r22
    7706:	7f 4f       	sbci	r23, 0xFF	; 255
    7708:	8f 4f       	sbci	r24, 0xFF	; 255
    770a:	9f 4f       	sbci	r25, 0xFF	; 255
    770c:	08 95       	ret

0000770e <__tablejump2__>:
    770e:	ee 0f       	add	r30, r30
    7710:	ff 1f       	adc	r31, r31
    7712:	05 90       	lpm	r0, Z+
    7714:	f4 91       	lpm	r31, Z
    7716:	e0 2d       	mov	r30, r0
    7718:	09 94       	ijmp

0000771a <__umulhisi3>:
    771a:	a2 9f       	mul	r26, r18
    771c:	b0 01       	movw	r22, r0
    771e:	b3 9f       	mul	r27, r19
    7720:	c0 01       	movw	r24, r0
    7722:	a3 9f       	mul	r26, r19
    7724:	70 0d       	add	r23, r0
    7726:	81 1d       	adc	r24, r1
    7728:	11 24       	eor	r1, r1
    772a:	91 1d       	adc	r25, r1
    772c:	b2 9f       	mul	r27, r18
    772e:	70 0d       	add	r23, r0
    7730:	81 1d       	adc	r24, r1
    7732:	11 24       	eor	r1, r1
    7734:	91 1d       	adc	r25, r1
    7736:	08 95       	ret

00007738 <__muluhisi3>:
    7738:	0e 94 8d 3b 	call	0x771a	; 0x771a <__umulhisi3>
    773c:	a5 9f       	mul	r26, r21
    773e:	90 0d       	add	r25, r0
    7740:	b4 9f       	mul	r27, r20
    7742:	90 0d       	add	r25, r0
    7744:	a4 9f       	mul	r26, r20
    7746:	80 0d       	add	r24, r0
    7748:	91 1d       	adc	r25, r1
    774a:	11 24       	eor	r1, r1
    774c:	08 95       	ret

0000774e <__prologue_saves__>:
    774e:	2f 92       	push	r2
    7750:	3f 92       	push	r3
    7752:	4f 92       	push	r4
    7754:	5f 92       	push	r5
    7756:	6f 92       	push	r6
    7758:	7f 92       	push	r7
    775a:	8f 92       	push	r8
    775c:	9f 92       	push	r9
    775e:	af 92       	push	r10
    7760:	bf 92       	push	r11
    7762:	cf 92       	push	r12
    7764:	df 92       	push	r13
    7766:	ef 92       	push	r14
    7768:	ff 92       	push	r15
    776a:	0f 93       	push	r16
    776c:	1f 93       	push	r17
    776e:	cf 93       	push	r28
    7770:	df 93       	push	r29
    7772:	cd b7       	in	r28, 0x3d	; 61
    7774:	de b7       	in	r29, 0x3e	; 62
    7776:	ca 1b       	sub	r28, r26
    7778:	db 0b       	sbc	r29, r27
    777a:	0f b6       	in	r0, 0x3f	; 63
    777c:	f8 94       	cli
    777e:	de bf       	out	0x3e, r29	; 62
    7780:	0f be       	out	0x3f, r0	; 63
    7782:	cd bf       	out	0x3d, r28	; 61
    7784:	09 94       	ijmp

00007786 <__epilogue_restores__>:
    7786:	2a 88       	ldd	r2, Y+18	; 0x12
    7788:	39 88       	ldd	r3, Y+17	; 0x11
    778a:	48 88       	ldd	r4, Y+16	; 0x10
    778c:	5f 84       	ldd	r5, Y+15	; 0x0f
    778e:	6e 84       	ldd	r6, Y+14	; 0x0e
    7790:	7d 84       	ldd	r7, Y+13	; 0x0d
    7792:	8c 84       	ldd	r8, Y+12	; 0x0c
    7794:	9b 84       	ldd	r9, Y+11	; 0x0b
    7796:	aa 84       	ldd	r10, Y+10	; 0x0a
    7798:	b9 84       	ldd	r11, Y+9	; 0x09
    779a:	c8 84       	ldd	r12, Y+8	; 0x08
    779c:	df 80       	ldd	r13, Y+7	; 0x07
    779e:	ee 80       	ldd	r14, Y+6	; 0x06
    77a0:	fd 80       	ldd	r15, Y+5	; 0x05
    77a2:	0c 81       	ldd	r16, Y+4	; 0x04
    77a4:	1b 81       	ldd	r17, Y+3	; 0x03
    77a6:	aa 81       	ldd	r26, Y+2	; 0x02
    77a8:	b9 81       	ldd	r27, Y+1	; 0x01
    77aa:	ce 0f       	add	r28, r30
    77ac:	d1 1d       	adc	r29, r1
    77ae:	0f b6       	in	r0, 0x3f	; 63
    77b0:	f8 94       	cli
    77b2:	de bf       	out	0x3e, r29	; 62
    77b4:	0f be       	out	0x3f, r0	; 63
    77b6:	cd bf       	out	0x3d, r28	; 61
    77b8:	ed 01       	movw	r28, r26
    77ba:	08 95       	ret

000077bc <__udivmodhi4>:
    77bc:	aa 1b       	sub	r26, r26
    77be:	bb 1b       	sub	r27, r27
    77c0:	51 e1       	ldi	r21, 0x11	; 17
    77c2:	07 c0       	rjmp	.+14     	; 0x77d2 <__udivmodhi4_ep>

000077c4 <__udivmodhi4_loop>:
    77c4:	aa 1f       	adc	r26, r26
    77c6:	bb 1f       	adc	r27, r27
    77c8:	a6 17       	cp	r26, r22
    77ca:	b7 07       	cpc	r27, r23
    77cc:	10 f0       	brcs	.+4      	; 0x77d2 <__udivmodhi4_ep>
    77ce:	a6 1b       	sub	r26, r22
    77d0:	b7 0b       	sbc	r27, r23

000077d2 <__udivmodhi4_ep>:
    77d2:	88 1f       	adc	r24, r24
    77d4:	99 1f       	adc	r25, r25
    77d6:	5a 95       	dec	r21
    77d8:	a9 f7       	brne	.-22     	; 0x77c4 <__udivmodhi4_loop>
    77da:	80 95       	com	r24
    77dc:	90 95       	com	r25
    77de:	bc 01       	movw	r22, r24
    77e0:	cd 01       	movw	r24, r26
    77e2:	08 95       	ret

000077e4 <__ftoa_engine>:
    77e4:	28 30       	cpi	r18, 0x08	; 8
    77e6:	08 f0       	brcs	.+2      	; 0x77ea <__ftoa_engine+0x6>
    77e8:	27 e0       	ldi	r18, 0x07	; 7
    77ea:	33 27       	eor	r19, r19
    77ec:	da 01       	movw	r26, r20
    77ee:	99 0f       	add	r25, r25
    77f0:	31 1d       	adc	r19, r1
    77f2:	87 fd       	sbrc	r24, 7
    77f4:	91 60       	ori	r25, 0x01	; 1
    77f6:	00 96       	adiw	r24, 0x00	; 0
    77f8:	61 05       	cpc	r22, r1
    77fa:	71 05       	cpc	r23, r1
    77fc:	39 f4       	brne	.+14     	; 0x780c <__ftoa_engine+0x28>
    77fe:	32 60       	ori	r19, 0x02	; 2
    7800:	2e 5f       	subi	r18, 0xFE	; 254
    7802:	3d 93       	st	X+, r19
    7804:	30 e3       	ldi	r19, 0x30	; 48
    7806:	2a 95       	dec	r18
    7808:	e1 f7       	brne	.-8      	; 0x7802 <__ftoa_engine+0x1e>
    780a:	08 95       	ret
    780c:	9f 3f       	cpi	r25, 0xFF	; 255
    780e:	30 f0       	brcs	.+12     	; 0x781c <__ftoa_engine+0x38>
    7810:	80 38       	cpi	r24, 0x80	; 128
    7812:	71 05       	cpc	r23, r1
    7814:	61 05       	cpc	r22, r1
    7816:	09 f0       	breq	.+2      	; 0x781a <__ftoa_engine+0x36>
    7818:	3c 5f       	subi	r19, 0xFC	; 252
    781a:	3c 5f       	subi	r19, 0xFC	; 252
    781c:	3d 93       	st	X+, r19
    781e:	91 30       	cpi	r25, 0x01	; 1
    7820:	08 f0       	brcs	.+2      	; 0x7824 <__ftoa_engine+0x40>
    7822:	80 68       	ori	r24, 0x80	; 128
    7824:	91 1d       	adc	r25, r1
    7826:	df 93       	push	r29
    7828:	cf 93       	push	r28
    782a:	1f 93       	push	r17
    782c:	0f 93       	push	r16
    782e:	ff 92       	push	r15
    7830:	ef 92       	push	r14
    7832:	19 2f       	mov	r17, r25
    7834:	98 7f       	andi	r25, 0xF8	; 248
    7836:	96 95       	lsr	r25
    7838:	e9 2f       	mov	r30, r25
    783a:	96 95       	lsr	r25
    783c:	96 95       	lsr	r25
    783e:	e9 0f       	add	r30, r25
    7840:	ff 27       	eor	r31, r31
    7842:	e8 5f       	subi	r30, 0xF8	; 248
    7844:	fd 4f       	sbci	r31, 0xFD	; 253
    7846:	99 27       	eor	r25, r25
    7848:	33 27       	eor	r19, r19
    784a:	ee 24       	eor	r14, r14
    784c:	ff 24       	eor	r15, r15
    784e:	a7 01       	movw	r20, r14
    7850:	e7 01       	movw	r28, r14
    7852:	05 90       	lpm	r0, Z+
    7854:	08 94       	sec
    7856:	07 94       	ror	r0
    7858:	28 f4       	brcc	.+10     	; 0x7864 <__ftoa_engine+0x80>
    785a:	36 0f       	add	r19, r22
    785c:	e7 1e       	adc	r14, r23
    785e:	f8 1e       	adc	r15, r24
    7860:	49 1f       	adc	r20, r25
    7862:	51 1d       	adc	r21, r1
    7864:	66 0f       	add	r22, r22
    7866:	77 1f       	adc	r23, r23
    7868:	88 1f       	adc	r24, r24
    786a:	99 1f       	adc	r25, r25
    786c:	06 94       	lsr	r0
    786e:	a1 f7       	brne	.-24     	; 0x7858 <__ftoa_engine+0x74>
    7870:	05 90       	lpm	r0, Z+
    7872:	07 94       	ror	r0
    7874:	28 f4       	brcc	.+10     	; 0x7880 <__ftoa_engine+0x9c>
    7876:	e7 0e       	add	r14, r23
    7878:	f8 1e       	adc	r15, r24
    787a:	49 1f       	adc	r20, r25
    787c:	56 1f       	adc	r21, r22
    787e:	c1 1d       	adc	r28, r1
    7880:	77 0f       	add	r23, r23
    7882:	88 1f       	adc	r24, r24
    7884:	99 1f       	adc	r25, r25
    7886:	66 1f       	adc	r22, r22
    7888:	06 94       	lsr	r0
    788a:	a1 f7       	brne	.-24     	; 0x7874 <__ftoa_engine+0x90>
    788c:	05 90       	lpm	r0, Z+
    788e:	07 94       	ror	r0
    7890:	28 f4       	brcc	.+10     	; 0x789c <__ftoa_engine+0xb8>
    7892:	f8 0e       	add	r15, r24
    7894:	49 1f       	adc	r20, r25
    7896:	56 1f       	adc	r21, r22
    7898:	c7 1f       	adc	r28, r23
    789a:	d1 1d       	adc	r29, r1
    789c:	88 0f       	add	r24, r24
    789e:	99 1f       	adc	r25, r25
    78a0:	66 1f       	adc	r22, r22
    78a2:	77 1f       	adc	r23, r23
    78a4:	06 94       	lsr	r0
    78a6:	a1 f7       	brne	.-24     	; 0x7890 <__ftoa_engine+0xac>
    78a8:	05 90       	lpm	r0, Z+
    78aa:	07 94       	ror	r0
    78ac:	20 f4       	brcc	.+8      	; 0x78b6 <__ftoa_engine+0xd2>
    78ae:	49 0f       	add	r20, r25
    78b0:	56 1f       	adc	r21, r22
    78b2:	c7 1f       	adc	r28, r23
    78b4:	d8 1f       	adc	r29, r24
    78b6:	99 0f       	add	r25, r25
    78b8:	66 1f       	adc	r22, r22
    78ba:	77 1f       	adc	r23, r23
    78bc:	88 1f       	adc	r24, r24
    78be:	06 94       	lsr	r0
    78c0:	a9 f7       	brne	.-22     	; 0x78ac <__ftoa_engine+0xc8>
    78c2:	84 91       	lpm	r24, Z
    78c4:	10 95       	com	r17
    78c6:	17 70       	andi	r17, 0x07	; 7
    78c8:	41 f0       	breq	.+16     	; 0x78da <__ftoa_engine+0xf6>
    78ca:	d6 95       	lsr	r29
    78cc:	c7 95       	ror	r28
    78ce:	57 95       	ror	r21
    78d0:	47 95       	ror	r20
    78d2:	f7 94       	ror	r15
    78d4:	e7 94       	ror	r14
    78d6:	1a 95       	dec	r17
    78d8:	c1 f7       	brne	.-16     	; 0x78ca <__ftoa_engine+0xe6>
    78da:	ee ea       	ldi	r30, 0xAE	; 174
    78dc:	f1 e0       	ldi	r31, 0x01	; 1
    78de:	68 94       	set
    78e0:	15 90       	lpm	r1, Z+
    78e2:	15 91       	lpm	r17, Z+
    78e4:	35 91       	lpm	r19, Z+
    78e6:	65 91       	lpm	r22, Z+
    78e8:	95 91       	lpm	r25, Z+
    78ea:	05 90       	lpm	r0, Z+
    78ec:	7f e2       	ldi	r23, 0x2F	; 47
    78ee:	73 95       	inc	r23
    78f0:	e1 18       	sub	r14, r1
    78f2:	f1 0a       	sbc	r15, r17
    78f4:	43 0b       	sbc	r20, r19
    78f6:	56 0b       	sbc	r21, r22
    78f8:	c9 0b       	sbc	r28, r25
    78fa:	d0 09       	sbc	r29, r0
    78fc:	c0 f7       	brcc	.-16     	; 0x78ee <__ftoa_engine+0x10a>
    78fe:	e1 0c       	add	r14, r1
    7900:	f1 1e       	adc	r15, r17
    7902:	43 1f       	adc	r20, r19
    7904:	56 1f       	adc	r21, r22
    7906:	c9 1f       	adc	r28, r25
    7908:	d0 1d       	adc	r29, r0
    790a:	7e f4       	brtc	.+30     	; 0x792a <__ftoa_engine+0x146>
    790c:	70 33       	cpi	r23, 0x30	; 48
    790e:	11 f4       	brne	.+4      	; 0x7914 <__ftoa_engine+0x130>
    7910:	8a 95       	dec	r24
    7912:	e6 cf       	rjmp	.-52     	; 0x78e0 <__ftoa_engine+0xfc>
    7914:	e8 94       	clt
    7916:	01 50       	subi	r16, 0x01	; 1
    7918:	30 f0       	brcs	.+12     	; 0x7926 <__ftoa_engine+0x142>
    791a:	08 0f       	add	r16, r24
    791c:	0a f4       	brpl	.+2      	; 0x7920 <__ftoa_engine+0x13c>
    791e:	00 27       	eor	r16, r16
    7920:	02 17       	cp	r16, r18
    7922:	08 f4       	brcc	.+2      	; 0x7926 <__ftoa_engine+0x142>
    7924:	20 2f       	mov	r18, r16
    7926:	23 95       	inc	r18
    7928:	02 2f       	mov	r16, r18
    792a:	7a 33       	cpi	r23, 0x3A	; 58
    792c:	28 f0       	brcs	.+10     	; 0x7938 <__ftoa_engine+0x154>
    792e:	79 e3       	ldi	r23, 0x39	; 57
    7930:	7d 93       	st	X+, r23
    7932:	2a 95       	dec	r18
    7934:	e9 f7       	brne	.-6      	; 0x7930 <__ftoa_engine+0x14c>
    7936:	10 c0       	rjmp	.+32     	; 0x7958 <__ftoa_engine+0x174>
    7938:	7d 93       	st	X+, r23
    793a:	2a 95       	dec	r18
    793c:	89 f6       	brne	.-94     	; 0x78e0 <__ftoa_engine+0xfc>
    793e:	06 94       	lsr	r0
    7940:	97 95       	ror	r25
    7942:	67 95       	ror	r22
    7944:	37 95       	ror	r19
    7946:	17 95       	ror	r17
    7948:	17 94       	ror	r1
    794a:	e1 18       	sub	r14, r1
    794c:	f1 0a       	sbc	r15, r17
    794e:	43 0b       	sbc	r20, r19
    7950:	56 0b       	sbc	r21, r22
    7952:	c9 0b       	sbc	r28, r25
    7954:	d0 09       	sbc	r29, r0
    7956:	98 f0       	brcs	.+38     	; 0x797e <__ftoa_engine+0x19a>
    7958:	23 95       	inc	r18
    795a:	7e 91       	ld	r23, -X
    795c:	73 95       	inc	r23
    795e:	7a 33       	cpi	r23, 0x3A	; 58
    7960:	08 f0       	brcs	.+2      	; 0x7964 <__ftoa_engine+0x180>
    7962:	70 e3       	ldi	r23, 0x30	; 48
    7964:	7c 93       	st	X, r23
    7966:	20 13       	cpse	r18, r16
    7968:	b8 f7       	brcc	.-18     	; 0x7958 <__ftoa_engine+0x174>
    796a:	7e 91       	ld	r23, -X
    796c:	70 61       	ori	r23, 0x10	; 16
    796e:	7d 93       	st	X+, r23
    7970:	30 f0       	brcs	.+12     	; 0x797e <__ftoa_engine+0x19a>
    7972:	83 95       	inc	r24
    7974:	71 e3       	ldi	r23, 0x31	; 49
    7976:	7d 93       	st	X+, r23
    7978:	70 e3       	ldi	r23, 0x30	; 48
    797a:	2a 95       	dec	r18
    797c:	e1 f7       	brne	.-8      	; 0x7976 <__ftoa_engine+0x192>
    797e:	11 24       	eor	r1, r1
    7980:	ef 90       	pop	r14
    7982:	ff 90       	pop	r15
    7984:	0f 91       	pop	r16
    7986:	1f 91       	pop	r17
    7988:	cf 91       	pop	r28
    798a:	df 91       	pop	r29
    798c:	99 27       	eor	r25, r25
    798e:	87 fd       	sbrc	r24, 7
    7990:	90 95       	com	r25
    7992:	08 95       	ret

00007994 <isspace>:
    7994:	91 11       	cpse	r25, r1
    7996:	0c 94 79 3e 	jmp	0x7cf2	; 0x7cf2 <__ctype_isfalse>
    799a:	80 32       	cpi	r24, 0x20	; 32
    799c:	19 f0       	breq	.+6      	; 0x79a4 <isspace+0x10>
    799e:	89 50       	subi	r24, 0x09	; 9
    79a0:	85 50       	subi	r24, 0x05	; 5
    79a2:	c8 f7       	brcc	.-14     	; 0x7996 <isspace+0x2>
    79a4:	08 95       	ret

000079a6 <tolower>:
    79a6:	91 11       	cpse	r25, r1
    79a8:	08 95       	ret
    79aa:	81 54       	subi	r24, 0x41	; 65
    79ac:	8a 51       	subi	r24, 0x1A	; 26
    79ae:	08 f4       	brcc	.+2      	; 0x79b2 <tolower+0xc>
    79b0:	80 5e       	subi	r24, 0xE0	; 224
    79b2:	85 5a       	subi	r24, 0xA5	; 165
    79b4:	08 95       	ret

000079b6 <strchr_P>:
    79b6:	fc 01       	movw	r30, r24
    79b8:	05 90       	lpm	r0, Z+
    79ba:	06 16       	cp	r0, r22
    79bc:	21 f0       	breq	.+8      	; 0x79c6 <strchr_P+0x10>
    79be:	00 20       	and	r0, r0
    79c0:	d9 f7       	brne	.-10     	; 0x79b8 <strchr_P+0x2>
    79c2:	c0 01       	movw	r24, r0
    79c4:	08 95       	ret
    79c6:	31 97       	sbiw	r30, 0x01	; 1
    79c8:	cf 01       	movw	r24, r30
    79ca:	08 95       	ret

000079cc <strnlen_P>:
    79cc:	fc 01       	movw	r30, r24
    79ce:	05 90       	lpm	r0, Z+
    79d0:	61 50       	subi	r22, 0x01	; 1
    79d2:	70 40       	sbci	r23, 0x00	; 0
    79d4:	01 10       	cpse	r0, r1
    79d6:	d8 f7       	brcc	.-10     	; 0x79ce <strnlen_P+0x2>
    79d8:	80 95       	com	r24
    79da:	90 95       	com	r25
    79dc:	8e 0f       	add	r24, r30
    79de:	9f 1f       	adc	r25, r31
    79e0:	08 95       	ret

000079e2 <memcmp>:
    79e2:	fb 01       	movw	r30, r22
    79e4:	dc 01       	movw	r26, r24
    79e6:	04 c0       	rjmp	.+8      	; 0x79f0 <memcmp+0xe>
    79e8:	8d 91       	ld	r24, X+
    79ea:	01 90       	ld	r0, Z+
    79ec:	80 19       	sub	r24, r0
    79ee:	21 f4       	brne	.+8      	; 0x79f8 <memcmp+0x16>
    79f0:	41 50       	subi	r20, 0x01	; 1
    79f2:	50 40       	sbci	r21, 0x00	; 0
    79f4:	c8 f7       	brcc	.-14     	; 0x79e8 <memcmp+0x6>
    79f6:	88 1b       	sub	r24, r24
    79f8:	99 0b       	sbc	r25, r25
    79fa:	08 95       	ret

000079fc <memcpy>:
    79fc:	fb 01       	movw	r30, r22
    79fe:	dc 01       	movw	r26, r24
    7a00:	02 c0       	rjmp	.+4      	; 0x7a06 <memcpy+0xa>
    7a02:	01 90       	ld	r0, Z+
    7a04:	0d 92       	st	X+, r0
    7a06:	41 50       	subi	r20, 0x01	; 1
    7a08:	50 40       	sbci	r21, 0x00	; 0
    7a0a:	d8 f7       	brcc	.-10     	; 0x7a02 <memcpy+0x6>
    7a0c:	08 95       	ret

00007a0e <strncmp>:
    7a0e:	fb 01       	movw	r30, r22
    7a10:	dc 01       	movw	r26, r24
    7a12:	41 50       	subi	r20, 0x01	; 1
    7a14:	50 40       	sbci	r21, 0x00	; 0
    7a16:	30 f0       	brcs	.+12     	; 0x7a24 <strncmp+0x16>
    7a18:	8d 91       	ld	r24, X+
    7a1a:	01 90       	ld	r0, Z+
    7a1c:	80 19       	sub	r24, r0
    7a1e:	19 f4       	brne	.+6      	; 0x7a26 <strncmp+0x18>
    7a20:	00 20       	and	r0, r0
    7a22:	b9 f7       	brne	.-18     	; 0x7a12 <strncmp+0x4>
    7a24:	88 1b       	sub	r24, r24
    7a26:	99 0b       	sbc	r25, r25
    7a28:	08 95       	ret

00007a2a <strnlen>:
    7a2a:	fc 01       	movw	r30, r24
    7a2c:	61 50       	subi	r22, 0x01	; 1
    7a2e:	70 40       	sbci	r23, 0x00	; 0
    7a30:	01 90       	ld	r0, Z+
    7a32:	01 10       	cpse	r0, r1
    7a34:	d8 f7       	brcc	.-10     	; 0x7a2c <strnlen+0x2>
    7a36:	80 95       	com	r24
    7a38:	90 95       	com	r25
    7a3a:	8e 0f       	add	r24, r30
    7a3c:	9f 1f       	adc	r25, r31
    7a3e:	08 95       	ret

00007a40 <fgetc>:
    7a40:	cf 93       	push	r28
    7a42:	df 93       	push	r29
    7a44:	ec 01       	movw	r28, r24
    7a46:	2b 81       	ldd	r18, Y+3	; 0x03
    7a48:	20 ff       	sbrs	r18, 0
    7a4a:	33 c0       	rjmp	.+102    	; 0x7ab2 <fgetc+0x72>
    7a4c:	26 ff       	sbrs	r18, 6
    7a4e:	0a c0       	rjmp	.+20     	; 0x7a64 <fgetc+0x24>
    7a50:	2f 7b       	andi	r18, 0xBF	; 191
    7a52:	2b 83       	std	Y+3, r18	; 0x03
    7a54:	8e 81       	ldd	r24, Y+6	; 0x06
    7a56:	9f 81       	ldd	r25, Y+7	; 0x07
    7a58:	01 96       	adiw	r24, 0x01	; 1
    7a5a:	9f 83       	std	Y+7, r25	; 0x07
    7a5c:	8e 83       	std	Y+6, r24	; 0x06
    7a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    7a60:	90 e0       	ldi	r25, 0x00	; 0
    7a62:	29 c0       	rjmp	.+82     	; 0x7ab6 <fgetc+0x76>
    7a64:	22 ff       	sbrs	r18, 2
    7a66:	0f c0       	rjmp	.+30     	; 0x7a86 <fgetc+0x46>
    7a68:	e8 81       	ld	r30, Y
    7a6a:	f9 81       	ldd	r31, Y+1	; 0x01
    7a6c:	80 81       	ld	r24, Z
    7a6e:	08 2e       	mov	r0, r24
    7a70:	00 0c       	add	r0, r0
    7a72:	99 0b       	sbc	r25, r25
    7a74:	00 97       	sbiw	r24, 0x00	; 0
    7a76:	19 f4       	brne	.+6      	; 0x7a7e <fgetc+0x3e>
    7a78:	20 62       	ori	r18, 0x20	; 32
    7a7a:	2b 83       	std	Y+3, r18	; 0x03
    7a7c:	1a c0       	rjmp	.+52     	; 0x7ab2 <fgetc+0x72>
    7a7e:	31 96       	adiw	r30, 0x01	; 1
    7a80:	f9 83       	std	Y+1, r31	; 0x01
    7a82:	e8 83       	st	Y, r30
    7a84:	0e c0       	rjmp	.+28     	; 0x7aa2 <fgetc+0x62>
    7a86:	ea 85       	ldd	r30, Y+10	; 0x0a
    7a88:	fb 85       	ldd	r31, Y+11	; 0x0b
    7a8a:	09 95       	icall
    7a8c:	97 ff       	sbrs	r25, 7
    7a8e:	09 c0       	rjmp	.+18     	; 0x7aa2 <fgetc+0x62>
    7a90:	2b 81       	ldd	r18, Y+3	; 0x03
    7a92:	01 96       	adiw	r24, 0x01	; 1
    7a94:	11 f0       	breq	.+4      	; 0x7a9a <fgetc+0x5a>
    7a96:	80 e2       	ldi	r24, 0x20	; 32
    7a98:	01 c0       	rjmp	.+2      	; 0x7a9c <fgetc+0x5c>
    7a9a:	80 e1       	ldi	r24, 0x10	; 16
    7a9c:	82 2b       	or	r24, r18
    7a9e:	8b 83       	std	Y+3, r24	; 0x03
    7aa0:	08 c0       	rjmp	.+16     	; 0x7ab2 <fgetc+0x72>
    7aa2:	2e 81       	ldd	r18, Y+6	; 0x06
    7aa4:	3f 81       	ldd	r19, Y+7	; 0x07
    7aa6:	2f 5f       	subi	r18, 0xFF	; 255
    7aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    7aaa:	3f 83       	std	Y+7, r19	; 0x07
    7aac:	2e 83       	std	Y+6, r18	; 0x06
    7aae:	99 27       	eor	r25, r25
    7ab0:	02 c0       	rjmp	.+4      	; 0x7ab6 <fgetc+0x76>
    7ab2:	8f ef       	ldi	r24, 0xFF	; 255
    7ab4:	9f ef       	ldi	r25, 0xFF	; 255
    7ab6:	df 91       	pop	r29
    7ab8:	cf 91       	pop	r28
    7aba:	08 95       	ret

00007abc <fputc>:
    7abc:	0f 93       	push	r16
    7abe:	1f 93       	push	r17
    7ac0:	cf 93       	push	r28
    7ac2:	df 93       	push	r29
    7ac4:	fb 01       	movw	r30, r22
    7ac6:	23 81       	ldd	r18, Z+3	; 0x03
    7ac8:	21 fd       	sbrc	r18, 1
    7aca:	03 c0       	rjmp	.+6      	; 0x7ad2 <fputc+0x16>
    7acc:	8f ef       	ldi	r24, 0xFF	; 255
    7ace:	9f ef       	ldi	r25, 0xFF	; 255
    7ad0:	28 c0       	rjmp	.+80     	; 0x7b22 <fputc+0x66>
    7ad2:	22 ff       	sbrs	r18, 2
    7ad4:	16 c0       	rjmp	.+44     	; 0x7b02 <fputc+0x46>
    7ad6:	46 81       	ldd	r20, Z+6	; 0x06
    7ad8:	57 81       	ldd	r21, Z+7	; 0x07
    7ada:	24 81       	ldd	r18, Z+4	; 0x04
    7adc:	35 81       	ldd	r19, Z+5	; 0x05
    7ade:	42 17       	cp	r20, r18
    7ae0:	53 07       	cpc	r21, r19
    7ae2:	44 f4       	brge	.+16     	; 0x7af4 <fputc+0x38>
    7ae4:	a0 81       	ld	r26, Z
    7ae6:	b1 81       	ldd	r27, Z+1	; 0x01
    7ae8:	9d 01       	movw	r18, r26
    7aea:	2f 5f       	subi	r18, 0xFF	; 255
    7aec:	3f 4f       	sbci	r19, 0xFF	; 255
    7aee:	31 83       	std	Z+1, r19	; 0x01
    7af0:	20 83       	st	Z, r18
    7af2:	8c 93       	st	X, r24
    7af4:	26 81       	ldd	r18, Z+6	; 0x06
    7af6:	37 81       	ldd	r19, Z+7	; 0x07
    7af8:	2f 5f       	subi	r18, 0xFF	; 255
    7afa:	3f 4f       	sbci	r19, 0xFF	; 255
    7afc:	37 83       	std	Z+7, r19	; 0x07
    7afe:	26 83       	std	Z+6, r18	; 0x06
    7b00:	10 c0       	rjmp	.+32     	; 0x7b22 <fputc+0x66>
    7b02:	eb 01       	movw	r28, r22
    7b04:	09 2f       	mov	r16, r25
    7b06:	18 2f       	mov	r17, r24
    7b08:	00 84       	ldd	r0, Z+8	; 0x08
    7b0a:	f1 85       	ldd	r31, Z+9	; 0x09
    7b0c:	e0 2d       	mov	r30, r0
    7b0e:	09 95       	icall
    7b10:	89 2b       	or	r24, r25
    7b12:	e1 f6       	brne	.-72     	; 0x7acc <fputc+0x10>
    7b14:	8e 81       	ldd	r24, Y+6	; 0x06
    7b16:	9f 81       	ldd	r25, Y+7	; 0x07
    7b18:	01 96       	adiw	r24, 0x01	; 1
    7b1a:	9f 83       	std	Y+7, r25	; 0x07
    7b1c:	8e 83       	std	Y+6, r24	; 0x06
    7b1e:	81 2f       	mov	r24, r17
    7b20:	90 2f       	mov	r25, r16
    7b22:	df 91       	pop	r29
    7b24:	cf 91       	pop	r28
    7b26:	1f 91       	pop	r17
    7b28:	0f 91       	pop	r16
    7b2a:	08 95       	ret

00007b2c <snprintf>:
    7b2c:	ae e0       	ldi	r26, 0x0E	; 14
    7b2e:	b0 e0       	ldi	r27, 0x00	; 0
    7b30:	ec e9       	ldi	r30, 0x9C	; 156
    7b32:	fd e3       	ldi	r31, 0x3D	; 61
    7b34:	0c 94 b5 3b 	jmp	0x776a	; 0x776a <__prologue_saves__+0x1c>
    7b38:	0d 89       	ldd	r16, Y+21	; 0x15
    7b3a:	1e 89       	ldd	r17, Y+22	; 0x16
    7b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    7b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    7b40:	26 e0       	ldi	r18, 0x06	; 6
    7b42:	2c 83       	std	Y+4, r18	; 0x04
    7b44:	1a 83       	std	Y+2, r17	; 0x02
    7b46:	09 83       	std	Y+1, r16	; 0x01
    7b48:	97 ff       	sbrs	r25, 7
    7b4a:	02 c0       	rjmp	.+4      	; 0x7b50 <snprintf+0x24>
    7b4c:	80 e0       	ldi	r24, 0x00	; 0
    7b4e:	90 e8       	ldi	r25, 0x80	; 128
    7b50:	01 97       	sbiw	r24, 0x01	; 1
    7b52:	9e 83       	std	Y+6, r25	; 0x06
    7b54:	8d 83       	std	Y+5, r24	; 0x05
    7b56:	ae 01       	movw	r20, r28
    7b58:	45 5e       	subi	r20, 0xE5	; 229
    7b5a:	5f 4f       	sbci	r21, 0xFF	; 255
    7b5c:	69 8d       	ldd	r22, Y+25	; 0x19
    7b5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7b60:	ce 01       	movw	r24, r28
    7b62:	01 96       	adiw	r24, 0x01	; 1
    7b64:	0e 94 bf 33 	call	0x677e	; 0x677e <vfprintf>
    7b68:	4d 81       	ldd	r20, Y+5	; 0x05
    7b6a:	5e 81       	ldd	r21, Y+6	; 0x06
    7b6c:	57 fd       	sbrc	r21, 7
    7b6e:	0a c0       	rjmp	.+20     	; 0x7b84 <snprintf+0x58>
    7b70:	2f 81       	ldd	r18, Y+7	; 0x07
    7b72:	38 85       	ldd	r19, Y+8	; 0x08
    7b74:	42 17       	cp	r20, r18
    7b76:	53 07       	cpc	r21, r19
    7b78:	0c f4       	brge	.+2      	; 0x7b7c <snprintf+0x50>
    7b7a:	9a 01       	movw	r18, r20
    7b7c:	f8 01       	movw	r30, r16
    7b7e:	e2 0f       	add	r30, r18
    7b80:	f3 1f       	adc	r31, r19
    7b82:	10 82       	st	Z, r1
    7b84:	2e 96       	adiw	r28, 0x0e	; 14
    7b86:	e4 e0       	ldi	r30, 0x04	; 4
    7b88:	0c 94 d1 3b 	jmp	0x77a2	; 0x77a2 <__epilogue_restores__+0x1c>

00007b8c <sprintf>:
    7b8c:	ae e0       	ldi	r26, 0x0E	; 14
    7b8e:	b0 e0       	ldi	r27, 0x00	; 0
    7b90:	ec ec       	ldi	r30, 0xCC	; 204
    7b92:	fd e3       	ldi	r31, 0x3D	; 61
    7b94:	0c 94 b5 3b 	jmp	0x776a	; 0x776a <__prologue_saves__+0x1c>
    7b98:	0d 89       	ldd	r16, Y+21	; 0x15
    7b9a:	1e 89       	ldd	r17, Y+22	; 0x16
    7b9c:	86 e0       	ldi	r24, 0x06	; 6
    7b9e:	8c 83       	std	Y+4, r24	; 0x04
    7ba0:	1a 83       	std	Y+2, r17	; 0x02
    7ba2:	09 83       	std	Y+1, r16	; 0x01
    7ba4:	8f ef       	ldi	r24, 0xFF	; 255
    7ba6:	9f e7       	ldi	r25, 0x7F	; 127
    7ba8:	9e 83       	std	Y+6, r25	; 0x06
    7baa:	8d 83       	std	Y+5, r24	; 0x05
    7bac:	ae 01       	movw	r20, r28
    7bae:	47 5e       	subi	r20, 0xE7	; 231
    7bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    7bb2:	6f 89       	ldd	r22, Y+23	; 0x17
    7bb4:	78 8d       	ldd	r23, Y+24	; 0x18
    7bb6:	ce 01       	movw	r24, r28
    7bb8:	01 96       	adiw	r24, 0x01	; 1
    7bba:	0e 94 bf 33 	call	0x677e	; 0x677e <vfprintf>
    7bbe:	2f 81       	ldd	r18, Y+7	; 0x07
    7bc0:	38 85       	ldd	r19, Y+8	; 0x08
    7bc2:	f8 01       	movw	r30, r16
    7bc4:	e2 0f       	add	r30, r18
    7bc6:	f3 1f       	adc	r31, r19
    7bc8:	10 82       	st	Z, r1
    7bca:	2e 96       	adiw	r28, 0x0e	; 14
    7bcc:	e4 e0       	ldi	r30, 0x04	; 4
    7bce:	0c 94 d1 3b 	jmp	0x77a2	; 0x77a2 <__epilogue_restores__+0x1c>

00007bd2 <sscanf>:
    7bd2:	ae e0       	ldi	r26, 0x0E	; 14
    7bd4:	b0 e0       	ldi	r27, 0x00	; 0
    7bd6:	ef ee       	ldi	r30, 0xEF	; 239
    7bd8:	fd e3       	ldi	r31, 0x3D	; 61
    7bda:	0c 94 b7 3b 	jmp	0x776e	; 0x776e <__prologue_saves__+0x20>
    7bde:	85 e0       	ldi	r24, 0x05	; 5
    7be0:	8c 83       	std	Y+4, r24	; 0x04
    7be2:	8b 89       	ldd	r24, Y+19	; 0x13
    7be4:	9c 89       	ldd	r25, Y+20	; 0x14
    7be6:	9a 83       	std	Y+2, r25	; 0x02
    7be8:	89 83       	std	Y+1, r24	; 0x01
    7bea:	ae 01       	movw	r20, r28
    7bec:	49 5e       	subi	r20, 0xE9	; 233
    7bee:	5f 4f       	sbci	r21, 0xFF	; 255
    7bf0:	6d 89       	ldd	r22, Y+21	; 0x15
    7bf2:	7e 89       	ldd	r23, Y+22	; 0x16
    7bf4:	ce 01       	movw	r24, r28
    7bf6:	01 96       	adiw	r24, 0x01	; 1
    7bf8:	0e 94 00 3a 	call	0x7400	; 0x7400 <vfscanf>
    7bfc:	2e 96       	adiw	r28, 0x0e	; 14
    7bfe:	e2 e0       	ldi	r30, 0x02	; 2
    7c00:	0c 94 d3 3b 	jmp	0x77a6	; 0x77a6 <__epilogue_restores__+0x20>

00007c04 <ungetc>:
    7c04:	fb 01       	movw	r30, r22
    7c06:	23 81       	ldd	r18, Z+3	; 0x03
    7c08:	20 ff       	sbrs	r18, 0
    7c0a:	12 c0       	rjmp	.+36     	; 0x7c30 <ungetc+0x2c>
    7c0c:	26 fd       	sbrc	r18, 6
    7c0e:	10 c0       	rjmp	.+32     	; 0x7c30 <ungetc+0x2c>
    7c10:	8f 3f       	cpi	r24, 0xFF	; 255
    7c12:	3f ef       	ldi	r19, 0xFF	; 255
    7c14:	93 07       	cpc	r25, r19
    7c16:	61 f0       	breq	.+24     	; 0x7c30 <ungetc+0x2c>
    7c18:	82 83       	std	Z+2, r24	; 0x02
    7c1a:	2f 7d       	andi	r18, 0xDF	; 223
    7c1c:	20 64       	ori	r18, 0x40	; 64
    7c1e:	23 83       	std	Z+3, r18	; 0x03
    7c20:	26 81       	ldd	r18, Z+6	; 0x06
    7c22:	37 81       	ldd	r19, Z+7	; 0x07
    7c24:	21 50       	subi	r18, 0x01	; 1
    7c26:	31 09       	sbc	r19, r1
    7c28:	37 83       	std	Z+7, r19	; 0x07
    7c2a:	26 83       	std	Z+6, r18	; 0x06
    7c2c:	99 27       	eor	r25, r25
    7c2e:	08 95       	ret
    7c30:	8f ef       	ldi	r24, 0xFF	; 255
    7c32:	9f ef       	ldi	r25, 0xFF	; 255
    7c34:	08 95       	ret

00007c36 <__ultoa_invert>:
    7c36:	fa 01       	movw	r30, r20
    7c38:	aa 27       	eor	r26, r26
    7c3a:	28 30       	cpi	r18, 0x08	; 8
    7c3c:	51 f1       	breq	.+84     	; 0x7c92 <__ultoa_invert+0x5c>
    7c3e:	20 31       	cpi	r18, 0x10	; 16
    7c40:	81 f1       	breq	.+96     	; 0x7ca2 <__ultoa_invert+0x6c>
    7c42:	e8 94       	clt
    7c44:	6f 93       	push	r22
    7c46:	6e 7f       	andi	r22, 0xFE	; 254
    7c48:	6e 5f       	subi	r22, 0xFE	; 254
    7c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    7c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    7c50:	af 4f       	sbci	r26, 0xFF	; 255
    7c52:	b1 e0       	ldi	r27, 0x01	; 1
    7c54:	3e d0       	rcall	.+124    	; 0x7cd2 <__ultoa_invert+0x9c>
    7c56:	b4 e0       	ldi	r27, 0x04	; 4
    7c58:	3c d0       	rcall	.+120    	; 0x7cd2 <__ultoa_invert+0x9c>
    7c5a:	67 0f       	add	r22, r23
    7c5c:	78 1f       	adc	r23, r24
    7c5e:	89 1f       	adc	r24, r25
    7c60:	9a 1f       	adc	r25, r26
    7c62:	a1 1d       	adc	r26, r1
    7c64:	68 0f       	add	r22, r24
    7c66:	79 1f       	adc	r23, r25
    7c68:	8a 1f       	adc	r24, r26
    7c6a:	91 1d       	adc	r25, r1
    7c6c:	a1 1d       	adc	r26, r1
    7c6e:	6a 0f       	add	r22, r26
    7c70:	71 1d       	adc	r23, r1
    7c72:	81 1d       	adc	r24, r1
    7c74:	91 1d       	adc	r25, r1
    7c76:	a1 1d       	adc	r26, r1
    7c78:	20 d0       	rcall	.+64     	; 0x7cba <__ultoa_invert+0x84>
    7c7a:	09 f4       	brne	.+2      	; 0x7c7e <__ultoa_invert+0x48>
    7c7c:	68 94       	set
    7c7e:	3f 91       	pop	r19
    7c80:	2a e0       	ldi	r18, 0x0A	; 10
    7c82:	26 9f       	mul	r18, r22
    7c84:	11 24       	eor	r1, r1
    7c86:	30 19       	sub	r19, r0
    7c88:	30 5d       	subi	r19, 0xD0	; 208
    7c8a:	31 93       	st	Z+, r19
    7c8c:	de f6       	brtc	.-74     	; 0x7c44 <__ultoa_invert+0xe>
    7c8e:	cf 01       	movw	r24, r30
    7c90:	08 95       	ret
    7c92:	46 2f       	mov	r20, r22
    7c94:	47 70       	andi	r20, 0x07	; 7
    7c96:	40 5d       	subi	r20, 0xD0	; 208
    7c98:	41 93       	st	Z+, r20
    7c9a:	b3 e0       	ldi	r27, 0x03	; 3
    7c9c:	0f d0       	rcall	.+30     	; 0x7cbc <__ultoa_invert+0x86>
    7c9e:	c9 f7       	brne	.-14     	; 0x7c92 <__ultoa_invert+0x5c>
    7ca0:	f6 cf       	rjmp	.-20     	; 0x7c8e <__ultoa_invert+0x58>
    7ca2:	46 2f       	mov	r20, r22
    7ca4:	4f 70       	andi	r20, 0x0F	; 15
    7ca6:	40 5d       	subi	r20, 0xD0	; 208
    7ca8:	4a 33       	cpi	r20, 0x3A	; 58
    7caa:	18 f0       	brcs	.+6      	; 0x7cb2 <__ultoa_invert+0x7c>
    7cac:	49 5d       	subi	r20, 0xD9	; 217
    7cae:	31 fd       	sbrc	r19, 1
    7cb0:	40 52       	subi	r20, 0x20	; 32
    7cb2:	41 93       	st	Z+, r20
    7cb4:	02 d0       	rcall	.+4      	; 0x7cba <__ultoa_invert+0x84>
    7cb6:	a9 f7       	brne	.-22     	; 0x7ca2 <__ultoa_invert+0x6c>
    7cb8:	ea cf       	rjmp	.-44     	; 0x7c8e <__ultoa_invert+0x58>
    7cba:	b4 e0       	ldi	r27, 0x04	; 4
    7cbc:	a6 95       	lsr	r26
    7cbe:	97 95       	ror	r25
    7cc0:	87 95       	ror	r24
    7cc2:	77 95       	ror	r23
    7cc4:	67 95       	ror	r22
    7cc6:	ba 95       	dec	r27
    7cc8:	c9 f7       	brne	.-14     	; 0x7cbc <__ultoa_invert+0x86>
    7cca:	00 97       	sbiw	r24, 0x00	; 0
    7ccc:	61 05       	cpc	r22, r1
    7cce:	71 05       	cpc	r23, r1
    7cd0:	08 95       	ret
    7cd2:	9b 01       	movw	r18, r22
    7cd4:	ac 01       	movw	r20, r24
    7cd6:	0a 2e       	mov	r0, r26
    7cd8:	06 94       	lsr	r0
    7cda:	57 95       	ror	r21
    7cdc:	47 95       	ror	r20
    7cde:	37 95       	ror	r19
    7ce0:	27 95       	ror	r18
    7ce2:	ba 95       	dec	r27
    7ce4:	c9 f7       	brne	.-14     	; 0x7cd8 <__ultoa_invert+0xa2>
    7ce6:	62 0f       	add	r22, r18
    7ce8:	73 1f       	adc	r23, r19
    7cea:	84 1f       	adc	r24, r20
    7cec:	95 1f       	adc	r25, r21
    7cee:	a0 1d       	adc	r26, r0
    7cf0:	08 95       	ret

00007cf2 <__ctype_isfalse>:
    7cf2:	99 27       	eor	r25, r25
    7cf4:	88 27       	eor	r24, r24

00007cf6 <__ctype_istrue>:
    7cf6:	08 95       	ret

00007cf8 <eeprom_read_byte>:
    7cf8:	f9 99       	sbic	0x1f, 1	; 31
    7cfa:	fe cf       	rjmp	.-4      	; 0x7cf8 <eeprom_read_byte>
    7cfc:	92 bd       	out	0x22, r25	; 34
    7cfe:	81 bd       	out	0x21, r24	; 33
    7d00:	f8 9a       	sbi	0x1f, 0	; 31
    7d02:	99 27       	eor	r25, r25
    7d04:	80 b5       	in	r24, 0x20	; 32
    7d06:	08 95       	ret

00007d08 <eeprom_write_byte>:
    7d08:	26 2f       	mov	r18, r22

00007d0a <eeprom_write_r18>:
    7d0a:	f9 99       	sbic	0x1f, 1	; 31
    7d0c:	fe cf       	rjmp	.-4      	; 0x7d0a <eeprom_write_r18>
    7d0e:	1f ba       	out	0x1f, r1	; 31
    7d10:	92 bd       	out	0x22, r25	; 34
    7d12:	81 bd       	out	0x21, r24	; 33
    7d14:	20 bd       	out	0x20, r18	; 32
    7d16:	0f b6       	in	r0, 0x3f	; 63
    7d18:	f8 94       	cli
    7d1a:	fa 9a       	sbi	0x1f, 2	; 31
    7d1c:	f9 9a       	sbi	0x1f, 1	; 31
    7d1e:	0f be       	out	0x3f, r0	; 63
    7d20:	01 96       	adiw	r24, 0x01	; 1
    7d22:	08 95       	ret

00007d24 <_exit>:
    7d24:	f8 94       	cli

00007d26 <__stop_program>:
    7d26:	ff cf       	rjmp	.-2      	; 0x7d26 <__stop_program>
