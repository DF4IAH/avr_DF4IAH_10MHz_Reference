
DF4IAH_10MHz_Reference_Appl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00007cc4  00007d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007cc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000710  00800116  00800116  00007d6e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007d6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  00007e10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a343  00000000  00000000  00008330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021fa  00000000  00000000  00012673  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004ec4  00000000  00000000  0001486d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010fc  00000000  00000000  00019734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e8d  00000000  00000000  0001a830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006ae8  00000000  00000000  0001d6bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  000241a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__ctors_end>
       4:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__vector_1>
       8:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
       c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      10:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      14:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      18:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__vector_6>
      1c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      20:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      24:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      28:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__vector_10>
      2c:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__vector_11>
      30:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      34:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      38:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      3c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      40:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_16>
      44:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      48:	0c 94 7a 26 	jmp	0x4cf4	; 0x4cf4 <__vector_18>
      4c:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__vector_19>
      50:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <__vector_20>
      54:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_21>
      58:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      5c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      60:	0c 94 cf 28 	jmp	0x519e	; 0x519e <__vector_24>
      64:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__bad_interrupt>
      68:	99 11       	cpse	r25, r9
      6a:	a7 11       	cpse	r26, r7
      6c:	b5 11       	cpse	r27, r5
      6e:	c3 11       	cpse	r28, r3
      70:	d1 11       	cpse	r29, r1
      72:	df 11       	cpse	r29, r15
      74:	ed 11       	cpse	r30, r13
      76:	fb 11       	cpse	r31, r11
      78:	09 12       	cpse	r0, r25
      7a:	17 12       	cpse	r1, r23
      7c:	25 12       	cpse	r2, r21
      7e:	33 12       	cpse	r3, r19
      80:	41 12       	cpse	r4, r17
      82:	f9 28       	or	r15, r9
      84:	a8 29       	or	r26, r8
      86:	a8 29       	or	r26, r8
      88:	a8 29       	or	r26, r8
      8a:	a8 29       	or	r26, r8
      8c:	a8 29       	or	r26, r8
      8e:	a8 29       	or	r26, r8
      90:	a8 29       	or	r26, r8
      92:	ff 28       	or	r15, r15
      94:	a8 29       	or	r26, r8
      96:	a8 29       	or	r26, r8
      98:	a8 29       	or	r26, r8
      9a:	a8 29       	or	r26, r8
      9c:	a8 29       	or	r26, r8
      9e:	a8 29       	or	r26, r8
      a0:	a8 29       	or	r26, r8
      a2:	0f 29       	or	r16, r15
      a4:	a8 29       	or	r26, r8
      a6:	a8 29       	or	r26, r8
      a8:	a8 29       	or	r26, r8
      aa:	a8 29       	or	r26, r8
      ac:	a8 29       	or	r26, r8
      ae:	a8 29       	or	r26, r8
      b0:	a8 29       	or	r26, r8
      b2:	3a 29       	or	r19, r10
      b4:	a8 29       	or	r26, r8
      b6:	a8 29       	or	r26, r8
      b8:	a8 29       	or	r26, r8
      ba:	a8 29       	or	r26, r8
      bc:	a8 29       	or	r26, r8
      be:	a8 29       	or	r26, r8
      c0:	a8 29       	or	r26, r8
      c2:	52 29       	or	r21, r2
      c4:	a8 29       	or	r26, r8
      c6:	a8 29       	or	r26, r8
      c8:	a8 29       	or	r26, r8
      ca:	a8 29       	or	r26, r8
      cc:	a8 29       	or	r26, r8
      ce:	a8 29       	or	r26, r8
      d0:	a8 29       	or	r26, r8
      d2:	75 29       	or	r23, r5
      d4:	a8 29       	or	r26, r8
      d6:	a8 29       	or	r26, r8
      d8:	a8 29       	or	r26, r8
      da:	a8 29       	or	r26, r8
      dc:	a8 29       	or	r26, r8
      de:	a8 29       	or	r26, r8
      e0:	a8 29       	or	r26, r8
      e2:	a8 29       	or	r26, r8
      e4:	a8 29       	or	r26, r8
      e6:	a8 29       	or	r26, r8
      e8:	a8 29       	or	r26, r8
      ea:	a8 29       	or	r26, r8
      ec:	a8 29       	or	r26, r8
      ee:	a8 29       	or	r26, r8
      f0:	a8 29       	or	r26, r8
      f2:	0f 29       	or	r16, r15
      f4:	a8 29       	or	r26, r8
      f6:	a8 29       	or	r26, r8
      f8:	a8 29       	or	r26, r8
      fa:	a8 29       	or	r26, r8
      fc:	a8 29       	or	r26, r8
      fe:	a8 29       	or	r26, r8
     100:	a8 29       	or	r26, r8
     102:	3a 29       	or	r19, r10
     104:	a8 29       	or	r26, r8
     106:	a8 29       	or	r26, r8
     108:	a8 29       	or	r26, r8
     10a:	a8 29       	or	r26, r8
     10c:	a8 29       	or	r26, r8
     10e:	a8 29       	or	r26, r8
     110:	a8 29       	or	r26, r8
     112:	7a 29       	or	r23, r10
     114:	a8 29       	or	r26, r8
     116:	a8 29       	or	r26, r8
     118:	a8 29       	or	r26, r8
     11a:	a8 29       	or	r26, r8
     11c:	a8 29       	or	r26, r8
     11e:	a8 29       	or	r26, r8
     120:	a8 29       	or	r26, r8
     122:	91 29       	or	r25, r1
     124:	07 63       	ori	r16, 0x37	; 55
     126:	42 36       	cpi	r20, 0x62	; 98
     128:	b7 9b       	sbis	0x16, 7	; 22
     12a:	d8 a7       	std	Y+40, r29	; 0x28
     12c:	1a 39       	cpi	r17, 0x9A	; 154
     12e:	68 56       	subi	r22, 0x68	; 104
     130:	18 ae       	std	Y+56, r1	; 0x38
     132:	ba ab       	std	Y+50, r27	; 0x32
     134:	55 8c       	ldd	r5, Z+29	; 0x1d
     136:	1d 3c       	cpi	r17, 0xCD	; 205
     138:	b7 cc       	rjmp	.-1682   	; 0xfffffaa8 <__eeprom_end+0xff7efaa8>
     13a:	57 63       	ori	r21, 0x37	; 55
     13c:	bd 6d       	ori	r27, 0xDD	; 221
     13e:	ed fd       	.word	0xfded	; ????
     140:	75 3e       	cpi	r23, 0xE5	; 229
     142:	f6 17       	cp	r31, r22
     144:	72 31       	cpi	r23, 0x12	; 18
     146:	bf 00       	.word	0x00bf	; ????
     148:	00 00       	nop
     14a:	80 3f       	cpi	r24, 0xF0	; 240
     14c:	08 00       	.word	0x0008	; ????
     14e:	00 00       	nop
     150:	be 92       	st	-X, r11
     152:	24 49       	sbci	r18, 0x94	; 148
     154:	12 3e       	cpi	r17, 0xE2	; 226
     156:	ab aa       	std	Y+51, r10	; 0x33
     158:	aa 2a       	or	r10, r26
     15a:	be cd       	rjmp	.-1156   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     15c:	cc cc       	rjmp	.-1640   	; 0xfffffaf6 <__eeprom_end+0xff7efaf6>
     15e:	4c 3e       	cpi	r20, 0xEC	; 236
     160:	00 00       	nop
     162:	00 80       	ld	r0, Z
     164:	be ab       	std	Y+54, r27	; 0x36
     166:	aa aa       	std	Y+50, r10	; 0x32
     168:	aa 3e       	cpi	r26, 0xEA	; 234
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	bf 00       	.word	0x00bf	; ????
     170:	00 00       	nop
     172:	80 3f       	cpi	r24, 0xF0	; 240
     174:	00 00       	nop
     176:	00 00       	nop
     178:	00 08       	sbc	r0, r0
     17a:	41 78       	andi	r20, 0x81	; 129
     17c:	d3 bb       	out	0x13, r29	; 19
     17e:	43 87       	std	Z+11, r20	; 0x0b
     180:	d1 13       	cpse	r29, r17
     182:	3d 19       	sub	r19, r13
     184:	0e 3c       	cpi	r16, 0xCE	; 206
     186:	c3 bd       	out	0x23, r28	; 35
     188:	42 82       	std	Z+2, r4	; 0x02
     18a:	ad 2b       	or	r26, r29
     18c:	3e 68       	ori	r19, 0x8E	; 142
     18e:	ec 82       	std	Y+4, r14	; 0x04
     190:	76 be       	out	0x36, r7	; 54
     192:	d9 8f       	std	Y+25, r29	; 0x19
     194:	e1 a9       	ldd	r30, Z+49	; 0x31
     196:	3e 4c       	sbci	r19, 0xCE	; 206
     198:	80 ef       	ldi	r24, 0xF0	; 240
     19a:	ff be       	out	0x3f, r15	; 63
     19c:	01 c4       	rjmp	.+2050   	; 0x9a0 <PM_FORMAT_VERSION+0xe>
     19e:	ff 7f       	andi	r31, 0xFF	; 255
     1a0:	3f 00       	.word	0x003f	; ????
     1a2:	00 00       	nop
	...

000001a6 <__trampolines_end>:
     1a6:	6e 61       	ori	r22, 0x1E	; 30
     1a8:	6e 00       	.word	0x006e	; ????

000001aa <__c.2240>:
     1aa:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ba:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1ca:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1da:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1ea:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1fa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     20a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     21a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     22a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     23a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     24a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     25a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     26a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     27a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     28a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     29a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002a8 <PM_PARSE_NMEA_MSG41>:
     2a8:	24 47 4c 47 53 56 2c 25 2a 64 2c 31 2c 25 64 2c     $GLGSV,%*d,1,%d,
	...

000002b9 <PM_PARSE_NMEA_MSG31>:
     2b9:	24 47 50 47 53 56 2c 25 2a 64 2c 31 2c 25 64 2c     $GPGSV,%*d,1,%d,
	...

000002ca <PM_PARSE_NMEA_MSG21>:
     2ca:	24 47 50 52 4d 43 2c 25 6c 64 2e 25 64 2c 25 2a     $GPRMC,%ld.%d,%*
     2da:	63 2c 25 66 2c 25 63 2c 25 66 2c 25 63 2c 25 2a     c,%f,%c,%f,%c,%*
     2ea:	66 2c 25 2a 66 2c 25 6c 64 2c 2c 2c 25 2a 63 2a     f,%*f,%ld,,,%*c*
     2fa:	25 64 00                                            %d.

000002fd <PM_PARSE_NMEA_MSG12>:
     2fd:	25 66 2c 25 66 2c 25 66 2a 25 64 00                 %f,%f,%f*%d.

00000309 <PM_PARSE_NMEA_MSG11>:
     309:	24 47 50 47 53 41 2c 25 2a 63 2c 25 64 2c 00        $GPGSA,%*c,%d,.

00000318 <PM_PARSE_NMEA_MSG01>:
     318:	24 47 50 47 47 41 2c 25 6c 64 2e 25 64 2c 25 66     $GPGGA,%ld.%d,%f
     328:	2c 25 63 2c 25 66 2c 25 63 2c 25 64 2c 25 64 2c     ,%c,%f,%c,%d,%d,
     338:	25 66 2c 25 66 2c 25 2a 63 2c 25 2a 66 2c 25 2a     %f,%f,%*c,%*f,%*
     348:	63 2c 25 2a 64 2c 25 2a 64 2a 25 64 00              c,%*d,%*d*%d.

00000355 <PM_FORMAT_SET_BAUD>:
     355:	43 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e 20 62 61     Communication ba
     365:	75 64 20 72 61 74 65 20 73 65 74 20 74 6f 20 25     ud rate set to %
     375:	35 75 20 62 61 75 64 2e 0a 00                       5u baud...

0000037f <PM_FORMAT_GPIB_SCM_IDN>:
     37f:	44 46 34 49 41 48 2c 25 73 2c 25 30 35 75 2c 56     DF4IAH,%s,%05u,V
     38f:	32 30 25 30 33 75 25 30 33 75 2e 00                 20%03u%03u..

0000039b <PM_FORMAT_SC02>:
     39b:	23 53 43 30 32 3a 20 73 3d 30 78 25 30 32 78 2c     #SC02: s=0x%02x,
     3ab:	64 53 3d 25 75 2c 69 50 3d 25 75 0a 00              dS=%u,iP=%u..

000003b8 <PM_FORMAT_SC01>:
     3b8:	23 53 43 30 31 3a 20 53 74 61 63 6b 2d 43 68 65     #SC01: Stack-Che
     3c8:	63 6b 3a 20 6d 75 6e 67 2d 77 61 6c 6c 20 61 64     ck: mung-wall ad
     3d8:	64 72 65 73 73 3a 20 30 78 25 30 34 78 2c 20 6c     dress: 0x%04x, l
     3e8:	6f 77 65 73 74 2d 73 74 61 63 6b 3a 20 30 78 25     owest-stack: 0x%
     3f8:	30 34 78 0a 00                                      04x..

000003fd <PM_FORMAT_LC23>:
     3fd:	25 63 25 30 37 2e 33 66 20 25 63 25 35 2e 33 66     %c%07.3f %c%5.3f
     40d:	56 20 00                                            V .

00000410 <PM_FORMAT_LC22>:
     410:	25 63 25 31 75 20 25 63 25 31 75 20 25 33 2e 31     %c%1u %c%1u %3.1
     420:	66 20 25 63 25 30 32 75 25 63 25 30 32 75 20 00     f %c%02u%c%02u .

00000430 <PM_FORMAT_LC21>:
     430:	25 30 32 75 2e 25 30 32 75 2e 20 55 25 30 32 75     %02u.%02u. U%02u
     440:	3a 25 30 32 75 3a 25 30 32 75 20 00                 :%02u:%02u .

0000044c <PM_FORMAT_LC12>:
     44c:	62 20 2d 2d 2d 2e 2d 2d 2d 20 25 63 25 31 58 20     b ---.--- %c%1X 
     45c:	25 63 25 30 32 75 20 00                             %c%02u .

00000464 <PM_FORMAT_LC11>:
     464:	25 63 25 20 30 38 2e 33 66 20 25 63 25 31 58 20     %c% 08.3f %c%1X 
     474:	25 63 25 30 32 75 20 00                             %c%02u .

0000047c <PM_FORMAT_LC02>:
     47c:	31 30 4d 48 7a 52 65 66 4f 73 63 20 56 32 78 31     10MHzRefOsc V2x1
	...

0000048d <PM_FORMAT_LC01>:
     48d:	2b 3d 3d 3d 20 44 46 34 49 41 48 20 3d 3d 3d 2b     +=== DF4IAH ===+
	...

0000049e <PM_FORMAT_IA12>:
     49e:	23 49 41 31 32 3a 20 50 48 41 53 45 20 66 61 73     #IA12: PHASE fas
     4ae:	74 50 77 6d 53 69 6e 67 6c 65 44 69 66 66 5f 73     tPwmSingleDiff_s
     4be:	74 65 70 73 20 3d 20 25 2b 30 33 2e 33 66 0a 00     teps = %+03.3f..

000004ce <PM_FORMAT_IA11>:
     4ce:	23 49 41 31 31 3a 20 50 48 41 53 45 20 70 68 61     #IA11: PHASE pha
     4de:	73 65 45 72 72 20 20 3d 20 25 30 33 2e 33 66 c2     seErr  = %03.3f.
     4ee:	b0 2c 20 09 20 70 68 61 73 65 53 74 65 70 73 46     ., . phaseStepsF
     4fe:	72 65 71 75 65 6e 63 79 20 3d 20 25 2b 30 33 2e     requency = %+03.
     50e:	33 66 2c 20 09 70 68 61 73 65 53 74 65 70 73 50     3f, .phaseStepsP
     51e:	68 61 73 65 20 3d 20 25 2b 30 33 2e 33 66 0a 00     hase = %+03.3f..

0000052e <PM_FORMAT_IA03>:
     52e:	23 49 41 30 33 3a 20 51 52 47 20 20 20 6e 65 77     #IA03: QRG   new
     53e:	50 77 6d 56 61 6c 20 3d 20 25 30 33 2e 33 66 2c     PwmVal = %03.3f,
     54e:	20 09 70 77 6d 43 6f 72 53 74 65 70 73 20 20 20      .pwmCorSteps   
     55e:	20 20 20 20 20 20 3d 20 25 2b 30 33 2e 33 66 0a           = %+03.3f.
	...

0000056f <PM_FORMAT_IA02>:
     56f:	23 49 41 30 32 3a 20 43 6c 6f 63 6b 20 6c 6f 63     #IA02: Clock loc
     57f:	61 6c 4d 65 61 6e 46 6c 6f 61 74 43 6c 6f 63 6b     alMeanFloatClock
     58f:	44 69 66 66 20 3d 20 25 2b 30 33 2e 33 66 48 7a     Diff = %+03.3fHz
     59f:	20 40 32 30 4d 48 7a 2c 20 09 71 72 67 44 65 76      @20MHz, .qrgDev
     5af:	5f 48 7a 20 3d 20 25 2b 30 33 2e 33 66 48 7a 20     _Hz = %+03.3fHz 
     5bf:	40 31 30 4d 48 7a 2c 20 09 70 70 6d 20 3d 20 25     @10MHz, .ppm = %
     5cf:	2b 30 32 2e 36 66 0a 00                             +02.6f..

000005d7 <PM_FORMAT_IA01>:
     5d7:	23 49 41 30 31 3a 20 43 6c 6f 63 6b 20 69 6e 74     #IA01: Clock int
     5e7:	32 30 4d 48 7a 43 6c 6f 63 6b 44 69 66 66 20 20     20MHzClockDiff  
     5f7:	20 20 20 20 20 3d 20 20 20 25 2b 30 34 6c 69 48          =   %+04liH
     607:	7a 20 40 32 30 4d 48 7a 0a 00                       z @20MHz..

00000611 <PM_FORMAT_ID02>:
     611:	23 49 44 30 32 3a 20 2b 2f 2d 20 4b 45 59 20 09     #ID02: +/- KEY .
     621:	6d 61 69 6e 50 77 6d 54 65 72 6d 69 6e 61 6c 41     mainPwmTerminalA
     631:	64 6a 20 3d 20 25 66 2c 20 09 6c 6f 63 61 6c 46     dj = %f, .localF
     641:	61 73 74 50 77 6d 56 61 6c 4e 65 78 74 20 3d 20     astPwmValNext = 
     651:	25 30 33 75 20 2b 20 6c 6f 63 61 6c 46 61 73 74     %03u + localFast
     661:	50 77 6d 53 75 62 43 6d 70 4e 65 78 74 20 3d 20     PwmSubCmpNext = 
     671:	25 30 33 75 0a 00                                   %03u..

00000677 <PM_FORMAT_ID01>:
     677:	23 49 44 30 31 3a 20 2b 2f 2d 20 4b 45 59 20 09     #ID01: +/- KEY .
     687:	6d 61 69 6e 50 77 6d 54 65 72 6d 69 6e 61 6c 41     mainPwmTerminalA
     697:	64 6a 20 3d 20 25 66 2c 20 09 70 75 6c 6c 50 77     dj = %f, .pullPw
     6a7:	6d 56 61 6c 42 65 66 6f 72 65 20 20 20 20 3d 20     mValBefore    = 
     6b7:	25 30 33 75 20 2b 20 66 61 73 74 50 77 6d 53 75     %03u + fastPwmSu
     6c7:	62 43 6d 70 42 65 66 6f 72 65 20 20 20 20 3d 20     bCmpBefore    = 
     6d7:	25 30 33 75 0a 00                                   %03u..

000006dd <PM_FORMAT_TA14>:
     6dd:	23 54 41 31 34 3a 20 6d 61 69 6e 52 65 66 43 6c     #TA14: mainRefCl
     6ed:	6b 53 74 61 74 65 20 3d 20 30 78 25 31 58 0a 00     kState = 0x%1X..

000006fd <PM_FORMAT_TA13>:
     6fd:	23 54 41 31 33 3a 20 50 57 4d 20 3d 20 25 30 33     #TA13: PWM = %03
     70d:	75 2c 20 09 53 75 62 2d 50 57 4d 20 3d 20 25 30     u, .Sub-PWM = %0
     71d:	33 75 0a 00                                         3u..

00000721 <PM_FORMAT_TA12>:
     721:	23 54 41 31 32 3a 20 70 70 73 53 74 61 6d 70 43     #TA12: ppsStampC
     731:	74 72 31 6d 73 20 20 3d 20 25 30 39 6c 75 2c 20     tr1ms  = %09lu, 
     741:	09 70 70 73 53 74 61 6d 70 49 43 52 31 20 20 20     .ppsStampICR1   
     751:	3d 20 25 30 35 75 2c 20 09 70 70 73 53 74 61 6d     = %05u, .ppsStam
     761:	70 43 74 72 31 6d 73 5f 6c 61 73 74 20 20 3d 20     pCtr1ms_last  = 
     771:	25 30 39 6c 75 2c 20 09 70 70 73 53 74 61 6d 70     %09lu, .ppsStamp
     781:	49 43 52 31 5f 6c 61 73 74 20 20 20 3d 20 25 30     ICR1_last   = %0
     791:	35 75 0a 00                                         5u..

00000795 <PM_FORMAT_TA11>:
     795:	23 54 41 31 31 3a 20 6c 6f 63 61 6c 46 61 73 74     #TA11: localFast
     7a5:	43 74 72 31 6d 73 20 3d 20 25 30 39 6c 75 2c 20     Ctr1ms = %09lu, 
     7b5:	09 6c 6f 63 61 6c 46 61 73 74 54 43 4e 54 31 20     .localFastTCNT1 
     7c5:	3d 20 25 30 35 75 0a 00                             = %05u..

000007cd <PM_FORMAT_TA03>:
     7cd:	23 54 41 30 33 3a 20 54 65 6d 70 20 3d 20 25 30     #TA03: Temp = %0
     7dd:	34 75 20 28 25 30 2e 31 66 43 29 0a 00              4u (%0.1fC)..

000007ea <PM_FORMAT_TA02>:
     7ea:	23 54 41 30 32 3a 20 41 44 43 31 20 3d 20 25 30     #TA02: ADC1 = %0
     7fa:	34 75 20 28 25 30 2e 33 66 56 29 0a 00              4u (%0.3fV)..

00000807 <PM_FORMAT_TA01>:
     807:	23 54 41 30 31 3a 20 41 44 43 30 20 3d 20 25 30     #TA01: ADC0 = %0
     817:	34 75 20 28 25 30 2e 33 66 56 29 0a 00              4u (%0.3fV)..

00000824 <PM_FORMAT_GP05>:
     824:	23 47 50 30 35 3a 20 4c 61 74 20 3d 20 25 63 20     #GP05: Lat = %c 
     834:	25 30 39 2e 34 66 2c 20 4c 6f 6e 20 3d 20 25 63     %09.4f, Lon = %c
     844:	20 25 30 31 30 2e 34 66 2c 20 48 65 69 67 68 74      %010.4f, Height
     854:	20 3d 20 25 2e 31 66 20 6d 0a 00                     = %.1f m..

0000085f <PM_FORMAT_GP04>:
     85f:	23 47 50 30 34 3a 20 50 44 4f 50 20 3d 20 25 2e     #GP04: PDOP = %.
     86f:	32 66 2c 20 48 44 4f 50 20 3d 20 25 2e 32 66 2c     2f, HDOP = %.2f,
     87f:	20 56 44 4f 50 20 3d 20 25 2e 32 66 2c 0a 00         VDOP = %.2f,..

0000088e <PM_FORMAT_GP03>:
     88e:	23 47 50 30 33 3a 20 53 61 74 73 55 73 65 64 20     #GP03: SatsUsed 
     89e:	3d 20 25 30 32 64 2c 20 53 61 74 73 45 70 68 69     = %02d, SatsEphi
     8ae:	6d 5f 47 70 73 47 61 6c 69 6c 65 6f 51 7a 73 73     m_GpsGalileoQzss
     8be:	20 3d 20 25 30 32 64 2c 20 53 61 74 73 45 70 68      = %02d, SatsEph
     8ce:	69 6d 5f 47 6c 6f 6e 61 73 73 20 3d 20 25 30 32     im_Glonass = %02
     8de:	64 0a 00                                            d..

000008e1 <PM_FORMAT_GP02>:
     8e1:	23 47 50 30 32 3a 20 4d 6f 64 65 32 20 3d 20 25     #GP02: Mode2 = %
     8f1:	31 64 2c 20 50 6f 73 46 69 78 49 6e 64 20 3d 20     1d, PosFixInd = 
     901:	25 31 64 0a 00                                      %1d..

00000906 <PM_FORMAT_GP01>:
     906:	23 47 50 30 31 3a 20 44 61 74 65 20 3d 20 25 30     #GP01: Date = %0
     916:	38 6c 64 2c 20 54 69 6d 65 20 3d 20 25 30 36 6c     8ld, Time = %06l
     926:	64 2e 25 30 33 64 0a 00                             d.%03d..

0000092e <PM_FORMAT_GP00>:
     92e:	0a 23 47 50 30 30 3a 20 3d 3d 3d 3d 3d 3d 3d 00     .#GP00: =======.

0000093e <PM_FORMAT_GPS_WEST1_EAST1>:
     93e:	24 50 4d 54 4b 33 35 33 2c 31 2c 31 2a 33 37 0d     $PMTK353,1,1*37.
     94e:	0a 00                                               ..

00000950 <PM_FORMAT_GPS_WEST1_EAST0>:
     950:	24 50 4d 54 4b 33 35 33 2c 31 2c 30 2a 33 36 0d     $PMTK353,1,0*36.
     960:	0a 00                                               ..

00000962 <PM_FORMAT_GPS_WEST0_EAST0>:
     962:	24 50 4d 54 4b 33 35 33 2c 30 2c 30 2a 33 37 0d     $PMTK353,0,0*37.
     972:	0a 00                                               ..

00000974 <PM_FORMAT_GPS_STBY>:
     974:	24 50 4d 54 4b 31 36 31 2c 30 2a 32 38 0d 0a 00     $PMTK161,0*28...

00000984 <PM_FORMAT_GPS_WARM_RESTART>:
     984:	24 50 4d 54 4b 31 30 32 2a 33 31 0d 0a 00           $PMTK102*31...

00000992 <PM_FORMAT_VERSION>:
     992:	0a 3d 3d 3d 20 44 46 34 49 41 48 20 2d 20 31 30     .=== DF4IAH - 10
     9a2:	20 4d 48 7a 20 52 65 66 65 72 65 6e 63 65 20 4f      MHz Reference O
     9b2:	73 63 69 6c 6c 61 74 6f 72 20 3d 3d 3d 0a 3d 3d     scillator ===.==
     9c2:	3d 20 56 65 72 3a 20 32 30 25 30 33 64 25 30 33     = Ver: 20%03d%03
     9d2:	64 00                                               d.

000009d4 <PM_INTERPRETER_UNKNOWN>:
     9d4:	0a 2a 3f 2a 20 20 75 6e 6b 6e 6f 77 6e 20 63 6f     .*?*  unknown co
     9e4:	6d 6d 61 6e 64 20 27 25 73 27 20 72 65 63 65 69     mmand '%s' recei
     9f4:	76 65 64 2c 20 74 72 79 20 48 45 4c 50 2e 0a 3e     ved, try HELP..>
	...

00000a05 <PM_INTERPRETER_HELP14>:
     a05:	0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 3e 00        .===========.>.

00000a14 <PM_INTERPRETER_HELP13>:
     a14:	0a 2b 2f 2d 20 3c 50 57 4d 20 76 61 6c 75 65 3e     .+/- <PWM value>
     a24:	09 09 63 6f 72 72 65 63 74 69 6f 6e 20 76 61 6c     ..correction val
     a34:	75 65 20 74 6f 20 62 65 20 61 64 64 65 64 2e 00     ue to be added..

00000a44 <PM_INTERPRETER_HELP12>:
     a44:	0a 57 52 49 54 45 50 57 4d 09 09 09 73 74 6f 72     .WRITEPWM...stor
     a54:	65 20 63 75 72 72 65 6e 74 20 50 57 4d 20 61 73     e current PWM as
     a64:	20 64 65 66 61 75 6c 74 20 76 61 6c 75 65 2e 0a      default value..
     a74:	57 52 49 54 45 54 45 4d 50 20 3c 54 45 4d 50 20     WRITETEMP <TEMP 
     a84:	76 61 6c 75 65 3e 09 09 77 72 69 74 65 20 63 75     value>..write cu
     a94:	72 72 65 6e 74 20 74 65 6d 70 65 72 61 74 75 72     rrent temperatur
     aa4:	65 20 61 73 20 64 65 66 61 75 6c 74 20 76 61 6c     e as default val
     ab4:	75 65 2e 00                                         ue..

00000ab8 <PM_INTERPRETER_HELP11>:
     ab8:	0a 54 45 53 54 09 09 09 09 74 6f 67 67 6c 65 73     .TEST....toggles
     ac8:	20 63 6f 75 6e 74 65 72 20 74 65 73 74 2e 00         counter test..

00000ad7 <PM_INTERPRETER_HELP10>:
     ad7:	0a 53 54 41 43 4b 09 09 09 09 74 6f 67 67 6c 65     .STACK....toggle
     ae7:	73 20 73 74 61 63 6b 20 6d 75 6e 67 2d 77 61 6c     s stack mung-wal
     af7:	6c 20 74 65 73 74 2e 00                             l test..

00000aff <PM_INTERPRETER_HELP09>:
     aff:	0a 53 45 52 4f 46 46 09 09 09 09 73 77 69 74 63     .SEROFF....switc
     b0f:	68 20 73 65 72 69 61 6c 20 63 6f 6d 6d 75 6e 69     h serial communi
     b1f:	63 61 74 69 6f 6e 20 4f 46 46 2e 0a 53 45 52 4f     cation OFF..SERO
     b2f:	4e 09 09 09 09 73 77 69 74 63 68 20 73 65 72 69     N....switch seri
     b3f:	61 6c 20 63 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e     al communication
     b4f:	20 4f 4e 2e 00                                       ON..

00000b54 <PM_INTERPRETER_HELP08>:
     b54:	0a 53 45 52 42 41 55 44 20 3c 62 61 75 64 3e 09     .SERBAUD <baud>.
     b64:	09 09 73 65 74 74 69 6e 67 20 73 65 72 69 61 6c     ..setting serial
     b74:	20 62 61 75 64 20 72 61 74 65 2e 00                  baud rate..

00000b80 <PM_INTERPRETER_HELP07>:
     b80:	0a 4c 45 44 4f 46 46 09 09 09 09 73 77 69 74 63     .LEDOFF....switc
     b90:	68 20 62 61 63 6b 6c 69 67 68 74 20 4f 46 46 2e     h backlight OFF.
     ba0:	0a 4c 45 44 4f 4e 09 09 09 09 73 77 69 74 63 68     .LEDON....switch
     bb0:	20 62 61 63 6b 6c 69 67 68 74 20 4f 4e 2e 00         backlight ON..

00000bbf <PM_INTERPRETER_HELP06>:
     bbf:	0a 49 4e 46 4f 09 09 09 09 74 6f 67 67 6c 65 73     .INFO....toggles
     bcf:	20 61 64 64 69 74 69 6f 6e 61 6c 20 70 72 69 6e      additional prin
     bdf:	74 65 64 20 69 6e 66 6f 73 2e 00                    ted infos..

00000bea <PM_INTERPRETER_HELP05>:
     bea:	0a 48 45 4c 50 09 09 09 09 74 68 69 73 20 6d 65     .HELP....this me
     bfa:	73 73 61 67 65 2e 00                                ssage..

00000c01 <PM_INTERPRETER_HELP04>:
     c01:	0a 48 41 4c 54 09 09 09 09 70 6f 77 65 72 73 20     .HALT....powers 
     c11:	74 68 65 20 64 65 76 69 63 65 20 64 6f 77 6e 20     the device down 
     c21:	28 73 6c 65 65 70 20 6d 6f 64 65 29 2e 00           (sleep mode)..

00000c2f <PM_INTERPRETER_HELP03>:
     c2f:	0a 41 50 43 4f 46 46 09 09 09 09 73 77 69 74 63     .APCOFF....switc
     c3f:	68 20 41 50 43 20 28 61 75 74 6f 6d 61 74 69 63     h APC (automatic
     c4f:	20 70 68 61 73 65 20 63 6f 6e 74 72 6f 6c 29 20      phase control) 
     c5f:	6f 66 66 2e 0a 41 50 43 4f 4e 09 09 09 09 73 77     off..APCON....sw
     c6f:	69 74 63 68 20 41 50 43 20 28 61 75 74 6f 6d 61     itch APC (automa
     c7f:	74 69 63 20 70 68 61 73 65 20 63 6f 6e 74 72 6f     tic phase contro
     c8f:	6c 29 20 6f 6e 2e 00                                l) on..

00000c96 <PM_INTERPRETER_HELP02>:
     c96:	0a 41 46 43 4f 46 46 09 09 09 09 73 77 69 74 63     .AFCOFF....switc
     ca6:	68 20 41 46 43 20 28 61 75 74 6f 6d 61 74 69 63     h AFC (automatic
     cb6:	20 66 72 65 71 75 65 6e 63 79 20 63 6f 6e 74 72      frequency contr
     cc6:	6f 6c 29 20 6f 66 66 2e 0a 41 46 43 4f 4e 09 09     ol) off..AFCON..
     cd6:	09 09 73 77 69 74 63 68 20 41 46 43 20 28 61 75     ..switch AFC (au
     ce6:	74 6f 6d 61 74 69 63 20 66 72 65 71 75 65 6e 63     tomatic frequenc
     cf6:	79 20 63 6f 6e 74 72 6f 6c 29 20 6f 6e 2e 00        y control) on..

00000d05 <PM_INTERPRETER_HELP01>:
     d05:	0a 3d 3d 3d 20 48 45 4c 50 20 3d 3d 3d 0a 0a 24     .=== HELP ===..$
     d15:	20 3c 4e 4d 45 41 2d 4d 65 73 73 61 67 65 3e 09      <NMEA-Message>.
     d25:	09 73 65 6e 64 73 20 6d 65 73 73 61 67 65 20 74     .sends message t
     d35:	6f 20 74 68 65 20 47 50 53 20 6d 6f 64 75 6c 65     o the GPS module
     d45:	2e 00                                               ..

00000d47 <PM_GPIB_SCM_IDN>:
     d47:	2a 49 44 4e 3f 00                                   *IDN?.

00000d4d <PM_COMMAND_WRITETEMP>:
     d4d:	57 52 49 54 45 54 45 4d 50 00                       WRITETEMP.

00000d57 <PM_COMMAND_WRITEPWM>:
     d57:	57 52 49 54 45 50 57 4d 00                          WRITEPWM.

00000d60 <PM_COMMAND_TEST>:
     d60:	54 45 53 54 00                                      TEST.

00000d65 <PM_COMMAND_STACK>:
     d65:	53 54 41 43 4b 00                                   STACK.

00000d6b <PM_COMMAND_SERON>:
     d6b:	53 45 52 4f 4e 00                                   SERON.

00000d71 <PM_COMMAND_SEROFF>:
     d71:	53 45 52 4f 46 46 00                                SEROFF.

00000d78 <PM_COMMAND_SERBAUD>:
     d78:	53 45 52 42 41 55 44 00                             SERBAUD.

00000d80 <PM_COMMAND_LEDON>:
     d80:	4c 45 44 4f 4e 00                                   LEDON.

00000d86 <PM_COMMAND_LEDOFF>:
     d86:	4c 45 44 4f 46 46 00                                LEDOFF.

00000d8d <PM_COMMAND_INFO>:
     d8d:	49 4e 46 4f 00                                      INFO.

00000d92 <PM_COMMAND_HELP>:
     d92:	48 45 4c 50 00                                      HELP.

00000d97 <PM_COMMAND_HALT>:
     d97:	48 41 4c 54 00                                      HALT.

00000d9c <PM_COMMAND_APCON>:
     d9c:	41 50 43 4f 4e 00                                   APCON.

00000da2 <PM_COMMAND_APCOFF>:
     da2:	41 50 43 4f 46 46 00                                APCOFF.

00000da9 <PM_COMMAND_AFCON>:
     da9:	41 46 43 4f 4e 00                                   AFCON.

00000daf <PM_COMMAND_AFCOFF>:
     daf:	41 46 43 4f 46 46 00                                AFCOFF.

00000db6 <eeprom_defaultValues_content>:
     db6:	44 46 34 49 41 48 20 31 30 4d 68 7a 2d 52 65 66     DF4IAH 10Mhz-Ref
     dc6:	98 ab 00 00 01 ff ff ff ff ff ff ff 00 00 0c b0     ................
     dd6:	a5 2c 8f 40 48 e1 8a 3f 00 80 af 43 00 a0 87 3f     .,.@H..?...C...?
     de6:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 1c b0     ................
     df6:	cd cc 94 c0 5c 8f c2 3f b8 1e 05 3d ff ff ff ff     ....\..?...=....
     e06:	ff ff 71 3d 8a 3f 33 33 13 40 78 00 00 00 2c b0     ..q=.?33.@x...,.
     e16:	80 25 08 01 00 00 00 00 ff ff ff ff ff ff ff ff     .%..............
     e26:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 3c b0     ..............<.
     e36:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e46:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 4c b0     ..............L.

00000e56 <usbDescriptorConfiguration>:
     e56:	09 02 19 00 01 01 00 80 69 09 04 00 00 01 ff 00     ........i.......
     e66:	00 00 07 05 81 03 08 00 0a                          .........

00000e6f <usbDescriptorDevice>:
     e6f:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
     e7f:	03 01                                               ..

00000e81 <usbDescriptorStringSerialNumber>:
     e81:	10 03 50 00 72 00 6f 00 74 00 6f 00 2d 00 31 00     ..P.r.o.t.o.-.1.

00000e91 <usbDescriptorStringDevice>:
     e91:	2a 03 44 00 46 00 34 00 49 00 41 00 48 00 2d 00     *.D.F.4.I.A.H.-.
     ea1:	31 00 30 00 4d 00 48 00 7a 00 2d 00 52 00 65 00     1.0.M.H.z.-.R.e.
     eb1:	66 00 2d 00 4f 00 73 00 63 00                       f.-.O.s.c.

00000ebb <usbDescriptorStringVendor>:
     ebb:	0e 03 44 00 46 00 34 00 49 00 41 00 48 00           ..D.F.4.I.A.H.

00000ec9 <usbDescriptorString0>:
     ec9:	04 03 09 04                                         ....

00000ecd <__c.2437>:
     ecd:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     edd:	47 00                                               G.

00000edf <pstr_an>:
     edf:	61 6e 00                                            an.

00000ee2 <pstr_nfinity>:
     ee2:	6e 66 69 6e 69 74 79 00                             nfinity.

00000eea <pwr_m10>:
     eea:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     efa:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000f02 <pwr_p10>:
     f02:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     f12:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000f1a <__ctors_end>:
     f1a:	11 24       	eor	r1, r1
     f1c:	1f be       	out	0x3f, r1	; 63
     f1e:	cf ef       	ldi	r28, 0xFF	; 255
     f20:	d8 e0       	ldi	r29, 0x08	; 8
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	cd bf       	out	0x3d, r28	; 61

00000f26 <__do_copy_data>:
     f26:	11 e0       	ldi	r17, 0x01	; 1
     f28:	a0 e0       	ldi	r26, 0x00	; 0
     f2a:	b1 e0       	ldi	r27, 0x01	; 1
     f2c:	e4 ec       	ldi	r30, 0xC4	; 196
     f2e:	fc e7       	ldi	r31, 0x7C	; 124
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <__do_copy_data+0x10>
     f32:	05 90       	lpm	r0, Z+
     f34:	0d 92       	st	X+, r0
     f36:	a6 31       	cpi	r26, 0x16	; 22
     f38:	b1 07       	cpc	r27, r17
     f3a:	d9 f7       	brne	.-10     	; 0xf32 <__do_copy_data+0xc>

00000f3c <__do_clear_bss>:
     f3c:	28 e0       	ldi	r18, 0x08	; 8
     f3e:	a6 e1       	ldi	r26, 0x16	; 22
     f40:	b1 e0       	ldi	r27, 0x01	; 1
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <.do_clear_bss_start>

00000f44 <.do_clear_bss_loop>:
     f44:	1d 92       	st	X+, r1

00000f46 <.do_clear_bss_start>:
     f46:	a6 32       	cpi	r26, 0x26	; 38
     f48:	b2 07       	cpc	r27, r18
     f4a:	e1 f7       	brne	.-8      	; 0xf44 <.do_clear_bss_loop>
     f4c:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <main>
     f50:	0c 94 60 3e 	jmp	0x7cc0	; 0x7cc0 <_exit>

00000f54 <__bad_interrupt>:
     f54:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f58 <usbCrc16>:
;   byte    r18 / r22
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     f58:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     f5a:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xFF
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xFF
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
    rjmp    usbCrc16LoopTest
     f60:	1b c0       	rjmp	.+54     	; 0xf98 <usbCrc16LoopTest>

00000f62 <usbCrc16ByteLoop>:
usbCrc16ByteLoop:
    ld      byte, ptr+
     f62:	2d 91       	ld	r18, X+
    eor     resCrcL, byte   ; resCrcL is now 'x' in table()
     f64:	82 27       	eor	r24, r18
    mov     byte, resCrcL   ; compute parity of 'x'
     f66:	28 2f       	mov	r18, r24
    swap    byte
     f68:	22 95       	swap	r18
    eor     byte, resCrcL
     f6a:	28 27       	eor	r18, r24
    mov     scratch, byte
     f6c:	72 2f       	mov	r23, r18
    lsr     byte
     f6e:	26 95       	lsr	r18
    lsr     byte
     f70:	26 95       	lsr	r18
    eor     byte, scratch
     f72:	27 27       	eor	r18, r23
    inc     byte
     f74:	23 95       	inc	r18
    lsr     byte
     f76:	26 95       	lsr	r18
    andi    byte, 1         ; byte is now parity(x)
     f78:	21 70       	andi	r18, 0x01	; 1
    mov     scratch, resCrcL
     f7a:	78 2f       	mov	r23, r24
    mov     resCrcL, resCrcH
     f7c:	89 2f       	mov	r24, r25
    eor     resCrcL, byte   ; low byte of if(parity(x)) value ^= 0xc001;
     f7e:	82 27       	eor	r24, r18
    neg     byte
     f80:	21 95       	neg	r18
    andi    byte, 0xc0
     f82:	20 7c       	andi	r18, 0xC0	; 192
    mov     resCrcH, byte   ; high byte of if(parity(x)) value ^= 0xc001;
     f84:	92 2f       	mov	r25, r18
    clr     byte
     f86:	22 27       	eor	r18, r18
    lsr     scratch
     f88:	76 95       	lsr	r23
    ror     byte
     f8a:	27 95       	ror	r18
    eor     resCrcH, scratch
     f8c:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     f8e:	82 27       	eor	r24, r18
    lsr     scratch
     f90:	76 95       	lsr	r23
    ror     byte
     f92:	27 95       	ror	r18
    eor     resCrcH, scratch
     f94:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     f96:	82 27       	eor	r24, r18

00000f98 <usbCrc16LoopTest>:
usbCrc16LoopTest:
    subi    argLen, 1
     f98:	61 50       	subi	r22, 0x01	; 1
    brsh    usbCrc16ByteLoop
     f9a:	18 f7       	brcc	.-58     	; 0xf62 <usbCrc16ByteLoop>
    com     resCrcL
     f9c:	80 95       	com	r24
    com     resCrcH
     f9e:	90 95       	com	r25
    ret
     fa0:	08 95       	ret

00000fa2 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     fa2:	da df       	rcall	.-76     	; 0xf58 <usbCrc16>
    st      ptr+, resCrcL
     fa4:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     fa6:	9d 93       	st	X+, r25
    ret
     fa8:	08 95       	ret

00000faa <__vector_1>:
; bitcnt is used to determine when a stuff bit is due
; cnt holds the number of bytes left in the receive buffer

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-28] push only what is necessary to sync with edge ASAP
     faa:	cf 93       	push	r28
    in      YL, SREG            ;[-26]
     fac:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-25]
     fae:	cf 93       	push	r28
    push    YH                  ;[-23]
     fb0:	df 93       	push	r29

00000fb2 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     fb2:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     fb4:	33 9b       	sbis	0x06, 3	; 6
    brne    waitForJ        ; just make sure we have ANY timeout
     fb6:	e9 f7       	brne	.-6      	; 0xfb2 <waitForJ>

00000fb8 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-19]
     fb8:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK              ;[-18]
     fba:	11 c0       	rjmp	.+34     	; 0xfde <foundK>
    sbis    USBIN, USBMINUS
     fbc:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fbe:	0f c0       	rjmp	.+30     	; 0xfde <foundK>
    sbis    USBIN, USBMINUS
     fc0:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fc2:	0d c0       	rjmp	.+26     	; 0xfde <foundK>
    sbis    USBIN, USBMINUS
     fc4:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fc6:	0b c0       	rjmp	.+22     	; 0xfde <foundK>
    sbis    USBIN, USBMINUS
     fc8:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fca:	09 c0       	rjmp	.+18     	; 0xfde <foundK>
    sbis    USBIN, USBMINUS
     fcc:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fce:	07 c0       	rjmp	.+14     	; 0xfde <foundK>
    sbis    USBIN, USBMINUS
     fd0:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <foundK>
    sbis    USBIN, USBMINUS
     fd4:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <foundK>
    sbis    USBIN, USBMINUS
     fd8:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     fda:	01 c0       	rjmp	.+2      	; 0xfde <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     fdc:	83 c0       	rjmp	.+262    	; 0x10e4 <sofError>

00000fde <foundK>:
foundK:                         ;[-16]
;{3, 5} after falling D- edge, average delay: 4 cycles
;bit0 should be at 34 for center sampling. Currently at 4 so 30 cylces till bit 0 sample
;use 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-16]
     fde:	6f 93       	push	r22
;   [---]                       ;[-15]
    lds     YL, usbInputBufOffset;[-14]
     fe0:	c0 91 09 08 	lds	r28, 0x0809	; 0x800809 <usbInputBufOffset>
;   [---]                       ;[-13]
    clr     YH                  ;[-12]
     fe4:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-11] [rx loop init]
     fe6:	c0 5f       	subi	r28, 0xF0	; 240
    sbci    YH, hi8(-(usbRxBuf));[-10] [rx loop init]
     fe8:	d7 4f       	sbci	r29, 0xF7	; 247
    push    shift               ;[-9]
     fea:	2f 93       	push	r18
;   [---]                       ;[-8]
    ldi     shift,0x40          ;[-7] set msb to "1" so processing bit7 can be detected
     fec:	20 e4       	ldi	r18, 0x40	; 64
    nop2                        ;[-6]
     fee:	00 c0       	rjmp	.+0      	; 0xff0 <foundK+0x12>
;   [---]                       ;[-5]
    ldi     bitcnt, 5           ;[-4] [rx loop init]
     ff0:	65 e0       	ldi	r22, 0x05	; 5
    sbis    USBIN, USBMINUS     ;[-3] we want two bits K (sample 3 cycles too early)
     ff2:	33 9b       	sbis	0x06, 3	; 6
    rjmp    haveTwoBitsK        ;[-2]
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <haveTwoBitsK>
    pop     shift               ;[-1] undo the push from before
     ff6:	2f 91       	pop	r18
    pop     bitcnt              ;[1] 
     ff8:	6f 91       	pop	r22
    rjmp    waitForK            ;[3] this was not the end of sync, retry
     ffa:	de cf       	rjmp	.-68     	; 0xfb8 <waitForK>

00000ffc <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1                  ;[0]
     ffc:	0f 93       	push	r16
    push    x2                  ;[2]
     ffe:	1f 93       	push	r17
    push    x3                  ;[4] (leap2)
    1000:	4f 93       	push	r20
    ldi     leap2, 0x55         ;[6] add leap cycle on 2nd,5th,8th,... stuff bit
    1002:	45 e5       	ldi	r20, 0x55	; 85
    push    x4                  ;[7] == leap
    1004:	5f 93       	push	r21
    ldi     leap, 0x55          ;[9] skip leap cycle on 2nd,5th,8th,... byte received
    1006:	55 e5       	ldi	r21, 0x55	; 85
    push    cnt                 ;[10]
    1008:	3f 93       	push	r19
    ldi     cnt, USB_BUFSIZE    ;[12] [rx loop init]
    100a:	3b e0       	ldi	r19, 0x0B	; 11
    ldi     x2, 1<<USBPLUS      ;[13] current line state is K state. D+=="1", D-=="0"
    100c:	14 e0       	ldi	r17, 0x04	; 4

0000100e <bit0>:
bit0:       
    in      x1, USBIN           ;[0] sample line state
    100e:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
    1010:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;[2] make bit0 14 cycles long
    1012:	2e c0       	rjmp	.+92     	; 0x1070 <handleBit>

00001014 <b6checkUnstuff>:
;----------------------------------------------------------------------------
; Process bit7. However, bit 6 still may need unstuffing.
;----------------------------------------------------------------------------

b6checkUnstuff:
    dec     bitcnt              ;[9]
    1014:	6a 95       	dec	r22
    breq    unstuff6            ;[10]
    1016:	c9 f0       	breq	.+50     	; 0x104a <unstuff6>

00001018 <bit7>:
bit7:
    subi    cnt, 1              ;[11] cannot use dec becaus it does not affect the carry flag
    1018:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow            ;[12] Too many bytes received. Ignore packet
    101a:	d8 f1       	brcs	.+118    	; 0x1092 <overflow>
    in      x1, USBIN           ;[0] sample line state
    101c:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
    101e:	0c 70       	andi	r16, 0x0C	; 12
    cpse    x1, x2              ;[2] when previous line state equals current line state, handle "1"
    1020:	01 13       	cpse	r16, r17
    rjmp    b7handle0           ;[3] when line state differs, handle "0"
    1022:	0b c0       	rjmp	.+22     	; 0x103a <b7handle0>
    sec                         ;[4]
    1024:	08 94       	sec
    ror     shift               ;[5] shift "1" into the data
    1026:	27 95       	ror	r18
    st      y+, shift           ;[6] store the data into the buffer
    1028:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[7] reset data for receiving the next byte
    102a:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[9] trick to introduce a leap cycle every 3 bytes
    102c:	55 55       	subi	r21, 0x55	; 85
    brcc    nextInst            ;[10 or 11] it will fail after 85 bytes. However low speed can only receive 11
    102e:	00 f4       	brcc	.+0      	; 0x1030 <bit7+0x18>
    dec     bitcnt              ;[11 or 12]
    1030:	6a 95       	dec	r22
    brne    bit0                ;[12 or 13]
    1032:	69 f7       	brne	.-38     	; 0x100e <bit0>
    ldi     x1, 1               ;[13 or 14] unstuffing bit 7
    1034:	01 e0       	ldi	r16, 0x01	; 1
    in      bitcnt, USBIN       ;[0] sample stuff bit
    1036:	66 b1       	in	r22, 0x06	; 6
    rjmp    unstuff             ;[1]
    1038:	0b c0       	rjmp	.+22     	; 0x1050 <unstuff>

0000103a <b7handle0>:

b7handle0:
    mov     x2,x1               ;[5] Set x2 to current line state
    103a:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[6]
    103c:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[7] shift "0" into the data
    103e:	26 95       	lsr	r18
    st      y+, shift           ;[8] store data into the buffer
    1040:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[10] reset data for receiving the next byte
    1042:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[11] trick to introduce a leap cycle every 3 bytes
    1044:	55 55       	subi	r21, 0x55	; 85
    brcs    bit0                ;[12] it will fail after 85 bytes. However low speed can only receive 11
    1046:	18 f3       	brcs	.-58     	; 0x100e <bit0>
    rjmp    bit0                ;[13]
    1048:	e2 cf       	rjmp	.-60     	; 0x100e <bit0>

0000104a <unstuff6>:
; Handle unstuff
; x1==0xFF indicate unstuffing bit6
;----------------------------------------------------------------------------

unstuff6:
    ldi     x1,0xFF             ;[12] indicate unstuffing bit 6
    104a:	0f ef       	ldi	r16, 0xFF	; 255
    in      bitcnt, USBIN       ;[0]  sample stuff bit
    104c:	66 b1       	in	r22, 0x06	; 6
	...

00001050 <unstuff>:
    nop                         ;[1]  fix timing
unstuff:                        ;b0-5  b6   b7
    mov     x2,bitcnt           ;[3]  [2]  [3]  Set x2 to match line state
    1050:	16 2f       	mov	r17, r22
    subi    leap2, 0x55         ;[4]  [3]  [4]  delay loop
    1052:	45 55       	subi	r20, 0x55	; 85
    brcs    nextInst            ;[5]  [4]  [5]  add one cycle every three stuff bits
    1054:	00 f0       	brcs	.+0      	; 0x1056 <unstuff+0x6>
    sbci    leap2,0             ;[6]  [5]  [6]
    1056:	40 40       	sbci	r20, 0x00	; 0
    ldi     bitcnt,6            ;[7]  [6]  [7]  reset bit stuff counter
    1058:	66 e0       	ldi	r22, 0x06	; 6
    andi    x2, USBMASK         ;[8]  [7]  [8] only keep D+ and D-
    105a:	1c 70       	andi	r17, 0x0C	; 12
    cpi     x1,0                ;[9]  [8]  [9]
    105c:	00 30       	cpi	r16, 0x00	; 0
    brmi    bit7                ;[10] [9]  [10] finished unstuffing bit6 When x1<0
    105e:	e2 f2       	brmi	.-72     	; 0x1018 <bit7>
    breq    bitloop             ;[11] ---  [11] finished unstuffing bit0-5 when x1=0
    1060:	21 f0       	breq	.+8      	; 0x106a <bitloop>
    nop                         ;---  ---  [12]
    1062:	00 00       	nop
    in      x1, USBIN           ;---  ---  [0] sample line state for bit0
    1064:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;---  ---  [1] filter only D+ and D- bits
    1066:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;---  ---  [2] make bit0 14 cycles long
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <handleBit>

0000106a <bitloop>:

;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------
bitloop:
    in      x1, USBIN           ;[0] sample line state
    106a:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
    106c:	0c 70       	andi	r16, 0x0C	; 12
    breq    se0                 ;[2] both lines are low so handle se0
    106e:	a9 f0       	breq	.+42     	; 0x109a <se0>

00001070 <handleBit>:
handleBit:
    cpse    x1, x2              ;[3] when previous line state equals current line state, handle "1"
    1070:	01 13       	cpse	r16, r17
    rjmp    handle0             ;[4] when line state differs, handle "0"
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <handle0>
    sec                         ;[5]
    1074:	08 94       	sec
    ror     shift               ;[6] shift "1" into the data
    1076:	27 95       	ror	r18
    brcs    b6checkUnstuff      ;[7] When after shift C is set, next bit is bit7
    1078:	68 f2       	brcs	.-102    	; 0x1014 <b6checkUnstuff>
    nop2                        ;[8]
    107a:	00 c0       	rjmp	.+0      	; 0x107c <handleBit+0xc>
    dec     bitcnt              ;[10]
    107c:	6a 95       	dec	r22
    brne    bitloop             ;[11]
    107e:	a9 f7       	brne	.-22     	; 0x106a <bitloop>
    ldi     x1,0                ;[12] indicate unstuff for bit other than bit6 or bit7
    1080:	00 e0       	ldi	r16, 0x00	; 0
    in      bitcnt, USBIN       ;[0] sample stuff bit
    1082:	66 b1       	in	r22, 0x06	; 6
    rjmp    unstuff             ;[1]
    1084:	e5 cf       	rjmp	.-54     	; 0x1050 <unstuff>

00001086 <handle0>:

handle0:
    mov     x2, x1              ;[6] Set x2 to current line state
    1086:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[7] reset unstuff counter. 
    1088:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[8] shift "0" into the data
    108a:	26 95       	lsr	r18
    brcs    bit7                ;[9] When after shift C is set, next bit is bit7
    108c:	28 f2       	brcs	.-118    	; 0x1018 <bit7>
    nop                         ;[10]
    108e:	00 00       	nop
    rjmp    bitloop             ;[11] 
    1090:	ec cf       	rjmp	.-40     	; 0x106a <bitloop>

00001092 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
    1092:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
    1094:	1c bb       	out	0x1c, r17	; 28

00001096 <ignorePacket>:
ignorePacket:
    clr     token
    1096:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
    1098:	19 c0       	rjmp	.+50     	; 0x10cc <handleSetupOrOut>

0000109a <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
    109a:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
    109c:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
    109e:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
    10a0:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
    10a2:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
    10a4:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
    10a6:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
    10a8:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
    10aa:	09 f1       	breq	.+66     	; 0x10ee <handleData>
    cpi     token, USBPID_DATA1 ;[15]
    10ac:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
    10ae:	f9 f0       	breq	.+62     	; 0x10ee <handleData>
    lds     shift, usbDeviceAddr;[17]
    10b0:	20 91 07 08 	lds	r18, 0x0807	; 0x800807 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
    10b4:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
    10b6:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
    10b8:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
    10ba:	ed cf       	rjmp	.-38     	; 0x1096 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
    10bc:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
    10be:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
    10c0:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
    10c2:	51 f1       	breq	.+84     	; 0x1118 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
    10c4:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
    10c6:	11 f0       	breq	.+4      	; 0x10cc <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
    10c8:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
    10ca:	29 f7       	brne	.-54     	; 0x1096 <ignorePacket>

000010cc <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
    10cc:	00 93 0e 08 	sts	0x080E, r16	; 0x80080e <usbCurrentTok>

000010d0 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
    10d0:	3f 91       	pop	r19
    10d2:	5f 91       	pop	r21
    10d4:	4f 91       	pop	r20
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	2f 91       	pop	r18
    10dc:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
    10de:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
    10e0:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
    10e2:	67 cf       	rjmp	.-306    	; 0xfb2 <waitForJ>

000010e4 <sofError>:
sofError:
    POP_RETI                    ;macro call
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	cf bf       	out	0x3f, r28	; 63
    10ea:	cf 91       	pop	r28
    reti
    10ec:	18 95       	reti

000010ee <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
    10ee:	20 91 0e 08 	lds	r18, 0x080E	; 0x80080e <usbCurrentTok>
    tst     shift               ;[20]
    10f2:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
    10f4:	69 f3       	breq	.-38     	; 0x10d0 <doReturn>
    lds     x2, usbRxLen        ;[22]
    10f6:	10 91 0c 08 	lds	r17, 0x080C	; 0x80080c <usbRxLen>
    tst     x2                  ;[24]
    10fa:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
    10fc:	81 f5       	brne	.+96     	; 0x115e <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
    10fe:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
    1100:	82 f1       	brmi	.+96     	; 0x1162 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
    1102:	30 93 0c 08 	sts	0x080C, r19	; 0x80080c <usbRxLen>
    sts     usbRxToken, shift   ;[30]
    1106:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
    110a:	10 91 09 08 	lds	r17, 0x0809	; 0x800809 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
    110e:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
    1110:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
    1112:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
    1116:	25 c0       	rjmp	.+74     	; 0x1162 <sendAckAndReti>

00001118 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
    1118:	00 91 0c 08 	lds	r16, 0x080C	; 0x80080c <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
    111c:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
    111e:	fc f4       	brge	.+62     	; 0x115e <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
    1120:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
    1122:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
    1124:	49 f4       	brne	.+18     	; 0x1138 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
    1126:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
    112a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
    112c:	1b c0       	rjmp	.+54     	; 0x1164 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
    112e:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
    1132:	cc ef       	ldi	r28, 0xFC	; 252
    ldi     YH, hi8(usbTxBuf)   ;[44]
    1134:	d7 e0       	ldi	r29, 0x07	; 7
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
    1136:	1a c0       	rjmp	.+52     	; 0x116c <usbSendAndReti>

00001138 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
    1138:	30 91 8f 05 	lds	r19, 0x058F	; 0x80058f <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
    113c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
    113e:	12 c0       	rjmp	.+36     	; 0x1164 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
    1140:	00 93 8f 05 	sts	0x058F, r16	; 0x80058f <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
    1144:	c0 e9       	ldi	r28, 0x90	; 144
    ldi     YH, hi8(usbTxBuf1)  ;[47]
    1146:	d5 e0       	ldi	r29, 0x05	; 5
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
    1148:	11 c0       	rjmp	.+34     	; 0x116c <usbSendAndReti>

0000114a <bitstuffN>:
; Spec allows 7.5 bit times from EOP to SOP for replies
; 7.5 bit times is 100 cycles. This implementation arrives a bit later at se0
; then specified in the include file but there is plenty of time

bitstuffN:
    eor     x1, x4          ;[8]
    114a:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[9]
    114c:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[10]
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <bitstuffN+0x6>
    out     USBOUT, x1      ;[12] <-- out
    1150:	08 b9       	out	0x08, r16	; 8
    rjmp    didStuffN       ;[0]
    1152:	19 c0       	rjmp	.+50     	; 0x1186 <didStuffN>

00001154 <bitstuff7>:
    
bitstuff7:
    eor     x1, x4          ;[6]
    1154:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[7] Carry is zero due to brcc
    1156:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[8] compensate for ror shift at branch destination
    1158:	22 1f       	adc	r18, r18
    nop2                    ;[9]
    115a:	00 c0       	rjmp	.+0      	; 0x115c <bitstuff7+0x8>
    rjmp    didStuff7       ;[11]
    115c:	1d c0       	rjmp	.+58     	; 0x1198 <didStuff7>

0000115e <sendNakAndReti>:

sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
    115e:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <sendX3AndReti>

00001162 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
    1162:	32 ed       	ldi	r19, 0xD2	; 210

00001164 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
    1164:	43 2f       	mov	r20, r19

00001166 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
    1166:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
    1168:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
    116a:	32 e0       	ldi	r19, 0x02	; 2

0000116c <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
    116c:	17 b1       	in	r17, 0x07	; 7
    ori     x2, USBMASK     ;[-11]
    116e:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
    1170:	43 9a       	sbi	0x08, 3	; 8
    in      x1, USBOUT      ;[-8] port mirror for tx loop
    1172:	08 b1       	in	r16, 0x08	; 8
    out     USBDDR, x2      ;[-7] <- acquire bus
    1174:	17 b9       	out	0x07, r17	; 7
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
    1176:	5c e0       	ldi	r21, 0x0C	; 12
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
    1178:	20 e8       	ldi	r18, 0x80	; 128

0000117a <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x49    ;[-4]        [10] binary 01001001
    117a:	69 e4       	ldi	r22, 0x49	; 73

0000117c <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [10]   [11]
    117c:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [11]   [12]
    117e:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [12]   [13]   <-- out N
    1180:	08 b9       	out	0x08, r16	; 8
    ror     shift           ;[0]  [13]   [14]
    1182:	27 95       	ror	r18
    ror     x2              ;[1]
    1184:	17 95       	ror	r17

00001186 <didStuffN>:
didStuffN:
    nop2                    ;[2]
    1186:	00 c0       	rjmp	.+0      	; 0x1188 <didStuffN+0x2>
    nop                     ;[4]
    1188:	00 00       	nop
    cpi     x2, 0xfc        ;[5]
    118a:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[6]
    118c:	f0 f6       	brcc	.-68     	; 0x114a <bitstuffN>
    lsr     bitcnt          ;[7]
    118e:	66 95       	lsr	r22
    brcc    txBitLoop       ;[8]
    1190:	a8 f7       	brcc	.-22     	; 0x117c <txBitLoop>
    brne    txBitLoop       ;[9]
    1192:	a1 f7       	brne	.-24     	; 0x117c <txBitLoop>

    sbrs    shift, 0        ;[10]
    1194:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[11]
    1196:	05 27       	eor	r16, r21

00001198 <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[-1] [13] <-- out 7
    1198:	08 b9       	out	0x08, r16	; 8
    ror     shift           ;[0] [14]
    119a:	27 95       	ror	r18
    ror     x2              ;[1]
    119c:	17 95       	ror	r17
    nop                     ;[2]
    119e:	00 00       	nop
    cpi     x2, 0xfc        ;[3]
    11a0:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[4]
    11a2:	c0 f6       	brcc	.-80     	; 0x1154 <bitstuff7>
    ld      shift, y+       ;[5]
    11a4:	29 91       	ld	r18, Y+
    dec     cnt             ;[7]
    11a6:	3a 95       	dec	r19
    brne    txByteLoop      ;[8]
    11a8:	41 f7       	brne	.-48     	; 0x117a <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[9] prepare SE0 [spec says EOP may be 25 to 30 cycles]
    11aa:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[10]
    11ac:	10 91 0d 08 	lds	r17, 0x080D	; 0x80080d <usbNewDeviceAddr>
    lsl     x2              ;[12] we compare with left shifted address
    11b0:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[13] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
    11b2:	08 b9       	out	0x08, r16	; 8
    subi    YL, 20 + 2      ;[0] Only assign address on data packets, not ACK/NAK in x3
    11b4:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[1]
    11b6:	d0 40       	sbci	r29, 0x00	; 0
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[2]
    11b8:	11 f0       	breq	.+4      	; 0x11be <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
    11ba:	10 93 07 08 	sts	0x0807, r17	; 0x800807 <usbDeviceAddr>

000011be <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
    11be:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)   ;[5]
    11c0:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     ;[6]
    11c2:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR      ;[7]
    11c4:	17 b1       	in	r17, 0x07	; 7
    cbr     x2, USBMASK     ;[8] set both pins to input
    11c6:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1          ;[9]
    11c8:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
    11ca:	43 7f       	andi	r20, 0xF3	; 243
    ldi     x4, 5           ;[11]
    11cc:	55 e0       	ldi	r21, 0x05	; 5

000011ce <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21] [24]
    11ce:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22] [25]
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <se0Delay>
    out     USBOUT, x1      ;[26] <-- out J (idle) -- end of SE0 (EOP signal)
    11d2:	08 b9       	out	0x08, r16	; 8
    out     USBDDR, x2      ;[27] <-- release bus now
    11d4:	17 b9       	out	0x07, r17	; 7
    out     USBOUT, x3      ;[28] <-- ensure no pull-up resistors are active
    11d6:	48 b9       	out	0x08, r20	; 8
    rjmp    doReturn
    11d8:	7b cf       	rjmp	.-266    	; 0x10d0 <doReturn>

000011da <memory_bl_readFlashPage>:

#ifdef RELEASE
__attribute__((section(".df4iah_bl_memory"), aligned(2)))
#endif
void memory_bl_readFlashPage(uint8_t target[], pagebuf_t size, uint32_t baddr)
{
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	ec 01       	movw	r28, r24
	const uint32_t C_app_end = APP_END;
	uint16_t data;
	uint8_t idx = 0;
    11e0:	80 e0       	ldi	r24, 0x00	; 0
#else
			data = pgm_read_word_near(baddr);
#endif
		}
		else {
			data = 0xFFFF; 									// fake empty, no access to the bootloader
    11e2:	7f ef       	ldi	r23, 0xFF	; 255
{
	const uint32_t C_app_end = APP_END;
	uint16_t data;
	uint8_t idx = 0;

	while (size) {
    11e4:	20 c0       	rjmp	.+64     	; 0x1226 <memory_bl_readFlashPage+0x4c>
#ifndef READ_PROTECT_BOOTLOADER
# warning "Bootloader not read-protected"
		if (true) {
#else
		// don't read bootloader
		if (baddr < C_app_end) {
    11e6:	2f 3f       	cpi	r18, 0xFF	; 255
    11e8:	9f e6       	ldi	r25, 0x6F	; 111
    11ea:	39 07       	cpc	r19, r25
    11ec:	41 05       	cpc	r20, r1
    11ee:	51 05       	cpc	r21, r1
    11f0:	30 f4       	brcc	.+12     	; 0x11fe <memory_bl_readFlashPage+0x24>
#if defined(RAMPZ)
			data = pgm_read_word_far(baddr);
#else
			data = pgm_read_word_near(baddr);
    11f2:	f9 01       	movw	r30, r18
    11f4:	a5 91       	lpm	r26, Z+
    11f6:	b4 91       	lpm	r27, Z
    11f8:	9a 2f       	mov	r25, r26
    11fa:	ab 2f       	mov	r26, r27
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <memory_bl_readFlashPage+0x28>
#endif
		}
		else {
			data = 0xFFFF; 									// fake empty, no access to the bootloader
    11fe:	97 2f       	mov	r25, r23
    1200:	a7 2f       	mov	r26, r23
		}
#endif
		target[idx++] = data & 0xff;						// store LSB
    1202:	fe 01       	movw	r30, r28
    1204:	e8 0f       	add	r30, r24
    1206:	f1 1d       	adc	r31, r1
    1208:	90 83       	st	Z, r25
		if (--size) {
    120a:	61 30       	cpi	r22, 0x01	; 1
    120c:	71 f0       	breq	.+28     	; 0x122a <memory_bl_readFlashPage+0x50>
		}
		else {
			data = 0xFFFF; 									// fake empty, no access to the bootloader
		}
#endif
		target[idx++] = data & 0xff;						// store LSB
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	98 0f       	add	r25, r24
		if (--size) {
			target[idx++] = data >> 8;						// store MSB
    1212:	fe 01       	movw	r30, r28
    1214:	e9 0f       	add	r30, r25
    1216:	f1 1d       	adc	r31, r1
    1218:	a0 83       	st	Z, r26
			baddr += 2;										// select next word in memory
    121a:	2e 5f       	subi	r18, 0xFE	; 254
    121c:	3f 4f       	sbci	r19, 0xFF	; 255
    121e:	4f 4f       	sbci	r20, 0xFF	; 255
    1220:	5f 4f       	sbci	r21, 0xFF	; 255
			--size;											// subtract two bytes from number of bytes to read
    1222:	62 50       	subi	r22, 0x02	; 2
			data = 0xFFFF; 									// fake empty, no access to the bootloader
		}
#endif
		target[idx++] = data & 0xff;						// store LSB
		if (--size) {
			target[idx++] = data >> 8;						// store MSB
    1224:	8e 5f       	subi	r24, 0xFE	; 254
{
	const uint32_t C_app_end = APP_END;
	uint16_t data;
	uint8_t idx = 0;

	while (size) {
    1226:	61 11       	cpse	r22, r1
    1228:	de cf       	rjmp	.-68     	; 0x11e6 <memory_bl_readFlashPage+0xc>
			target[idx++] = data >> 8;						// store MSB
			baddr += 2;										// select next word in memory
			--size;											// subtract two bytes from number of bytes to read
		}
	}														// repeat until block has been read
}
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <anlgComp_fw_init>:


void anlgComp_fw_init(void)
{
	/* enable power for ADC, reference voltage and analog comparator */
	PRR &= ~(_BV(PRADC));
    1230:	e4 e6       	ldi	r30, 0x64	; 100
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8e 7f       	andi	r24, 0xFE	; 254
    1238:	80 83       	st	Z, r24

	/* init the ADC counter */
	acAdcConvertNowCntr = 0;
    123a:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <acAdcConvertNowCntr>

	/* disable digital input buffers on AIN0, AIN1, ADC0 and ADC1 */
	DIDR1 |= (0b11 << AIN0D);
    123e:	ef e7       	ldi	r30, 0x7F	; 127
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	83 60       	ori	r24, 0x03	; 3
    1246:	80 83       	st	Z, r24
	DIDR0  = (0b000011 << ADC0D);
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	/* enable comparator AIN1 pin */
	ADCSRB &= ~(_BV(ACME));									// disable Analog Comparator Multiplex Enable
    124e:	eb e7       	ldi	r30, 0x7B	; 123
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8f 7b       	andi	r24, 0xBF	; 191
    1256:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN) | (0b111 << ADPS0);					// AD enable, use 128/1 prescaler for ADC clock = 156250 Hz
    1258:	ea e7       	ldi	r30, 0x7A	; 122
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	87 68       	ori	r24, 0x87	; 135
    1260:	80 83       	st	Z, r24

	/* enable comparator AIN0 pin */
	ACSR  = (ACSR &  ~(_BV(ACBG) | _BV(ACD)	|	 		  	// disable bandgap reference voltage, switch off Analog Comparator Disable
    1262:	80 b7       	in	r24, 0x30	; 48
    1264:	87 e1       	ldi	r24, 0x17	; 23
    1266:	80 bf       	out	0x30, r24	; 48
			_BV(ACI)						|				// clear any pending interrupt
			(0b11 << ACIS0);								// disable ACIE for interrupt as long interrupt source is changed, interrupt on Rising Edge
	// ACSR |= _BV(ACIE);									// now set ACIE for interrupt (disabled --> done within Timer1)

	/* ADC reference set to AREF */
	acAdcConvertNowState = 0x11;							// set FSM address to "discard next conversion"
    1268:	81 e1       	ldi	r24, 0x11	; 17
    126a:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>
	ADMUX = (0b01 << REFS0) | 0x1;							// keep ADLAR off, switch to channel ADC1 (phase input)
    126e:	81 e4       	ldi	r24, 0x41	; 65
    1270:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	/* start the initial conversion */
	ADCSRA |= _BV(ADSC) | _BV(ADIF);						// start first conversion of the conversion train and clear pending interrupt flag
    1274:	80 81       	ld	r24, Z
    1276:	80 65       	ori	r24, 0x50	; 80
    1278:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);									// enable ADC interrupt
    127a:	80 81       	ld	r24, Z
    127c:	88 60       	ori	r24, 0x08	; 8
    127e:	80 83       	st	Z, r24
    1280:	08 95       	ret

00001282 <anlgComp_fw_close>:
}

void anlgComp_fw_close(void)
{
	/* disable interrupt, disable analog comparator */
	ACSR = (ACSR & ~(_BV(ACIE))) | _BV(ACD);
    1282:	80 b7       	in	r24, 0x30	; 48
    1284:	87 77       	andi	r24, 0x77	; 119
    1286:	80 68       	ori	r24, 0x80	; 128
    1288:	80 bf       	out	0x30, r24	; 48

	/* turn off ADC and Analog Comparator */
	ADCSRA = (0b111 << ADPS0);								// disable but keep the prescaler output at the lowest frequency
    128a:	87 e0       	ldi	r24, 0x07	; 7
    128c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0;												// disable Analog Comparator Multiplex Enable
    1290:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

	/* turn off reference voltage at selection */
	ADMUX = 0;
    1294:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	/* disable power for ADC, reference voltage and analog comparator */
	PRR |= _BV(PRADC);
    1298:	e4 e6       	ldi	r30, 0x64	; 100
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	81 60       	ori	r24, 0x01	; 1
    12a0:	80 83       	st	Z, r24
    12a2:	08 95       	ret

000012a4 <anlgComp_fw_startAdcConvertion>:
#if 0
	set_sleep_mode(SLEEP_MODE_ADC);							// do not use SLEEP_MODE_ADC due to the fact that the timers are stopped
	sleep_enable();
	sleep_cpu();
#else
	ADCSRA |= _BV(ADSC);									// start conversion
    12a4:	ea e7       	ldi	r30, 0x7A	; 122
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	80 64       	ori	r24, 0x40	; 64
    12ac:	80 83       	st	Z, r24
    12ae:	08 95       	ret

000012b0 <__vector_21>:
 *
 * = 19 clocks --> 0.95 µs until sei() is done
 */
//void anlgComp_fw_ISR_ADC() - __vector_21
ISR(ADC_vect, ISR_BLOCK)
{
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
	//sleep_disable();

	/* read the ADC value */
	uint8_t localADCL = ADCL;								// read LSB first
    12d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint8_t localADCH = ADCH;
    12d6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	sei();
    12da:	78 94       	sei

	uint16_t adVal  =  localADCL | (localADCH << 8);
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	92 2b       	or	r25, r18

	switch (acAdcConvertNowState)
    12e0:	20 91 2b 05 	lds	r18, 0x052B	; 0x80052b <acAdcConvertNowState>
    12e4:	28 30       	cpi	r18, 0x08	; 8
    12e6:	91 f1       	breq	.+100    	; 0x134c <__vector_21+0x9c>
    12e8:	28 f4       	brcc	.+10     	; 0x12f4 <__vector_21+0x44>
    12ea:	22 23       	and	r18, r18
    12ec:	e1 f0       	breq	.+56     	; 0x1326 <__vector_21+0x76>
    12ee:	21 30       	cpi	r18, 0x01	; 1
    12f0:	41 f0       	breq	.+16     	; 0x1302 <__vector_21+0x52>
    12f2:	30 c0       	rjmp	.+96     	; 0x1354 <__vector_21+0xa4>
    12f4:	21 31       	cpi	r18, 0x11	; 17
    12f6:	b9 f1       	breq	.+110    	; 0x1366 <__vector_21+0xb6>
    12f8:	28 31       	cpi	r18, 0x18	; 24
    12fa:	11 f1       	breq	.+68     	; 0x1340 <__vector_21+0x90>
    12fc:	20 31       	cpi	r18, 0x10	; 16
    12fe:	51 f5       	brne	.+84     	; 0x1354 <__vector_21+0xa4>
    1300:	0d c0       	rjmp	.+26     	; 0x131c <__vector_21+0x6c>
	{
	case 0x01:
		/* store PHASE value */
		acAdcCh[1] = adVal;
    1302:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <acAdcCh+0x3>
    1306:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <acAdcCh+0x2>

		/* switch to ADC input channel 0 - PWM analog value */
		acAdcConvertNowState = 0x10;
    130a:	80 e1       	ldi	r24, 0x10	; 16
    130c:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>
		ADMUX = 0b01000000;  								// = (0b01 << REFS0) | ((ac_adc_convertNowCh & 0x07) << MUX0);
    1310:	80 e4       	ldi	r24, 0x40	; 64
    1312:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1316:	0e 94 52 09 	call	0x12a4	; 0x12a4 <anlgComp_fw_startAdcConvertion>
		break;
    131a:	2d c0       	rjmp	.+90     	; 0x1376 <__vector_21+0xc6>

	case 0x10:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x00;
    131c:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <acAdcConvertNowState>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1320:	0e 94 52 09 	call	0x12a4	; 0x12a4 <anlgComp_fw_startAdcConvertion>
		break;
    1324:	28 c0       	rjmp	.+80     	; 0x1376 <__vector_21+0xc6>

	case 0x00:
		/* store PWM analog value */
		acAdcCh[0] = adVal;
    1326:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <acAdcCh+0x1>
    132a:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <acAdcCh>

		/* switch to ADC input channel for temperature */
		acAdcConvertNowState = 0x18;
    132e:	88 e1       	ldi	r24, 0x18	; 24
    1330:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>

		/* switch over to temperature conversion */
		ADMUX = 0b11001000;  								// = (0b11 << REFS0) | (0x08 << MUX0);
    1334:	88 ec       	ldi	r24, 0xC8	; 200
    1336:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    133a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <anlgComp_fw_startAdcConvertion>
		break;
    133e:	1b c0       	rjmp	.+54     	; 0x1376 <__vector_21+0xc6>

	case 0x18:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x08;
    1340:	88 e0       	ldi	r24, 0x08	; 8
    1342:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1346:	0e 94 52 09 	call	0x12a4	; 0x12a4 <anlgComp_fw_startAdcConvertion>
		break;
    134a:	15 c0       	rjmp	.+42     	; 0x1376 <__vector_21+0xc6>

	case 0x08:
		acAdcCh[2] = adVal;
    134c:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <acAdcCh+0x5>
    1350:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <acAdcCh+0x4>
		// no break
	default:
		/* switch to ADC input channel 1 - PHASE value */
		acAdcConvertNowState = 0x11;
    1354:	81 e1       	ldi	r24, 0x11	; 17
    1356:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>
		ADMUX = 0b01000000 | 1;  							// = (0b01 << REFS0) | ((ac_adc_convertNowCh & 0x07) << MUX0);
    135a:	81 e4       	ldi	r24, 0x41	; 65
    135c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1360:	0e 94 52 09 	call	0x12a4	; 0x12a4 <anlgComp_fw_startAdcConvertion>
		break;
    1364:	08 c0       	rjmp	.+16     	; 0x1376 <__vector_21+0xc6>

	case 0x11:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x01;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <acAdcConvertNowState>

		/* update ADC counter to inform about a new conversion train is ready to be read */
		acAdcConvertNowCntr++;
    136c:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <acAdcConvertNowCntr>
    1370:	8f 5f       	subi	r24, 0xFF	; 255
    1372:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <acAdcConvertNowCntr>

		/* end of conversion train - no more ADSC. Woken up by the next rising edge of PPS in ISR(ANALOG_COMP_vect, ISR_BLOCK) */
		break;
	}
}
    1376:	ff 91       	pop	r31
    1378:	ef 91       	pop	r30
    137a:	bf 91       	pop	r27
    137c:	af 91       	pop	r26
    137e:	9f 91       	pop	r25
    1380:	8f 91       	pop	r24
    1382:	7f 91       	pop	r23
    1384:	6f 91       	pop	r22
    1386:	5f 91       	pop	r21
    1388:	4f 91       	pop	r20
    138a:	3f 91       	pop	r19
    138c:	2f 91       	pop	r18
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <clkFastCtr_fw_init>:


void clkFastCtr_fw_init(void)
{
	/* power up this module */
	PRR &= ~(_BV(PRTIM1));
    1398:	e4 e6       	ldi	r30, 0x64	; 100
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	87 7f       	andi	r24, 0xF7	; 247
    13a0:	80 83       	st	Z, r24

	/* clear the timer */
	TCNT1H = 0;												// write high byte first
    13a2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
    13a6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	/* set the timer top value for 20.000 clocks @ 20MHz --> 1ms */
	OCR1AH = (OCR1_TOP_VALUE >> 8);							// write high byte first
    13aa:	8e e4       	ldi	r24, 0x4E	; 78
    13ac:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = (OCR1_TOP_VALUE & 0xff);
    13b0:	8f e1       	ldi	r24, 0x1F	; 31
    13b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	/* set the timer-1 mode of operation: 0x4 = CTC, counting up, TOP := OCR1A [. . WGM01 WGM00] */
	TCCR1A = (0b00<<WGM10);
    13b6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	/* set the timer-1 mode of operation: 0x4 = CTC, counting up, TOP := OCR1A [WGM03 WGM02 . .] */
	/* no ICNC1 input filtering */
	/* ICES is set to trigger on the rising edge of the Comparator output --> rising edge of AIN0 */
	/* set the timer-1 clock source to 20 MHz XTAL */
	TCCR1B = _BV(ICES1)						|				// select rising edge of the ICP1/AIN0 input to trigger
    13ba:	89 e4       	ldi	r24, 0x49	; 73
    13bc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			 (0b01<<WGM12)					|				// WGM03 WGM02
			 (0b001<<CS10);									// since now the timer runs

	/* ICF1 and OCF1A interrupt enable */
	TIMSK1 = _BV(ICIE1) 					|				// ICF1   - GPS PPS rising edge event
    13c0:	82 e2       	ldi	r24, 0x22	; 34
    13c2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    13c6:	08 95       	ret

000013c8 <clkFastCtr_fw_close>:
	PCICR  &= ~(PCIE2);
	PCMSK2 &= ~(PCINT20);
#endif

	/* switch off interrupts */
	TIMSK1 = 0;
    13c8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	/* switch clock source to halted */
	TCCR1B = 0;
    13cc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	/* no more power is needed for this module */
	PRR |= _BV(PRTIM1);
    13d0:	e4 e6       	ldi	r30, 0x64	; 100
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	88 60       	ori	r24, 0x08	; 8
    13d8:	80 83       	st	Z, r24
    13da:	08 95       	ret

000013dc <__vector_11>:
 *
 * = 54 clocks --> 2.70 µs until sei() is done
 */
//void clkFastCtr_fw_ISR_T1_CompA() - __vector_11
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    13dc:	1f 92       	push	r1
    13de:	0f 92       	push	r0
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	0f 92       	push	r0
    13e4:	11 24       	eor	r1, r1
    13e6:	2f 93       	push	r18
    13e8:	3f 93       	push	r19
    13ea:	8f 93       	push	r24
    13ec:	9f 93       	push	r25
    13ee:	af 93       	push	r26
    13f0:	bf 93       	push	r27
	/* this ISR is called every 20.000 clocks - repeating each ms again */

	/* the 32 bit timer overflows every 3 1/4 year */
	fastCtr1ms++;
    13f2:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <fastCtr1ms>
    13f6:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <fastCtr1ms+0x1>
    13fa:	a0 91 39 05 	lds	r26, 0x0539	; 0x800539 <fastCtr1ms+0x2>
    13fe:	b0 91 3a 05 	lds	r27, 0x053A	; 0x80053a <fastCtr1ms+0x3>
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	a1 1d       	adc	r26, r1
    1406:	b1 1d       	adc	r27, r1
    1408:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <fastCtr1ms>
    140c:	90 93 38 05 	sts	0x0538, r25	; 0x800538 <fastCtr1ms+0x1>
    1410:	a0 93 39 05 	sts	0x0539, r26	; 0x800539 <fastCtr1ms+0x2>
    1414:	b0 93 3a 05 	sts	0x053A, r27	; 0x80053a <fastCtr1ms+0x3>

	sei();													// since here we can accept interruptions
    1418:	78 94       	sei

	if (main_bf.mainStackCheck) {
    141a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    141e:	86 ff       	sbrs	r24, 6
    1420:	11 c0       	rjmp	.+34     	; 0x1444 <__vector_11+0x68>
		cli();
    1422:	f8 94       	cli
		uint8_t localStackLo = SPL;
    1424:	8d b7       	in	r24, 0x3d	; 61
		uint8_t localStackHi = SPH;
    1426:	2e b7       	in	r18, 0x3e	; 62
		sei();
    1428:	78 94       	sei

		uint16_t localStackAddr = (localStackHi << 8) | localStackLo;
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	92 2b       	or	r25, r18
		if (mainSCStackAddr > localStackAddr) {
    142e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <mainSCStackAddr>
    1432:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <mainSCStackAddr+0x1>
    1436:	82 17       	cp	r24, r18
    1438:	93 07       	cpc	r25, r19
    143a:	20 f4       	brcc	.+8      	; 0x1444 <__vector_11+0x68>
			mainSCStackAddr = localStackAddr;
    143c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <mainSCStackAddr+0x1>
    1440:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <mainSCStackAddr>
		}
	}
}
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti

0000145a <__vector_10>:
 *
 * = 39 clocks --> 1.95 µs until sei() is done
 */
//void clkFastCtr_fw_ISR_T1_Capt() - __vector_10
ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    145a:	1f 92       	push	r1
    145c:	0f 92       	push	r0
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	0f 92       	push	r0
    1462:	11 24       	eor	r1, r1
    1464:	2f 93       	push	r18
    1466:	4f 93       	push	r20
    1468:	5f 93       	push	r21
    146a:	6f 93       	push	r22
    146c:	7f 93       	push	r23
    146e:	8f 93       	push	r24
    1470:	9f 93       	push	r25
    1472:	ef 93       	push	r30
    1474:	ff 93       	push	r31
	/* rising edge of the PPS signal from df4iah_fw_anlgComp.c detected */

	/* take the current timestamp of the free floating 20 MHz timer */
	register uint8_t  localICR1L = ICR1L;					// capture timer value - low byte first
    1476:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	register uint8_t  localICR1H = ICR1H;
    147a:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
	register uint32_t localFastCtr1ms = fastCtr1ms;
    147e:	40 91 37 05 	lds	r20, 0x0537	; 0x800537 <fastCtr1ms>
    1482:	50 91 38 05 	lds	r21, 0x0538	; 0x800538 <fastCtr1ms+0x1>
    1486:	60 91 39 05 	lds	r22, 0x0539	; 0x800539 <fastCtr1ms+0x2>
    148a:	70 91 3a 05 	lds	r23, 0x053A	; 0x80053a <fastCtr1ms+0x3>

	sei();
    148e:	78 94       	sei

	//anlgComp_fw_startAdcConvertion();
	ADCSRA |= _BV(ADSC);									// start conversion
    1490:	ea e7       	ldi	r30, 0x7A	; 122
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	90 81       	ld	r25, Z
    1496:	90 64       	ori	r25, 0x40	; 64
    1498:	90 83       	st	Z, r25

	cli();
    149a:	f8 94       	cli
	fastStampTCNT1  = localICR1L | (localICR1H << 8);
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	92 2b       	or	r25, r18
    14a0:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <fastStampTCNT1+0x1>
    14a4:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <fastStampTCNT1>
	fastStampCtr1ms = localFastCtr1ms;
    14a8:	40 93 3b 05 	sts	0x053B, r20	; 0x80053b <fastStampCtr1ms>
    14ac:	50 93 3c 05 	sts	0x053C, r21	; 0x80053c <fastStampCtr1ms+0x1>
    14b0:	60 93 3d 05 	sts	0x053D, r22	; 0x80053d <fastStampCtr1ms+0x2>
    14b4:	70 93 3e 05 	sts	0x053E, r23	; 0x80053e <fastStampCtr1ms+0x3>
	sei();
    14b8:	78 94       	sei
}
    14ba:	ff 91       	pop	r31
    14bc:	ef 91       	pop	r30
    14be:	9f 91       	pop	r25
    14c0:	8f 91       	pop	r24
    14c2:	7f 91       	pop	r23
    14c4:	6f 91       	pop	r22
    14c6:	5f 91       	pop	r21
    14c8:	4f 91       	pop	r20
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <clkPullPwm_fw_init>:


void clkPullPwm_fw_init(void)
{
	// power up this module
	PRR &= ~(_BV(PRTIM0));
    14d6:	e4 e6       	ldi	r30, 0x64	; 100
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8f 7d       	andi	r24, 0xDF	; 223
    14de:	80 83       	st	Z, r24

	// set the timer-0 counter to zero.
	TCNT0 = 0x00;
    14e0:	16 bc       	out	0x26, r1	; 38

	// set the timer-0 PWM-B compare register
	OCR0B = DEFAULT_PWM_COUNT;
    14e2:	8a e5       	ldi	r24, 0x5A	; 90
    14e4:	88 bd       	out	0x28, r24	; 40

	// set the timer-0 mode of operation: 0x3 = Fast PWM, counting up, TOP := MAX [. . WGM01 WGM00]
	// set the timer-0 compare-B waveform generator to: PWM, 1 at >= match, 0 else
	TCCR0A = (0b10<<COM0B0) | (0b11<<WGM00);
    14e6:	83 e2       	ldi	r24, 0x23	; 35
    14e8:	84 bd       	out	0x24, r24	; 36

	// set the timer-0 mode of operation: 0x3 = Fast PWM, counting up, TOP := MAX [WGM02 . .]
	// set the timer-0 clock source to 20 MHz XTAL.
	TCCR0B = (0b0<<WGM02) | (0b001<<CS00);
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	85 bd       	out	0x25, r24	; 37

	// set the timer-0 PWM-B compare output: setting data port for output
	DDR_OC0B_REG |= _BV(DDR_OC0B);
    14ee:	55 9a       	sbi	0x0a, 5	; 10


	/* single memory access */
	if (memory_fw_isEepromBlockValid(BLOCK_REFOSC_NR)) {
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	0e 94 b1 22 	call	0x4562	; 0x4562 <memory_fw_isEepromBlockValid>
    14f6:	88 23       	and	r24, r24
    14f8:	c9 f0       	breq	.+50     	; 0x152c <clkPullPwm_fw_init+0x56>
		memory_fw_readEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial));
    14fa:	4a e5       	ldi	r20, 0x5A	; 90
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	82 e4       	ldi	r24, 0x42	; 66
    1502:	95 e0       	ldi	r25, 0x05	; 5
    1504:	0e 94 8b 22 	call	0x4516	; 0x4516 <memory_fw_readEEpromPage>
		memory_fw_readEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial_sub, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial_sub));
    1508:	4b e5       	ldi	r20, 0x5B	; 91
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	61 e0       	ldi	r22, 0x01	; 1
    150e:	81 e4       	ldi	r24, 0x41	; 65
    1510:	95 e0       	ldi	r25, 0x05	; 5
    1512:	0e 94 8b 22 	call	0x4516	; 0x4516 <memory_fw_readEEpromPage>

		uint8_t sreg = SREG;
    1516:	8f b7       	in	r24, 0x3f	; 63
		cli();
    1518:	f8 94       	cli
		fastPwmLoopVal		= pullCoef_b02_pwm_initial;
    151a:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pullCoef_b02_pwm_initial>
    151e:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <fastPwmLoopVal>
		fastPwmSubLoopVal	= pullCoef_b02_pwm_initial_sub;
    1522:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <pullCoef_b02_pwm_initial_sub>
    1526:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <fastPwmSubLoopVal>
		SREG = sreg;
    152a:	8f bf       	out	0x3f, r24	; 63
	}

	/* init interrupt */
	TIFR0  |= _BV(TOV0);
    152c:	a8 9a       	sbi	0x15, 0	; 21
	TIMSK0 |= _BV(TOIE0);
    152e:	ee e6       	ldi	r30, 0x6E	; 110
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	81 60       	ori	r24, 0x01	; 1
    1536:	80 83       	st	Z, r24
    1538:	08 95       	ret

0000153a <clkPullPwm_fw_close>:
}

void clkPullPwm_fw_close(void)
{
	/* disable interrupts */
	TIMSK0 = 0;
    153a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

	// reset timer-0 PWM-B compare output port
	DDR_OC0B_REG &= ~(_BV(DDR_OC0B));
    153e:	55 98       	cbi	0x0a, 5	; 10

	// stop timer-0
	TCCR0B = (0b00<<WGM02)  | (0b000<<CS00);
    1540:	15 bc       	out	0x25, r1	; 37

	// stop timer-0 compare output
	TCCR0A = (0b00<<COM0B0) | (0b00<<WGM00);
    1542:	14 bc       	out	0x24, r1	; 36

	// set the timer-0 compare-B value to zero.
	OCR0B = 0x00;
    1544:	18 bc       	out	0x28, r1	; 40

	// set the timer-0 counter to zero.
	TCNT0 = 0x00;
    1546:	16 bc       	out	0x26, r1	; 38

	// no more power is needed for this module
	PRR |= _BV(PRTIM0);
    1548:	e4 e6       	ldi	r30, 0x64	; 100
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 62       	ori	r24, 0x20	; 32
    1550:	80 83       	st	Z, r24
    1552:	08 95       	ret

00001554 <__vector_16>:
 *
 * = 13 clocks --> 0.65 µs until sei() is done
 */
//void clkPullPwm_fw_ISR_T0_OVF() - __vector_16
ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	8f 93       	push	r24
    1560:	9f 93       	push	r25
	sei();
    1562:	78 94       	sei

	/* minimal Sub-PWM value for its FAST_PWM_SUB_BITCNT */
	const uint8_t localSubPwmInc = (1 << (8 - FAST_PWM_SUB_BITCNT));

	if (fastPwmSingleLoad) {
    1564:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <fastPwmSingleLoad>
    1568:	88 23       	and	r24, r24
    156a:	61 f0       	breq	.+24     	; 0x1584 <__vector_16+0x30>
		cli();
    156c:	f8 94       	cli
		OCR0B			= fastPwmSingleVal;
    156e:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <fastPwmSingleVal>
    1572:	88 bd       	out	0x28, r24	; 40
		fastPwmSubCmp	= fastPwmSubSingleVal;
    1574:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <fastPwmSubSingleVal>
    1578:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <fastPwmSubCmp>
		sei();
    157c:	78 94       	sei

		/* single value loaded */
		fastPwmSingleLoad = 0;
    157e:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <fastPwmSingleLoad>
    1582:	09 c0       	rjmp	.+18     	; 0x1596 <__vector_16+0x42>

	} else {
		/* set the T0 compare B register with the current setting of the integer PWM value */
		cli();
    1584:	f8 94       	cli
		OCR0B			= fastPwmLoopVal;
    1586:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <fastPwmLoopVal>
    158a:	88 bd       	out	0x28, r24	; 40
		fastPwmSubCmp	= fastPwmSubLoopVal;
    158c:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <fastPwmSubLoopVal>
    1590:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <fastPwmSubCmp>
		sei();
    1594:	78 94       	sei
	}

	/* increment if counter is lower than the sub-compare value to get a Sub-PWM (fractional part) */
	cli();
    1596:	f8 94       	cli
	if (fastPwmSubCnt < fastPwmSubCmp) {
    1598:	90 91 30 05 	lds	r25, 0x0530	; 0x800530 <fastPwmSubCnt>
    159c:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <fastPwmSubCmp>
    15a0:	98 17       	cp	r25, r24
    15a2:	18 f4       	brcc	.+6      	; 0x15aa <__vector_16+0x56>
		OCR0B++;
    15a4:	88 b5       	in	r24, 0x28	; 40
    15a6:	8f 5f       	subi	r24, 0xFF	; 255
    15a8:	88 bd       	out	0x28, r24	; 40
	}
	sei();
    15aa:	78 94       	sei

	/* sub-counter increment */
	fastPwmSubCnt += localSubPwmInc;						// overflowing is intended
    15ac:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <fastPwmSubCnt>
    15b0:	8f 5f       	subi	r24, 0xFF	; 255
    15b2:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <fastPwmSubCnt>
}
    15b6:	9f 91       	pop	r25
    15b8:	8f 91       	pop	r24
    15ba:	0f 90       	pop	r0
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	0f 90       	pop	r0
    15c0:	1f 90       	pop	r1
    15c2:	18 95       	reti

000015c4 <recalcEepromCrc>:

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
}
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <recalcEepromCrc+0xc>
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	18 2f       	mov	r17, r24
    15d6:	7b 01       	movw	r14, r22
    15d8:	0e 94 53 22 	call	0x44a6	; 0x44a6 <memory_fw_getSealMarker>
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	a7 01       	movw	r20, r14
    15e2:	62 e0       	ldi	r22, 0x02	; 2
    15e4:	ce 01       	movw	r24, r28
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <memory_fw_writeEEpromPage>
    15ec:	81 2f       	mov	r24, r17
    15ee:	0e 94 50 23 	call	0x46a0	; 0x46a0 <memory_fw_manageBlock>
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	08 95       	ret

00001602 <__vector_6>:
    1602:	18 95       	reti

00001604 <main_fw_calcTimerAdj>:

float main_fw_calcTimerAdj(float pwmAdjust, uint8_t* intVal, uint8_t* intSubVal)
{
    1604:	4f 92       	push	r4
    1606:	5f 92       	push	r5
    1608:	6f 92       	push	r6
    160a:	7f 92       	push	r7
    160c:	8f 92       	push	r8
    160e:	9f 92       	push	r9
    1610:	af 92       	push	r10
    1612:	bf 92       	push	r11
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	4b 01       	movw	r8, r22
    1626:	5c 01       	movw	r10, r24
    1628:	7a 01       	movw	r14, r20
    162a:	69 01       	movw	r12, r18
}

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    162c:	fa 01       	movw	r30, r20
    162e:	60 81       	ld	r22, Z
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    163a:	2b 01       	movw	r4, r22
    163c:	3c 01       	movw	r6, r24
    163e:	f6 01       	movw	r30, r12
    1640:	60 81       	ld	r22, Z
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e8       	ldi	r20, 0x80	; 128
    1652:	5b e3       	ldi	r21, 0x3B	; 59
    1654:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    1658:	9b 01       	movw	r18, r22
    165a:	ac 01       	movw	r20, r24
    165c:	c3 01       	movw	r24, r6
    165e:	b2 01       	movw	r22, r4
    1660:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    1664:	9b 01       	movw	r18, r22
    1666:	ac 01       	movw	r20, r24
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
	const float maxLimit = 255.0f - (1.0f / (1 << FAST_PWM_SUB_BITCNT));	// NOT 256.0f due to the compare unit that catches not around the overflow value

	/* add the time offset to the current PWM settings */
	fltTime += pwmAdjust;
    1668:	c5 01       	movw	r24, r10
    166a:	b4 01       	movw	r22, r8
    166c:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    1670:	06 2f       	mov	r16, r22
    1672:	d7 2f       	mov	r29, r23
    1674:	c8 2f       	mov	r28, r24
    1676:	19 2f       	mov	r17, r25

	/* windowing the next value into the 8-Bit range */
	if (fltTime < 0.0f) {
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	a9 01       	movw	r20, r18
    167e:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    1682:	88 23       	and	r24, r24
    1684:	fc f0       	brlt	.+62     	; 0x16c4 <main_fw_calcTimerAdj+0xc0>
		residue = fltTime;
		fltTime = 0.0f;

	} else if (fltTime > maxLimit) {
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4e e7       	ldi	r20, 0x7E	; 126
    168c:	53 e4       	ldi	r21, 0x43	; 67
    168e:	60 2f       	mov	r22, r16
    1690:	7d 2f       	mov	r23, r29
    1692:	8c 2f       	mov	r24, r28
    1694:	91 2f       	mov	r25, r17
    1696:	0e 94 a4 31 	call	0x6348	; 0x6348 <__gesf2>
    169a:	18 16       	cp	r1, r24
    169c:	e4 f4       	brge	.+56     	; 0x16d6 <main_fw_calcTimerAdj+0xd2>
		residue = fltTime - maxLimit;
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	3f ef       	ldi	r19, 0xFF	; 255
    16a2:	4e e7       	ldi	r20, 0x7E	; 126
    16a4:	53 e4       	ldi	r21, 0x43	; 67
    16a6:	60 2f       	mov	r22, r16
    16a8:	7d 2f       	mov	r23, r29
    16aa:	8c 2f       	mov	r24, r28
    16ac:	91 2f       	mov	r25, r17
    16ae:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    16b2:	96 2e       	mov	r9, r22
    16b4:	a7 2e       	mov	r10, r23
    16b6:	b8 2e       	mov	r11, r24
    16b8:	89 2e       	mov	r8, r25
		fltTime = maxLimit;
    16ba:	00 e0       	ldi	r16, 0x00	; 0
    16bc:	df ef       	ldi	r29, 0xFF	; 255
    16be:	ce e7       	ldi	r28, 0x7E	; 126
    16c0:	13 e4       	ldi	r17, 0x43	; 67
    16c2:	0d c0       	rjmp	.+26     	; 0x16de <main_fw_calcTimerAdj+0xda>
	/* add the time offset to the current PWM settings */
	fltTime += pwmAdjust;

	/* windowing the next value into the 8-Bit range */
	if (fltTime < 0.0f) {
		residue = fltTime;
    16c4:	90 2e       	mov	r9, r16
    16c6:	ad 2e       	mov	r10, r29
    16c8:	bc 2e       	mov	r11, r28
    16ca:	81 2e       	mov	r8, r17
		fltTime = 0.0f;
    16cc:	00 e0       	ldi	r16, 0x00	; 0
    16ce:	d0 e0       	ldi	r29, 0x00	; 0
    16d0:	c0 e0       	ldi	r28, 0x00	; 0
    16d2:	10 e0       	ldi	r17, 0x00	; 0
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <main_fw_calcTimerAdj+0xda>
}

float main_fw_calcTimerAdj(float pwmAdjust, uint8_t* intVal, uint8_t* intSubVal)
{
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
    16d6:	91 2c       	mov	r9, r1
    16d8:	a1 2c       	mov	r10, r1
    16da:	b1 2c       	mov	r11, r1
    16dc:	81 2c       	mov	r8, r1
		residue = fltTime - maxLimit;
		fltTime = maxLimit;
	}

	/* add rounding value */
	fltTime += 1.0f / 512.0f;
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	5b e3       	ldi	r21, 0x3B	; 59
    16e6:	60 2f       	mov	r22, r16
    16e8:	7d 2f       	mov	r23, r29
    16ea:	8c 2f       	mov	r24, r28
    16ec:	91 2f       	mov	r25, r17
    16ee:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    16f2:	2b 01       	movw	r4, r22
    16f4:	3c 01       	movw	r6, r24

	/* break up into integer and fractional parts */
	*intVal		= (uint8_t) fltTime;
    16f6:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__fixunssfsi>
    16fa:	f7 01       	movw	r30, r14
    16fc:	60 83       	st	Z, r22
	*intSubVal	= (uint8_t) ((fltTime - floorf(fltTime)) * 256.0f);
    16fe:	c3 01       	movw	r24, r6
    1700:	b2 01       	movw	r22, r4
    1702:	0e 94 d7 30 	call	0x61ae	; 0x61ae <floor>
    1706:	9b 01       	movw	r18, r22
    1708:	ac 01       	movw	r20, r24
    170a:	c3 01       	movw	r24, r6
    170c:	b2 01       	movw	r22, r4
    170e:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	53 e4       	ldi	r21, 0x43	; 67
    171a:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    171e:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__fixunssfsi>
    1722:	f6 01       	movw	r30, r12
    1724:	60 83       	st	Z, r22
	return residue;
}
    1726:	69 2d       	mov	r22, r9
    1728:	7a 2d       	mov	r23, r10
    172a:	8b 2d       	mov	r24, r11
    172c:	98 2d       	mov	r25, r8
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	cf 90       	pop	r12
    173e:	bf 90       	pop	r11
    1740:	af 90       	pop	r10
    1742:	9f 90       	pop	r9
    1744:	8f 90       	pop	r8
    1746:	7f 90       	pop	r7
    1748:	6f 90       	pop	r6
    174a:	5f 90       	pop	r5
    174c:	4f 90       	pop	r4
    174e:	08 95       	ret

00001750 <pwmTimerCorrection>:
		holdOffTime = 0;
	}
}

static float pwmTimerCorrection(float correction, uint8_t doSingleLoad)
{
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	00 d0       	rcall	.+0      	; 0x1762 <pwmTimerCorrection+0x12>
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	6b 01       	movw	r12, r22
    1768:	7c 01       	movw	r14, r24
    176a:	14 2f       	mov	r17, r20
	float ret = 0.0f;

	if (correction) {
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	a9 01       	movw	r20, r18
    1772:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    1776:	88 23       	and	r24, r24
    1778:	41 f1       	breq	.+80     	; 0x17ca <pwmTimerCorrection+0x7a>
		uint8_t localFastPwmXXXVal;
		uint8_t localFastPwmSubXXXVal;

		uint8_t sreg = SREG;
    177a:	0f b7       	in	r16, 0x3f	; 63
		cli();
    177c:	f8 94       	cli
		localFastPwmXXXVal		= fastPwmLoopVal;
    177e:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <fastPwmLoopVal>
    1782:	8a 83       	std	Y+2, r24	; 0x02
		localFastPwmSubXXXVal	= fastPwmSubLoopVal;
    1784:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <fastPwmSubLoopVal>
    1788:	89 83       	std	Y+1, r24	; 0x01
		SREG = sreg;
    178a:	0f bf       	out	0x3f, r16	; 63

		ret =  main_fw_calcTimerAdj(correction, &localFastPwmXXXVal, &localFastPwmSubXXXVal);
    178c:	9e 01       	movw	r18, r28
    178e:	2f 5f       	subi	r18, 0xFF	; 255
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	ae 01       	movw	r20, r28
    1794:	4e 5f       	subi	r20, 0xFE	; 254
    1796:	5f 4f       	sbci	r21, 0xFF	; 255
    1798:	c7 01       	movw	r24, r14
    179a:	b6 01       	movw	r22, r12
    179c:	0e 94 02 0b 	call	0x1604	; 0x1604 <main_fw_calcTimerAdj>

		cli();
    17a0:	f8 94       	cli
		if (!doSingleLoad) {
    17a2:	11 11       	cpse	r17, r1
    17a4:	07 c0       	rjmp	.+14     	; 0x17b4 <pwmTimerCorrection+0x64>
			fastPwmLoopVal		= localFastPwmXXXVal;			// single frequency correction
    17a6:	2a 81       	ldd	r18, Y+2	; 0x02
    17a8:	20 93 36 05 	sts	0x0536, r18	; 0x800536 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubXXXVal;
    17ac:	29 81       	ldd	r18, Y+1	; 0x01
    17ae:	20 93 35 05 	sts	0x0535, r18	; 0x800535 <fastPwmSubLoopVal>
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <pwmTimerCorrection+0x76>

		} else {
			fastPwmSingleVal	= localFastPwmXXXVal;			// phase hammering correction
    17b4:	2a 81       	ldd	r18, Y+2	; 0x02
    17b6:	20 93 33 05 	sts	0x0533, r18	; 0x800533 <fastPwmSingleVal>
			fastPwmSubSingleVal	= localFastPwmSubXXXVal;
    17ba:	29 81       	ldd	r18, Y+1	; 0x01
    17bc:	20 93 32 05 	sts	0x0532, r18	; 0x800532 <fastPwmSubSingleVal>
			fastPwmSingleLoad	= true;
    17c0:	21 e0       	ldi	r18, 0x01	; 1
    17c2:	20 93 34 05 	sts	0x0534, r18	; 0x800534 <fastPwmSingleLoad>
		}
		SREG = sreg;
    17c6:	0f bf       	out	0x3f, r16	; 63
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <pwmTimerCorrection+0x80>
	}
}

static float pwmTimerCorrection(float correction, uint8_t doSingleLoad)
{
	float ret = 0.0f;
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	cb 01       	movw	r24, r22
		}
		SREG = sreg;
	}

	return ret;
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	ff 90       	pop	r15
    17de:	ef 90       	pop	r14
    17e0:	df 90       	pop	r13
    17e2:	cf 90       	pop	r12
    17e4:	08 95       	ret

000017e6 <calcPhaseResidue>:

static void calcPhaseResidue(void)
{
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	cf 93       	push	r28
	uint8_t localFastPwmSingleLoad;

	uint8_t sreg = SREG;
    17f0:	8f b7       	in	r24, 0x3f	; 63
	cli();
    17f2:	f8 94       	cli
	localFastPwmSingleLoad = fastPwmSingleLoad;
    17f4:	c0 91 34 05 	lds	r28, 0x0534	; 0x800534 <fastPwmSingleLoad>
	SREG = sreg;
    17f8:	8f bf       	out	0x3f, r24	; 63

	if (fastPwmSingleDiffSum && (!localFastPwmSingleLoad)) {  // enter only if an offset is accumulated and the last phase correction is loaded
    17fa:	c0 90 2c 05 	lds	r12, 0x052C	; 0x80052c <fastPwmSingleDiffSum>
    17fe:	d0 90 2d 05 	lds	r13, 0x052D	; 0x80052d <fastPwmSingleDiffSum+0x1>
    1802:	e0 90 2e 05 	lds	r14, 0x052E	; 0x80052e <fastPwmSingleDiffSum+0x2>
    1806:	f0 90 2f 05 	lds	r15, 0x052F	; 0x80052f <fastPwmSingleDiffSum+0x3>
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	a9 01       	movw	r20, r18
    1810:	c7 01       	movw	r24, r14
    1812:	b6 01       	movw	r22, r12
    1814:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    1818:	88 23       	and	r24, r24
    181a:	79 f0       	breq	.+30     	; 0x183a <calcPhaseResidue+0x54>
    181c:	c1 11       	cpse	r28, r1
    181e:	0d c0       	rjmp	.+26     	; 0x183a <calcPhaseResidue+0x54>
		/* Calculate and execute phase correction */
		fastPwmSingleDiffSum = pwmTimerCorrection(fastPwmSingleDiffSum, true);
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	c7 01       	movw	r24, r14
    1824:	b6 01       	movw	r22, r12
    1826:	0e 94 a8 0b 	call	0x1750	; 0x1750 <pwmTimerCorrection>
    182a:	60 93 2c 05 	sts	0x052C, r22	; 0x80052c <fastPwmSingleDiffSum>
    182e:	70 93 2d 05 	sts	0x052D, r23	; 0x80052d <fastPwmSingleDiffSum+0x1>
    1832:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <fastPwmSingleDiffSum+0x2>
    1836:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <fastPwmSingleDiffSum+0x3>
	}
}
    183a:	cf 91       	pop	r28
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	cf 90       	pop	r12
    1844:	08 95       	ret

00001846 <main_fw_strncmp>:
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
	}
}

int main_fw_strncmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	8c 01       	movw	r16, r24
    1850:	ea 01       	movw	r28, r20
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
    1852:	9a 01       	movw	r18, r20
    1854:	ab 01       	movw	r20, r22
    1856:	6f e8       	ldi	r22, 0x8F	; 143
    1858:	73 e0       	ldi	r23, 0x03	; 3
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
	return strncmp((const char*) msg, (const char*) mainFormatBuffer, size);
    1860:	ae 01       	movw	r20, r28
    1862:	6f e8       	ldi	r22, 0x8F	; 143
    1864:	73 e0       	ldi	r23, 0x03	; 3
    1866:	c8 01       	movw	r24, r16
    1868:	0e 94 d5 3c 	call	0x79aa	; 0x79aa <strncmp>
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	08 95       	ret

00001876 <main_fw_memcmp>:

int main_fw_memcmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	8c 01       	movw	r16, r24
    1880:	ea 01       	movw	r28, r20
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
    1882:	9a 01       	movw	r18, r20
    1884:	ab 01       	movw	r20, r22
    1886:	6f e8       	ldi	r22, 0x8F	; 143
    1888:	73 e0       	ldi	r23, 0x03	; 3
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
	return memcmp((const char*) msg, (const char*) mainFormatBuffer, size);
    1890:	ae 01       	movw	r20, r28
    1892:	6f e8       	ldi	r22, 0x8F	; 143
    1894:	73 e0       	ldi	r23, 0x03	; 3
    1896:	c8 01       	movw	r24, r16
    1898:	0e 94 bf 3c 	call	0x797e	; 0x797e <memcmp>
}
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	08 95       	ret

000018a6 <main_fw_nmeaUtcPlusOneSec>:

void main_fw_nmeaUtcPlusOneSec(void) {
    18a6:	cf 92       	push	r12
    18a8:	df 92       	push	r13
    18aa:	ef 92       	push	r14
    18ac:	ff 92       	push	r15
	++main_nmeaTimeUtcInt;
    18ae:	c0 90 55 05 	lds	r12, 0x0555	; 0x800555 <main_nmeaTimeUtcInt>
    18b2:	d0 90 56 05 	lds	r13, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    18b6:	e0 90 57 05 	lds	r14, 0x0557	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    18ba:	f0 90 58 05 	lds	r15, 0x0558	; 0x800558 <main_nmeaTimeUtcInt+0x3>
    18be:	2f ef       	ldi	r18, 0xFF	; 255
    18c0:	c2 1a       	sub	r12, r18
    18c2:	d2 0a       	sbc	r13, r18
    18c4:	e2 0a       	sbc	r14, r18
    18c6:	f2 0a       	sbc	r15, r18

	if ((main_nmeaTimeUtcInt % 100) > 59) {
    18c8:	c7 01       	movw	r24, r14
    18ca:	b6 01       	movw	r22, r12
    18cc:	24 e6       	ldi	r18, 0x64	; 100
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
    18d8:	6c 33       	cpi	r22, 0x3C	; 60
    18da:	71 05       	cpc	r23, r1
    18dc:	81 05       	cpc	r24, r1
    18de:	91 05       	cpc	r25, r1
    18e0:	4c f4       	brge	.+18     	; 0x18f4 <main_fw_nmeaUtcPlusOneSec+0x4e>
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
	return memcmp((const char*) msg, (const char*) mainFormatBuffer, size);
}

void main_fw_nmeaUtcPlusOneSec(void) {
	++main_nmeaTimeUtcInt;
    18e2:	c0 92 55 05 	sts	0x0555, r12	; 0x800555 <main_nmeaTimeUtcInt>
    18e6:	d0 92 56 05 	sts	0x0556, r13	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    18ea:	e0 92 57 05 	sts	0x0557, r14	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    18ee:	f0 92 58 05 	sts	0x0558, r15	; 0x800558 <main_nmeaTimeUtcInt+0x3>
    18f2:	11 c0       	rjmp	.+34     	; 0x1916 <main_fw_nmeaUtcPlusOneSec+0x70>

	if ((main_nmeaTimeUtcInt % 100) > 59) {
		main_nmeaTimeUtcInt -= main_nmeaTimeUtcInt % 100;
    18f4:	c6 1a       	sub	r12, r22
    18f6:	d7 0a       	sbc	r13, r23
    18f8:	e8 0a       	sbc	r14, r24
    18fa:	f9 0a       	sbc	r15, r25
		main_nmeaTimeUtcInt += 100;
    18fc:	84 e6       	ldi	r24, 0x64	; 100
    18fe:	c8 0e       	add	r12, r24
    1900:	d1 1c       	adc	r13, r1
    1902:	e1 1c       	adc	r14, r1
    1904:	f1 1c       	adc	r15, r1
    1906:	c0 92 55 05 	sts	0x0555, r12	; 0x800555 <main_nmeaTimeUtcInt>
    190a:	d0 92 56 05 	sts	0x0556, r13	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    190e:	e0 92 57 05 	sts	0x0557, r14	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    1912:	f0 92 58 05 	sts	0x0558, r15	; 0x800558 <main_nmeaTimeUtcInt+0x3>
	}

	if ((main_nmeaTimeUtcInt % 10000) > 5959) {
    1916:	c0 90 55 05 	lds	r12, 0x0555	; 0x800555 <main_nmeaTimeUtcInt>
    191a:	d0 90 56 05 	lds	r13, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    191e:	e0 90 57 05 	lds	r14, 0x0557	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    1922:	f0 90 58 05 	lds	r15, 0x0558	; 0x800558 <main_nmeaTimeUtcInt+0x3>
    1926:	c7 01       	movw	r24, r14
    1928:	b6 01       	movw	r22, r12
    192a:	20 e1       	ldi	r18, 0x10	; 16
    192c:	37 e2       	ldi	r19, 0x27	; 39
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
    1936:	68 34       	cpi	r22, 0x48	; 72
    1938:	27 e1       	ldi	r18, 0x17	; 23
    193a:	72 07       	cpc	r23, r18
    193c:	81 05       	cpc	r24, r1
    193e:	91 05       	cpc	r25, r1
    1940:	94 f0       	brlt	.+36     	; 0x1966 <main_fw_nmeaUtcPlusOneSec+0xc0>
		main_nmeaTimeUtcInt -= (main_nmeaTimeUtcInt % 10000)  /* - (main_nmeaTimeUtcSec % 100) */ ;  // with +1 this can be cut out
    1942:	c6 1a       	sub	r12, r22
    1944:	d7 0a       	sbc	r13, r23
    1946:	e8 0a       	sbc	r14, r24
    1948:	f9 0a       	sbc	r15, r25
		main_nmeaTimeUtcInt +=  10000;
    194a:	80 e1       	ldi	r24, 0x10	; 16
    194c:	c8 0e       	add	r12, r24
    194e:	87 e2       	ldi	r24, 0x27	; 39
    1950:	d8 1e       	adc	r13, r24
    1952:	e1 1c       	adc	r14, r1
    1954:	f1 1c       	adc	r15, r1
    1956:	c0 92 55 05 	sts	0x0555, r12	; 0x800555 <main_nmeaTimeUtcInt>
    195a:	d0 92 56 05 	sts	0x0556, r13	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    195e:	e0 92 57 05 	sts	0x0557, r14	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    1962:	f0 92 58 05 	sts	0x0558, r15	; 0x800558 <main_nmeaTimeUtcInt+0x3>
	}
}
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	df 90       	pop	r13
    196c:	cf 90       	pop	r12
    196e:	08 95       	ret

00001970 <main_fw_parseNmeaLineData>:

void main_fw_parseNmeaLineData(void) {
    1970:	8f 92       	push	r8
    1972:	9f 92       	push	r9
    1974:	af 92       	push	r10
    1976:	bf 92       	push	r11
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG01, sizeof(PM_PARSE_NMEA_MSG01));
    1988:	2d e3       	ldi	r18, 0x3D	; 61
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	48 e1       	ldi	r20, 0x18	; 24
    198e:	53 e0       	ldi	r21, 0x03	; 3
    1990:	6f e8       	ldi	r22, 0x8F	; 143
    1992:	73 e0       	ldi	r23, 0x03	; 3
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
	int len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    199a:	83 e4       	ldi	r24, 0x43	; 67
    199c:	95 e0       	ldi	r25, 0x05	; 5
    199e:	9f 93       	push	r25
    19a0:	8f 93       	push	r24
    19a2:	85 e4       	ldi	r24, 0x45	; 69
    19a4:	95 e0       	ldi	r25, 0x05	; 5
    19a6:	9f 93       	push	r25
    19a8:	8f 93       	push	r24
    19aa:	81 e6       	ldi	r24, 0x61	; 97
    19ac:	95 e0       	ldi	r25, 0x05	; 5
    19ae:	9f 93       	push	r25
    19b0:	8f 93       	push	r24
    19b2:	89 e6       	ldi	r24, 0x69	; 105
    19b4:	95 e0       	ldi	r25, 0x05	; 5
    19b6:	9f 93       	push	r25
    19b8:	8f 93       	push	r24
    19ba:	8f e6       	ldi	r24, 0x6F	; 111
    19bc:	95 e0       	ldi	r25, 0x05	; 5
    19be:	9f 93       	push	r25
    19c0:	8f 93       	push	r24
    19c2:	89 e4       	ldi	r24, 0x49	; 73
    19c4:	95 e0       	ldi	r25, 0x05	; 5
    19c6:	9f 93       	push	r25
    19c8:	8f 93       	push	r24
    19ca:	8a e4       	ldi	r24, 0x4A	; 74
    19cc:	95 e0       	ldi	r25, 0x05	; 5
    19ce:	9f 93       	push	r25
    19d0:	8f 93       	push	r24
    19d2:	8e e4       	ldi	r24, 0x4E	; 78
    19d4:	95 e0       	ldi	r25, 0x05	; 5
    19d6:	9f 93       	push	r25
    19d8:	8f 93       	push	r24
    19da:	8f e4       	ldi	r24, 0x4F	; 79
    19dc:	95 e0       	ldi	r25, 0x05	; 5
    19de:	9f 93       	push	r25
    19e0:	8f 93       	push	r24
    19e2:	83 e5       	ldi	r24, 0x53	; 83
    19e4:	95 e0       	ldi	r25, 0x05	; 5
    19e6:	9f 93       	push	r25
    19e8:	8f 93       	push	r24
    19ea:	85 e5       	ldi	r24, 0x55	; 85
    19ec:	95 e0       	ldi	r25, 0x05	; 5
    19ee:	9f 93       	push	r25
    19f0:	8f 93       	push	r24
    19f2:	0f e8       	ldi	r16, 0x8F	; 143
    19f4:	13 e0       	ldi	r17, 0x03	; 3
    19f6:	1f 93       	push	r17
    19f8:	0f 93       	push	r16
    19fa:	c1 e1       	ldi	r28, 0x11	; 17
    19fc:	d2 e0       	ldi	r29, 0x02	; 2
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <sscanf>
			&main_nmeaSatsUsed,
			&main_nmeaHdop,
			&main_nmeaAltitudeM,
			&main_checksum);

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG11, sizeof(PM_PARSE_NMEA_MSG11));
    1a06:	2f e0       	ldi	r18, 0x0F	; 15
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	49 e0       	ldi	r20, 0x09	; 9
    1a0c:	53 e0       	ldi	r21, 0x03	; 3
    1a0e:	b8 01       	movw	r22, r16
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1a16:	81 e7       	ldi	r24, 0x71	; 113
    1a18:	95 e0       	ldi	r25, 0x05	; 5
    1a1a:	9f 93       	push	r25
    1a1c:	8f 93       	push	r24
    1a1e:	1f 93       	push	r17
    1a20:	0f 93       	push	r16
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <sscanf>
			&main_nmeaMode2);
	if (len > 0) {
    1a2a:	2d b7       	in	r18, 0x3d	; 61
    1a2c:	3e b7       	in	r19, 0x3e	; 62
    1a2e:	20 5e       	subi	r18, 0xE0	; 224
    1a30:	3f 4f       	sbci	r19, 0xFF	; 255
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	3e bf       	out	0x3e, r19	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	2d bf       	out	0x3d, r18	; 61
    1a3c:	18 16       	cp	r1, r24
    1a3e:	19 06       	cpc	r1, r25
    1a40:	0c f0       	brlt	.+2      	; 0x1a44 <main_fw_parseNmeaLineData+0xd4>
    1a42:	66 c0       	rjmp	.+204    	; 0x1b10 <main_fw_parseNmeaLineData+0x1a0>
		main_fw_nmeaUtcPlusOneSec();
    1a44:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <main_fw_nmeaUtcPlusOneSec>

		if ((main_nmeaMode2 < 2) || (3 < main_nmeaMode2)) {
    1a48:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <main_nmeaMode2>
    1a4c:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <main_nmeaMode2+0x1>
    1a50:	02 97       	sbiw	r24, 0x02	; 2
    1a52:	02 97       	sbiw	r24, 0x02	; 2
    1a54:	20 f0       	brcs	.+8      	; 0x1a5e <main_fw_parseNmeaLineData+0xee>
			main_nmeaMode2 = 0;
    1a56:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <main_nmeaMode2+0x1>
    1a5a:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <main_nmeaMode2>
		}

		int ofs = 0, commaCnt = 0;
		for (int idx = serialCtxtRxBufferLen - 1; idx; --idx) {
    1a5e:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <serialCtxtRxBufferLen>
    1a62:	ce 2f       	mov	r28, r30
    1a64:	d0 e0       	ldi	r29, 0x00	; 0
    1a66:	21 97       	sbiw	r28, 0x01	; 1
    1a68:	39 f1       	breq	.+78     	; 0x1ab8 <main_fw_parseNmeaLineData+0x148>
			if (serialCtxtRxBuffer[idx] == '*') {
    1a6a:	de 01       	movw	r26, r28
    1a6c:	af 5e       	subi	r26, 0xEF	; 239
    1a6e:	bd 4f       	sbci	r27, 0xFD	; 253
    1a70:	8c 91       	ld	r24, X
    1a72:	8a 32       	cpi	r24, 0x2A	; 42
    1a74:	41 f4       	brne	.+16     	; 0x1a86 <main_fw_parseNmeaLineData+0x116>
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <main_fw_parseNmeaLineData+0x10e>
    1a78:	82 91       	ld	r24, -Z
    1a7a:	8a 32       	cpi	r24, 0x2A	; 42
    1a7c:	39 f4       	brne	.+14     	; 0x1a8c <main_fw_parseNmeaLineData+0x11c>
				ofs = idx;
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1a7e:	1c 16       	cp	r1, r28
    1a80:	1d 06       	cpc	r1, r29
    1a82:	3c f0       	brlt	.+14     	; 0x1a92 <main_fw_parseNmeaLineData+0x122>
    1a84:	19 c0       	rjmp	.+50     	; 0x1ab8 <main_fw_parseNmeaLineData+0x148>
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	e0 5f       	subi	r30, 0xF0	; 240
    1a8a:	fd 4f       	sbci	r31, 0xFD	; 253
		if ((main_nmeaMode2 < 2) || (3 < main_nmeaMode2)) {
			main_nmeaMode2 = 0;
		}

		int ofs = 0, commaCnt = 0;
		for (int idx = serialCtxtRxBufferLen - 1; idx; --idx) {
    1a8c:	21 97       	sbiw	r28, 0x01	; 1
    1a8e:	a1 f7       	brne	.-24     	; 0x1a78 <main_fw_parseNmeaLineData+0x108>
    1a90:	13 c0       	rjmp	.+38     	; 0x1ab8 <main_fw_parseNmeaLineData+0x148>
    1a92:	fe 01       	movw	r30, r28
    1a94:	ee 5e       	subi	r30, 0xEE	; 238
    1a96:	fd 4f       	sbci	r31, 0xFD	; 253
			if (serialCtxtRxBuffer[idx] == '*') {
				ofs = idx;
    1a98:	ce 01       	movw	r24, r28
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
			if (serialCtxtRxBuffer[idx] == ',') {
    1a9e:	22 91       	ld	r18, -Z
    1aa0:	2c 32       	cpi	r18, 0x2C	; 44
    1aa2:	41 f4       	brne	.+16     	; 0x1ab4 <main_fw_parseNmeaLineData+0x144>
				if (++commaCnt == 3) {
    1aa4:	4f 5f       	subi	r20, 0xFF	; 255
    1aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa8:	43 30       	cpi	r20, 0x03	; 3
    1aaa:	51 05       	cpc	r21, r1
    1aac:	19 f4       	brne	.+6      	; 0x1ab4 <main_fw_parseNmeaLineData+0x144>
					ofs = ++idx;
    1aae:	ec 01       	movw	r28, r24
    1ab0:	21 96       	adiw	r28, 0x01	; 1
					break;
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <main_fw_parseNmeaLineData+0x148>
			if (serialCtxtRxBuffer[idx] == '*') {
				ofs = idx;
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	99 f7       	brne	.-26     	; 0x1a9e <main_fw_parseNmeaLineData+0x12e>
					ofs = ++idx;
					break;
				}
			}
		}
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG12, sizeof(PM_PARSE_NMEA_MSG12));
    1ab8:	2c e0       	ldi	r18, 0x0C	; 12
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4d ef       	ldi	r20, 0xFD	; 253
    1abe:	52 e0       	ldi	r21, 0x02	; 2
    1ac0:	6f e8       	ldi	r22, 0x8F	; 143
    1ac2:	73 e0       	ldi	r23, 0x03	; 3
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		sscanf((char*) serialCtxtRxBuffer + ofs, (char*) mainFormatBuffer,
    1aca:	83 e4       	ldi	r24, 0x43	; 67
    1acc:	95 e0       	ldi	r25, 0x05	; 5
    1ace:	9f 93       	push	r25
    1ad0:	8f 93       	push	r24
    1ad2:	8d e5       	ldi	r24, 0x5D	; 93
    1ad4:	95 e0       	ldi	r25, 0x05	; 5
    1ad6:	9f 93       	push	r25
    1ad8:	8f 93       	push	r24
    1ada:	81 e6       	ldi	r24, 0x61	; 97
    1adc:	95 e0       	ldi	r25, 0x05	; 5
    1ade:	9f 93       	push	r25
    1ae0:	8f 93       	push	r24
    1ae2:	85 e6       	ldi	r24, 0x65	; 101
    1ae4:	95 e0       	ldi	r25, 0x05	; 5
    1ae6:	9f 93       	push	r25
    1ae8:	8f 93       	push	r24
    1aea:	8f e8       	ldi	r24, 0x8F	; 143
    1aec:	93 e0       	ldi	r25, 0x03	; 3
    1aee:	9f 93       	push	r25
    1af0:	8f 93       	push	r24
    1af2:	cf 5e       	subi	r28, 0xEF	; 239
    1af4:	dd 4f       	sbci	r29, 0xFD	; 253
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <sscanf>
    1afe:	2d b7       	in	r18, 0x3d	; 61
    1b00:	3e b7       	in	r19, 0x3e	; 62
    1b02:	24 5f       	subi	r18, 0xF4	; 244
    1b04:	3f 4f       	sbci	r19, 0xFF	; 255
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	3e bf       	out	0x3e, r19	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	2d bf       	out	0x3d, r18	; 61
				&main_nmeaHdop,
				&main_nmeaVdop,
				&main_checksum);
	}

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG21, sizeof(PM_PARSE_NMEA_MSG21));
    1b10:	23 e3       	ldi	r18, 0x33	; 51
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a ec       	ldi	r20, 0xCA	; 202
    1b16:	52 e0       	ldi	r21, 0x02	; 2
    1b18:	6f e8       	ldi	r22, 0x8F	; 143
    1b1a:	73 e0       	ldi	r23, 0x03	; 3
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1b22:	83 e4       	ldi	r24, 0x43	; 67
    1b24:	95 e0       	ldi	r25, 0x05	; 5
    1b26:	9f 93       	push	r25
    1b28:	8f 93       	push	r24
    1b2a:	89 e5       	ldi	r24, 0x59	; 89
    1b2c:	95 e0       	ldi	r25, 0x05	; 5
    1b2e:	9f 93       	push	r25
    1b30:	8f 93       	push	r24
    1b32:	89 e4       	ldi	r24, 0x49	; 73
    1b34:	95 e0       	ldi	r25, 0x05	; 5
    1b36:	9f 93       	push	r25
    1b38:	8f 93       	push	r24
    1b3a:	8a e4       	ldi	r24, 0x4A	; 74
    1b3c:	95 e0       	ldi	r25, 0x05	; 5
    1b3e:	9f 93       	push	r25
    1b40:	8f 93       	push	r24
    1b42:	8e e4       	ldi	r24, 0x4E	; 78
    1b44:	95 e0       	ldi	r25, 0x05	; 5
    1b46:	9f 93       	push	r25
    1b48:	8f 93       	push	r24
    1b4a:	8f e4       	ldi	r24, 0x4F	; 79
    1b4c:	95 e0       	ldi	r25, 0x05	; 5
    1b4e:	9f 93       	push	r25
    1b50:	8f 93       	push	r24
    1b52:	83 e5       	ldi	r24, 0x53	; 83
    1b54:	95 e0       	ldi	r25, 0x05	; 5
    1b56:	9f 93       	push	r25
    1b58:	8f 93       	push	r24
    1b5a:	85 e5       	ldi	r24, 0x55	; 85
    1b5c:	95 e0       	ldi	r25, 0x05	; 5
    1b5e:	9f 93       	push	r25
    1b60:	8f 93       	push	r24
    1b62:	8f e8       	ldi	r24, 0x8F	; 143
    1b64:	93 e0       	ldi	r25, 0x03	; 3
    1b66:	9f 93       	push	r25
    1b68:	8f 93       	push	r24
    1b6a:	81 e1       	ldi	r24, 0x11	; 17
    1b6c:	92 e0       	ldi	r25, 0x02	; 2
    1b6e:	9f 93       	push	r25
    1b70:	8f 93       	push	r24
    1b72:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <sscanf>
			&main_nmeaPosLatSign,
			&main_nmeaPosLon,
			&main_nmeaPosLonSign,
			&main_nmeaDate,
			&main_checksum);
	if (len > 0) {
    1b76:	2d b7       	in	r18, 0x3d	; 61
    1b78:	3e b7       	in	r19, 0x3e	; 62
    1b7a:	2c 5e       	subi	r18, 0xEC	; 236
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	3e bf       	out	0x3e, r19	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	2d bf       	out	0x3d, r18	; 61
    1b88:	18 16       	cp	r1, r24
    1b8a:	19 06       	cpc	r1, r25
    1b8c:	0c f0       	brlt	.+2      	; 0x1b90 <main_fw_parseNmeaLineData+0x220>
    1b8e:	44 c0       	rjmp	.+136    	; 0x1c18 <main_fw_parseNmeaLineData+0x2a8>
		main_fw_nmeaUtcPlusOneSec();
    1b90:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <main_fw_nmeaUtcPlusOneSec>
		if ((main_nmeaDate >= 010100) && (main_nmeaDate < 311299)) {
    1b94:	c0 90 59 05 	lds	r12, 0x0559	; 0x800559 <main_nmeaDate>
    1b98:	d0 90 5a 05 	lds	r13, 0x055A	; 0x80055a <main_nmeaDate+0x1>
    1b9c:	e0 90 5b 05 	lds	r14, 0x055B	; 0x80055b <main_nmeaDate+0x2>
    1ba0:	f0 90 5c 05 	lds	r15, 0x055C	; 0x80055c <main_nmeaDate+0x3>
    1ba4:	d7 01       	movw	r26, r14
    1ba6:	c6 01       	movw	r24, r12
    1ba8:	80 54       	subi	r24, 0x40	; 64
    1baa:	90 41       	sbci	r25, 0x10	; 16
    1bac:	a1 09       	sbc	r26, r1
    1bae:	b1 09       	sbc	r27, r1
    1bb0:	83 3c       	cpi	r24, 0xC3	; 195
    1bb2:	9f 4a       	sbci	r25, 0xAF	; 175
    1bb4:	a4 40       	sbci	r26, 0x04	; 4
    1bb6:	b1 05       	cpc	r27, r1
    1bb8:	38 f5       	brcc	.+78     	; 0x1c08 <main_fw_parseNmeaLineData+0x298>
			main_nmeaDate = ((main_nmeaDate - (main_nmeaDate % 100)) * 100) + 2000 + (main_nmeaDate % 100);
    1bba:	c7 01       	movw	r24, r14
    1bbc:	b6 01       	movw	r22, r12
    1bbe:	24 e6       	ldi	r18, 0x64	; 100
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
    1bca:	4b 01       	movw	r8, r22
    1bcc:	5c 01       	movw	r10, r24
    1bce:	a7 01       	movw	r20, r14
    1bd0:	96 01       	movw	r18, r12
    1bd2:	26 1b       	sub	r18, r22
    1bd4:	37 0b       	sbc	r19, r23
    1bd6:	48 0b       	sbc	r20, r24
    1bd8:	59 0b       	sbc	r21, r25
    1bda:	a4 e6       	ldi	r26, 0x64	; 100
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <__muluhisi3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	80 53       	subi	r24, 0x30	; 48
    1be8:	98 4f       	sbci	r25, 0xF8	; 248
    1bea:	af 4f       	sbci	r26, 0xFF	; 255
    1bec:	bf 4f       	sbci	r27, 0xFF	; 255
    1bee:	88 0d       	add	r24, r8
    1bf0:	99 1d       	adc	r25, r9
    1bf2:	aa 1d       	adc	r26, r10
    1bf4:	bb 1d       	adc	r27, r11
    1bf6:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <main_nmeaDate>
    1bfa:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <main_nmeaDate+0x1>
    1bfe:	a0 93 5b 05 	sts	0x055B, r26	; 0x80055b <main_nmeaDate+0x2>
    1c02:	b0 93 5c 05 	sts	0x055C, r27	; 0x80055c <main_nmeaDate+0x3>
    1c06:	08 c0       	rjmp	.+16     	; 0x1c18 <main_fw_parseNmeaLineData+0x2a8>
		} else {
			main_nmeaDate = 0;
    1c08:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <main_nmeaDate>
    1c0c:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <main_nmeaDate+0x1>
    1c10:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <main_nmeaDate+0x2>
    1c14:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <main_nmeaDate+0x3>
		}
	}

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG31, sizeof(PM_PARSE_NMEA_MSG31));
    1c18:	21 e1       	ldi	r18, 0x11	; 17
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	49 eb       	ldi	r20, 0xB9	; 185
    1c1e:	52 e0       	ldi	r21, 0x02	; 2
    1c20:	6f e8       	ldi	r22, 0x8F	; 143
    1c22:	73 e0       	ldi	r23, 0x03	; 3
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1c2a:	8d e6       	ldi	r24, 0x6D	; 109
    1c2c:	95 e0       	ldi	r25, 0x05	; 5
    1c2e:	9f 93       	push	r25
    1c30:	8f 93       	push	r24
    1c32:	0f e8       	ldi	r16, 0x8F	; 143
    1c34:	13 e0       	ldi	r17, 0x03	; 3
    1c36:	1f 93       	push	r17
    1c38:	0f 93       	push	r16
    1c3a:	c1 e1       	ldi	r28, 0x11	; 17
    1c3c:	d2 e0       	ldi	r29, 0x02	; 2
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <sscanf>
			&main_nmeaSatsEphemerisGpsGalileoQzss);

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG41, sizeof(PM_PARSE_NMEA_MSG41));
    1c46:	21 e1       	ldi	r18, 0x11	; 17
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	48 ea       	ldi	r20, 0xA8	; 168
    1c4c:	52 e0       	ldi	r21, 0x02	; 2
    1c4e:	b8 01       	movw	r22, r16
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1c56:	8b e6       	ldi	r24, 0x6B	; 107
    1c58:	95 e0       	ldi	r25, 0x05	; 5
    1c5a:	9f 93       	push	r25
    1c5c:	8f 93       	push	r24
    1c5e:	1f 93       	push	r17
    1c60:	0f 93       	push	r16
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <sscanf>
    1c6a:	8d b7       	in	r24, 0x3d	; 61
    1c6c:	9e b7       	in	r25, 0x3e	; 62
    1c6e:	0c 96       	adiw	r24, 0x0c	; 12
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	9e bf       	out	0x3e, r25	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	8d bf       	out	0x3d, r24	; 61
			&main_nmeaSatsEphemerisGlonass);
}
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	ff 90       	pop	r15
    1c84:	ef 90       	pop	r14
    1c86:	df 90       	pop	r13
    1c88:	cf 90       	pop	r12
    1c8a:	bf 90       	pop	r11
    1c8c:	af 90       	pop	r10
    1c8e:	9f 90       	pop	r9
    1c90:	8f 90       	pop	r8
    1c92:	08 95       	ret

00001c94 <workInQueue>:
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
	}
}

void workInQueue(void)
{
    1c94:	8f 92       	push	r8
    1c96:	9f 92       	push	r9
    1c98:	af 92       	push	r10
    1c9a:	bf 92       	push	r11
    1c9c:	cf 92       	push	r12
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	1f 93       	push	r17
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <workInQueue+0x18>
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <workInQueue+0x1a>
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
	if (ringbuffer_fw_getSemaphore(true)) {
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	0e 94 ae 23 	call	0x475c	; 0x475c <ringbuffer_fw_getSemaphore>
    1cb8:	88 23       	and	r24, r24
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <workInQueue+0x2a>
    1cbc:	f2 c3       	rjmp	.+2020   	; 0x24a2 <workInQueue+0x80e>
		uint8_t isLocked = true;
		enum RINGBUFFER_MSG_STATUS_t statusSend = ringbuffer_fw_getStatusNextMsg(true);
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <ringbuffer_fw_getStatusNextMsg>
    1cc4:	18 2f       	mov	r17, r24
		enum RINGBUFFER_MSG_STATUS_t statusRcv  = ringbuffer_fw_getStatusNextMsg(false);
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <ringbuffer_fw_getStatusNextMsg>

		if (!(main_bf.mainHelpConcatNr) && (statusSend & RINGBUFFER_MSG_STATUS_AVAIL)) {		// if any message is available and not during help printing
    1ccc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1cd0:	96 95       	lsr	r25
    1cd2:	9f 70       	andi	r25, 0x0F	; 15
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <workInQueue+0x44>
    1cd6:	14 c3       	rjmp	.+1576   	; 0x2300 <workInQueue+0x66c>
    1cd8:	10 ff       	sbrs	r17, 0
    1cda:	12 c3       	rjmp	.+1572   	; 0x2300 <workInQueue+0x66c>
			if (statusSend & RINGBUFFER_MSG_STATUS_IS_NMEA) {
    1cdc:	14 ff       	sbrs	r17, 4
    1cde:	04 c0       	rjmp	.+8      	; 0x1ce8 <workInQueue+0x54>
				serial_fw_pullAndSendNmea_havingSemaphore(true); isLocked = false;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	0e 94 32 26 	call	0x4c64	; 0x4c64 <serial_fw_pullAndSendNmea_havingSemaphore>
    1ce6:	dd c3       	rjmp	.+1978   	; 0x24a2 <workInQueue+0x80e>

			} else if ((statusSend & RINGBUFFER_MSG_STATUS_IS_MASK) == 0) {						// message from firmware state machine
    1ce8:	10 7f       	andi	r17, 0xF0	; 240
    1cea:	09 f0       	breq	.+2      	; 0x1cee <workInQueue+0x5a>
    1cec:	d7 c3       	rjmp	.+1966   	; 0x249c <workInQueue+0x808>
				uint8_t localMsgLen = ringbuffer_fw_ringBufferPull(true, mainInterpreterBuffer, (uint8_t) (sizeof(mainInterpreterBuffer) - 1));
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	6f e8       	ldi	r22, 0x8F	; 143
    1cf2:	74 e0       	ldi	r23, 0x04	; 4
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	0e 94 77 24 	call	0x48ee	; 0x48ee <ringbuffer_fw_ringBufferPull>
				ringbuffer_fw_freeSemaphore(true); isLocked = false;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	0e 94 bf 23 	call	0x477e	; 0x477e <ringbuffer_fw_freeSemaphore>
			&main_nmeaSatsEphemerisGlonass);
}

static void doInterpret(uchar msg[], uint8_t len)
{
	if (!main_fw_strncmp(msg, PM_GPIB_SCM_IDN, sizeof(PM_GPIB_SCM_IDN))) {
    1d00:	46 e0       	ldi	r20, 0x06	; 6
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	67 e4       	ldi	r22, 0x47	; 71
    1d06:	7d e0       	ldi	r23, 0x0D	; 13
    1d08:	8f e8       	ldi	r24, 0x8F	; 143
    1d0a:	94 e0       	ldi	r25, 0x04	; 4
    1d0c:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1d10:	89 2b       	or	r24, r25
    1d12:	a1 f5       	brne	.+104    	; 0x1d7c <workInQueue+0xe8>
		/* GPIB commands - SCPI/SCM - *IDN? */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GPIB_SCM_IDN, sizeof(PM_FORMAT_GPIB_SCM_IDN));
    1d14:	2c e1       	ldi	r18, 0x1C	; 28
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	53 e0       	ldi	r21, 0x03	; 3
    1d1c:	6f e8       	ldi	r22, 0x8F	; 143
    1d1e:	73 e0       	ldi	r23, 0x03	; 3
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    1d26:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <mainCoef_b00_dev_version>
    1d2a:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <mainCoef_b00_dev_version+0x1>
    1d2e:	9c 01       	movw	r18, r24
    1d30:	33 27       	eor	r19, r19
    1d32:	3f 93       	push	r19
    1d34:	2f 93       	push	r18
    1d36:	1f 92       	push	r1
    1d38:	9f 93       	push	r25
    1d3a:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <mainCoef_b00_dev_serial+0x1>
    1d3e:	8f 93       	push	r24
    1d40:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <mainCoef_b00_dev_serial>
    1d44:	8f 93       	push	r24
    1d46:	88 ec       	ldi	r24, 0xC8	; 200
    1d48:	95 e0       	ldi	r25, 0x05	; 5
    1d4a:	9f 93       	push	r25
    1d4c:	8f 93       	push	r24
    1d4e:	8f e8       	ldi	r24, 0x8F	; 143
    1d50:	93 e0       	ldi	r25, 0x03	; 3
    1d52:	9f 93       	push	r25
    1d54:	8f 93       	push	r24
    1d56:	8f e0       	ldi	r24, 0x0F	; 15
    1d58:	94 e0       	ldi	r25, 0x04	; 4
    1d5a:	9f 93       	push	r25
    1d5c:	8f 93       	push	r24
    1d5e:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				&(mainCoef_b00_dev_header[0]),
				mainCoef_b00_dev_serial,
				mainCoef_b00_dev_version >> 8,
				mainCoef_b00_dev_version & 0xff);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    1d62:	28 2f       	mov	r18, r24
    1d64:	4f e0       	ldi	r20, 0x0F	; 15
    1d66:	54 e0       	ldi	r21, 0x04	; 4
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	93 c3       	rjmp	.+1830   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_AFCOFF, sizeof(PM_COMMAND_AFCOFF))) {
    1d7c:	47 e0       	ldi	r20, 0x07	; 7
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	6f ea       	ldi	r22, 0xAF	; 175
    1d82:	7d e0       	ldi	r23, 0x0D	; 13
    1d84:	8f e8       	ldi	r24, 0x8F	; 143
    1d86:	94 e0       	ldi	r25, 0x04	; 4
    1d88:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1d8c:	89 2b       	or	r24, r25
    1d8e:	31 f4       	brne	.+12     	; 0x1d9c <workInQueue+0x108>
		/* automatic frequency control OFF */
		main_bf.mainIsAFC = false;
    1d90:	e0 e0       	ldi	r30, 0x00	; 0
    1d92:	f1 e0       	ldi	r31, 0x01	; 1
    1d94:	80 81       	ld	r24, Z
    1d96:	8e 7f       	andi	r24, 0xFE	; 254
    1d98:	80 83       	st	Z, r24
    1d9a:	83 c3       	rjmp	.+1798   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_AFCON, sizeof(PM_COMMAND_AFCON))) {
    1d9c:	46 e0       	ldi	r20, 0x06	; 6
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	69 ea       	ldi	r22, 0xA9	; 169
    1da2:	7d e0       	ldi	r23, 0x0D	; 13
    1da4:	8f e8       	ldi	r24, 0x8F	; 143
    1da6:	94 e0       	ldi	r25, 0x04	; 4
    1da8:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1dac:	89 2b       	or	r24, r25
    1dae:	31 f4       	brne	.+12     	; 0x1dbc <workInQueue+0x128>
		/* automatic frequency control ON */
		main_bf.mainIsAFC = true;
    1db0:	e0 e0       	ldi	r30, 0x00	; 0
    1db2:	f1 e0       	ldi	r31, 0x01	; 1
    1db4:	80 81       	ld	r24, Z
    1db6:	81 60       	ori	r24, 0x01	; 1
    1db8:	80 83       	st	Z, r24
    1dba:	73 c3       	rjmp	.+1766   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_APCOFF, sizeof(PM_COMMAND_APCOFF))) {
    1dbc:	47 e0       	ldi	r20, 0x07	; 7
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	62 ea       	ldi	r22, 0xA2	; 162
    1dc2:	7d e0       	ldi	r23, 0x0D	; 13
    1dc4:	8f e8       	ldi	r24, 0x8F	; 143
    1dc6:	94 e0       	ldi	r25, 0x04	; 4
    1dc8:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1dcc:	89 2b       	or	r24, r25
    1dce:	31 f4       	brne	.+12     	; 0x1ddc <workInQueue+0x148>
		/* automatic phase control OFF */
		main_bf.mainIsAPC = false;
    1dd0:	e0 e0       	ldi	r30, 0x00	; 0
    1dd2:	f1 e0       	ldi	r31, 0x01	; 1
    1dd4:	80 81       	ld	r24, Z
    1dd6:	8d 7f       	andi	r24, 0xFD	; 253
    1dd8:	80 83       	st	Z, r24
    1dda:	63 c3       	rjmp	.+1734   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_APCON, sizeof(PM_COMMAND_APCON))) {
    1ddc:	46 e0       	ldi	r20, 0x06	; 6
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	6c e9       	ldi	r22, 0x9C	; 156
    1de2:	7d e0       	ldi	r23, 0x0D	; 13
    1de4:	8f e8       	ldi	r24, 0x8F	; 143
    1de6:	94 e0       	ldi	r25, 0x04	; 4
    1de8:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1dec:	89 2b       	or	r24, r25
    1dee:	31 f4       	brne	.+12     	; 0x1dfc <workInQueue+0x168>
		/* automatic phase control ON */
		main_bf.mainIsAPC = true;
    1df0:	e0 e0       	ldi	r30, 0x00	; 0
    1df2:	f1 e0       	ldi	r31, 0x01	; 1
    1df4:	80 81       	ld	r24, Z
    1df6:	82 60       	ori	r24, 0x02	; 2
    1df8:	80 83       	st	Z, r24
    1dfa:	53 c3       	rjmp	.+1702   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_HALT, sizeof(PM_COMMAND_HALT))) {
    1dfc:	45 e0       	ldi	r20, 0x05	; 5
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	67 e9       	ldi	r22, 0x97	; 151
    1e02:	7d e0       	ldi	r23, 0x0D	; 13
    1e04:	8f e8       	ldi	r24, 0x8F	; 143
    1e06:	94 e0       	ldi	r25, 0x04	; 4
    1e08:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1e0c:	89 2b       	or	r24, r25
    1e0e:	71 f5       	brne	.+92     	; 0x1e6c <workInQueue+0x1d8>
		/* stop AVR controller and enter sleep state */
		uint8_t cnt = 250;
		main_bf.mainIsTimerTest = false;
    1e10:	e0 e0       	ldi	r30, 0x00	; 0
    1e12:	f1 e0       	ldi	r31, 0x01	; 1
    1e14:	80 81       	ld	r24, Z
    1e16:	8b 7f       	andi	r24, 0xFB	; 251
    1e18:	80 83       	st	Z, r24
		main_bf.mainIsUsbCommTest = false;
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8f 7e       	andi	r24, 0xEF	; 239
    1e1e:	80 83       	st	Z, r24
		main_bf.mainIsSerComm = true;
    1e20:	80 81       	ld	r24, Z
    1e22:	88 60       	ori	r24, 0x08	; 8
    1e24:	80 83       	st	Z, r24
		serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_STBY, sizeof(PM_FORMAT_GPS_STBY));
    1e26:	40 e1       	ldi	r20, 0x10	; 16
    1e28:	64 e7       	ldi	r22, 0x74	; 116
    1e2a:	79 e0       	ldi	r23, 0x09	; 9
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <serial_fw_copyAndSendNmea>
    1e32:	03 c0       	rjmp	.+6      	; 0x1e3a <workInQueue+0x1a6>

		/* send message until the send buffer is clear */
		while (serial_fw_isTxRunning()) {
			wdt_reset();
    1e34:	a8 95       	wdr
			usbPoll();
    1e36:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <usbPoll>
		main_bf.mainIsUsbCommTest = false;
		main_bf.mainIsSerComm = true;
		serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_STBY, sizeof(PM_FORMAT_GPS_STBY));

		/* send message until the send buffer is clear */
		while (serial_fw_isTxRunning()) {
    1e3a:	0e 94 18 26 	call	0x4c30	; 0x4c30 <serial_fw_isTxRunning>
    1e3e:	81 11       	cpse	r24, r1
    1e40:	f9 cf       	rjmp	.-14     	; 0x1e34 <workInQueue+0x1a0>
    1e42:	19 ef       	ldi	r17, 0xF9	; 249
			usbPoll();
		};

		/* give some time for the GPS module before powering down */
		while (--cnt) {
			wdt_reset();
    1e44:	a8 95       	wdr
			usbPoll();
    1e46:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <usbPoll>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e4a:	87 e8       	ldi	r24, 0x87	; 135
    1e4c:	93 e1       	ldi	r25, 0x13	; 19
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <workInQueue+0x1ba>
    1e52:	00 c0       	rjmp	.+0      	; 0x1e54 <workInQueue+0x1c0>
    1e54:	00 00       	nop
    1e56:	11 50       	subi	r17, 0x01	; 1
			wdt_reset();
			usbPoll();
		};

		/* give some time for the GPS module before powering down */
		while (--cnt) {
    1e58:	a9 f7       	brne	.-22     	; 0x1e44 <workInQueue+0x1b0>
			wdt_reset();
			usbPoll();
			_delay_ms(1);
		}

		main_bf.mainIsSerComm = false;
    1e5a:	e0 e0       	ldi	r30, 0x00	; 0
    1e5c:	f1 e0       	ldi	r31, 0x01	; 1
    1e5e:	80 81       	ld	r24, Z
    1e60:	87 7f       	andi	r24, 0xF7	; 247
    1e62:	80 83       	st	Z, r24
		main_bf.mainStopAvr = true;
    1e64:	80 81       	ld	r24, Z
    1e66:	80 62       	ori	r24, 0x20	; 32
    1e68:	80 83       	st	Z, r24
    1e6a:	1b c3       	rjmp	.+1590   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_HELP, sizeof(PM_COMMAND_HELP))) {
    1e6c:	45 e0       	ldi	r20, 0x05	; 5
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	62 e9       	ldi	r22, 0x92	; 146
    1e72:	7d e0       	ldi	r23, 0x0D	; 13
    1e74:	8f e8       	ldi	r24, 0x8F	; 143
    1e76:	94 e0       	ldi	r25, 0x04	; 4
    1e78:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1e7c:	89 2b       	or	r24, r25
    1e7e:	e1 f5       	brne	.+120    	; 0x1ef8 <workInQueue+0x264>
		/* help information */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_VERSION, sizeof(PM_FORMAT_VERSION));
    1e80:	22 e4       	ldi	r18, 0x42	; 66
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	42 e9       	ldi	r20, 0x92	; 146
    1e86:	59 e0       	ldi	r21, 0x09	; 9
    1e88:	6f e8       	ldi	r22, 0x8F	; 143
    1e8a:	73 e0       	ldi	r23, 0x03	; 3
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		int len = snprintf((char*) mainPrepareBuffer, sizeof(mainPrepareBuffer) - 1, (char*) mainFormatBuffer, VERSION_HIGH, VERSION_LOW);
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	8f 93       	push	r24
    1e96:	88 e9       	ldi	r24, 0x98	; 152
    1e98:	8f 93       	push	r24
    1e9a:	1f 92       	push	r1
    1e9c:	8a ea       	ldi	r24, 0xAA	; 170
    1e9e:	8f 93       	push	r24
    1ea0:	8f e8       	ldi	r24, 0x8F	; 143
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	9f 93       	push	r25
    1ea6:	8f 93       	push	r24
    1ea8:	1f 92       	push	r1
    1eaa:	8f e7       	ldi	r24, 0x7F	; 127
    1eac:	8f 93       	push	r24
    1eae:	8f e0       	ldi	r24, 0x0F	; 15
    1eb0:	94 e0       	ldi	r25, 0x04	; 4
    1eb2:	9f 93       	push	r25
    1eb4:	8f 93       	push	r24
    1eb6:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <snprintf>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    1eba:	28 2f       	mov	r18, r24
    1ebc:	4f e0       	ldi	r20, 0x0F	; 15
    1ebe:	54 e0       	ldi	r21, 0x04	; 4
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
		ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP01, sizeof(PM_INTERPRETER_HELP01));
    1ec8:	22 e4       	ldi	r18, 0x42	; 66
    1eca:	45 e0       	ldi	r20, 0x05	; 5
    1ecc:	5d e0       	ldi	r21, 0x0D	; 13
    1ece:	61 e0       	ldi	r22, 0x01	; 1
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
		main_bf.mainHelpConcatNr = 1;
    1ed6:	e1 e0       	ldi	r30, 0x01	; 1
    1ed8:	f1 e0       	ldi	r31, 0x01	; 1
    1eda:	80 81       	ld	r24, Z
    1edc:	81 7e       	andi	r24, 0xE1	; 225
    1ede:	82 60       	ori	r24, 0x02	; 2
    1ee0:	80 83       	st	Z, r24
		main_bf.mainIsUsbCommTest = false;
    1ee2:	e0 e0       	ldi	r30, 0x00	; 0
    1ee4:	f1 e0       	ldi	r31, 0x01	; 1
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8f 7e       	andi	r24, 0xEF	; 239
    1eea:	80 83       	st	Z, r24
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	d5 c2       	rjmp	.+1450   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_INFO, sizeof(PM_COMMAND_INFO))) {
    1ef8:	45 e0       	ldi	r20, 0x05	; 5
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	6d e8       	ldi	r22, 0x8D	; 141
    1efe:	7d e0       	ldi	r23, 0x0D	; 13
    1f00:	8f e8       	ldi	r24, 0x8F	; 143
    1f02:	94 e0       	ldi	r25, 0x04	; 4
    1f04:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1f08:	89 2b       	or	r24, r25
    1f0a:	b1 f4       	brne	.+44     	; 0x1f38 <workInQueue+0x2a4>
		/* timer 2 overflow counter TEST */
		main_bf.mainIsTimerTest = !(main_bf.mainIsTimerTest);
    1f0c:	e0 e0       	ldi	r30, 0x00	; 0
    1f0e:	f1 e0       	ldi	r31, 0x01	; 1
    1f10:	80 81       	ld	r24, Z
    1f12:	82 fb       	bst	r24, 2
    1f14:	99 27       	eor	r25, r25
    1f16:	90 f9       	bld	r25, 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	89 27       	eor	r24, r25
    1f1c:	90 81       	ld	r25, Z
    1f1e:	80 fb       	bst	r24, 0
    1f20:	92 f9       	bld	r25, 2
    1f22:	90 83       	st	Z, r25
		if (main_bf.mainIsTimerTest) {
    1f24:	80 81       	ld	r24, Z
    1f26:	82 ff       	sbrs	r24, 2
    1f28:	bc c2       	rjmp	.+1400   	; 0x24a2 <workInQueue+0x80e>
			main_bf.mainIsSerComm = false;
    1f2a:	80 81       	ld	r24, Z
    1f2c:	87 7f       	andi	r24, 0xF7	; 247
    1f2e:	80 83       	st	Z, r24
			main_bf.mainIsUsbCommTest = false;
    1f30:	80 81       	ld	r24, Z
    1f32:	8f 7e       	andi	r24, 0xEF	; 239
    1f34:	80 83       	st	Z, r24
    1f36:	b5 c2       	rjmp	.+1386   	; 0x24a2 <workInQueue+0x80e>
		}

	} else if (!main_fw_strncmp(msg, PM_COMMAND_LEDOFF, sizeof(PM_COMMAND_LEDOFF))) {
    1f38:	47 e0       	ldi	r20, 0x07	; 7
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	66 e8       	ldi	r22, 0x86	; 134
    1f3e:	7d e0       	ldi	r23, 0x0D	; 13
    1f40:	8f e8       	ldi	r24, 0x8F	; 143
    1f42:	94 e0       	ldi	r25, 0x04	; 4
    1f44:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1f48:	89 2b       	or	r24, r25
    1f4a:	99 f4       	brne	.+38     	; 0x1f72 <workInQueue+0x2de>
		/* backlight of the LCD module OFF */
		const uint8_t lcdLedMode = LCD_LED_MODE_OFF;
    1f4c:	19 82       	std	Y+1, r1	; 0x01
		main_bf.mainLcdLedMode = lcdLedMode;
    1f4e:	e1 e0       	ldi	r30, 0x01	; 1
    1f50:	f1 e0       	ldi	r31, 0x01	; 1
    1f52:	80 81       	ld	r24, Z
    1f54:	8f 71       	andi	r24, 0x1F	; 31
    1f56:	80 83       	st	Z, r24

		memory_fw_writeEEpromPage((uint8_t*) &lcdLedMode, sizeof(uint8_t), offsetof(eeprom_layout_t, b00.b00_lcdLedMode));
    1f58:	44 e1       	ldi	r20, 0x14	; 20
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	61 e0       	ldi	r22, 0x01	; 1
    1f5e:	ce 01       	movw	r24, r28
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_HEADER_NR, offsetof(eeprom_layout_t, b00.b00_crc));
    1f66:	6e e1       	ldi	r22, 0x1E	; 30
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <recalcEepromCrc>
    1f70:	98 c2       	rjmp	.+1328   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_LEDON, sizeof(PM_COMMAND_LEDON))) {
    1f72:	46 e0       	ldi	r20, 0x06	; 6
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	60 e8       	ldi	r22, 0x80	; 128
    1f78:	7d e0       	ldi	r23, 0x0D	; 13
    1f7a:	8f e8       	ldi	r24, 0x8F	; 143
    1f7c:	94 e0       	ldi	r25, 0x04	; 4
    1f7e:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1f82:	89 2b       	or	r24, r25
    1f84:	a9 f4       	brne	.+42     	; 0x1fb0 <workInQueue+0x31c>
		/* backlight of the LCD module ON */
		const uint8_t lcdLedMode = LCD_LED_MODE_ON;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	89 83       	std	Y+1, r24	; 0x01
		main_bf.mainLcdLedMode = lcdLedMode;
    1f8a:	e1 e0       	ldi	r30, 0x01	; 1
    1f8c:	f1 e0       	ldi	r31, 0x01	; 1
    1f8e:	80 81       	ld	r24, Z
    1f90:	8f 71       	andi	r24, 0x1F	; 31
    1f92:	80 62       	ori	r24, 0x20	; 32
    1f94:	80 83       	st	Z, r24

		memory_fw_writeEEpromPage((uint8_t*) &lcdLedMode, sizeof(uint8_t), offsetof(eeprom_layout_t, b00.b00_lcdLedMode));
    1f96:	44 e1       	ldi	r20, 0x14	; 20
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	61 e0       	ldi	r22, 0x01	; 1
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_HEADER_NR, offsetof(eeprom_layout_t, b00.b00_crc));
    1fa4:	6e e1       	ldi	r22, 0x1E	; 30
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <recalcEepromCrc>
    1fae:	79 c2       	rjmp	.+1266   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_SEROFF, sizeof(PM_COMMAND_SEROFF))) {
    1fb0:	47 e0       	ldi	r20, 0x07	; 7
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	61 e7       	ldi	r22, 0x71	; 113
    1fb6:	7d e0       	ldi	r23, 0x0D	; 13
    1fb8:	8f e8       	ldi	r24, 0x8F	; 143
    1fba:	94 e0       	ldi	r25, 0x04	; 4
    1fbc:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1fc0:	89 2b       	or	r24, r25
    1fc2:	31 f4       	brne	.+12     	; 0x1fd0 <workInQueue+0x33c>
		/* serial communication OFF */
		main_bf.mainIsSerComm = false;
    1fc4:	e0 e0       	ldi	r30, 0x00	; 0
    1fc6:	f1 e0       	ldi	r31, 0x01	; 1
    1fc8:	80 81       	ld	r24, Z
    1fca:	87 7f       	andi	r24, 0xF7	; 247
    1fcc:	80 83       	st	Z, r24
    1fce:	69 c2       	rjmp	.+1234   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_SERON, sizeof(PM_COMMAND_SERON))) {
    1fd0:	46 e0       	ldi	r20, 0x06	; 6
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	6b e6       	ldi	r22, 0x6B	; 107
    1fd6:	7d e0       	ldi	r23, 0x0D	; 13
    1fd8:	8f e8       	ldi	r24, 0x8F	; 143
    1fda:	94 e0       	ldi	r25, 0x04	; 4
    1fdc:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    1fe0:	89 2b       	or	r24, r25
    1fe2:	61 f4       	brne	.+24     	; 0x1ffc <workInQueue+0x368>
		/* serial communication ON */
		main_bf.mainIsSerComm = true;
    1fe4:	e0 e0       	ldi	r30, 0x00	; 0
    1fe6:	f1 e0       	ldi	r31, 0x01	; 1
    1fe8:	80 81       	ld	r24, Z
    1fea:	88 60       	ori	r24, 0x08	; 8
    1fec:	80 83       	st	Z, r24
		main_bf.mainIsTimerTest = false;
    1fee:	80 81       	ld	r24, Z
    1ff0:	8b 7f       	andi	r24, 0xFB	; 251
    1ff2:	80 83       	st	Z, r24
		main_bf.mainIsUsbCommTest = false;
    1ff4:	80 81       	ld	r24, Z
    1ff6:	8f 7e       	andi	r24, 0xEF	; 239
    1ff8:	80 83       	st	Z, r24
    1ffa:	53 c2       	rjmp	.+1190   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_memcmp(msg, PM_COMMAND_SERBAUD, sizeof(PM_COMMAND_SERBAUD) - 1)) {
    1ffc:	47 e0       	ldi	r20, 0x07	; 7
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	68 e7       	ldi	r22, 0x78	; 120
    2002:	7d e0       	ldi	r23, 0x0D	; 13
    2004:	8f e8       	ldi	r24, 0x8F	; 143
    2006:	94 e0       	ldi	r25, 0x04	; 4
    2008:	0e 94 3b 0c 	call	0x1876	; 0x1876 <main_fw_memcmp>
    200c:	89 2b       	or	r24, r25
    200e:	09 f0       	breq	.+2      	; 0x2012 <workInQueue+0x37e>
    2010:	46 c0       	rjmp	.+140    	; 0x209e <workInQueue+0x40a>
		/* serial communication baud parameter */
		sscanf((char*) msg + sizeof(PM_COMMAND_SERBAUD) - 1, "%d", &serialCoef_b03_serial_baud);
    2012:	82 e2       	ldi	r24, 0x22	; 34
    2014:	95 e0       	ldi	r25, 0x05	; 5
    2016:	9f 93       	push	r25
    2018:	8f 93       	push	r24
    201a:	8f e0       	ldi	r24, 0x0F	; 15
    201c:	91 e0       	ldi	r25, 0x01	; 1
    201e:	9f 93       	push	r25
    2020:	8f 93       	push	r24
    2022:	86 e9       	ldi	r24, 0x96	; 150
    2024:	94 e0       	ldi	r25, 0x04	; 4
    2026:	9f 93       	push	r25
    2028:	8f 93       	push	r24
    202a:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <sscanf>
		serial_fw_setCommBaud(serialCoef_b03_serial_baud);
    202e:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <serialCoef_b03_serial_baud>
    2032:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <serialCoef_b03_serial_baud+0x1>
    2036:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <serial_fw_setCommBaud>

		/* write current baud rate as the default/startup value to the EEPROM */
		memory_fw_writeEEpromPage((uint8_t*) &serialCoef_b03_serial_baud, sizeof(uint16_t), offsetof(eeprom_layout_t, b03.b03_serial_baud));
    203a:	40 e6       	ldi	r20, 0x60	; 96
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	62 e0       	ldi	r22, 0x02	; 2
    2040:	82 e2       	ldi	r24, 0x22	; 34
    2042:	95 e0       	ldi	r25, 0x05	; 5
    2044:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_GPS_NR, offsetof(eeprom_layout_t, b03.b03_crc));
    2048:	6e e7       	ldi	r22, 0x7E	; 126
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	83 e0       	ldi	r24, 0x03	; 3
    204e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <recalcEepromCrc>

		/* user information */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SET_BAUD, sizeof(PM_FORMAT_SET_BAUD));
    2052:	2a e2       	ldi	r18, 0x2A	; 42
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	45 e5       	ldi	r20, 0x55	; 85
    2058:	53 e0       	ldi	r21, 0x03	; 3
    205a:	6f e8       	ldi	r22, 0x8F	; 143
    205c:	73 e0       	ldi	r23, 0x03	; 3
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2064:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <serialCoef_b03_serial_baud+0x1>
    2068:	8f 93       	push	r24
    206a:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <serialCoef_b03_serial_baud>
    206e:	8f 93       	push	r24
    2070:	8f e8       	ldi	r24, 0x8F	; 143
    2072:	93 e0       	ldi	r25, 0x03	; 3
    2074:	9f 93       	push	r25
    2076:	8f 93       	push	r24
    2078:	8f e0       	ldi	r24, 0x0F	; 15
    207a:	94 e0       	ldi	r25, 0x04	; 4
    207c:	9f 93       	push	r25
    207e:	8f 93       	push	r24
    2080:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				serialCoef_b03_serial_baud);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2084:	28 2f       	mov	r18, r24
    2086:	4f e0       	ldi	r20, 0x0F	; 15
    2088:	54 e0       	ldi	r21, 0x04	; 4
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	02 c2       	rjmp	.+1028   	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_STACK, sizeof(PM_COMMAND_STACK))) {
    209e:	46 e0       	ldi	r20, 0x06	; 6
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	65 e6       	ldi	r22, 0x65	; 101
    20a4:	7d e0       	ldi	r23, 0x0D	; 13
    20a6:	8f e8       	ldi	r24, 0x8F	; 143
    20a8:	94 e0       	ldi	r25, 0x04	; 4
    20aa:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    20ae:	89 2b       	or	r24, r25
    20b0:	69 f4       	brne	.+26     	; 0x20cc <workInQueue+0x438>
		/* Stack Check facility */
		main_bf.mainStackCheck = !(main_bf.mainStackCheck);
    20b2:	e0 e0       	ldi	r30, 0x00	; 0
    20b4:	f1 e0       	ldi	r31, 0x01	; 1
    20b6:	80 81       	ld	r24, Z
    20b8:	86 fb       	bst	r24, 6
    20ba:	99 27       	eor	r25, r25
    20bc:	90 f9       	bld	r25, 0
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	89 27       	eor	r24, r25
    20c2:	90 81       	ld	r25, Z
    20c4:	80 fb       	bst	r24, 0
    20c6:	96 f9       	bld	r25, 6
    20c8:	90 83       	st	Z, r25
    20ca:	eb c1       	rjmp	.+982    	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_TEST, sizeof(PM_COMMAND_TEST))) {
    20cc:	45 e0       	ldi	r20, 0x05	; 5
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	60 e6       	ldi	r22, 0x60	; 96
    20d2:	7d e0       	ldi	r23, 0x0D	; 13
    20d4:	8f e8       	ldi	r24, 0x8F	; 143
    20d6:	94 e0       	ldi	r25, 0x04	; 4
    20d8:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    20dc:	89 2b       	or	r24, r25
    20de:	b1 f4       	brne	.+44     	; 0x210c <workInQueue+0x478>
		/* special communication TEST */
		main_bf.mainIsUsbCommTest = !(main_bf.mainIsUsbCommTest);
    20e0:	e0 e0       	ldi	r30, 0x00	; 0
    20e2:	f1 e0       	ldi	r31, 0x01	; 1
    20e4:	80 81       	ld	r24, Z
    20e6:	84 fb       	bst	r24, 4
    20e8:	99 27       	eor	r25, r25
    20ea:	90 f9       	bld	r25, 0
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	89 27       	eor	r24, r25
    20f0:	90 81       	ld	r25, Z
    20f2:	80 fb       	bst	r24, 0
    20f4:	94 f9       	bld	r25, 4
    20f6:	90 83       	st	Z, r25
		if (main_bf.mainIsUsbCommTest) {
    20f8:	80 81       	ld	r24, Z
    20fa:	84 ff       	sbrs	r24, 4
    20fc:	d2 c1       	rjmp	.+932    	; 0x24a2 <workInQueue+0x80e>
			main_bf.mainIsSerComm = false;
    20fe:	80 81       	ld	r24, Z
    2100:	87 7f       	andi	r24, 0xF7	; 247
    2102:	80 83       	st	Z, r24
			main_bf.mainIsTimerTest = false;
    2104:	80 81       	ld	r24, Z
    2106:	8b 7f       	andi	r24, 0xFB	; 251
    2108:	80 83       	st	Z, r24
    210a:	cb c1       	rjmp	.+918    	; 0x24a2 <workInQueue+0x80e>
		}

	} else if (!main_fw_strncmp(msg, PM_COMMAND_WRITEPWM, sizeof(PM_COMMAND_WRITEPWM))) {
    210c:	49 e0       	ldi	r20, 0x09	; 9
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	67 e5       	ldi	r22, 0x57	; 87
    2112:	7d e0       	ldi	r23, 0x0D	; 13
    2114:	8f e8       	ldi	r24, 0x8F	; 143
    2116:	94 e0       	ldi	r25, 0x04	; 4
    2118:	0e 94 23 0c 	call	0x1846	; 0x1846 <main_fw_strncmp>
    211c:	89 2b       	or	r24, r25
    211e:	f9 f4       	brne	.+62     	; 0x215e <workInQueue+0x4ca>
		/* write current PWM value as the default/startup value to the EEPROM */
		uint8_t sreg = SREG;
    2120:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2122:	f8 94       	cli
		pullCoef_b02_pwm_initial		= fastPwmLoopVal;
    2124:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <fastPwmLoopVal>
    2128:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <pullCoef_b02_pwm_initial>
		pullCoef_b02_pwm_initial_sub	= fastPwmSubLoopVal;
    212c:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <fastPwmSubLoopVal>
    2130:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <pullCoef_b02_pwm_initial_sub>
		SREG = sreg;
    2134:	8f bf       	out	0x3f, r24	; 63

		memory_fw_writeEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial));
    2136:	4a e5       	ldi	r20, 0x5A	; 90
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	61 e0       	ldi	r22, 0x01	; 1
    213c:	82 e4       	ldi	r24, 0x42	; 66
    213e:	95 e0       	ldi	r25, 0x05	; 5
    2140:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <memory_fw_writeEEpromPage>
		memory_fw_writeEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial_sub, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial_sub));
    2144:	4b e5       	ldi	r20, 0x5B	; 91
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	61 e0       	ldi	r22, 0x01	; 1
    214a:	81 e4       	ldi	r24, 0x41	; 65
    214c:	95 e0       	ldi	r25, 0x05	; 5
    214e:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_REFOSC_NR, offsetof(eeprom_layout_t, b02.b02_crc));
    2152:	6e e5       	ldi	r22, 0x5E	; 94
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <recalcEepromCrc>
    215c:	a2 c1       	rjmp	.+836    	; 0x24a2 <workInQueue+0x80e>

	} else if (!main_fw_memcmp(msg, PM_COMMAND_WRITETEMP, sizeof(PM_COMMAND_WRITETEMP) - 1)) {
    215e:	49 e0       	ldi	r20, 0x09	; 9
    2160:	50 e0       	ldi	r21, 0x00	; 0
    2162:	6d e4       	ldi	r22, 0x4D	; 77
    2164:	7d e0       	ldi	r23, 0x0D	; 13
    2166:	8f e8       	ldi	r24, 0x8F	; 143
    2168:	94 e0       	ldi	r25, 0x04	; 4
    216a:	0e 94 3b 0c 	call	0x1876	; 0x1876 <main_fw_memcmp>
    216e:	89 2b       	or	r24, r25
    2170:	09 f0       	breq	.+2      	; 0x2174 <workInQueue+0x4e0>
    2172:	5e c0       	rjmp	.+188    	; 0x2230 <workInQueue+0x59c>
		float localTemp = 0.0f;
    2174:	19 82       	std	Y+1, r1	; 0x01
    2176:	1a 82       	std	Y+2, r1	; 0x02
    2178:	1b 82       	std	Y+3, r1	; 0x03
    217a:	1c 82       	std	Y+4, r1	; 0x04
		/* take current temperature value to correct the displayed values */
		sscanf(((char*) msg) + sizeof(PM_COMMAND_WRITETEMP) - 1, "%f", &localTemp);
    217c:	ce 01       	movw	r24, r28
    217e:	01 96       	adiw	r24, 0x01	; 1
    2180:	9f 93       	push	r25
    2182:	8f 93       	push	r24
    2184:	82 e1       	ldi	r24, 0x12	; 18
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	9f 93       	push	r25
    218a:	8f 93       	push	r24
    218c:	88 e9       	ldi	r24, 0x98	; 152
    218e:	94 e0       	ldi	r25, 0x04	; 4
    2190:	9f 93       	push	r25
    2192:	8f 93       	push	r24
    2194:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <sscanf>
		if (localTemp) {
    2198:	89 80       	ldd	r8, Y+1	; 0x01
    219a:	9a 80       	ldd	r9, Y+2	; 0x02
    219c:	ab 80       	ldd	r10, Y+3	; 0x03
    219e:	bc 80       	ldd	r11, Y+4	; 0x04
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	a9 01       	movw	r20, r18
    21b2:	c5 01       	movw	r24, r10
    21b4:	b4 01       	movw	r22, r8
    21b6:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    21ba:	88 23       	and	r24, r24
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <workInQueue+0x52c>
    21be:	71 c1       	rjmp	.+738    	; 0x24a2 <workInQueue+0x80e>
			/* calculate the new correction value */
			mainCoef_b01_temp_ofs_adc_25C_steps = (acAdcCh[ADC_CH_TEMP] - ((localTemp - 25.0f) / mainCoef_b01_temp_k_p1step_adc_K));
    21c0:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <acAdcCh+0x4>
    21c4:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <acAdcCh+0x5>
    21c8:	bc 01       	movw	r22, r24
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 9a 30 	call	0x6134	; 0x6134 <__floatunsisf>
    21d2:	6b 01       	movw	r12, r22
    21d4:	7c 01       	movw	r14, r24
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	48 ec       	ldi	r20, 0xC8	; 200
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	c5 01       	movw	r24, r10
    21e0:	b4 01       	movw	r22, r8
    21e2:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    21e6:	20 91 b4 05 	lds	r18, 0x05B4	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K>
    21ea:	30 91 b5 05 	lds	r19, 0x05B5	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    21ee:	40 91 b6 05 	lds	r20, 0x05B6	; 0x8005b6 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    21f2:	50 91 b7 05 	lds	r21, 0x05B7	; 0x8005b7 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
    21f6:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    21fa:	9b 01       	movw	r18, r22
    21fc:	ac 01       	movw	r20, r24
    21fe:	c7 01       	movw	r24, r14
    2200:	b6 01       	movw	r22, r12
    2202:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    2206:	60 93 b8 05 	sts	0x05B8, r22	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps>
    220a:	70 93 b9 05 	sts	0x05B9, r23	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    220e:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    2212:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>

			/* write the correction value to the EEPROM */
			memory_fw_writeEEpromPage((uint8_t*) &mainCoef_b01_temp_ofs_adc_25C_steps, sizeof(float), offsetof(eeprom_layout_t, b01.b01_temp_ofs_adc_25C_steps));
    2216:	48 e2       	ldi	r20, 0x28	; 40
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	64 e0       	ldi	r22, 0x04	; 4
    221c:	88 eb       	ldi	r24, 0xB8	; 184
    221e:	95 e0       	ldi	r25, 0x05	; 5
    2220:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <memory_fw_writeEEpromPage>
			recalcEepromCrc(BLOCK_MEASURING_NR, offsetof(eeprom_layout_t, b01.b01_crc));
    2224:	6e e3       	ldi	r22, 0x3E	; 62
    2226:	70 e0       	ldi	r23, 0x00	; 0
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <recalcEepromCrc>
    222e:	39 c1       	rjmp	.+626    	; 0x24a2 <workInQueue+0x80e>
		}
	} else if (msg[0] == PM_COMMAND_PLUSSIGN[0]) {
    2230:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <mainInterpreterBuffer>
    2234:	8b 32       	cpi	r24, 0x2B	; 43
    2236:	a9 f4       	brne	.+42     	; 0x2262 <workInQueue+0x5ce>
		/* correct the PWM value up */
		sscanf(((char*) msg) + 1, "%f", &mainPwmTerminalAdj);
    2238:	8b e9       	ldi	r24, 0x9B	; 155
    223a:	95 e0       	ldi	r25, 0x05	; 5
    223c:	9f 93       	push	r25
    223e:	8f 93       	push	r24
    2240:	82 e1       	ldi	r24, 0x12	; 18
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	9f 93       	push	r25
    2246:	8f 93       	push	r24
    2248:	80 e9       	ldi	r24, 0x90	; 144
    224a:	94 e0       	ldi	r25, 0x04	; 4
    224c:	9f 93       	push	r25
    224e:	8f 93       	push	r24
    2250:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <sscanf>
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	20 c1       	rjmp	.+576    	; 0x24a2 <workInQueue+0x80e>

	} else if (msg[0] == PM_COMMAND_MINUSSIGN[0]) {
    2262:	8d 32       	cpi	r24, 0x2D	; 45
    2264:	31 f5       	brne	.+76     	; 0x22b2 <workInQueue+0x61e>
		/* correct the PWM value down */
		sscanf(((char*) msg) + 1, "%f", &mainPwmTerminalAdj);
    2266:	8b e9       	ldi	r24, 0x9B	; 155
    2268:	95 e0       	ldi	r25, 0x05	; 5
    226a:	9f 93       	push	r25
    226c:	8f 93       	push	r24
    226e:	82 e1       	ldi	r24, 0x12	; 18
    2270:	91 e0       	ldi	r25, 0x01	; 1
    2272:	9f 93       	push	r25
    2274:	8f 93       	push	r24
    2276:	80 e9       	ldi	r24, 0x90	; 144
    2278:	94 e0       	ldi	r25, 0x04	; 4
    227a:	9f 93       	push	r25
    227c:	8f 93       	push	r24
    227e:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <sscanf>
		mainPwmTerminalAdj = -mainPwmTerminalAdj;
    2282:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <mainPwmTerminalAdj>
    2286:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x1>
    228a:	a0 91 9d 05 	lds	r26, 0x059D	; 0x80059d <mainPwmTerminalAdj+0x2>
    228e:	b0 91 9e 05 	lds	r27, 0x059E	; 0x80059e <mainPwmTerminalAdj+0x3>
    2292:	b0 58       	subi	r27, 0x80	; 128
    2294:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <mainPwmTerminalAdj>
    2298:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <mainPwmTerminalAdj+0x1>
    229c:	a0 93 9d 05 	sts	0x059D, r26	; 0x80059d <mainPwmTerminalAdj+0x2>
    22a0:	b0 93 9e 05 	sts	0x059E, r27	; 0x80059e <mainPwmTerminalAdj+0x3>
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	f8 c0       	rjmp	.+496    	; 0x24a2 <workInQueue+0x80e>

	} else {
		/* unknown command */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_INTERPRETER_UNKNOWN, sizeof(PM_INTERPRETER_UNKNOWN));
    22b2:	21 e3       	ldi	r18, 0x31	; 49
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	44 ed       	ldi	r20, 0xD4	; 212
    22b8:	59 e0       	ldi	r21, 0x09	; 9
    22ba:	6f e8       	ldi	r22, 0x8F	; 143
    22bc:	73 e0       	ldi	r23, 0x03	; 3
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		int len = snprintf((char*) mainPrepareBuffer, sizeof(mainPrepareBuffer) - 1, (char*) mainFormatBuffer, msg);
    22c4:	8f e8       	ldi	r24, 0x8F	; 143
    22c6:	94 e0       	ldi	r25, 0x04	; 4
    22c8:	9f 93       	push	r25
    22ca:	8f 93       	push	r24
    22cc:	8f e8       	ldi	r24, 0x8F	; 143
    22ce:	93 e0       	ldi	r25, 0x03	; 3
    22d0:	9f 93       	push	r25
    22d2:	8f 93       	push	r24
    22d4:	1f 92       	push	r1
    22d6:	8f e7       	ldi	r24, 0x7F	; 127
    22d8:	8f 93       	push	r24
    22da:	8f e0       	ldi	r24, 0x0F	; 15
    22dc:	94 e0       	ldi	r25, 0x04	; 4
    22de:	9f 93       	push	r25
    22e0:	8f 93       	push	r24
    22e2:	0e 94 64 3d 	call	0x7ac8	; 0x7ac8 <snprintf>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    22e6:	28 2f       	mov	r18, r24
    22e8:	4f e0       	ldi	r20, 0x0F	; 15
    22ea:	54 e0       	ldi	r21, 0x04	; 4
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	d1 c0       	rjmp	.+418    	; 0x24a2 <workInQueue+0x80e>
#endif

				doInterpret(mainInterpreterBuffer, localMsgLen);								// message is clean to process
			}

		} else if (main_bf.mainHelpConcatNr && !(statusRcv & RINGBUFFER_MSG_STATUS_AVAIL)) {	// during help printing, go ahead when receive buffer is empty again
    2300:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2304:	96 95       	lsr	r25
    2306:	9f 70       	andi	r25, 0x0F	; 15
    2308:	09 f4       	brne	.+2      	; 0x230c <workInQueue+0x678>
    230a:	c8 c0       	rjmp	.+400    	; 0x249c <workInQueue+0x808>
    230c:	80 fd       	sbrc	r24, 0
    230e:	c6 c0       	rjmp	.+396    	; 0x249c <workInQueue+0x808>
			ringbuffer_fw_freeSemaphore(true); isLocked = false;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	0e 94 bf 23 	call	0x477e	; 0x477e <ringbuffer_fw_freeSemaphore>

			switch (main_bf.mainHelpConcatNr) {
    2316:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    231a:	e6 95       	lsr	r30
    231c:	ef 70       	andi	r30, 0x0F	; 15
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	31 97       	sbiw	r30, 0x01	; 1
    2322:	ed 30       	cpi	r30, 0x0D	; 13
    2324:	f1 05       	cpc	r31, r1
    2326:	08 f0       	brcs	.+2      	; 0x232a <workInQueue+0x696>
    2328:	b3 c0       	rjmp	.+358    	; 0x2490 <workInQueue+0x7fc>
    232a:	ec 5c       	subi	r30, 0xCC	; 204
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	0c 94 55 3b 	jmp	0x76aa	; 0x76aa <__tablejump2__>
			case 1:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP02, sizeof(PM_INTERPRETER_HELP02));
    2332:	2f e6       	ldi	r18, 0x6F	; 111
    2334:	46 e9       	ldi	r20, 0x96	; 150
    2336:	5c e0       	ldi	r21, 0x0C	; 12
    2338:	61 e0       	ldi	r22, 0x01	; 1
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 2;
    2340:	e1 e0       	ldi	r30, 0x01	; 1
    2342:	f1 e0       	ldi	r31, 0x01	; 1
    2344:	80 81       	ld	r24, Z
    2346:	81 7e       	andi	r24, 0xE1	; 225
    2348:	84 60       	ori	r24, 0x04	; 4
    234a:	80 83       	st	Z, r24
				break;
    234c:	aa c0       	rjmp	.+340    	; 0x24a2 <workInQueue+0x80e>

			case 2:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP03, sizeof(PM_INTERPRETER_HELP03));
    234e:	27 e6       	ldi	r18, 0x67	; 103
    2350:	4f e2       	ldi	r20, 0x2F	; 47
    2352:	5c e0       	ldi	r21, 0x0C	; 12
    2354:	61 e0       	ldi	r22, 0x01	; 1
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 3;
    235c:	e1 e0       	ldi	r30, 0x01	; 1
    235e:	f1 e0       	ldi	r31, 0x01	; 1
    2360:	80 81       	ld	r24, Z
    2362:	81 7e       	andi	r24, 0xE1	; 225
    2364:	86 60       	ori	r24, 0x06	; 6
    2366:	80 83       	st	Z, r24
				break;
    2368:	9c c0       	rjmp	.+312    	; 0x24a2 <workInQueue+0x80e>

			case 3:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP04, sizeof(PM_INTERPRETER_HELP04));
    236a:	2e e2       	ldi	r18, 0x2E	; 46
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	5c e0       	ldi	r21, 0x0C	; 12
    2370:	61 e0       	ldi	r22, 0x01	; 1
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 4;
    2378:	e1 e0       	ldi	r30, 0x01	; 1
    237a:	f1 e0       	ldi	r31, 0x01	; 1
    237c:	80 81       	ld	r24, Z
    237e:	81 7e       	andi	r24, 0xE1	; 225
    2380:	88 60       	ori	r24, 0x08	; 8
    2382:	80 83       	st	Z, r24
				break;
    2384:	8e c0       	rjmp	.+284    	; 0x24a2 <workInQueue+0x80e>

			case 4:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP05, sizeof(PM_INTERPRETER_HELP05));
    2386:	27 e1       	ldi	r18, 0x17	; 23
    2388:	4a ee       	ldi	r20, 0xEA	; 234
    238a:	5b e0       	ldi	r21, 0x0B	; 11
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 5;
    2394:	e1 e0       	ldi	r30, 0x01	; 1
    2396:	f1 e0       	ldi	r31, 0x01	; 1
    2398:	80 81       	ld	r24, Z
    239a:	81 7e       	andi	r24, 0xE1	; 225
    239c:	8a 60       	ori	r24, 0x0A	; 10
    239e:	80 83       	st	Z, r24
				break;
    23a0:	80 c0       	rjmp	.+256    	; 0x24a2 <workInQueue+0x80e>

			case 5:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP06, sizeof(PM_INTERPRETER_HELP06));
    23a2:	2b e2       	ldi	r18, 0x2B	; 43
    23a4:	4f eb       	ldi	r20, 0xBF	; 191
    23a6:	5b e0       	ldi	r21, 0x0B	; 11
    23a8:	61 e0       	ldi	r22, 0x01	; 1
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 6;
    23b0:	e1 e0       	ldi	r30, 0x01	; 1
    23b2:	f1 e0       	ldi	r31, 0x01	; 1
    23b4:	80 81       	ld	r24, Z
    23b6:	81 7e       	andi	r24, 0xE1	; 225
    23b8:	8c 60       	ori	r24, 0x0C	; 12
    23ba:	80 83       	st	Z, r24
				break;
    23bc:	72 c0       	rjmp	.+228    	; 0x24a2 <workInQueue+0x80e>

			case 6:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP07, sizeof(PM_INTERPRETER_HELP07));
    23be:	2f e3       	ldi	r18, 0x3F	; 63
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5b e0       	ldi	r21, 0x0B	; 11
    23c4:	61 e0       	ldi	r22, 0x01	; 1
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 7;
    23cc:	e1 e0       	ldi	r30, 0x01	; 1
    23ce:	f1 e0       	ldi	r31, 0x01	; 1
    23d0:	80 81       	ld	r24, Z
    23d2:	81 7e       	andi	r24, 0xE1	; 225
    23d4:	8e 60       	ori	r24, 0x0E	; 14
    23d6:	80 83       	st	Z, r24
				break;
    23d8:	64 c0       	rjmp	.+200    	; 0x24a2 <workInQueue+0x80e>

			case 7:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP08, sizeof(PM_INTERPRETER_HELP08));
    23da:	2c e2       	ldi	r18, 0x2C	; 44
    23dc:	44 e5       	ldi	r20, 0x54	; 84
    23de:	5b e0       	ldi	r21, 0x0B	; 11
    23e0:	61 e0       	ldi	r22, 0x01	; 1
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 8;
    23e8:	e1 e0       	ldi	r30, 0x01	; 1
    23ea:	f1 e0       	ldi	r31, 0x01	; 1
    23ec:	80 81       	ld	r24, Z
    23ee:	81 7e       	andi	r24, 0xE1	; 225
    23f0:	80 61       	ori	r24, 0x10	; 16
    23f2:	80 83       	st	Z, r24
				break;
    23f4:	56 c0       	rjmp	.+172    	; 0x24a2 <workInQueue+0x80e>

			case 8:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP09, sizeof(PM_INTERPRETER_HELP09));
    23f6:	25 e5       	ldi	r18, 0x55	; 85
    23f8:	4f ef       	ldi	r20, 0xFF	; 255
    23fa:	5a e0       	ldi	r21, 0x0A	; 10
    23fc:	61 e0       	ldi	r22, 0x01	; 1
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 9;
    2404:	e1 e0       	ldi	r30, 0x01	; 1
    2406:	f1 e0       	ldi	r31, 0x01	; 1
    2408:	80 81       	ld	r24, Z
    240a:	81 7e       	andi	r24, 0xE1	; 225
    240c:	82 61       	ori	r24, 0x12	; 18
    240e:	80 83       	st	Z, r24
				break;
    2410:	48 c0       	rjmp	.+144    	; 0x24a2 <workInQueue+0x80e>

			case 9:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP10, sizeof(PM_INTERPRETER_HELP10));
    2412:	28 e2       	ldi	r18, 0x28	; 40
    2414:	47 ed       	ldi	r20, 0xD7	; 215
    2416:	5a e0       	ldi	r21, 0x0A	; 10
    2418:	61 e0       	ldi	r22, 0x01	; 1
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 10;
    2420:	e1 e0       	ldi	r30, 0x01	; 1
    2422:	f1 e0       	ldi	r31, 0x01	; 1
    2424:	80 81       	ld	r24, Z
    2426:	81 7e       	andi	r24, 0xE1	; 225
    2428:	84 61       	ori	r24, 0x14	; 20
    242a:	80 83       	st	Z, r24
				break;
    242c:	3a c0       	rjmp	.+116    	; 0x24a2 <workInQueue+0x80e>

			case 10:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP11, sizeof(PM_INTERPRETER_HELP11));
    242e:	2f e1       	ldi	r18, 0x1F	; 31
    2430:	48 eb       	ldi	r20, 0xB8	; 184
    2432:	5a e0       	ldi	r21, 0x0A	; 10
    2434:	61 e0       	ldi	r22, 0x01	; 1
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 11;
    243c:	e1 e0       	ldi	r30, 0x01	; 1
    243e:	f1 e0       	ldi	r31, 0x01	; 1
    2440:	80 81       	ld	r24, Z
    2442:	81 7e       	andi	r24, 0xE1	; 225
    2444:	86 61       	ori	r24, 0x16	; 22
    2446:	80 83       	st	Z, r24
				break;
    2448:	2c c0       	rjmp	.+88     	; 0x24a2 <workInQueue+0x80e>

			case 11:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP12, sizeof(PM_INTERPRETER_HELP12));
    244a:	24 e7       	ldi	r18, 0x74	; 116
    244c:	44 e4       	ldi	r20, 0x44	; 68
    244e:	5a e0       	ldi	r21, 0x0A	; 10
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 12;
    2458:	e1 e0       	ldi	r30, 0x01	; 1
    245a:	f1 e0       	ldi	r31, 0x01	; 1
    245c:	80 81       	ld	r24, Z
    245e:	81 7e       	andi	r24, 0xE1	; 225
    2460:	88 61       	ori	r24, 0x18	; 24
    2462:	80 83       	st	Z, r24
				break;
    2464:	1e c0       	rjmp	.+60     	; 0x24a2 <workInQueue+0x80e>

			case 12:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP13, sizeof(PM_INTERPRETER_HELP13));
    2466:	20 e3       	ldi	r18, 0x30	; 48
    2468:	44 e1       	ldi	r20, 0x14	; 20
    246a:	5a e0       	ldi	r21, 0x0A	; 10
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 13;
    2474:	e1 e0       	ldi	r30, 0x01	; 1
    2476:	f1 e0       	ldi	r31, 0x01	; 1
    2478:	80 81       	ld	r24, Z
    247a:	81 7e       	andi	r24, 0xE1	; 225
    247c:	8a 61       	ori	r24, 0x1A	; 26
    247e:	80 83       	st	Z, r24
				break;
    2480:	10 c0       	rjmp	.+32     	; 0x24a2 <workInQueue+0x80e>

			case 13:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP14, sizeof(PM_INTERPRETER_HELP14));
    2482:	2f e0       	ldi	r18, 0x0F	; 15
    2484:	45 e0       	ldi	r20, 0x05	; 5
    2486:	5a e0       	ldi	r21, 0x0A	; 10
    2488:	61 e0       	ldi	r22, 0x01	; 1
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
				// no break
			default:
				main_bf.mainHelpConcatNr = 0;
    2490:	e1 e0       	ldi	r30, 0x01	; 1
    2492:	f1 e0       	ldi	r31, 0x01	; 1
    2494:	80 81       	ld	r24, Z
    2496:	81 7e       	andi	r24, 0xE1	; 225
    2498:	80 83       	st	Z, r24
				break;
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <workInQueue+0x80e>
			}
		}

		if (isLocked) {
			ringbuffer_fw_freeSemaphore(true);
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	0e 94 bf 23 	call	0x477e	; 0x477e <ringbuffer_fw_freeSemaphore>
		}
	}
}
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	1f 91       	pop	r17
    24b0:	ff 90       	pop	r15
    24b2:	ef 90       	pop	r14
    24b4:	df 90       	pop	r13
    24b6:	cf 90       	pop	r12
    24b8:	bf 90       	pop	r11
    24ba:	af 90       	pop	r10
    24bc:	9f 90       	pop	r9
    24be:	8f 90       	pop	r8
    24c0:	08 95       	ret

000024c2 <twi_mcp23017_av1624_fw_showStatus>:
		mainPwmTerminalAdj = 0.0f;
	}
}

void twi_mcp23017_av1624_fw_showStatus(void)
{
    24c2:	4f 92       	push	r4
    24c4:	5f 92       	push	r5
    24c6:	6f 92       	push	r6
    24c8:	7f 92       	push	r7
    24ca:	8f 92       	push	r8
    24cc:	9f 92       	push	r9
    24ce:	af 92       	push	r10
    24d0:	bf 92       	push	r11
    24d2:	cf 92       	push	r12
    24d4:	df 92       	push	r13
    24d6:	ef 92       	push	r14
    24d8:	ff 92       	push	r15
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
	if (!main_bf.mainIsLcdAttached) {
    24de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    24e2:	88 23       	and	r24, r24
    24e4:	4c f0       	brlt	.+18     	; 0x24f8 <twi_mcp23017_av1624_fw_showStatus+0x36>
		twi_mcp23017_fw_init();
    24e6:	0e 94 c1 29 	call	0x5382	; 0x5382 <twi_mcp23017_fw_init>
		twi_mcp23017_av1624_fw_init();
    24ea:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <twi_mcp23017_av1624_fw_init>
		if (!main_bf.mainIsLcdAttached) {
    24ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    24f2:	88 23       	and	r24, r24
    24f4:	0c f0       	brlt	.+2      	; 0x24f8 <twi_mcp23017_av1624_fw_showStatus+0x36>
    24f6:	fc c1       	rjmp	.+1016   	; 0x28f0 <twi_mcp23017_av1624_fw_showStatus+0x42e>
			return;
		}
	}

	/* I2C LCD-Module via MCP23017 16 bit port expander */  // XXX I2C LCD-Module displayed fields are here
	uint8_t sreg = SREG;
    24f8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    24fa:	f8 94       	cli
	uint32_t localFastCtr1ms = fastCtr1ms;
    24fc:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <fastCtr1ms>
    2500:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <fastCtr1ms+0x1>
    2504:	a0 91 39 05 	lds	r26, 0x0539	; 0x800539 <fastCtr1ms+0x2>
    2508:	b0 91 3a 05 	lds	r27, 0x053A	; 0x80053a <fastCtr1ms+0x3>
	SREG = sreg;
    250c:	2f bf       	out	0x3f, r18	; 63

	if (localFastCtr1ms <= 5000) {
    250e:	89 38       	cpi	r24, 0x89	; 137
    2510:	93 41       	sbci	r25, 0x13	; 19
    2512:	a1 05       	cpc	r26, r1
    2514:	b1 05       	cpc	r27, r1
    2516:	48 f5       	brcc	.+82     	; 0x256a <twi_mcp23017_av1624_fw_showStatus+0xa8>
		/* welcome message */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC01, sizeof(PM_FORMAT_LC01));
    2518:	21 e1       	ldi	r18, 0x11	; 17
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4d e8       	ldi	r20, 0x8D	; 141
    251e:	54 e0       	ldi	r21, 0x04	; 4
    2520:	6f e8       	ldi	r22, 0x8F	; 143
    2522:	73 e0       	ldi	r23, 0x03	; 3
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		twi_mcp23017_av1624_fw_gotoPosition(0, 0);
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	0e 94 19 2b 	call	0x5632	; 0x5632 <twi_mcp23017_av1624_fw_gotoPosition>
		twi_mcp23017_av1624_fw_writeString(mainFormatBuffer, 16);
    2532:	60 e1       	ldi	r22, 0x10	; 16
    2534:	8f e8       	ldi	r24, 0x8F	; 143
    2536:	93 e0       	ldi	r25, 0x03	; 3
    2538:	0e 94 4d 2b 	call	0x569a	; 0x569a <twi_mcp23017_av1624_fw_writeString>
		usbPoll();
    253c:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <usbPoll>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC02, sizeof(PM_FORMAT_LC02));
    2540:	21 e1       	ldi	r18, 0x11	; 17
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4c e7       	ldi	r20, 0x7C	; 124
    2546:	54 e0       	ldi	r21, 0x04	; 4
    2548:	6f e8       	ldi	r22, 0x8F	; 143
    254a:	73 e0       	ldi	r23, 0x03	; 3
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	0e 94 19 2b 	call	0x5632	; 0x5632 <twi_mcp23017_av1624_fw_gotoPosition>
		twi_mcp23017_av1624_fw_writeString(mainFormatBuffer, 16);
    255a:	60 e1       	ldi	r22, 0x10	; 16
    255c:	8f e8       	ldi	r24, 0x8F	; 143
    255e:	93 e0       	ldi	r25, 0x03	; 3
    2560:	0e 94 4d 2b 	call	0x569a	; 0x569a <twi_mcp23017_av1624_fw_writeString>
		usbPoll();
    2564:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <usbPoll>
    2568:	c3 c1       	rjmp	.+902    	; 0x28f0 <twi_mcp23017_av1624_fw_showStatus+0x42e>
		static uint8_t displayNr	= 0;
		static uint8_t displaySubNr	= 0;
		int len = 0;

		/* the status-line */
		if (mainRefClkState > REFCLK_STATE_NOSYNC) {
    256a:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    256e:	88 23       	and	r24, r24
    2570:	09 f4       	brne	.+2      	; 0x2574 <twi_mcp23017_av1624_fw_showStatus+0xb2>
    2572:	42 c0       	rjmp	.+132    	; 0x25f8 <twi_mcp23017_av1624_fw_showStatus+0x136>
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC11, sizeof(PM_FORMAT_LC11));
    2574:	28 e1       	ldi	r18, 0x18	; 24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	44 e6       	ldi	r20, 0x64	; 100
    257a:	54 e0       	ldi	r21, 0x04	; 4
    257c:	6f e8       	ldi	r22, 0x8F	; 143
    257e:	73 e0       	ldi	r23, 0x03	; 3
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2586:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <main_nmeaSatsUsed+0x1>
    258a:	8f 93       	push	r24
    258c:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <main_nmeaSatsUsed>
    2590:	8f 93       	push	r24
    2592:	1f 92       	push	r1
    2594:	83 ef       	ldi	r24, 0xF3	; 243
    2596:	8f 93       	push	r24
    2598:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    259c:	1f 92       	push	r1
    259e:	8f 93       	push	r24
    25a0:	1f 92       	push	r1
    25a2:	80 ee       	ldi	r24, 0xE0	; 224
    25a4:	8f 93       	push	r24
			'b',
			(mainPpm * 1000.0f),
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	4a e7       	ldi	r20, 0x7A	; 122
    25ac:	54 e4       	ldi	r21, 0x44	; 68
    25ae:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <mainPpm>
    25b2:	70 91 80 05 	lds	r23, 0x0580	; 0x800580 <mainPpm+0x1>
    25b6:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <mainPpm+0x2>
    25ba:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <mainPpm+0x3>
    25be:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
		int len = 0;

		/* the status-line */
		if (mainRefClkState > REFCLK_STATE_NOSYNC) {
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC11, sizeof(PM_FORMAT_LC11));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    25c2:	9f 93       	push	r25
    25c4:	8f 93       	push	r24
    25c6:	7f 93       	push	r23
    25c8:	6f 93       	push	r22
    25ca:	1f 92       	push	r1
    25cc:	82 e6       	ldi	r24, 0x62	; 98
    25ce:	8f 93       	push	r24
    25d0:	8f e8       	ldi	r24, 0x8F	; 143
    25d2:	93 e0       	ldi	r25, 0x03	; 3
    25d4:	9f 93       	push	r25
    25d6:	8f 93       	push	r24
    25d8:	8f e0       	ldi	r24, 0x0F	; 15
    25da:	94 e0       	ldi	r25, 0x04	; 4
    25dc:	9f 93       	push	r25
    25de:	8f 93       	push	r24
    25e0:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
    25e4:	c8 2f       	mov	r28, r24
    25e6:	8d b7       	in	r24, 0x3d	; 61
    25e8:	9e b7       	in	r25, 0x3e	; 62
    25ea:	42 96       	adiw	r24, 0x12	; 18
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	9e bf       	out	0x3e, r25	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	8d bf       	out	0x3d, r24	; 61
    25f6:	2c c0       	rjmp	.+88     	; 0x2650 <twi_mcp23017_av1624_fw_showStatus+0x18e>
			mainRefClkState,
			0xf3,
			main_nmeaSatsUsed);

			} else {
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC12, sizeof(PM_FORMAT_LC12));
    25f8:	28 e1       	ldi	r18, 0x18	; 24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	4c e4       	ldi	r20, 0x4C	; 76
    25fe:	54 e0       	ldi	r21, 0x04	; 4
    2600:	6f e8       	ldi	r22, 0x8F	; 143
    2602:	73 e0       	ldi	r23, 0x03	; 3
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    260a:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <main_nmeaSatsUsed+0x1>
    260e:	8f 93       	push	r24
    2610:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <main_nmeaSatsUsed>
    2614:	8f 93       	push	r24
    2616:	1f 92       	push	r1
    2618:	83 ef       	ldi	r24, 0xF3	; 243
    261a:	8f 93       	push	r24
    261c:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    2620:	1f 92       	push	r1
    2622:	8f 93       	push	r24
    2624:	1f 92       	push	r1
    2626:	80 ee       	ldi	r24, 0xE0	; 224
    2628:	8f 93       	push	r24
    262a:	8f e8       	ldi	r24, 0x8F	; 143
    262c:	93 e0       	ldi	r25, 0x03	; 3
    262e:	9f 93       	push	r25
    2630:	8f 93       	push	r24
    2632:	8f e0       	ldi	r24, 0x0F	; 15
    2634:	94 e0       	ldi	r25, 0x04	; 4
    2636:	9f 93       	push	r25
    2638:	8f 93       	push	r24
    263a:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
    263e:	c8 2f       	mov	r28, r24
    2640:	8d b7       	in	r24, 0x3d	; 61
    2642:	9e b7       	in	r25, 0x3e	; 62
    2644:	0c 96       	adiw	r24, 0x0c	; 12
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	9e bf       	out	0x3e, r25	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	8d bf       	out	0x3d, r24	; 61
			0xe0,
			mainRefClkState,
			0xf3,
			main_nmeaSatsUsed);
		}
		twi_mcp23017_av1624_fw_gotoPosition(0, 0);
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	0e 94 19 2b 	call	0x5632	; 0x5632 <twi_mcp23017_av1624_fw_gotoPosition>
		twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    2658:	6c 2f       	mov	r22, r28
    265a:	8f e0       	ldi	r24, 0x0F	; 15
    265c:	94 e0       	ldi	r25, 0x04	; 4
    265e:	0e 94 4d 2b 	call	0x569a	; 0x569a <twi_mcp23017_av1624_fw_writeString>
		usbPoll();
    2662:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <usbPoll>

		switch (displayNr) {
    2666:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <displayNr.2964>
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	09 f4       	brne	.+2      	; 0x2670 <twi_mcp23017_av1624_fw_showStatus+0x1ae>
    266e:	74 c0       	rjmp	.+232    	; 0x2758 <twi_mcp23017_av1624_fw_showStatus+0x296>
    2670:	82 30       	cpi	r24, 0x02	; 2
    2672:	09 f4       	brne	.+2      	; 0x2676 <twi_mcp23017_av1624_fw_showStatus+0x1b4>
    2674:	c7 c0       	rjmp	.+398    	; 0x2804 <twi_mcp23017_av1624_fw_showStatus+0x342>
			default:
			case 0:
			{
				/* the timestamp */
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
    2676:	80 90 59 05 	lds	r8, 0x0559	; 0x800559 <main_nmeaDate>
    267a:	90 90 5a 05 	lds	r9, 0x055A	; 0x80055a <main_nmeaDate+0x1>
    267e:	a0 90 5b 05 	lds	r10, 0x055B	; 0x80055b <main_nmeaDate+0x2>
    2682:	b0 90 5c 05 	lds	r11, 0x055C	; 0x80055c <main_nmeaDate+0x3>
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
    2686:	40 90 55 05 	lds	r4, 0x0555	; 0x800555 <main_nmeaTimeUtcInt>
    268a:	50 90 56 05 	lds	r5, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    268e:	60 90 57 05 	lds	r6, 0x0557	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    2692:	70 90 58 05 	lds	r7, 0x0558	; 0x800558 <main_nmeaTimeUtcInt+0x3>
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
    2696:	2c e1       	ldi	r18, 0x1C	; 28
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e3       	ldi	r20, 0x30	; 48
    269c:	54 e0       	ldi	r21, 0x04	; 4
    269e:	6f e8       	ldi	r22, 0x8F	; 143
    26a0:	73 e0       	ldi	r23, 0x03	; 3
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
    26a8:	0f 2e       	mov	r0, r31
    26aa:	f4 e6       	ldi	r31, 0x64	; 100
    26ac:	cf 2e       	mov	r12, r31
    26ae:	d1 2c       	mov	r13, r1
    26b0:	e1 2c       	mov	r14, r1
    26b2:	f1 2c       	mov	r15, r1
    26b4:	f0 2d       	mov	r31, r0
    26b6:	c3 01       	movw	r24, r6
    26b8:	b2 01       	movw	r22, r4
    26ba:	a7 01       	movw	r20, r14
    26bc:	96 01       	movw	r18, r12
    26be:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    26c2:	1f 92       	push	r1
    26c4:	6f 93       	push	r22
				/* the timestamp */
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
    26c6:	ca 01       	movw	r24, r20
    26c8:	b9 01       	movw	r22, r18
    26ca:	a7 01       	movw	r20, r14
    26cc:	96 01       	movw	r18, r12
    26ce:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    26d2:	1f 92       	push	r1
    26d4:	6f 93       	push	r22
			{
				/* the timestamp */
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
    26d6:	c3 01       	movw	r24, r6
    26d8:	b2 01       	movw	r22, r4
    26da:	20 e1       	ldi	r18, 0x10	; 16
    26dc:	37 e2       	ldi	r19, 0x27	; 39
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	50 e0       	ldi	r21, 0x00	; 0
    26e2:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    26e6:	1f 92       	push	r1
    26e8:	2f 93       	push	r18
			default:
			case 0:
			{
				/* the timestamp */
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
    26ea:	c5 01       	movw	r24, r10
    26ec:	b4 01       	movw	r22, r8
    26ee:	20 e1       	ldi	r18, 0x10	; 16
    26f0:	37 e2       	ldi	r19, 0x27	; 39
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	50 e0       	ldi	r21, 0x00	; 0
    26f6:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
    26fa:	ca 01       	movw	r24, r20
    26fc:	b9 01       	movw	r22, r18
    26fe:	a7 01       	movw	r20, r14
    2700:	96 01       	movw	r18, r12
    2702:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2706:	1f 92       	push	r1
    2708:	6f 93       	push	r22
			case 0:
			{
				/* the timestamp */
				//uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
    270a:	c5 01       	movw	r24, r10
    270c:	b4 01       	movw	r22, r8
    270e:	20 e4       	ldi	r18, 0x40	; 64
    2710:	32 e4       	ldi	r19, 0x42	; 66
    2712:	4f e0       	ldi	r20, 0x0F	; 15
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    271a:	1f 92       	push	r1
    271c:	2f 93       	push	r18
    271e:	8f e8       	ldi	r24, 0x8F	; 143
    2720:	93 e0       	ldi	r25, 0x03	; 3
    2722:	9f 93       	push	r25
    2724:	8f 93       	push	r24
    2726:	8f e0       	ldi	r24, 0x0F	; 15
    2728:	94 e0       	ldi	r25, 0x04	; 4
    272a:	9f 93       	push	r25
    272c:	8f 93       	push	r24
    272e:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
    2732:	c8 2f       	mov	r28, r24
				month,
				//year % 100,
				hour,
				minutes,
				seconds);
				twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	0e 94 19 2b 	call	0x5632	; 0x5632 <twi_mcp23017_av1624_fw_gotoPosition>
				twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    273c:	6c 2f       	mov	r22, r28
    273e:	8f e0       	ldi	r24, 0x0F	; 15
    2740:	94 e0       	ldi	r25, 0x04	; 4
    2742:	0e 94 4d 2b 	call	0x569a	; 0x569a <twi_mcp23017_av1624_fw_writeString>
			}
			break;
    2746:	8d b7       	in	r24, 0x3d	; 61
    2748:	9e b7       	in	r25, 0x3e	; 62
    274a:	0e 96       	adiw	r24, 0x0e	; 14
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	f8 94       	cli
    2750:	9e bf       	out	0x3e, r25	; 62
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	8d bf       	out	0x3d, r24	; 61
    2756:	b2 c0       	rjmp	.+356    	; 0x28bc <twi_mcp23017_av1624_fw_showStatus+0x3fa>

			case 1:
			{
				/* SAT data */
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC22, sizeof(PM_FORMAT_LC22));
    2758:	20 e2       	ldi	r18, 0x20	; 32
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e1       	ldi	r20, 0x10	; 16
    275e:	54 e0       	ldi	r21, 0x04	; 4
    2760:	6f e8       	ldi	r22, 0x8F	; 143
    2762:	73 e0       	ldi	r23, 0x03	; 3
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    276a:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <main_nmeaSatsEphemerisGlonass+0x1>
    276e:	8f 93       	push	r24
    2770:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGlonass>
    2774:	8f 93       	push	r24
    2776:	1f 92       	push	r1
    2778:	8b ee       	ldi	r24, 0xEB	; 235
    277a:	8f 93       	push	r24
    277c:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <main_nmeaSatsEphemerisGpsGalileoQzss+0x1>
    2780:	8f 93       	push	r24
    2782:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaSatsEphemerisGpsGalileoQzss>
    2786:	8f 93       	push	r24
    2788:	1f 92       	push	r1
    278a:	8f ed       	ldi	r24, 0xDF	; 223
    278c:	8f 93       	push	r24
    278e:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <main_nmeaPdop+0x3>
    2792:	8f 93       	push	r24
    2794:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <main_nmeaPdop+0x2>
    2798:	8f 93       	push	r24
    279a:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <main_nmeaPdop+0x1>
    279e:	8f 93       	push	r24
    27a0:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <main_nmeaPdop>
    27a4:	8f 93       	push	r24
    27a6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <main_nmeaPosFixIndicator+0x1>
    27aa:	8f 93       	push	r24
    27ac:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaPosFixIndicator>
    27b0:	8f 93       	push	r24
    27b2:	1f 92       	push	r1
    27b4:	86 e4       	ldi	r24, 0x46	; 70
    27b6:	8f 93       	push	r24
    27b8:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <main_nmeaMode2+0x1>
    27bc:	8f 93       	push	r24
    27be:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <main_nmeaMode2>
    27c2:	8f 93       	push	r24
    27c4:	1f 92       	push	r1
    27c6:	8d e4       	ldi	r24, 0x4D	; 77
    27c8:	8f 93       	push	r24
    27ca:	8f e8       	ldi	r24, 0x8F	; 143
    27cc:	93 e0       	ldi	r25, 0x03	; 3
    27ce:	9f 93       	push	r25
    27d0:	8f 93       	push	r24
    27d2:	8f e0       	ldi	r24, 0x0F	; 15
    27d4:	94 e0       	ldi	r25, 0x04	; 4
    27d6:	9f 93       	push	r25
    27d8:	8f 93       	push	r24
    27da:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
    27de:	c8 2f       	mov	r28, r24
				main_nmeaPdop,
				0xdf,
				main_nmeaSatsEphemerisGpsGalileoQzss,
				0xeb,
				main_nmeaSatsEphemerisGlonass);
				twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    27e0:	60 e0       	ldi	r22, 0x00	; 0
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	0e 94 19 2b 	call	0x5632	; 0x5632 <twi_mcp23017_av1624_fw_gotoPosition>
				twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    27e8:	6c 2f       	mov	r22, r28
    27ea:	8f e0       	ldi	r24, 0x0F	; 15
    27ec:	94 e0       	ldi	r25, 0x04	; 4
    27ee:	0e 94 4d 2b 	call	0x569a	; 0x569a <twi_mcp23017_av1624_fw_writeString>
			}
			break;
    27f2:	8d b7       	in	r24, 0x3d	; 61
    27f4:	9e b7       	in	r25, 0x3e	; 62
    27f6:	48 96       	adiw	r24, 0x18	; 24
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	9e bf       	out	0x3e, r25	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	8d bf       	out	0x3d, r24	; 61
    2802:	5c c0       	rjmp	.+184    	; 0x28bc <twi_mcp23017_av1624_fw_showStatus+0x3fa>

			case 2:
			{
				/* PWM data */
				uint8_t sreg = SREG;
    2804:	8f b7       	in	r24, 0x3f	; 63
				cli();
    2806:	f8 94       	cli
				uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
    2808:	d0 91 36 05 	lds	r29, 0x0536	; 0x800536 <fastPwmLoopVal>
				uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
    280c:	c0 91 35 05 	lds	r28, 0x0535	; 0x800535 <fastPwmSubLoopVal>
				SREG = sreg;
    2810:	8f bf       	out	0x3f, r24	; 63

				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC23, sizeof(PM_FORMAT_LC23));
    2812:	23 e1       	ldi	r18, 0x13	; 19
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	4d ef       	ldi	r20, 0xFD	; 253
    2818:	53 e0       	ldi	r21, 0x03	; 3
    281a:	6f e8       	ldi	r22, 0x8F	; 143
    281c:	73 e0       	ldi	r23, 0x03	; 3
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2824:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <mainAdcPullVolts+0x3>
    2828:	8f 93       	push	r24
    282a:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <mainAdcPullVolts+0x2>
    282e:	8f 93       	push	r24
    2830:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <mainAdcPullVolts+0x1>
    2834:	8f 93       	push	r24
    2836:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <mainAdcPullVolts>
    283a:	8f 93       	push	r24
    283c:	1f 92       	push	r1
    283e:	8b ea       	ldi	r24, 0xAB	; 171
    2840:	8f 93       	push	r24
}

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    2842:	6d 2f       	mov	r22, r29
    2844:	70 e0       	ldi	r23, 0x00	; 0
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    284e:	6b 01       	movw	r12, r22
    2850:	7c 01       	movw	r14, r24
    2852:	6c 2f       	mov	r22, r28
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e8       	ldi	r20, 0x80	; 128
    2864:	5b e3       	ldi	r21, 0x3B	; 59
    2866:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    286a:	9b 01       	movw	r18, r22
    286c:	ac 01       	movw	r20, r24
    286e:	c7 01       	movw	r24, r14
    2870:	b6 01       	movw	r22, r12
    2872:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
				uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
				uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
				SREG = sreg;

				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC23, sizeof(PM_FORMAT_LC23));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2876:	9f 93       	push	r25
    2878:	8f 93       	push	r24
    287a:	7f 93       	push	r23
    287c:	6f 93       	push	r22
    287e:	1f 92       	push	r1
    2880:	80 e5       	ldi	r24, 0x50	; 80
    2882:	8f 93       	push	r24
    2884:	8f e8       	ldi	r24, 0x8F	; 143
    2886:	93 e0       	ldi	r25, 0x03	; 3
    2888:	9f 93       	push	r25
    288a:	8f 93       	push	r24
    288c:	8f e0       	ldi	r24, 0x0F	; 15
    288e:	94 e0       	ldi	r25, 0x04	; 4
    2890:	9f 93       	push	r25
    2892:	8f 93       	push	r24
    2894:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
    2898:	c8 2f       	mov	r28, r24
				'P',
				main_fw_calcTimerToFloat(localFastPwmLoopVal, localFastPwmSubLoopVal),
				0xab,
				mainAdcPullVolts);
				twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    289a:	60 e0       	ldi	r22, 0x00	; 0
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	0e 94 19 2b 	call	0x5632	; 0x5632 <twi_mcp23017_av1624_fw_gotoPosition>
				twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    28a2:	6c 2f       	mov	r22, r28
    28a4:	8f e0       	ldi	r24, 0x0F	; 15
    28a6:	94 e0       	ldi	r25, 0x04	; 4
    28a8:	0e 94 4d 2b 	call	0x569a	; 0x569a <twi_mcp23017_av1624_fw_writeString>
			}
			break;
    28ac:	8d b7       	in	r24, 0x3d	; 61
    28ae:	9e b7       	in	r25, 0x3e	; 62
    28b0:	40 96       	adiw	r24, 0x10	; 16
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	9e bf       	out	0x3e, r25	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	8d bf       	out	0x3d, r24	; 61
		}
		usbPoll();
    28bc:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <usbPoll>

		if (++displaySubNr >= 3) {
    28c0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <displaySubNr.2965>
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	83 30       	cpi	r24, 0x03	; 3
    28c8:	18 f4       	brcc	.+6      	; 0x28d0 <twi_mcp23017_av1624_fw_showStatus+0x40e>
    28ca:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <displaySubNr.2965>
    28ce:	10 c0       	rjmp	.+32     	; 0x28f0 <twi_mcp23017_av1624_fw_showStatus+0x42e>
			displaySubNr = 0;
    28d0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <displaySubNr.2965>
			++displayNr;
    28d4:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <displayNr.2964>
    28d8:	9f 5f       	subi	r25, 0xFF	; 255
			displayNr %= 3;
    28da:	8b ea       	ldi	r24, 0xAB	; 171
    28dc:	98 9f       	mul	r25, r24
    28de:	81 2d       	mov	r24, r1
    28e0:	11 24       	eor	r1, r1
    28e2:	86 95       	lsr	r24
    28e4:	28 2f       	mov	r18, r24
    28e6:	22 0f       	add	r18, r18
    28e8:	82 0f       	add	r24, r18
    28ea:	98 1b       	sub	r25, r24
    28ec:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <displayNr.2964>
		}
	}
}
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	ff 90       	pop	r15
    28f6:	ef 90       	pop	r14
    28f8:	df 90       	pop	r13
    28fa:	cf 90       	pop	r12
    28fc:	bf 90       	pop	r11
    28fe:	af 90       	pop	r10
    2900:	9f 90       	pop	r9
    2902:	8f 90       	pop	r8
    2904:	7f 90       	pop	r7
    2906:	6f 90       	pop	r6
    2908:	5f 90       	pop	r5
    290a:	4f 90       	pop	r4
    290c:	08 95       	ret

0000290e <twi_smart_lcd_fw_showStatus>:

void twi_smart_lcd_fw_showStatus(void)
{
    290e:	4f 92       	push	r4
    2910:	5f 92       	push	r5
    2912:	6f 92       	push	r6
    2914:	7f 92       	push	r7
    2916:	8f 92       	push	r8
    2918:	9f 92       	push	r9
    291a:	af 92       	push	r10
    291c:	bf 92       	push	r11
    291e:	cf 92       	push	r12
    2920:	df 92       	push	r13
    2922:	ef 92       	push	r14
    2924:	ff 92       	push	r15
    2926:	0f 93       	push	r16
    2928:	1f 93       	push	r17
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
	/* Init device */
	if (!main_bf.mainIsSmartAttached) {
    292e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    2932:	80 ff       	sbrs	r24, 0
		twi_smart_lcd_fw_init();
    2934:	0e 94 98 2b 	call	0x5730	; 0x5730 <twi_smart_lcd_fw_init>
	}

	{
		uint8_t clk_state;
		float phaseVolts;
		uint8_t sreg = SREG;
    2938:	2f b7       	in	r18, 0x3f	; 63
		cli();
    293a:	f8 94       	cli
		clk_state = (uint8_t) mainRefClkState;
    293c:	c0 91 9f 05 	lds	r28, 0x059F	; 0x80059f <mainRefClkState>
		phaseVolts = mainAdcPhaseVolts;
    2940:	60 91 77 05 	lds	r22, 0x0577	; 0x800577 <mainAdcPhaseVolts>
    2944:	70 91 78 05 	lds	r23, 0x0578	; 0x800578 <mainAdcPhaseVolts+0x1>
    2948:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <mainAdcPhaseVolts+0x2>
    294c:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <mainAdcPhaseVolts+0x3>
		SREG = sreg;
    2950:	2f bf       	out	0x3f, r18	; 63

		int16_t	phase100 = (int16_t) (100.0f * ((phaseVolts - 0.6f) * 180.0f / 0.25f));  // TODO: correct me!
    2952:	2a e9       	ldi	r18, 0x9A	; 154
    2954:	39 e9       	ldi	r19, 0x99	; 153
    2956:	49 e1       	ldi	r20, 0x19	; 25
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	44 e3       	ldi	r20, 0x34	; 52
    2964:	53 e4       	ldi	r21, 0x43	; 67
    2966:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e8       	ldi	r20, 0x80	; 128
    2970:	50 e4       	ldi	r21, 0x40	; 64
    2972:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	48 ec       	ldi	r20, 0xC8	; 200
    297c:	52 e4       	ldi	r21, 0x42	; 66
    297e:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2982:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
		twi_smart_lcd_fw_set_clk_state(clk_state, phase100);
    2986:	8c 2f       	mov	r24, r28
    2988:	0e 94 9b 2b 	call	0x5736	; 0x5736 <twi_smart_lcd_fw_set_clk_state>
	}

	{
		long date;
		uint8_t sreg = SREG;
    298c:	8f b7       	in	r24, 0x3f	; 63
		cli();
    298e:	f8 94       	cli
		date = main_nmeaDate;
    2990:	c0 90 59 05 	lds	r12, 0x0559	; 0x800559 <main_nmeaDate>
    2994:	d0 90 5a 05 	lds	r13, 0x055A	; 0x80055a <main_nmeaDate+0x1>
    2998:	e0 90 5b 05 	lds	r14, 0x055B	; 0x80055b <main_nmeaDate+0x2>
    299c:	f0 90 5c 05 	lds	r15, 0x055C	; 0x80055c <main_nmeaDate+0x3>
		SREG = sreg;
    29a0:	8f bf       	out	0x3f, r24	; 63

		uint16_t year  = (uint16_t) (date % 10000);
		uint8_t  month = (uint8_t) ((date / 10000) % 100);
		uint8_t  day   = (uint8_t)  (date / 1000000);
    29a2:	c7 01       	movw	r24, r14
    29a4:	b6 01       	movw	r22, r12
    29a6:	20 e4       	ldi	r18, 0x40	; 64
    29a8:	32 e4       	ldi	r19, 0x42	; 66
    29aa:	4f e0       	ldi	r20, 0x0F	; 15
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
    29b2:	c2 2f       	mov	r28, r18
		cli();
		date = main_nmeaDate;
		SREG = sreg;

		uint16_t year  = (uint16_t) (date % 10000);
		uint8_t  month = (uint8_t) ((date / 10000) % 100);
    29b4:	0f 2e       	mov	r0, r31
    29b6:	f0 e1       	ldi	r31, 0x10	; 16
    29b8:	8f 2e       	mov	r8, r31
    29ba:	f7 e2       	ldi	r31, 0x27	; 39
    29bc:	9f 2e       	mov	r9, r31
    29be:	a1 2c       	mov	r10, r1
    29c0:	b1 2c       	mov	r11, r1
    29c2:	f0 2d       	mov	r31, r0
    29c4:	c7 01       	movw	r24, r14
    29c6:	b6 01       	movw	r22, r12
    29c8:	a5 01       	movw	r20, r10
    29ca:	94 01       	movw	r18, r8
    29cc:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
    29d0:	2b 01       	movw	r4, r22
    29d2:	3c 01       	movw	r6, r24
    29d4:	0f 2e       	mov	r0, r31
    29d6:	f4 e6       	ldi	r31, 0x64	; 100
    29d8:	cf 2e       	mov	r12, r31
    29da:	d1 2c       	mov	r13, r1
    29dc:	e1 2c       	mov	r14, r1
    29de:	f1 2c       	mov	r15, r1
    29e0:	f0 2d       	mov	r31, r0
    29e2:	ca 01       	movw	r24, r20
    29e4:	b9 01       	movw	r22, r18
    29e6:	a7 01       	movw	r20, r14
    29e8:	96 01       	movw	r18, r12
    29ea:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
		uint8_t  day   = (uint8_t)  (date / 1000000);
		twi_smart_lcd_fw_set_date(year, month, day);
    29ee:	4c 2f       	mov	r20, r28
    29f0:	c2 01       	movw	r24, r4
    29f2:	0e 94 a7 2b 	call	0x574e	; 0x574e <twi_smart_lcd_fw_set_date>
	}

	{
		long utc;
		uint8_t sreg = SREG;
    29f6:	8f b7       	in	r24, 0x3f	; 63
		cli();
    29f8:	f8 94       	cli
		utc = main_nmeaTimeUtcInt;
    29fa:	40 90 55 05 	lds	r4, 0x0555	; 0x800555 <main_nmeaTimeUtcInt>
    29fe:	50 90 56 05 	lds	r5, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    2a02:	60 90 57 05 	lds	r6, 0x0557	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    2a06:	70 90 58 05 	lds	r7, 0x0558	; 0x800558 <main_nmeaTimeUtcInt+0x3>
		SREG = sreg;
    2a0a:	8f bf       	out	0x3f, r24	; 63

		uint8_t  hour   = (uint8_t)  (utc / 10000);
		uint8_t  minute = (uint8_t) ((utc / 100) % 100);
		uint8_t  second = (uint8_t)  (utc % 100);
    2a0c:	c3 01       	movw	r24, r6
    2a0e:	b2 01       	movw	r22, r4
    2a10:	a7 01       	movw	r20, r14
    2a12:	96 01       	movw	r18, r12
    2a14:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
    2a18:	d6 2f       	mov	r29, r22
		cli();
		utc = main_nmeaTimeUtcInt;
		SREG = sreg;

		uint8_t  hour   = (uint8_t)  (utc / 10000);
		uint8_t  minute = (uint8_t) ((utc / 100) % 100);
    2a1a:	ca 01       	movw	r24, r20
    2a1c:	b9 01       	movw	r22, r18
    2a1e:	a7 01       	movw	r20, r14
    2a20:	96 01       	movw	r18, r12
    2a22:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
    2a26:	c6 2f       	mov	r28, r22
		uint8_t sreg = SREG;
		cli();
		utc = main_nmeaTimeUtcInt;
		SREG = sreg;

		uint8_t  hour   = (uint8_t)  (utc / 10000);
    2a28:	c3 01       	movw	r24, r6
    2a2a:	b2 01       	movw	r22, r4
    2a2c:	a5 01       	movw	r20, r10
    2a2e:	94 01       	movw	r18, r8
    2a30:	0e 94 36 3b 	call	0x766c	; 0x766c <__divmodsi4>
    2a34:	82 2f       	mov	r24, r18
		uint8_t  minute = (uint8_t) ((utc / 100) % 100);
		uint8_t  second = (uint8_t)  (utc % 100);
		twi_smart_lcd_fw_set_time(hour, minute, second);
    2a36:	4d 2f       	mov	r20, r29
    2a38:	6c 2f       	mov	r22, r28
    2a3a:	0e 94 b4 2b 	call	0x5768	; 0x5768 <twi_smart_lcd_fw_set_time>
	}

	{
		float ppm;
		uint8_t sreg = SREG;
    2a3e:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2a40:	f8 94       	cli
		ppm = mainPpm;
    2a42:	c0 90 7f 05 	lds	r12, 0x057F	; 0x80057f <mainPpm>
    2a46:	d0 90 80 05 	lds	r13, 0x0580	; 0x800580 <mainPpm+0x1>
    2a4a:	e0 90 81 05 	lds	r14, 0x0581	; 0x800581 <mainPpm+0x2>
    2a4e:	f0 90 82 05 	lds	r15, 0x0582	; 0x800582 <mainPpm+0x3>
		SREG = sreg;
    2a52:	8f bf       	out	0x3f, r24	; 63

		float localPpb = ppm > 0 ?  ppm * 1000.0f : ppm * -1000.0f;
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	a9 01       	movw	r20, r18
    2a5a:	c7 01       	movw	r24, r14
    2a5c:	b6 01       	movw	r22, r12
    2a5e:	0e 94 a4 31 	call	0x6348	; 0x6348 <__gesf2>
    2a62:	18 16       	cp	r1, r24
    2a64:	5c f4       	brge	.+22     	; 0x2a7c <twi_smart_lcd_fw_showStatus+0x16e>
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	4a e7       	ldi	r20, 0x7A	; 122
    2a6c:	54 e4       	ldi	r21, 0x44	; 68
    2a6e:	c7 01       	movw	r24, r14
    2a70:	b6 01       	movw	r22, r12
    2a72:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2a76:	2b 01       	movw	r4, r22
    2a78:	3c 01       	movw	r6, r24
    2a7a:	0a c0       	rjmp	.+20     	; 0x2a90 <twi_smart_lcd_fw_showStatus+0x182>
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	4a e7       	ldi	r20, 0x7A	; 122
    2a82:	54 ec       	ldi	r21, 0xC4	; 196
    2a84:	c7 01       	movw	r24, r14
    2a86:	b6 01       	movw	r22, r12
    2a88:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2a8c:	2b 01       	movw	r4, r22
    2a8e:	3c 01       	movw	r6, r24
		int16_t ppb_int  = (int16_t) localPpb;
    2a90:	c3 01       	movw	r24, r6
    2a92:	b2 01       	movw	r22, r4
    2a94:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
    2a98:	4b 01       	movw	r8, r22
    2a9a:	5c 01       	movw	r10, r24
    2a9c:	eb 01       	movw	r28, r22
		uint16_t ppb_frac1000 = (uint16_t) ((localPpb - ppb_int) * 1000.0f);
    2a9e:	07 2e       	mov	r0, r23
    2aa0:	00 0c       	add	r0, r0
    2aa2:	88 0b       	sbc	r24, r24
    2aa4:	99 0b       	sbc	r25, r25
    2aa6:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    2aaa:	9b 01       	movw	r18, r22
    2aac:	ac 01       	movw	r20, r24
    2aae:	c3 01       	movw	r24, r6
    2ab0:	b2 01       	movw	r22, r4
    2ab2:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a e7       	ldi	r20, 0x7A	; 122
    2abc:	54 e4       	ldi	r21, 0x44	; 68
    2abe:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2ac2:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__fixunssfsi>
    2ac6:	2b 01       	movw	r4, r22
    2ac8:	3c 01       	movw	r6, r24
		if (ppm < 0) {
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	a9 01       	movw	r20, r18
    2ad0:	c7 01       	movw	r24, r14
    2ad2:	b6 01       	movw	r22, r12
    2ad4:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    2ad8:	88 23       	and	r24, r24
    2ada:	24 f4       	brge	.+8      	; 0x2ae4 <twi_smart_lcd_fw_showStatus+0x1d6>
			ppb_int = -ppb_int;
    2adc:	cc 27       	eor	r28, r28
    2ade:	dd 27       	eor	r29, r29
    2ae0:	c8 19       	sub	r28, r8
    2ae2:	d9 09       	sbc	r29, r9
		}
		twi_smart_lcd_fw_set_ppb(ppb_int, ppb_frac1000);
    2ae4:	b2 01       	movw	r22, r4
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	0e 94 c0 2b 	call	0x5780	; 0x5780 <twi_smart_lcd_fw_set_ppb>
	}

	{
		uint8_t pwm_int;
		uint8_t pwm_frac256;
		uint8_t sreg = SREG;
    2aec:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2aee:	f8 94       	cli
		pwm_int = fastPwmLoopVal;
    2af0:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <fastPwmLoopVal>
		pwm_frac256 = fastPwmSubLoopVal;
    2af4:	60 91 35 05 	lds	r22, 0x0535	; 0x800535 <fastPwmSubLoopVal>
		SREG = sreg;
    2af8:	9f bf       	out	0x3f, r25	; 63

		twi_smart_lcd_fw_set_pwm(pwm_int, pwm_frac256);
    2afa:	0e 94 cd 2b 	call	0x579a	; 0x579a <twi_smart_lcd_fw_set_pwm>
	}

	{
		float pv;
		uint8_t sreg = SREG;
    2afe:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2b00:	f8 94       	cli
		pv = mainAdcPullVolts;
    2b02:	c0 90 7b 05 	lds	r12, 0x057B	; 0x80057b <mainAdcPullVolts>
    2b06:	d0 90 7c 05 	lds	r13, 0x057C	; 0x80057c <mainAdcPullVolts+0x1>
    2b0a:	e0 90 7d 05 	lds	r14, 0x057D	; 0x80057d <mainAdcPullVolts+0x2>
    2b0e:	f0 90 7e 05 	lds	r15, 0x057E	; 0x80057e <mainAdcPullVolts+0x3>
		SREG = sreg;
    2b12:	8f bf       	out	0x3f, r24	; 63

		uint8_t pv_int   = (uint8_t) pv;
    2b14:	c7 01       	movw	r24, r14
    2b16:	b6 01       	movw	r22, r12
    2b18:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__fixunssfsi>
    2b1c:	c6 2f       	mov	r28, r22
		uint16_t pv_frac1000 = (uint16_t) ((pv - pv_int) * 1000.0f);
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    2b28:	9b 01       	movw	r18, r22
    2b2a:	ac 01       	movw	r20, r24
    2b2c:	c7 01       	movw	r24, r14
    2b2e:	b6 01       	movw	r22, r12
    2b30:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	4a e7       	ldi	r20, 0x7A	; 122
    2b3a:	54 e4       	ldi	r21, 0x44	; 68
    2b3c:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2b40:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__fixunssfsi>
		twi_smart_lcd_fw_set_pv(pv_int, pv_frac1000);
    2b44:	8c 2f       	mov	r24, r28
    2b46:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <twi_smart_lcd_fw_set_pv>

	{
		uint8_t sat_west;
		uint8_t sat_east;
		uint8_t sat_used;
		uint8_t sreg = SREG;
    2b4a:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2b4c:	f8 94       	cli
		sat_west = (uint8_t) main_nmeaSatsEphemerisGpsGalileoQzss;
    2b4e:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaSatsEphemerisGpsGalileoQzss>
		sat_east = (uint8_t) main_nmeaSatsEphemerisGlonass;
    2b52:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGlonass>
		sat_used = (uint8_t) main_nmeaSatsUsed;
    2b56:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <main_nmeaSatsUsed>
		SREG = sreg;
    2b5a:	9f bf       	out	0x3f, r25	; 63

		twi_smart_lcd_fw_set_sat_use(sat_west, sat_east, sat_used);
    2b5c:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <twi_smart_lcd_fw_set_sat_use>
	}

	{
		float sat_dop;
		uint8_t sreg = SREG;
    2b60:	2f b7       	in	r18, 0x3f	; 63
		cli();
    2b62:	f8 94       	cli
		sat_dop = main_nmeaPdop;
    2b64:	60 91 65 05 	lds	r22, 0x0565	; 0x800565 <main_nmeaPdop>
    2b68:	70 91 66 05 	lds	r23, 0x0566	; 0x800566 <main_nmeaPdop+0x1>
    2b6c:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <main_nmeaPdop+0x2>
    2b70:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <main_nmeaPdop+0x3>
		SREG = sreg;
    2b74:	2f bf       	out	0x3f, r18	; 63

		uint16_t sat_dop100 = (uint16_t) (sat_dop * 100.0f);
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	48 ec       	ldi	r20, 0xC8	; 200
    2b7c:	52 e4       	ldi	r21, 0x42	; 66
    2b7e:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2b82:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__fixunssfsi>
		twi_smart_lcd_fw_set_sat_dop(sat_dop100);
    2b86:	cb 01       	movw	r24, r22
    2b88:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <twi_smart_lcd_fw_set_sat_dop>
	}

	{
		uint8_t pos_fi;
		uint8_t pos_m2;
		uint8_t sreg = SREG;
    2b8c:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2b8e:	f8 94       	cli
		pos_fi = (uint8_t) main_nmeaPosFixIndicator;
    2b90:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaPosFixIndicator>
		pos_m2 = (uint8_t) main_nmeaMode2;
    2b94:	60 91 71 05 	lds	r22, 0x0571	; 0x800571 <main_nmeaMode2>
		SREG = sreg;
    2b98:	9f bf       	out	0x3f, r25	; 63

		twi_smart_lcd_fw_set_pos_state(pos_fi, pos_m2);
    2b9a:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <twi_smart_lcd_fw_set_pos_state>
	}

	{
		uint8_t lat_sgn;
		float lat;
		uint8_t sreg = SREG;
    2b9e:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2ba0:	f8 94       	cli
		lat_sgn = (uint8_t) main_nmeaPosLatSign;
    2ba2:	50 90 4e 05 	lds	r5, 0x054E	; 0x80054e <main_nmeaPosLatSign>
		lat = main_nmeaPosLat;
    2ba6:	80 90 4f 05 	lds	r8, 0x054F	; 0x80054f <main_nmeaPosLat>
    2baa:	90 90 50 05 	lds	r9, 0x0550	; 0x800550 <main_nmeaPosLat+0x1>
    2bae:	a0 90 51 05 	lds	r10, 0x0551	; 0x800551 <main_nmeaPosLat+0x2>
    2bb2:	b0 90 52 05 	lds	r11, 0x0552	; 0x800552 <main_nmeaPosLat+0x3>
		SREG = sreg;
    2bb6:	8f bf       	out	0x3f, r24	; 63

		uint8_t  lat_deg = (uint8_t) (lat / 100.0f);
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	48 ec       	ldi	r20, 0xC8	; 200
    2bbe:	52 e4       	ldi	r21, 0x42	; 66
    2bc0:	c5 01       	movw	r24, r10
    2bc2:	b4 01       	movw	r22, r8
    2bc4:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    2bc8:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__fixunssfsi>
    2bcc:	66 2e       	mov	r6, r22
		uint8_t  lat_min_int = (uint8_t) ((int) lat % 100);
    2bce:	c5 01       	movw	r24, r10
    2bd0:	b4 01       	movw	r22, r8
    2bd2:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
    2bd6:	04 e6       	ldi	r16, 0x64	; 100
    2bd8:	10 e0       	ldi	r17, 0x00	; 0
    2bda:	cb 01       	movw	r24, r22
    2bdc:	b8 01       	movw	r22, r16
    2bde:	0e 94 00 3b 	call	0x7600	; 0x7600 <__divmodhi4>
    2be2:	ec 01       	movw	r28, r24
		uint16_t lat_min_frac1000 = (uint16_t) ((lat - (lat_deg * 100 + lat_min_int)) * 1000.0f);
    2be4:	0f 2e       	mov	r0, r31
    2be6:	f4 e6       	ldi	r31, 0x64	; 100
    2be8:	7f 2e       	mov	r7, r31
    2bea:	f0 2d       	mov	r31, r0
    2bec:	6c 01       	movw	r12, r24
    2bee:	dd 24       	eor	r13, r13
    2bf0:	76 9c       	mul	r7, r6
    2bf2:	c0 0c       	add	r12, r0
    2bf4:	d1 1c       	adc	r13, r1
    2bf6:	11 24       	eor	r1, r1
    2bf8:	b6 01       	movw	r22, r12
    2bfa:	dd 0c       	add	r13, r13
    2bfc:	88 0b       	sbc	r24, r24
    2bfe:	99 0b       	sbc	r25, r25
    2c00:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    2c04:	9b 01       	movw	r18, r22
    2c06:	ac 01       	movw	r20, r24
    2c08:	c5 01       	movw	r24, r10
    2c0a:	b4 01       	movw	r22, r8
    2c0c:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	4a e7       	ldi	r20, 0x7A	; 122
    2c16:	54 e4       	ldi	r21, 0x44	; 68
    2c18:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2c1c:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__fixunssfsi>
		twi_smart_lcd_fw_set_pos_lat(lat_sgn, lat_deg, lat_min_int, lat_min_frac1000);
    2c20:	9b 01       	movw	r18, r22
    2c22:	4c 2f       	mov	r20, r28
    2c24:	66 2d       	mov	r22, r6
    2c26:	85 2d       	mov	r24, r5
    2c28:	0e 94 06 2c 	call	0x580c	; 0x580c <twi_smart_lcd_fw_set_pos_lat>
	}

	{
		uint8_t lon_sgn;
		float lon;
		uint8_t sreg = SREG;
    2c2c:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2c2e:	f8 94       	cli
		lon_sgn = main_nmeaPosLonSign;
    2c30:	c0 91 49 05 	lds	r28, 0x0549	; 0x800549 <main_nmeaPosLonSign>
		lon = main_nmeaPosLon;
    2c34:	c0 90 4a 05 	lds	r12, 0x054A	; 0x80054a <main_nmeaPosLon>
    2c38:	d0 90 4b 05 	lds	r13, 0x054B	; 0x80054b <main_nmeaPosLon+0x1>
    2c3c:	e0 90 4c 05 	lds	r14, 0x054C	; 0x80054c <main_nmeaPosLon+0x2>
    2c40:	f0 90 4d 05 	lds	r15, 0x054D	; 0x80054d <main_nmeaPosLon+0x3>
		SREG = sreg;
    2c44:	8f bf       	out	0x3f, r24	; 63

		uint16_t lon_deg = (uint16_t) (lon / 100.0f);
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	48 ec       	ldi	r20, 0xC8	; 200
    2c4c:	52 e4       	ldi	r21, 0x42	; 66
    2c4e:	c7 01       	movw	r24, r14
    2c50:	b6 01       	movw	r22, r12
    2c52:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    2c56:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__fixunssfsi>
    2c5a:	4b 01       	movw	r8, r22
    2c5c:	5c 01       	movw	r10, r24
		uint8_t  lon_min_int = (uint16_t) ((int) lon % 100);
    2c5e:	c7 01       	movw	r24, r14
    2c60:	b6 01       	movw	r22, r12
    2c62:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
    2c66:	cb 01       	movw	r24, r22
    2c68:	b8 01       	movw	r22, r16
    2c6a:	0e 94 00 3b 	call	0x7600	; 0x7600 <__divmodhi4>
    2c6e:	d8 2f       	mov	r29, r24
		uint16_t lon_min_frac1000 = (uint16_t) ((lon - (lon_deg * 100 + lon_min_int)) * 1000.0f);
    2c70:	78 9c       	mul	r7, r8
    2c72:	80 01       	movw	r16, r0
    2c74:	79 9c       	mul	r7, r9
    2c76:	10 0d       	add	r17, r0
    2c78:	11 24       	eor	r1, r1
    2c7a:	08 0f       	add	r16, r24
    2c7c:	11 1d       	adc	r17, r1
    2c7e:	b8 01       	movw	r22, r16
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 94 9a 30 	call	0x6134	; 0x6134 <__floatunsisf>
    2c88:	9b 01       	movw	r18, r22
    2c8a:	ac 01       	movw	r20, r24
    2c8c:	c7 01       	movw	r24, r14
    2c8e:	b6 01       	movw	r22, r12
    2c90:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	4a e7       	ldi	r20, 0x7A	; 122
    2c9a:	54 e4       	ldi	r21, 0x44	; 68
    2c9c:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2ca0:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__fixunssfsi>
		twi_smart_lcd_fw_set_pos_lon(lon_sgn, lon_deg, lon_min_int, lon_min_frac1000);
    2ca4:	9b 01       	movw	r18, r22
    2ca6:	4d 2f       	mov	r20, r29
    2ca8:	68 2d       	mov	r22, r8
    2caa:	8c 2f       	mov	r24, r28
    2cac:	0e 94 14 2c 	call	0x5828	; 0x5828 <twi_smart_lcd_fw_set_pos_lon>
	}

	{
		uint16_t height;
		uint8_t sreg = SREG;
    2cb0:	cf b7       	in	r28, 0x3f	; 63
		cli();
    2cb2:	f8 94       	cli
		height = (int16_t) main_nmeaAltitudeM;
    2cb4:	60 91 45 05 	lds	r22, 0x0545	; 0x800545 <main_nmeaAltitudeM>
    2cb8:	70 91 46 05 	lds	r23, 0x0546	; 0x800546 <main_nmeaAltitudeM+0x1>
    2cbc:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <main_nmeaAltitudeM+0x2>
    2cc0:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <main_nmeaAltitudeM+0x3>
    2cc4:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
		SREG = sreg;
    2cc8:	cf bf       	out	0x3f, r28	; 63

		twi_smart_lcd_fw_set_pos_height(height);
    2cca:	cb 01       	movw	r24, r22
    2ccc:	0e 94 22 2c 	call	0x5844	; 0x5844 <twi_smart_lcd_fw_set_pos_height>
	}
}
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	1f 91       	pop	r17
    2cd6:	0f 91       	pop	r16
    2cd8:	ff 90       	pop	r15
    2cda:	ef 90       	pop	r14
    2cdc:	df 90       	pop	r13
    2cde:	cf 90       	pop	r12
    2ce0:	bf 90       	pop	r11
    2ce2:	af 90       	pop	r10
    2ce4:	9f 90       	pop	r9
    2ce6:	8f 90       	pop	r8
    2ce8:	7f 90       	pop	r7
    2cea:	6f 90       	pop	r6
    2cec:	5f 90       	pop	r5
    2cee:	4f 90       	pop	r4
    2cf0:	08 95       	ret

00002cf2 <main_fw_sendInitialHelp>:

void main_fw_sendInitialHelp(void)
{
#if 1
	ringbuffer_fw_ringBufferWaitAppend(true, true, PM_COMMAND_HELP, sizeof(PM_COMMAND_HELP));
    2cf2:	25 e0       	ldi	r18, 0x05	; 5
    2cf4:	42 e9       	ldi	r20, 0x92	; 146
    2cf6:	5d e0       	ldi	r21, 0x0D	; 13
    2cf8:	61 e0       	ldi	r22, 0x01	; 1
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
    2d00:	08 95       	ret

00002d02 <main_fw_giveAway>:
	}
#endif
}

void main_fw_giveAway(void)
{
    2d02:	2f 92       	push	r2
    2d04:	3f 92       	push	r3
    2d06:	4f 92       	push	r4
    2d08:	5f 92       	push	r5
    2d0a:	6f 92       	push	r6
    2d0c:	7f 92       	push	r7
    2d0e:	8f 92       	push	r8
    2d10:	9f 92       	push	r9
    2d12:	af 92       	push	r10
    2d14:	bf 92       	push	r11
    2d16:	cf 92       	push	r12
    2d18:	df 92       	push	r13
    2d1a:	ef 92       	push	r14
    2d1c:	ff 92       	push	r15
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	61 97       	sbiw	r28, 0x11	; 17
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
    wdt_reset();
    2d36:	a8 95       	wdr
	usbPoll();
    2d38:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <usbPoll>

	usb_fw_sendInInterrupt();
    2d3c:	0e 94 2d 2c 	call	0x585a	; 0x585a <usb_fw_sendInInterrupt>
	workInQueue();
    2d40:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <workInQueue>
	uint16_t localStampICR1;
	uint8_t len = 0;

	{
		/* get the timers */
		uint8_t sreg = SREG;
    2d44:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2d46:	f8 94       	cli

		/* get the current ms and ticks timer */
		uint8_t localTCNT1L = TCNT1L;						// low byte first
    2d48:	70 90 84 00 	lds	r7, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		uint8_t localTCNT1H = TCNT1H;
    2d4c:	60 90 85 00 	lds	r6, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		localFastCtr1ms = fastCtr1ms;						// make a copy of the running clock
    2d50:	c0 90 37 05 	lds	r12, 0x0537	; 0x800537 <fastCtr1ms>
    2d54:	d0 90 38 05 	lds	r13, 0x0538	; 0x800538 <fastCtr1ms+0x1>
    2d58:	e0 90 39 05 	lds	r14, 0x0539	; 0x800539 <fastCtr1ms+0x2>
    2d5c:	f0 90 3a 05 	lds	r15, 0x053A	; 0x80053a <fastCtr1ms+0x3>

		/* get the last stamped time as ms and ticks */
		uint8_t localICR1L = ICR1L;							// low byte first
    2d60:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		uint8_t localICR1H = ICR1H;
    2d64:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock
    2d68:	40 91 3b 05 	lds	r20, 0x053B	; 0x80053b <fastStampCtr1ms>
    2d6c:	50 91 3c 05 	lds	r21, 0x053C	; 0x80053c <fastStampCtr1ms+0x1>
    2d70:	60 91 3d 05 	lds	r22, 0x053D	; 0x80053d <fastStampCtr1ms+0x2>
    2d74:	70 91 3e 05 	lds	r23, 0x053E	; 0x80053e <fastStampCtr1ms+0x3>

		SREG = sreg;
    2d78:	9f bf       	out	0x3f, r25	; 63

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
		localStampICR1	= localICR1L  | (localICR1H  << 8);
	}

	if (localAdcConvertNowCntrLast != acAdcConvertNowCntr) {  // a new PPS impulse has arrived
    2d7a:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <acAdcConvertNowCntr>
    2d7e:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <localAdcConvertNowCntrLast.2929>
    2d82:	29 17       	cp	r18, r25
    2d84:	d9 f1       	breq	.+118    	; 0x2dfc <main_fw_giveAway+0xfa>
		localAdcConvertNowCntrLast = acAdcConvertNowCntr;
    2d86:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <localAdcConvertNowCntrLast.2929>
		localNoPpsCnt = 0;
    2d8a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <localNoPpsCnt.2931>

		ppsStampCtr1ms_last = ppsStampCtr1ms;
    2d8e:	80 90 8b 05 	lds	r8, 0x058B	; 0x80058b <ppsStampCtr1ms>
    2d92:	90 90 8c 05 	lds	r9, 0x058C	; 0x80058c <ppsStampCtr1ms+0x1>
    2d96:	a0 90 8d 05 	lds	r10, 0x058D	; 0x80058d <ppsStampCtr1ms+0x2>
    2d9a:	b0 90 8e 05 	lds	r11, 0x058E	; 0x80058e <ppsStampCtr1ms+0x3>
    2d9e:	80 92 85 05 	sts	0x0585, r8	; 0x800585 <ppsStampCtr1ms_last>
    2da2:	90 92 86 05 	sts	0x0586, r9	; 0x800586 <ppsStampCtr1ms_last+0x1>
    2da6:	a0 92 87 05 	sts	0x0587, r10	; 0x800587 <ppsStampCtr1ms_last+0x2>
    2daa:	b0 92 88 05 	sts	0x0588, r11	; 0x800588 <ppsStampCtr1ms_last+0x3>
		ppsStampICR1_last   = ppsStampICR1;
    2dae:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <ppsStampICR1>
    2db2:	f0 91 8a 05 	lds	r31, 0x058A	; 0x80058a <ppsStampICR1+0x1>
    2db6:	f0 93 84 05 	sts	0x0584, r31	; 0x800584 <ppsStampICR1_last+0x1>
    2dba:	e0 93 83 05 	sts	0x0583, r30	; 0x800583 <ppsStampICR1_last>

		ppsStampCtr1ms = localStampCtr1ms;
    2dbe:	66 27       	eor	r22, r22
    2dc0:	77 27       	eor	r23, r23
    2dc2:	40 93 8b 05 	sts	0x058B, r20	; 0x80058b <ppsStampCtr1ms>
    2dc6:	50 93 8c 05 	sts	0x058C, r21	; 0x80058c <ppsStampCtr1ms+0x1>
    2dca:	60 93 8d 05 	sts	0x058D, r22	; 0x80058d <ppsStampCtr1ms+0x2>
    2dce:	70 93 8e 05 	sts	0x058E, r23	; 0x80058e <ppsStampCtr1ms+0x3>
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock

		SREG = sreg;

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
		localStampICR1	= localICR1L  | (localICR1H  << 8);
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	93 2b       	or	r25, r19

		ppsStampCtr1ms_last = ppsStampCtr1ms;
		ppsStampICR1_last   = ppsStampICR1;

		ppsStampCtr1ms = localStampCtr1ms;
		ppsStampICR1   = localStampICR1;
    2dd6:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <ppsStampICR1+0x1>
    2dda:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <ppsStampICR1>

		/* reload timer */
		localFastCtr1ms_next = localFastCtr1ms + LocalCtr1sSpanMs + LocalCtr250msBorderMs;
    2dde:	d7 01       	movw	r26, r14
    2de0:	c6 01       	movw	r24, r12
    2de2:	8e 51       	subi	r24, 0x1E	; 30
    2de4:	9b 4f       	sbci	r25, 0xFB	; 251
    2de6:	af 4f       	sbci	r26, 0xFF	; 255
    2de8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dea:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <localFastCtr1ms_next.2930>
    2dee:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <localFastCtr1ms_next.2930+0x1>
    2df2:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <localFastCtr1ms_next.2930+0x2>
    2df6:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <localFastCtr1ms_next.2930+0x3>
    2dfa:	5f c0       	rjmp	.+190    	; 0x2eba <main_fw_giveAway+0x1b8>

	} else if (localFastCtr1ms >= localFastCtr1ms_next) {  	// the timer has elapsed without a PPS impulse
    2dfc:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <localFastCtr1ms_next.2930>
    2e00:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <localFastCtr1ms_next.2930+0x1>
    2e04:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <localFastCtr1ms_next.2930+0x2>
    2e08:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <localFastCtr1ms_next.2930+0x3>
    2e0c:	c8 16       	cp	r12, r24
    2e0e:	d9 06       	cpc	r13, r25
    2e10:	ea 06       	cpc	r14, r26
    2e12:	fb 06       	cpc	r15, r27
    2e14:	c0 f1       	brcs	.+112    	; 0x2e86 <main_fw_giveAway+0x184>
		if (++localNoPpsCnt > 180) {
    2e16:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <localNoPpsCnt.2931>
    2e1a:	2f 5f       	subi	r18, 0xFF	; 255
    2e1c:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <localNoPpsCnt.2931>
    2e20:	25 3b       	cpi	r18, 0xB5	; 181
    2e22:	20 f0       	brcs	.+8      	; 0x2e2c <main_fw_giveAway+0x12a>
			localNoPpsCnt = 180;							// clamp to 3 minutes
    2e24:	24 eb       	ldi	r18, 0xB4	; 180
    2e26:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <localNoPpsCnt.2931>
    2e2a:	02 c0       	rjmp	.+4      	; 0x2e30 <main_fw_giveAway+0x12e>
		}
		if (localNoPpsCnt >= 5) {
    2e2c:	25 30       	cpi	r18, 0x05	; 5
    2e2e:	50 f0       	brcs	.+20     	; 0x2e44 <main_fw_giveAway+0x142>
			mainRefClkState = REFCLK_STATE_NOSYNC;			// reset clock state when at least 5 seconds without a reference signal
    2e30:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <mainRefClkState>
			mainPpm = 0.0f;
    2e34:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <mainPpm>
    2e38:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <mainPpm+0x1>
    2e3c:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <mainPpm+0x2>
    2e40:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <mainPpm+0x3>
		}

		if ((localFastCtr1ms_next + LocalCtr1sSpanMs) > localFastCtr1ms) {
    2e44:	88 51       	subi	r24, 0x18	; 24
    2e46:	9c 4f       	sbci	r25, 0xFC	; 252
    2e48:	af 4f       	sbci	r26, 0xFF	; 255
    2e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e4c:	c8 16       	cp	r12, r24
    2e4e:	d9 06       	cpc	r13, r25
    2e50:	ea 06       	cpc	r14, r26
    2e52:	fb 06       	cpc	r15, r27
    2e54:	48 f4       	brcc	.+18     	; 0x2e68 <main_fw_giveAway+0x166>
			/* adjust */
			localFastCtr1ms_next += LocalCtr1sSpanMs;		// +1 second
    2e56:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <localFastCtr1ms_next.2930>
    2e5a:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <localFastCtr1ms_next.2930+0x1>
    2e5e:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <localFastCtr1ms_next.2930+0x2>
    2e62:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <localFastCtr1ms_next.2930+0x3>
    2e66:	29 c0       	rjmp	.+82     	; 0x2eba <main_fw_giveAway+0x1b8>

		} else {
			/* reload / initial timer */
			localFastCtr1ms_next = localFastCtr1ms + LocalCtr1sSpanMs + LocalCtr250msBorderMs;
    2e68:	d7 01       	movw	r26, r14
    2e6a:	c6 01       	movw	r24, r12
    2e6c:	8e 51       	subi	r24, 0x1E	; 30
    2e6e:	9b 4f       	sbci	r25, 0xFB	; 251
    2e70:	af 4f       	sbci	r26, 0xFF	; 255
    2e72:	bf 4f       	sbci	r27, 0xFF	; 255
    2e74:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <localFastCtr1ms_next.2930>
    2e78:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <localFastCtr1ms_next.2930+0x1>
    2e7c:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <localFastCtr1ms_next.2930+0x2>
    2e80:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <localFastCtr1ms_next.2930+0x3>
    2e84:	1a c0       	rjmp	.+52     	; 0x2eba <main_fw_giveAway+0x1b8>
		}

	} else {
		/* nothing has happened - do some bulk data if a job is ready to be done */

		if (serialCtxtBufferState == SERIAL_CTXT_BUFFER_STATE_SEND) {
    2e86:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <serialCtxtBufferState>
    2e8a:	82 30       	cpi	r24, 0x02	; 2
    2e8c:	91 f4       	brne	.+36     	; 0x2eb2 <main_fw_giveAway+0x1b0>
			main_fw_parseNmeaLineData();
    2e8e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <main_fw_parseNmeaLineData>

			/* if serial data from the GPS module is required, send it to USB in-port */
			if (main_bf.mainIsSerComm) {
    2e92:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2e96:	83 ff       	sbrs	r24, 3
    2e98:	08 c0       	rjmp	.+16     	; 0x2eaa <main_fw_giveAway+0x1a8>
				ringbuffer_fw_ringBufferWaitAppend(false, false, serialCtxtRxBuffer, serialCtxtRxBufferLen);
    2e9a:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <serialCtxtRxBufferLen>
    2e9e:	41 e1       	ldi	r20, 0x11	; 17
    2ea0:	52 e0       	ldi	r21, 0x02	; 2
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
			}

			/* mark the serial buffer as to be ready again for receiving GPS data */
			serialCtxtRxBufferLen = 0;
    2eaa:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <serialCtxtRxBufferLen>
			serialCtxtBufferState = 0;
    2eae:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <serialCtxtBufferState>
		}

		/* PWM offset due to phase accumulator */
		calcPhaseResidue();
    2eb2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <calcPhaseResidue>
    2eb6:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <main_fw_giveAway+0x14c2>
	 *
	 * 1)	Linker option:		--Wl,-u,vfprintf  --Wl,-u,vfscanf
	 * 2)	Linker libraries:	-lm  -lprintf_flt  -lscanf_flt
	 */

	if (mainGpsInitVal) {
    2eba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <mainGpsInitVal>
    2ebe:	88 23       	and	r24, r24
    2ec0:	91 f1       	breq	.+100    	; 0x2f26 <main_fw_giveAway+0x224>
		/* activate GPS module for GPS / GALILEO / QZSS as well as GLONASS reception */

		mainGpsInitVal++;
    2ec2:	8f 5f       	subi	r24, 0xFF	; 255
    2ec4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <mainGpsInitVal>
		if (5 == mainGpsInitVal) {  // XXX init of GPS-Module is here
    2ec8:	85 30       	cpi	r24, 0x05	; 5
    2eca:	39 f4       	brne	.+14     	; 0x2eda <main_fw_giveAway+0x1d8>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WARM_RESTART, sizeof(PM_FORMAT_GPS_WARM_RESTART));
    2ecc:	4e e0       	ldi	r20, 0x0E	; 14
    2ece:	64 e8       	ldi	r22, 0x84	; 132
    2ed0:	79 e0       	ldi	r23, 0x09	; 9
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <serial_fw_copyAndSendNmea>
    2ed8:	26 c0       	rjmp	.+76     	; 0x2f26 <main_fw_giveAway+0x224>

		} else if (10 == mainGpsInitVal) {
    2eda:	8a 30       	cpi	r24, 0x0A	; 10
    2edc:	39 f4       	brne	.+14     	; 0x2eec <main_fw_giveAway+0x1ea>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST0_EAST0, sizeof(PM_FORMAT_GPS_WEST0_EAST0));  // disable all GNSS systems
    2ede:	42 e1       	ldi	r20, 0x12	; 18
    2ee0:	62 e6       	ldi	r22, 0x62	; 98
    2ee2:	79 e0       	ldi	r23, 0x09	; 9
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <serial_fw_copyAndSendNmea>
    2eea:	1d c0       	rjmp	.+58     	; 0x2f26 <main_fw_giveAway+0x224>

		} else if (11 == mainGpsInitVal) {
    2eec:	8b 30       	cpi	r24, 0x0B	; 11
    2eee:	39 f4       	brne	.+14     	; 0x2efe <main_fw_giveAway+0x1fc>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST0, sizeof(PM_FORMAT_GPS_WEST1_EAST0));  // activate GPS, QZSS & Galileo
    2ef0:	42 e1       	ldi	r20, 0x12	; 18
    2ef2:	60 e5       	ldi	r22, 0x50	; 80
    2ef4:	79 e0       	ldi	r23, 0x09	; 9
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <serial_fw_copyAndSendNmea>
    2efc:	14 c0       	rjmp	.+40     	; 0x2f26 <main_fw_giveAway+0x224>

		} else if (12 == mainGpsInitVal) {
    2efe:	8c 30       	cpi	r24, 0x0C	; 12
    2f00:	39 f4       	brne	.+14     	; 0x2f10 <main_fw_giveAway+0x20e>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST1, sizeof(PM_FORMAT_GPS_WEST1_EAST1));  // activate GLONASS also
    2f02:	42 e1       	ldi	r20, 0x12	; 18
    2f04:	6e e3       	ldi	r22, 0x3E	; 62
    2f06:	79 e0       	ldi	r23, 0x09	; 9
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <serial_fw_copyAndSendNmea>
    2f0e:	0b c0       	rjmp	.+22     	; 0x2f26 <main_fw_giveAway+0x224>

		} else if (70 == mainGpsInitVal) {
    2f10:	86 34       	cpi	r24, 0x46	; 70
    2f12:	49 f4       	brne	.+18     	; 0x2f26 <main_fw_giveAway+0x224>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST1, sizeof(PM_FORMAT_GPS_WEST1_EAST1));  // activate GLONASS also (sent every minute)
    2f14:	42 e1       	ldi	r20, 0x12	; 18
    2f16:	6e e3       	ldi	r22, 0x3E	; 62
    2f18:	79 e0       	ldi	r23, 0x09	; 9
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <serial_fw_copyAndSendNmea>
			mainGpsInitVal = 10;
    2f20:	8a e0       	ldi	r24, 0x0A	; 10
    2f22:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <mainGpsInitVal>
		}
	}

	mainAdcPullVolts	= ( acAdcCh[ADC_CH_PWMPULL] * mainCoef_b01_ref_AREF_V) / 1024.0f + 0.138f;
    2f26:	09 e8       	ldi	r16, 0x89	; 137
    2f28:	13 e0       	ldi	r17, 0x03	; 3
    2f2a:	d8 01       	movw	r26, r16
    2f2c:	6d 91       	ld	r22, X+
    2f2e:	7c 91       	ld	r23, X
    2f30:	80 90 c0 05 	lds	r8, 0x05C0	; 0x8005c0 <mainCoef_b01_ref_AREF_V>
    2f34:	90 90 c1 05 	lds	r9, 0x05C1	; 0x8005c1 <mainCoef_b01_ref_AREF_V+0x1>
    2f38:	a0 90 c2 05 	lds	r10, 0x05C2	; 0x8005c2 <mainCoef_b01_ref_AREF_V+0x2>
    2f3c:	b0 90 c3 05 	lds	r11, 0x05C3	; 0x8005c3 <mainCoef_b01_ref_AREF_V+0x3>
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	0e 94 9a 30 	call	0x6134	; 0x6134 <__floatunsisf>
    2f48:	a5 01       	movw	r20, r10
    2f4a:	94 01       	movw	r18, r8
    2f4c:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e8       	ldi	r20, 0x80	; 128
    2f56:	5a e3       	ldi	r21, 0x3A	; 58
    2f58:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2f5c:	2f ed       	ldi	r18, 0xDF	; 223
    2f5e:	3f e4       	ldi	r19, 0x4F	; 79
    2f60:	4d e0       	ldi	r20, 0x0D	; 13
    2f62:	5e e3       	ldi	r21, 0x3E	; 62
    2f64:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    2f68:	60 93 7b 05 	sts	0x057B, r22	; 0x80057b <mainAdcPullVolts>
    2f6c:	70 93 7c 05 	sts	0x057C, r23	; 0x80057c <mainAdcPullVolts+0x1>
    2f70:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <mainAdcPullVolts+0x2>
    2f74:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <mainAdcPullVolts+0x3>
	mainAdcPhaseVolts	= ( acAdcCh[ADC_CH_PHASE]	* mainCoef_b01_ref_AREF_V) / 1024.0f;
    2f78:	f8 01       	movw	r30, r16
    2f7a:	62 81       	ldd	r22, Z+2	; 0x02
    2f7c:	73 81       	ldd	r23, Z+3	; 0x03
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 9a 30 	call	0x6134	; 0x6134 <__floatunsisf>
    2f86:	9b 01       	movw	r18, r22
    2f88:	ac 01       	movw	r20, r24
    2f8a:	c5 01       	movw	r24, r10
    2f8c:	b4 01       	movw	r22, r8
    2f8e:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	40 e8       	ldi	r20, 0x80	; 128
    2f98:	5a e3       	ldi	r21, 0x3A	; 58
    2f9a:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2f9e:	60 93 77 05 	sts	0x0577, r22	; 0x800577 <mainAdcPhaseVolts>
    2fa2:	70 93 78 05 	sts	0x0578, r23	; 0x800578 <mainAdcPhaseVolts+0x1>
    2fa6:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <mainAdcPhaseVolts+0x2>
    2faa:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <mainAdcPhaseVolts+0x3>
	mainAdcTemp			= ((acAdcCh[ADC_CH_TEMP]	- mainCoef_b01_temp_ofs_adc_25C_steps) * mainCoef_b01_temp_k_p1step_adc_K) + 25.0f;
    2fae:	d8 01       	movw	r26, r16
    2fb0:	14 96       	adiw	r26, 0x04	; 4
    2fb2:	6d 91       	ld	r22, X+
    2fb4:	7c 91       	ld	r23, X
    2fb6:	15 97       	sbiw	r26, 0x05	; 5
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	0e 94 9a 30 	call	0x6134	; 0x6134 <__floatunsisf>
    2fc0:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps>
    2fc4:	30 91 b9 05 	lds	r19, 0x05B9	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    2fc8:	40 91 ba 05 	lds	r20, 0x05BA	; 0x8005ba <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    2fcc:	50 91 bb 05 	lds	r21, 0x05BB	; 0x8005bb <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>
    2fd0:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    2fd4:	20 91 b4 05 	lds	r18, 0x05B4	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K>
    2fd8:	30 91 b5 05 	lds	r19, 0x05B5	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    2fdc:	40 91 b6 05 	lds	r20, 0x05B6	; 0x8005b6 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    2fe0:	50 91 b7 05 	lds	r21, 0x05B7	; 0x8005b7 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
    2fe4:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	48 ec       	ldi	r20, 0xC8	; 200
    2fee:	51 e4       	ldi	r21, 0x41	; 65
    2ff0:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    2ff4:	60 93 73 05 	sts	0x0573, r22	; 0x800573 <mainAdcTemp>
    2ff8:	70 93 74 05 	sts	0x0574, r23	; 0x800574 <mainAdcTemp+0x1>
    2ffc:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <mainAdcTemp+0x2>
    3000:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <mainAdcTemp+0x3>

	if (main_bf.mainIsTimerTest) {
    3004:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3008:	82 ff       	sbrs	r24, 2
    300a:	4e c2       	rjmp	.+1180   	; 0x34a8 <main_fw_giveAway+0x7a6>
		/* print NMEA data */
		memory_fw_copyBuffer(true, mainPrepareBuffer, PM_FORMAT_GP00, sizeof(PM_FORMAT_GP00) + 1);
    300c:	21 e1       	ldi	r18, 0x11	; 17
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	4e e2       	ldi	r20, 0x2E	; 46
    3012:	59 e0       	ldi	r21, 0x09	; 9
    3014:	6f e0       	ldi	r22, 0x0F	; 15
    3016:	74 e0       	ldi	r23, 0x04	; 4
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, sizeof(PM_FORMAT_GP00) + 1);
    301e:	21 e1       	ldi	r18, 0x11	; 17
    3020:	4f e0       	ldi	r20, 0x0F	; 15
    3022:	54 e0       	ldi	r21, 0x04	; 4
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP01, sizeof(PM_FORMAT_GP01));
    302c:	28 e2       	ldi	r18, 0x28	; 40
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	46 e0       	ldi	r20, 0x06	; 6
    3032:	59 e0       	ldi	r21, 0x09	; 9
    3034:	6f e8       	ldi	r22, 0x8F	; 143
    3036:	73 e0       	ldi	r23, 0x03	; 3
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    303e:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <main_nmeaTimeUtcMilsec+0x1>
    3042:	8f 93       	push	r24
    3044:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <main_nmeaTimeUtcMilsec>
    3048:	8f 93       	push	r24
    304a:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <main_nmeaTimeUtcInt+0x3>
    304e:	8f 93       	push	r24
    3050:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <main_nmeaTimeUtcInt+0x2>
    3054:	8f 93       	push	r24
    3056:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x1>
    305a:	8f 93       	push	r24
    305c:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <main_nmeaTimeUtcInt>
    3060:	8f 93       	push	r24
    3062:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <main_nmeaDate+0x3>
    3066:	8f 93       	push	r24
    3068:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <main_nmeaDate+0x2>
    306c:	8f 93       	push	r24
    306e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <main_nmeaDate+0x1>
    3072:	8f 93       	push	r24
    3074:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <main_nmeaDate>
    3078:	8f 93       	push	r24
    307a:	0f 2e       	mov	r0, r31
    307c:	ff e8       	ldi	r31, 0x8F	; 143
    307e:	af 2e       	mov	r10, r31
    3080:	f3 e0       	ldi	r31, 0x03	; 3
    3082:	bf 2e       	mov	r11, r31
    3084:	f0 2d       	mov	r31, r0
    3086:	bf 92       	push	r11
    3088:	af 92       	push	r10
    308a:	0f e0       	ldi	r16, 0x0F	; 15
    308c:	14 e0       	ldi	r17, 0x04	; 4
    308e:	1f 93       	push	r17
    3090:	0f 93       	push	r16
    3092:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				main_nmeaDate,
				main_nmeaTimeUtcInt,
				main_nmeaTimeUtcMilsec);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3096:	28 2f       	mov	r18, r24
    3098:	a8 01       	movw	r20, r16
    309a:	60 e0       	ldi	r22, 0x00	; 0
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP02, sizeof(PM_FORMAT_GP02));
    30a2:	25 e2       	ldi	r18, 0x25	; 37
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	41 ee       	ldi	r20, 0xE1	; 225
    30a8:	58 e0       	ldi	r21, 0x08	; 8
    30aa:	b5 01       	movw	r22, r10
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    30b2:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <main_nmeaPosFixIndicator+0x1>
    30b6:	8f 93       	push	r24
    30b8:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaPosFixIndicator>
    30bc:	8f 93       	push	r24
    30be:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <main_nmeaMode2+0x1>
    30c2:	8f 93       	push	r24
    30c4:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <main_nmeaMode2>
    30c8:	8f 93       	push	r24
    30ca:	bf 92       	push	r11
    30cc:	af 92       	push	r10
    30ce:	1f 93       	push	r17
    30d0:	0f 93       	push	r16
    30d2:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				main_nmeaMode2,
				main_nmeaPosFixIndicator);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    30d6:	28 2f       	mov	r18, r24
    30d8:	a8 01       	movw	r20, r16
    30da:	60 e0       	ldi	r22, 0x00	; 0
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP03, sizeof(PM_FORMAT_GP03));
    30e2:	23 e5       	ldi	r18, 0x53	; 83
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	4e e8       	ldi	r20, 0x8E	; 142
    30e8:	58 e0       	ldi	r21, 0x08	; 8
    30ea:	b5 01       	movw	r22, r10
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    30f2:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <main_nmeaSatsEphemerisGlonass+0x1>
    30f6:	8f 93       	push	r24
    30f8:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGlonass>
    30fc:	8f 93       	push	r24
    30fe:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <main_nmeaSatsEphemerisGpsGalileoQzss+0x1>
    3102:	8f 93       	push	r24
    3104:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaSatsEphemerisGpsGalileoQzss>
    3108:	8f 93       	push	r24
    310a:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <main_nmeaSatsUsed+0x1>
    310e:	8f 93       	push	r24
    3110:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <main_nmeaSatsUsed>
    3114:	8f 93       	push	r24
    3116:	bf 92       	push	r11
    3118:	af 92       	push	r10
    311a:	1f 93       	push	r17
    311c:	0f 93       	push	r16
    311e:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				main_nmeaSatsUsed,
				main_nmeaSatsEphemerisGpsGalileoQzss,
				main_nmeaSatsEphemerisGlonass);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	28 2f       	mov	r18, r24
    312e:	a8 01       	movw	r20, r16
    3130:	60 e0       	ldi	r22, 0x00	; 0
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP04, sizeof(PM_FORMAT_GP04));
    3138:	2f e2       	ldi	r18, 0x2F	; 47
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	4f e5       	ldi	r20, 0x5F	; 95
    313e:	58 e0       	ldi	r21, 0x08	; 8
    3140:	b5 01       	movw	r22, r10
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3148:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <main_nmeaVdop+0x3>
    314c:	8f 93       	push	r24
    314e:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <main_nmeaVdop+0x2>
    3152:	8f 93       	push	r24
    3154:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <main_nmeaVdop+0x1>
    3158:	8f 93       	push	r24
    315a:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <main_nmeaVdop>
    315e:	8f 93       	push	r24
    3160:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <main_nmeaHdop+0x3>
    3164:	8f 93       	push	r24
    3166:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <main_nmeaHdop+0x2>
    316a:	8f 93       	push	r24
    316c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <main_nmeaHdop+0x1>
    3170:	8f 93       	push	r24
    3172:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <main_nmeaHdop>
    3176:	8f 93       	push	r24
    3178:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <main_nmeaPdop+0x3>
    317c:	8f 93       	push	r24
    317e:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <main_nmeaPdop+0x2>
    3182:	8f 93       	push	r24
    3184:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <main_nmeaPdop+0x1>
    3188:	8f 93       	push	r24
    318a:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <main_nmeaPdop>
    318e:	8f 93       	push	r24
    3190:	bf 92       	push	r11
    3192:	af 92       	push	r10
    3194:	1f 93       	push	r17
    3196:	0f 93       	push	r16
    3198:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				main_nmeaPdop,
				main_nmeaHdop,
				main_nmeaVdop);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    319c:	28 2f       	mov	r18, r24
    319e:	a8 01       	movw	r20, r16
    31a0:	60 e0       	ldi	r22, 0x00	; 0
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
    31a8:	2b e3       	ldi	r18, 0x3B	; 59
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	44 e2       	ldi	r20, 0x24	; 36
    31ae:	58 e0       	ldi	r21, 0x08	; 8
    31b0:	b5 01       	movw	r22, r10
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    31b8:	10 91 45 05 	lds	r17, 0x0545	; 0x800545 <main_nmeaAltitudeM>
    31bc:	00 91 46 05 	lds	r16, 0x0546	; 0x800546 <main_nmeaAltitudeM+0x1>
    31c0:	b0 90 47 05 	lds	r11, 0x0547	; 0x800547 <main_nmeaAltitudeM+0x2>
    31c4:	a0 90 48 05 	lds	r10, 0x0548	; 0x800548 <main_nmeaAltitudeM+0x3>
    31c8:	e0 91 4a 05 	lds	r30, 0x054A	; 0x80054a <main_nmeaPosLon>
    31cc:	f0 91 4b 05 	lds	r31, 0x054B	; 0x80054b <main_nmeaPosLon+0x1>
    31d0:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <main_nmeaPosLon+0x2>
    31d4:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <main_nmeaPosLon+0x3>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
				main_nmeaPosLat,
				(main_nmeaPosLonSign > 0 ?  main_nmeaPosLonSign : '-'),
    31d8:	20 91 49 05 	lds	r18, 0x0549	; 0x800549 <main_nmeaPosLonSign>
				main_nmeaHdop,
				main_nmeaVdop);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	f8 94       	cli
    31e0:	de bf       	out	0x3e, r29	; 62
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	22 23       	and	r18, r18
    31e8:	11 f0       	breq	.+4      	; 0x31ee <main_fw_giveAway+0x4ec>
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <main_fw_giveAway+0x4f0>
    31ee:	2d e2       	ldi	r18, 0x2D	; 45
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 91 4f 05 	lds	r20, 0x054F	; 0x80054f <main_nmeaPosLat>
    31f6:	50 91 50 05 	lds	r21, 0x0550	; 0x800550 <main_nmeaPosLat+0x1>
    31fa:	60 91 51 05 	lds	r22, 0x0551	; 0x800551 <main_nmeaPosLat+0x2>
    31fe:	70 91 52 05 	lds	r23, 0x0552	; 0x800552 <main_nmeaPosLat+0x3>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
    3202:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <main_nmeaPosLatSign>
				main_nmeaHdop,
				main_nmeaVdop);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3206:	88 23       	and	r24, r24
    3208:	11 f0       	breq	.+4      	; 0x320e <main_fw_giveAway+0x50c>
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	02 c0       	rjmp	.+4      	; 0x3212 <main_fw_giveAway+0x510>
    320e:	8d e2       	ldi	r24, 0x2D	; 45
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	af 92       	push	r10
    3214:	bf 92       	push	r11
    3216:	0f 93       	push	r16
    3218:	1f 93       	push	r17
    321a:	bf 93       	push	r27
    321c:	af 93       	push	r26
    321e:	ff 93       	push	r31
    3220:	ef 93       	push	r30
    3222:	3f 93       	push	r19
    3224:	2f 93       	push	r18
    3226:	7f 93       	push	r23
    3228:	6f 93       	push	r22
    322a:	5f 93       	push	r21
    322c:	4f 93       	push	r20
    322e:	9f 93       	push	r25
    3230:	8f 93       	push	r24
    3232:	8f e8       	ldi	r24, 0x8F	; 143
    3234:	93 e0       	ldi	r25, 0x03	; 3
    3236:	9f 93       	push	r25
    3238:	8f 93       	push	r24
    323a:	8f e0       	ldi	r24, 0x0F	; 15
    323c:	94 e0       	ldi	r25, 0x04	; 4
    323e:	9f 93       	push	r25
    3240:	8f 93       	push	r24
    3242:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
				main_nmeaPosLat,
				(main_nmeaPosLonSign > 0 ?  main_nmeaPosLonSign : '-'),
				main_nmeaPosLon,
				main_nmeaAltitudeM);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3246:	28 2f       	mov	r18, r24
    3248:	4f e0       	ldi	r20, 0x0F	; 15
    324a:	54 e0       	ldi	r21, 0x04	; 4
    324c:	60 e0       	ldi	r22, 0x00	; 0
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		if (!localNoPpsCnt) {
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <localNoPpsCnt.2931>
    3262:	81 11       	cpse	r24, r1
    3264:	85 c0       	rjmp	.+266    	; 0x3370 <main_fw_giveAway+0x66e>
			/* print ADC values - only valid when a PPS has arrived */

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA01, sizeof(PM_FORMAT_TA01));
    3266:	2d e1       	ldi	r18, 0x1D	; 29
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	47 e0       	ldi	r20, 0x07	; 7
    326c:	58 e0       	ldi	r21, 0x08	; 8
    326e:	6f e8       	ldi	r22, 0x8F	; 143
    3270:	73 e0       	ldi	r23, 0x03	; 3
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3278:	0f 2e       	mov	r0, r31
    327a:	f9 e8       	ldi	r31, 0x89	; 137
    327c:	8f 2e       	mov	r8, r31
    327e:	f3 e0       	ldi	r31, 0x03	; 3
    3280:	9f 2e       	mov	r9, r31
    3282:	f0 2d       	mov	r31, r0
    3284:	f4 01       	movw	r30, r8
    3286:	80 81       	ld	r24, Z
    3288:	91 81       	ldd	r25, Z+1	; 0x01
    328a:	20 91 7e 05 	lds	r18, 0x057E	; 0x80057e <mainAdcPullVolts+0x3>
    328e:	2f 93       	push	r18
    3290:	20 91 7d 05 	lds	r18, 0x057D	; 0x80057d <mainAdcPullVolts+0x2>
    3294:	2f 93       	push	r18
    3296:	20 91 7c 05 	lds	r18, 0x057C	; 0x80057c <mainAdcPullVolts+0x1>
    329a:	2f 93       	push	r18
    329c:	20 91 7b 05 	lds	r18, 0x057B	; 0x80057b <mainAdcPullVolts>
    32a0:	2f 93       	push	r18
    32a2:	9f 93       	push	r25
    32a4:	8f 93       	push	r24
    32a6:	0f 2e       	mov	r0, r31
    32a8:	ff e8       	ldi	r31, 0x8F	; 143
    32aa:	af 2e       	mov	r10, r31
    32ac:	f3 e0       	ldi	r31, 0x03	; 3
    32ae:	bf 2e       	mov	r11, r31
    32b0:	f0 2d       	mov	r31, r0
    32b2:	bf 92       	push	r11
    32b4:	af 92       	push	r10
    32b6:	0f e0       	ldi	r16, 0x0F	; 15
    32b8:	14 e0       	ldi	r17, 0x04	; 4
    32ba:	1f 93       	push	r17
    32bc:	0f 93       	push	r16
    32be:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
					acAdcCh[ADC_CH_PWMPULL],
					mainAdcPullVolts);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    32c2:	28 2f       	mov	r18, r24
    32c4:	a8 01       	movw	r20, r16
    32c6:	60 e0       	ldi	r22, 0x00	; 0
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA02, sizeof(PM_FORMAT_TA02));
    32ce:	2d e1       	ldi	r18, 0x1D	; 29
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	4a ee       	ldi	r20, 0xEA	; 234
    32d4:	57 e0       	ldi	r21, 0x07	; 7
    32d6:	b5 01       	movw	r22, r10
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    32de:	d4 01       	movw	r26, r8
    32e0:	12 96       	adiw	r26, 0x02	; 2
    32e2:	8d 91       	ld	r24, X+
    32e4:	9c 91       	ld	r25, X
    32e6:	13 97       	sbiw	r26, 0x03	; 3
    32e8:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <mainAdcPhaseVolts+0x3>
    32ec:	2f 93       	push	r18
    32ee:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <mainAdcPhaseVolts+0x2>
    32f2:	2f 93       	push	r18
    32f4:	20 91 78 05 	lds	r18, 0x0578	; 0x800578 <mainAdcPhaseVolts+0x1>
    32f8:	2f 93       	push	r18
    32fa:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <mainAdcPhaseVolts>
    32fe:	2f 93       	push	r18
    3300:	9f 93       	push	r25
    3302:	8f 93       	push	r24
    3304:	bf 92       	push	r11
    3306:	af 92       	push	r10
    3308:	1f 93       	push	r17
    330a:	0f 93       	push	r16
    330c:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
					acAdcCh[ADC_CH_PHASE],
					mainAdcPhaseVolts);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3310:	28 2f       	mov	r18, r24
    3312:	a8 01       	movw	r20, r16
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA03, sizeof(PM_FORMAT_TA03));
    331c:	2d e1       	ldi	r18, 0x1D	; 29
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	4d ec       	ldi	r20, 0xCD	; 205
    3322:	57 e0       	ldi	r21, 0x07	; 7
    3324:	b5 01       	movw	r22, r10
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    332c:	f4 01       	movw	r30, r8
    332e:	84 81       	ldd	r24, Z+4	; 0x04
    3330:	95 81       	ldd	r25, Z+5	; 0x05
    3332:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <mainAdcTemp+0x3>
    3336:	2f 93       	push	r18
    3338:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <mainAdcTemp+0x2>
    333c:	2f 93       	push	r18
    333e:	20 91 74 05 	lds	r18, 0x0574	; 0x800574 <mainAdcTemp+0x1>
    3342:	2f 93       	push	r18
    3344:	20 91 73 05 	lds	r18, 0x0573	; 0x800573 <mainAdcTemp>
    3348:	2f 93       	push	r18
    334a:	9f 93       	push	r25
    334c:	8f 93       	push	r24
    334e:	bf 92       	push	r11
    3350:	af 92       	push	r10
    3352:	1f 93       	push	r17
    3354:	0f 93       	push	r16
    3356:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
					acAdcCh[ADC_CH_TEMP],
					mainAdcTemp);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    335a:	28 2f       	mov	r18, r24
    335c:	a8 01       	movw	r20, r16
    335e:	60 e0       	ldi	r22, 0x00	; 0
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	f8 94       	cli
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	cd bf       	out	0x3d, r28	; 61
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA11, sizeof(PM_FORMAT_TA11));
    3370:	28 e3       	ldi	r18, 0x38	; 56
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	45 e9       	ldi	r20, 0x95	; 149
    3376:	57 e0       	ldi	r21, 0x07	; 7
    3378:	6f e8       	ldi	r22, 0x8F	; 143
    337a:	73 e0       	ldi	r23, 0x03	; 3
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		uint8_t localICR1H = ICR1H;
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock

		SREG = sreg;

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	96 29       	or	r25, r6
					mainAdcTemp);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA11, sizeof(PM_FORMAT_TA11));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3386:	9f 93       	push	r25
    3388:	7f 92       	push	r7
    338a:	ff 92       	push	r15
    338c:	ef 92       	push	r14
    338e:	df 92       	push	r13
    3390:	cf 92       	push	r12
    3392:	0f 2e       	mov	r0, r31
    3394:	ff e8       	ldi	r31, 0x8F	; 143
    3396:	ef 2e       	mov	r14, r31
    3398:	f3 e0       	ldi	r31, 0x03	; 3
    339a:	ff 2e       	mov	r15, r31
    339c:	f0 2d       	mov	r31, r0
    339e:	ff 92       	push	r15
    33a0:	ef 92       	push	r14
    33a2:	0f e0       	ldi	r16, 0x0F	; 15
    33a4:	14 e0       	ldi	r17, 0x04	; 4
    33a6:	1f 93       	push	r17
    33a8:	0f 93       	push	r16
    33aa:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				localFastCtr1ms,
				localFastTCNT1);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    33ae:	28 2f       	mov	r18, r24
    33b0:	a8 01       	movw	r20, r16
    33b2:	60 e0       	ldi	r22, 0x00	; 0
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA12, sizeof(PM_FORMAT_TA12));
    33ba:	24 e7       	ldi	r18, 0x74	; 116
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	41 e2       	ldi	r20, 0x21	; 33
    33c0:	57 e0       	ldi	r21, 0x07	; 7
    33c2:	b7 01       	movw	r22, r14
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    33ca:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <ppsStampICR1_last+0x1>
    33ce:	8f 93       	push	r24
    33d0:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <ppsStampICR1_last>
    33d4:	8f 93       	push	r24
    33d6:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <ppsStampCtr1ms_last+0x3>
    33da:	8f 93       	push	r24
    33dc:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <ppsStampCtr1ms_last+0x2>
    33e0:	8f 93       	push	r24
    33e2:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <ppsStampCtr1ms_last+0x1>
    33e6:	8f 93       	push	r24
    33e8:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <ppsStampCtr1ms_last>
    33ec:	8f 93       	push	r24
    33ee:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <ppsStampICR1+0x1>
    33f2:	8f 93       	push	r24
    33f4:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <ppsStampICR1>
    33f8:	8f 93       	push	r24
    33fa:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <ppsStampCtr1ms+0x3>
    33fe:	8f 93       	push	r24
    3400:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <ppsStampCtr1ms+0x2>
    3404:	8f 93       	push	r24
    3406:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <ppsStampCtr1ms+0x1>
    340a:	8f 93       	push	r24
    340c:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <ppsStampCtr1ms>
    3410:	8f 93       	push	r24
    3412:	ff 92       	push	r15
    3414:	ef 92       	push	r14
    3416:	1f 93       	push	r17
    3418:	0f 93       	push	r16
    341a:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				ppsStampCtr1ms,
				ppsStampICR1,
				ppsStampCtr1ms_last,
				ppsStampICR1_last);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    341e:	28 2f       	mov	r18, r24
    3420:	a8 01       	movw	r20, r16
    3422:	60 e0       	ldi	r22, 0x00	; 0
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA13, sizeof(PM_FORMAT_TA13));
    342a:	24 e2       	ldi	r18, 0x24	; 36
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	4d ef       	ldi	r20, 0xFD	; 253
    3430:	56 e0       	ldi	r21, 0x06	; 6
    3432:	b7 01       	movw	r22, r14
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    343a:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <fastPwmSubLoopVal>
    343e:	1f 92       	push	r1
    3440:	8f 93       	push	r24
    3442:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <fastPwmLoopVal>
    3446:	1f 92       	push	r1
    3448:	8f 93       	push	r24
    344a:	ff 92       	push	r15
    344c:	ef 92       	push	r14
    344e:	1f 93       	push	r17
    3450:	0f 93       	push	r16
    3452:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				fastPwmLoopVal,
				fastPwmSubLoopVal);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	28 2f       	mov	r18, r24
    3462:	a8 01       	movw	r20, r16
    3464:	60 e0       	ldi	r22, 0x00	; 0
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA14, sizeof(PM_FORMAT_TA14));
    346c:	20 e2       	ldi	r18, 0x20	; 32
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	4d ed       	ldi	r20, 0xDD	; 221
    3472:	56 e0       	ldi	r21, 0x06	; 6
    3474:	b7 01       	movw	r22, r14
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    347c:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3480:	1f 92       	push	r1
    3482:	8f 93       	push	r24
    3484:	ff 92       	push	r15
    3486:	ef 92       	push	r14
    3488:	1f 93       	push	r17
    348a:	0f 93       	push	r16
    348c:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				mainRefClkState);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3490:	28 2f       	mov	r18, r24
    3492:	a8 01       	movw	r20, r16
    3494:	60 e0       	ldi	r22, 0x00	; 0
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
    349c:	0f 90       	pop	r0
    349e:	0f 90       	pop	r0
    34a0:	0f 90       	pop	r0
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
	}

	if (!localNoPpsCnt) {
    34a8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <localNoPpsCnt.2931>
    34ac:	81 11       	cpse	r24, r1
    34ae:	71 c6       	rjmp	.+3298   	; 0x4192 <main_fw_giveAway+0x1490>
		/* PPS - 1 Hz Ref.-Clk. - State Machine */

		/* central calculations */
		static float localMeanClockDiffSum = 0.0f;
		float qrgDev_Hz;
		int32_t local20MHzClockDiff =   (20000L * (((int32_t) ppsStampCtr1ms) - ((int32_t) ppsStampCtr1ms_last)))
    34b0:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <ppsStampCtr1ms>
    34b4:	50 91 8c 05 	lds	r21, 0x058C	; 0x80058c <ppsStampCtr1ms+0x1>
    34b8:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <ppsStampCtr1ms+0x2>
    34bc:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <ppsStampCtr1ms+0x3>
    34c0:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <ppsStampCtr1ms_last>
    34c4:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <ppsStampCtr1ms_last+0x1>
    34c8:	a0 91 87 05 	lds	r26, 0x0587	; 0x800587 <ppsStampCtr1ms_last+0x2>
    34cc:	b0 91 88 05 	lds	r27, 0x0588	; 0x800588 <ppsStampCtr1ms_last+0x3>
    34d0:	9a 01       	movw	r18, r20
    34d2:	ab 01       	movw	r20, r22
    34d4:	28 1b       	sub	r18, r24
    34d6:	39 0b       	sbc	r19, r25
    34d8:	4a 0b       	sbc	r20, r26
    34da:	5b 0b       	sbc	r21, r27
    34dc:	a0 e2       	ldi	r26, 0x20	; 32
    34de:	be e4       	ldi	r27, 0x4E	; 78
    34e0:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <__muluhisi3>
							    	  +           (((int32_t) ppsStampICR1)   - ((int32_t) ppsStampICR1_last))
    34e4:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <ppsStampICR1>
    34e8:	30 91 8a 05 	lds	r19, 0x058A	; 0x80058a <ppsStampICR1+0x1>
    34ec:	49 01       	movw	r8, r18
    34ee:	a1 2c       	mov	r10, r1
    34f0:	b1 2c       	mov	r11, r1
    34f2:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <ppsStampICR1_last>
    34f6:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <ppsStampICR1_last+0x1>
    34fa:	82 1a       	sub	r8, r18
    34fc:	93 0a       	sbc	r9, r19
    34fe:	a1 08       	sbc	r10, r1
    3500:	b1 08       	sbc	r11, r1
    3502:	86 0e       	add	r8, r22
    3504:	97 1e       	adc	r9, r23
    3506:	a8 1e       	adc	r10, r24
    3508:	b9 1e       	adc	r11, r25
		/* PPS - 1 Hz Ref.-Clk. - State Machine */

		/* central calculations */
		static float localMeanClockDiffSum = 0.0f;
		float qrgDev_Hz;
		int32_t local20MHzClockDiff =   (20000L * (((int32_t) ppsStampCtr1ms) - ((int32_t) ppsStampCtr1ms_last)))
    350a:	75 01       	movw	r14, r10
    350c:	64 01       	movw	r12, r8
    350e:	bd e2       	ldi	r27, 0x2D	; 45
    3510:	db 1a       	sub	r13, r27
    3512:	b1 e3       	ldi	r27, 0x31	; 49
    3514:	eb 0a       	sbc	r14, r27
    3516:	b1 e0       	ldi	r27, 0x01	; 1
    3518:	fb 0a       	sbc	r15, r27
							    	  +           (((int32_t) ppsStampICR1)   - ((int32_t) ppsStampICR1_last))
							    	  -  20000000L;

		float localMeanFloatClockDiff = localMeanClockDiffSum / MEAN_QRG_CLOCK_STAGES_F;
    351a:	40 90 23 01 	lds	r4, 0x0123	; 0x800123 <localMeanClockDiffSum.2942>
    351e:	50 90 24 01 	lds	r5, 0x0124	; 0x800124 <localMeanClockDiffSum.2942+0x1>
    3522:	60 90 25 01 	lds	r6, 0x0125	; 0x800125 <localMeanClockDiffSum.2942+0x2>
    3526:	70 90 26 01 	lds	r7, 0x0126	; 0x800126 <localMeanClockDiffSum.2942+0x3>
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 ea       	ldi	r20, 0xA0	; 160
    3530:	50 e4       	ldi	r21, 0x40	; 64
    3532:	c3 01       	movw	r24, r6
    3534:	b2 01       	movw	r22, r4
    3536:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    353a:	6b 83       	std	Y+3, r22	; 0x03
    353c:	7c 83       	std	Y+4, r23	; 0x04
    353e:	8d 83       	std	Y+5, r24	; 0x05
    3540:	9e 83       	std	Y+6, r25	; 0x06
		float localPpm = 0.0f;
		if ((local20MHzClockDiff < -CLOCK_DIFF_OUT) || (CLOCK_DIFF_OUT < local20MHzClockDiff)) {
    3542:	ec e9       	ldi	r30, 0x9C	; 156
    3544:	8e 1a       	sub	r8, r30
    3546:	ec e2       	ldi	r30, 0x2C	; 44
    3548:	9e 0a       	sbc	r9, r30
    354a:	e1 e3       	ldi	r30, 0x31	; 49
    354c:	ae 0a       	sbc	r10, r30
    354e:	e1 e0       	ldi	r30, 0x01	; 1
    3550:	be 0a       	sbc	r11, r30
    3552:	f9 ec       	ldi	r31, 0xC9	; 201
    3554:	8f 16       	cp	r8, r31
    3556:	91 04       	cpc	r9, r1
    3558:	a1 04       	cpc	r10, r1
    355a:	b1 04       	cpc	r11, r1
    355c:	d0 f0       	brcs	.+52     	; 0x3592 <main_fw_giveAway+0x890>
			/* bad value - ignore */
			local20MHzClockDiff = 0;
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e0       	ldi	r20, 0x00	; 0
    3564:	5f e3       	ldi	r21, 0x3F	; 63
    3566:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    356a:	6f 83       	std	Y+7, r22	; 0x07
    356c:	7b 87       	std	Y+11, r23	; 0x0b
    356e:	8c 87       	std	Y+12, r24	; 0x0c
    3570:	9d 87       	std	Y+13, r25	; 0x0d
			localPpm = (localMeanFloatClockDiff / 20.0f);
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	40 ea       	ldi	r20, 0xA0	; 160
    3578:	51 e4       	ldi	r21, 0x41	; 65
    357a:	6b 81       	ldd	r22, Y+3	; 0x03
    357c:	7c 81       	ldd	r23, Y+4	; 0x04
    357e:	8d 81       	ldd	r24, Y+5	; 0x05
    3580:	9e 81       	ldd	r25, Y+6	; 0x06
    3582:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    3586:	2b 01       	movw	r4, r22
    3588:	3c 01       	movw	r6, r24

		float localMeanFloatClockDiff = localMeanClockDiffSum / MEAN_QRG_CLOCK_STAGES_F;
		float localPpm = 0.0f;
		if ((local20MHzClockDiff < -CLOCK_DIFF_OUT) || (CLOCK_DIFF_OUT < local20MHzClockDiff)) {
			/* bad value - ignore */
			local20MHzClockDiff = 0;
    358a:	c1 2c       	mov	r12, r1
    358c:	d1 2c       	mov	r13, r1
    358e:	76 01       	movw	r14, r12
    3590:	5e c0       	rjmp	.+188    	; 0x364e <main_fw_giveAway+0x94c>
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
			localPpm = (localMeanFloatClockDiff / 20.0f);

		} else if ((-CLOCK_DIFF_COARSE_FINE < local20MHzClockDiff) && (local20MHzClockDiff < CLOCK_DIFF_COARSE_FINE)) {
    3592:	d7 01       	movw	r26, r14
    3594:	c6 01       	movw	r24, r12
    3596:	43 96       	adiw	r24, 0x13	; 19
    3598:	a1 1d       	adc	r26, r1
    359a:	b1 1d       	adc	r27, r1
    359c:	87 97       	sbiw	r24, 0x27	; 39
    359e:	a1 05       	cpc	r26, r1
    35a0:	b1 05       	cpc	r27, r1
    35a2:	98 f5       	brcc	.+102    	; 0x360a <main_fw_giveAway+0x908>
			/* fine mode */
			localMeanClockDiffSum += (((float) local20MHzClockDiff) - localMeanFloatClockDiff);
    35a4:	c7 01       	movw	r24, r14
    35a6:	b6 01       	movw	r22, r12
    35a8:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    35ac:	2b 81       	ldd	r18, Y+3	; 0x03
    35ae:	3c 81       	ldd	r19, Y+4	; 0x04
    35b0:	4d 81       	ldd	r20, Y+5	; 0x05
    35b2:	5e 81       	ldd	r21, Y+6	; 0x06
    35b4:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    35b8:	9b 01       	movw	r18, r22
    35ba:	ac 01       	movw	r20, r24
    35bc:	c3 01       	movw	r24, r6
    35be:	b2 01       	movw	r22, r4
    35c0:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    35c4:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <localMeanClockDiffSum.2942>
    35c8:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <localMeanClockDiffSum.2942+0x1>
    35cc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <localMeanClockDiffSum.2942+0x2>
    35d0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <localMeanClockDiffSum.2942+0x3>
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	40 e0       	ldi	r20, 0x00	; 0
    35da:	5f e3       	ldi	r21, 0x3F	; 63
    35dc:	6b 81       	ldd	r22, Y+3	; 0x03
    35de:	7c 81       	ldd	r23, Y+4	; 0x04
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    35e8:	6f 83       	std	Y+7, r22	; 0x07
    35ea:	7b 87       	std	Y+11, r23	; 0x0b
    35ec:	8c 87       	std	Y+12, r24	; 0x0c
    35ee:	9d 87       	std	Y+13, r25	; 0x0d
			localPpm = (localMeanFloatClockDiff / 20.0f);
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	40 ea       	ldi	r20, 0xA0	; 160
    35f6:	51 e4       	ldi	r21, 0x41	; 65
    35f8:	6b 81       	ldd	r22, Y+3	; 0x03
    35fa:	7c 81       	ldd	r23, Y+4	; 0x04
    35fc:	8d 81       	ldd	r24, Y+5	; 0x05
    35fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3600:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    3604:	2b 01       	movw	r4, r22
    3606:	3c 01       	movw	r6, r24
    3608:	22 c0       	rjmp	.+68     	; 0x364e <main_fw_giveAway+0x94c>

		} else {
			/* re-init the mean value sum when being in coarse mode */
			localMeanClockDiffSum = 0.0f;
    360a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <localMeanClockDiffSum.2942>
    360e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <localMeanClockDiffSum.2942+0x1>
    3612:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <localMeanClockDiffSum.2942+0x2>
    3616:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <localMeanClockDiffSum.2942+0x3>
			qrgDev_Hz = (local20MHzClockDiff / 2.0f);
    361a:	c7 01       	movw	r24, r14
    361c:	b6 01       	movw	r22, r12
    361e:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    3622:	4b 01       	movw	r8, r22
    3624:	5c 01       	movw	r10, r24
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	40 e0       	ldi	r20, 0x00	; 0
    362c:	5f e3       	ldi	r21, 0x3F	; 63
    362e:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    3632:	6f 83       	std	Y+7, r22	; 0x07
    3634:	7b 87       	std	Y+11, r23	; 0x0b
    3636:	8c 87       	std	Y+12, r24	; 0x0c
    3638:	9d 87       	std	Y+13, r25	; 0x0d
			localPpm = (local20MHzClockDiff / 20.0f);
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	40 ea       	ldi	r20, 0xA0	; 160
    3640:	51 e4       	ldi	r21, 0x41	; 65
    3642:	c5 01       	movw	r24, r10
    3644:	b4 01       	movw	r22, r8
    3646:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    364a:	2b 01       	movw	r4, r22
    364c:	3c 01       	movw	r6, r24
		}

		if (main_bf.mainIsTimerTest && (!main_bf.mainIsAFC)) {
    364e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3652:	82 ff       	sbrs	r24, 2
    3654:	60 c0       	rjmp	.+192    	; 0x3716 <main_fw_giveAway+0xa14>
    3656:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    365a:	80 fd       	sbrc	r24, 0
    365c:	5c c0       	rjmp	.+184    	; 0x3716 <main_fw_giveAway+0xa14>
			/* monitoring frequency even when AFC is switched off */
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA01, sizeof(PM_FORMAT_IA01));
    365e:	2a e3       	ldi	r18, 0x3A	; 58
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	47 ed       	ldi	r20, 0xD7	; 215
    3664:	55 e0       	ldi	r21, 0x05	; 5
    3666:	6f e8       	ldi	r22, 0x8F	; 143
    3668:	73 e0       	ldi	r23, 0x03	; 3
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3670:	ff 92       	push	r15
    3672:	ef 92       	push	r14
    3674:	df 92       	push	r13
    3676:	cf 92       	push	r12
    3678:	0f 2e       	mov	r0, r31
    367a:	ff e8       	ldi	r31, 0x8F	; 143
    367c:	af 2e       	mov	r10, r31
    367e:	f3 e0       	ldi	r31, 0x03	; 3
    3680:	bf 2e       	mov	r11, r31
    3682:	f0 2d       	mov	r31, r0
    3684:	bf 92       	push	r11
    3686:	af 92       	push	r10
    3688:	0f e0       	ldi	r16, 0x0F	; 15
    368a:	14 e0       	ldi	r17, 0x04	; 4
    368c:	1f 93       	push	r17
    368e:	0f 93       	push	r16
    3690:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3694:	28 2f       	mov	r18, r24
    3696:	a8 01       	movw	r20, r16
    3698:	60 e0       	ldi	r22, 0x00	; 0
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
    36a0:	28 e6       	ldi	r18, 0x68	; 104
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	4f e6       	ldi	r20, 0x6F	; 111
    36a6:	55 e0       	ldi	r21, 0x05	; 5
    36a8:	b5 01       	movw	r22, r10
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
					localMeanFloatClockDiff,
					qrgDev_Hz,
					mainPpm + 2.5f);
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	40 e2       	ldi	r20, 0x20	; 32
    36b6:	50 e4       	ldi	r21, 0x40	; 64
    36b8:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <mainPpm>
    36bc:	70 91 80 05 	lds	r23, 0x0580	; 0x800580 <mainPpm+0x1>
    36c0:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <mainPpm+0x2>
    36c4:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <mainPpm+0x3>
    36c8:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
			int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    36cc:	9f 93       	push	r25
    36ce:	8f 93       	push	r24
    36d0:	7f 93       	push	r23
    36d2:	6f 93       	push	r22
    36d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    36d6:	2f 93       	push	r18
    36d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    36da:	3f 93       	push	r19
    36dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    36de:	8f 93       	push	r24
    36e0:	9f 81       	ldd	r25, Y+7	; 0x07
    36e2:	9f 93       	push	r25
    36e4:	ae 81       	ldd	r26, Y+6	; 0x06
    36e6:	af 93       	push	r26
    36e8:	bd 81       	ldd	r27, Y+5	; 0x05
    36ea:	bf 93       	push	r27
    36ec:	ec 81       	ldd	r30, Y+4	; 0x04
    36ee:	ef 93       	push	r30
    36f0:	fb 81       	ldd	r31, Y+3	; 0x03
    36f2:	ff 93       	push	r31
    36f4:	bf 92       	push	r11
    36f6:	af 92       	push	r10
    36f8:	1f 93       	push	r17
    36fa:	0f 93       	push	r16
    36fc:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
					localMeanFloatClockDiff,
					qrgDev_Hz,
					mainPpm + 2.5f);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3700:	28 2f       	mov	r18, r24
    3702:	a8 01       	movw	r20, r16
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	80 e0       	ldi	r24, 0x00	; 0
    3708:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
    370c:	0f b6       	in	r0, 0x3f	; 63
    370e:	f8 94       	cli
    3710:	de bf       	out	0x3e, r29	; 62
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	cd bf       	out	0x3d, r28	; 61
	const  uint8_t holdOffTimeStart = 20;
	static uint8_t holdOffTime = 0;

	uint8_t localIsOffset = false;

	if ((mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) && main_bf.mainIsAPC) {
    3716:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    371a:	84 30       	cpi	r24, 0x04	; 4
    371c:	a0 f4       	brcc	.+40     	; 0x3746 <main_fw_giveAway+0xa44>
    371e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3722:	81 ff       	sbrs	r24, 1
    3724:	12 c0       	rjmp	.+36     	; 0x374a <main_fw_giveAway+0xa48>
		/* Help APC to find its phase - when found, stop offset */
		meanFloatClockDiff += 0.1f;							// 0.1 Hz @ 20 MHz below center frequency to let the phase wander and
    3726:	2d ec       	ldi	r18, 0xCD	; 205
    3728:	3c ec       	ldi	r19, 0xCC	; 204
    372a:	4c ec       	ldi	r20, 0xCC	; 204
    372c:	5d e3       	ldi	r21, 0x3D	; 61
    372e:	6b 81       	ldd	r22, Y+3	; 0x03
    3730:	7c 81       	ldd	r23, Y+4	; 0x04
    3732:	8d 81       	ldd	r24, Y+5	; 0x05
    3734:	9e 81       	ldd	r25, Y+6	; 0x06
    3736:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    373a:	6b 83       	std	Y+3, r22	; 0x03
    373c:	7c 83       	std	Y+4, r23	; 0x04
    373e:	8d 83       	std	Y+5, r24	; 0x05
    3740:	9e 83       	std	Y+6, r25	; 0x06
															// the phase locker find its position to lock in
		localIsOffset = true;
    3742:	11 e0       	ldi	r17, 0x01	; 1
    3744:	03 c0       	rjmp	.+6      	; 0x374c <main_fw_giveAway+0xa4a>
	/* frequency shift calculation */

	const  uint8_t holdOffTimeStart = 20;
	static uint8_t holdOffTime = 0;

	uint8_t localIsOffset = false;
    3746:	10 e0       	ldi	r17, 0x00	; 0
    3748:	01 c0       	rjmp	.+2      	; 0x374c <main_fw_giveAway+0xa4a>
    374a:	10 e0       	ldi	r17, 0x00	; 0
		meanFloatClockDiff += 0.1f;							// 0.1 Hz @ 20 MHz below center frequency to let the phase wander and
															// the phase locker find its position to lock in
		localIsOffset = true;
	}

	if ((-1000.0f < meanFloatClockDiff) &&
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	4a e7       	ldi	r20, 0x7A	; 122
    3752:	54 ec       	ldi	r21, 0xC4	; 196
    3754:	6b 81       	ldd	r22, Y+3	; 0x03
    3756:	7c 81       	ldd	r23, Y+4	; 0x04
    3758:	8d 81       	ldd	r24, Y+5	; 0x05
    375a:	9e 81       	ldd	r25, Y+6	; 0x06
    375c:	0e 94 a4 31 	call	0x6348	; 0x6348 <__gesf2>
    3760:	18 16       	cp	r1, r24
    3762:	0c f0       	brlt	.+2      	; 0x3766 <main_fw_giveAway+0xa64>
    3764:	bf c1       	rjmp	.+894    	; 0x3ae4 <main_fw_giveAway+0xde2>
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	4a e7       	ldi	r20, 0x7A	; 122
    376c:	54 e4       	ldi	r21, 0x44	; 68
    376e:	6b 81       	ldd	r22, Y+3	; 0x03
    3770:	7c 81       	ldd	r23, Y+4	; 0x04
    3772:	8d 81       	ldd	r24, Y+5	; 0x05
    3774:	9e 81       	ldd	r25, Y+6	; 0x06
    3776:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    377a:	88 23       	and	r24, r24
    377c:	0c f0       	brlt	.+2      	; 0x3780 <main_fw_giveAway+0xa7e>
    377e:	b2 c1       	rjmp	.+868    	; 0x3ae4 <main_fw_giveAway+0xde2>
		( 1000.0f > meanFloatClockDiff)) {
		/* keep measuring window between +/-50ppm */
		ppm -=  (localIsOffset ?  0.005f : 0.0f);			// correct the clock offset
    3780:	11 11       	cpse	r17, r1
    3782:	04 c0       	rjmp	.+8      	; 0x378c <main_fw_giveAway+0xa8a>
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	a9 01       	movw	r20, r18
    378a:	04 c0       	rjmp	.+8      	; 0x3794 <main_fw_giveAway+0xa92>
    378c:	2a e0       	ldi	r18, 0x0A	; 10
    378e:	37 ed       	ldi	r19, 0xD7	; 215
    3790:	43 ea       	ldi	r20, 0xA3	; 163
    3792:	5b e3       	ldi	r21, 0x3B	; 59
    3794:	c3 01       	movw	r24, r6
    3796:	b2 01       	movw	r22, r4
    3798:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    379c:	26 2e       	mov	r2, r22
    379e:	37 2e       	mov	r3, r23
    37a0:	88 2e       	mov	r8, r24
    37a2:	99 2e       	mov	r9, r25

		float pwmCorSteps;
		if ((-CLOCK_DIFF_FAST_FRAME <= int20MHzClockDiff) && (int20MHzClockDiff <= CLOCK_DIFF_FAST_FRAME)) {
    37a4:	d7 01       	movw	r26, r14
    37a6:	c6 01       	movw	r24, r12
    37a8:	03 96       	adiw	r24, 0x03	; 3
    37aa:	a1 1d       	adc	r26, r1
    37ac:	b1 1d       	adc	r27, r1
    37ae:	07 97       	sbiw	r24, 0x07	; 7
    37b0:	a1 05       	cpc	r26, r1
    37b2:	b1 05       	cpc	r27, r1
    37b4:	00 f5       	brcc	.+64     	; 0x37f6 <main_fw_giveAway+0xaf4>
			/* fine pitching */
			pwmCorSteps = ((-meanFloatClockDiff / 20.0f) / mainCoef_b02_qrg_k_pPwmStep_25C_ppm) / PWM_COR_STEPS_FINE_DIV_F;
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 ea       	ldi	r20, 0xA0	; 160
    37bc:	51 e4       	ldi	r21, 0x41	; 65
    37be:	6b 81       	ldd	r22, Y+3	; 0x03
    37c0:	7c 81       	ldd	r23, Y+4	; 0x04
    37c2:	8d 81       	ldd	r24, Y+5	; 0x05
    37c4:	9e 81       	ldd	r25, Y+6	; 0x06
    37c6:	90 58       	subi	r25, 0x80	; 128
    37c8:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    37cc:	20 91 a8 05 	lds	r18, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    37d0:	30 91 a9 05 	lds	r19, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    37d4:	40 91 aa 05 	lds	r20, 0x05AA	; 0x8005aa <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    37d8:	50 91 ab 05 	lds	r21, 0x05AB	; 0x8005ab <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    37dc:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	40 e2       	ldi	r20, 0x20	; 32
    37e6:	51 e4       	ldi	r21, 0x41	; 65
    37e8:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    37ec:	6e 87       	std	Y+14, r22	; 0x0e
    37ee:	7f 87       	std	Y+15, r23	; 0x0f
    37f0:	88 8b       	std	Y+16, r24	; 0x10
    37f2:	99 8b       	std	Y+17, r25	; 0x11
    37f4:	25 c0       	rjmp	.+74     	; 0x3840 <main_fw_giveAway+0xb3e>

		} else {
			/* coarse pitching */
			pwmCorSteps = ((((float) -int20MHzClockDiff) / 20.0f) / mainCoef_b02_qrg_k_pPwmStep_25C_ppm) / PWM_COR_STEPS_COARSE_DIV_F;  // used also in main_fw_calcPhase()
    37f6:	66 27       	eor	r22, r22
    37f8:	77 27       	eor	r23, r23
    37fa:	cb 01       	movw	r24, r22
    37fc:	6c 19       	sub	r22, r12
    37fe:	7d 09       	sbc	r23, r13
    3800:	8e 09       	sbc	r24, r14
    3802:	9f 09       	sbc	r25, r15
    3804:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	40 ea       	ldi	r20, 0xA0	; 160
    380e:	51 e4       	ldi	r21, 0x41	; 65
    3810:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    3814:	20 91 a8 05 	lds	r18, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    3818:	30 91 a9 05 	lds	r19, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    381c:	40 91 aa 05 	lds	r20, 0x05AA	; 0x8005aa <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    3820:	50 91 ab 05 	lds	r21, 0x05AB	; 0x8005ab <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    3824:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    3828:	2d ec       	ldi	r18, 0xCD	; 205
    382a:	3c ec       	ldi	r19, 0xCC	; 204
    382c:	4c e8       	ldi	r20, 0x8C	; 140
    382e:	5f e3       	ldi	r21, 0x3F	; 63
    3830:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    3834:	6e 87       	std	Y+14, r22	; 0x0e
    3836:	7f 87       	std	Y+15, r23	; 0x0f
    3838:	88 8b       	std	Y+16, r24	; 0x10
    383a:	99 8b       	std	Y+17, r25	; 0x11
			mainRefClkState = REFCLK_STATE_NOSYNC;
    383c:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <mainRefClkState>
		}

		/* determine the new state of the FSM */
		if ((-0.015f <= ppm) && (ppm <= 0.015f) && (mainRefClkState == REFCLK_STATE_SEARCH_PHASE)) {  // single step tuning with counter stabilizer
    3840:	2f e8       	ldi	r18, 0x8F	; 143
    3842:	32 ec       	ldi	r19, 0xC2	; 194
    3844:	45 e7       	ldi	r20, 0x75	; 117
    3846:	5c eb       	ldi	r21, 0xBC	; 188
    3848:	62 2d       	mov	r22, r2
    384a:	73 2d       	mov	r23, r3
    384c:	88 2d       	mov	r24, r8
    384e:	99 2d       	mov	r25, r9
    3850:	0e 94 a4 31 	call	0x6348	; 0x6348 <__gesf2>
    3854:	88 23       	and	r24, r24
    3856:	c4 f0       	brlt	.+48     	; 0x3888 <main_fw_giveAway+0xb86>
    3858:	2f e8       	ldi	r18, 0x8F	; 143
    385a:	32 ec       	ldi	r19, 0xC2	; 194
    385c:	45 e7       	ldi	r20, 0x75	; 117
    385e:	5c e3       	ldi	r21, 0x3C	; 60
    3860:	62 2d       	mov	r22, r2
    3862:	73 2d       	mov	r23, r3
    3864:	88 2d       	mov	r24, r8
    3866:	99 2d       	mov	r25, r9
    3868:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    386c:	18 16       	cp	r1, r24
    386e:	64 f0       	brlt	.+24     	; 0x3888 <main_fw_giveAway+0xb86>
    3870:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3874:	82 30       	cpi	r24, 0x02	; 2
    3876:	41 f4       	brne	.+16     	; 0x3888 <main_fw_giveAway+0xb86>
			/* Upgrading: switch on the frequency mean value counter */
			if (!holdOffTime) {
    3878:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2818>
    387c:	81 11       	cpse	r24, r1
    387e:	7c c0       	rjmp	.+248    	; 0x3978 <main_fw_giveAway+0xc76>
				mainRefClkState = REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED;
    3880:	83 e0       	ldi	r24, 0x03	; 3
    3882:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
    3886:	78 c0       	rjmp	.+240    	; 0x3978 <main_fw_giveAway+0xc76>
			}

		} else if ((-0.045f <= ppm) && (ppm <= 0.045f) && (mainRefClkState == REFCLK_STATE_SEARCH_QRG)) {	 // entering phase window (deviation less than 1 Hz @ 20 MHz)
    3888:	2c ee       	ldi	r18, 0xEC	; 236
    388a:	31 e5       	ldi	r19, 0x51	; 81
    388c:	48 e3       	ldi	r20, 0x38	; 56
    388e:	5d eb       	ldi	r21, 0xBD	; 189
    3890:	62 2d       	mov	r22, r2
    3892:	73 2d       	mov	r23, r3
    3894:	88 2d       	mov	r24, r8
    3896:	99 2d       	mov	r25, r9
    3898:	0e 94 a4 31 	call	0x6348	; 0x6348 <__gesf2>
    389c:	88 23       	and	r24, r24
    389e:	dc f0       	brlt	.+54     	; 0x38d6 <main_fw_giveAway+0xbd4>
    38a0:	2c ee       	ldi	r18, 0xEC	; 236
    38a2:	31 e5       	ldi	r19, 0x51	; 81
    38a4:	48 e3       	ldi	r20, 0x38	; 56
    38a6:	5d e3       	ldi	r21, 0x3D	; 61
    38a8:	62 2d       	mov	r22, r2
    38aa:	73 2d       	mov	r23, r3
    38ac:	88 2d       	mov	r24, r8
    38ae:	99 2d       	mov	r25, r9
    38b0:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    38b4:	18 16       	cp	r1, r24
    38b6:	7c f0       	brlt	.+30     	; 0x38d6 <main_fw_giveAway+0xbd4>
    38b8:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    38bc:	81 30       	cpi	r24, 0x01	; 1
    38be:	59 f4       	brne	.+22     	; 0x38d6 <main_fw_giveAway+0xbd4>
			/* Upgrading: search phase window */
			if (!holdOffTime) {
    38c0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2818>
    38c4:	81 11       	cpse	r24, r1
    38c6:	58 c0       	rjmp	.+176    	; 0x3978 <main_fw_giveAway+0xc76>
				mainRefClkState = REFCLK_STATE_SEARCH_PHASE;
    38c8:	82 e0       	ldi	r24, 0x02	; 2
    38ca:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
				holdOffTime = holdOffTimeStart;
    38ce:	84 e1       	ldi	r24, 0x14	; 20
    38d0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2818>
    38d4:	51 c0       	rjmp	.+162    	; 0x3978 <main_fw_giveAway+0xc76>
			}

		} else if ((-0.095f <= ppm) && (ppm <= 0.095f) && (mainRefClkState > REFCLK_STATE_SEARCH_QRG)) {  // do not fall out of phase window
    38d6:	2c e5       	ldi	r18, 0x5C	; 92
    38d8:	3f e8       	ldi	r19, 0x8F	; 143
    38da:	42 ec       	ldi	r20, 0xC2	; 194
    38dc:	5d eb       	ldi	r21, 0xBD	; 189
    38de:	62 2d       	mov	r22, r2
    38e0:	73 2d       	mov	r23, r3
    38e2:	88 2d       	mov	r24, r8
    38e4:	99 2d       	mov	r25, r9
    38e6:	0e 94 a4 31 	call	0x6348	; 0x6348 <__gesf2>
    38ea:	88 23       	and	r24, r24
    38ec:	84 f0       	brlt	.+32     	; 0x390e <main_fw_giveAway+0xc0c>
    38ee:	2c e5       	ldi	r18, 0x5C	; 92
    38f0:	3f e8       	ldi	r19, 0x8F	; 143
    38f2:	42 ec       	ldi	r20, 0xC2	; 194
    38f4:	5d e3       	ldi	r21, 0x3D	; 61
    38f6:	62 2d       	mov	r22, r2
    38f8:	73 2d       	mov	r23, r3
    38fa:	88 2d       	mov	r24, r8
    38fc:	99 2d       	mov	r25, r9
    38fe:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    3902:	18 16       	cp	r1, r24
    3904:	24 f0       	brlt	.+8      	; 0x390e <main_fw_giveAway+0xc0c>
    3906:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    390a:	82 30       	cpi	r24, 0x02	; 2
    390c:	a8 f5       	brcc	.+106    	; 0x3978 <main_fw_giveAway+0xc76>
			/* hysteresis: keep state a bit longer */

		} else if ((-25.0 <= ppm) && (ppm <= 25.0f)) {  // searching QRG until 1 Hz resolution is established
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	48 ec       	ldi	r20, 0xC8	; 200
    3914:	51 ec       	ldi	r21, 0xC1	; 193
    3916:	62 2d       	mov	r22, r2
    3918:	73 2d       	mov	r23, r3
    391a:	88 2d       	mov	r24, r8
    391c:	99 2d       	mov	r25, r9
    391e:	0e 94 a4 31 	call	0x6348	; 0x6348 <__gesf2>
    3922:	88 23       	and	r24, r24
    3924:	24 f1       	brlt	.+72     	; 0x396e <main_fw_giveAway+0xc6c>
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	48 ec       	ldi	r20, 0xC8	; 200
    392c:	51 e4       	ldi	r21, 0x41	; 65
    392e:	62 2d       	mov	r22, r2
    3930:	73 2d       	mov	r23, r3
    3932:	88 2d       	mov	r24, r8
    3934:	99 2d       	mov	r25, r9
    3936:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    393a:	18 16       	cp	r1, r24
    393c:	c4 f0       	brlt	.+48     	; 0x396e <main_fw_giveAway+0xc6c>
			if (mainRefClkState > REFCLK_STATE_SEARCH_QRG) {
    393e:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3942:	82 30       	cpi	r24, 0x02	; 2
    3944:	38 f0       	brcs	.+14     	; 0x3954 <main_fw_giveAway+0xc52>
				/* Downgrading */
				mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
				holdOffTime = holdOffTimeStart;
    394c:	84 e1       	ldi	r24, 0x14	; 20
    394e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2818>
    3952:	12 c0       	rjmp	.+36     	; 0x3978 <main_fw_giveAway+0xc76>

			} else if (mainRefClkState < REFCLK_STATE_SEARCH_QRG) {
    3954:	81 11       	cpse	r24, r1
    3956:	10 c0       	rjmp	.+32     	; 0x3978 <main_fw_giveAway+0xc76>
				/* Upgrading */
				if (!holdOffTime) {
    3958:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2818>
    395c:	81 11       	cpse	r24, r1
    395e:	0c c0       	rjmp	.+24     	; 0x3978 <main_fw_giveAway+0xc76>
					mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
					holdOffTime = holdOffTimeStart;
    3966:	84 e1       	ldi	r24, 0x14	; 20
    3968:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2818>
    396c:	05 c0       	rjmp	.+10     	; 0x3978 <main_fw_giveAway+0xc76>
				}
			}

		} else {
			/* no valid frequency detected */
			mainRefClkState = REFCLK_STATE_NOSYNC;
    396e:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <mainRefClkState>
			holdOffTime = holdOffTimeStart;
    3972:	84 e1       	ldi	r24, 0x14	; 20
    3974:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2818>
		}

		if (!main_bf.mainIsAFC) {
    3978:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    397c:	80 ff       	sbrs	r24, 0
    397e:	bb c0       	rjmp	.+374    	; 0x3af6 <main_fw_giveAway+0xdf4>
		}


		/* windowing and adding of the new PWM value */

		uint8_t sreg = SREG;
    3980:	8f b7       	in	r24, 0x3f	; 63
		cli();
    3982:	f8 94       	cli
		uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
    3984:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <fastPwmLoopVal>
    3988:	9a 83       	std	Y+2, r25	; 0x02
		uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
    398a:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <fastPwmSubLoopVal>
    398e:	99 83       	std	Y+1, r25	; 0x01
		SREG = sreg;
    3990:	8f bf       	out	0x3f, r24	; 63

		if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    3992:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3996:	84 30       	cpi	r24, 0x04	; 4
    3998:	c8 f4       	brcc	.+50     	; 0x39cc <main_fw_giveAway+0xcca>
			/* adjusting the PWM registers and make the new value public - only when hand-over to Phase Correction is not made */
			(void) main_fw_calcTimerAdj(pwmCorSteps, &localFastPwmLoopVal, &localFastPwmSubLoopVal);
    399a:	9e 01       	movw	r18, r28
    399c:	2f 5f       	subi	r18, 0xFF	; 255
    399e:	3f 4f       	sbci	r19, 0xFF	; 255
    39a0:	ae 01       	movw	r20, r28
    39a2:	4e 5f       	subi	r20, 0xFE	; 254
    39a4:	5f 4f       	sbci	r21, 0xFF	; 255
    39a6:	be 85       	ldd	r27, Y+14	; 0x0e
    39a8:	af 85       	ldd	r26, Y+15	; 0x0f
    39aa:	f8 89       	ldd	r31, Y+16	; 0x10
    39ac:	e9 89       	ldd	r30, Y+17	; 0x11
    39ae:	6b 2f       	mov	r22, r27
    39b0:	7a 2f       	mov	r23, r26
    39b2:	8f 2f       	mov	r24, r31
    39b4:	9e 2f       	mov	r25, r30
    39b6:	0e 94 02 0b 	call	0x1604	; 0x1604 <main_fw_calcTimerAdj>

			uint8_t sreg = SREG;
    39ba:	8f b7       	in	r24, 0x3f	; 63
			cli();
    39bc:	f8 94       	cli
			fastPwmLoopVal		= localFastPwmLoopVal;
    39be:	9a 81       	ldd	r25, Y+2	; 0x02
    39c0:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubLoopVal;
    39c4:	99 81       	ldd	r25, Y+1	; 0x01
    39c6:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <fastPwmSubLoopVal>
			SREG = sreg;
    39ca:	8f bf       	out	0x3f, r24	; 63
		}

		if (main_bf.mainIsTimerTest) {
    39cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    39d0:	82 ff       	sbrs	r24, 2
    39d2:	88 c0       	rjmp	.+272    	; 0x3ae4 <main_fw_giveAway+0xde2>
			/* monitoring */
			int len;
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA01, sizeof(PM_FORMAT_IA01));
    39d4:	2a e3       	ldi	r18, 0x3A	; 58
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	47 ed       	ldi	r20, 0xD7	; 215
    39da:	55 e0       	ldi	r21, 0x05	; 5
    39dc:	6f e8       	ldi	r22, 0x8F	; 143
    39de:	73 e0       	ldi	r23, 0x03	; 3
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    39e6:	ff 92       	push	r15
    39e8:	ef 92       	push	r14
    39ea:	df 92       	push	r13
    39ec:	cf 92       	push	r12
    39ee:	0f e8       	ldi	r16, 0x8F	; 143
    39f0:	13 e0       	ldi	r17, 0x03	; 3
    39f2:	1f 93       	push	r17
    39f4:	0f 93       	push	r16
    39f6:	0f 2e       	mov	r0, r31
    39f8:	ff e0       	ldi	r31, 0x0F	; 15
    39fa:	af 2e       	mov	r10, r31
    39fc:	f4 e0       	ldi	r31, 0x04	; 4
    39fe:	bf 2e       	mov	r11, r31
    3a00:	f0 2d       	mov	r31, r0
    3a02:	bf 92       	push	r11
    3a04:	af 92       	push	r10
    3a06:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
					int20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3a0a:	28 2f       	mov	r18, r24
    3a0c:	a5 01       	movw	r20, r10
    3a0e:	60 e0       	ldi	r22, 0x00	; 0
    3a10:	80 e0       	ldi	r24, 0x00	; 0
    3a12:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
    3a16:	28 e6       	ldi	r18, 0x68	; 104
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	4f e6       	ldi	r20, 0x6F	; 111
    3a1c:	55 e0       	ldi	r21, 0x05	; 5
    3a1e:	b8 01       	movw	r22, r16
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3a26:	9f 92       	push	r9
    3a28:	8f 92       	push	r8
    3a2a:	3f 92       	push	r3
    3a2c:	2f 92       	push	r2
    3a2e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3a30:	3f 93       	push	r19
    3a32:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a34:	8f 93       	push	r24
    3a36:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a38:	9f 93       	push	r25
    3a3a:	af 81       	ldd	r26, Y+7	; 0x07
    3a3c:	af 93       	push	r26
    3a3e:	be 81       	ldd	r27, Y+6	; 0x06
    3a40:	bf 93       	push	r27
    3a42:	ed 81       	ldd	r30, Y+5	; 0x05
    3a44:	ef 93       	push	r30
    3a46:	fc 81       	ldd	r31, Y+4	; 0x04
    3a48:	ff 93       	push	r31
    3a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    3a4c:	2f 93       	push	r18
    3a4e:	1f 93       	push	r17
    3a50:	0f 93       	push	r16
    3a52:	bf 92       	push	r11
    3a54:	af 92       	push	r10
    3a56:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
					meanFloatClockDiff,
					qrgDev_Hz,
					ppm);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3a5a:	28 2f       	mov	r18, r24
    3a5c:	a5 01       	movw	r20, r10
    3a5e:	60 e0       	ldi	r22, 0x00	; 0
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA03, sizeof(PM_FORMAT_IA03));
    3a66:	21 e4       	ldi	r18, 0x41	; 65
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	4e e2       	ldi	r20, 0x2E	; 46
    3a6c:	55 e0       	ldi	r21, 0x05	; 5
    3a6e:	b8 01       	movw	r22, r16
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3a76:	39 89       	ldd	r19, Y+17	; 0x11
    3a78:	3f 93       	push	r19
    3a7a:	88 89       	ldd	r24, Y+16	; 0x10
    3a7c:	8f 93       	push	r24
    3a7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a80:	9f 93       	push	r25
    3a82:	ae 85       	ldd	r26, Y+14	; 0x0e
    3a84:	af 93       	push	r26
}

float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    3a86:	6a 81       	ldd	r22, Y+2	; 0x02
    3a88:	70 e0       	ldi	r23, 0x00	; 0
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    3a92:	6b 01       	movw	r12, r22
    3a94:	7c 01       	movw	r14, r24
    3a96:	69 81       	ldd	r22, Y+1	; 0x01
    3a98:	70 e0       	ldi	r23, 0x00	; 0
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	40 e8       	ldi	r20, 0x80	; 128
    3aa8:	5b e3       	ldi	r21, 0x3B	; 59
    3aaa:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    3aae:	9b 01       	movw	r18, r22
    3ab0:	ac 01       	movw	r20, r24
    3ab2:	c7 01       	movw	r24, r14
    3ab4:	b6 01       	movw	r22, r12
    3ab6:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
					qrgDev_Hz,
					ppm);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA03, sizeof(PM_FORMAT_IA03));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3aba:	9f 93       	push	r25
    3abc:	8f 93       	push	r24
    3abe:	7f 93       	push	r23
    3ac0:	6f 93       	push	r22
    3ac2:	1f 93       	push	r17
    3ac4:	0f 93       	push	r16
    3ac6:	bf 92       	push	r11
    3ac8:	af 92       	push	r10
    3aca:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
					main_fw_calcTimerToFloat(localFastPwmLoopVal, localFastPwmSubLoopVal),
					pwmCorSteps);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
    3ad8:	28 2f       	mov	r18, r24
    3ada:	a5 01       	movw	r20, r10
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
	} else {
		/* frequency search and lock loop - out if sync */
		// mainRefClkState = REFCLK_STATE_NOSYNC;  // single spike should not destroy time base - deactivated
	}

	if (--holdOffTime == 255) {
    3ae4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2818>
    3ae8:	81 50       	subi	r24, 0x01	; 1
    3aea:	18 f0       	brcs	.+6      	; 0x3af2 <main_fw_giveAway+0xdf0>
    3aec:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2818>
    3af0:	02 c0       	rjmp	.+4      	; 0x3af6 <main_fw_giveAway+0xdf4>
		holdOffTime = 0;
    3af2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <holdOffTime.2818>
		/* frequency & phase correction modules */

		/* AFC = automatic frequency calculation */
		calcQrg(local20MHzClockDiff, localMeanFloatClockDiff, qrgDev_Hz, localPpm);  // corrections are done when  main_bf.mainIsAFC == true

		if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    3af6:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3afa:	84 30       	cpi	r24, 0x04	; 4
    3afc:	40 f4       	brcc	.+16     	; 0x3b0e <main_fw_giveAway+0xe0c>
			/* phase corrections are done by the AFC unit */
			mainPpm = localPpm;
    3afe:	40 92 7f 05 	sts	0x057F, r4	; 0x80057f <mainPpm>
    3b02:	50 92 80 05 	sts	0x0580, r5	; 0x800580 <mainPpm+0x1>
    3b06:	60 92 81 05 	sts	0x0581, r6	; 0x800581 <mainPpm+0x2>
    3b0a:	70 92 82 05 	sts	0x0582, r7	; 0x800582 <mainPpm+0x3>
		}

		if (main_bf.mainIsAPC) {
    3b0e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    3b12:	91 ff       	sbrs	r25, 1
    3b14:	3e c3       	rjmp	.+1660   	; 0x4192 <main_fw_giveAway+0x1490>
	/* APC = automatic phase control */

	static float phaseMeanPhaseErrorSum	= 0.0f;
	static float phaseStepsErrorSum		= 0.0f;

	uint8_t adcPhase = acAdcCh[ADC_CH_PHASE];
    3b16:	60 91 8b 03 	lds	r22, 0x038B	; 0x80038b <acAdcCh+0x2>
    3b1a:	70 91 8c 03 	lds	r23, 0x038C	; 0x80038c <acAdcCh+0x3>

	/* Handling of new mainRefClkState value */
	if (mainRefClkState >= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    3b1e:	83 30       	cpi	r24, 0x03	; 3
    3b20:	08 f4       	brcc	.+2      	; 0x3b24 <main_fw_giveAway+0xe22>
    3b22:	7f c0       	rjmp	.+254    	; 0x3c22 <main_fw_giveAway+0xf20>
		if ((ADC_PHASE_LO_LOCKING <= adcPhase) && (adcPhase <= ADC_PHASE_HI_LOCKING)) {
    3b24:	9c ee       	ldi	r25, 0xEC	; 236
    3b26:	96 0f       	add	r25, r22
    3b28:	9e 3d       	cpi	r25, 0xDE	; 222
    3b2a:	08 f0       	brcs	.+2      	; 0x3b2e <main_fw_giveAway+0xe2c>
    3b2c:	62 c0       	rjmp	.+196    	; 0x3bf2 <main_fw_giveAway+0xef0>
			if (mainRefClkState < REFCLK_STATE_LOCKING_PHASE) {
    3b2e:	87 30       	cpi	r24, 0x07	; 7
    3b30:	b8 f4       	brcc	.+46     	; 0x3b60 <main_fw_giveAway+0xe5e>
				/* up-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
    3b32:	87 e0       	ldi	r24, 0x07	; 7
    3b34:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
				phaseMeanPhaseErrorSum	= 0.0f;
    3b38:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <phaseMeanPhaseErrorSum.2842>
    3b3c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <phaseMeanPhaseErrorSum.2842+0x1>
    3b40:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <phaseMeanPhaseErrorSum.2842+0x2>
    3b44:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <phaseMeanPhaseErrorSum.2842+0x3>

				uint8_t sreg = SREG;
    3b48:	8f b7       	in	r24, 0x3f	; 63
				cli();
    3b4a:	f8 94       	cli
				fastPwmSingleDiffSum = 0.0f;
    3b4c:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <fastPwmSingleDiffSum>
    3b50:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <fastPwmSingleDiffSum+0x1>
    3b54:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <fastPwmSingleDiffSum+0x2>
    3b58:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <fastPwmSingleDiffSum+0x3>
				SREG = sreg;
    3b5c:	8f bf       	out	0x3f, r24	; 63
    3b5e:	0a c0       	rjmp	.+20     	; 0x3b74 <main_fw_giveAway+0xe72>

			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
    3b60:	88 30       	cpi	r24, 0x08	; 8
    3b62:	40 f0       	brcs	.+16     	; 0x3b74 <main_fw_giveAway+0xe72>
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
    3b64:	87 e0       	ldi	r24, 0x07	; 7
    3b66:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
			}

			if ((ADC_PHASE_LO_INSYNC <= adcPhase) && (adcPhase <= ADC_PHASE_HI_INSYNC)) {
    3b6a:	80 eb       	ldi	r24, 0xB0	; 176
    3b6c:	86 0f       	add	r24, r22
    3b6e:	84 37       	cpi	r24, 0x74	; 116
    3b70:	58 f0       	brcs	.+22     	; 0x3b88 <main_fw_giveAway+0xe86>
    3b72:	14 c3       	rjmp	.+1576   	; 0x419c <main_fw_giveAway+0x149a>
    3b74:	80 eb       	ldi	r24, 0xB0	; 176
    3b76:	86 0f       	add	r24, r22
    3b78:	84 37       	cpi	r24, 0x74	; 116
    3b7a:	08 f0       	brcs	.+2      	; 0x3b7e <main_fw_giveAway+0xe7c>
    3b7c:	52 c0       	rjmp	.+164    	; 0x3c22 <main_fw_giveAway+0xf20>
				if (mainRefClkState < REFCLK_STATE_IN_SYNC) {
    3b7e:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3b82:	8f 30       	cpi	r24, 0x0F	; 15
    3b84:	08 f0       	brcs	.+2      	; 0x3b88 <main_fw_giveAway+0xe86>
    3b86:	4d c0       	rjmp	.+154    	; 0x3c22 <main_fw_giveAway+0xf20>
					mainRefClkState = REFCLK_STATE_IN_SYNC;
    3b88:	8f e0       	ldi	r24, 0x0F	; 15
    3b8a:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
    3b8e:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
    3b90:	69 58       	subi	r22, 0x89	; 137
    3b92:	71 09       	sbc	r23, r1
    3b94:	07 2e       	mov	r0, r23
    3b96:	00 0c       	add	r0, r0
    3b98:	88 0b       	sbc	r24, r24
    3b9a:	99 0b       	sbc	r25, r25
    3b9c:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    3ba0:	26 e1       	ldi	r18, 0x16	; 22
    3ba2:	31 e5       	ldi	r19, 0x51	; 81
    3ba4:	42 e0       	ldi	r20, 0x02	; 2
    3ba6:	50 e4       	ldi	r21, 0x40	; 64
    3ba8:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    3bac:	4b 01       	movw	r8, r22
    3bae:	5c 01       	movw	r10, r24
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
		/* phase correction */
		phaseStepsPhase = (float) (pow(fabs(phaseErr) * 45.00f, 1.20f));  	// magic values  XXX PHASE: trimming is done here
    3bb0:	9f 77       	andi	r25, 0x7F	; 127
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	44 e3       	ldi	r20, 0x34	; 52
    3bb8:	52 e4       	ldi	r21, 0x42	; 66
    3bba:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    3bbe:	2a e9       	ldi	r18, 0x9A	; 154
    3bc0:	39 e9       	ldi	r19, 0x99	; 153
    3bc2:	49 e9       	ldi	r20, 0x99	; 153
    3bc4:	5f e3       	ldi	r21, 0x3F	; 63
    3bc6:	0e 94 16 32 	call	0x642c	; 0x642c <pow>
    3bca:	46 2f       	mov	r20, r22
    3bcc:	57 2f       	mov	r21, r23
    3bce:	68 2f       	mov	r22, r24
    3bd0:	79 2f       	mov	r23, r25
    3bd2:	2a 01       	movw	r4, r20
    3bd4:	3b 01       	movw	r6, r22
		if (phaseErr < 0.0f) {
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	a9 01       	movw	r20, r18
    3bdc:	c5 01       	movw	r24, r10
    3bde:	b4 01       	movw	r22, r8
    3be0:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    3be4:	88 23       	and	r24, r24
    3be6:	0c f4       	brge	.+2      	; 0x3bea <main_fw_giveAway+0xee8>
    3be8:	51 c0       	rjmp	.+162    	; 0x3c8c <main_fw_giveAway+0xf8a>
    3bea:	c1 2c       	mov	r12, r1
    3bec:	d1 2c       	mov	r13, r1
    3bee:	76 01       	movw	r14, r12
    3bf0:	a1 c0       	rjmp	.+322    	; 0x3d34 <main_fw_giveAway+0x1032>
				}
			}

		} else {
			/* lost phase: hand-over to AFC */
			if (mainRefClkState >= REFCLK_STATE_LOCKING_PHASE) {
    3bf2:	87 30       	cpi	r24, 0x07	; 7
    3bf4:	b0 f0       	brcs	.+44     	; 0x3c22 <main_fw_giveAway+0xf20>
				mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <mainRefClkState>
				phaseMeanPhaseErrorSum	= 0.0f;
    3bfc:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <phaseMeanPhaseErrorSum.2842>
    3c00:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <phaseMeanPhaseErrorSum.2842+0x1>
    3c04:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <phaseMeanPhaseErrorSum.2842+0x2>
    3c08:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <phaseMeanPhaseErrorSum.2842+0x3>

				uint8_t sreg = SREG;
    3c0c:	8f b7       	in	r24, 0x3f	; 63
				cli();
    3c0e:	f8 94       	cli
				fastPwmSingleDiffSum = 0.0f;
    3c10:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <fastPwmSingleDiffSum>
    3c14:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <fastPwmSingleDiffSum+0x1>
    3c18:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <fastPwmSingleDiffSum+0x2>
    3c1c:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <fastPwmSingleDiffSum+0x3>
				SREG = sreg;
    3c20:	8f bf       	out	0x3f, r24	; 63
    3c22:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
    3c24:	69 58       	subi	r22, 0x89	; 137
    3c26:	71 09       	sbc	r23, r1
    3c28:	07 2e       	mov	r0, r23
    3c2a:	00 0c       	add	r0, r0
    3c2c:	88 0b       	sbc	r24, r24
    3c2e:	99 0b       	sbc	r25, r25
    3c30:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    3c34:	26 e1       	ldi	r18, 0x16	; 22
    3c36:	31 e5       	ldi	r19, 0x51	; 81
    3c38:	42 e0       	ldi	r20, 0x02	; 2
    3c3a:	50 e4       	ldi	r21, 0x40	; 64
    3c3c:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    3c40:	4b 01       	movw	r8, r22
    3c42:	5c 01       	movw	r10, r24
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
    3c44:	10 91 9f 05 	lds	r17, 0x059F	; 0x80059f <mainRefClkState>
    3c48:	17 30       	cpi	r17, 0x07	; 7
    3c4a:	08 f4       	brcc	.+2      	; 0x3c4e <main_fw_giveAway+0xf4c>
    3c4c:	26 c1       	rjmp	.+588    	; 0x3e9a <main_fw_giveAway+0x1198>
		/* phase correction */
		phaseStepsPhase = (float) (pow(fabs(phaseErr) * 45.00f, 1.20f));  	// magic values  XXX PHASE: trimming is done here
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	44 e3       	ldi	r20, 0x34	; 52
    3c54:	52 e4       	ldi	r21, 0x42	; 66
    3c56:	c5 01       	movw	r24, r10
    3c58:	b4 01       	movw	r22, r8
    3c5a:	9f 77       	andi	r25, 0x7F	; 127
    3c5c:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    3c60:	2a e9       	ldi	r18, 0x9A	; 154
    3c62:	39 e9       	ldi	r19, 0x99	; 153
    3c64:	49 e9       	ldi	r20, 0x99	; 153
    3c66:	5f e3       	ldi	r21, 0x3F	; 63
    3c68:	0e 94 16 32 	call	0x642c	; 0x642c <pow>
    3c6c:	46 2f       	mov	r20, r22
    3c6e:	57 2f       	mov	r21, r23
    3c70:	68 2f       	mov	r22, r24
    3c72:	79 2f       	mov	r23, r25
    3c74:	2a 01       	movw	r4, r20
    3c76:	3b 01       	movw	r6, r22
		if (phaseErr < 0.0f) {
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	a9 01       	movw	r20, r18
    3c7e:	c5 01       	movw	r24, r10
    3c80:	b4 01       	movw	r22, r8
    3c82:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    3c86:	88 23       	and	r24, r24
    3c88:	34 f4       	brge	.+12     	; 0x3c96 <main_fw_giveAway+0xf94>
    3c8a:	01 c0       	rjmp	.+2      	; 0x3c8e <main_fw_giveAway+0xf8c>
	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
    3c8c:	1f e0       	ldi	r17, 0x0F	; 15
		/* phase correction */
		phaseStepsPhase = (float) (pow(fabs(phaseErr) * 45.00f, 1.20f));  	// magic values  XXX PHASE: trimming is done here
		if (phaseErr < 0.0f) {
			phaseStepsPhase = -phaseStepsPhase;
    3c8e:	77 fa       	bst	r7, 7
    3c90:	70 94       	com	r7
    3c92:	77 f8       	bld	r7, 7
    3c94:	70 94       	com	r7
		}

		if (mainRefClkState < REFCLK_STATE_IN_SYNC) {
    3c96:	1f 30       	cpi	r17, 0x0F	; 15
    3c98:	08 f0       	brcs	.+2      	; 0x3c9c <main_fw_giveAway+0xf9a>
    3c9a:	45 c0       	rjmp	.+138    	; 0x3d26 <main_fw_giveAway+0x1024>
			/* Hard phase banging to keep in sync - should be avoided due to high phase noise */
			if (phaseStepsPhase) {
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	a9 01       	movw	r20, r18
    3ca2:	c3 01       	movw	r24, r6
    3ca4:	b2 01       	movw	r22, r4
    3ca6:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    3caa:	88 23       	and	r24, r24
    3cac:	09 f4       	brne	.+2      	; 0x3cb0 <main_fw_giveAway+0xfae>
    3cae:	3f c0       	rjmp	.+126    	; 0x3d2e <main_fw_giveAway+0x102c>
				uint8_t sreg = SREG;
    3cb0:	1f b7       	in	r17, 0x3f	; 63
				cli();
    3cb2:	f8 94       	cli
				fastPwmSingleDiffSum += phaseStepsPhase;						// PHASE OFFFSET accumulator
    3cb4:	a3 01       	movw	r20, r6
    3cb6:	92 01       	movw	r18, r4
    3cb8:	60 91 2c 05 	lds	r22, 0x052C	; 0x80052c <fastPwmSingleDiffSum>
    3cbc:	70 91 2d 05 	lds	r23, 0x052D	; 0x80052d <fastPwmSingleDiffSum+0x1>
    3cc0:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <fastPwmSingleDiffSum+0x2>
    3cc4:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <fastPwmSingleDiffSum+0x3>
    3cc8:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    3ccc:	60 93 2c 05 	sts	0x052C, r22	; 0x80052c <fastPwmSingleDiffSum>
    3cd0:	70 93 2d 05 	sts	0x052D, r23	; 0x80052d <fastPwmSingleDiffSum+0x1>
    3cd4:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <fastPwmSingleDiffSum+0x2>
    3cd8:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <fastPwmSingleDiffSum+0x3>
				SREG = sreg;
    3cdc:	1f bf       	out	0x3f, r17	; 63

				/* Calculate and execute phase correction */
				calcPhaseResidue();												// first call - to be called many times during the whole second until next pulse comes
    3cde:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <calcPhaseResidue>

				/* One time frequency correction */
				phaseStepsFrequency += phaseMeanPhaseErrorSum * 0.00000150f;	// magic value  XXX ONE TIME FREQUENCY trimming is done here
    3ce2:	2c e9       	ldi	r18, 0x9C	; 156
    3ce4:	33 e5       	ldi	r19, 0x53	; 83
    3ce6:	49 ec       	ldi	r20, 0xC9	; 201
    3ce8:	55 e3       	ldi	r21, 0x35	; 53
    3cea:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <phaseMeanPhaseErrorSum.2842>
    3cee:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <phaseMeanPhaseErrorSum.2842+0x1>
    3cf2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <phaseMeanPhaseErrorSum.2842+0x2>
    3cf6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <phaseMeanPhaseErrorSum.2842+0x3>
    3cfa:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	a9 01       	movw	r20, r18
    3d04:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    3d08:	6b 01       	movw	r12, r22
    3d0a:	7c 01       	movw	r14, r24
				phaseMeanPhaseErrorSum = 0.0f;									// reset frequency offset register to avoid lagging behavior
    3d0c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <phaseMeanPhaseErrorSum.2842>
    3d10:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <phaseMeanPhaseErrorSum.2842+0x1>
    3d14:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <phaseMeanPhaseErrorSum.2842+0x2>
    3d18:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <phaseMeanPhaseErrorSum.2842+0x3>
			}
		}
	}

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
    3d1c:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <mainRefClkState>
    3d20:	87 30       	cpi	r24, 0x07	; 7
    3d22:	40 f4       	brcc	.+16     	; 0x3d34 <main_fw_giveAway+0x1032>
    3d24:	bf c0       	rjmp	.+382    	; 0x3ea4 <main_fw_giveAway+0x11a2>
		phaseStepsPhase = (float) (pow(fabs(phaseErr) * 45.00f, 1.20f));  	// magic values  XXX PHASE: trimming is done here
		if (phaseErr < 0.0f) {
			phaseStepsPhase = -phaseStepsPhase;
		}

		if (mainRefClkState < REFCLK_STATE_IN_SYNC) {
    3d26:	c1 2c       	mov	r12, r1
    3d28:	d1 2c       	mov	r13, r1
    3d2a:	76 01       	movw	r14, r12
    3d2c:	03 c0       	rjmp	.+6      	; 0x3d34 <main_fw_giveAway+0x1032>
			/* Hard phase banging to keep in sync - should be avoided due to high phase noise */
			if (phaseStepsPhase) {
    3d2e:	c1 2c       	mov	r12, r1
    3d30:	d1 2c       	mov	r13, r1
    3d32:	76 01       	movw	r14, r12
		}
	}

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
		static float lastPhaseStepsPhase = 0.0f;
		float diffPhaseStepsPhase = phaseStepsPhase - lastPhaseStepsPhase;
    3d34:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <lastPhaseStepsPhase.2852>
    3d38:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <lastPhaseStepsPhase.2852+0x1>
    3d3c:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <lastPhaseStepsPhase.2852+0x2>
    3d40:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <lastPhaseStepsPhase.2852+0x3>
    3d44:	c3 01       	movw	r24, r6
    3d46:	b2 01       	movw	r22, r4
    3d48:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    3d4c:	6b 83       	std	Y+3, r22	; 0x03
    3d4e:	7c 83       	std	Y+4, r23	; 0x04
    3d50:	8d 83       	std	Y+5, r24	; 0x05
    3d52:	9e 83       	std	Y+6, r25	; 0x06
		uint8_t isAfterSignRev = false;

		/* Find out direction to or from optimum point */
		if (((phaseStepsPhase > 0) && (diffPhaseStepsPhase > 0)) ||
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	a9 01       	movw	r20, r18
    3d5a:	c3 01       	movw	r24, r6
    3d5c:	b2 01       	movw	r22, r4
    3d5e:	0e 94 a4 31 	call	0x6348	; 0x6348 <__gesf2>
    3d62:	18 16       	cp	r1, r24
    3d64:	64 f4       	brge	.+24     	; 0x3d7e <main_fw_giveAway+0x107c>
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	a9 01       	movw	r20, r18
    3d6c:	6b 81       	ldd	r22, Y+3	; 0x03
    3d6e:	7c 81       	ldd	r23, Y+4	; 0x04
    3d70:	8d 81       	ldd	r24, Y+5	; 0x05
    3d72:	9e 81       	ldd	r25, Y+6	; 0x06
    3d74:	0e 94 a4 31 	call	0x6348	; 0x6348 <__gesf2>
    3d78:	18 16       	cp	r1, r24
    3d7a:	0c f4       	brge	.+2      	; 0x3d7e <main_fw_giveAway+0x107c>
    3d7c:	f3 c1       	rjmp	.+998    	; 0x4164 <main_fw_giveAway+0x1462>
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	a9 01       	movw	r20, r18
    3d84:	c3 01       	movw	r24, r6
    3d86:	b2 01       	movw	r22, r4
    3d88:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    3d8c:	88 23       	and	r24, r24
    3d8e:	0c f0       	brlt	.+2      	; 0x3d92 <main_fw_giveAway+0x1090>
    3d90:	dc c1       	rjmp	.+952    	; 0x414a <main_fw_giveAway+0x1448>
		    ((phaseStepsPhase < 0) && (diffPhaseStepsPhase < 0))) {
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	a9 01       	movw	r20, r18
    3d98:	6b 81       	ldd	r22, Y+3	; 0x03
    3d9a:	7c 81       	ldd	r23, Y+4	; 0x04
    3d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3da0:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    3da4:	88 23       	and	r24, r24
    3da6:	0c f0       	brlt	.+2      	; 0x3daa <main_fw_giveAway+0x10a8>
    3da8:	d0 c1       	rjmp	.+928    	; 0x414a <main_fw_giveAway+0x1448>
    3daa:	dc c1       	rjmp	.+952    	; 0x4164 <main_fw_giveAway+0x1462>
			isAfterSignRev = true;
		}
		lastPhaseStepsPhase = phaseStepsPhase;

		/* frequency drift correction */
		phaseStepsFrequency += phaseStepsPhase * (isAfterSignRev ?  0.00001500f
    3dac:	c3 01       	movw	r24, r6
    3dae:	b2 01       	movw	r22, r4
    3db0:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    3db4:	9b 01       	movw	r18, r22
    3db6:	ac 01       	movw	r20, r24
    3db8:	c7 01       	movw	r24, r14
    3dba:	b6 01       	movw	r22, r12
    3dbc:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    3dc0:	6b 01       	movw	r12, r22
    3dc2:	7c 01       	movw	r14, r24
																 :  0.00000200f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here

		/* mainPpm calculations */
		float phaseStepsErrorDiff = phaseStepsErrorSum / MEAN_PHASE_PPM_STAGES_F;
    3dc4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
    3dc8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
    3dcc:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <__data_end+0x2>
    3dd0:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <__data_end+0x3>
    3dd4:	8b 83       	std	Y+3, r24	; 0x03
    3dd6:	9c 83       	std	Y+4, r25	; 0x04
    3dd8:	ad 83       	std	Y+5, r26	; 0x05
    3dda:	be 83       	std	Y+6, r27	; 0x06
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	40 ee       	ldi	r20, 0xE0	; 224
    3de2:	50 e4       	ldi	r21, 0x40	; 64
    3de4:	bc 01       	movw	r22, r24
    3de6:	cd 01       	movw	r24, r26
    3de8:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <__divsf3>
    3dec:	6f 83       	std	Y+7, r22	; 0x07
    3dee:	78 87       	std	Y+8, r23	; 0x08
    3df0:	89 87       	std	Y+9, r24	; 0x09
    3df2:	9a 87       	std	Y+10, r25	; 0x0a
		mainPpm = mainCoef_b02_qrg_k_pPwmStep_25C_ppm * phaseStepsErrorDiff;
    3df4:	20 91 a8 05 	lds	r18, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    3df8:	30 91 a9 05 	lds	r19, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    3dfc:	40 91 aa 05 	lds	r20, 0x05AA	; 0x8005aa <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    3e00:	50 91 ab 05 	lds	r21, 0x05AB	; 0x8005ab <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    3e04:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    3e08:	60 93 7f 05 	sts	0x057F, r22	; 0x80057f <mainPpm>
    3e0c:	70 93 80 05 	sts	0x0580, r23	; 0x800580 <mainPpm+0x1>
    3e10:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <mainPpm+0x2>
    3e14:	90 93 82 05 	sts	0x0582, r25	; 0x800582 <mainPpm+0x3>
		if (phaseStepsFrequency >= 0.0f) {
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	a9 01       	movw	r20, r18
    3e1e:	c7 01       	movw	r24, r14
    3e20:	b6 01       	movw	r22, r12
    3e22:	0e 94 a4 31 	call	0x6348	; 0x6348 <__gesf2>
    3e26:	88 23       	and	r24, r24
    3e28:	cc f0       	brlt	.+50     	; 0x3e5c <main_fw_giveAway+0x115a>
			phaseStepsErrorSum += (phaseStepsFrequency - phaseStepsErrorDiff);
    3e2a:	2f 81       	ldd	r18, Y+7	; 0x07
    3e2c:	38 85       	ldd	r19, Y+8	; 0x08
    3e2e:	49 85       	ldd	r20, Y+9	; 0x09
    3e30:	5a 85       	ldd	r21, Y+10	; 0x0a
    3e32:	c7 01       	movw	r24, r14
    3e34:	b6 01       	movw	r22, r12
    3e36:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    3e3a:	9b 01       	movw	r18, r22
    3e3c:	ac 01       	movw	r20, r24
    3e3e:	6b 81       	ldd	r22, Y+3	; 0x03
    3e40:	7c 81       	ldd	r23, Y+4	; 0x04
    3e42:	8d 81       	ldd	r24, Y+5	; 0x05
    3e44:	9e 81       	ldd	r25, Y+6	; 0x06
    3e46:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    3e4a:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <__data_end>
    3e4e:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <__data_end+0x1>
    3e52:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x2>
    3e56:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x3>
    3e5a:	19 c0       	rjmp	.+50     	; 0x3e8e <main_fw_giveAway+0x118c>
		} else {
			phaseStepsErrorSum += (-phaseStepsFrequency - phaseStepsErrorDiff);
    3e5c:	2f 81       	ldd	r18, Y+7	; 0x07
    3e5e:	38 85       	ldd	r19, Y+8	; 0x08
    3e60:	49 85       	ldd	r20, Y+9	; 0x09
    3e62:	5a 85       	ldd	r21, Y+10	; 0x0a
    3e64:	c7 01       	movw	r24, r14
    3e66:	b6 01       	movw	r22, r12
    3e68:	90 58       	subi	r25, 0x80	; 128
    3e6a:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__subsf3>
    3e6e:	9b 01       	movw	r18, r22
    3e70:	ac 01       	movw	r20, r24
    3e72:	6b 81       	ldd	r22, Y+3	; 0x03
    3e74:	7c 81       	ldd	r23, Y+4	; 0x04
    3e76:	8d 81       	ldd	r24, Y+5	; 0x05
    3e78:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7a:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    3e7e:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <__data_end>
    3e82:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <__data_end+0x1>
    3e86:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x2>
    3e8a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x3>
		}

		/* Execute frequency correction */
		(void) pwmTimerCorrection(phaseStepsFrequency, false);
    3e8e:	40 e0       	ldi	r20, 0x00	; 0
    3e90:	c7 01       	movw	r24, r14
    3e92:	b6 01       	movw	r22, r12
    3e94:	0e 94 a8 0b 	call	0x1750	; 0x1750 <pwmTimerCorrection>
    3e98:	05 c0       	rjmp	.+10     	; 0x3ea4 <main_fw_giveAway+0x11a2>
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;
    3e9a:	41 2c       	mov	r4, r1
    3e9c:	51 2c       	mov	r5, r1
    3e9e:	32 01       	movw	r6, r4
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
	float phaseStepsFrequency	= 0.0f;
    3ea0:	73 01       	movw	r14, r6
    3ea2:	62 01       	movw	r12, r4

		/* Execute frequency correction */
		(void) pwmTimerCorrection(phaseStepsFrequency, false);
	}

	if (main_bf.mainIsTimerTest) {
    3ea4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3ea8:	82 ff       	sbrs	r24, 2
    3eaa:	73 c1       	rjmp	.+742    	; 0x4192 <main_fw_giveAway+0x1490>
		/* monitoring */
		int len;
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA11, sizeof(PM_FORMAT_IA11));
    3eac:	20 e6       	ldi	r18, 0x60	; 96
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	4e ec       	ldi	r20, 0xCE	; 206
    3eb2:	54 e0       	ldi	r21, 0x04	; 4
    3eb4:	6f e8       	ldi	r22, 0x8F	; 143
    3eb6:	73 e0       	ldi	r23, 0x03	; 3
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3ebe:	7f 92       	push	r7
    3ec0:	6f 92       	push	r6
    3ec2:	5f 92       	push	r5
    3ec4:	4f 92       	push	r4
    3ec6:	ff 92       	push	r15
    3ec8:	ef 92       	push	r14
    3eca:	df 92       	push	r13
    3ecc:	cf 92       	push	r12
    3ece:	bf 92       	push	r11
    3ed0:	af 92       	push	r10
    3ed2:	9f 92       	push	r9
    3ed4:	8f 92       	push	r8
    3ed6:	0f 2e       	mov	r0, r31
    3ed8:	ff e8       	ldi	r31, 0x8F	; 143
    3eda:	ef 2e       	mov	r14, r31
    3edc:	f3 e0       	ldi	r31, 0x03	; 3
    3ede:	ff 2e       	mov	r15, r31
    3ee0:	f0 2d       	mov	r31, r0
    3ee2:	ff 92       	push	r15
    3ee4:	ef 92       	push	r14
    3ee6:	0f e0       	ldi	r16, 0x0F	; 15
    3ee8:	14 e0       	ldi	r17, 0x04	; 4
    3eea:	1f 93       	push	r17
    3eec:	0f 93       	push	r16
    3eee:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				phaseErr,
				phaseStepsFrequency,
				phaseStepsPhase);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3ef2:	28 2f       	mov	r18, r24
    3ef4:	a8 01       	movw	r20, r16
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	80 e0       	ldi	r24, 0x00	; 0
    3efa:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA12, sizeof(PM_FORMAT_IA12));
    3efe:	20 e3       	ldi	r18, 0x30	; 48
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	4e e9       	ldi	r20, 0x9E	; 158
    3f04:	54 e0       	ldi	r21, 0x04	; 4
    3f06:	b7 01       	movw	r22, r14
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3f0e:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <fastPwmSingleDiffSum+0x3>
    3f12:	8f 93       	push	r24
    3f14:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <fastPwmSingleDiffSum+0x2>
    3f18:	8f 93       	push	r24
    3f1a:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <fastPwmSingleDiffSum+0x1>
    3f1e:	8f 93       	push	r24
    3f20:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <fastPwmSingleDiffSum>
    3f24:	8f 93       	push	r24
    3f26:	ff 92       	push	r15
    3f28:	ef 92       	push	r14
    3f2a:	1f 93       	push	r17
    3f2c:	0f 93       	push	r16
    3f2e:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				fastPwmSingleDiffSum);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3f32:	28 2f       	mov	r18, r24
    3f34:	a8 01       	movw	r20, r16
    3f36:	60 e0       	ldi	r22, 0x00	; 0
    3f38:	80 e0       	ldi	r24, 0x00	; 0
    3f3a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
    3f3e:	0f b6       	in	r0, 0x3f	; 63
    3f40:	f8 94       	cli
    3f42:	de bf       	out	0x3e, r29	; 62
    3f44:	0f be       	out	0x3f, r0	; 63
    3f46:	cd bf       	out	0x3d, r28	; 61
    3f48:	24 c1       	rjmp	.+584    	; 0x4192 <main_fw_giveAway+0x1490>

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
			if (stackCheckMungWall[idx] != 0x5a) {
    3f4a:	21 91       	ld	r18, Z+
    3f4c:	2a 35       	cpi	r18, 0x5A	; 90
    3f4e:	89 f0       	breq	.+34     	; 0x3f72 <main_fw_giveAway+0x1270>
    3f50:	02 c0       	rjmp	.+4      	; 0x3f56 <main_fw_giveAway+0x1254>
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t localCheckAddr = (uint16_t) (&(stackCheckMungWall[idx]));
    3f56:	84 52       	subi	r24, 0x24	; 36
    3f58:	9a 4f       	sbci	r25, 0xFA	; 250
				if (mainSCMungwallAddr > localCheckAddr) {
    3f5a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <mainSCMungwallAddr>
    3f5e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <mainSCMungwallAddr+0x1>
    3f62:	82 17       	cp	r24, r18
    3f64:	93 07       	cpc	r25, r19
    3f66:	50 f4       	brcc	.+20     	; 0x3f7c <main_fw_giveAway+0x127a>
					mainSCMungwallAddr = localCheckAddr;
    3f68:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <mainSCMungwallAddr+0x1>
    3f6c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mainSCMungwallAddr>
    3f70:	05 c0       	rjmp	.+10     	; 0x3f7c <main_fw_giveAway+0x127a>
	}

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
    3f72:	01 96       	adiw	r24, 0x01	; 1
    3f74:	80 32       	cpi	r24, 0x20	; 32
    3f76:	b2 e0       	ldi	r27, 0x02	; 2
    3f78:	9b 07       	cpc	r25, r27
    3f7a:	39 f7       	brne	.-50     	; 0x3f4a <main_fw_giveAway+0x1248>
				/* leave loop body */
				break;
			}
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC01, sizeof(PM_FORMAT_SC01));
    3f7c:	25 e4       	ldi	r18, 0x45	; 69
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	48 eb       	ldi	r20, 0xB8	; 184
    3f82:	53 e0       	ldi	r21, 0x03	; 3
    3f84:	6f e8       	ldi	r22, 0x8F	; 143
    3f86:	73 e0       	ldi	r23, 0x03	; 3
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3f8e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mainSCStackAddr+0x1>
    3f92:	8f 93       	push	r24
    3f94:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mainSCStackAddr>
    3f98:	8f 93       	push	r24
    3f9a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <mainSCMungwallAddr+0x1>
    3f9e:	8f 93       	push	r24
    3fa0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mainSCMungwallAddr>
    3fa4:	8f 93       	push	r24
    3fa6:	0f 2e       	mov	r0, r31
    3fa8:	ff e8       	ldi	r31, 0x8F	; 143
    3faa:	ef 2e       	mov	r14, r31
    3fac:	f3 e0       	ldi	r31, 0x03	; 3
    3fae:	ff 2e       	mov	r15, r31
    3fb0:	f0 2d       	mov	r31, r0
    3fb2:	ff 92       	push	r15
    3fb4:	ef 92       	push	r14
    3fb6:	0f e0       	ldi	r16, 0x0F	; 15
    3fb8:	14 e0       	ldi	r17, 0x04	; 4
    3fba:	1f 93       	push	r17
    3fbc:	0f 93       	push	r16
    3fbe:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				mainSCMungwallAddr,
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3fc2:	28 2f       	mov	r18, r24
    3fc4:	a8 01       	movw	r20, r16
    3fc6:	60 e0       	ldi	r22, 0x00	; 0
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
    3fce:	2d e1       	ldi	r18, 0x1D	; 29
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	4b e9       	ldi	r20, 0x9B	; 155
    3fd4:	53 e0       	ldi	r21, 0x03	; 3
    3fd6:	b7 01       	movw	r22, r14
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
				twiState.isProcessing);
    3fde:	e0 e4       	ldi	r30, 0x40	; 64
    3fe0:	f1 e0       	ldi	r31, 0x01	; 1
    3fe2:	90 81       	ld	r25, Z
    3fe4:	96 95       	lsr	r25
    3fe6:	91 70       	andi	r25, 0x01	; 1
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
    3fe8:	80 81       	ld	r24, Z
    3fea:	81 70       	andi	r24, 0x01	; 1
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
    3fec:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <twiState>
				mainSCMungwallAddr,
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3ff0:	1f 92       	push	r1
    3ff2:	9f 93       	push	r25
    3ff4:	1f 92       	push	r1
    3ff6:	8f 93       	push	r24
    3ff8:	1f 92       	push	r1
    3ffa:	2f 93       	push	r18
    3ffc:	ff 92       	push	r15
    3ffe:	ef 92       	push	r14
    4000:	1f 93       	push	r17
    4002:	0f 93       	push	r16
    4004:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				twiState.state,
				twiState.doStart,
				twiState.isProcessing);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    4008:	28 2f       	mov	r18, r24
    400a:	a8 01       	movw	r20, r16
    400c:	60 e0       	ldi	r22, 0x00	; 0
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>
    4014:	0f b6       	in	r0, 0x3f	; 63
    4016:	f8 94       	cli
    4018:	de bf       	out	0x3e, r29	; 62
    401a:	0f be       	out	0x3f, r0	; 63
    401c:	cd bf       	out	0x3d, r28	; 61
	}

	/* Show status at connected LCD devices */
	twi_mcp23017_av1624_fw_showStatus();
    401e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <twi_mcp23017_av1624_fw_showStatus>
	twi_smart_lcd_fw_showStatus();
    4022:	0e 94 87 14 	call	0x290e	; 0x290e <twi_smart_lcd_fw_showStatus>

	if (mainPwmTerminalAdj) {
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	a9 01       	movw	r20, r18
    402c:	60 91 9b 05 	lds	r22, 0x059B	; 0x80059b <mainPwmTerminalAdj>
    4030:	70 91 9c 05 	lds	r23, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x1>
    4034:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainPwmTerminalAdj+0x2>
    4038:	90 91 9e 05 	lds	r25, 0x059E	; 0x80059e <mainPwmTerminalAdj+0x3>
    403c:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__cmpsf2>
    4040:	88 23       	and	r24, r24
    4042:	09 f4       	brne	.+2      	; 0x4046 <main_fw_giveAway+0x1344>
    4044:	bf c0       	rjmp	.+382    	; 0x41c4 <main_fw_giveAway+0x14c2>
		uint8_t localFastPwmSubLoopValNext;
		uint8_t localFastPwmLoopValNext;

		{
			/* correct PWM with  +/- <value> */
			uint8_t sreg = SREG;
    4046:	ff b6       	in	r15, 0x3f	; 63
			cli();
    4048:	f8 94       	cli
			localFastPwmLoopValBefore		= fastPwmLoopVal;
    404a:	10 91 36 05 	lds	r17, 0x0536	; 0x800536 <fastPwmLoopVal>
			localFastPwmSubLoopValBefore	= fastPwmSubLoopVal;
    404e:	00 91 35 05 	lds	r16, 0x0535	; 0x800535 <fastPwmSubLoopVal>
			SREG = sreg;
    4052:	ff be       	out	0x3f, r15	; 63

			/* calculate next value */
			localFastPwmLoopValNext		= localFastPwmLoopValBefore;
    4054:	19 83       	std	Y+1, r17	; 0x01
			localFastPwmSubLoopValNext	= localFastPwmSubLoopValBefore;
    4056:	0a 83       	std	Y+2, r16	; 0x02
			(void) main_fw_calcTimerAdj(mainPwmTerminalAdj, &localFastPwmLoopValNext, &localFastPwmSubLoopValNext);
    4058:	60 91 9b 05 	lds	r22, 0x059B	; 0x80059b <mainPwmTerminalAdj>
    405c:	70 91 9c 05 	lds	r23, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x1>
    4060:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainPwmTerminalAdj+0x2>
    4064:	90 91 9e 05 	lds	r25, 0x059E	; 0x80059e <mainPwmTerminalAdj+0x3>
    4068:	9e 01       	movw	r18, r28
    406a:	2e 5f       	subi	r18, 0xFE	; 254
    406c:	3f 4f       	sbci	r19, 0xFF	; 255
    406e:	ae 01       	movw	r20, r28
    4070:	4f 5f       	subi	r20, 0xFF	; 255
    4072:	5f 4f       	sbci	r21, 0xFF	; 255
    4074:	0e 94 02 0b 	call	0x1604	; 0x1604 <main_fw_calcTimerAdj>

			/* write back the global variables for PWM and sub-PWM */
			cli();
    4078:	f8 94       	cli
			fastPwmLoopVal		= localFastPwmLoopValNext;
    407a:	89 81       	ldd	r24, Y+1	; 0x01
    407c:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubLoopValNext;
    4080:	8a 81       	ldd	r24, Y+2	; 0x02
    4082:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <fastPwmSubLoopVal>
			SREG = sreg;
    4086:	ff be       	out	0x3f, r15	; 63
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_ID01, sizeof(PM_FORMAT_ID01));
    4088:	26 e6       	ldi	r18, 0x66	; 102
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	47 e7       	ldi	r20, 0x77	; 119
    408e:	56 e0       	ldi	r21, 0x06	; 6
    4090:	6f e8       	ldi	r22, 0x8F	; 143
    4092:	73 e0       	ldi	r23, 0x03	; 3
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		uint8_t len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    409a:	1f 92       	push	r1
    409c:	0f 93       	push	r16
    409e:	1f 92       	push	r1
    40a0:	1f 93       	push	r17
    40a2:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <mainPwmTerminalAdj+0x3>
    40a6:	8f 93       	push	r24
    40a8:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainPwmTerminalAdj+0x2>
    40ac:	8f 93       	push	r24
    40ae:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x1>
    40b2:	8f 93       	push	r24
    40b4:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <mainPwmTerminalAdj>
    40b8:	8f 93       	push	r24
    40ba:	0f 2e       	mov	r0, r31
    40bc:	ff e8       	ldi	r31, 0x8F	; 143
    40be:	ef 2e       	mov	r14, r31
    40c0:	f3 e0       	ldi	r31, 0x03	; 3
    40c2:	ff 2e       	mov	r15, r31
    40c4:	f0 2d       	mov	r31, r0
    40c6:	ff 92       	push	r15
    40c8:	ef 92       	push	r14
    40ca:	0f e0       	ldi	r16, 0x0F	; 15
    40cc:	14 e0       	ldi	r17, 0x04	; 4
    40ce:	1f 93       	push	r17
    40d0:	0f 93       	push	r16
    40d2:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				mainPwmTerminalAdj,
				localFastPwmLoopValBefore,
				localFastPwmSubLoopValBefore);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    40d6:	28 2f       	mov	r18, r24
    40d8:	a8 01       	movw	r20, r16
    40da:	60 e0       	ldi	r22, 0x00	; 0
    40dc:	80 e0       	ldi	r24, 0x00	; 0
    40de:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_ID02, sizeof(PM_FORMAT_ID02));
    40e2:	26 e6       	ldi	r18, 0x66	; 102
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	41 e1       	ldi	r20, 0x11	; 17
    40e8:	56 e0       	ldi	r21, 0x06	; 6
    40ea:	b7 01       	movw	r22, r14
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    40f2:	8a 81       	ldd	r24, Y+2	; 0x02
    40f4:	1f 92       	push	r1
    40f6:	8f 93       	push	r24
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	1f 92       	push	r1
    40fc:	8f 93       	push	r24
    40fe:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <mainPwmTerminalAdj+0x3>
    4102:	8f 93       	push	r24
    4104:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainPwmTerminalAdj+0x2>
    4108:	8f 93       	push	r24
    410a:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x1>
    410e:	8f 93       	push	r24
    4110:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <mainPwmTerminalAdj>
    4114:	8f 93       	push	r24
    4116:	ff 92       	push	r15
    4118:	ef 92       	push	r14
    411a:	1f 93       	push	r17
    411c:	0f 93       	push	r16
    411e:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <sprintf>
				mainPwmTerminalAdj,
				localFastPwmLoopValNext,
				localFastPwmSubLoopValNext);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    4122:	28 2f       	mov	r18, r24
    4124:	a8 01       	movw	r20, r16
    4126:	60 e0       	ldi	r22, 0x00	; 0
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		// reset data entry
		mainPwmTerminalAdj = 0.0f;
    412e:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <mainPwmTerminalAdj>
    4132:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <mainPwmTerminalAdj+0x1>
    4136:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <mainPwmTerminalAdj+0x2>
    413a:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <mainPwmTerminalAdj+0x3>
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	3d c0       	rjmp	.+122    	; 0x41c4 <main_fw_giveAway+0x14c2>
		/* Find out direction to or from optimum point */
		if (((phaseStepsPhase > 0) && (diffPhaseStepsPhase > 0)) ||
		    ((phaseStepsPhase < 0) && (diffPhaseStepsPhase < 0))) {
			isAfterSignRev = true;
		}
		lastPhaseStepsPhase = phaseStepsPhase;
    414a:	40 92 1a 01 	sts	0x011A, r4	; 0x80011a <lastPhaseStepsPhase.2852>
    414e:	50 92 1b 01 	sts	0x011B, r5	; 0x80011b <lastPhaseStepsPhase.2852+0x1>
    4152:	60 92 1c 01 	sts	0x011C, r6	; 0x80011c <lastPhaseStepsPhase.2852+0x2>
    4156:	70 92 1d 01 	sts	0x011D, r7	; 0x80011d <lastPhaseStepsPhase.2852+0x3>

		/* frequency drift correction */
		phaseStepsFrequency += phaseStepsPhase * (isAfterSignRev ?  0.00001500f
																 :  0.00000200f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here
    415a:	2d eb       	ldi	r18, 0xBD	; 189
    415c:	37 e3       	ldi	r19, 0x37	; 55
    415e:	46 e0       	ldi	r20, 0x06	; 6
    4160:	56 e3       	ldi	r21, 0x36	; 54
    4162:	24 ce       	rjmp	.-952    	; 0x3dac <main_fw_giveAway+0x10aa>
		/* Find out direction to or from optimum point */
		if (((phaseStepsPhase > 0) && (diffPhaseStepsPhase > 0)) ||
		    ((phaseStepsPhase < 0) && (diffPhaseStepsPhase < 0))) {
			isAfterSignRev = true;
		}
		lastPhaseStepsPhase = phaseStepsPhase;
    4164:	40 92 1a 01 	sts	0x011A, r4	; 0x80011a <lastPhaseStepsPhase.2852>
    4168:	50 92 1b 01 	sts	0x011B, r5	; 0x80011b <lastPhaseStepsPhase.2852+0x1>
    416c:	60 92 1c 01 	sts	0x011C, r6	; 0x80011c <lastPhaseStepsPhase.2852+0x2>
    4170:	70 92 1d 01 	sts	0x011D, r7	; 0x80011d <lastPhaseStepsPhase.2852+0x3>

		/* frequency drift correction */
		phaseStepsFrequency += phaseStepsPhase * (isAfterSignRev ?  0.00001500f
																 :  0.00000200f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here
    4174:	22 e8       	ldi	r18, 0x82	; 130
    4176:	38 ea       	ldi	r19, 0xA8	; 168
    4178:	4b e7       	ldi	r20, 0x7B	; 123
    417a:	57 e3       	ldi	r21, 0x37	; 55
    417c:	17 ce       	rjmp	.-978    	; 0x3dac <main_fw_giveAway+0x10aa>

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
			if (stackCheckMungWall[idx] != 0x5a) {
    417e:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <stackCheckMungWall>
    4182:	8a 35       	cpi	r24, 0x5A	; 90
    4184:	09 f0       	breq	.+2      	; 0x4188 <main_fw_giveAway+0x1486>
    4186:	e5 ce       	rjmp	.-566    	; 0x3f52 <main_fw_giveAway+0x1250>
    4188:	ed ed       	ldi	r30, 0xDD	; 221
    418a:	f5 e0       	ldi	r31, 0x05	; 5
	}

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
    418c:	81 e0       	ldi	r24, 0x01	; 1
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	dc ce       	rjmp	.-584    	; 0x3f4a <main_fw_giveAway+0x1248>
			/* APC = automatic phase control */
			calcPhase();
		}
	}

	if (main_bf.mainStackCheck) {
    4192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4196:	86 fd       	sbrc	r24, 6
    4198:	f2 cf       	rjmp	.-28     	; 0x417e <main_fw_giveAway+0x147c>
    419a:	41 cf       	rjmp	.-382    	; 0x401e <main_fw_giveAway+0x131c>
    419c:	77 27       	eor	r23, r23
			}
		}
	}

	const float PhaseErrAdc		= 450.0f / (((float) ADC_PHASE_HI_LOCKING) - ADC_PHASE_LO_LOCKING);
	float phaseErr				= PhaseErrAdc * (adcPhase - ADC_PHASE_CENTER);  // phase error in degrees
    419e:	69 58       	subi	r22, 0x89	; 137
    41a0:	71 09       	sbc	r23, r1
    41a2:	07 2e       	mov	r0, r23
    41a4:	00 0c       	add	r0, r0
    41a6:	88 0b       	sbc	r24, r24
    41a8:	99 0b       	sbc	r25, r25
    41aa:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    41ae:	26 e1       	ldi	r18, 0x16	; 22
    41b0:	31 e5       	ldi	r19, 0x51	; 81
    41b2:	42 e0       	ldi	r20, 0x02	; 2
    41b4:	50 e4       	ldi	r21, 0x40	; 64
    41b6:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    41ba:	4b 01       	movw	r8, r22
    41bc:	5c 01       	movw	r10, r24
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
    41be:	10 91 9f 05 	lds	r17, 0x059F	; 0x80059f <mainRefClkState>
    41c2:	45 cd       	rjmp	.-1398   	; 0x3c4e <main_fw_giveAway+0xf4c>
		clkPullPwm_fw_setPin(true);								// for debugging purposes only
	}
#else
	/* due to the fact that the clkFastCtr interrupts every 12.8 µs there is no chance to power down */
#endif
}
    41c4:	61 96       	adiw	r28, 0x11	; 17
    41c6:	0f b6       	in	r0, 0x3f	; 63
    41c8:	f8 94       	cli
    41ca:	de bf       	out	0x3e, r29	; 62
    41cc:	0f be       	out	0x3f, r0	; 63
    41ce:	cd bf       	out	0x3d, r28	; 61
    41d0:	df 91       	pop	r29
    41d2:	cf 91       	pop	r28
    41d4:	1f 91       	pop	r17
    41d6:	0f 91       	pop	r16
    41d8:	ff 90       	pop	r15
    41da:	ef 90       	pop	r14
    41dc:	df 90       	pop	r13
    41de:	cf 90       	pop	r12
    41e0:	bf 90       	pop	r11
    41e2:	af 90       	pop	r10
    41e4:	9f 90       	pop	r9
    41e6:	8f 90       	pop	r8
    41e8:	7f 90       	pop	r7
    41ea:	6f 90       	pop	r6
    41ec:	5f 90       	pop	r5
    41ee:	4f 90       	pop	r4
    41f0:	3f 90       	pop	r3
    41f2:	2f 90       	pop	r2
    41f4:	08 95       	ret

000041f6 <main>:
int main(void)
{
	/* init AVR */
	{
		/* initial interrupt set-up */
		cli();
    41f6:	f8 94       	cli
	__asm__ __volatile__ ("reti" ::: "memory");
}


static inline void vectortable_to_firmware(void) {
	cli();
    41f8:	f8 94       	cli
	asm volatile											// set active vector table into the Firmware section
    41fa:	81 e0       	ldi	r24, 0x01	; 1
    41fc:	85 bf       	out	0x35, r24	; 53
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	85 bf       	out	0x35, r24	; 53
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	a8 95       	wdr
    4208:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    420c:	88 61       	ori	r24, 0x18	; 24
    420e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4212:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4216:	0f be       	out	0x3f, r0	; 63
		cli();
		vectortable_to_firmware();
		wdt_init();

		/* activate hardware for this configuration */
		PRR    = 0xEF;										// disable all modules within the Power Reduction Register
    4218:	8f ee       	ldi	r24, 0xEF	; 239
    421a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		ACSR  |= _BV(ACD);									// switch on Analog Comparator Disable
    421e:	80 b7       	in	r24, 0x30	; 48
    4220:	80 68       	ori	r24, 0x80	; 128
    4222:	80 bf       	out	0x30, r24	; 48
		DIDR1 |= (0b11 << AIN0D);							// disable digital input buffers on AIN0 and AIN1
    4224:	ef e7       	ldi	r30, 0x7F	; 127
    4226:	f0 e0       	ldi	r31, 0x00	; 0
    4228:	80 81       	ld	r24, Z
    422a:	83 60       	ori	r24, 0x03	; 3
    422c:	80 83       	st	Z, r24
		MCUCR &= ~(_BV(PUD));								// switch off Pull-Up Disable
    422e:	85 b7       	in	r24, 0x35	; 53
    4230:	8f 7e       	andi	r24, 0xEF	; 239
    4232:	85 bf       	out	0x35, r24	; 53

		/* PWM & debugging first */
		clkPullPwm_fw_init();
    4234:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <clkPullPwm_fw_init>
    4238:	ec ef       	ldi	r30, 0xFC	; 252
    423a:	f7 e0       	ldi	r31, 0x07	; 7
    423c:	2c ed       	ldi	r18, 0xDC	; 220
    423e:	35 e0       	ldi	r19, 0x05	; 5

		/* Stack-Check init before the modules */
		for (int idx = MAIN_STACK_CHECK_SIZE; idx;) {		// DEBUG
			stackCheckMungWall[--idx] = 0x5a;
    4240:	8a e5       	ldi	r24, 0x5A	; 90
    4242:	82 93       	st	-Z, r24

		/* PWM & debugging first */
		clkPullPwm_fw_init();

		/* Stack-Check init before the modules */
		for (int idx = MAIN_STACK_CHECK_SIZE; idx;) {		// DEBUG
    4244:	e2 17       	cp	r30, r18
    4246:	f3 07       	cpc	r31, r19
    4248:	e1 f7       	brne	.-8      	; 0x4242 <main+0x4c>
			stackCheckMungWall[--idx] = 0x5a;
		}

		/* init the other modules */
		clkFastCtr_fw_init();
    424a:	0e 94 cc 09 	call	0x1398	; 0x1398 <clkFastCtr_fw_init>
		anlgComp_fw_init();
    424e:	0e 94 18 09 	call	0x1230	; 0x1230 <anlgComp_fw_init>
		serial_fw_init();
    4252:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serial_fw_init>

		usb_fw_init();
    4256:	0e 94 37 2c 	call	0x586e	; 0x586e <usb_fw_init>
		sei();
    425a:	78 94       	sei
		usbIsUp = true;
    425c:	81 e0       	ldi	r24, 0x01	; 1
    425e:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <usbIsUp>

		/* init TWI submodule, clock and ports */
		twi_fw_init();
    4262:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <twi_fw_init>
		twi_mcp23017_fw_init();
    4266:	0e 94 c1 29 	call	0x5382	; 0x5382 <twi_mcp23017_fw_init>
		twi_mcp23017_av1624_fw_init();
    426a:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <twi_mcp23017_av1624_fw_init>
		twi_smart_lcd_fw_init();
    426e:	0e 94 98 2b 	call	0x5730	; 0x5730 <twi_smart_lcd_fw_init>

		/* check CRC of all blocks and update with default values if the data is non-valid */
		memory_fw_manageNonVolatileData();
    4272:	0e 94 9e 23 	call	0x473c	; 0x473c <memory_fw_manageNonVolatileData>

		/* read MEASURING coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_HEADER_NR)) {
    4276:	60 e0       	ldi	r22, 0x00	; 0
    4278:	8f e8       	ldi	r24, 0x8F	; 143
    427a:	93 e0       	ldi	r25, 0x03	; 3
    427c:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <memory_fw_readEepromValidBlock>
    4280:	88 23       	and	r24, r24
    4282:	11 f1       	breq	.+68     	; 0x42c8 <main+0xd2>
			eeprom_b00_t* b00 = (eeprom_b00_t*) &mainFormatBuffer;
			memcpy(mainCoef_b00_dev_header, b00->b00_header, sizeof(mainCoef_b00_dev_header) - 1);
    4284:	cf e8       	ldi	r28, 0x8F	; 143
    4286:	d3 e0       	ldi	r29, 0x03	; 3
    4288:	20 e1       	ldi	r18, 0x10	; 16
    428a:	fe 01       	movw	r30, r28
    428c:	a8 ec       	ldi	r26, 0xC8	; 200
    428e:	b5 e0       	ldi	r27, 0x05	; 5
    4290:	01 90       	ld	r0, Z+
    4292:	0d 92       	st	X+, r0
    4294:	2a 95       	dec	r18
    4296:	e1 f7       	brne	.-8      	; 0x4290 <main+0x9a>
			mainCoef_b00_dev_header[sizeof(mainCoef_b00_dev_header) - 1] = 0;
    4298:	10 92 d8 05 	sts	0x05D8, r1	; 0x8005d8 <mainCoef_b00_dev_header+0x10>

			mainCoef_b00_dev_serial					= b00->b00_device_serial;
    429c:	2a 89       	ldd	r18, Y+18	; 0x12
    429e:	3b 89       	ldd	r19, Y+19	; 0x13
    42a0:	30 93 c7 05 	sts	0x05C7, r19	; 0x8005c7 <mainCoef_b00_dev_serial+0x1>
    42a4:	20 93 c6 05 	sts	0x05C6, r18	; 0x8005c6 <mainCoef_b00_dev_serial>
			mainCoef_b00_dev_version				= b00->b00_version;
    42a8:	28 89       	ldd	r18, Y+16	; 0x10
    42aa:	39 89       	ldd	r19, Y+17	; 0x11
    42ac:	30 93 c5 05 	sts	0x05C5, r19	; 0x8005c5 <mainCoef_b00_dev_version+0x1>
    42b0:	20 93 c4 05 	sts	0x05C4, r18	; 0x8005c4 <mainCoef_b00_dev_version>
			main_bf.mainLcdLedMode					= b00->b00_lcdLedMode;
    42b4:	8c 89       	ldd	r24, Y+20	; 0x14
    42b6:	e1 e0       	ldi	r30, 0x01	; 1
    42b8:	f1 e0       	ldi	r31, 0x01	; 1
    42ba:	82 95       	swap	r24
    42bc:	88 0f       	add	r24, r24
    42be:	80 7e       	andi	r24, 0xE0	; 224
    42c0:	90 81       	ld	r25, Z
    42c2:	9f 71       	andi	r25, 0x1F	; 31
    42c4:	89 2b       	or	r24, r25
    42c6:	80 83       	st	Z, r24
		}

		/* read MEASURING coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_MEASURING_NR)) {
    42c8:	61 e0       	ldi	r22, 0x01	; 1
    42ca:	8f e8       	ldi	r24, 0x8F	; 143
    42cc:	93 e0       	ldi	r25, 0x03	; 3
    42ce:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <memory_fw_readEepromValidBlock>
    42d2:	88 23       	and	r24, r24
    42d4:	91 f1       	breq	.+100    	; 0x433a <main+0x144>
			eeprom_b01_t* b01 = (eeprom_b01_t*) &mainFormatBuffer;
			mainCoef_b01_ref_AREF_V					= b01->b01_ref_AREF_V;
    42d6:	ef e8       	ldi	r30, 0x8F	; 143
    42d8:	f3 e0       	ldi	r31, 0x03	; 3
    42da:	80 81       	ld	r24, Z
    42dc:	91 81       	ldd	r25, Z+1	; 0x01
    42de:	a2 81       	ldd	r26, Z+2	; 0x02
    42e0:	b3 81       	ldd	r27, Z+3	; 0x03
    42e2:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <mainCoef_b01_ref_AREF_V>
    42e6:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <mainCoef_b01_ref_AREF_V+0x1>
    42ea:	a0 93 c2 05 	sts	0x05C2, r26	; 0x8005c2 <mainCoef_b01_ref_AREF_V+0x2>
    42ee:	b0 93 c3 05 	sts	0x05C3, r27	; 0x8005c3 <mainCoef_b01_ref_AREF_V+0x3>
			mainCoef_b01_ref_1V1_V					= b01->b01_ref_1V1_V;
    42f2:	84 81       	ldd	r24, Z+4	; 0x04
    42f4:	95 81       	ldd	r25, Z+5	; 0x05
    42f6:	a6 81       	ldd	r26, Z+6	; 0x06
    42f8:	b7 81       	ldd	r27, Z+7	; 0x07
    42fa:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <mainCoef_b01_ref_1V1_V>
    42fe:	90 93 bd 05 	sts	0x05BD, r25	; 0x8005bd <mainCoef_b01_ref_1V1_V+0x1>
    4302:	a0 93 be 05 	sts	0x05BE, r26	; 0x8005be <mainCoef_b01_ref_1V1_V+0x2>
    4306:	b0 93 bf 05 	sts	0x05BF, r27	; 0x8005bf <mainCoef_b01_ref_1V1_V+0x3>
			mainCoef_b01_temp_ofs_adc_25C_steps		= b01->b01_temp_ofs_adc_25C_steps;
    430a:	80 85       	ldd	r24, Z+8	; 0x08
    430c:	91 85       	ldd	r25, Z+9	; 0x09
    430e:	a2 85       	ldd	r26, Z+10	; 0x0a
    4310:	b3 85       	ldd	r27, Z+11	; 0x0b
    4312:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps>
    4316:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    431a:	a0 93 ba 05 	sts	0x05BA, r26	; 0x8005ba <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    431e:	b0 93 bb 05 	sts	0x05BB, r27	; 0x8005bb <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>
			mainCoef_b01_temp_k_p1step_adc_K		= b01->b01_temp_k_p1step_adc_K;
    4322:	84 85       	ldd	r24, Z+12	; 0x0c
    4324:	95 85       	ldd	r25, Z+13	; 0x0d
    4326:	a6 85       	ldd	r26, Z+14	; 0x0e
    4328:	b7 85       	ldd	r27, Z+15	; 0x0f
    432a:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K>
    432e:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    4332:	a0 93 b6 05 	sts	0x05B6, r26	; 0x8005b6 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    4336:	b0 93 b7 05 	sts	0x05B7, r27	; 0x8005b7 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
		}

		/* read REFERENCE OSCILLATOR (REFOSC) coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_REFOSC_NR)) {
    433a:	62 e0       	ldi	r22, 0x02	; 2
    433c:	8f e8       	ldi	r24, 0x8F	; 143
    433e:	93 e0       	ldi	r25, 0x03	; 3
    4340:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <memory_fw_readEepromValidBlock>
    4344:	88 23       	and	r24, r24
    4346:	f1 f1       	breq	.+124    	; 0x43c4 <main+0x1ce>
			eeprom_b02_t* b02 = (eeprom_b02_t*) &mainFormatBuffer;
			mainCoef_b02_qrg_ofs_minV_25C_ppm		= b02->b02_qrg_ofs_minV_25C_ppm;
    4348:	ef e8       	ldi	r30, 0x8F	; 143
    434a:	f3 e0       	ldi	r31, 0x03	; 3
    434c:	80 81       	ld	r24, Z
    434e:	91 81       	ldd	r25, Z+1	; 0x01
    4350:	a2 81       	ldd	r26, Z+2	; 0x02
    4352:	b3 81       	ldd	r27, Z+3	; 0x03
    4354:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <mainCoef_b02_qrg_ofs_minV_25C_ppm>
    4358:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x1>
    435c:	a0 93 b2 05 	sts	0x05B2, r26	; 0x8005b2 <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x2>
    4360:	b0 93 b3 05 	sts	0x05B3, r27	; 0x8005b3 <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x3>
			mainCoef_b02_qrg_ofs_maxV_25C_ppm		= b02->b02_qrg_ofs_maxV_25C_ppm;
    4364:	84 81       	ldd	r24, Z+4	; 0x04
    4366:	95 81       	ldd	r25, Z+5	; 0x05
    4368:	a6 81       	ldd	r26, Z+6	; 0x06
    436a:	b7 81       	ldd	r27, Z+7	; 0x07
    436c:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <mainCoef_b02_qrg_ofs_maxV_25C_ppm>
    4370:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x1>
    4374:	a0 93 ae 05 	sts	0x05AE, r26	; 0x8005ae <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x2>
    4378:	b0 93 af 05 	sts	0x05AF, r27	; 0x8005af <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x3>
			mainCoef_b02_qrg_k_pPwmStep_25C_ppm		= b02->b02_qrg_k_pPwmStep_25C_ppm;
    437c:	80 85       	ldd	r24, Z+8	; 0x08
    437e:	91 85       	ldd	r25, Z+9	; 0x09
    4380:	a2 85       	ldd	r26, Z+10	; 0x0a
    4382:	b3 85       	ldd	r27, Z+11	; 0x0b
    4384:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    4388:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    438c:	a0 93 aa 05 	sts	0x05AA, r26	; 0x8005aa <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    4390:	b0 93 ab 05 	sts	0x05AB, r27	; 0x8005ab <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
			mainCoef_b02_pwm_minV_V					= b02->b02_pwm_minV_V;
    4394:	82 89       	ldd	r24, Z+18	; 0x12
    4396:	93 89       	ldd	r25, Z+19	; 0x13
    4398:	a4 89       	ldd	r26, Z+20	; 0x14
    439a:	b5 89       	ldd	r27, Z+21	; 0x15
    439c:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <mainCoef_b02_pwm_minV_V>
    43a0:	90 93 a5 05 	sts	0x05A5, r25	; 0x8005a5 <mainCoef_b02_pwm_minV_V+0x1>
    43a4:	a0 93 a6 05 	sts	0x05A6, r26	; 0x8005a6 <mainCoef_b02_pwm_minV_V+0x2>
    43a8:	b0 93 a7 05 	sts	0x05A7, r27	; 0x8005a7 <mainCoef_b02_pwm_minV_V+0x3>
			mainCoef_b02_pwm_maxV_V					= b02->b02_pwm_maxV_V;
    43ac:	86 89       	ldd	r24, Z+22	; 0x16
    43ae:	97 89       	ldd	r25, Z+23	; 0x17
    43b0:	a0 8d       	ldd	r26, Z+24	; 0x18
    43b2:	b1 8d       	ldd	r27, Z+25	; 0x19
    43b4:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <mainCoef_b02_pwm_maxV_V>
    43b8:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <mainCoef_b02_pwm_maxV_V+0x1>
    43bc:	a0 93 a2 05 	sts	0x05A2, r26	; 0x8005a2 <mainCoef_b02_pwm_maxV_V+0x2>
    43c0:	b0 93 a3 05 	sts	0x05A3, r27	; 0x8005a3 <mainCoef_b02_pwm_maxV_V+0x3>

			/*	b02_pwm_initial			treated by df4iah_fw_clkPullPwm */
			/* 	b02_pwm_initial_sub		treated by df4iah_fw_clkPullPwm */
		}

		if (!(main_bf.mainIsLcdAttached) && !(main_bf.mainIsSmartAttached)) {
    43c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    43c8:	88 23       	and	r24, r24
    43ca:	2c f0       	brlt	.+10     	; 0x43d6 <main+0x1e0>
    43cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    43d0:	80 ff       	sbrs	r24, 0
			/* enter HELP command in USB host OUT queue */
			main_fw_sendInitialHelp();
    43d2:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <main_fw_sendInitialHelp>
		}
	}

	/* run the chip */
    while (!(main_bf.mainStopAvr)) {
    43d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    43da:	85 fd       	sbrc	r24, 5
    43dc:	07 c0       	rjmp	.+14     	; 0x43ec <main+0x1f6>
    43de:	c0 e0       	ldi	r28, 0x00	; 0
    43e0:	d1 e0       	ldi	r29, 0x01	; 1
    	main_fw_giveAway();
    43e2:	0e 94 81 16 	call	0x2d02	; 0x2d02 <main_fw_giveAway>
			main_fw_sendInitialHelp();
		}
	}

	/* run the chip */
    while (!(main_bf.mainStopAvr)) {
    43e6:	88 81       	ld	r24, Y
    43e8:	85 ff       	sbrs	r24, 5
    43ea:	fb cf       	rjmp	.-10     	; 0x43e2 <main+0x1ec>
    43ec:	0f b6       	in	r0, 0x3f	; 63
    43ee:	f8 94       	cli
    43f0:	a8 95       	wdr
    43f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    43f6:	88 61       	ori	r24, 0x18	; 24
    43f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    43fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4400:	0f be       	out	0x3f, r0	; 63

    /* stop AVR */
    {
		wdt_close();

		twi_mcp23017_av1624_fw_close();
    4402:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <twi_mcp23017_av1624_fw_close>
		twi_mcp23017_fw_close();
    4406:	0e 94 fe 29 	call	0x53fc	; 0x53fc <twi_mcp23017_fw_close>
		twi_fw_close();
    440a:	0e 94 77 27 	call	0x4eee	; 0x4eee <twi_fw_close>

		usbIsUp = false;
    440e:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <usbIsUp>
		cli();
    4412:	f8 94       	cli
		usb_fw_close();
    4414:	0e 94 4a 2c 	call	0x5894	; 0x5894 <usb_fw_close>

		serial_fw_close();
    4418:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <serial_fw_close>
		anlgComp_fw_close();
    441c:	0e 94 41 09 	call	0x1282	; 0x1282 <anlgComp_fw_close>
		clkFastCtr_fw_close();
    4420:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <clkFastCtr_fw_close>
		clkPullPwm_fw_close();
    4424:	0e 94 9d 0a 	call	0x153a	; 0x153a <clkPullPwm_fw_close>

		// all pins are set to be input
		DDRB = 0x00;
    4428:	14 b8       	out	0x04, r1	; 4
		DDRC = 0x00;
    442a:	17 b8       	out	0x07, r1	; 7
		DDRD = 0x00;
    442c:	1a b8       	out	0x0a, r1	; 10

		// all pull-ups are being switched off
		PORTB = 0x00;
    442e:	15 b8       	out	0x05, r1	; 5
		PORTC = 0x00;
    4430:	18 b8       	out	0x08, r1	; 8
		PORTD = 0x00;
    4432:	1b b8       	out	0x0b, r1	; 11

		// switch off Pull-Up Disable
		MCUCR &= ~(_BV(PUD));
    4434:	85 b7       	in	r24, 0x35	; 53
    4436:	8f 7e       	andi	r24, 0xEF	; 239
    4438:	85 bf       	out	0x35, r24	; 53

		{
			/* enter and keep in sleep mode */
			for (;;) {
				set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    443a:	83 b7       	in	r24, 0x33	; 51
    443c:	81 7f       	andi	r24, 0xF1	; 241
    443e:	84 60       	ori	r24, 0x04	; 4
    4440:	83 bf       	out	0x33, r24	; 51
				uint8_t sreg = SREG;
    4442:	9f b7       	in	r25, 0x3f	; 63
				cli();
    4444:	f8 94       	cli
				// if (some_condition) {
					sleep_enable();
    4446:	83 b7       	in	r24, 0x33	; 51
    4448:	81 60       	ori	r24, 0x01	; 1
    444a:	83 bf       	out	0x33, r24	; 51
					sleep_bod_disable();
    444c:	85 b7       	in	r24, 0x35	; 53
    444e:	80 66       	ori	r24, 0x60	; 96
    4450:	85 bf       	out	0x35, r24	; 53
    4452:	8f 7d       	andi	r24, 0xDF	; 223
    4454:	85 bf       	out	0x35, r24	; 53
				//	SREG = sreg;
					sleep_cpu();
    4456:	88 95       	sleep
					sleep_disable();
    4458:	83 b7       	in	r24, 0x33	; 51
    445a:	8e 7f       	andi	r24, 0xFE	; 254
    445c:	83 bf       	out	0x33, r24	; 51
				// }
				SREG = sreg;
    445e:	9f bf       	out	0x3f, r25	; 63
			}
    4460:	ec cf       	rjmp	.-40     	; 0x443a <main+0x244>

00004462 <memory_fw_copyBuffer>:
	}
}

void memory_fw_writeFlashPage(uint8_t source[], pagebuf_t size, uint32_t baddr)
{
	memory_bl_writeFlashPage(source, size, baddr);
    4462:	cf 93       	push	r28
    4464:	df 93       	push	r29
    4466:	eb 01       	movw	r28, r22
    4468:	64 2f       	mov	r22, r20
    446a:	75 2f       	mov	r23, r21
    446c:	88 23       	and	r24, r24
    446e:	31 f0       	breq	.+12     	; 0x447c <memory_fw_copyBuffer+0x1a>
    4470:	21 15       	cp	r18, r1
    4472:	31 05       	cpc	r19, r1
    4474:	41 f4       	brne	.+16     	; 0x4486 <memory_fw_copyBuffer+0x24>
    4476:	8c 2f       	mov	r24, r28
    4478:	9d 2f       	mov	r25, r29
    447a:	12 c0       	rjmp	.+36     	; 0x44a0 <memory_fw_copyBuffer+0x3e>
    447c:	a9 01       	movw	r20, r18
    447e:	ce 01       	movw	r24, r28
    4480:	0e 94 cc 3c 	call	0x7998	; 0x7998 <memcpy>
    4484:	0d c0       	rjmp	.+26     	; 0x44a0 <memory_fw_copyBuffer+0x3e>
    4486:	e4 2f       	mov	r30, r20
    4488:	f5 2f       	mov	r31, r21
    448a:	de 01       	movw	r26, r28
    448c:	2c 0f       	add	r18, r28
    448e:	3d 1f       	adc	r19, r29
    4490:	94 91       	lpm	r25, Z
    4492:	9d 93       	st	X+, r25
    4494:	31 96       	adiw	r30, 0x01	; 1
    4496:	a2 17       	cp	r26, r18
    4498:	b3 07       	cpc	r27, r19
    449a:	d1 f7       	brne	.-12     	; 0x4490 <memory_fw_copyBuffer+0x2e>
    449c:	8c 2f       	mov	r24, r28
    449e:	9d 2f       	mov	r25, r29
    44a0:	df 91       	pop	r29
    44a2:	cf 91       	pop	r28
    44a4:	08 95       	ret

000044a6 <memory_fw_getSealMarker>:
    44a6:	20 e1       	ldi	r18, 0x10	; 16
    44a8:	82 9f       	mul	r24, r18
    44aa:	c0 01       	movw	r24, r0
    44ac:	11 24       	eor	r1, r1
    44ae:	8c 60       	ori	r24, 0x0C	; 12
    44b0:	90 6b       	ori	r25, 0xB0	; 176
    44b2:	08 95       	ret

000044b4 <memory_fw_calcBlockCrc>:
    44b4:	cf 93       	push	r28
    44b6:	fc 01       	movw	r30, r24
    44b8:	dc 01       	movw	r26, r24
    44ba:	5e 96       	adiw	r26, 0x1e	; 30
    44bc:	25 ea       	ldi	r18, 0xA5	; 165
    44be:	35 ea       	ldi	r19, 0xA5	; 165
    44c0:	c0 e1       	ldi	r28, 0x10	; 16
    44c2:	24 c0       	rjmp	.+72     	; 0x450c <memory_fw_calcBlockCrc+0x58>
    44c4:	b9 01       	movw	r22, r18
    44c6:	66 0f       	add	r22, r22
    44c8:	77 1f       	adc	r23, r23
    44ca:	82 2f       	mov	r24, r18
    44cc:	81 70       	andi	r24, 0x01	; 1
    44ce:	93 2f       	mov	r25, r19
    44d0:	99 1f       	adc	r25, r25
    44d2:	99 27       	eor	r25, r25
    44d4:	99 1f       	adc	r25, r25
    44d6:	98 27       	eor	r25, r24
    44d8:	35 fb       	bst	r19, 5
    44da:	44 27       	eor	r20, r20
    44dc:	40 f9       	bld	r20, 0
    44de:	94 27       	eor	r25, r20
    44e0:	33 fb       	bst	r19, 3
    44e2:	33 27       	eor	r19, r19
    44e4:	30 f9       	bld	r19, 0
    44e6:	93 27       	eor	r25, r19
    44e8:	27 fb       	bst	r18, 7
    44ea:	88 27       	eor	r24, r24
    44ec:	80 f9       	bld	r24, 0
    44ee:	98 27       	eor	r25, r24
    44f0:	22 fb       	bst	r18, 2
    44f2:	22 27       	eor	r18, r18
    44f4:	20 f9       	bld	r18, 0
    44f6:	29 27       	eor	r18, r25
    44f8:	cb 01       	movw	r24, r22
    44fa:	82 2b       	or	r24, r18
    44fc:	9c 01       	movw	r18, r24
    44fe:	51 50       	subi	r21, 0x01	; 1
    4500:	09 f7       	brne	.-62     	; 0x44c4 <memory_fw_calcBlockCrc+0x10>
    4502:	81 91       	ld	r24, Z+
    4504:	28 27       	eor	r18, r24
    4506:	ea 17       	cp	r30, r26
    4508:	fb 07       	cpc	r31, r27
    450a:	11 f0       	breq	.+4      	; 0x4510 <memory_fw_calcBlockCrc+0x5c>
    450c:	5c 2f       	mov	r21, r28
    450e:	da cf       	rjmp	.-76     	; 0x44c4 <memory_fw_calcBlockCrc+0x10>
    4510:	c9 01       	movw	r24, r18
    4512:	cf 91       	pop	r28
    4514:	08 95       	ret

00004516 <memory_fw_readEEpromPage>:
    4516:	cf 92       	push	r12
    4518:	df 92       	push	r13
    451a:	ef 92       	push	r14
    451c:	ff 92       	push	r15
    451e:	0f 93       	push	r16
    4520:	1f 93       	push	r17
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
    4526:	66 23       	and	r22, r22
    4528:	99 f0       	breq	.+38     	; 0x4550 <memory_fw_readEEpromPage+0x3a>
    452a:	06 2f       	mov	r16, r22
    452c:	6c 01       	movw	r12, r24
    452e:	c4 2f       	mov	r28, r20
    4530:	d5 2f       	mov	r29, r21
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	11 e0       	ldi	r17, 0x01	; 1
    4536:	19 0f       	add	r17, r25
    4538:	76 01       	movw	r14, r12
    453a:	e9 0e       	add	r14, r25
    453c:	f1 1c       	adc	r15, r1
    453e:	ce 01       	movw	r24, r28
    4540:	0e 94 4a 3e 	call	0x7c94	; 0x7c94 <eeprom_read_byte>
    4544:	f7 01       	movw	r30, r14
    4546:	80 83       	st	Z, r24
    4548:	21 96       	adiw	r28, 0x01	; 1
    454a:	91 2f       	mov	r25, r17
    454c:	10 13       	cpse	r17, r16
    454e:	f2 cf       	rjmp	.-28     	; 0x4534 <memory_fw_readEEpromPage+0x1e>
    4550:	df 91       	pop	r29
    4552:	cf 91       	pop	r28
    4554:	1f 91       	pop	r17
    4556:	0f 91       	pop	r16
    4558:	ff 90       	pop	r15
    455a:	ef 90       	pop	r14
    455c:	df 90       	pop	r13
    455e:	cf 90       	pop	r12
    4560:	08 95       	ret

00004562 <memory_fw_isEepromBlockValid>:
    4562:	88 30       	cpi	r24, 0x08	; 8
    4564:	d8 f4       	brcc	.+54     	; 0x459c <memory_fw_isEepromBlockValid+0x3a>
    4566:	90 e2       	ldi	r25, 0x20	; 32
    4568:	89 9f       	mul	r24, r25
    456a:	a0 01       	movw	r20, r0
    456c:	11 24       	eor	r1, r1
    456e:	60 e2       	ldi	r22, 0x20	; 32
    4570:	8f e8       	ldi	r24, 0x8F	; 143
    4572:	93 e0       	ldi	r25, 0x03	; 3
    4574:	0e 94 8b 22 	call	0x4516	; 0x4516 <memory_fw_readEEpromPage>
    4578:	8f e8       	ldi	r24, 0x8F	; 143
    457a:	93 e0       	ldi	r25, 0x03	; 3
    457c:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <memory_fw_calcBlockCrc>
    4580:	ef e8       	ldi	r30, 0x8F	; 143
    4582:	f3 e0       	ldi	r31, 0x03	; 3
    4584:	27 8d       	ldd	r18, Z+31	; 0x1f
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	32 2f       	mov	r19, r18
    458a:	22 27       	eor	r18, r18
    458c:	46 8d       	ldd	r20, Z+30	; 0x1e
    458e:	24 2b       	or	r18, r20
    4590:	41 e0       	ldi	r20, 0x01	; 1
    4592:	28 17       	cp	r18, r24
    4594:	39 07       	cpc	r19, r25
    4596:	19 f0       	breq	.+6      	; 0x459e <memory_fw_isEepromBlockValid+0x3c>
    4598:	40 e0       	ldi	r20, 0x00	; 0
    459a:	01 c0       	rjmp	.+2      	; 0x459e <memory_fw_isEepromBlockValid+0x3c>
    459c:	40 e0       	ldi	r20, 0x00	; 0
    459e:	84 2f       	mov	r24, r20
    45a0:	08 95       	ret

000045a2 <memory_fw_readEepromValidBlock>:
    45a2:	0f 93       	push	r16
    45a4:	1f 93       	push	r17
    45a6:	cf 93       	push	r28
    45a8:	68 30       	cpi	r22, 0x08	; 8
    45aa:	a8 f4       	brcc	.+42     	; 0x45d6 <memory_fw_readEepromValidBlock+0x34>
    45ac:	c6 2f       	mov	r28, r22
    45ae:	8c 01       	movw	r16, r24
    45b0:	86 2f       	mov	r24, r22
    45b2:	0e 94 b1 22 	call	0x4562	; 0x4562 <memory_fw_isEepromBlockValid>
    45b6:	88 23       	and	r24, r24
    45b8:	89 f0       	breq	.+34     	; 0x45dc <memory_fw_readEepromValidBlock+0x3a>
    45ba:	83 e0       	ldi	r24, 0x03	; 3
    45bc:	0f 38       	cpi	r16, 0x8F	; 143
    45be:	18 07       	cpc	r17, r24
    45c0:	61 f0       	breq	.+24     	; 0x45da <memory_fw_readEepromValidBlock+0x38>
    45c2:	80 e2       	ldi	r24, 0x20	; 32
    45c4:	c8 9f       	mul	r28, r24
    45c6:	a0 01       	movw	r20, r0
    45c8:	11 24       	eor	r1, r1
    45ca:	60 e2       	ldi	r22, 0x20	; 32
    45cc:	c8 01       	movw	r24, r16
    45ce:	0e 94 8b 22 	call	0x4516	; 0x4516 <memory_fw_readEEpromPage>
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	03 c0       	rjmp	.+6      	; 0x45dc <memory_fw_readEepromValidBlock+0x3a>
    45d6:	80 e0       	ldi	r24, 0x00	; 0
    45d8:	01 c0       	rjmp	.+2      	; 0x45dc <memory_fw_readEepromValidBlock+0x3a>
    45da:	81 e0       	ldi	r24, 0x01	; 1
    45dc:	cf 91       	pop	r28
    45de:	1f 91       	pop	r17
    45e0:	0f 91       	pop	r16
    45e2:	08 95       	ret

000045e4 <memory_fw_writeEEpromPage>:
}

void memory_fw_writeEEpromPage(uint8_t source[], pagebuf_t size, uint16_t baddr)
{
    45e4:	cf 92       	push	r12
    45e6:	df 92       	push	r13
    45e8:	ef 92       	push	r14
    45ea:	ff 92       	push	r15
    45ec:	0f 93       	push	r16
    45ee:	1f 93       	push	r17
    45f0:	cf 93       	push	r28
    45f2:	df 93       	push	r29
    45f4:	6c 01       	movw	r12, r24
    45f6:	8a 01       	movw	r16, r20
	uint8_t idx = 0;

	while (size--) {								// decrease number of bytes to write
    45f8:	8f ef       	ldi	r24, 0xFF	; 255
    45fa:	86 0f       	add	r24, r22
    45fc:	66 23       	and	r22, r22
    45fe:	a1 f0       	breq	.+40     	; 0x4628 <memory_fw_writeEEpromPage+0x44>
    4600:	7a 01       	movw	r14, r20
    4602:	9f ef       	ldi	r25, 0xFF	; 255
    4604:	e9 1a       	sub	r14, r25
    4606:	f9 0a       	sbc	r15, r25
    4608:	e8 0e       	add	r14, r24
    460a:	f1 1c       	adc	r15, r1
    460c:	ea 01       	movw	r28, r20
    460e:	9c 2f       	mov	r25, r28
    4610:	90 1b       	sub	r25, r16
		eeprom_write_byte((uint8_t*) baddr, source[idx++]);
    4612:	f6 01       	movw	r30, r12
    4614:	e9 0f       	add	r30, r25
    4616:	f1 1d       	adc	r31, r1
    4618:	60 81       	ld	r22, Z
    461a:	ce 01       	movw	r24, r28
    461c:	0e 94 52 3e 	call	0x7ca4	; 0x7ca4 <eeprom_write_byte>
		baddr++;									// select next byte
    4620:	21 96       	adiw	r28, 0x01	; 1

void memory_fw_writeEEpromPage(uint8_t source[], pagebuf_t size, uint16_t baddr)
{
	uint8_t idx = 0;

	while (size--) {								// decrease number of bytes to write
    4622:	ce 15       	cp	r28, r14
    4624:	df 05       	cpc	r29, r15
    4626:	99 f7       	brne	.-26     	; 0x460e <memory_fw_writeEEpromPage+0x2a>
		eeprom_write_byte((uint8_t*) baddr, source[idx++]);
		baddr++;									// select next byte
	}												// loop until all bytes written

	// eeprom_busy_wait();
}
    4628:	df 91       	pop	r29
    462a:	cf 91       	pop	r28
    462c:	1f 91       	pop	r17
    462e:	0f 91       	pop	r16
    4630:	ff 90       	pop	r15
    4632:	ef 90       	pop	r14
    4634:	df 90       	pop	r13
    4636:	cf 90       	pop	r12
    4638:	08 95       	ret

0000463a <memory_fw_writeEepromBlockMakeValid>:
	// bad usage
	return false;
}

uint8_t memory_fw_writeEepromBlockMakeValid(uint8_t* source, uint8_t blockNr)
{
    463a:	1f 93       	push	r17
    463c:	cf 93       	push	r28
    463e:	df 93       	push	r29
	if (blockNr < BLOCK_COUNT) {
    4640:	68 30       	cpi	r22, 0x08	; 8
    4642:	38 f5       	brcc	.+78     	; 0x4692 <memory_fw_writeEepromBlockMakeValid+0x58>
    4644:	16 2f       	mov	r17, r22
    4646:	ec 01       	movw	r28, r24
		uint16_t oldCrcBlock = source[30] | (source[31] << 8);
		uint16_t oldCrcCalc  = memory_fw_calcBlockCrc(source);
    4648:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <memory_fw_calcBlockCrc>
}

uint8_t memory_fw_writeEepromBlockMakeValid(uint8_t* source, uint8_t blockNr)
{
	if (blockNr < BLOCK_COUNT) {
		uint16_t oldCrcBlock = source[30] | (source[31] << 8);
    464c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	32 2f       	mov	r19, r18
    4652:	22 27       	eor	r18, r18
    4654:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4656:	24 2b       	or	r18, r20
		uint16_t oldCrcCalc  = memory_fw_calcBlockCrc(source);

		if (oldCrcBlock != oldCrcCalc) {
    4658:	28 17       	cp	r18, r24
    465a:	39 07       	cpc	r19, r25
    465c:	e1 f0       	breq	.+56     	; 0x4696 <memory_fw_writeEepromBlockMakeValid+0x5c>
			/* initial CRC calc marker found, seal the content */
			source[30] = (oldCrcCalc & 0xff);
    465e:	8e 8f       	std	Y+30, r24	; 0x1e
			source[31] = (oldCrcCalc >> 8);
    4660:	9f 8f       	std	Y+31, r25	; 0x1f

			/* any recalculation of the CRC is counted */
			uint16_t counter = source[28] | (source[29] << 8);
    4662:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	98 2f       	mov	r25, r24
    4668:	88 27       	eor	r24, r24
    466a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    466c:	82 2b       	or	r24, r18

			counter++;
    466e:	01 96       	adiw	r24, 0x01	; 1
			source[28] = (counter & 0xff);
    4670:	8c 8f       	std	Y+28, r24	; 0x1c
			source[29] = (counter >> 8);
    4672:	9d 8f       	std	Y+29, r25	; 0x1d

			/* re-calc the CRC */
			uint16_t newCrcCalc = memory_fw_calcBlockCrc(source);
    4674:	ce 01       	movw	r24, r28
    4676:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <memory_fw_calcBlockCrc>

			source[30] = (newCrcCalc & 0xff);
    467a:	8e 8f       	std	Y+30, r24	; 0x1e
			source[31] = (newCrcCalc >> 8);
    467c:	9f 8f       	std	Y+31, r25	; 0x1f

			memory_fw_writeEEpromPage(source, 1 << 5, blockNr << 5);
    467e:	80 e2       	ldi	r24, 0x20	; 32
    4680:	18 9f       	mul	r17, r24
    4682:	a0 01       	movw	r20, r0
    4684:	11 24       	eor	r1, r1
    4686:	60 e2       	ldi	r22, 0x20	; 32
    4688:	ce 01       	movw	r24, r28
    468a:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <memory_fw_writeEEpromPage>
		}

		// block valid
		return true;
    468e:	81 e0       	ldi	r24, 0x01	; 1
    4690:	03 c0       	rjmp	.+6      	; 0x4698 <memory_fw_writeEepromBlockMakeValid+0x5e>
	}

	// bad usage
	return false;
    4692:	80 e0       	ldi	r24, 0x00	; 0
    4694:	01 c0       	rjmp	.+2      	; 0x4698 <memory_fw_writeEepromBlockMakeValid+0x5e>

			memory_fw_writeEEpromPage(source, 1 << 5, blockNr << 5);
		}

		// block valid
		return true;
    4696:	81 e0       	ldi	r24, 0x01	; 1
	}

	// bad usage
	return false;
}
    4698:	df 91       	pop	r29
    469a:	cf 91       	pop	r28
    469c:	1f 91       	pop	r17
    469e:	08 95       	ret

000046a0 <memory_fw_manageBlock>:
	// bad usage or not valid block
	return false;
}

uint8_t memory_fw_manageBlock(uint8_t blockNr)
{
    46a0:	ef 92       	push	r14
    46a2:	ff 92       	push	r15
    46a4:	0f 93       	push	r16
    46a6:	1f 93       	push	r17
    46a8:	cf 93       	push	r28
	if (blockNr < BLOCK_COUNT) {
    46aa:	88 30       	cpi	r24, 0x08	; 8
    46ac:	f0 f5       	brcc	.+124    	; 0x472a <memory_fw_manageBlock+0x8a>
    46ae:	c8 2f       	mov	r28, r24
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
    46b0:	0e 94 b1 22 	call	0x4562	; 0x4562 <memory_fw_isEepromBlockValid>
    46b4:	81 11       	cpse	r24, r1
    46b6:	3b c0       	rjmp	.+118    	; 0x472e <memory_fw_manageBlock+0x8e>
	}
}

uint16_t memory_fw_getSealMarker(uint8_t blockNr)
{
	return (0xb00c | (blockNr << 4));
    46b8:	2c 2f       	mov	r18, r28
    46ba:	30 e0       	ldi	r19, 0x00	; 0
uint8_t memory_fw_manageBlock(uint8_t blockNr)
{
	if (blockNr < BLOCK_COUNT) {
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
			/* the block is non-valid, reload the EEPROM block with the default data */
			uint16_t oldCrcBlock = mainFormatBuffer[30] | (mainFormatBuffer[31] << 8);
    46bc:	ef e8       	ldi	r30, 0x8F	; 143
    46be:	f3 e0       	ldi	r31, 0x03	; 3
    46c0:	87 8d       	ldd	r24, Z+31	; 0x1f
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	98 2f       	mov	r25, r24
    46c6:	88 27       	eor	r24, r24
    46c8:	46 8d       	ldd	r20, Z+30	; 0x1e
    46ca:	84 2b       	or	r24, r20
	}
}

uint16_t memory_fw_getSealMarker(uint8_t blockNr)
{
	return (0xb00c | (blockNr << 4));
    46cc:	a9 01       	movw	r20, r18
    46ce:	42 95       	swap	r20
    46d0:	52 95       	swap	r21
    46d2:	50 7f       	andi	r21, 0xF0	; 240
    46d4:	54 27       	eor	r21, r20
    46d6:	40 7f       	andi	r20, 0xF0	; 240
    46d8:	54 27       	eor	r21, r20
    46da:	4c 60       	ori	r20, 0x0C	; 12
    46dc:	50 6b       	ori	r21, 0xB0	; 176
	if (blockNr < BLOCK_COUNT) {
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
			/* the block is non-valid, reload the EEPROM block with the default data */
			uint16_t oldCrcBlock = mainFormatBuffer[30] | (mainFormatBuffer[31] << 8);

			if (oldCrcBlock != memory_fw_getSealMarker(blockNr)) {
    46de:	84 17       	cp	r24, r20
    46e0:	95 07       	cpc	r25, r21
    46e2:	e1 f0       	breq	.+56     	; 0x471c <memory_fw_manageBlock+0x7c>
				uint16_t counter = mainFormatBuffer[28] | (mainFormatBuffer[29] << 8);
    46e4:	7f 01       	movw	r14, r30
    46e6:	05 8d       	ldd	r16, Z+29	; 0x1d
    46e8:	10 e0       	ldi	r17, 0x00	; 0
    46ea:	10 2f       	mov	r17, r16
    46ec:	00 27       	eor	r16, r16
    46ee:	84 8d       	ldd	r24, Z+28	; 0x1c
    46f0:	08 2b       	or	r16, r24

				/* reading default values if not CRC calc marker for sealing is found */
				memory_fw_readFlashPage(mainFormatBuffer,
						(1 << 5) - 4,								// load default data, without counter and special marked CRC value
						(((uint16_t) ((void*) &eeprom_defaultValues_content)) + (blockNr << 5)));
    46f2:	22 0f       	add	r18, r18
    46f4:	33 1f       	adc	r19, r19
    46f6:	22 95       	swap	r18
    46f8:	32 95       	swap	r19
    46fa:	30 7f       	andi	r19, 0xF0	; 240
    46fc:	32 27       	eor	r19, r18
    46fe:	20 7f       	andi	r18, 0xF0	; 240
    4700:	32 27       	eor	r19, r18
    4702:	2a 54       	subi	r18, 0x4A	; 74
    4704:	32 4f       	sbci	r19, 0xF2	; 242

			if (oldCrcBlock != memory_fw_getSealMarker(blockNr)) {
				uint16_t counter = mainFormatBuffer[28] | (mainFormatBuffer[29] << 8);

				/* reading default values if not CRC calc marker for sealing is found */
				memory_fw_readFlashPage(mainFormatBuffer,
    4706:	40 e0       	ldi	r20, 0x00	; 0
    4708:	50 e0       	ldi	r21, 0x00	; 0
	memory_bl_eraseFlash();
}

void memory_fw_readFlashPage(uint8_t target[], pagebuf_t size, uint32_t baddr)
{
	memory_bl_readFlashPage(target, size, baddr);
    470a:	6c e1       	ldi	r22, 0x1C	; 28
    470c:	cf 01       	movw	r24, r30
    470e:	0e 94 ed 08 	call	0x11da	; 0x11da <memory_bl_readFlashPage>
				/* reading default values if not CRC calc marker for sealing is found */
				memory_fw_readFlashPage(mainFormatBuffer,
						(1 << 5) - 4,								// load default data, without counter and special marked CRC value
						(((uint16_t) ((void*) &eeprom_defaultValues_content)) + (blockNr << 5)));

				counter++;
    4712:	0f 5f       	subi	r16, 0xFF	; 255
    4714:	1f 4f       	sbci	r17, 0xFF	; 255
				mainFormatBuffer[28] = (counter & 0xff);
    4716:	f7 01       	movw	r30, r14
    4718:	04 8f       	std	Z+28, r16	; 0x1c
				mainFormatBuffer[29] = (counter >> 8);
    471a:	15 8f       	std	Z+29, r17	; 0x1d
			}

			/* update CRC and write to EEPROM */
			memory_fw_writeEepromBlockMakeValid(mainFormatBuffer, blockNr);
    471c:	6c 2f       	mov	r22, r28
    471e:	8f e8       	ldi	r24, 0x8F	; 143
    4720:	93 e0       	ldi	r25, 0x03	; 3
    4722:	0e 94 1d 23 	call	0x463a	; 0x463a <memory_fw_writeEepromBlockMakeValid>
			return 1;
    4726:	81 e0       	ldi	r24, 0x01	; 1
    4728:	03 c0       	rjmp	.+6      	; 0x4730 <memory_fw_manageBlock+0x90>
			return 0;
		}
	}

	// bad usage or not a valid block
	return 0;
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	01 c0       	rjmp	.+2      	; 0x4730 <memory_fw_manageBlock+0x90>
			memory_fw_writeEepromBlockMakeValid(mainFormatBuffer, blockNr);
			return 1;

		} else {
			// no correction made
			return 0;
    472e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// bad usage or not a valid block
	return 0;
}
    4730:	cf 91       	pop	r28
    4732:	1f 91       	pop	r17
    4734:	0f 91       	pop	r16
    4736:	ff 90       	pop	r15
    4738:	ef 90       	pop	r14
    473a:	08 95       	ret

0000473c <memory_fw_manageNonVolatileData>:

uint8_t memory_fw_manageNonVolatileData()
{
    473c:	cf 93       	push	r28
    473e:	df 93       	push	r29
    4740:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t ret = 0;
    4742:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t status;

	for (int blockIdx = 0; blockIdx < BLOCK_COUNT; ++blockIdx) {
		status = memory_fw_manageBlock(blockIdx);
    4744:	8c 2f       	mov	r24, r28
    4746:	0e 94 50 23 	call	0x46a0	; 0x46a0 <memory_fw_manageBlock>
		if (status) {
    474a:	81 11       	cpse	r24, r1
			++ret;
    474c:	df 5f       	subi	r29, 0xFF	; 255
    474e:	cf 5f       	subi	r28, 0xFF	; 255
uint8_t memory_fw_manageNonVolatileData()
{
	uint8_t ret = 0;
	uint8_t status;

	for (int blockIdx = 0; blockIdx < BLOCK_COUNT; ++blockIdx) {
    4750:	c8 30       	cpi	r28, 0x08	; 8
    4752:	c1 f7       	brne	.-16     	; 0x4744 <memory_fw_manageNonVolatileData+0x8>
		}
	}

	// count of block that needed reloading of default values
	return ret;
}
    4754:	8d 2f       	mov	r24, r29
    4756:	df 91       	pop	r29
    4758:	cf 91       	pop	r28
    475a:	08 95       	ret

0000475c <ringbuffer_fw_getSemaphore>:


uint8_t ringbuffer_fw_getSemaphore(uint8_t isSend)
{
	uint8_t isLocked;
	uint8_t* semPtr = (isSend ?  &usbRingBufferSendSemaphore : &usbRingBufferRcvSemaphore);
    475c:	81 11       	cpse	r24, r1
    475e:	03 c0       	rjmp	.+6      	; 0x4766 <ringbuffer_fw_getSemaphore+0xa>
    4760:	e4 e2       	ldi	r30, 0x24	; 36
    4762:	f5 e0       	ldi	r31, 0x05	; 5
    4764:	02 c0       	rjmp	.+4      	; 0x476a <ringbuffer_fw_getSemaphore+0xe>
    4766:	e5 e2       	ldi	r30, 0x25	; 37
    4768:	f5 e0       	ldi	r31, 0x05	; 5
		  "=r" (sreg)
		: "p" (semPtr)
		: "r19"
	);
#else
	uint8_t sreg = SREG;
    476a:	8f b7       	in	r24, 0x3f	; 63
	cli();
    476c:	f8 94       	cli
	isLocked = *semPtr;
    476e:	90 81       	ld	r25, Z
	*semPtr = true;
    4770:	21 e0       	ldi	r18, 0x01	; 1
    4772:	20 83       	st	Z, r18
	SREG = sreg;
    4774:	8f bf       	out	0x3f, r24	; 63
#endif
	return !isLocked;
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	91 11       	cpse	r25, r1
    477a:	80 e0       	ldi	r24, 0x00	; 0
}
    477c:	08 95       	ret

0000477e <ringbuffer_fw_freeSemaphore>:
//static uint8_t ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len);
void ringbuffer_fw_freeSemaphore(uint8_t isSend)
{
	/* free semaphore */
	{
		uint8_t* semPtr = (isSend ?  &usbRingBufferSendSemaphore : &usbRingBufferRcvSemaphore);
    477e:	81 11       	cpse	r24, r1
    4780:	03 c0       	rjmp	.+6      	; 0x4788 <ringbuffer_fw_freeSemaphore+0xa>
    4782:	e4 e2       	ldi	r30, 0x24	; 36
    4784:	f5 e0       	ldi	r31, 0x05	; 5
    4786:	02 c0       	rjmp	.+4      	; 0x478c <ringbuffer_fw_freeSemaphore+0xe>
    4788:	e5 e2       	ldi	r30, 0x25	; 37
    478a:	f5 e0       	ldi	r31, 0x05	; 5
		uint8_t sreg = SREG;
    478c:	8f b7       	in	r24, 0x3f	; 63
		cli();
    478e:	f8 94       	cli
		*semPtr = false;
    4790:	10 82       	st	Z, r1
		SREG = sreg;
    4792:	8f bf       	out	0x3f, r24	; 63
    4794:	08 95       	ret

00004796 <ringbuffer_fw_ringBufferPush>:
	}
}

/*static*/ uint8_t ringbuffer_fw_ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
    4796:	8f 92       	push	r8
    4798:	9f 92       	push	r9
    479a:	af 92       	push	r10
    479c:	bf 92       	push	r11
    479e:	cf 92       	push	r12
    47a0:	df 92       	push	r13
    47a2:	ef 92       	push	r14
    47a4:	ff 92       	push	r15
    47a6:	0f 93       	push	r16
    47a8:	1f 93       	push	r17
    47aa:	cf 93       	push	r28
    47ac:	df 93       	push	r29
    47ae:	98 2f       	mov	r25, r24
	uint8_t retLen = 0;
	uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);

	uint8_t sreg = SREG;
    47b0:	8f b7       	in	r24, 0x3f	; 63
	cli();
    47b2:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    47b4:	99 23       	and	r25, r25
    47b6:	29 f0       	breq	.+10     	; 0x47c2 <ringbuffer_fw_ringBufferPush+0x2c>
    47b8:	30 91 29 05 	lds	r19, 0x0529	; 0x800529 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    47bc:	70 91 28 05 	lds	r23, 0x0528	; 0x800528 <usbRingBufferSendPullIdx>
    47c0:	04 c0       	rjmp	.+8      	; 0x47ca <ringbuffer_fw_ringBufferPush+0x34>
	uint8_t retLen = 0;
	uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    47c2:	30 91 27 05 	lds	r19, 0x0527	; 0x800527 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    47c6:	70 91 26 05 	lds	r23, 0x0526	; 0x800526 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    47ca:	8f bf       	out	0x3f, r24	; 63

	if (!(((pushIdx + 1) == pullIdx) || (((pushIdx + 1) == bufferSize) && !pullIdx))) {
    47cc:	a3 2f       	mov	r26, r19
    47ce:	b0 e0       	ldi	r27, 0x00	; 0
    47d0:	e7 2f       	mov	r30, r23
    47d2:	f0 e0       	ldi	r31, 0x00	; 0
    47d4:	8d 01       	movw	r16, r26
    47d6:	0f 5f       	subi	r16, 0xFF	; 255
    47d8:	1f 4f       	sbci	r17, 0xFF	; 255
    47da:	0e 17       	cp	r16, r30
    47dc:	1f 07       	cpc	r17, r31
    47de:	09 f4       	brne	.+2      	; 0x47e2 <ringbuffer_fw_ringBufferPush+0x4c>
    47e0:	75 c0       	rjmp	.+234    	; 0x48cc <ringbuffer_fw_ringBufferPush+0x136>
    47e2:	3f 37       	cpi	r19, 0x7F	; 127
    47e4:	19 f4       	brne	.+6      	; 0x47ec <ringbuffer_fw_ringBufferPush+0x56>
    47e6:	77 23       	and	r23, r23
    47e8:	09 f4       	brne	.+2      	; 0x47ec <ringbuffer_fw_ringBufferPush+0x56>
    47ea:	72 c0       	rjmp	.+228    	; 0x48d0 <ringbuffer_fw_ringBufferPush+0x13a>
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    47ec:	91 11       	cpse	r25, r1
    47ee:	07 c0       	rjmp	.+14     	; 0x47fe <ringbuffer_fw_ringBufferPush+0x68>
    47f0:	0f 2e       	mov	r0, r31
    47f2:	f9 e8       	ldi	r31, 0x89	; 137
    47f4:	ef 2e       	mov	r14, r31
    47f6:	f2 e0       	ldi	r31, 0x02	; 2
    47f8:	ff 2e       	mov	r15, r31
    47fa:	f0 2d       	mov	r31, r0
    47fc:	06 c0       	rjmp	.+12     	; 0x480a <ringbuffer_fw_ringBufferPush+0x74>
    47fe:	0f 2e       	mov	r0, r31
    4800:	f9 e0       	ldi	r31, 0x09	; 9
    4802:	ef 2e       	mov	r14, r31
    4804:	f3 e0       	ldi	r31, 0x03	; 3
    4806:	ff 2e       	mov	r15, r31
    4808:	f0 2d       	mov	r31, r0
		uint8_t lenTop = min((pullIdx > pushIdx ?  (pullIdx - pushIdx - 1) : bufferSize - pushIdx - (!pullIdx ?  1 : 0)), len);
    480a:	c2 2f       	mov	r28, r18
    480c:	d0 e0       	ldi	r29, 0x00	; 0
    480e:	37 17       	cp	r19, r23
    4810:	80 f4       	brcc	.+32     	; 0x4832 <ringbuffer_fw_ringBufferPush+0x9c>
    4812:	8f 01       	movw	r16, r30
    4814:	0a 1b       	sub	r16, r26
    4816:	1b 0b       	sbc	r17, r27
    4818:	01 50       	subi	r16, 0x01	; 1
    481a:	11 09       	sbc	r17, r1
    481c:	c0 17       	cp	r28, r16
    481e:	d1 07       	cpc	r29, r17
    4820:	0c f4       	brge	.+2      	; 0x4824 <ringbuffer_fw_ringBufferPush+0x8e>
    4822:	8e 01       	movw	r16, r28
    4824:	d0 2e       	mov	r13, r16
		uint8_t lenBot = min((((pullIdx > pushIdx) || !pullIdx) ?  0 : pullIdx - 1), len - lenTop);
    4826:	11 27       	eor	r17, r17
    4828:	c0 1b       	sub	r28, r16
    482a:	d1 0b       	sbc	r29, r17
    482c:	e0 e0       	ldi	r30, 0x00	; 0
    482e:	f0 e0       	ldi	r31, 0x00	; 0
    4830:	1a c0       	rjmp	.+52     	; 0x4866 <ringbuffer_fw_ringBufferPush+0xd0>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
	SREG = sreg;

	if (!(((pushIdx + 1) == pullIdx) || (((pushIdx + 1) == bufferSize) && !pullIdx))) {
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
		uint8_t lenTop = min((pullIdx > pushIdx ?  (pullIdx - pushIdx - 1) : bufferSize - pushIdx - (!pullIdx ?  1 : 0)), len);
    4832:	00 e8       	ldi	r16, 0x80	; 128
    4834:	10 e0       	ldi	r17, 0x00	; 0
    4836:	0a 1b       	sub	r16, r26
    4838:	1b 0b       	sbc	r17, r27
    483a:	a1 e0       	ldi	r26, 0x01	; 1
    483c:	b0 e0       	ldi	r27, 0x00	; 0
    483e:	77 23       	and	r23, r23
    4840:	11 f0       	breq	.+4      	; 0x4846 <ringbuffer_fw_ringBufferPush+0xb0>
    4842:	a0 e0       	ldi	r26, 0x00	; 0
    4844:	b0 e0       	ldi	r27, 0x00	; 0
    4846:	0a 1b       	sub	r16, r26
    4848:	1b 0b       	sbc	r17, r27
    484a:	c0 17       	cp	r28, r16
    484c:	d1 07       	cpc	r29, r17
    484e:	0c f4       	brge	.+2      	; 0x4852 <ringbuffer_fw_ringBufferPush+0xbc>
    4850:	8e 01       	movw	r16, r28
    4852:	d0 2e       	mov	r13, r16
		uint8_t lenBot = min((((pullIdx > pushIdx) || !pullIdx) ?  0 : pullIdx - 1), len - lenTop);
    4854:	11 27       	eor	r17, r17
    4856:	c0 1b       	sub	r28, r16
    4858:	d1 0b       	sbc	r29, r17
    485a:	77 23       	and	r23, r23
    485c:	11 f0       	breq	.+4      	; 0x4862 <ringbuffer_fw_ringBufferPush+0xcc>
    485e:	31 97       	sbiw	r30, 0x01	; 1
    4860:	02 c0       	rjmp	.+4      	; 0x4866 <ringbuffer_fw_ringBufferPush+0xd0>
    4862:	e0 e0       	ldi	r30, 0x00	; 0
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	ec 17       	cp	r30, r28
    4868:	fd 07       	cpc	r31, r29
    486a:	0c f4       	brge	.+2      	; 0x486e <ringbuffer_fw_ringBufferPush+0xd8>
    486c:	ef 01       	movw	r28, r30
    486e:	5a 01       	movw	r10, r20
    4870:	86 2e       	mov	r8, r22
    4872:	99 2e       	mov	r9, r25
    4874:	cc 2e       	mov	r12, r28

		if (lenTop) {
    4876:	dd 20       	and	r13, r13
    4878:	39 f0       	breq	.+14     	; 0x4888 <ringbuffer_fw_ringBufferPush+0xf2>
			memory_fw_copyBuffer(isPgm, &(ringBuffer[pushIdx]), inData, lenTop);
    487a:	b7 01       	movw	r22, r14
    487c:	63 0f       	add	r22, r19
    487e:	71 1d       	adc	r23, r1
    4880:	98 01       	movw	r18, r16
    4882:	88 2d       	mov	r24, r8
    4884:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			retLen += lenTop;
		}

		if (lenBot) {
    4888:	cc 20       	and	r12, r12
    488a:	51 f0       	breq	.+20     	; 0x48a0 <ringbuffer_fw_ringBufferPush+0x10a>
    488c:	9e 01       	movw	r18, r28
    488e:	33 27       	eor	r19, r19
			memory_fw_copyBuffer(isPgm, &(ringBuffer[0]), &(inData[lenTop]), lenBot);
    4890:	a5 01       	movw	r20, r10
    4892:	40 0f       	add	r20, r16
    4894:	51 1f       	adc	r21, r17
    4896:	b7 01       	movw	r22, r14
    4898:	88 2d       	mov	r24, r8
    489a:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
			retLen += lenBot;
    489e:	dc 0c       	add	r13, r12
		}

		// advance the index
		if (isSend) {
    48a0:	99 20       	and	r9, r9
    48a2:	51 f0       	breq	.+20     	; 0x48b8 <ringbuffer_fw_ringBufferPush+0x122>
			uint8_t sreg = SREG;
    48a4:	9f b7       	in	r25, 0x3f	; 63
			cli();
    48a6:	f8 94       	cli
			usbRingBufferSendPushIdx += retLen;
    48a8:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <usbRingBufferSendPushIdx>
    48ac:	8d 0d       	add	r24, r13
			usbRingBufferSendPushIdx %= bufferSize;
    48ae:	8f 77       	andi	r24, 0x7F	; 127
    48b0:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <usbRingBufferSendPushIdx>
			SREG = sreg;
    48b4:	9f bf       	out	0x3f, r25	; 63
    48b6:	0d c0       	rjmp	.+26     	; 0x48d2 <ringbuffer_fw_ringBufferPush+0x13c>

		} else {
			uint8_t sreg = SREG;
    48b8:	9f b7       	in	r25, 0x3f	; 63
			cli();
    48ba:	f8 94       	cli
			usbRingBufferRcvPushIdx += retLen;
    48bc:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <usbRingBufferRcvPushIdx>
    48c0:	8d 0d       	add	r24, r13
			usbRingBufferRcvPushIdx %= bufferSize;
    48c2:	8f 77       	andi	r24, 0x7F	; 127
    48c4:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <usbRingBufferRcvPushIdx>
			SREG = sreg;
    48c8:	9f bf       	out	0x3f, r25	; 63
    48ca:	03 c0       	rjmp	.+6      	; 0x48d2 <ringbuffer_fw_ringBufferPush+0x13c>
	}
}

/*static*/ uint8_t ringbuffer_fw_ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
	uint8_t retLen = 0;
    48cc:	d1 2c       	mov	r13, r1
    48ce:	01 c0       	rjmp	.+2      	; 0x48d2 <ringbuffer_fw_ringBufferPush+0x13c>
    48d0:	d1 2c       	mov	r13, r1
			usbRingBufferRcvPushIdx %= bufferSize;
			SREG = sreg;
		}
	}
	return retLen;
}
    48d2:	8d 2d       	mov	r24, r13
    48d4:	df 91       	pop	r29
    48d6:	cf 91       	pop	r28
    48d8:	1f 91       	pop	r17
    48da:	0f 91       	pop	r16
    48dc:	ff 90       	pop	r15
    48de:	ef 90       	pop	r14
    48e0:	df 90       	pop	r13
    48e2:	cf 90       	pop	r12
    48e4:	bf 90       	pop	r11
    48e6:	af 90       	pop	r10
    48e8:	9f 90       	pop	r9
    48ea:	8f 90       	pop	r8
    48ec:	08 95       	ret

000048ee <ringbuffer_fw_ringBufferPull>:

uint8_t ringbuffer_fw_ringBufferPull(uint8_t isSend, uchar outData[], uint8_t size)
{
    48ee:	9f 92       	push	r9
    48f0:	af 92       	push	r10
    48f2:	bf 92       	push	r11
    48f4:	cf 92       	push	r12
    48f6:	df 92       	push	r13
    48f8:	ef 92       	push	r14
    48fa:	ff 92       	push	r15
    48fc:	0f 93       	push	r16
    48fe:	1f 93       	push	r17
    4900:	cf 93       	push	r28
    4902:	df 93       	push	r29
	uint8_t len = 0;

	uint8_t sreg = SREG;
    4904:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4906:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4908:	88 23       	and	r24, r24
    490a:	29 f0       	breq	.+10     	; 0x4916 <ringbuffer_fw_ringBufferPull+0x28>
    490c:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4910:	50 91 28 05 	lds	r21, 0x0528	; 0x800528 <usbRingBufferSendPullIdx>
    4914:	04 c0       	rjmp	.+8      	; 0x491e <ringbuffer_fw_ringBufferPull+0x30>
{
	uint8_t len = 0;

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4916:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    491a:	50 91 26 05 	lds	r21, 0x0526	; 0x800526 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    491e:	2f bf       	out	0x3f, r18	; 63

	if ((pushIdx != pullIdx) && (size > 1)) {
    4920:	95 17       	cp	r25, r21
    4922:	09 f4       	brne	.+2      	; 0x4926 <ringbuffer_fw_ringBufferPull+0x38>
    4924:	63 c0       	rjmp	.+198    	; 0x49ec <ringbuffer_fw_ringBufferPull+0xfe>
    4926:	42 30       	cpi	r20, 0x02	; 2
    4928:	08 f4       	brcc	.+2      	; 0x492c <ringbuffer_fw_ringBufferPull+0x3e>
    492a:	60 c0       	rjmp	.+192    	; 0x49ec <ringbuffer_fw_ringBufferPull+0xfe>
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    492c:	81 11       	cpse	r24, r1
    492e:	03 c0       	rjmp	.+6      	; 0x4936 <ringbuffer_fw_ringBufferPull+0x48>
    4930:	09 e8       	ldi	r16, 0x89	; 137
    4932:	12 e0       	ldi	r17, 0x02	; 2
    4934:	02 c0       	rjmp	.+4      	; 0x493a <ringbuffer_fw_ringBufferPull+0x4c>
    4936:	09 e0       	ldi	r16, 0x09	; 9
    4938:	13 e0       	ldi	r17, 0x03	; 3
		uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);
		uint8_t lenTop = min((pushIdx > pullIdx ?  (pushIdx - pullIdx) : bufferSize - pullIdx), size - 1);
    493a:	c4 2f       	mov	r28, r20
    493c:	d0 e0       	ldi	r29, 0x00	; 0
    493e:	21 97       	sbiw	r28, 0x01	; 1
    4940:	59 17       	cp	r21, r25
    4942:	80 f4       	brcc	.+32     	; 0x4964 <ringbuffer_fw_ringBufferPull+0x76>
    4944:	29 2f       	mov	r18, r25
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	25 1b       	sub	r18, r21
    494a:	31 09       	sbc	r19, r1
    494c:	c2 17       	cp	r28, r18
    494e:	d3 07       	cpc	r29, r19
    4950:	0c f4       	brge	.+2      	; 0x4954 <ringbuffer_fw_ringBufferPull+0x66>
    4952:	9e 01       	movw	r18, r28
    4954:	e2 2e       	mov	r14, r18
		uint8_t lenBot = min((pushIdx > pullIdx ?  0 : pushIdx), size - 1 - lenTop);
    4956:	69 01       	movw	r12, r18
    4958:	dd 24       	eor	r13, r13
    495a:	cc 19       	sub	r28, r12
    495c:	dd 09       	sbc	r29, r13
    495e:	20 e0       	ldi	r18, 0x00	; 0
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	0f c0       	rjmp	.+30     	; 0x4982 <ringbuffer_fw_ringBufferPull+0x94>
	SREG = sreg;

	if ((pushIdx != pullIdx) && (size > 1)) {
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
		uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);
		uint8_t lenTop = min((pushIdx > pullIdx ?  (pushIdx - pullIdx) : bufferSize - pullIdx), size - 1);
    4964:	20 e8       	ldi	r18, 0x80	; 128
    4966:	30 e0       	ldi	r19, 0x00	; 0
    4968:	25 1b       	sub	r18, r21
    496a:	31 09       	sbc	r19, r1
    496c:	c2 17       	cp	r28, r18
    496e:	d3 07       	cpc	r29, r19
    4970:	0c f4       	brge	.+2      	; 0x4974 <ringbuffer_fw_ringBufferPull+0x86>
    4972:	9e 01       	movw	r18, r28
    4974:	e2 2e       	mov	r14, r18
		uint8_t lenBot = min((pushIdx > pullIdx ?  0 : pushIdx), size - 1 - lenTop);
    4976:	69 01       	movw	r12, r18
    4978:	dd 24       	eor	r13, r13
    497a:	cc 19       	sub	r28, r12
    497c:	dd 09       	sbc	r29, r13
    497e:	29 2f       	mov	r18, r25
    4980:	30 e0       	ldi	r19, 0x00	; 0
    4982:	2c 17       	cp	r18, r28
    4984:	3d 07       	cpc	r19, r29
    4986:	0c f4       	brge	.+2      	; 0x498a <ringbuffer_fw_ringBufferPull+0x9c>
    4988:	e9 01       	movw	r28, r18
    498a:	5b 01       	movw	r10, r22
    498c:	f8 2e       	mov	r15, r24
    498e:	9c 2e       	mov	r9, r28

		if (lenTop) {
    4990:	ee 20       	and	r14, r14
    4992:	39 f0       	breq	.+14     	; 0x49a2 <ringbuffer_fw_ringBufferPull+0xb4>
			memcpy(outData, &(ringBuffer[pullIdx]), lenTop);
    4994:	b8 01       	movw	r22, r16
    4996:	65 0f       	add	r22, r21
    4998:	71 1d       	adc	r23, r1
    499a:	a6 01       	movw	r20, r12
    499c:	c5 01       	movw	r24, r10
    499e:	0e 94 cc 3c 	call	0x7998	; 0x7998 <memcpy>
			len += lenTop;
		}

		if (lenBot) {
    49a2:	99 20       	and	r9, r9
    49a4:	49 f0       	breq	.+18     	; 0x49b8 <ringbuffer_fw_ringBufferPull+0xca>
    49a6:	ae 01       	movw	r20, r28
    49a8:	55 27       	eor	r21, r21
			memcpy(&(outData[lenTop]), &(ringBuffer[0]), lenBot);
    49aa:	b8 01       	movw	r22, r16
    49ac:	c5 01       	movw	r24, r10
    49ae:	8c 0d       	add	r24, r12
    49b0:	9d 1d       	adc	r25, r13
    49b2:	0e 94 cc 3c 	call	0x7998	; 0x7998 <memcpy>
			len += lenBot;
    49b6:	e9 0c       	add	r14, r9
		}

		outData[len] = 0;
    49b8:	f5 01       	movw	r30, r10
    49ba:	ee 0d       	add	r30, r14
    49bc:	f1 1d       	adc	r31, r1
    49be:	10 82       	st	Z, r1

		// advance the index
		if (isSend) {
    49c0:	ff 20       	and	r15, r15
    49c2:	51 f0       	breq	.+20     	; 0x49d8 <ringbuffer_fw_ringBufferPull+0xea>
			uint8_t sreg = SREG;
    49c4:	9f b7       	in	r25, 0x3f	; 63
			cli();
    49c6:	f8 94       	cli
			usbRingBufferSendPullIdx += len;
    49c8:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <usbRingBufferSendPullIdx>
    49cc:	8e 0d       	add	r24, r14
			usbRingBufferSendPullIdx %= bufferSize;
    49ce:	8f 77       	andi	r24, 0x7F	; 127
    49d0:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <usbRingBufferSendPullIdx>
			SREG = sreg;
    49d4:	9f bf       	out	0x3f, r25	; 63
    49d6:	11 c0       	rjmp	.+34     	; 0x49fa <ringbuffer_fw_ringBufferPull+0x10c>

		} else {
			uint8_t sreg = SREG;
    49d8:	9f b7       	in	r25, 0x3f	; 63
			cli();
    49da:	f8 94       	cli
			usbRingBufferRcvPullIdx += len;
    49dc:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <usbRingBufferRcvPullIdx>
    49e0:	8e 0d       	add	r24, r14
			usbRingBufferRcvPullIdx %= bufferSize;
    49e2:	8f 77       	andi	r24, 0x7F	; 127
    49e4:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <usbRingBufferRcvPullIdx>
			SREG = sreg;
    49e8:	9f bf       	out	0x3f, r25	; 63
    49ea:	07 c0       	rjmp	.+14     	; 0x49fa <ringbuffer_fw_ringBufferPull+0x10c>
		}
	} else if (!size) {
    49ec:	41 11       	cpse	r20, r1
    49ee:	04 c0       	rjmp	.+8      	; 0x49f8 <ringbuffer_fw_ringBufferPull+0x10a>
		outData[0] = 0;
    49f0:	fb 01       	movw	r30, r22
    49f2:	10 82       	st	Z, r1
	return retLen;
}

uint8_t ringbuffer_fw_ringBufferPull(uint8_t isSend, uchar outData[], uint8_t size)
{
	uint8_t len = 0;
    49f4:	e1 2c       	mov	r14, r1
    49f6:	01 c0       	rjmp	.+2      	; 0x49fa <ringbuffer_fw_ringBufferPull+0x10c>
    49f8:	e1 2c       	mov	r14, r1
		}
	} else if (!size) {
		outData[0] = 0;
	}
	return len;
}
    49fa:	8e 2d       	mov	r24, r14
    49fc:	df 91       	pop	r29
    49fe:	cf 91       	pop	r28
    4a00:	1f 91       	pop	r17
    4a02:	0f 91       	pop	r16
    4a04:	ff 90       	pop	r15
    4a06:	ef 90       	pop	r14
    4a08:	df 90       	pop	r13
    4a0a:	cf 90       	pop	r12
    4a0c:	bf 90       	pop	r11
    4a0e:	af 90       	pop	r10
    4a10:	9f 90       	pop	r9
    4a12:	08 95       	ret

00004a14 <ringbuffer_fw_getStatusNextMsg>:

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;

	uint8_t sreg = SREG;
    4a14:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4a16:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4a18:	88 23       	and	r24, r24
    4a1a:	49 f0       	breq	.+18     	; 0x4a2e <ringbuffer_fw_getStatusNextMsg+0x1a>
    4a1c:	20 91 29 05 	lds	r18, 0x0529	; 0x800529 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4a20:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <usbRingBufferSendPullIdx>
	SREG = sreg;
    4a24:	9f bf       	out	0x3f, r25	; 63

	if (pullIdx != pushIdx) {
    4a26:	28 13       	cpse	r18, r24
    4a28:	0c c0       	rjmp	.+24     	; 0x4a42 <ringbuffer_fw_getStatusNextMsg+0x2e>
	return len;
}

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	08 95       	ret

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4a2e:	20 91 27 05 	lds	r18, 0x0527	; 0x800527 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4a32:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    4a36:	9f bf       	out	0x3f, r25	; 63

	if (pullIdx != pushIdx) {
    4a38:	28 17       	cp	r18, r24
    4a3a:	61 f0       	breq	.+24     	; 0x4a54 <ringbuffer_fw_getStatusNextMsg+0x40>
		status |= RINGBUFFER_MSG_STATUS_AVAIL;

		/* test for NMEA message */
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    4a3c:	e9 e8       	ldi	r30, 0x89	; 137
    4a3e:	f2 e0       	ldi	r31, 0x02	; 2
    4a40:	02 c0       	rjmp	.+4      	; 0x4a46 <ringbuffer_fw_getStatusNextMsg+0x32>
    4a42:	e9 e0       	ldi	r30, 0x09	; 9
    4a44:	f3 e0       	ldi	r31, 0x03	; 3
		if (*(ringBuffer + pullIdx) == MSG_PATTERN_NMEA) {	// first character identifies message type
    4a46:	e8 0f       	add	r30, r24
    4a48:	f1 1d       	adc	r31, r1
    4a4a:	80 81       	ld	r24, Z
    4a4c:	84 32       	cpi	r24, 0x24	; 36
    4a4e:	21 f4       	brne	.+8      	; 0x4a58 <ringbuffer_fw_getStatusNextMsg+0x44>
			status |= RINGBUFFER_MSG_STATUS_IS_NMEA;
    4a50:	81 e1       	ldi	r24, 0x11	; 17
    4a52:	08 95       	ret
	return len;
}

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	08 95       	ret
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
	SREG = sreg;

	if (pullIdx != pushIdx) {
		status |= RINGBUFFER_MSG_STATUS_AVAIL;
    4a58:	81 e0       	ldi	r24, 0x01	; 1
		if (*(ringBuffer + pullIdx) == MSG_PATTERN_NMEA) {	// first character identifies message type
			status |= RINGBUFFER_MSG_STATUS_IS_NMEA;
		}
	}
	return status;
}
    4a5a:	08 95       	ret

00004a5c <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore>:

void ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore(uint8_t isSend)
{
    4a5c:	cf 93       	push	r28
    4a5e:	c8 2f       	mov	r28, r24
	for (;;) {
		if (ringbuffer_fw_getSemaphore(isSend)) {
    4a60:	8c 2f       	mov	r24, r28
    4a62:	0e 94 ae 23 	call	0x475c	; 0x475c <ringbuffer_fw_getSemaphore>
    4a66:	88 23       	and	r24, r24
    4a68:	c9 f0       	breq	.+50     	; 0x4a9c <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x40>
			uint8_t pushIdx;
			uint8_t pullIdx;

			if (isSend) {
    4a6a:	cc 23       	and	r28, r28
    4a6c:	41 f0       	breq	.+16     	; 0x4a7e <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x22>
				uint8_t sreg = SREG;
    4a6e:	2f b7       	in	r18, 0x3f	; 63
				cli();
    4a70:	f8 94       	cli
				pushIdx = usbRingBufferSendPushIdx;
    4a72:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <usbRingBufferSendPushIdx>
				pullIdx = usbRingBufferSendPullIdx;
    4a76:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <usbRingBufferSendPullIdx>
				SREG = sreg;
    4a7a:	2f bf       	out	0x3f, r18	; 63
    4a7c:	07 c0       	rjmp	.+14     	; 0x4a8c <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x30>

			} else {
				uint8_t sreg = SREG;
    4a7e:	2f b7       	in	r18, 0x3f	; 63
				cli();
    4a80:	f8 94       	cli
				pushIdx = usbRingBufferRcvPushIdx;
    4a82:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <usbRingBufferRcvPushIdx>
				pullIdx = usbRingBufferRcvPullIdx;
    4a86:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <usbRingBufferRcvPullIdx>
				SREG = sreg;
    4a8a:	2f bf       	out	0x3f, r18	; 63
			}

			if (pullIdx == pushIdx) {
    4a8c:	98 17       	cp	r25, r24
    4a8e:	51 f0       	breq	.+20     	; 0x4aa4 <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x48>
				// buffer is empty, break loop and hold semaphore
				break;
			}

			ringbuffer_fw_freeSemaphore(isSend);
    4a90:	8c 2f       	mov	r24, r28
    4a92:	0e 94 bf 23 	call	0x477e	; 0x477e <ringbuffer_fw_freeSemaphore>

			// give the CPU away for a moment to delay, do not use giveAway() that would make a loop
		    wdt_reset();
    4a96:	a8 95       	wdr
		    usbPoll();
    4a98:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <usbPoll>
		}

		// give the CPU away for a moment to delay, do not use giveAway() that would make a loop
	    wdt_reset();
    4a9c:	a8 95       	wdr
	    usbPoll();
    4a9e:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <usbPoll>
	}
    4aa2:	de cf       	rjmp	.-68     	; 0x4a60 <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore+0x4>
}
    4aa4:	cf 91       	pop	r28
    4aa6:	08 95       	ret

00004aa8 <ringbuffer_fw_ringBufferWaitAppend>:

uint8_t ringbuffer_fw_ringBufferWaitAppend(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
    4aa8:	ff 92       	push	r15
    4aaa:	0f 93       	push	r16
    4aac:	1f 93       	push	r17
    4aae:	cf 93       	push	r28
    4ab0:	df 93       	push	r29
    4ab2:	c8 2f       	mov	r28, r24
    4ab4:	d6 2f       	mov	r29, r22
    4ab6:	8a 01       	movw	r16, r20
    4ab8:	f2 2e       	mov	r15, r18
	ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore(isSend);
    4aba:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore>
    uint8_t retLen = ringbuffer_fw_ringBufferPush(isSend, isPgm, inData, len);
    4abe:	2f 2d       	mov	r18, r15
    4ac0:	a8 01       	movw	r20, r16
    4ac2:	6d 2f       	mov	r22, r29
    4ac4:	8c 2f       	mov	r24, r28
    4ac6:	0e 94 cb 23 	call	0x4796	; 0x4796 <ringbuffer_fw_ringBufferPush>
    4aca:	d8 2f       	mov	r29, r24
	ringbuffer_fw_freeSemaphore(isSend);
    4acc:	8c 2f       	mov	r24, r28
    4ace:	0e 94 bf 23 	call	0x477e	; 0x477e <ringbuffer_fw_freeSemaphore>
    return retLen;
}
    4ad2:	8d 2f       	mov	r24, r29
    4ad4:	df 91       	pop	r29
    4ad6:	cf 91       	pop	r28
    4ad8:	1f 91       	pop	r17
    4ada:	0f 91       	pop	r16
    4adc:	ff 90       	pop	r15
    4ade:	08 95       	ret

00004ae0 <serial_fw_sendNmea>:
	return (serialCtxtTxBufferLen > 0) ?  true : false;
}

static void serial_fw_sendNmea(void)
{
	uint8_t sreg = SREG;
    4ae0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4ae2:	f8 94       	cli

	/* clear TRANSMIT COMPLETE */
	UCSR0A &= ~(_BV(TXC0));
    4ae4:	e0 ec       	ldi	r30, 0xC0	; 192
    4ae6:	f0 e0       	ldi	r31, 0x00	; 0
    4ae8:	80 81       	ld	r24, Z
    4aea:	8f 7b       	andi	r24, 0xBF	; 191
    4aec:	80 83       	st	Z, r24

	/* initial load of USART data register, after this the ISR will handle it until the serial TX buffer is completed */
	UDR0 = serialCtxtTxBuffer[serialCtxtTxBufferIdx++];
    4aee:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <serialCtxtTxBufferIdx>
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	8e 0f       	add	r24, r30
    4af6:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <serialCtxtTxBufferIdx>
    4afa:	f0 e0       	ldi	r31, 0x00	; 0
    4afc:	e7 53       	subi	r30, 0x37	; 55
    4afe:	fe 4f       	sbci	r31, 0xFE	; 254
    4b00:	80 81       	ld	r24, Z
    4b02:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	SREG = sreg;
    4b06:	9f bf       	out	0x3f, r25	; 63

	/* enable DATA REGISTER EMPTY INTERRUPT - the interrupt will arrive after initial UDSR0 loading */
	UART_CTRL |= _BV(UDRIE0);								// this will shoot an interrupt because UDR0 is ready again to be filled (UDRE0 is true)
    4b08:	e1 ec       	ldi	r30, 0xC1	; 193
    4b0a:	f0 e0       	ldi	r31, 0x00	; 0
    4b0c:	80 81       	ld	r24, Z
    4b0e:	80 62       	ori	r24, 0x20	; 32
    4b10:	80 83       	st	Z, r24
    4b12:	08 95       	ret

00004b14 <serial_fw_close>:
}

void serial_fw_close(void)
{
	// interrupt: clearing Global Interrupt Flag when interrupts are changed
	uint8_t sreg = SREG;
    4b14:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4b16:	f8 94       	cli
	UART_CTRL = UART_CTRL & ~(_BV(RXCIE0)					|			// UCSR0B: disable all serial interrupts,
    4b18:	e1 ec       	ldi	r30, 0xC1	; 193
    4b1a:	f0 e0       	ldi	r31, 0x00	; 0
    4b1c:	80 81       	ld	r24, Z
    4b1e:	87 70       	andi	r24, 0x07	; 7
    4b20:	80 83       	st	Z, r24
							  _BV(TXCIE0)					|
							  _BV(UDRIE0)					|
							  _BV(RXEN0)					|			// and TX/RX ports
							  _BV(TXEN0));
	SREG = sreg;
    4b22:	9f bf       	out	0x3f, r25	; 63
#ifdef UART_DOUBLESPEED
		UART_STATUS &= ~(_BV(UART_DOUBLE));
#endif

	// setting IO pins: pull-up off
	UART_PORT &= ~(_BV(UART_RX_PNUM));									// RX pull-up off
    4b24:	58 98       	cbi	0x0b, 0	; 11

	/* no more power is needed for this module */
	PRR |= _BV(PRUSART0);
    4b26:	e4 e6       	ldi	r30, 0x64	; 100
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	80 81       	ld	r24, Z
    4b2c:	82 60       	ori	r24, 0x02	; 2
    4b2e:	80 83       	st	Z, r24
    4b30:	08 95       	ret

00004b32 <serial_fw_serRxIsrOn>:
}

void serial_fw_serRxIsrOn(uint8_t flag)
{
	if (flag) {
    4b32:	88 23       	and	r24, r24
    4b34:	49 f0       	breq	.+18     	; 0x4b48 <serial_fw_serRxIsrOn+0x16>
		// interrupt: clearing Global Interrupt Flag when interrupts are changed
		uint8_t sreg = SREG;
    4b36:	9f b7       	in	r25, 0x3f	; 63
		cli();
    4b38:	f8 94       	cli
		UART_CTRL |= _BV(RXCIE0);											// UCSR0B: enable interrupts for RX data received
    4b3a:	e1 ec       	ldi	r30, 0xC1	; 193
    4b3c:	f0 e0       	ldi	r31, 0x00	; 0
    4b3e:	80 81       	ld	r24, Z
    4b40:	80 68       	ori	r24, 0x80	; 128
    4b42:	80 83       	st	Z, r24
		SREG = sreg;
    4b44:	9f bf       	out	0x3f, r25	; 63
    4b46:	08 95       	ret

	} else {
		// interrupt: clearing Global Interrupt Flag when interrupts are changed
		uint8_t sreg = SREG;
    4b48:	9f b7       	in	r25, 0x3f	; 63
		cli();
    4b4a:	f8 94       	cli
		UART_CTRL &= ~(_BV(RXCIE0));										// UCSR0B: disable interrupts for RX data received
    4b4c:	e1 ec       	ldi	r30, 0xC1	; 193
    4b4e:	f0 e0       	ldi	r31, 0x00	; 0
    4b50:	80 81       	ld	r24, Z
    4b52:	8f 77       	andi	r24, 0x7F	; 127
    4b54:	80 83       	st	Z, r24
		SREG = sreg;
    4b56:	9f bf       	out	0x3f, r25	; 63
    4b58:	08 95       	ret

00004b5a <serial_fw_setCommBaud>:
	}
}

void serial_fw_setCommBaud(uint16_t baud)
{
    4b5a:	9c 01       	movw	r18, r24
	UART_BAUD_HIGH = ((UART_CALC_BAUDRATE(baud)>>8) & 0xff);
    4b5c:	bc 01       	movw	r22, r24
    4b5e:	76 95       	lsr	r23
    4b60:	67 95       	ror	r22
    4b62:	cb 01       	movw	r24, r22
    4b64:	a0 e0       	ldi	r26, 0x00	; 0
    4b66:	b0 e0       	ldi	r27, 0x00	; 0
    4b68:	bc 01       	movw	r22, r24
    4b6a:	cd 01       	movw	r24, r26
    4b6c:	60 53       	subi	r22, 0x30	; 48
    4b6e:	7d 4e       	sbci	r23, 0xED	; 237
    4b70:	8c 4e       	sbci	r24, 0xEC	; 236
    4b72:	9f 4f       	sbci	r25, 0xFF	; 255
    4b74:	40 e0       	ldi	r20, 0x00	; 0
    4b76:	50 e0       	ldi	r21, 0x00	; 0
    4b78:	0e 94 14 3b 	call	0x7628	; 0x7628 <__udivmodsi4>
    4b7c:	da 01       	movw	r26, r20
    4b7e:	c9 01       	movw	r24, r18
    4b80:	01 97       	sbiw	r24, 0x01	; 1
    4b82:	a1 09       	sbc	r26, r1
    4b84:	b1 09       	sbc	r27, r1
    4b86:	89 2f       	mov	r24, r25
    4b88:	9a 2f       	mov	r25, r26
    4b8a:	ab 2f       	mov	r26, r27
    4b8c:	bb 27       	eor	r27, r27
    4b8e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UART_BAUD_LOW  = ( UART_CALC_BAUDRATE(baud)     & 0xff);
    4b92:	21 50       	subi	r18, 0x01	; 1
    4b94:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4b98:	08 95       	ret

00004b9a <serial_fw_init>:
}

void serial_fw_init(void)
{
	/* power up this module */
	PRR &= ~(_BV(PRUSART0));
    4b9a:	e4 e6       	ldi	r30, 0x64	; 100
    4b9c:	f0 e0       	ldi	r31, 0x00	; 0
    4b9e:	80 81       	ld	r24, Z
    4ba0:	8d 7f       	andi	r24, 0xFD	; 253
    4ba2:	80 83       	st	Z, r24

	// setting IO pins: pull-up on
	MCUCR     &= ~(_BV(PUD));											// ensure PUD is off --> activation of all pull-ups
    4ba4:	85 b7       	in	r24, 0x35	; 53
    4ba6:	8f 7e       	andi	r24, 0xEF	; 239
    4ba8:	85 bf       	out	0x35, r24	; 53
	UART_PORT |=   _BV(UART_RX_PNUM);									// RX pull-up on
    4baa:	58 9a       	sbi	0x0b, 0	; 11

	/* read GPS coefficients */
	if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_GPS_NR)) {
    4bac:	63 e0       	ldi	r22, 0x03	; 3
    4bae:	8f e8       	ldi	r24, 0x8F	; 143
    4bb0:	93 e0       	ldi	r25, 0x03	; 3
    4bb2:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <memory_fw_readEepromValidBlock>
    4bb6:	88 23       	and	r24, r24
    4bb8:	a1 f0       	breq	.+40     	; 0x4be2 <serial_fw_init+0x48>
		eeprom_b03_t* b03 = (eeprom_b03_t*) &mainFormatBuffer;
		serialCoef_b03_serial_baud = b03->b03_serial_baud;
    4bba:	ef e8       	ldi	r30, 0x8F	; 143
    4bbc:	f3 e0       	ldi	r31, 0x03	; 3
    4bbe:	80 81       	ld	r24, Z
    4bc0:	91 81       	ldd	r25, Z+1	; 0x01
    4bc2:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <serialCoef_b03_serial_baud+0x1>
    4bc6:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <serialCoef_b03_serial_baud>
		serialCoef_b03_bitsParityStopbits = b03->b03_serial_bitsParityStopbits;
    4bca:	82 81       	ldd	r24, Z+2	; 0x02
    4bcc:	93 81       	ldd	r25, Z+3	; 0x03
    4bce:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <serialCoef_b03_bitsParityStopbits+0x1>
    4bd2:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <serialCoef_b03_bitsParityStopbits>
		serialCoef_b03_gps_comm_mode = b03->b03_gps_comm_mode;
    4bd6:	84 81       	ldd	r24, Z+4	; 0x04
    4bd8:	95 81       	ldd	r25, Z+5	; 0x05
    4bda:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <serialCoef_b03_gps_comm_mode+0x1>
    4bde:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <serialCoef_b03_gps_comm_mode>
	}

	// setting baud rate
	serial_fw_setCommBaud(serialCoef_b03_serial_baud);
    4be2:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <serialCoef_b03_serial_baud>
    4be6:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <serialCoef_b03_serial_baud+0x1>
    4bea:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <serial_fw_setCommBaud>
#ifdef UART_DOUBLESPEED
	UART_STATUS = _BV(UART_DOUBLE);										// UCSR0A: U2X0
#endif

	// enabling the Transmitter and the Receiver
	UART_CTRL  =  _BV(RXEN0) 	|										// RXEN0=1,
    4bee:	88 e1       	ldi	r24, 0x18	; 24
    4bf0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
				  _BV(TXEN0);											// TXEN0=1

	// setting frame format
	UART_CTRL2 = (0b00<<UMSEL00) 															|	// UCSR0C: asynchronous USART,
				 (( getCommParity(serialCoef_b03_bitsParityStopbits)		& 0b11)<<UPM00)	|	// parity 0=off, 2=even, 3=odd, 1=(do not use)
    4bf4:	20 91 20 05 	lds	r18, 0x0520	; 0x800520 <serialCoef_b03_bitsParityStopbits>
    4bf8:	30 91 21 05 	lds	r19, 0x0521	; 0x800521 <serialCoef_b03_bitsParityStopbits+0x1>
	// enabling the Transmitter and the Receiver
	UART_CTRL  =  _BV(RXEN0) 	|										// RXEN0=1,
				  _BV(TXEN0);											// TXEN0=1

	// setting frame format
	UART_CTRL2 = (0b00<<UMSEL00) 															|	// UCSR0C: asynchronous USART,
    4bfc:	83 e0       	ldi	r24, 0x03	; 3
    4bfe:	82 0f       	add	r24, r18
    4c00:	83 70       	andi	r24, 0x03	; 3
    4c02:	88 0f       	add	r24, r24
    4c04:	93 2f       	mov	r25, r19
    4c06:	90 73       	andi	r25, 0x30	; 48
    4c08:	89 2b       	or	r24, r25
	return (val & DEFAULT_PARITY_N0_E2_O3_MASK) >> DEFAULT_PARITY_N0_E2_O3_BITPOS;
}

static uint16_t getCommStopBits(uint16_t val)
{
	return (val & DEFAULT_STOPBITS_MASK) >> DEFAULT_STOPBITS_BITPOS;
    4c0a:	22 27       	eor	r18, r18
    4c0c:	33 70       	andi	r19, 0x03	; 3
	// enabling the Transmitter and the Receiver
	UART_CTRL  =  _BV(RXEN0) 	|										// RXEN0=1,
				  _BV(TXEN0);											// TXEN0=1

	// setting frame format
	UART_CTRL2 = (0b00<<UMSEL00) 															|	// UCSR0C: asynchronous USART,
    4c0e:	9f ef       	ldi	r25, 0xFF	; 255
    4c10:	93 0f       	add	r25, r19
    4c12:	91 70       	andi	r25, 0x01	; 1
    4c14:	99 0f       	add	r25, r25
    4c16:	99 0f       	add	r25, r25
    4c18:	99 0f       	add	r25, r25
    4c1a:	89 2b       	or	r24, r25
    4c1c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				 (( getCommParity(serialCoef_b03_bitsParityStopbits)		& 0b11)<<UPM00)	|	// parity 0=off, 2=even, 3=odd, 1=(do not use)
				 (((getCommStopBits(serialCoef_b03_bitsParityStopbits) - 1)	&  0b1)<<USBS0) |	// stop bits == 2
				 (((getCommDataBits(serialCoef_b03_bitsParityStopbits) - 5)	& 0b11)<<UCSZ00);	// bits 5..8

	// this is a dummy operation to clear the RX ready bit
	serialCtxtTxBufferIdx = UDR0;
    4c20:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	serialCtxtTxBufferIdx = 0;
    4c24:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <serialCtxtTxBufferIdx>

	serial_fw_serRxIsrOn(true);
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	0e 94 99 25 	call	0x4b32	; 0x4b32 <serial_fw_serRxIsrOn>
    4c2e:	08 95       	ret

00004c30 <serial_fw_isTxRunning>:
	UART_BAUD_LOW  = ( UART_CALC_BAUDRATE(baud)     & 0xff);
}

uint8_t serial_fw_isTxRunning(void)
{
	return (serialCtxtTxBufferLen > 0) ?  true : false;
    4c30:	81 e0       	ldi	r24, 0x01	; 1
    4c32:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4c36:	91 11       	cpse	r25, r1
    4c38:	01 c0       	rjmp	.+2      	; 0x4c3c <serial_fw_isTxRunning+0xc>
    4c3a:	80 e0       	ldi	r24, 0x00	; 0
}
    4c3c:	08 95       	ret

00004c3e <serial_fw_copyAndSendNmea>:
	/* enable DATA REGISTER EMPTY INTERRUPT - the interrupt will arrive after initial UDSR0 loading */
	UART_CTRL |= _BV(UDRIE0);								// this will shoot an interrupt because UDR0 is ready again to be filled (UDRE0 is true)
}

void serial_fw_copyAndSendNmea(uint8_t isPgm, const uchar inData[], uint8_t len)
{
    4c3e:	cf 93       	push	r28
	if (len) {
    4c40:	44 23       	and	r20, r20
    4c42:	71 f0       	breq	.+28     	; 0x4c60 <serial_fw_copyAndSendNmea+0x22>
    4c44:	c4 2f       	mov	r28, r20
    4c46:	ab 01       	movw	r20, r22
		memory_fw_copyBuffer(isPgm, serialCtxtTxBuffer, inData, len);
    4c48:	2c 2f       	mov	r18, r28
    4c4a:	30 e0       	ldi	r19, 0x00	; 0
    4c4c:	69 ec       	ldi	r22, 0xC9	; 201
    4c4e:	71 e0       	ldi	r23, 0x01	; 1
    4c50:	0e 94 31 22 	call	0x4462	; 0x4462 <memory_fw_copyBuffer>
		serialCtxtTxBufferIdx = 0;
    4c54:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <serialCtxtTxBufferIdx>
		serialCtxtTxBufferLen = len;
    4c58:	c0 93 1c 05 	sts	0x051C, r28	; 0x80051c <serialCtxtTxBufferLen>
		serial_fw_sendNmea();
    4c5c:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <serial_fw_sendNmea>
	}
}
    4c60:	cf 91       	pop	r28
    4c62:	08 95       	ret

00004c64 <serial_fw_pullAndSendNmea_havingSemaphore>:

void serial_fw_pullAndSendNmea_havingSemaphore(uint8_t isSend)
{
    4c64:	cf 93       	push	r28
    4c66:	c8 2f       	mov	r28, r24
	/* check if serial TX buffer is clear and the USART0 is ready for a new character to be sent */
	uint8_t sreg = SREG;
    4c68:	8f b7       	in	r24, 0x3f	; 63
	cli();
    4c6a:	f8 94       	cli
	uint8_t isTxRdy = UCSR0A & _BV(UDRE0);
    4c6c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	SREG = sreg;
    4c70:	8f bf       	out	0x3f, r24	; 63

	if (!serialCtxtTxBufferLen && isTxRdy) {
    4c72:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4c76:	81 11       	cpse	r24, r1
    4c78:	38 c0       	rjmp	.+112    	; 0x4cea <serial_fw_pullAndSendNmea_havingSemaphore+0x86>
    4c7a:	95 ff       	sbrs	r25, 5
    4c7c:	36 c0       	rjmp	.+108    	; 0x4cea <serial_fw_pullAndSendNmea_havingSemaphore+0x86>
		/* get message and free semaphore */
		serialCtxtTxBufferLen = ringbuffer_fw_ringBufferPull(isSend, serialCtxtTxBuffer, SERIALCTXT_TX_BUFFER_SIZE - 3);
    4c7e:	4d e3       	ldi	r20, 0x3D	; 61
    4c80:	69 ec       	ldi	r22, 0xC9	; 201
    4c82:	71 e0       	ldi	r23, 0x01	; 1
    4c84:	8c 2f       	mov	r24, r28
    4c86:	0e 94 77 24 	call	0x48ee	; 0x48ee <ringbuffer_fw_ringBufferPull>
    4c8a:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <serialCtxtTxBufferLen>
		ringbuffer_fw_freeSemaphore(isSend);
    4c8e:	8c 2f       	mov	r24, r28
    4c90:	0e 94 bf 23 	call	0x477e	; 0x477e <ringbuffer_fw_freeSemaphore>

		/* drop serial TX data if transportation is not activated */
		if (!(main_bf.mainIsSerComm)) {
    4c94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4c98:	83 ff       	sbrs	r24, 3
			serialCtxtTxBufferLen = 0;
    4c9a:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <serialCtxtTxBufferLen>
		}

		serialCtxtTxBufferIdx = 0;
    4c9e:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <serialCtxtTxBufferIdx>
		if (serialCtxtTxBufferLen) {
    4ca2:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4ca6:	88 23       	and	r24, r24
    4ca8:	19 f1       	breq	.+70     	; 0x4cf0 <serial_fw_pullAndSendNmea_havingSemaphore+0x8c>
			if (serialCtxtTxBuffer[--serialCtxtTxBufferLen]) {  // chop off trailing NULL char
    4caa:	ef ef       	ldi	r30, 0xFF	; 255
    4cac:	e8 0f       	add	r30, r24
    4cae:	e0 93 1c 05 	sts	0x051C, r30	; 0x80051c <serialCtxtTxBufferLen>
    4cb2:	f0 e0       	ldi	r31, 0x00	; 0
    4cb4:	e7 53       	subi	r30, 0x37	; 55
    4cb6:	fe 4f       	sbci	r31, 0xFE	; 254
    4cb8:	90 81       	ld	r25, Z
    4cba:	91 11       	cpse	r25, r1
				serialCtxtTxBufferLen++;						// restore length, if not NULL
    4cbc:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <serialCtxtTxBufferLen>
			}
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\r';	// obligatory NMEA message ends with CR LF
    4cc0:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4cc4:	ae 2f       	mov	r26, r30
    4cc6:	b0 e0       	ldi	r27, 0x00	; 0
    4cc8:	a7 53       	subi	r26, 0x37	; 55
    4cca:	be 4f       	sbci	r27, 0xFE	; 254
    4ccc:	8d e0       	ldi	r24, 0x0D	; 13
    4cce:	8c 93       	st	X, r24
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\n';
    4cd0:	82 e0       	ldi	r24, 0x02	; 2
    4cd2:	8e 0f       	add	r24, r30
    4cd4:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <serialCtxtTxBufferLen>
		serialCtxtTxBufferIdx = 0;
		if (serialCtxtTxBufferLen) {
			if (serialCtxtTxBuffer[--serialCtxtTxBufferLen]) {  // chop off trailing NULL char
				serialCtxtTxBufferLen++;						// restore length, if not NULL
			}
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\r';	// obligatory NMEA message ends with CR LF
    4cd8:	ef 5f       	subi	r30, 0xFF	; 255
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\n';
    4cda:	f0 e0       	ldi	r31, 0x00	; 0
    4cdc:	e7 53       	subi	r30, 0x37	; 55
    4cde:	fe 4f       	sbci	r31, 0xFE	; 254
    4ce0:	8a e0       	ldi	r24, 0x0A	; 10
    4ce2:	80 83       	st	Z, r24

			serial_fw_sendNmea();
    4ce4:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <serial_fw_sendNmea>
    4ce8:	03 c0       	rjmp	.+6      	; 0x4cf0 <serial_fw_pullAndSendNmea_havingSemaphore+0x8c>
		}

	} else {  // now we are not ready yet, call us later again
		ringbuffer_fw_freeSemaphore(isSend);
    4cea:	8c 2f       	mov	r24, r28
    4cec:	0e 94 bf 23 	call	0x477e	; 0x477e <ringbuffer_fw_freeSemaphore>
	}
}
    4cf0:	cf 91       	pop	r28
    4cf2:	08 95       	ret

00004cf4 <__vector_18>:
 *
 * = 35 clocks --> 1.75 µs until sei() is done
 */
//void serial_ISR_RXC0(void) - __vector_18
ISR(USART_RX_vect, ISR_BLOCK)
{
    4cf4:	1f 92       	push	r1
    4cf6:	0f 92       	push	r0
    4cf8:	0f b6       	in	r0, 0x3f	; 63
    4cfa:	0f 92       	push	r0
    4cfc:	11 24       	eor	r1, r1
    4cfe:	2f 93       	push	r18
    4d00:	3f 93       	push	r19
    4d02:	4f 93       	push	r20
    4d04:	5f 93       	push	r21
    4d06:	6f 93       	push	r22
    4d08:	7f 93       	push	r23
    4d0a:	8f 93       	push	r24
    4d0c:	9f 93       	push	r25
    4d0e:	af 93       	push	r26
    4d10:	bf 93       	push	r27
    4d12:	cf 93       	push	r28
    4d14:	df 93       	push	r29
    4d16:	ef 93       	push	r30
    4d18:	ff 93       	push	r31
	/* read the data byte received */
	uint8_t rxData = UDR0;
    4d1a:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	/* since here we can allow global interrupts again */
	sei();
    4d1e:	78 94       	sei

	if (!serialCtxtBufferState && (serialCtxtRxBufferLen < (SERIALCTXT_RX_BUFFER_SIZE - 3))) {
    4d20:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <serialCtxtBufferState>
    4d24:	81 11       	cpse	r24, r1
    4d26:	51 c0       	rjmp	.+162    	; 0x4dca <__vector_18+0xd6>
    4d28:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <serialCtxtRxBufferLen>
    4d2c:	85 37       	cpi	r24, 0x75	; 117
    4d2e:	08 f0       	brcs	.+2      	; 0x4d32 <__vector_18+0x3e>
    4d30:	4c c0       	rjmp	.+152    	; 0x4dca <__vector_18+0xd6>
		serialCtxtBufferState = SERIAL_CTXT_BUFFER_STATE_BLOCK;
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <serialCtxtBufferState>

		/* if data is at the hook, get it first */
		if (serialCtxtNmeaRxHookBufIdx) {
    4d38:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <serialCtxtNmeaRxHookBufIdx>
    4d3c:	88 23       	and	r24, r24
    4d3e:	f9 f0       	breq	.+62     	; 0x4d7e <__vector_18+0x8a>
			uint8_t sreg = SREG;
    4d40:	5f b7       	in	r21, 0x3f	; 63
			cli();
    4d42:	f8 94       	cli

			for (int idx = 0; idx < serialCtxtNmeaRxHookBufIdx; ++idx) {
    4d44:	60 91 19 05 	lds	r22, 0x0519	; 0x800519 <serialCtxtNmeaRxHookBufIdx>
    4d48:	70 e0       	ldi	r23, 0x00	; 0
    4d4a:	16 16       	cp	r1, r22
    4d4c:	17 06       	cpc	r1, r23
    4d4e:	a4 f4       	brge	.+40     	; 0x4d78 <__vector_18+0x84>
    4d50:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <serialCtxtRxBufferLen>
    4d54:	a9 e0       	ldi	r26, 0x09	; 9
    4d56:	b2 e0       	ldi	r27, 0x02	; 2
    4d58:	80 e0       	ldi	r24, 0x00	; 0
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
				serialCtxtRxBuffer[serialCtxtRxBufferLen++] = serialCtxtNmeaRxHookBuf[idx];
    4d5c:	21 e0       	ldi	r18, 0x01	; 1
    4d5e:	2e 0f       	add	r18, r30
    4d60:	3d 91       	ld	r19, X+
    4d62:	f0 e0       	ldi	r31, 0x00	; 0
    4d64:	ef 5e       	subi	r30, 0xEF	; 239
    4d66:	fd 4f       	sbci	r31, 0xFD	; 253
    4d68:	30 83       	st	Z, r19
		/* if data is at the hook, get it first */
		if (serialCtxtNmeaRxHookBufIdx) {
			uint8_t sreg = SREG;
			cli();

			for (int idx = 0; idx < serialCtxtNmeaRxHookBufIdx; ++idx) {
    4d6a:	01 96       	adiw	r24, 0x01	; 1
				serialCtxtRxBuffer[serialCtxtRxBufferLen++] = serialCtxtNmeaRxHookBuf[idx];
    4d6c:	e2 2f       	mov	r30, r18
		/* if data is at the hook, get it first */
		if (serialCtxtNmeaRxHookBufIdx) {
			uint8_t sreg = SREG;
			cli();

			for (int idx = 0; idx < serialCtxtNmeaRxHookBufIdx; ++idx) {
    4d6e:	86 17       	cp	r24, r22
    4d70:	97 07       	cpc	r25, r23
    4d72:	a4 f3       	brlt	.-24     	; 0x4d5c <__vector_18+0x68>
    4d74:	20 93 1d 05 	sts	0x051D, r18	; 0x80051d <serialCtxtRxBufferLen>
				serialCtxtRxBuffer[serialCtxtRxBufferLen++] = serialCtxtNmeaRxHookBuf[idx];
			}

			/* hook is processed and cleared */
			serialCtxtNmeaRxHookBufIdx = 0;
    4d78:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <serialCtxtNmeaRxHookBufIdx>

			SREG = sreg;
    4d7c:	5f bf       	out	0x3f, r21	; 63
		}

		/* append data to the buffer */
		serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    4d7e:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <serialCtxtRxBufferLen>
    4d82:	a1 e0       	ldi	r26, 0x01	; 1
    4d84:	ae 0f       	add	r26, r30
    4d86:	a0 93 1d 05 	sts	0x051D, r26	; 0x80051d <serialCtxtRxBufferLen>
    4d8a:	ce 2f       	mov	r28, r30
    4d8c:	d0 e0       	ldi	r29, 0x00	; 0
    4d8e:	cf 5e       	subi	r28, 0xEF	; 239
    4d90:	dd 4f       	sbci	r29, 0xFD	; 253
    4d92:	48 83       	st	Y, r20

		if (serialCtxtRxBufferLen >= (SERIALCTXT_RX_BUFFER_SIZE - 3)) {
    4d94:	a5 37       	cpi	r26, 0x75	; 117
    4d96:	80 f0       	brcs	.+32     	; 0x4db8 <__vector_18+0xc4>
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = '\r';
    4d98:	b0 e0       	ldi	r27, 0x00	; 0
    4d9a:	af 5e       	subi	r26, 0xEF	; 239
    4d9c:	bd 4f       	sbci	r27, 0xFD	; 253
    4d9e:	8d e0       	ldi	r24, 0x0D	; 13
    4da0:	8c 93       	st	X, r24
			rxData = '\n';
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    4da2:	83 e0       	ldi	r24, 0x03	; 3
    4da4:	8e 0f       	add	r24, r30
    4da6:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <serialCtxtRxBufferLen>

		/* append data to the buffer */
		serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;

		if (serialCtxtRxBufferLen >= (SERIALCTXT_RX_BUFFER_SIZE - 3)) {
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = '\r';
    4daa:	ee 5f       	subi	r30, 0xFE	; 254
			rxData = '\n';
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    4dac:	f0 e0       	ldi	r31, 0x00	; 0
    4dae:	ef 5e       	subi	r30, 0xEF	; 239
    4db0:	fd 4f       	sbci	r31, 0xFD	; 253
    4db2:	8a e0       	ldi	r24, 0x0A	; 10
    4db4:	80 83       	st	Z, r24
    4db6:	02 c0       	rjmp	.+4      	; 0x4dbc <__vector_18+0xc8>
		}

		/* if the end of a NMEA sentence is detected, send this serial RX buffer to the receive (IN) ring buffer */
		if (rxData == '\n') {  // a NMEA sentence stops with:  <sentence...*checksum\r\n>
    4db8:	4a 30       	cpi	r20, 0x0A	; 10
    4dba:	21 f4       	brne	.+8      	; 0x4dc4 <__vector_18+0xd0>
			/* mark this job to be done in the main context */
			serialCtxtBufferState = SERIAL_CTXT_BUFFER_STATE_SEND;
    4dbc:	82 e0       	ldi	r24, 0x02	; 2
    4dbe:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <serialCtxtBufferState>
    4dc2:	14 c0       	rjmp	.+40     	; 0x4dec <__vector_18+0xf8>

		} else {
			/* append more data */
			serialCtxtBufferState = 0;
    4dc4:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <serialCtxtBufferState>
    4dc8:	11 c0       	rjmp	.+34     	; 0x4dec <__vector_18+0xf8>
		}
	} else if (serialCtxtNmeaRxHookBufIdx < SERIALCTXT_NMEA_RX_HOOK_SIZE) {
    4dca:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <serialCtxtNmeaRxHookBufIdx>
    4dce:	88 30       	cpi	r24, 0x08	; 8
    4dd0:	68 f4       	brcc	.+26     	; 0x4dec <__vector_18+0xf8>
		uint8_t sreg = SREG;
    4dd2:	8f b7       	in	r24, 0x3f	; 63
		cli();
    4dd4:	f8 94       	cli
		serialCtxtNmeaRxHookBuf[serialCtxtNmeaRxHookBufIdx++] = rxData;
    4dd6:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <serialCtxtNmeaRxHookBufIdx>
    4dda:	91 e0       	ldi	r25, 0x01	; 1
    4ddc:	9e 0f       	add	r25, r30
    4dde:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <serialCtxtNmeaRxHookBufIdx>
    4de2:	f0 e0       	ldi	r31, 0x00	; 0
    4de4:	e7 5f       	subi	r30, 0xF7	; 247
    4de6:	fd 4f       	sbci	r31, 0xFD	; 253
    4de8:	40 83       	st	Z, r20
		SREG = sreg;
    4dea:	8f bf       	out	0x3f, r24	; 63
	}
}
    4dec:	ff 91       	pop	r31
    4dee:	ef 91       	pop	r30
    4df0:	df 91       	pop	r29
    4df2:	cf 91       	pop	r28
    4df4:	bf 91       	pop	r27
    4df6:	af 91       	pop	r26
    4df8:	9f 91       	pop	r25
    4dfa:	8f 91       	pop	r24
    4dfc:	7f 91       	pop	r23
    4dfe:	6f 91       	pop	r22
    4e00:	5f 91       	pop	r21
    4e02:	4f 91       	pop	r20
    4e04:	3f 91       	pop	r19
    4e06:	2f 91       	pop	r18
    4e08:	0f 90       	pop	r0
    4e0a:	0f be       	out	0x3f, r0	; 63
    4e0c:	0f 90       	pop	r0
    4e0e:	1f 90       	pop	r1
    4e10:	18 95       	reti

00004e12 <__vector_19>:
 *
 * = 22 clocks --> 1.10 µs until sei() is done
 */
//void serial_ISR_UDRE0(void) - __vector_19
ISR(USART_UDRE_vect, ISR_BLOCK)
{
    4e12:	1f 92       	push	r1
    4e14:	0f 92       	push	r0
    4e16:	0f b6       	in	r0, 0x3f	; 63
    4e18:	0f 92       	push	r0
    4e1a:	11 24       	eor	r1, r1
    4e1c:	8f 93       	push	r24
    4e1e:	9f 93       	push	r25
    4e20:	ef 93       	push	r30
    4e22:	ff 93       	push	r31
	UCSR0B &= ~(_BV(UDRIE0));								// disable interrupt for register empty
    4e24:	e1 ec       	ldi	r30, 0xC1	; 193
    4e26:	f0 e0       	ldi	r31, 0x00	; 0
    4e28:	80 81       	ld	r24, Z
    4e2a:	8f 7d       	andi	r24, 0xDF	; 223
    4e2c:	80 83       	st	Z, r24
	sei();
    4e2e:	78 94       	sei

	/* first look if the serial buffer is filled */
	if (serialCtxtTxBufferIdx < serialCtxtTxBufferLen) {
    4e30:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <serialCtxtTxBufferIdx>
    4e34:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4e38:	98 17       	cp	r25, r24
    4e3a:	c8 f4       	brcc	.+50     	; 0x4e6e <__vector_19+0x5c>
		cli();
    4e3c:	f8 94       	cli
		UDR0 = serialCtxtTxBuffer[serialCtxtTxBufferIdx++];	// UDRE0 becomes cleared
    4e3e:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <serialCtxtTxBufferIdx>
    4e42:	81 e0       	ldi	r24, 0x01	; 1
    4e44:	8e 0f       	add	r24, r30
    4e46:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <serialCtxtTxBufferIdx>
    4e4a:	f0 e0       	ldi	r31, 0x00	; 0
    4e4c:	e7 53       	subi	r30, 0x37	; 55
    4e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e50:	80 81       	ld	r24, Z
    4e52:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		UCSR0B |= _BV(UDRIE0);								// enables interrupt for register empty
    4e56:	e1 ec       	ldi	r30, 0xC1	; 193
    4e58:	f0 e0       	ldi	r31, 0x00	; 0
    4e5a:	80 81       	ld	r24, Z
    4e5c:	80 62       	ori	r24, 0x20	; 32
    4e5e:	80 83       	st	Z, r24
		sei();
    4e60:	78 94       	sei
	}

	/* then check if job is now done */
	if (serialCtxtTxBufferIdx >= serialCtxtTxBufferLen) {
    4e62:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <serialCtxtTxBufferIdx>
    4e66:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <serialCtxtTxBufferLen>
    4e6a:	98 17       	cp	r25, r24
    4e6c:	48 f0       	brcs	.+18     	; 0x4e80 <__vector_19+0x6e>
		/* job is done - turn off data register empty interrupt */
		cli();
    4e6e:	f8 94       	cli
		UCSR0B &= ~(_BV(UDRIE0));							// disable interrupt for register empty
    4e70:	e1 ec       	ldi	r30, 0xC1	; 193
    4e72:	f0 e0       	ldi	r31, 0x00	; 0
    4e74:	80 81       	ld	r24, Z
    4e76:	8f 7d       	andi	r24, 0xDF	; 223
    4e78:	80 83       	st	Z, r24
		sei();
    4e7a:	78 94       	sei

		/* mark buffer as free */
		serialCtxtTxBufferLen = 0;
    4e7c:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <serialCtxtTxBufferLen>
	}
}
    4e80:	ff 91       	pop	r31
    4e82:	ef 91       	pop	r30
    4e84:	9f 91       	pop	r25
    4e86:	8f 91       	pop	r24
    4e88:	0f 90       	pop	r0
    4e8a:	0f be       	out	0x3f, r0	; 63
    4e8c:	0f 90       	pop	r0
    4e8e:	1f 90       	pop	r1
    4e90:	18 95       	reti

00004e92 <__vector_20>:

//void serial_ISR_TXC0(void) - __vector_20
ISR(USART_TX_vect, ISR_NOBLOCK)
{
    4e92:	78 94       	sei
    4e94:	1f 92       	push	r1
    4e96:	0f 92       	push	r0
    4e98:	0f b6       	in	r0, 0x3f	; 63
    4e9a:	0f 92       	push	r0
    4e9c:	11 24       	eor	r1, r1
	// not used yet
}
    4e9e:	0f 90       	pop	r0
    4ea0:	0f be       	out	0x3f, r0	; 63
    4ea2:	0f 90       	pop	r0
    4ea4:	1f 90       	pop	r1
    4ea6:	18 95       	reti

00004ea8 <s_delay>:
}


static void s_delay(void)
{
	wdt_reset();
    4ea8:	a8 95       	wdr
	if (usbIsUp) {
    4eaa:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <usbIsUp>
    4eae:	88 23       	and	r24, r24
    4eb0:	31 f0       	breq	.+12     	; 0x4ebe <s_delay+0x16>
		usbPoll();
    4eb2:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <usbPoll>
		usb_fw_sendInInterrupt();
    4eb6:	0e 94 2d 2c 	call	0x585a	; 0x585a <usb_fw_sendInInterrupt>
		workInQueue();
    4eba:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <workInQueue>
    4ebe:	08 95       	ret

00004ec0 <twi_fw_init>:


void twi_fw_init(void)
{
	/* power up this module */
	PRR &= ~(_BV(PRTWI));
    4ec0:	e4 e6       	ldi	r30, 0x64	; 100
    4ec2:	f0 e0       	ldi	r31, 0x00	; 0
    4ec4:	80 81       	ld	r24, Z
    4ec6:	8f 77       	andi	r24, 0x7F	; 127
    4ec8:	80 83       	st	Z, r24

	uint8_t sreg = SREG;
    4eca:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4ecc:	f8 94       	cli

	// setting IO pins: pull-up on
	TWI_DDR   &= ~((_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM)));	// define SDA and SCL pins as input, as long the TWI alternate port function has not taken over
    4ece:	87 b1       	in	r24, 0x07	; 7
    4ed0:	8f 7c       	andi	r24, 0xCF	; 207
    4ed2:	87 b9       	out	0x07, r24	; 7
	TWI_PORT  |=   (_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM));		// SDA and SCL pull-up
    4ed4:	88 b1       	in	r24, 0x08	; 8
    4ed6:	80 63       	ori	r24, 0x30	; 48
    4ed8:	88 b9       	out	0x08, r24	; 8

	// SCL frequency: using 400 kHz for SCL @20 MHz clock
	TWSR = 0; 							 						// prescaler = 1
    4eda:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 17;													// gives 400 kHz @20 MHz clock
    4ede:	81 e1       	ldi	r24, 0x11	; 17
    4ee0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// TWI interface enabled and interrupt cleared
	TWCR = (_BV(TWINT) | _BV(TWEN));
    4ee4:	84 e8       	ldi	r24, 0x84	; 132
    4ee6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	SREG = sreg;
    4eea:	9f bf       	out	0x3f, r25	; 63
    4eec:	08 95       	ret

00004eee <twi_fw_close>:
}

void twi_fw_close(void)
{
	// TWI interface disabled
	TWCR = 0;
    4eee:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// setting IO pins: pull-up off
	TWI_PORT  |= ~(_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM));	// SDA and SCL pull-up off
    4ef2:	88 b1       	in	r24, 0x08	; 8
    4ef4:	8f 6c       	ori	r24, 0xCF	; 207
    4ef6:	88 b9       	out	0x08, r24	; 8

	/* no more power is needed for this module */
	PRR |= _BV(PRTWI);
    4ef8:	e4 e6       	ldi	r30, 0x64	; 100
    4efa:	f0 e0       	ldi	r31, 0x00	; 0
    4efc:	80 81       	ld	r24, Z
    4efe:	80 68       	ori	r24, 0x80	; 128
    4f00:	80 83       	st	Z, r24
    4f02:	08 95       	ret

00004f04 <twi_fw_waitUntilDone>:
		workInQueue();
	}
}

void twi_fw_waitUntilDone(uint8_t extraDelay)
{
    4f04:	1f 93       	push	r17
    4f06:	cf 93       	push	r28
    4f08:	df 93       	push	r29
    4f0a:	18 2f       	mov	r17, r24
	while (twiState.doStart || twiState.isProcessing) {
    4f0c:	c0 e4       	ldi	r28, 0x40	; 64
    4f0e:	d1 e0       	ldi	r29, 0x01	; 1
    4f10:	02 c0       	rjmp	.+4      	; 0x4f16 <twi_fw_waitUntilDone+0x12>
		s_delay();
    4f12:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <s_delay>
	}
}

void twi_fw_waitUntilDone(uint8_t extraDelay)
{
	while (twiState.doStart || twiState.isProcessing) {
    4f16:	88 81       	ld	r24, Y
    4f18:	80 fd       	sbrc	r24, 0
    4f1a:	fb cf       	rjmp	.-10     	; 0x4f12 <twi_fw_waitUntilDone+0xe>
    4f1c:	88 81       	ld	r24, Y
    4f1e:	81 fd       	sbrc	r24, 1
    4f20:	f8 cf       	rjmp	.-16     	; 0x4f12 <twi_fw_waitUntilDone+0xe>
		s_delay();
	}

	/* Give some more time for the TWI slave to process the data */
	for (int cnt = extraDelay; cnt; --cnt) {
    4f22:	c1 2f       	mov	r28, r17
    4f24:	d0 e0       	ldi	r29, 0x00	; 0
    4f26:	20 97       	sbiw	r28, 0x00	; 0
    4f28:	21 f0       	breq	.+8      	; 0x4f32 <twi_fw_waitUntilDone+0x2e>
		s_delay();
    4f2a:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <s_delay>
	while (twiState.doStart || twiState.isProcessing) {
		s_delay();
	}

	/* Give some more time for the TWI slave to process the data */
	for (int cnt = extraDelay; cnt; --cnt) {
    4f2e:	21 97       	sbiw	r28, 0x01	; 1
    4f30:	e1 f7       	brne	.-8      	; 0x4f2a <twi_fw_waitUntilDone+0x26>
		s_delay();
	}
}
    4f32:	df 91       	pop	r29
    4f34:	cf 91       	pop	r28
    4f36:	1f 91       	pop	r17
    4f38:	08 95       	ret

00004f3a <isr_sendStart>:
	return twiSeq2Data[0];
}

void isr_sendStart(uint8_t sendSignal, uint8_t isRepeatedStart)
{
	uint8_t sreg = SREG;
    4f3a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4f3c:	f8 94       	cli

	if (((!twiState.isProcessing && twiState.doStart) ||
    4f3e:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <twiState+0x1>
    4f42:	21 fd       	sbrc	r18, 1
    4f44:	04 c0       	rjmp	.+8      	; 0x4f4e <isr_sendStart+0x14>
    4f46:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <twiState+0x1>
    4f4a:	20 fd       	sbrc	r18, 0
    4f4c:	06 c0       	rjmp	.+12     	; 0x4f5a <isr_sendStart+0x20>
		 ( twiState.isProcessing && isRepeatedStart)) &&
    4f4e:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <twiState+0x1>
void isr_sendStart(uint8_t sendSignal, uint8_t isRepeatedStart)
{
	uint8_t sreg = SREG;
	cli();

	if (((!twiState.isProcessing && twiState.doStart) ||
    4f52:	21 ff       	sbrs	r18, 1
    4f54:	15 c0       	rjmp	.+42     	; 0x4f80 <isr_sendStart+0x46>
		 ( twiState.isProcessing && isRepeatedStart)) &&
    4f56:	66 23       	and	r22, r22
    4f58:	99 f0       	breq	.+38     	; 0x4f80 <isr_sendStart+0x46>
    4f5a:	20 91 11 05 	lds	r18, 0x0511	; 0x800511 <twiSeq2DataCnt>
    4f5e:	22 23       	and	r18, r18
    4f60:	79 f0       	breq	.+30     	; 0x4f80 <isr_sendStart+0x46>
		twiSeq2DataCnt) {

		twiState.isProcessing	= true;
    4f62:	e0 e4       	ldi	r30, 0x40	; 64
    4f64:	f1 e0       	ldi	r31, 0x01	; 1
    4f66:	20 81       	ld	r18, Z
    4f68:	22 60       	ori	r18, 0x02	; 2
    4f6a:	20 83       	st	Z, r18
		twiState.doStart		= false;
    4f6c:	20 81       	ld	r18, Z
    4f6e:	2e 7f       	andi	r18, 0xFE	; 254
    4f70:	20 83       	st	Z, r18
		twiSeq2DataIdx			= 0;
    4f72:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <twiSeq2DataIdx>

		if (sendSignal) {
    4f76:	88 23       	and	r24, r24
    4f78:	19 f0       	breq	.+6      	; 0x4f80 <isr_sendStart+0x46>
			/* send START or REPEATED START */
			TWCR = (_BV(TWINT) | _BV(TWSTA) | _BV(TWEN) | _BV(TWIE));	// start-TWI/rise clock, send START, TWI enabled, TWINT-Interrupt enabled
    4f7a:	85 ea       	ldi	r24, 0xA5	; 165
    4f7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		}
	}

	SREG = sreg;
    4f80:	9f bf       	out	0x3f, r25	; 63
    4f82:	08 95       	ret

00004f84 <twi_fw_sendCmdSendData1>:
		s_delay();
	}
}

void twi_fw_sendCmdSendData1(uint8_t addr, uint8_t cmd, uint8_t data1)
{
    4f84:	1f 93       	push	r17
    4f86:	cf 93       	push	r28
    4f88:	df 93       	push	r29
    4f8a:	c8 2f       	mov	r28, r24
    4f8c:	16 2f       	mov	r17, r22
    4f8e:	d4 2f       	mov	r29, r20
	uint8_t sreg;

	twi_fw_waitUntilDone(addr == TWI_SMART_LCD_ADDR ?  10 : 0);
    4f90:	82 32       	cpi	r24, 0x22	; 34
    4f92:	11 f0       	breq	.+4      	; 0x4f98 <twi_fw_sendCmdSendData1+0x14>
    4f94:	80 e0       	ldi	r24, 0x00	; 0
    4f96:	01 c0       	rjmp	.+2      	; 0x4f9a <twi_fw_sendCmdSendData1+0x16>
    4f98:	8a e0       	ldi	r24, 0x0A	; 10
    4f9a:	0e 94 82 27 	call	0x4f04	; 0x4f04 <twi_fw_waitUntilDone>

	sreg = SREG;
    4f9e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4fa0:	f8 94       	cli
	twiSeq1Adr = addr;
    4fa2:	c0 93 12 05 	sts	0x0512, r28	; 0x800512 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    4fa6:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    4faa:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    4fae:	81 e0       	ldi	r24, 0x01	; 1
    4fb0:	8e 0f       	add	r24, r30
    4fb2:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    4fb6:	f0 e0       	ldi	r31, 0x00	; 0
    4fb8:	e1 5d       	subi	r30, 0xD1	; 209
    4fba:	fe 4f       	sbci	r31, 0xFE	; 254
    4fbc:	10 83       	st	Z, r17
	twiState.isRepeatedStart = false;
    4fbe:	a0 e4       	ldi	r26, 0x40	; 64
    4fc0:	b1 e0       	ldi	r27, 0x01	; 1
    4fc2:	8c 91       	ld	r24, X
    4fc4:	8b 7f       	andi	r24, 0xFB	; 251
    4fc6:	8c 93       	st	X, r24
	twiSeq2Data[twiSeq2DataCnt++] = data1;
    4fc8:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	8e 0f       	add	r24, r30
    4fd0:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    4fd4:	f0 e0       	ldi	r31, 0x00	; 0
    4fd6:	e1 5d       	subi	r30, 0xD1	; 209
    4fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    4fda:	d0 83       	st	Z, r29
	twiState.doStart = true;
    4fdc:	8c 91       	ld	r24, X
    4fde:	81 60       	ori	r24, 0x01	; 1
    4fe0:	8c 93       	st	X, r24
	SREG = sreg;
    4fe2:	9f bf       	out	0x3f, r25	; 63

	isr_sendStart(true, false);
    4fe4:	60 e0       	ldi	r22, 0x00	; 0
    4fe6:	81 e0       	ldi	r24, 0x01	; 1
    4fe8:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <isr_sendStart>
}
    4fec:	df 91       	pop	r29
    4fee:	cf 91       	pop	r28
    4ff0:	1f 91       	pop	r17
    4ff2:	08 95       	ret

00004ff4 <twi_fw_sendCmdSendData1SendData2>:

void twi_fw_sendCmdSendData1SendData2(uint8_t addr, uint8_t cmd, uint8_t data1, uint8_t data2)
{
    4ff4:	0f 93       	push	r16
    4ff6:	1f 93       	push	r17
    4ff8:	cf 93       	push	r28
    4ffa:	df 93       	push	r29
    4ffc:	d8 2f       	mov	r29, r24
    4ffe:	06 2f       	mov	r16, r22
    5000:	14 2f       	mov	r17, r20
    5002:	c2 2f       	mov	r28, r18
	uint8_t sreg;

	twi_fw_waitUntilDone(addr == TWI_SMART_LCD_ADDR ?  10 : 0);
    5004:	82 32       	cpi	r24, 0x22	; 34
    5006:	11 f0       	breq	.+4      	; 0x500c <twi_fw_sendCmdSendData1SendData2+0x18>
    5008:	80 e0       	ldi	r24, 0x00	; 0
    500a:	01 c0       	rjmp	.+2      	; 0x500e <twi_fw_sendCmdSendData1SendData2+0x1a>
    500c:	8a e0       	ldi	r24, 0x0A	; 10
    500e:	0e 94 82 27 	call	0x4f04	; 0x4f04 <twi_fw_waitUntilDone>

	sreg = SREG;
    5012:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5014:	f8 94       	cli
	twiSeq1Adr = addr;
    5016:	d0 93 12 05 	sts	0x0512, r29	; 0x800512 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    501a:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    501e:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    5022:	81 e0       	ldi	r24, 0x01	; 1
    5024:	8e 0f       	add	r24, r30
    5026:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    502a:	f0 e0       	ldi	r31, 0x00	; 0
    502c:	e1 5d       	subi	r30, 0xD1	; 209
    502e:	fe 4f       	sbci	r31, 0xFE	; 254
    5030:	00 83       	st	Z, r16
	twiState.isRepeatedStart = false;
    5032:	a0 e4       	ldi	r26, 0x40	; 64
    5034:	b1 e0       	ldi	r27, 0x01	; 1
    5036:	8c 91       	ld	r24, X
    5038:	8b 7f       	andi	r24, 0xFB	; 251
    503a:	8c 93       	st	X, r24
	twiSeq2Data[twiSeq2DataCnt++] = data1;
    503c:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    5040:	81 e0       	ldi	r24, 0x01	; 1
    5042:	8e 0f       	add	r24, r30
    5044:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    5048:	f0 e0       	ldi	r31, 0x00	; 0
    504a:	e1 5d       	subi	r30, 0xD1	; 209
    504c:	fe 4f       	sbci	r31, 0xFE	; 254
    504e:	10 83       	st	Z, r17
	twiSeq2Data[twiSeq2DataCnt++] = data2;
    5050:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    5054:	81 e0       	ldi	r24, 0x01	; 1
    5056:	8e 0f       	add	r24, r30
    5058:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    505c:	f0 e0       	ldi	r31, 0x00	; 0
    505e:	e1 5d       	subi	r30, 0xD1	; 209
    5060:	fe 4f       	sbci	r31, 0xFE	; 254
    5062:	c0 83       	st	Z, r28
	twiState.doStart = true;
    5064:	8c 91       	ld	r24, X
    5066:	81 60       	ori	r24, 0x01	; 1
    5068:	8c 93       	st	X, r24
	SREG = sreg;
    506a:	9f bf       	out	0x3f, r25	; 63

	isr_sendStart(true, false);
    506c:	60 e0       	ldi	r22, 0x00	; 0
    506e:	81 e0       	ldi	r24, 0x01	; 1
    5070:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <isr_sendStart>
}
    5074:	df 91       	pop	r29
    5076:	cf 91       	pop	r28
    5078:	1f 91       	pop	r17
    507a:	0f 91       	pop	r16
    507c:	08 95       	ret

0000507e <twi_fw_sendCmdSendData1SendDataVar>:

void twi_fw_sendCmdSendData1SendDataVar(uint8_t addr, uint8_t cmd, uint8_t cnt, uint8_t data[])
{
    507e:	ff 92       	push	r15
    5080:	0f 93       	push	r16
    5082:	1f 93       	push	r17
    5084:	cf 93       	push	r28
    5086:	df 93       	push	r29
    5088:	18 2f       	mov	r17, r24
    508a:	f6 2e       	mov	r15, r22
    508c:	04 2f       	mov	r16, r20
    508e:	e9 01       	movw	r28, r18
	int i;
	uint8_t sreg;

	twi_fw_waitUntilDone(addr == TWI_SMART_LCD_ADDR ?  10 : 0);
    5090:	82 32       	cpi	r24, 0x22	; 34
    5092:	11 f0       	breq	.+4      	; 0x5098 <twi_fw_sendCmdSendData1SendDataVar+0x1a>
    5094:	80 e0       	ldi	r24, 0x00	; 0
    5096:	01 c0       	rjmp	.+2      	; 0x509a <twi_fw_sendCmdSendData1SendDataVar+0x1c>
    5098:	8a e0       	ldi	r24, 0x0A	; 10
    509a:	0e 94 82 27 	call	0x4f04	; 0x4f04 <twi_fw_waitUntilDone>

	sreg = SREG;
    509e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    50a0:	f8 94       	cli
	twiSeq1Adr = addr;
    50a2:	10 93 12 05 	sts	0x0512, r17	; 0x800512 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    50a6:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    50aa:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    50ae:	81 e0       	ldi	r24, 0x01	; 1
    50b0:	8e 0f       	add	r24, r30
    50b2:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    50b6:	f0 e0       	ldi	r31, 0x00	; 0
    50b8:	e1 5d       	subi	r30, 0xD1	; 209
    50ba:	fe 4f       	sbci	r31, 0xFE	; 254
    50bc:	f0 82       	st	Z, r15
	twiState.isRepeatedStart = false;
    50be:	e0 e4       	ldi	r30, 0x40	; 64
    50c0:	f1 e0       	ldi	r31, 0x01	; 1
    50c2:	80 81       	ld	r24, Z
    50c4:	8b 7f       	andi	r24, 0xFB	; 251
    50c6:	80 83       	st	Z, r24
	for (i = 0; i < cnt; ++i) {
    50c8:	00 23       	and	r16, r16
    50ca:	91 f0       	breq	.+36     	; 0x50f0 <twi_fw_sendCmdSendData1SendDataVar+0x72>
    50cc:	de 01       	movw	r26, r28
    50ce:	9e 01       	movw	r18, r28
    50d0:	20 0f       	add	r18, r16
    50d2:	31 1d       	adc	r19, r1
		twiSeq2Data[twiSeq2DataCnt++] = data[i];
    50d4:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	8e 0f       	add	r24, r30
    50dc:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    50e0:	f0 e0       	ldi	r31, 0x00	; 0
    50e2:	8d 91       	ld	r24, X+
    50e4:	e1 5d       	subi	r30, 0xD1	; 209
    50e6:	fe 4f       	sbci	r31, 0xFE	; 254
    50e8:	80 83       	st	Z, r24
	cli();
	twiSeq1Adr = addr;
	twiSeq2DataCnt = 0;
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
	twiState.isRepeatedStart = false;
	for (i = 0; i < cnt; ++i) {
    50ea:	a2 17       	cp	r26, r18
    50ec:	b3 07       	cpc	r27, r19
    50ee:	91 f7       	brne	.-28     	; 0x50d4 <twi_fw_sendCmdSendData1SendDataVar+0x56>
		twiSeq2Data[twiSeq2DataCnt++] = data[i];
	}
	twiState.doStart = true;
    50f0:	e0 e4       	ldi	r30, 0x40	; 64
    50f2:	f1 e0       	ldi	r31, 0x01	; 1
    50f4:	80 81       	ld	r24, Z
    50f6:	81 60       	ori	r24, 0x01	; 1
    50f8:	80 83       	st	Z, r24
	SREG = sreg;
    50fa:	9f bf       	out	0x3f, r25	; 63

	isr_sendStart(true, false);
    50fc:	60 e0       	ldi	r22, 0x00	; 0
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <isr_sendStart>
}
    5104:	df 91       	pop	r29
    5106:	cf 91       	pop	r28
    5108:	1f 91       	pop	r17
    510a:	0f 91       	pop	r16
    510c:	ff 90       	pop	r15
    510e:	08 95       	ret

00005110 <twi_fw_sendCmdReadData1>:

uint8_t twi_fw_sendCmdReadData1(uint8_t addr, uint8_t cmd)
{
    5110:	cf 93       	push	r28
    5112:	df 93       	push	r29
    5114:	c8 2f       	mov	r28, r24
    5116:	d6 2f       	mov	r29, r22
	uint8_t sreg;

	twi_fw_waitUntilDone(addr == TWI_SMART_LCD_ADDR ?  10 : 0);
    5118:	82 32       	cpi	r24, 0x22	; 34
    511a:	11 f0       	breq	.+4      	; 0x5120 <twi_fw_sendCmdReadData1+0x10>
    511c:	80 e0       	ldi	r24, 0x00	; 0
    511e:	01 c0       	rjmp	.+2      	; 0x5122 <twi_fw_sendCmdReadData1+0x12>
    5120:	8a e0       	ldi	r24, 0x0A	; 10
    5122:	0e 94 82 27 	call	0x4f04	; 0x4f04 <twi_fw_waitUntilDone>

	sreg = SREG;
    5126:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5128:	f8 94       	cli
	twiSeq1Adr = addr;
    512a:	c0 93 12 05 	sts	0x0512, r28	; 0x800512 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    512e:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    5132:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <twiSeq2DataCnt>
    5136:	81 e0       	ldi	r24, 0x01	; 1
    5138:	8e 0f       	add	r24, r30
    513a:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    513e:	f0 e0       	ldi	r31, 0x00	; 0
    5140:	e1 5d       	subi	r30, 0xD1	; 209
    5142:	fe 4f       	sbci	r31, 0xFE	; 254
    5144:	d0 83       	st	Z, r29
	twiState.isRepeatedStart = true;
    5146:	e0 e4       	ldi	r30, 0x40	; 64
    5148:	f1 e0       	ldi	r31, 0x01	; 1
    514a:	80 81       	ld	r24, Z
    514c:	84 60       	ori	r24, 0x04	; 4
    514e:	80 83       	st	Z, r24
	twiSeq2DataRcvCnt = 1;
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <twiSeq2DataRcvCnt>
	twiState.doStart = true;
    5156:	80 81       	ld	r24, Z
    5158:	81 60       	ori	r24, 0x01	; 1
    515a:	80 83       	st	Z, r24
	SREG = sreg;
    515c:	9f bf       	out	0x3f, r25	; 63

	isr_sendStart(true, false);
    515e:	60 e0       	ldi	r22, 0x00	; 0
    5160:	81 e0       	ldi	r24, 0x01	; 1
    5162:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <isr_sendStart>
	twi_fw_waitUntilDone(0);
    5166:	80 e0       	ldi	r24, 0x00	; 0
    5168:	0e 94 82 27 	call	0x4f04	; 0x4f04 <twi_fw_waitUntilDone>

	return twiSeq2Data[0];
    516c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <twiSeq2Data>
}
    5170:	df 91       	pop	r29
    5172:	cf 91       	pop	r28
    5174:	08 95       	ret

00005176 <isr_sendStop>:
	SREG = sreg;
}

void isr_sendStop(uint8_t sendSignal)
{
	uint8_t sreg = SREG;
    5176:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5178:	f8 94       	cli

	if (sendSignal && twiState.isProcessing) {
    517a:	88 23       	and	r24, r24
    517c:	39 f0       	breq	.+14     	; 0x518c <isr_sendStop+0x16>
    517e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <twiState+0x1>
    5182:	81 ff       	sbrs	r24, 1
    5184:	03 c0       	rjmp	.+6      	; 0x518c <isr_sendStop+0x16>
		/* send stop */
		TWCR = (_BV(TWINT) | _BV(TWSTO) | _BV(TWEN) | _BV(TWIE));
    5186:	85 e9       	ldi	r24, 0x95	; 149
    5188:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}

	twiSeq2DataCnt = 0;
    518c:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <twiSeq2DataCnt>
	twiState.isProcessing = false;
    5190:	e0 e4       	ldi	r30, 0x40	; 64
    5192:	f1 e0       	ldi	r31, 0x01	; 1
    5194:	80 81       	ld	r24, Z
    5196:	8d 7f       	andi	r24, 0xFD	; 253
    5198:	80 83       	st	Z, r24

	SREG = sreg;
    519a:	9f bf       	out	0x3f, r25	; 63
    519c:	08 95       	ret

0000519e <__vector_24>:
/* Forward declaration */
static uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur);

//void twi_ISR_TWI(void) - __vector_24
ISR(TWI_vect, ISR_BLOCK)
{	/* TWI */
    519e:	1f 92       	push	r1
    51a0:	0f 92       	push	r0
    51a2:	0f b6       	in	r0, 0x3f	; 63
    51a4:	0f 92       	push	r0
    51a6:	11 24       	eor	r1, r1
    51a8:	2f 93       	push	r18
    51aa:	3f 93       	push	r19
    51ac:	4f 93       	push	r20
    51ae:	5f 93       	push	r21
    51b0:	6f 93       	push	r22
    51b2:	7f 93       	push	r23
    51b4:	8f 93       	push	r24
    51b6:	9f 93       	push	r25
    51b8:	af 93       	push	r26
    51ba:	bf 93       	push	r27
    51bc:	cf 93       	push	r28
    51be:	ef 93       	push	r30
    51c0:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    51c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    51c6:	e8 2f       	mov	r30, r24
    51c8:	e8 7f       	andi	r30, 0xF8	; 248
	uint8_t twd = TWDR;
    51ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    51ce:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);			// TWI interrupt flag reset, TWI enabled and TWINT-Interrupt enabled
}

static uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
	uint8_t twcr_new = twcr_cur & 0b01000101;
    51d2:	c2 2f       	mov	r28, r18
    51d4:	c5 74       	andi	r28, 0x45	; 69

	/* publish the state */
	twiState.state = tws;
    51d6:	e0 93 3f 01 	sts	0x013F, r30	; 0x80013f <twiState>

	switch(tws) {
    51da:	8e 2f       	mov	r24, r30
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	fc 01       	movw	r30, r24
    51e0:	38 97       	sbiw	r30, 0x08	; 8
    51e2:	e1 35       	cpi	r30, 0x51	; 81
    51e4:	f1 05       	cpc	r31, r1
    51e6:	08 f0       	brcs	.+2      	; 0x51ea <__vector_24+0x4c>
    51e8:	b3 c0       	rjmp	.+358    	; 0x5350 <__vector_24+0x1b2>
    51ea:	ef 5b       	subi	r30, 0xBF	; 191
    51ec:	ff 4f       	sbci	r31, 0xFF	; 255
    51ee:	0c 94 55 3b 	jmp	0x76aa	; 0x76aa <__tablejump2__>
	case TWI_TWSR_START:
		/* MASTER: send SLA - slave WRITE address */
		TWDR = (twiSeq1Adr << 1);  						// I2C device address - write mode after first start
    51f2:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    51f6:	88 0f       	add	r24, r24
    51f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    51fc:	ad c0       	rjmp	.+346    	; 0x5358 <__vector_24+0x1ba>
		break;

	case TWI_TWSR_REPEATEDSTART:
		/* MASTER: send SLA - slave address */
		TWDR = (twiSeq1Adr << 1) | 1; 					// I2C device address - read mode after repeated start
    51fe:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    5202:	88 0f       	add	r24, r24
    5204:	81 60       	ori	r24, 0x01	; 1
    5206:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

		twiState.isRepeatedStart = false;
    520a:	e0 e4       	ldi	r30, 0x40	; 64
    520c:	f1 e0       	ldi	r31, 0x01	; 1
    520e:	80 81       	ld	r24, Z
    5210:	8b 7f       	andi	r24, 0xFB	; 251
    5212:	80 83       	st	Z, r24
		twiSeq2DataCnt = twiSeq2DataRcvCnt;
    5214:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq2DataRcvCnt>
    5218:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <twiSeq2DataCnt>
    521c:	9d c0       	rjmp	.+314    	; 0x5358 <__vector_24+0x1ba>
		break;

	case TWI_TWSR_M_SLAW_ADDR_ACK:
	case TWI_TWSR_M_SLAR_ADDR_ACK:
		if (twiSeq1Adr == TWI_MCP23017_ADDR) {
    521e:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    5222:	80 32       	cpi	r24, 0x20	; 32
    5224:	31 f4       	brne	.+12     	; 0x5232 <__vector_24+0x94>
			main_bf.mainIsLcdAttached = true;
    5226:	e0 e0       	ldi	r30, 0x00	; 0
    5228:	f1 e0       	ldi	r31, 0x01	; 1
    522a:	80 81       	ld	r24, Z
    522c:	80 68       	ori	r24, 0x80	; 128
    522e:	80 83       	st	Z, r24
    5230:	09 c0       	rjmp	.+18     	; 0x5244 <__vector_24+0xa6>
		} else if (twiSeq1Adr == TWI_SMART_LCD_ADDR) {
    5232:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    5236:	82 32       	cpi	r24, 0x22	; 34
    5238:	29 f4       	brne	.+10     	; 0x5244 <__vector_24+0xa6>
			main_bf.mainIsSmartAttached = true;
    523a:	e1 e0       	ldi	r30, 0x01	; 1
    523c:	f1 e0       	ldi	r31, 0x01	; 1
    523e:	80 81       	ld	r24, Z
    5240:	81 60       	ori	r24, 0x01	; 1
    5242:	80 83       	st	Z, r24
		}

		if (twiState.state == TWI_TWSR_M_SLAW_ADDR_ACK) {
    5244:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <twiState>
    5248:	88 31       	cpi	r24, 0x18	; 24
    524a:	29 f4       	brne	.+10     	; 0x5256 <__vector_24+0xb8>
			/* send command data */
			TWDR = twiSeq2Data[0];							// internal command or address register of the I2C device
    524c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <twiSeq2Data>
    5250:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5254:	81 c0       	rjmp	.+258    	; 0x5358 <__vector_24+0x1ba>
		} else {
			// no data byte to store, here
			if ((twiSeq2DataIdx + 1) >= twiSeq2DataCnt) {
    5256:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twiSeq2DataIdx>
    525a:	40 91 11 05 	lds	r20, 0x0511	; 0x800511 <twiSeq2DataCnt>
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	01 96       	adiw	r24, 0x01	; 1
    5262:	50 e0       	ldi	r21, 0x00	; 0
    5264:	84 17       	cp	r24, r20
    5266:	95 07       	cpc	r25, r21
    5268:	1c f0       	brlt	.+6      	; 0x5270 <__vector_24+0xd2>
				twcr_new &= ~_BV(TWEA);						// NACK next data byte
    526a:	c2 2f       	mov	r28, r18
    526c:	c5 70       	andi	r28, 0x05	; 5
    526e:	74 c0       	rjmp	.+232    	; 0x5358 <__vector_24+0x1ba>
			} else {
				twcr_new |= _BV(TWEA);						// ACK  next data byte to get further data
    5270:	c0 64       	ori	r28, 0x40	; 64
    5272:	72 c0       	rjmp	.+228    	; 0x5358 <__vector_24+0x1ba>
		}
		break;

	case TWI_TWSR_M_SLAW_ADDR_NACK:
	case TWI_TWSR_M_SLAR_ADDR_NACK:
		if (twiSeq1Adr == TWI_MCP23017_ADDR) {
    5274:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    5278:	80 32       	cpi	r24, 0x20	; 32
    527a:	31 f4       	brne	.+12     	; 0x5288 <__vector_24+0xea>
			main_bf.mainIsLcdAttached = false;
    527c:	e0 e0       	ldi	r30, 0x00	; 0
    527e:	f1 e0       	ldi	r31, 0x01	; 1
    5280:	80 81       	ld	r24, Z
    5282:	8f 77       	andi	r24, 0x7F	; 127
    5284:	80 83       	st	Z, r24
    5286:	09 c0       	rjmp	.+18     	; 0x529a <__vector_24+0xfc>
		} else if (twiSeq1Adr == TWI_SMART_LCD_ADDR) {
    5288:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twiSeq1Adr>
    528c:	82 32       	cpi	r24, 0x22	; 34
    528e:	29 f4       	brne	.+10     	; 0x529a <__vector_24+0xfc>
			main_bf.mainIsSmartAttached = false;
    5290:	e1 e0       	ldi	r30, 0x01	; 1
    5292:	f1 e0       	ldi	r31, 0x01	; 1
    5294:	80 81       	ld	r24, Z
    5296:	8e 7f       	andi	r24, 0xFE	; 254
    5298:	80 83       	st	Z, r24
		}

		isr_sendStop(false);
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	0e 94 bb 28 	call	0x5176	; 0x5176 <isr_sendStop>
		twcr_new |= _BV(TWSTO);
    52a0:	c0 61       	ori	r28, 0x10	; 16
    52a2:	5a c0       	rjmp	.+180    	; 0x5358 <__vector_24+0x1ba>
		break;

	case TWI_TWSR_M_SLAW_DATA_ACK:
		++twiSeq2DataIdx;
    52a4:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twiSeq2DataIdx>
    52a8:	8f 5f       	subi	r24, 0xFF	; 255
    52aa:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataIdx>
		if (twiSeq2DataIdx < twiSeq2DataCnt) {
    52ae:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <twiSeq2DataIdx>
    52b2:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <twiSeq2DataCnt>
    52b6:	98 17       	cp	r25, r24
    52b8:	48 f4       	brcc	.+18     	; 0x52cc <__vector_24+0x12e>
			/* send data */
			TWDR = twiSeq2Data[twiSeq2DataIdx];
    52ba:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twiSeq2DataIdx>
    52be:	f0 e0       	ldi	r31, 0x00	; 0
    52c0:	e1 5d       	subi	r30, 0xD1	; 209
    52c2:	fe 4f       	sbci	r31, 0xFE	; 254
    52c4:	80 81       	ld	r24, Z
    52c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    52ca:	46 c0       	rjmp	.+140    	; 0x5358 <__vector_24+0x1ba>

		} else {
			if (twiState.isRepeatedStart) {
    52cc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <twiState+0x1>
    52d0:	82 ff       	sbrs	r24, 2
    52d2:	06 c0       	rjmp	.+12     	; 0x52e0 <__vector_24+0x142>
				isr_sendStart(false, true);
    52d4:	61 e0       	ldi	r22, 0x01	; 1
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <isr_sendStart>
				twcr_new |= _BV(TWSTA);
    52dc:	c0 62       	ori	r28, 0x20	; 32
    52de:	3c c0       	rjmp	.+120    	; 0x5358 <__vector_24+0x1ba>
			} else {
				isr_sendStop(false);
    52e0:	80 e0       	ldi	r24, 0x00	; 0
    52e2:	0e 94 bb 28 	call	0x5176	; 0x5176 <isr_sendStop>
				twcr_new |= _BV(TWSTO);
    52e6:	c0 61       	ori	r28, 0x10	; 16
    52e8:	37 c0       	rjmp	.+110    	; 0x5358 <__vector_24+0x1ba>
			}
		}
		break;

	case TWI_TWSR_M_SLAW_DATA_NACK:
		isr_sendStop(false);
    52ea:	80 e0       	ldi	r24, 0x00	; 0
    52ec:	0e 94 bb 28 	call	0x5176	; 0x5176 <isr_sendStop>
		twcr_new |= _BV(TWSTO);
    52f0:	c0 61       	ori	r28, 0x10	; 16
    52f2:	32 c0       	rjmp	.+100    	; 0x5358 <__vector_24+0x1ba>
		break;

	case TWI_TWSR_M_SLAR_DATA_ACK:
		/* receive data */
		twiSeq2Data[twiSeq2DataIdx++]	= TWDR;
    52f4:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twiSeq2DataIdx>
    52f8:	81 e0       	ldi	r24, 0x01	; 1
    52fa:	8e 0f       	add	r24, r30
    52fc:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataIdx>
    5300:	f0 e0       	ldi	r31, 0x00	; 0
    5302:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5306:	e1 5d       	subi	r30, 0xD1	; 209
    5308:	fe 4f       	sbci	r31, 0xFE	; 254
    530a:	80 83       	st	Z, r24
		if (twiSeq2DataIdx >= twiSeq2DataCnt) {
    530c:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <twiSeq2DataIdx>
    5310:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <twiSeq2DataCnt>
    5314:	98 17       	cp	r25, r24
    5316:	18 f0       	brcs	.+6      	; 0x531e <__vector_24+0x180>
			twcr_new &= ~_BV(TWEA);							// NACK next data byte
    5318:	c2 2f       	mov	r28, r18
    531a:	c5 70       	andi	r28, 0x05	; 5
    531c:	1d c0       	rjmp	.+58     	; 0x5358 <__vector_24+0x1ba>
		} else {
			twcr_new |= _BV(TWEA);							// ACK  next data byte to get further data
    531e:	c0 64       	ori	r28, 0x40	; 64
    5320:	1b c0       	rjmp	.+54     	; 0x5358 <__vector_24+0x1ba>
		}
		break;

	case TWI_TWSR_M_SLAR_DATA_NACK:
		if (twiSeq2DataIdx < twiSeq2DataCnt) {
    5322:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <twiSeq2DataIdx>
    5326:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <twiSeq2DataCnt>
    532a:	98 17       	cp	r25, r24
    532c:	60 f4       	brcc	.+24     	; 0x5346 <__vector_24+0x1a8>
			twiSeq2Data[twiSeq2DataIdx++]	= TWDR;
    532e:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twiSeq2DataIdx>
    5332:	81 e0       	ldi	r24, 0x01	; 1
    5334:	8e 0f       	add	r24, r30
    5336:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataIdx>
    533a:	f0 e0       	ldi	r31, 0x00	; 0
    533c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5340:	e1 5d       	subi	r30, 0xD1	; 209
    5342:	fe 4f       	sbci	r31, 0xFE	; 254
    5344:	80 83       	st	Z, r24
		}
		isr_sendStop(false);
    5346:	80 e0       	ldi	r24, 0x00	; 0
    5348:	0e 94 bb 28 	call	0x5176	; 0x5176 <isr_sendStop>
		twcr_new |= _BV(TWSTO);
    534c:	c0 61       	ori	r28, 0x10	; 16
    534e:	04 c0       	rjmp	.+8      	; 0x5358 <__vector_24+0x1ba>
		break;

	default:
		isr_sendStop(false);
    5350:	80 e0       	ldi	r24, 0x00	; 0
    5352:	0e 94 bb 28 	call	0x5176	; 0x5176 <isr_sendStop>
		twcr_new |= _BV(TWSTO);
    5356:	c0 61       	ori	r28, 0x10	; 16
{	/* TWI */
	uint8_t tws = TWSR & (0b11111 << TWS3);
	uint8_t twd = TWDR;
	uint8_t twcr_cur = TWCR;
	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);			// TWI interrupt flag reset, TWI enabled and TWINT-Interrupt enabled
    5358:	c5 68       	ori	r28, 0x85	; 133
    535a:	c0 93 bc 00 	sts	0x00BC, r28	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    535e:	ff 91       	pop	r31
    5360:	ef 91       	pop	r30
    5362:	cf 91       	pop	r28
    5364:	bf 91       	pop	r27
    5366:	af 91       	pop	r26
    5368:	9f 91       	pop	r25
    536a:	8f 91       	pop	r24
    536c:	7f 91       	pop	r23
    536e:	6f 91       	pop	r22
    5370:	5f 91       	pop	r21
    5372:	4f 91       	pop	r20
    5374:	3f 91       	pop	r19
    5376:	2f 91       	pop	r18
    5378:	0f 90       	pop	r0
    537a:	0f be       	out	0x3f, r0	; 63
    537c:	0f 90       	pop	r0
    537e:	1f 90       	pop	r1
    5380:	18 95       	reti

00005382 <twi_mcp23017_fw_init>:
	uint8_t clr_data = 0x00;  // clear data
	uint8_t set_data = 0xff;  // set data
	uint8_t conData = _BV(IOCON_SEQOP) | _BV(IOCON_ODR);	// BANK=0, no MIRROR, BYTE mode, do not overwrite INT bits (ODR),

	/* IOCON */
	(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IOCON, conData);
    5382:	44 e2       	ldi	r20, 0x24	; 36
    5384:	6a e0       	ldi	r22, 0x0A	; 10
    5386:	80 e2       	ldi	r24, 0x20	; 32
    5388:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <twi_fw_sendCmdSendData1>
	twi_fw_waitUntilDone(0);
    538c:	80 e0       	ldi	r24, 0x00	; 0
    538e:	0e 94 82 27 	call	0x4f04	; 0x4f04 <twi_fw_waitUntilDone>

	if (!main_bf.mainIsLcdAttached) {
    5392:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5396:	88 23       	and	r24, r24
    5398:	84 f5       	brge	.+96     	; 0x53fa <twi_mcp23017_fw_init+0x78>
	}

	/* GPIO */

	/* GPPU */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPPUA, set_data, set_data);  // pull up all GPIO bits - setting port-A and port-B
    539a:	2f ef       	ldi	r18, 0xFF	; 255
    539c:	4f ef       	ldi	r20, 0xFF	; 255
    539e:	6c e0       	ldi	r22, 0x0C	; 12
    53a0:	80 e2       	ldi	r24, 0x20	; 32
    53a2:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>

	/* IODIR */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data, clr_data);  // 0=output / 1=input - setting port-A and port-B
    53a6:	20 e0       	ldi	r18, 0x00	; 0
    53a8:	4f ef       	ldi	r20, 0xFF	; 255
    53aa:	60 e0       	ldi	r22, 0x00	; 0
    53ac:	80 e2       	ldi	r24, 0x20	; 32
    53ae:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>

	/* IPOL */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IPOLA, clr_data, clr_data);  // no pin inversion - setting port-A and port-B
    53b2:	20 e0       	ldi	r18, 0x00	; 0
    53b4:	40 e0       	ldi	r20, 0x00	; 0
    53b6:	62 e0       	ldi	r22, 0x02	; 2
    53b8:	80 e2       	ldi	r24, 0x20	; 32
    53ba:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>

	/* GPIO */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPIOA, clr_data, clr_data);  // all data out cleared - setting port-A and port-B
    53be:	20 e0       	ldi	r18, 0x00	; 0
    53c0:	40 e0       	ldi	r20, 0x00	; 0
    53c2:	62 e1       	ldi	r22, 0x12	; 18
    53c4:	80 e2       	ldi	r24, 0x20	; 32
    53c6:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>

	/* OLAT */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATA, clr_data, clr_data);  // all data cleared - setting port-A and port-B
    53ca:	20 e0       	ldi	r18, 0x00	; 0
    53cc:	40 e0       	ldi	r20, 0x00	; 0
    53ce:	64 e1       	ldi	r22, 0x14	; 20
    53d0:	80 e2       	ldi	r24, 0x20	; 32
    53d2:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>


	/* INTERRUPTS */

	/* GPINTEN */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPINTENA, clr_data, clr_data);  // no INT used - setting port-A and port-B
    53d6:	20 e0       	ldi	r18, 0x00	; 0
    53d8:	40 e0       	ldi	r20, 0x00	; 0
    53da:	64 e0       	ldi	r22, 0x04	; 4
    53dc:	80 e2       	ldi	r24, 0x20	; 32
    53de:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>

	/* DEFVAL */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_DEFVALA, clr_data, clr_data);  // unused - setting port-A and port-B
    53e2:	20 e0       	ldi	r18, 0x00	; 0
    53e4:	40 e0       	ldi	r20, 0x00	; 0
    53e6:	66 e0       	ldi	r22, 0x06	; 6
    53e8:	80 e2       	ldi	r24, 0x20	; 32
    53ea:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>

	/* INTCON */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_INTCONA, set_data, set_data);  // unused - setting port-A and port-B
    53ee:	2f ef       	ldi	r18, 0xFF	; 255
    53f0:	4f ef       	ldi	r20, 0xFF	; 255
    53f2:	68 e0       	ldi	r22, 0x08	; 8
    53f4:	80 e2       	ldi	r24, 0x20	; 32
    53f6:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>
    53fa:	08 95       	ret

000053fc <twi_mcp23017_fw_close>:
	uint8_t set_data = 0xff;  // set data

	/* INTERRUPTS */

	/* GPINTEN */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPINTENA, clr_data, clr_data);  // no INT enable - setting port-A and port-B
    53fc:	20 e0       	ldi	r18, 0x00	; 0
    53fe:	40 e0       	ldi	r20, 0x00	; 0
    5400:	64 e0       	ldi	r22, 0x04	; 4
    5402:	80 e2       	ldi	r24, 0x20	; 32
    5404:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>


	/* GPIO */

	/* GPPU */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPPUA, set_data, set_data);  // setting port-A and port-B
    5408:	2f ef       	ldi	r18, 0xFF	; 255
    540a:	4f ef       	ldi	r20, 0xFF	; 255
    540c:	6c e0       	ldi	r22, 0x0C	; 12
    540e:	80 e2       	ldi	r24, 0x20	; 32
    5410:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>

	/* IODIR */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data, set_data);  // setting port-A and port-B
    5414:	2f ef       	ldi	r18, 0xFF	; 255
    5416:	4f ef       	ldi	r20, 0xFF	; 255
    5418:	60 e0       	ldi	r22, 0x00	; 0
    541a:	80 e2       	ldi	r24, 0x20	; 32
    541c:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>
    5420:	08 95       	ret

00005422 <twi_mcp23017_fw_setPortA_DirOut>:
void twi_mcp23017_fw_setPortA_DirOut(uint8_t isOut)
{
	uint8_t clr_data = 0x00;  // clear data
	uint8_t set_data = 0xff;  // set data

	if (isOut) {
    5422:	88 23       	and	r24, r24
    5424:	31 f0       	breq	.+12     	; 0x5432 <twi_mcp23017_fw_setPortA_DirOut+0x10>
		(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, clr_data);  // 0=output - setting port-A
    5426:	40 e0       	ldi	r20, 0x00	; 0
    5428:	60 e0       	ldi	r22, 0x00	; 0
    542a:	80 e2       	ldi	r24, 0x20	; 32
    542c:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <twi_fw_sendCmdSendData1>
    5430:	08 95       	ret

	} else {
		(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data);  // 1=input  - setting port-A
    5432:	4f ef       	ldi	r20, 0xFF	; 255
    5434:	60 e0       	ldi	r22, 0x00	; 0
    5436:	80 e2       	ldi	r24, 0x20	; 32
    5438:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <twi_fw_sendCmdSendData1>
    543c:	08 95       	ret

0000543e <twi_mcp23017_fw_setPortB>:
	}
}

void twi_mcp23017_fw_setPortB(uint8_t portB)
{
	(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATB, portB);
    543e:	48 2f       	mov	r20, r24
    5440:	65 e1       	ldi	r22, 0x15	; 21
    5442:	80 e2       	ldi	r24, 0x20	; 32
    5444:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <twi_fw_sendCmdSendData1>
    5448:	08 95       	ret

0000544a <twi_mcp23017_fw_setPortBA>:
}

void twi_mcp23017_fw_setPortBA(uint8_t portB, uint8_t portA)
{
    544a:	46 2f       	mov	r20, r22
	portB |= (portA & 0x01) << 7;							// XXX defective MCP23017 work-around
    544c:	90 e8       	ldi	r25, 0x80	; 128
    544e:	69 9f       	mul	r22, r25
    5450:	90 01       	movw	r18, r0
    5452:	11 24       	eor	r1, r1
    5454:	28 2b       	or	r18, r24
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATA, portA, portB);
    5456:	64 e1       	ldi	r22, 0x14	; 20
    5458:	80 e2       	ldi	r24, 0x20	; 32
    545a:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <twi_fw_sendCmdSendData1SendData2>
    545e:	08 95       	ret

00005460 <twi_mcp23017_fw_readPortA>:
}

uint8_t twi_mcp23017_fw_readPortA(void)
{
	return twi_fw_sendCmdReadData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPIOA);
    5460:	62 e1       	ldi	r22, 0x12	; 18
    5462:	80 e2       	ldi	r24, 0x20	; 32
    5464:	0e 94 88 28 	call	0x5110	; 0x5110 <twi_fw_sendCmdReadData1>
}
    5468:	08 95       	ret

0000546a <twi_mcp23017_av1624_fw_waitUntilReady>:
	twi_mcp23017_fw_setPortA_DirOut(false);
}


void twi_mcp23017_av1624_fw_waitUntilReady(void)
{
    546a:	1f 93       	push	r17
    546c:	cf 93       	push	r28
    546e:	df 93       	push	r29
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    5470:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    5474:	82 95       	swap	r24
    5476:	86 95       	lsr	r24
    5478:	87 70       	andi	r24, 0x07	; 7
    547a:	81 30       	cpi	r24, 0x01	; 1
    547c:	11 f0       	breq	.+4      	; 0x5482 <twi_mcp23017_av1624_fw_waitUntilReady+0x18>
    547e:	10 e0       	ldi	r17, 0x00	; 0
    5480:	01 c0       	rjmp	.+2      	; 0x5484 <twi_mcp23017_av1624_fw_waitUntilReady+0x1a>
    5482:	18 e0       	ldi	r17, 0x08	; 8

	twi_mcp23017_fw_setPortA_DirOut(false);
    5484:	80 e0       	ldi	r24, 0x00	; 0
    5486:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>

	for (;;) {
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    548a:	c1 2f       	mov	r28, r17
    548c:	c2 60       	ori	r28, 0x02	; 2
		twi_mcp23017_fw_setPortB(0b0011 | lightBF);
    548e:	13 60       	ori	r17, 0x03	; 3
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	twi_mcp23017_fw_setPortA_DirOut(false);

	for (;;) {
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    5490:	8c 2f       	mov	r24, r28
    5492:	0e 94 1f 2a 	call	0x543e	; 0x543e <twi_mcp23017_fw_setPortB>
		twi_mcp23017_fw_setPortB(0b0011 | lightBF);
    5496:	81 2f       	mov	r24, r17
    5498:	0e 94 1f 2a 	call	0x543e	; 0x543e <twi_mcp23017_fw_setPortB>
		uint8_t status = twi_mcp23017_fw_readPortA();
    549c:	0e 94 30 2a 	call	0x5460	; 0x5460 <twi_mcp23017_fw_readPortA>
    54a0:	d8 2f       	mov	r29, r24
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    54a2:	8c 2f       	mov	r24, r28
    54a4:	0e 94 1f 2a 	call	0x543e	; 0x543e <twi_mcp23017_fw_setPortB>

		if (!(status & 0x80)) {
    54a8:	dd 23       	and	r29, r29
    54aa:	44 f4       	brge	.+16     	; 0x54bc <twi_mcp23017_av1624_fw_waitUntilReady+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    54ac:	82 e4       	ldi	r24, 0x42	; 66
    54ae:	8a 95       	dec	r24
    54b0:	f1 f7       	brne	.-4      	; 0x54ae <twi_mcp23017_av1624_fw_waitUntilReady+0x44>
    54b2:	00 c0       	rjmp	.+0      	; 0x54b4 <twi_mcp23017_av1624_fw_waitUntilReady+0x4a>
			break;
		}

		_delay_us(10);
		wdt_reset();
    54b4:	a8 95       	wdr
		usbPoll();
    54b6:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <usbPoll>
	}
    54ba:	ea cf       	rjmp	.-44     	; 0x5490 <twi_mcp23017_av1624_fw_waitUntilReady+0x26>
}
    54bc:	df 91       	pop	r29
    54be:	cf 91       	pop	r28
    54c0:	1f 91       	pop	r17
    54c2:	08 95       	ret

000054c4 <twi_mcp23017_av1624_fw_init>:
	 * 	PB7		(free)
	 */

	// wait > 30 ms --> done

	if (!(main_bf.mainIsLcdAttached)) {
    54c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    54c8:	88 23       	and	r24, r24
    54ca:	0c f0       	brlt	.+2      	; 0x54ce <twi_mcp23017_av1624_fw_init+0xa>
    54cc:	86 c0       	rjmp	.+268    	; 0x55da <twi_mcp23017_av1624_fw_init+0x116>
		return;
	}

	twi_mcp23017_av1624_fw_waitUntilReady();											// within this function the main_bf.mainIsSmartAttached is being set/cleared
    54ce:	0e 94 35 2a 	call	0x546a	; 0x546a <twi_mcp23017_av1624_fw_waitUntilReady>

	// set interface width to 8bits - (1)
	twi_mcp23017_fw_setPortA_DirOut(true);
    54d2:	81 e0       	ldi	r24, 0x01	; 1
    54d4:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    54d8:	6c e3       	ldi	r22, 0x3C	; 60
    54da:	80 e0       	ldi	r24, 0x00	; 0
    54dc:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    54e0:	6c e3       	ldi	r22, 0x3C	; 60
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    54e8:	6c e3       	ldi	r22, 0x3C	; 60
    54ea:	80 e0       	ldi	r24, 0x00	; 0
    54ec:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    54f0:	80 e0       	ldi	r24, 0x00	; 0
    54f2:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
    54f6:	8b e1       	ldi	r24, 0x1B	; 27
    54f8:	8a 95       	dec	r24
    54fa:	f1 f7       	brne	.-4      	; 0x54f8 <twi_mcp23017_av1624_fw_init+0x34>
    54fc:	00 00       	nop

	// > 4.1 µs
	_delay_us(4.1f);

	// set interface width to 8bits - (2)
	twi_mcp23017_fw_setPortA_DirOut(true);
    54fe:	81 e0       	ldi	r24, 0x01	; 1
    5500:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    5504:	6c e3       	ldi	r22, 0x3C	; 60
    5506:	80 e0       	ldi	r24, 0x00	; 0
    5508:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    550c:	6c e3       	ldi	r22, 0x3C	; 60
    550e:	81 e0       	ldi	r24, 0x01	; 1
    5510:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    5514:	6c e3       	ldi	r22, 0x3C	; 60
    5516:	80 e0       	ldi	r24, 0x00	; 0
    5518:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    551c:	80 e0       	ldi	r24, 0x00	; 0
    551e:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
    5522:	83 ef       	ldi	r24, 0xF3	; 243
    5524:	91 e0       	ldi	r25, 0x01	; 1
    5526:	01 97       	sbiw	r24, 0x01	; 1
    5528:	f1 f7       	brne	.-4      	; 0x5526 <twi_mcp23017_av1624_fw_init+0x62>
    552a:	00 c0       	rjmp	.+0      	; 0x552c <twi_mcp23017_av1624_fw_init+0x68>
    552c:	00 00       	nop

	// > 100 µs
	_delay_us(100.0f);

	// set interface width to 8bits - (3)
	twi_mcp23017_fw_setPortA_DirOut(true);
    552e:	81 e0       	ldi	r24, 0x01	; 1
    5530:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    5534:	6c e3       	ldi	r22, 0x3C	; 60
    5536:	80 e0       	ldi	r24, 0x00	; 0
    5538:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    553c:	6c e3       	ldi	r22, 0x3C	; 60
    553e:	81 e0       	ldi	r24, 0x01	; 1
    5540:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    5544:	6c e3       	ldi	r22, 0x3C	; 60
    5546:	80 e0       	ldi	r24, 0x00	; 0
    5548:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>

	// set interface width to 8bits - (4)
	twi_mcp23017_av1624_fw_waitUntilReady();
    554c:	0e 94 35 2a 	call	0x546a	; 0x546a <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    5550:	81 e0       	ldi	r24, 0x01	; 1
    5552:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    5556:	6c e3       	ldi	r22, 0x3C	; 60
    5558:	80 e0       	ldi	r24, 0x00	; 0
    555a:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    555e:	6c e3       	ldi	r22, 0x3C	; 60
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    5566:	6c e3       	ldi	r22, 0x3C	; 60
    5568:	80 e0       	ldi	r24, 0x00	; 0
    556a:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>


	// display ON
	twi_mcp23017_av1624_fw_waitUntilReady();
    556e:	0e 94 35 2a 	call	0x546a	; 0x546a <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001100);
    5578:	6c e0       	ldi	r22, 0x0C	; 12
    557a:	80 e0       	ldi	r24, 0x00	; 0
    557c:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00001100);
    5580:	6c e0       	ldi	r22, 0x0C	; 12
    5582:	81 e0       	ldi	r24, 0x01	; 1
    5584:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001100);
    5588:	6c e0       	ldi	r22, 0x0C	; 12
    558a:	80 e0       	ldi	r24, 0x00	; 0
    558c:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>

	// display CLEAR
	twi_mcp23017_av1624_fw_waitUntilReady();
    5590:	0e 94 35 2a 	call	0x546a	; 0x546a <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    5594:	81 e0       	ldi	r24, 0x01	; 1
    5596:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    559a:	61 e0       	ldi	r22, 0x01	; 1
    559c:	80 e0       	ldi	r24, 0x00	; 0
    559e:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000001);
    55a2:	61 e0       	ldi	r22, 0x01	; 1
    55a4:	81 e0       	ldi	r24, 0x01	; 1
    55a6:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    55aa:	61 e0       	ldi	r22, 0x01	; 1
    55ac:	80 e0       	ldi	r24, 0x00	; 0
    55ae:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>

	// display Entry Mode Set
	twi_mcp23017_av1624_fw_waitUntilReady();
    55b2:	0e 94 35 2a 	call	0x546a	; 0x546a <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    55b6:	81 e0       	ldi	r24, 0x01	; 1
    55b8:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000110);
    55bc:	66 e0       	ldi	r22, 0x06	; 6
    55be:	80 e0       	ldi	r24, 0x00	; 0
    55c0:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000110);
    55c4:	66 e0       	ldi	r22, 0x06	; 6
    55c6:	81 e0       	ldi	r24, 0x01	; 1
    55c8:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b1000, 0b00000110);
    55cc:	66 e0       	ldi	r22, 0x06	; 6
    55ce:	88 e0       	ldi	r24, 0x08	; 8
    55d0:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    55d4:	80 e0       	ldi	r24, 0x00	; 0
    55d6:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
    55da:	08 95       	ret

000055dc <twi_mcp23017_av1624_fw_close>:
}

void twi_mcp23017_av1624_fw_close(void)
{
	if (!(main_bf.mainIsLcdAttached)) {
    55dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    55e0:	88 23       	and	r24, r24
    55e2:	34 f5       	brge	.+76     	; 0x5630 <twi_mcp23017_av1624_fw_close+0x54>
		return;
	}

	// display CLEAR
	twi_mcp23017_fw_setPortA_DirOut(true);
    55e4:	81 e0       	ldi	r24, 0x01	; 1
    55e6:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    55ea:	61 e0       	ldi	r22, 0x01	; 1
    55ec:	80 e0       	ldi	r24, 0x00	; 0
    55ee:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000001);
    55f2:	61 e0       	ldi	r22, 0x01	; 1
    55f4:	81 e0       	ldi	r24, 0x01	; 1
    55f6:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    55fa:	61 e0       	ldi	r22, 0x01	; 1
    55fc:	80 e0       	ldi	r24, 0x00	; 0
    55fe:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    5602:	80 e0       	ldi	r24, 0x00	; 0
    5604:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>

	// display OFF
	twi_mcp23017_av1624_fw_waitUntilReady();
    5608:	0e 94 35 2a 	call	0x546a	; 0x546a <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    560c:	81 e0       	ldi	r24, 0x01	; 1
    560e:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001000);
    5612:	68 e0       	ldi	r22, 0x08	; 8
    5614:	80 e0       	ldi	r24, 0x00	; 0
    5616:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00001000);
    561a:	68 e0       	ldi	r22, 0x08	; 8
    561c:	81 e0       	ldi	r24, 0x01	; 1
    561e:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001000);
    5622:	68 e0       	ldi	r22, 0x08	; 8
    5624:	80 e0       	ldi	r24, 0x00	; 0
    5626:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    562a:	80 e0       	ldi	r24, 0x00	; 0
    562c:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
    5630:	08 95       	ret

00005632 <twi_mcp23017_av1624_fw_gotoPosition>:
		usbPoll();
	}
}

void twi_mcp23017_av1624_fw_gotoPosition(uint8_t line, uint8_t column)
{
    5632:	cf 93       	push	r28
    5634:	df 93       	push	r29
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    5636:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    563a:	92 95       	swap	r25
    563c:	96 95       	lsr	r25
    563e:	97 70       	andi	r25, 0x07	; 7
    5640:	91 30       	cpi	r25, 0x01	; 1
    5642:	11 f0       	breq	.+4      	; 0x5648 <twi_mcp23017_av1624_fw_gotoPosition+0x16>
    5644:	d0 e0       	ldi	r29, 0x00	; 0
    5646:	01 c0       	rjmp	.+2      	; 0x564a <twi_mcp23017_av1624_fw_gotoPosition+0x18>
    5648:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t ddramAdrCmd = (0x80 | ((line % 2) << 6) | (column % 16));
    564a:	c6 2f       	mov	r28, r22
    564c:	cf 70       	andi	r28, 0x0F	; 15
    564e:	c0 68       	ori	r28, 0x80	; 128
    5650:	28 2f       	mov	r18, r24
    5652:	21 70       	andi	r18, 0x01	; 1
    5654:	30 e0       	ldi	r19, 0x00	; 0
    5656:	00 24       	eor	r0, r0
    5658:	36 95       	lsr	r19
    565a:	27 95       	ror	r18
    565c:	07 94       	ror	r0
    565e:	36 95       	lsr	r19
    5660:	27 95       	ror	r18
    5662:	07 94       	ror	r0
    5664:	32 2f       	mov	r19, r18
    5666:	20 2d       	mov	r18, r0
    5668:	c2 2b       	or	r28, r18

	twi_mcp23017_av1624_fw_waitUntilReady();
    566a:	0e 94 35 2a 	call	0x546a	; 0x546a <twi_mcp23017_av1624_fw_waitUntilReady>

	// set DDRAM address
	twi_mcp23017_fw_setPortA_DirOut(true);
    566e:	81 e0       	ldi	r24, 0x01	; 1
    5670:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
    5674:	6c 2f       	mov	r22, r28
    5676:	8d 2f       	mov	r24, r29
    5678:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001 | lightBF, ddramAdrCmd);
    567c:	6c 2f       	mov	r22, r28
    567e:	8d 2f       	mov	r24, r29
    5680:	81 60       	ori	r24, 0x01	; 1
    5682:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
    5686:	6c 2f       	mov	r22, r28
    5688:	8d 2f       	mov	r24, r29
    568a:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    568e:	80 e0       	ldi	r24, 0x00	; 0
    5690:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
}
    5694:	df 91       	pop	r29
    5696:	cf 91       	pop	r28
    5698:	08 95       	ret

0000569a <twi_mcp23017_av1624_fw_writeString>:

void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
    569a:	cf 92       	push	r12
    569c:	df 92       	push	r13
    569e:	ef 92       	push	r14
    56a0:	ff 92       	push	r15
    56a2:	0f 93       	push	r16
    56a4:	1f 93       	push	r17
    56a6:	cf 93       	push	r28
    56a8:	df 93       	push	r29
    56aa:	7c 01       	movw	r14, r24
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    56ac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    56b0:	82 95       	swap	r24
    56b2:	86 95       	lsr	r24
    56b4:	87 70       	andi	r24, 0x07	; 7
    56b6:	81 30       	cpi	r24, 0x01	; 1
    56b8:	11 f0       	breq	.+4      	; 0x56be <twi_mcp23017_av1624_fw_writeString+0x24>
    56ba:	d1 2c       	mov	r13, r1
    56bc:	03 c0       	rjmp	.+6      	; 0x56c4 <twi_mcp23017_av1624_fw_writeString+0x2a>
    56be:	68 94       	set
    56c0:	dd 24       	eor	r13, r13
    56c2:	d3 f8       	bld	r13, 3

	for (int idx = 0; idx < len; ++idx) {
    56c4:	66 23       	and	r22, r22
    56c6:	31 f1       	breq	.+76     	; 0x5714 <twi_mcp23017_av1624_fw_writeString+0x7a>
    56c8:	87 01       	movw	r16, r14
    56ca:	e6 0e       	add	r14, r22
    56cc:	f1 1c       	adc	r15, r1

		twi_mcp23017_av1624_fw_waitUntilReady();

		// write data
		twi_mcp23017_fw_setPortA_DirOut(true);
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    56ce:	dd 2d       	mov	r29, r13
    56d0:	d4 60       	ori	r29, 0x04	; 4
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
    56d2:	8d 2d       	mov	r24, r13
    56d4:	85 60       	ori	r24, 0x05	; 5
    56d6:	c8 2e       	mov	r12, r24
void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	for (int idx = 0; idx < len; ++idx) {
		uint8_t c = buffer[idx];
    56d8:	f8 01       	movw	r30, r16
    56da:	c1 91       	ld	r28, Z+
    56dc:	8f 01       	movw	r16, r30
		c = recodeChar(c);

		twi_mcp23017_av1624_fw_waitUntilReady();
    56de:	0e 94 35 2a 	call	0x546a	; 0x546a <twi_mcp23017_av1624_fw_waitUntilReady>

		// write data
		twi_mcp23017_fw_setPortA_DirOut(true);
    56e2:	81 e0       	ldi	r24, 0x01	; 1
    56e4:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    56e8:	6c 2f       	mov	r22, r28
    56ea:	8d 2f       	mov	r24, r29
    56ec:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
    56f0:	6c 2f       	mov	r22, r28
    56f2:	8c 2d       	mov	r24, r12
    56f4:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    56f8:	6c 2f       	mov	r22, r28
    56fa:	8d 2f       	mov	r24, r29
    56fc:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0000 | lightBF, c);
    5700:	6c 2f       	mov	r22, r28
    5702:	8d 2d       	mov	r24, r13
    5704:	0e 94 25 2a 	call	0x544a	; 0x544a <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortA_DirOut(false);
    5708:	80 e0       	ldi	r24, 0x00	; 0
    570a:	0e 94 11 2a 	call	0x5422	; 0x5422 <twi_mcp23017_fw_setPortA_DirOut>

void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	for (int idx = 0; idx < len; ++idx) {
    570e:	0e 15       	cp	r16, r14
    5710:	1f 05       	cpc	r17, r15
    5712:	11 f7       	brne	.-60     	; 0x56d8 <twi_mcp23017_av1624_fw_writeString+0x3e>
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
		twi_mcp23017_fw_setPortBA(0b0000 | lightBF, c);
		twi_mcp23017_fw_setPortA_DirOut(false);
	}
}
    5714:	df 91       	pop	r29
    5716:	cf 91       	pop	r28
    5718:	1f 91       	pop	r17
    571a:	0f 91       	pop	r16
    571c:	ff 90       	pop	r15
    571e:	ef 90       	pop	r14
    5720:	df 90       	pop	r13
    5722:	cf 90       	pop	r12
    5724:	08 95       	ret

00005726 <twi_smart_lcd_fw_get_version>:
}


uint8_t twi_smart_lcd_fw_get_version(void)
{
	return twi_fw_sendCmdReadData1(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_GETVER);		// within this function the main_bf.mainIsSmartAttached is being set
    5726:	61 e0       	ldi	r22, 0x01	; 1
    5728:	82 e2       	ldi	r24, 0x22	; 34
    572a:	0e 94 88 28 	call	0x5110	; 0x5110 <twi_fw_sendCmdReadData1>
}
    572e:	08 95       	ret

00005730 <twi_smart_lcd_fw_init>:
extern uchar mainPrepareBuffer[MAIN_PREPARE_BUFFER_SIZE];


void twi_smart_lcd_fw_init(void)
{
	uint8_t ver = twi_smart_lcd_fw_get_version();
    5730:	0e 94 93 2b 	call	0x5726	; 0x5726 <twi_smart_lcd_fw_get_version>
    5734:	08 95       	ret

00005736 <twi_smart_lcd_fw_set_clk_state>:
	return twi_fw_sendCmdReadData1(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_GETVER);		// within this function the main_bf.mainIsSmartAttached is being set
}

void twi_smart_lcd_fw_set_clk_state(uint8_t clk_state, int16_t phase100)
{
	mainPrepareBuffer[0] = clk_state;
    5736:	ef e0       	ldi	r30, 0x0F	; 15
    5738:	f4 e0       	ldi	r31, 0x04	; 4
    573a:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (phase100 & 0xff);
    573c:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) (phase100 >> 8);
    573e:	72 83       	std	Z+2, r23	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_CLK_STATE, 3, (uint8_t*) &mainPrepareBuffer);
    5740:	9f 01       	movw	r18, r30
    5742:	43 e0       	ldi	r20, 0x03	; 3
    5744:	60 e8       	ldi	r22, 0x80	; 128
    5746:	82 e2       	ldi	r24, 0x22	; 34
    5748:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    574c:	08 95       	ret

0000574e <twi_smart_lcd_fw_set_date>:
}

void twi_smart_lcd_fw_set_date(uint16_t year, uint8_t month, uint8_t day)
{
	mainPrepareBuffer[0] = (uint8_t) (year & 0xff);
    574e:	ef e0       	ldi	r30, 0x0F	; 15
    5750:	f4 e0       	ldi	r31, 0x04	; 4
    5752:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (year >>  8);
    5754:	91 83       	std	Z+1, r25	; 0x01
	mainPrepareBuffer[2] = month;
    5756:	62 83       	std	Z+2, r22	; 0x02
	mainPrepareBuffer[3] = day;
    5758:	43 83       	std	Z+3, r20	; 0x03
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY, 4, (uint8_t*) &mainPrepareBuffer);
    575a:	9f 01       	movw	r18, r30
    575c:	44 e0       	ldi	r20, 0x04	; 4
    575e:	61 e8       	ldi	r22, 0x81	; 129
    5760:	82 e2       	ldi	r24, 0x22	; 34
    5762:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    5766:	08 95       	ret

00005768 <twi_smart_lcd_fw_set_time>:
}

void twi_smart_lcd_fw_set_time(uint8_t hour, uint8_t minute, uint8_t second)
{
	mainPrepareBuffer[0] = hour;
    5768:	ef e0       	ldi	r30, 0x0F	; 15
    576a:	f4 e0       	ldi	r31, 0x04	; 4
    576c:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = minute;
    576e:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = second;
    5770:	42 83       	std	Z+2, r20	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC, 3, (uint8_t*) &mainPrepareBuffer);
    5772:	9f 01       	movw	r18, r30
    5774:	43 e0       	ldi	r20, 0x03	; 3
    5776:	62 e8       	ldi	r22, 0x82	; 130
    5778:	82 e2       	ldi	r24, 0x22	; 34
    577a:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    577e:	08 95       	ret

00005780 <twi_smart_lcd_fw_set_ppb>:
}

void twi_smart_lcd_fw_set_ppb(int16_t ppb_int, uint16_t ppb_frac1000)
{
	mainPrepareBuffer[0] = (uint8_t) (ppb_int & 0xff);
    5780:	ef e0       	ldi	r30, 0x0F	; 15
    5782:	f4 e0       	ldi	r31, 0x04	; 4
    5784:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (ppb_int >> 8);
    5786:	91 83       	std	Z+1, r25	; 0x01
	mainPrepareBuffer[2] = (uint8_t) (ppb_frac1000 & 0xff);
    5788:	62 83       	std	Z+2, r22	; 0x02
	mainPrepareBuffer[3] = (uint8_t) (ppb_frac1000 >> 8);
    578a:	73 83       	std	Z+3, r23	; 0x03
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_PPB, 4, (uint8_t*) &mainPrepareBuffer);
    578c:	9f 01       	movw	r18, r30
    578e:	44 e0       	ldi	r20, 0x04	; 4
    5790:	63 e8       	ldi	r22, 0x83	; 131
    5792:	82 e2       	ldi	r24, 0x22	; 34
    5794:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    5798:	08 95       	ret

0000579a <twi_smart_lcd_fw_set_pwm>:
}

void twi_smart_lcd_fw_set_pwm(uint8_t pwm_int, uint8_t pwm_frac256)
{
	mainPrepareBuffer[0] = pwm_int;
    579a:	ef e0       	ldi	r30, 0x0F	; 15
    579c:	f4 e0       	ldi	r31, 0x04	; 4
    579e:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = pwm_frac256;
    57a0:	61 83       	std	Z+1, r22	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_TCXO_PWM, 2, (uint8_t*) &mainPrepareBuffer);
    57a2:	9f 01       	movw	r18, r30
    57a4:	42 e0       	ldi	r20, 0x02	; 2
    57a6:	64 e8       	ldi	r22, 0x84	; 132
    57a8:	82 e2       	ldi	r24, 0x22	; 34
    57aa:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    57ae:	08 95       	ret

000057b0 <twi_smart_lcd_fw_set_pv>:
}

void twi_smart_lcd_fw_set_pv(uint8_t pv_int, uint16_t pv_frac)
{
	mainPrepareBuffer[0] = pv_int;
    57b0:	ef e0       	ldi	r30, 0x0F	; 15
    57b2:	f4 e0       	ldi	r31, 0x04	; 4
    57b4:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (pv_frac & 0xff);
    57b6:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) (pv_frac >> 8);
    57b8:	72 83       	std	Z+2, r23	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_TCXO_VC, 3, (uint8_t*) &mainPrepareBuffer);
    57ba:	9f 01       	movw	r18, r30
    57bc:	43 e0       	ldi	r20, 0x03	; 3
    57be:	65 e8       	ldi	r22, 0x85	; 133
    57c0:	82 e2       	ldi	r24, 0x22	; 34
    57c2:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    57c6:	08 95       	ret

000057c8 <twi_smart_lcd_fw_set_sat_use>:
}

void twi_smart_lcd_fw_set_sat_use(uint8_t sat_west, uint8_t sat_east, uint8_t sat_used)
{
	mainPrepareBuffer[0] = sat_west;
    57c8:	ef e0       	ldi	r30, 0x0F	; 15
    57ca:	f4 e0       	ldi	r31, 0x04	; 4
    57cc:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = sat_east;
    57ce:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = sat_used;
    57d0:	42 83       	std	Z+2, r20	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_SATS, 3, (uint8_t*) &mainPrepareBuffer);
    57d2:	9f 01       	movw	r18, r30
    57d4:	43 e0       	ldi	r20, 0x03	; 3
    57d6:	68 e8       	ldi	r22, 0x88	; 136
    57d8:	82 e2       	ldi	r24, 0x22	; 34
    57da:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    57de:	08 95       	ret

000057e0 <twi_smart_lcd_fw_set_sat_dop>:
}

void twi_smart_lcd_fw_set_sat_dop(uint16_t sat_dop100)
{
	mainPrepareBuffer[0] = (uint8_t) (sat_dop100 & 0xff);
    57e0:	ef e0       	ldi	r30, 0x0F	; 15
    57e2:	f4 e0       	ldi	r31, 0x04	; 4
    57e4:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (sat_dop100 >> 8);
    57e6:	91 83       	std	Z+1, r25	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_DOP, 2, (uint8_t*) &mainPrepareBuffer);
    57e8:	9f 01       	movw	r18, r30
    57ea:	42 e0       	ldi	r20, 0x02	; 2
    57ec:	69 e8       	ldi	r22, 0x89	; 137
    57ee:	82 e2       	ldi	r24, 0x22	; 34
    57f0:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    57f4:	08 95       	ret

000057f6 <twi_smart_lcd_fw_set_pos_state>:
}

void twi_smart_lcd_fw_set_pos_state(uint8_t state_fi, uint8_t state_m2)
{
	mainPrepareBuffer[0] = state_fi;
    57f6:	ef e0       	ldi	r30, 0x0F	; 15
    57f8:	f4 e0       	ldi	r31, 0x04	; 4
    57fa:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = state_m2;
    57fc:	61 83       	std	Z+1, r22	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_STATE, 2, (uint8_t*) &mainPrepareBuffer);
    57fe:	9f 01       	movw	r18, r30
    5800:	42 e0       	ldi	r20, 0x02	; 2
    5802:	6a e8       	ldi	r22, 0x8A	; 138
    5804:	82 e2       	ldi	r24, 0x22	; 34
    5806:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    580a:	08 95       	ret

0000580c <twi_smart_lcd_fw_set_pos_lat>:
}

void twi_smart_lcd_fw_set_pos_lat(uint8_t lat_sgn, uint8_t lat_deg, uint8_t lat_min_int, uint16_t lat_min_frac10000)
{
	mainPrepareBuffer[0] = (uint8_t) lat_sgn;
    580c:	ef e0       	ldi	r30, 0x0F	; 15
    580e:	f4 e0       	ldi	r31, 0x04	; 4
    5810:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) lat_deg;
    5812:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) lat_min_int;
    5814:	42 83       	std	Z+2, r20	; 0x02
	mainPrepareBuffer[3] = (uint8_t) (lat_min_frac10000 & 0xff);
    5816:	23 83       	std	Z+3, r18	; 0x03
	mainPrepareBuffer[4] = (uint8_t) (lat_min_frac10000 >> 8);
    5818:	34 83       	std	Z+4, r19	; 0x04
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_LAT, 5, (uint8_t*) &mainPrepareBuffer);
    581a:	9f 01       	movw	r18, r30
    581c:	45 e0       	ldi	r20, 0x05	; 5
    581e:	6b e8       	ldi	r22, 0x8B	; 139
    5820:	82 e2       	ldi	r24, 0x22	; 34
    5822:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    5826:	08 95       	ret

00005828 <twi_smart_lcd_fw_set_pos_lon>:
}

void twi_smart_lcd_fw_set_pos_lon(uint8_t lon_sgn, uint8_t lon_deg, uint8_t lon_min_int, uint16_t lon_min_frac10000)
{
	mainPrepareBuffer[0] = (uint8_t) lon_sgn;
    5828:	ef e0       	ldi	r30, 0x0F	; 15
    582a:	f4 e0       	ldi	r31, 0x04	; 4
    582c:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) lon_deg;
    582e:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) lon_min_int;
    5830:	42 83       	std	Z+2, r20	; 0x02
	mainPrepareBuffer[3] = (uint8_t) (lon_min_frac10000 & 0xff);
    5832:	23 83       	std	Z+3, r18	; 0x03
	mainPrepareBuffer[4] = (uint8_t) (lon_min_frac10000 >> 8);
    5834:	34 83       	std	Z+4, r19	; 0x04
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_LON, 5, (uint8_t*) &mainPrepareBuffer);
    5836:	9f 01       	movw	r18, r30
    5838:	45 e0       	ldi	r20, 0x05	; 5
    583a:	6c e8       	ldi	r22, 0x8C	; 140
    583c:	82 e2       	ldi	r24, 0x22	; 34
    583e:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    5842:	08 95       	ret

00005844 <twi_smart_lcd_fw_set_pos_height>:
}

void twi_smart_lcd_fw_set_pos_height(uint16_t height)
{
	mainPrepareBuffer[0] = (uint8_t) (height & 0xff);
    5844:	ef e0       	ldi	r30, 0x0F	; 15
    5846:	f4 e0       	ldi	r31, 0x04	; 4
    5848:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (height >> 8);
    584a:	91 83       	std	Z+1, r25	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT, 2, (uint8_t*) &mainPrepareBuffer);
    584c:	9f 01       	movw	r18, r30
    584e:	42 e0       	ldi	r20, 0x02	; 2
    5850:	6d e8       	ldi	r22, 0x8D	; 141
    5852:	82 e2       	ldi	r24, 0x22	; 34
    5854:	0e 94 3f 28 	call	0x507e	; 0x507e <twi_fw_sendCmdSendData1SendDataVar>
    5858:	08 95       	ret

0000585a <usb_fw_sendInInterrupt>:
 */
void usb_fw_sendInInterrupt(void)
{
	static uchar bufferInt[5] = "<INT>";

	if (usbInterruptIsReady()) {
    585a:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <usbTxStatus1>
    585e:	84 ff       	sbrs	r24, 4
    5860:	05 c0       	rjmp	.+10     	; 0x586c <usb_fw_sendInInterrupt+0x12>
		/* send next packet if a new time-slot is ready to send */
		usbSetInterrupt(bufferInt, sizeof(bufferInt));
    5862:	65 e0       	ldi	r22, 0x05	; 5
    5864:	88 e0       	ldi	r24, 0x08	; 8
    5866:	91 e0       	ldi	r25, 0x01	; 1
    5868:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <usbSetInterrupt>
    586c:	08 95       	ret

0000586e <usb_fw_init>:

/*  -- 8< -- */

void usb_fw_init(void)
{
	usbInit();
    586e:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <usbInit>
	USB_INTR_ENABLE &= ~(_BV(USB_INTR_ENABLE_BIT));
    5872:	e8 98       	cbi	0x1d, 0	; 29
	usbDeviceDisconnect();									// enforce re-enumeration, do this while interrupts are disabled!
    5874:	21 98       	cbi	0x04, 1	; 4
    5876:	29 98       	cbi	0x05, 1	; 5
    5878:	89 ef       	ldi	r24, 0xF9	; 249
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    587a:	e7 e8       	ldi	r30, 0x87	; 135
    587c:	f3 e1       	ldi	r31, 0x13	; 19
    587e:	31 97       	sbiw	r30, 0x01	; 1
    5880:	f1 f7       	brne	.-4      	; 0x587e <usb_fw_init+0x10>
    5882:	00 c0       	rjmp	.+0      	; 0x5884 <usb_fw_init+0x16>
    5884:	00 00       	nop

    uint8_t i = 250;
    while (--i) {											// fake USB disconnect for > 250 ms
        _delay_ms(1);
        wdt_reset();
    5886:	a8 95       	wdr
    5888:	81 50       	subi	r24, 0x01	; 1
	usbInit();
	USB_INTR_ENABLE &= ~(_BV(USB_INTR_ENABLE_BIT));
	usbDeviceDisconnect();									// enforce re-enumeration, do this while interrupts are disabled!

    uint8_t i = 250;
    while (--i) {											// fake USB disconnect for > 250 ms
    588a:	b9 f7       	brne	.-18     	; 0x587a <usb_fw_init+0xc>
        _delay_ms(1);
        wdt_reset();
    }

    usbDeviceConnect();
    588c:	21 9a       	sbi	0x04, 1	; 4
    588e:	29 9a       	sbi	0x05, 1	; 5
	USB_INTR_ENABLE |= _BV(USB_INTR_ENABLE_BIT);
    5890:	e8 9a       	sbi	0x1d, 0	; 29
    5892:	08 95       	ret

00005894 <usb_fw_close>:
}

void usb_fw_close(void)
{
	USB_INTR_ENABLE &= ~(_BV(USB_INTR_ENABLE_BIT));
    5894:	e8 98       	cbi	0x1d, 0	; 29
	usbDeviceDisconnect();
    5896:	21 98       	cbi	0x04, 1	; 4
    5898:	29 98       	cbi	0x05, 1	; 5
    589a:	08 95       	ret

0000589c <usbFunctionSetup>:

/* usbFunctionSetup() is called when the host does a setup of the USB function. For more
 * information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
    589c:	fc 01       	movw	r30, r24
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;

    if (((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_VENDOR) &&
    589e:	90 81       	ld	r25, Z
    58a0:	89 2f       	mov	r24, r25
    58a2:	80 76       	andi	r24, 0x60	; 96
    58a4:	80 34       	cpi	r24, 0x40	; 64
    58a6:	81 f5       	brne	.+96     	; 0x5908 <usbFunctionSetup+0x6c>
    	((rq->bmRequestType & USBRQ_RCPT_MASK) == USBRQ_RCPT_DEVICE)) {
    58a8:	9f 71       	andi	r25, 0x1F	; 31
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;

    if (((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_VENDOR) &&
    58aa:	81 f5       	brne	.+96     	; 0x590c <usbFunctionSetup+0x70>
    	((rq->bmRequestType & USBRQ_RCPT_MASK) == USBRQ_RCPT_DEVICE)) {
    	//usbSetupCntr++;

    	if (rq->bRequest == USBCUSTOMRQ_ECHO) {				// echo -- used for reliability tests
    58ac:	81 81       	ldd	r24, Z+1	; 0x01
    58ae:	81 11       	cpse	r24, r1
    58b0:	11 c0       	rjmp	.+34     	; 0x58d4 <usbFunctionSetup+0x38>
    		usbCtxtSetupReplyBuffer[0] = rq->wValue.bytes[0];
    58b2:	a1 e4       	ldi	r26, 0x41	; 65
    58b4:	b1 e0       	ldi	r27, 0x01	; 1
    58b6:	82 81       	ldd	r24, Z+2	; 0x02
    58b8:	8c 93       	st	X, r24
    		usbCtxtSetupReplyBuffer[1] = rq->wValue.bytes[1];
    58ba:	83 81       	ldd	r24, Z+3	; 0x03
    58bc:	11 96       	adiw	r26, 0x01	; 1
    58be:	8c 93       	st	X, r24
    58c0:	11 97       	sbiw	r26, 0x01	; 1
    		usbCtxtSetupReplyBuffer[2] = rq->wIndex.bytes[0];
    58c2:	84 81       	ldd	r24, Z+4	; 0x04
    58c4:	12 96       	adiw	r26, 0x02	; 2
    58c6:	8c 93       	st	X, r24
    58c8:	12 97       	sbiw	r26, 0x02	; 2
    		usbCtxtSetupReplyBuffer[3] = rq->wIndex.bytes[1];
    58ca:	85 81       	ldd	r24, Z+5	; 0x05
    58cc:	13 96       	adiw	r26, 0x03	; 3
    58ce:	8c 93       	st	X, r24
    		len = 4;
    58d0:	84 e0       	ldi	r24, 0x04	; 4
    58d2:	1f c0       	rjmp	.+62     	; 0x5912 <usbFunctionSetup+0x76>

    	} else if (rq->bRequest == USBCUSTOMRQ_RECV) {		// receive data from this USB function
    58d4:	82 30       	cpi	r24, 0x02	; 2
    58d6:	59 f4       	brne	.+22     	; 0x58ee <usbFunctionSetup+0x52>
    		uint8_t sreg = SREG;
    58d8:	8f b7       	in	r24, 0x3f	; 63
    		cli();
    58da:	f8 94       	cli
			cntRcv = rq->wLength.word;
    58dc:	26 81       	ldd	r18, Z+6	; 0x06
    58de:	37 81       	ldd	r19, Z+7	; 0x07
    58e0:	30 93 17 05 	sts	0x0517, r19	; 0x800517 <cntRcv+0x1>
    58e4:	20 93 16 05 	sts	0x0516, r18	; 0x800516 <cntRcv>
			len = USB_NO_MSG;								// use usbFunctionRead() to obtain the data
    		SREG = sreg;
    58e8:	8f bf       	out	0x3f, r24	; 63

    	} else if (rq->bRequest == USBCUSTOMRQ_RECV) {		// receive data from this USB function
    		uint8_t sreg = SREG;
    		cli();
			cntRcv = rq->wLength.word;
			len = USB_NO_MSG;								// use usbFunctionRead() to obtain the data
    58ea:	8f ef       	ldi	r24, 0xFF	; 255
    58ec:	12 c0       	rjmp	.+36     	; 0x5912 <usbFunctionSetup+0x76>
    		SREG = sreg;

    	} else if (rq->bRequest == USBCUSTOMRQ_SEND) {		// send data from host to this USB function
    58ee:	81 30       	cpi	r24, 0x01	; 1
    58f0:	79 f4       	brne	.+30     	; 0x5910 <usbFunctionSetup+0x74>
    		uint8_t sreg = SREG;
    58f2:	8f b7       	in	r24, 0x3f	; 63
    		cli();
    58f4:	f8 94       	cli
			cntSend = rq->wLength.word;
    58f6:	26 81       	ldd	r18, Z+6	; 0x06
    58f8:	37 81       	ldd	r19, Z+7	; 0x07
    58fa:	30 93 15 05 	sts	0x0515, r19	; 0x800515 <cntSend+0x1>
    58fe:	20 93 14 05 	sts	0x0514, r18	; 0x800514 <cntSend>
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    		SREG = sreg;
    5902:	8f bf       	out	0x3f, r24	; 63

    	} else if (rq->bRequest == USBCUSTOMRQ_SEND) {		// send data from host to this USB function
    		uint8_t sreg = SREG;
    		cli();
			cntSend = rq->wLength.word;
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    5904:	8f ef       	ldi	r24, 0xFF	; 255
    5906:	05 c0       	rjmp	.+10     	; 0x5912 <usbFunctionSetup+0x76>
 * information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;
    5908:	80 e0       	ldi	r24, 0x00	; 0
    590a:	03 c0       	rjmp	.+6      	; 0x5912 <usbFunctionSetup+0x76>
    590c:	80 e0       	ldi	r24, 0x00	; 0
    590e:	01 c0       	rjmp	.+2      	; 0x5912 <usbFunctionSetup+0x76>
    5910:	80 e0       	ldi	r24, 0x00	; 0
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    		SREG = sreg;
    	}
    }

	usbMsgPtr = (usbMsgPtr_t) usbCtxtSetupReplyBuffer;
    5912:	21 e4       	ldi	r18, 0x41	; 65
    5914:	31 e0       	ldi	r19, 0x01	; 1
    5916:	30 93 0b 08 	sts	0x080B, r19	; 0x80080b <usbMsgPtr+0x1>
    591a:	20 93 0a 08 	sts	0x080A, r18	; 0x80080a <usbMsgPtr>
    return len;
}
    591e:	08 95       	ret

00005920 <usbFunctionRead>:

/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionRead(uchar *data, uchar len)
{
    5920:	cf 92       	push	r12
    5922:	df 92       	push	r13
    5924:	ef 92       	push	r14
    5926:	ff 92       	push	r15
    5928:	1f 93       	push	r17
    592a:	cf 93       	push	r28
    592c:	df 93       	push	r29
    592e:	fc 01       	movw	r30, r24
    5930:	46 2f       	mov	r20, r22
	uint8_t retLen = 0;

	if (main_bf.mainIsUsbCommTest) {
    5932:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5936:	84 ff       	sbrs	r24, 4
    5938:	a0 c0       	rjmp	.+320    	; 0x5a7a <usbFunctionRead+0x15a>
		/* special communication TEST */
		if (cntRcv) {
    593a:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <cntRcv>
    593e:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <cntRcv+0x1>
    5942:	89 2b       	or	r24, r25
    5944:	09 f4       	brne	.+2      	; 0x5948 <usbFunctionRead+0x28>
    5946:	ce c0       	rjmp	.+412    	; 0x5ae4 <usbFunctionRead+0x1c4>
#if 1
			data[retLen++] = '0' + ((doTestCntr / 1000) % 10);
    5948:	c0 91 d9 05 	lds	r28, 0x05D9	; 0x8005d9 <doTestCntr>
    594c:	d0 91 da 05 	lds	r29, 0x05DA	; 0x8005da <doTestCntr+0x1>
    5950:	9e 01       	movw	r18, r28
    5952:	36 95       	lsr	r19
    5954:	27 95       	ror	r18
    5956:	36 95       	lsr	r19
    5958:	27 95       	ror	r18
    595a:	36 95       	lsr	r19
    595c:	27 95       	ror	r18
    595e:	a5 ec       	ldi	r26, 0xC5	; 197
    5960:	b0 e2       	ldi	r27, 0x20	; 32
    5962:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <__umulhisi3>
    5966:	7c 01       	movw	r14, r24
    5968:	f6 94       	lsr	r15
    596a:	e7 94       	ror	r14
    596c:	f6 94       	lsr	r15
    596e:	e7 94       	ror	r14
    5970:	f6 94       	lsr	r15
    5972:	e7 94       	ror	r14
    5974:	f6 94       	lsr	r15
    5976:	e7 94       	ror	r14
    5978:	97 01       	movw	r18, r14
    597a:	ad ec       	ldi	r26, 0xCD	; 205
    597c:	bc ec       	ldi	r27, 0xCC	; 204
    597e:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <__umulhisi3>
    5982:	96 95       	lsr	r25
    5984:	87 95       	ror	r24
    5986:	96 95       	lsr	r25
    5988:	87 95       	ror	r24
    598a:	96 95       	lsr	r25
    598c:	87 95       	ror	r24
    598e:	9c 01       	movw	r18, r24
    5990:	22 0f       	add	r18, r18
    5992:	33 1f       	adc	r19, r19
    5994:	88 0f       	add	r24, r24
    5996:	99 1f       	adc	r25, r25
    5998:	88 0f       	add	r24, r24
    599a:	99 1f       	adc	r25, r25
    599c:	88 0f       	add	r24, r24
    599e:	99 1f       	adc	r25, r25
    59a0:	82 0f       	add	r24, r18
    59a2:	93 1f       	adc	r25, r19
    59a4:	97 01       	movw	r18, r14
    59a6:	28 1b       	sub	r18, r24
    59a8:	39 0b       	sbc	r19, r25
    59aa:	c9 01       	movw	r24, r18
    59ac:	80 5d       	subi	r24, 0xD0	; 208
    59ae:	80 83       	st	Z, r24
			data[retLen++] = '0' + ((doTestCntr /  100) % 10);
    59b0:	9e 01       	movw	r18, r28
    59b2:	36 95       	lsr	r19
    59b4:	27 95       	ror	r18
    59b6:	36 95       	lsr	r19
    59b8:	27 95       	ror	r18
    59ba:	ab e7       	ldi	r26, 0x7B	; 123
    59bc:	b4 e1       	ldi	r27, 0x14	; 20
    59be:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <__umulhisi3>
    59c2:	7c 01       	movw	r14, r24
    59c4:	f6 94       	lsr	r15
    59c6:	e7 94       	ror	r14
    59c8:	97 01       	movw	r18, r14
    59ca:	ad ec       	ldi	r26, 0xCD	; 205
    59cc:	bc ec       	ldi	r27, 0xCC	; 204
    59ce:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <__umulhisi3>
    59d2:	96 95       	lsr	r25
    59d4:	87 95       	ror	r24
    59d6:	96 95       	lsr	r25
    59d8:	87 95       	ror	r24
    59da:	96 95       	lsr	r25
    59dc:	87 95       	ror	r24
    59de:	9c 01       	movw	r18, r24
    59e0:	22 0f       	add	r18, r18
    59e2:	33 1f       	adc	r19, r19
    59e4:	88 0f       	add	r24, r24
    59e6:	99 1f       	adc	r25, r25
    59e8:	88 0f       	add	r24, r24
    59ea:	99 1f       	adc	r25, r25
    59ec:	88 0f       	add	r24, r24
    59ee:	99 1f       	adc	r25, r25
    59f0:	82 0f       	add	r24, r18
    59f2:	93 1f       	adc	r25, r19
    59f4:	97 01       	movw	r18, r14
    59f6:	28 1b       	sub	r18, r24
    59f8:	39 0b       	sbc	r19, r25
    59fa:	c9 01       	movw	r24, r18
    59fc:	80 5d       	subi	r24, 0xD0	; 208
    59fe:	81 83       	std	Z+1, r24	; 0x01
			data[retLen++] = '0' + ((doTestCntr /   10) % 10);
    5a00:	9e 01       	movw	r18, r28
    5a02:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <__umulhisi3>
    5a06:	7c 01       	movw	r14, r24
    5a08:	f6 94       	lsr	r15
    5a0a:	e7 94       	ror	r14
    5a0c:	f6 94       	lsr	r15
    5a0e:	e7 94       	ror	r14
    5a10:	f6 94       	lsr	r15
    5a12:	e7 94       	ror	r14
    5a14:	97 01       	movw	r18, r14
    5a16:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <__umulhisi3>
    5a1a:	96 95       	lsr	r25
    5a1c:	87 95       	ror	r24
    5a1e:	96 95       	lsr	r25
    5a20:	87 95       	ror	r24
    5a22:	96 95       	lsr	r25
    5a24:	87 95       	ror	r24
    5a26:	9c 01       	movw	r18, r24
    5a28:	22 0f       	add	r18, r18
    5a2a:	33 1f       	adc	r19, r19
    5a2c:	88 0f       	add	r24, r24
    5a2e:	99 1f       	adc	r25, r25
    5a30:	88 0f       	add	r24, r24
    5a32:	99 1f       	adc	r25, r25
    5a34:	88 0f       	add	r24, r24
    5a36:	99 1f       	adc	r25, r25
    5a38:	82 0f       	add	r24, r18
    5a3a:	93 1f       	adc	r25, r19
    5a3c:	97 01       	movw	r18, r14
    5a3e:	28 1b       	sub	r18, r24
    5a40:	39 0b       	sbc	r19, r25
    5a42:	c9 01       	movw	r24, r18
    5a44:	80 5d       	subi	r24, 0xD0	; 208
    5a46:	82 83       	std	Z+2, r24	; 0x02
			data[retLen++] = '0' + ( doTestCntr++       % 10);
    5a48:	ce 01       	movw	r24, r28
    5a4a:	01 96       	adiw	r24, 0x01	; 1
    5a4c:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <doTestCntr+0x1>
    5a50:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <doTestCntr>
    5a54:	c7 01       	movw	r24, r14
    5a56:	88 0f       	add	r24, r24
    5a58:	99 1f       	adc	r25, r25
    5a5a:	ee 0c       	add	r14, r14
    5a5c:	ff 1c       	adc	r15, r15
    5a5e:	ee 0c       	add	r14, r14
    5a60:	ff 1c       	adc	r15, r15
    5a62:	ee 0c       	add	r14, r14
    5a64:	ff 1c       	adc	r15, r15
    5a66:	e8 0e       	add	r14, r24
    5a68:	f9 1e       	adc	r15, r25
    5a6a:	ce 19       	sub	r28, r14
    5a6c:	df 09       	sbc	r29, r15
    5a6e:	c0 5d       	subi	r28, 0xD0	; 208
    5a70:	c3 83       	std	Z+3, r28	; 0x03
#else
			data[retLen++] = '0' +  (    cntRcv /  100)      ;
			data[retLen++] = '0' + ((    cntRcv /   10) % 10);
			data[retLen++] = '0' + (     cntRcv         % 10);
#endif
			data[retLen++] = ':';
    5a72:	8a e3       	ldi	r24, 0x3A	; 58
    5a74:	84 83       	std	Z+4, r24	; 0x04
    5a76:	15 e0       	ldi	r17, 0x05	; 5
    5a78:	01 c0       	rjmp	.+2      	; 0x5a7c <usbFunctionRead+0x15c>
/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionRead(uchar *data, uchar len)
{
	uint8_t retLen = 0;
    5a7a:	10 e0       	ldi	r17, 0x00	; 0
#endif
			data[retLen++] = ':';
		}
	}

	signed int readCnt = min(cntRcv, len) - retLen;			// number of characters to be sent - no trailing \0 character counted
    5a7c:	e1 2e       	mov	r14, r17
    5a7e:	f1 2c       	mov	r15, r1
    5a80:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <cntRcv>
    5a84:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <cntRcv+0x1>
    5a88:	50 e0       	ldi	r21, 0x00	; 0
    5a8a:	84 17       	cp	r24, r20
    5a8c:	95 07       	cpc	r25, r21
    5a8e:	08 f4       	brcc	.+2      	; 0x5a92 <usbFunctionRead+0x172>
    5a90:	ac 01       	movw	r20, r24
    5a92:	6f 01       	movw	r12, r30
    5a94:	ea 01       	movw	r28, r20
    5a96:	ce 19       	sub	r28, r14
    5a98:	df 09       	sbc	r29, r15
	if (readCnt > 0) {
    5a9a:	1c 16       	cp	r1, r28
    5a9c:	1d 06       	cpc	r1, r29
    5a9e:	24 f5       	brge	.+72     	; 0x5ae8 <usbFunctionRead+0x1c8>
		uint8_t hasSemaphore;
		do {
			hasSemaphore = ringbuffer_fw_getSemaphore(false);
    5aa0:	80 e0       	ldi	r24, 0x00	; 0
    5aa2:	0e 94 ae 23 	call	0x475c	; 0x475c <ringbuffer_fw_getSemaphore>
			if (!hasSemaphore) {
			    wdt_reset();
			    usbPoll();
			}
#endif
		} while(!hasSemaphore);
    5aa6:	88 23       	and	r24, r24
    5aa8:	d9 f3       	breq	.-10     	; 0x5aa0 <usbFunctionRead+0x180>

		/* pull next part of the message from the ring buffer and send it to the host IN */
		uint8_t pullLen = ringbuffer_fw_ringBufferPull(false, data + retLen, readCnt + 1);
    5aaa:	4c 2f       	mov	r20, r28
    5aac:	4f 5f       	subi	r20, 0xFF	; 255
    5aae:	b6 01       	movw	r22, r12
    5ab0:	6e 0d       	add	r22, r14
    5ab2:	7f 1d       	adc	r23, r15
    5ab4:	80 e0       	ldi	r24, 0x00	; 0
    5ab6:	0e 94 77 24 	call	0x48ee	; 0x48ee <ringbuffer_fw_ringBufferPull>
    5aba:	c8 2f       	mov	r28, r24
		ringbuffer_fw_freeSemaphore(false);
    5abc:	80 e0       	ldi	r24, 0x00	; 0
    5abe:	0e 94 bf 23 	call	0x477e	; 0x477e <ringbuffer_fw_freeSemaphore>
		cntRcv -= retLen + pullLen;
    5ac2:	4c 2f       	mov	r20, r28
    5ac4:	50 e0       	ldi	r21, 0x00	; 0
    5ac6:	41 0f       	add	r20, r17
    5ac8:	51 1d       	adc	r21, r1
    5aca:	20 91 16 05 	lds	r18, 0x0516	; 0x800516 <cntRcv>
    5ace:	30 91 17 05 	lds	r19, 0x0517	; 0x800517 <cntRcv+0x1>
    5ad2:	24 1b       	sub	r18, r20
    5ad4:	35 0b       	sbc	r19, r21
    5ad6:	30 93 17 05 	sts	0x0517, r19	; 0x800517 <cntRcv+0x1>
    5ada:	20 93 16 05 	sts	0x0516, r18	; 0x800516 <cntRcv>
		return retLen + pullLen;
    5ade:	8c 2f       	mov	r24, r28
    5ae0:	81 0f       	add	r24, r17
    5ae2:	03 c0       	rjmp	.+6      	; 0x5aea <usbFunctionRead+0x1ca>
/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionRead(uchar *data, uchar len)
{
	uint8_t retLen = 0;
    5ae4:	80 e0       	ldi	r24, 0x00	; 0
    5ae6:	01 c0       	rjmp	.+2      	; 0x5aea <usbFunctionRead+0x1ca>
    5ae8:	81 2f       	mov	r24, r17
		return retLen + pullLen;

	} else {
		return retLen;
	}
}
    5aea:	df 91       	pop	r29
    5aec:	cf 91       	pop	r28
    5aee:	1f 91       	pop	r17
    5af0:	ff 90       	pop	r15
    5af2:	ef 90       	pop	r14
    5af4:	df 90       	pop	r13
    5af6:	cf 90       	pop	r12
    5af8:	08 95       	ret

00005afa <usbFunctionWrite>:

/* usbFunctionWrite() is called when the host sends a chunk of data to the
 * device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionWrite(uchar *data, uchar len)
{
    5afa:	1f 93       	push	r17
    5afc:	cf 93       	push	r28
    5afe:	df 93       	push	r29
    5b00:	c6 2f       	mov	r28, r22
	if (cntSend > len) {
    5b02:	46 2f       	mov	r20, r22
    5b04:	50 e0       	ldi	r21, 0x00	; 0
    5b06:	20 91 14 05 	lds	r18, 0x0514	; 0x800514 <cntSend>
    5b0a:	30 91 15 05 	lds	r19, 0x0515	; 0x800515 <cntSend+0x1>
    5b0e:	42 17       	cp	r20, r18
    5b10:	53 07       	cpc	r21, r19
    5b12:	c0 f4       	brcc	.+48     	; 0x5b44 <usbFunctionWrite+0x4a>
		/* append first or any substring to the inBuffer */
		cntSend -= len;
    5b14:	24 1b       	sub	r18, r20
    5b16:	35 0b       	sbc	r19, r21
    5b18:	30 93 15 05 	sts	0x0515, r19	; 0x800515 <cntSend+0x1>
    5b1c:	20 93 14 05 	sts	0x0514, r18	; 0x800514 <cntSend>

		uint8_t sreg = SREG;
    5b20:	1f b7       	in	r17, 0x3f	; 63
		cli();
    5b22:	f8 94       	cli
		memcpy(&(usbIsrCtxtBuffer[usbIsrCtxtBufferIdx]), data, len);
    5b24:	d0 91 13 05 	lds	r29, 0x0513	; 0x800513 <usbIsrCtxtBufferIdx>
    5b28:	2d 2f       	mov	r18, r29
    5b2a:	30 e0       	ldi	r19, 0x00	; 0
    5b2c:	bc 01       	movw	r22, r24
    5b2e:	c9 01       	movw	r24, r18
    5b30:	87 5b       	subi	r24, 0xB7	; 183
    5b32:	9e 4f       	sbci	r25, 0xFE	; 254
    5b34:	0e 94 cc 3c 	call	0x7998	; 0x7998 <memcpy>
		usbIsrCtxtBufferIdx += len;
    5b38:	cd 0f       	add	r28, r29
    5b3a:	c0 93 13 05 	sts	0x0513, r28	; 0x800513 <usbIsrCtxtBufferIdx>
		SREG = sreg;
    5b3e:	1f bf       	out	0x3f, r17	; 63
		return 0;											// go ahead with more transfer requests
    5b40:	80 e0       	ldi	r24, 0x00	; 0
    5b42:	29 c0       	rjmp	.+82     	; 0x5b96 <usbFunctionWrite+0x9c>

	} else {
		/* append last substring to the inBuffer and push it to the OUT ring buffer (host --> USB function) */
		if (cntSend > 0) {
    5b44:	23 2b       	or	r18, r19
    5b46:	a9 f0       	breq	.+42     	; 0x5b72 <usbFunctionWrite+0x78>
			uint8_t sreg = SREG;
    5b48:	1f b7       	in	r17, 0x3f	; 63
			cli();
    5b4a:	f8 94       	cli
			memcpy(&(usbIsrCtxtBuffer[usbIsrCtxtBufferIdx]), data, cntSend);
    5b4c:	c0 91 14 05 	lds	r28, 0x0514	; 0x800514 <cntSend>
    5b50:	50 91 15 05 	lds	r21, 0x0515	; 0x800515 <cntSend+0x1>
    5b54:	d0 91 13 05 	lds	r29, 0x0513	; 0x800513 <usbIsrCtxtBufferIdx>
    5b58:	2d 2f       	mov	r18, r29
    5b5a:	30 e0       	ldi	r19, 0x00	; 0
    5b5c:	4c 2f       	mov	r20, r28
    5b5e:	bc 01       	movw	r22, r24
    5b60:	c9 01       	movw	r24, r18
    5b62:	87 5b       	subi	r24, 0xB7	; 183
    5b64:	9e 4f       	sbci	r25, 0xFE	; 254
    5b66:	0e 94 cc 3c 	call	0x7998	; 0x7998 <memcpy>
			usbIsrCtxtBufferIdx += cntSend;
    5b6a:	cd 0f       	add	r28, r29
    5b6c:	c0 93 13 05 	sts	0x0513, r28	; 0x800513 <usbIsrCtxtBufferIdx>
			SREG = sreg;
    5b70:	1f bf       	out	0x3f, r17	; 63
		}

		/* push OUT string (send) from host to the USB function's ring buffer */
		ringbuffer_fw_ringBufferWaitAppend(true, false, usbIsrCtxtBuffer, usbIsrCtxtBufferIdx);
    5b72:	20 91 13 05 	lds	r18, 0x0513	; 0x800513 <usbIsrCtxtBufferIdx>
    5b76:	49 e4       	ldi	r20, 0x49	; 73
    5b78:	51 e0       	ldi	r21, 0x01	; 1
    5b7a:	60 e0       	ldi	r22, 0x00	; 0
    5b7c:	81 e0       	ldi	r24, 0x01	; 1
    5b7e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <ringbuffer_fw_ringBufferWaitAppend>

		uint8_t sreg = SREG;
    5b82:	8f b7       	in	r24, 0x3f	; 63
		cli();
    5b84:	f8 94       	cli
		usbIsrCtxtBufferIdx = cntSend = 0;
    5b86:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <cntSend+0x1>
    5b8a:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <cntSend>
    5b8e:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <usbIsrCtxtBufferIdx>
		SREG = sreg;
    5b92:	8f bf       	out	0x3f, r24	; 63
		return 1;											// no more data transfers accepted
    5b94:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    5b96:	df 91       	pop	r29
    5b98:	cf 91       	pop	r28
    5b9a:	1f 91       	pop	r17
    5b9c:	08 95       	ret

00005b9e <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    5b9e:	cf 93       	push	r28
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
    5ba0:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <usbTxStatus1>
    5ba4:	2e 31       	cpi	r18, 0x1E	; 30
    5ba6:	01 f1       	breq	.+64     	; 0x5be8 <usbSetInterrupt+0x4a>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    5ba8:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <usbTxStatus1>
    5bac:	24 ff       	sbrs	r18, 4
    5bae:	07 c0       	rjmp	.+14     	; 0x5bbe <usbSetInterrupt+0x20>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    5bb0:	ef e8       	ldi	r30, 0x8F	; 143
    5bb2:	f5 e0       	ldi	r31, 0x05	; 5
    5bb4:	31 81       	ldd	r19, Z+1	; 0x01
    5bb6:	28 e8       	ldi	r18, 0x88	; 136
    5bb8:	23 27       	eor	r18, r19
    5bba:	21 83       	std	Z+1, r18	; 0x01
    5bbc:	03 c0       	rjmp	.+6      	; 0x5bc4 <usbSetInterrupt+0x26>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    5bbe:	2a e5       	ldi	r18, 0x5A	; 90
    5bc0:	20 93 8f 05 	sts	0x058F, r18	; 0x80058f <usbTxStatus1>
    5bc4:	e8 2f       	mov	r30, r24
    5bc6:	f9 2f       	mov	r31, r25
    5bc8:	a1 e9       	ldi	r26, 0x91	; 145
    5bca:	b5 e0       	ldi	r27, 0x05	; 5
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    5bcc:	86 2f       	mov	r24, r22
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    5bce:	91 91       	ld	r25, Z+
    5bd0:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    5bd2:	81 50       	subi	r24, 0x01	; 1
    5bd4:	e1 f7       	brne	.-8      	; 0x5bce <usbSetInterrupt+0x30>
    5bd6:	c6 2f       	mov	r28, r22
    usbCrc16Append(&txStatus->buffer[1], len);
    5bd8:	81 e9       	ldi	r24, 0x91	; 145
    5bda:	95 e0       	ldi	r25, 0x05	; 5
    5bdc:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    5be0:	64 e0       	ldi	r22, 0x04	; 4
    5be2:	6c 0f       	add	r22, r28
    5be4:	60 93 8f 05 	sts	0x058F, r22	; 0x80058f <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
    5be8:	cf 91       	pop	r28
    5bea:	08 95       	ret

00005bec <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
    5bec:	cf 93       	push	r28
    5bee:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
    5bf0:	60 91 0c 08 	lds	r22, 0x080C	; 0x80080c <usbRxLen>
    5bf4:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
    5bf6:	0a f4       	brpl	.+2      	; 0x5bfa <usbPoll+0xe>
    5bf8:	fb c0       	rjmp	.+502    	; 0x5df0 <usbPoll+0x204>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    5bfa:	20 91 09 08 	lds	r18, 0x0809	; 0x800809 <usbInputBufOffset>
    5bfe:	8c e0       	ldi	r24, 0x0C	; 12
    5c00:	90 e0       	ldi	r25, 0x00	; 0
    5c02:	82 1b       	sub	r24, r18
    5c04:	91 09       	sbc	r25, r1
    5c06:	ec 01       	movw	r28, r24
    5c08:	c0 5f       	subi	r28, 0xF0	; 240
    5c0a:	d7 4f       	sbci	r29, 0xF7	; 247
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
    5c0c:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <usbRxToken>
    5c10:	8d 32       	cpi	r24, 0x2D	; 45
    5c12:	09 f0       	breq	.+2      	; 0x5c16 <usbPoll+0x2a>
    5c14:	db c0       	rjmp	.+438    	; 0x5dcc <usbPoll+0x1e0>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
    5c16:	68 30       	cpi	r22, 0x08	; 8
    5c18:	09 f0       	breq	.+2      	; 0x5c1c <usbPoll+0x30>
    5c1a:	e8 c0       	rjmp	.+464    	; 0x5dec <usbPoll+0x200>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    5c1c:	83 ec       	ldi	r24, 0xC3	; 195
    5c1e:	80 93 fc 07 	sts	0x07FC, r24	; 0x8007fc <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    5c22:	8a e5       	ldi	r24, 0x5A	; 90
    5c24:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <usbTxLen>
        usbMsgFlags = 0;
    5c28:	10 92 db 05 	sts	0x05DB, r1	; 0x8005db <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
    5c2c:	88 81       	ld	r24, Y
    5c2e:	98 2f       	mov	r25, r24
    5c30:	90 76       	andi	r25, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    5c32:	21 f0       	breq	.+8      	; 0x5c3c <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
    5c34:	ce 01       	movw	r24, r28
    5c36:	0e 94 4e 2c 	call	0x589c	; 0x589c <usbFunctionSetup>
    5c3a:	b4 c0       	rjmp	.+360    	; 0x5da4 <usbPoll+0x1b8>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    5c3c:	2a 81       	ldd	r18, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
    5c3e:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    5c40:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
    5c44:	99 81       	ldd	r25, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    5c46:	91 11       	cpse	r25, r1
    5c48:	13 c0       	rjmp	.+38     	; 0x5c70 <usbPoll+0x84>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
    5c4a:	8f 71       	andi	r24, 0x1F	; 31
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
    5c4c:	82 30       	cpi	r24, 0x02	; 2
    5c4e:	51 f4       	brne	.+20     	; 0x5c64 <usbPoll+0x78>
    5c50:	31 38       	cpi	r19, 0x81	; 129
    5c52:	41 f4       	brne	.+16     	; 0x5c64 <usbPoll+0x78>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
    5c54:	90 91 8f 05 	lds	r25, 0x058F	; 0x80058f <usbTxStatus1>
    5c58:	81 e0       	ldi	r24, 0x01	; 1
    5c5a:	9e 31       	cpi	r25, 0x1E	; 30
    5c5c:	09 f0       	breq	.+2      	; 0x5c60 <usbPoll+0x74>
    5c5e:	80 e0       	ldi	r24, 0x00	; 0
    5c60:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <usbTxBuf+0x9>
#endif
        dataPtr[1] = 0;
    5c64:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5c68:	25 e0       	ldi	r18, 0x05	; 5
    5c6a:	38 e0       	ldi	r19, 0x08	; 8
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
    5c6c:	82 e0       	ldi	r24, 0x02	; 2
    5c6e:	96 c0       	rjmp	.+300    	; 0x5d9c <usbPoll+0x1b0>
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
    5c70:	89 2f       	mov	r24, r25
    5c72:	8d 7f       	andi	r24, 0xFD	; 253
    5c74:	81 30       	cpi	r24, 0x01	; 1
    5c76:	99 f4       	brne	.+38     	; 0x5c9e <usbPoll+0xb2>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
    5c78:	21 11       	cpse	r18, r1
    5c7a:	7d c0       	rjmp	.+250    	; 0x5d76 <usbPoll+0x18a>
    5c7c:	31 38       	cpi	r19, 0x81	; 129
    5c7e:	09 f0       	breq	.+2      	; 0x5c82 <usbPoll+0x96>
    5c80:	7e c0       	rjmp	.+252    	; 0x5d7e <usbPoll+0x192>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
    5c82:	91 30       	cpi	r25, 0x01	; 1
    5c84:	11 f0       	breq	.+4      	; 0x5c8a <usbPoll+0x9e>
    5c86:	8e e1       	ldi	r24, 0x1E	; 30
    5c88:	01 c0       	rjmp	.+2      	; 0x5c8c <usbPoll+0xa0>
    5c8a:	8a e5       	ldi	r24, 0x5A	; 90
    5c8c:	ef e8       	ldi	r30, 0x8F	; 143
    5c8e:	f5 e0       	ldi	r31, 0x05	; 5
    5c90:	80 83       	st	Z, r24
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    5c92:	8b e4       	ldi	r24, 0x4B	; 75
    5c94:	81 83       	std	Z+1, r24	; 0x01
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5c96:	25 e0       	ldi	r18, 0x05	; 5
    5c98:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5c9a:	80 e0       	ldi	r24, 0x00	; 0
    5c9c:	7f c0       	rjmp	.+254    	; 0x5d9c <usbPoll+0x1b0>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    5c9e:	95 30       	cpi	r25, 0x05	; 5
    5ca0:	31 f4       	brne	.+12     	; 0x5cae <usbPoll+0xc2>
        usbNewDeviceAddr = value;
    5ca2:	20 93 0d 08 	sts	0x080D, r18	; 0x80080d <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5ca6:	25 e0       	ldi	r18, 0x05	; 5
    5ca8:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5caa:	80 e0       	ldi	r24, 0x00	; 0
    5cac:	77 c0       	rjmp	.+238    	; 0x5d9c <usbPoll+0x1b0>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    5cae:	96 30       	cpi	r25, 0x06	; 6
    5cb0:	09 f0       	breq	.+2      	; 0x5cb4 <usbPoll+0xc8>
    5cb2:	46 c0       	rjmp	.+140    	; 0x5d40 <usbPoll+0x154>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    5cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    5cb6:	81 30       	cpi	r24, 0x01	; 1
    5cb8:	41 f4       	brne	.+16     	; 0x5cca <usbPoll+0xde>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    5cba:	8f e6       	ldi	r24, 0x6F	; 111
    5cbc:	9e e0       	ldi	r25, 0x0E	; 14
    5cbe:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5cc2:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5cc6:	82 e1       	ldi	r24, 0x12	; 18
    5cc8:	37 c0       	rjmp	.+110    	; 0x5d38 <usbPoll+0x14c>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    5cca:	82 30       	cpi	r24, 0x02	; 2
    5ccc:	41 f4       	brne	.+16     	; 0x5cde <usbPoll+0xf2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    5cce:	86 e5       	ldi	r24, 0x56	; 86
    5cd0:	9e e0       	ldi	r25, 0x0E	; 14
    5cd2:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5cd6:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5cda:	89 e1       	ldi	r24, 0x19	; 25
    5cdc:	2d c0       	rjmp	.+90     	; 0x5d38 <usbPoll+0x14c>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    5cde:	83 30       	cpi	r24, 0x03	; 3
    5ce0:	41 f5       	brne	.+80     	; 0x5d32 <usbPoll+0x146>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
    5ce2:	21 11       	cpse	r18, r1
    5ce4:	08 c0       	rjmp	.+16     	; 0x5cf6 <usbPoll+0x10a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    5ce6:	89 ec       	ldi	r24, 0xC9	; 201
    5ce8:	9e e0       	ldi	r25, 0x0E	; 14
    5cea:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5cee:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5cf2:	84 e0       	ldi	r24, 0x04	; 4
    5cf4:	21 c0       	rjmp	.+66     	; 0x5d38 <usbPoll+0x14c>
        SWITCH_CASE(1)
    5cf6:	21 30       	cpi	r18, 0x01	; 1
    5cf8:	41 f4       	brne	.+16     	; 0x5d0a <usbPoll+0x11e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    5cfa:	8b eb       	ldi	r24, 0xBB	; 187
    5cfc:	9e e0       	ldi	r25, 0x0E	; 14
    5cfe:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5d02:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5d06:	8e e0       	ldi	r24, 0x0E	; 14
    5d08:	17 c0       	rjmp	.+46     	; 0x5d38 <usbPoll+0x14c>
        SWITCH_CASE(2)
    5d0a:	22 30       	cpi	r18, 0x02	; 2
    5d0c:	41 f4       	brne	.+16     	; 0x5d1e <usbPoll+0x132>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    5d0e:	81 e9       	ldi	r24, 0x91	; 145
    5d10:	9e e0       	ldi	r25, 0x0E	; 14
    5d12:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5d16:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5d1a:	8a e2       	ldi	r24, 0x2A	; 42
    5d1c:	0d c0       	rjmp	.+26     	; 0x5d38 <usbPoll+0x14c>
        SWITCH_CASE(3)
    5d1e:	23 30       	cpi	r18, 0x03	; 3
    5d20:	51 f4       	brne	.+20     	; 0x5d36 <usbPoll+0x14a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
    5d22:	81 e8       	ldi	r24, 0x81	; 129
    5d24:	9e e0       	ldi	r25, 0x0E	; 14
    5d26:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbMsgPtr+0x1>
    5d2a:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <usbMsgPtr>
    5d2e:	80 e1       	ldi	r24, 0x10	; 16
    5d30:	03 c0       	rjmp	.+6      	; 0x5d38 <usbPoll+0x14c>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5d32:	80 e0       	ldi	r24, 0x00	; 0
    5d34:	01 c0       	rjmp	.+2      	; 0x5d38 <usbPoll+0x14c>
    5d36:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    5d38:	90 e4       	ldi	r25, 0x40	; 64
    5d3a:	90 93 db 05 	sts	0x05DB, r25	; 0x8005db <usbMsgFlags>
    5d3e:	32 c0       	rjmp	.+100    	; 0x5da4 <usbPoll+0x1b8>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    5d40:	98 30       	cpi	r25, 0x08	; 8
    5d42:	09 f1       	breq	.+66     	; 0x5d86 <usbPoll+0x19a>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    5d44:	99 30       	cpi	r25, 0x09	; 9
    5d46:	49 f4       	brne	.+18     	; 0x5d5a <usbPoll+0x16e>
        usbConfiguration = value;
    5d48:	20 93 0f 08 	sts	0x080F, r18	; 0x80080f <usbConfiguration>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    5d4c:	8a e5       	ldi	r24, 0x5A	; 90
    5d4e:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <usbTxStatus1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5d52:	25 e0       	ldi	r18, 0x05	; 5
    5d54:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5d56:	80 e0       	ldi	r24, 0x00	; 0
    5d58:	21 c0       	rjmp	.+66     	; 0x5d9c <usbPoll+0x1b0>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    5d5a:	9a 30       	cpi	r25, 0x0A	; 10
    5d5c:	c1 f0       	breq	.+48     	; 0x5d8e <usbPoll+0x1a2>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    5d5e:	9b 30       	cpi	r25, 0x0B	; 11
    5d60:	d1 f4       	brne	.+52     	; 0x5d96 <usbPoll+0x1aa>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    5d62:	ef e8       	ldi	r30, 0x8F	; 143
    5d64:	f5 e0       	ldi	r31, 0x05	; 5
    5d66:	8b e4       	ldi	r24, 0x4B	; 75
    5d68:	81 83       	std	Z+1, r24	; 0x01
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    5d6a:	8a e5       	ldi	r24, 0x5A	; 90
    5d6c:	80 83       	st	Z, r24
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5d6e:	25 e0       	ldi	r18, 0x05	; 5
    5d70:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5d72:	80 e0       	ldi	r24, 0x00	; 0
    5d74:	13 c0       	rjmp	.+38     	; 0x5d9c <usbPoll+0x1b0>
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5d76:	25 e0       	ldi	r18, 0x05	; 5
    5d78:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5d7a:	80 e0       	ldi	r24, 0x00	; 0
    5d7c:	0f c0       	rjmp	.+30     	; 0x5d9c <usbPoll+0x1b0>
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5d7e:	25 e0       	ldi	r18, 0x05	; 5
    5d80:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5d82:	80 e0       	ldi	r24, 0x00	; 0
    5d84:	0b c0       	rjmp	.+22     	; 0x5d9c <usbPoll+0x1b0>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
    5d86:	2f e0       	ldi	r18, 0x0F	; 15
    5d88:	38 e0       	ldi	r19, 0x08	; 8
        len = 1;
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	07 c0       	rjmp	.+14     	; 0x5d9c <usbPoll+0x1b0>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5d8e:	25 e0       	ldi	r18, 0x05	; 5
    5d90:	38 e0       	ldi	r19, 0x08	; 8
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
    5d92:	81 e0       	ldi	r24, 0x01	; 1
    5d94:	03 c0       	rjmp	.+6      	; 0x5d9c <usbPoll+0x1b0>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    5d96:	25 e0       	ldi	r18, 0x05	; 5
    5d98:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5d9a:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
    5d9c:	30 93 0b 08 	sts	0x080B, r19	; 0x80080b <usbMsgPtr+0x1>
    5da0:	20 93 0a 08 	sts	0x080A, r18	; 0x80080a <usbMsgPtr>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
    5da4:	8f 3f       	cpi	r24, 0xFF	; 255
    5da6:	41 f4       	brne	.+16     	; 0x5db8 <usbPoll+0x1cc>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
    5da8:	98 81       	ld	r25, Y
    5daa:	99 23       	and	r25, r25
    5dac:	0c f4       	brge	.+2      	; 0x5db0 <usbPoll+0x1c4>
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
    5dae:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
    5db0:	90 e8       	ldi	r25, 0x80	; 128
    5db2:	90 93 db 05 	sts	0x05DB, r25	; 0x8005db <usbMsgFlags>
    5db6:	07 c0       	rjmp	.+14     	; 0x5dc6 <usbPoll+0x1da>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    5db8:	9f 81       	ldd	r25, Y+7	; 0x07
    5dba:	91 11       	cpse	r25, r1
    5dbc:	04 c0       	rjmp	.+8      	; 0x5dc6 <usbPoll+0x1da>
    5dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    5dc0:	98 17       	cp	r25, r24
    5dc2:	08 f4       	brcc	.+2      	; 0x5dc6 <usbPoll+0x1da>
    5dc4:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    5dc6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <usbMsgLen>
    5dca:	10 c0       	rjmp	.+32     	; 0x5dec <usbPoll+0x200>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    5dcc:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <usbMsgFlags>
    5dd0:	88 23       	and	r24, r24
    5dd2:	64 f4       	brge	.+24     	; 0x5dec <usbPoll+0x200>
            uchar rval = usbFunctionWrite(data, len);
    5dd4:	ce 01       	movw	r24, r28
    5dd6:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
    5dda:	8f 3f       	cpi	r24, 0xFF	; 255
    5ddc:	21 f4       	brne	.+8      	; 0x5de6 <usbPoll+0x1fa>
                usbTxLen = USBPID_STALL;
    5dde:	8e e1       	ldi	r24, 0x1E	; 30
    5de0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <usbTxLen>
    5de4:	03 c0       	rjmp	.+6      	; 0x5dec <usbPoll+0x200>
            }else if(rval != 0){    /* This was the final package */
    5de6:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
    5de8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    5dec:	10 92 0c 08 	sts	0x080C, r1	; 0x80080c <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    5df0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <usbTxLen>
    5df4:	84 ff       	sbrs	r24, 4
    5df6:	5c c0       	rjmp	.+184    	; 0x5eb0 <usbPoll+0x2c4>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    5df8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <usbMsgLen>
    5dfc:	9f 3f       	cpi	r25, 0xFF	; 255
    5dfe:	09 f4       	brne	.+2      	; 0x5e02 <usbPoll+0x216>
    5e00:	57 c0       	rjmp	.+174    	; 0x5eb0 <usbPoll+0x2c4>
    5e02:	c9 2f       	mov	r28, r25
    5e04:	99 30       	cpi	r25, 0x09	; 9
    5e06:	08 f0       	brcs	.+2      	; 0x5e0a <usbPoll+0x21e>
    5e08:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    5e0a:	9c 1b       	sub	r25, r28
    5e0c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    5e10:	ec ef       	ldi	r30, 0xFC	; 252
    5e12:	f7 e0       	ldi	r31, 0x07	; 7
    5e14:	90 81       	ld	r25, Z
    5e16:	88 e8       	ldi	r24, 0x88	; 136
    5e18:	89 27       	eor	r24, r25
    5e1a:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    5e1c:	cc 23       	and	r28, r28
    5e1e:	09 f4       	brne	.+2      	; 0x5e22 <usbPoll+0x236>
    5e20:	58 c0       	rjmp	.+176    	; 0x5ed2 <usbPoll+0x2e6>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    5e22:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <usbMsgFlags>
    5e26:	88 23       	and	r24, r24
    5e28:	3c f4       	brge	.+14     	; 0x5e38 <usbPoll+0x24c>
            len = usbFunctionRead(data, len);
    5e2a:	6c 2f       	mov	r22, r28
    5e2c:	8d ef       	ldi	r24, 0xFD	; 253
    5e2e:	97 e0       	ldi	r25, 0x07	; 7
    5e30:	0e 94 90 2c 	call	0x5920	; 0x5920 <usbFunctionRead>
    5e34:	c8 2f       	mov	r28, r24
    5e36:	28 c0       	rjmp	.+80     	; 0x5e88 <usbPoll+0x29c>
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
    5e38:	20 91 0a 08 	lds	r18, 0x080A	; 0x80080a <usbMsgPtr>
    5e3c:	30 91 0b 08 	lds	r19, 0x080B	; 0x80080b <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    5e40:	86 ff       	sbrs	r24, 6
    5e42:	10 c0       	rjmp	.+32     	; 0x5e64 <usbPoll+0x278>
    5e44:	ad ef       	ldi	r26, 0xFD	; 253
    5e46:	b7 e0       	ldi	r27, 0x07	; 7
    5e48:	f9 01       	movw	r30, r18
    5e4a:	9c 2f       	mov	r25, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    5e4c:	84 91       	lpm	r24, Z
                    *data++ = c;
    5e4e:	8d 93       	st	X+, r24
                    r++;
    5e50:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
    5e52:	91 50       	subi	r25, 0x01	; 1
    5e54:	d9 f7       	brne	.-10     	; 0x5e4c <usbPoll+0x260>
    5e56:	2f 5f       	subi	r18, 0xFF	; 255
    5e58:	3f 4f       	sbci	r19, 0xFF	; 255
    5e5a:	8f ef       	ldi	r24, 0xFF	; 255
    5e5c:	8c 0f       	add	r24, r28
    5e5e:	28 0f       	add	r18, r24
    5e60:	31 1d       	adc	r19, r1
    5e62:	0e c0       	rjmp	.+28     	; 0x5e80 <usbPoll+0x294>
    5e64:	ad ef       	ldi	r26, 0xFD	; 253
    5e66:	b7 e0       	ldi	r27, 0x07	; 7
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    5e68:	f9 01       	movw	r30, r18
    5e6a:	9c 2f       	mov	r25, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
    5e6c:	81 91       	ld	r24, Z+
    5e6e:	8d 93       	st	X+, r24
                    r++;
                }while(--i);
    5e70:	91 50       	subi	r25, 0x01	; 1
    5e72:	e1 f7       	brne	.-8      	; 0x5e6c <usbPoll+0x280>
    5e74:	2f 5f       	subi	r18, 0xFF	; 255
    5e76:	3f 4f       	sbci	r19, 0xFF	; 255
    5e78:	8f ef       	ldi	r24, 0xFF	; 255
    5e7a:	8c 0f       	add	r24, r28
    5e7c:	28 0f       	add	r18, r24
    5e7e:	31 1d       	adc	r19, r1
            }
            usbMsgPtr = r;
    5e80:	30 93 0b 08 	sts	0x080B, r19	; 0x80080b <usbMsgPtr+0x1>
    5e84:	20 93 0a 08 	sts	0x080A, r18	; 0x80080a <usbMsgPtr>
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
    5e88:	c9 30       	cpi	r28, 0x09	; 9
    5e8a:	60 f4       	brcc	.+24     	; 0x5ea4 <usbPoll+0x2b8>
        usbCrc16Append(&usbTxBuf[1], len);
    5e8c:	6c 2f       	mov	r22, r28
    5e8e:	8d ef       	ldi	r24, 0xFD	; 253
    5e90:	97 e0       	ldi	r25, 0x07	; 7
    5e92:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    5e96:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    5e98:	cc 30       	cpi	r28, 0x0C	; 12
    5e9a:	40 f4       	brcc	.+16     	; 0x5eac <usbPoll+0x2c0>
            usbMsgLen = USB_NO_MSG;
    5e9c:	8f ef       	ldi	r24, 0xFF	; 255
    5e9e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <usbMsgLen>
    5ea2:	04 c0       	rjmp	.+8      	; 0x5eac <usbPoll+0x2c0>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    5ea4:	8f ef       	ldi	r24, 0xFF	; 255
    5ea6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <usbMsgLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
    5eaa:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    5eac:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    5eb0:	86 b1       	in	r24, 0x06	; 6
    5eb2:	8c 70       	andi	r24, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
    5eb4:	a9 f4       	brne	.+42     	; 0x5ee0 <usbPoll+0x2f4>
    5eb6:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    5eb8:	86 b1       	in	r24, 0x06	; 6
    5eba:	8c 70       	andi	r24, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
    5ebc:	89 f4       	brne	.+34     	; 0x5ee0 <usbPoll+0x2f4>
    5ebe:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    5ec0:	d9 f7       	brne	.-10     	; 0x5eb8 <usbPoll+0x2cc>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    5ec2:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <usbNewDeviceAddr>
    usbDeviceAddr = 0;
    5ec6:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <usbDeviceAddr>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    5eca:	8a e5       	ldi	r24, 0x5A	; 90
    5ecc:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <usbTxStatus1>
    5ed0:	07 c0       	rjmp	.+14     	; 0x5ee0 <usbPoll+0x2f4>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    5ed2:	60 e0       	ldi	r22, 0x00	; 0
    5ed4:	8d ef       	ldi	r24, 0xFD	; 253
    5ed6:	97 e0       	ldi	r25, 0x07	; 7
    5ed8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    5edc:	c4 e0       	ldi	r28, 0x04	; 4
    5ede:	de cf       	rjmp	.-68     	; 0x5e9c <usbPoll+0x2b0>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    5ee0:	df 91       	pop	r29
    5ee2:	cf 91       	pop	r28
    5ee4:	08 95       	ret

00005ee6 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    5ee6:	e9 e6       	ldi	r30, 0x69	; 105
    5ee8:	f0 e0       	ldi	r31, 0x00	; 0
    5eea:	80 81       	ld	r24, Z
    5eec:	83 60       	ori	r24, 0x03	; 3
    5eee:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    5ef0:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    5ef2:	ef e8       	ldi	r30, 0x8F	; 143
    5ef4:	f5 e0       	ldi	r31, 0x05	; 5
    5ef6:	8b e4       	ldi	r24, 0x4B	; 75
    5ef8:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    5efa:	8a e5       	ldi	r24, 0x5A	; 90
    5efc:	80 83       	st	Z, r24
    5efe:	08 95       	ret

00005f00 <__subsf3>:
    5f00:	50 58       	subi	r21, 0x80	; 128

00005f02 <__addsf3>:
    5f02:	bb 27       	eor	r27, r27
    5f04:	aa 27       	eor	r26, r26
    5f06:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <__addsf3x>
    5f0a:	0c 94 52 31 	jmp	0x62a4	; 0x62a4 <__fp_round>
    5f0e:	0e 94 44 31 	call	0x6288	; 0x6288 <__fp_pscA>
    5f12:	38 f0       	brcs	.+14     	; 0x5f22 <__addsf3+0x20>
    5f14:	0e 94 4b 31 	call	0x6296	; 0x6296 <__fp_pscB>
    5f18:	20 f0       	brcs	.+8      	; 0x5f22 <__addsf3+0x20>
    5f1a:	39 f4       	brne	.+14     	; 0x5f2a <__addsf3+0x28>
    5f1c:	9f 3f       	cpi	r25, 0xFF	; 255
    5f1e:	19 f4       	brne	.+6      	; 0x5f26 <__addsf3+0x24>
    5f20:	26 f4       	brtc	.+8      	; 0x5f2a <__addsf3+0x28>
    5f22:	0c 94 41 31 	jmp	0x6282	; 0x6282 <__fp_nan>
    5f26:	0e f4       	brtc	.+2      	; 0x5f2a <__addsf3+0x28>
    5f28:	e0 95       	com	r30
    5f2a:	e7 fb       	bst	r30, 7
    5f2c:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__fp_inf>

00005f30 <__addsf3x>:
    5f30:	e9 2f       	mov	r30, r25
    5f32:	0e 94 63 31 	call	0x62c6	; 0x62c6 <__fp_split3>
    5f36:	58 f3       	brcs	.-42     	; 0x5f0e <__addsf3+0xc>
    5f38:	ba 17       	cp	r27, r26
    5f3a:	62 07       	cpc	r22, r18
    5f3c:	73 07       	cpc	r23, r19
    5f3e:	84 07       	cpc	r24, r20
    5f40:	95 07       	cpc	r25, r21
    5f42:	20 f0       	brcs	.+8      	; 0x5f4c <__addsf3x+0x1c>
    5f44:	79 f4       	brne	.+30     	; 0x5f64 <__addsf3x+0x34>
    5f46:	a6 f5       	brtc	.+104    	; 0x5fb0 <__addsf3x+0x80>
    5f48:	0c 94 9d 31 	jmp	0x633a	; 0x633a <__fp_zero>
    5f4c:	0e f4       	brtc	.+2      	; 0x5f50 <__addsf3x+0x20>
    5f4e:	e0 95       	com	r30
    5f50:	0b 2e       	mov	r0, r27
    5f52:	ba 2f       	mov	r27, r26
    5f54:	a0 2d       	mov	r26, r0
    5f56:	0b 01       	movw	r0, r22
    5f58:	b9 01       	movw	r22, r18
    5f5a:	90 01       	movw	r18, r0
    5f5c:	0c 01       	movw	r0, r24
    5f5e:	ca 01       	movw	r24, r20
    5f60:	a0 01       	movw	r20, r0
    5f62:	11 24       	eor	r1, r1
    5f64:	ff 27       	eor	r31, r31
    5f66:	59 1b       	sub	r21, r25
    5f68:	99 f0       	breq	.+38     	; 0x5f90 <__addsf3x+0x60>
    5f6a:	59 3f       	cpi	r21, 0xF9	; 249
    5f6c:	50 f4       	brcc	.+20     	; 0x5f82 <__addsf3x+0x52>
    5f6e:	50 3e       	cpi	r21, 0xE0	; 224
    5f70:	68 f1       	brcs	.+90     	; 0x5fcc <__addsf3x+0x9c>
    5f72:	1a 16       	cp	r1, r26
    5f74:	f0 40       	sbci	r31, 0x00	; 0
    5f76:	a2 2f       	mov	r26, r18
    5f78:	23 2f       	mov	r18, r19
    5f7a:	34 2f       	mov	r19, r20
    5f7c:	44 27       	eor	r20, r20
    5f7e:	58 5f       	subi	r21, 0xF8	; 248
    5f80:	f3 cf       	rjmp	.-26     	; 0x5f68 <__addsf3x+0x38>
    5f82:	46 95       	lsr	r20
    5f84:	37 95       	ror	r19
    5f86:	27 95       	ror	r18
    5f88:	a7 95       	ror	r26
    5f8a:	f0 40       	sbci	r31, 0x00	; 0
    5f8c:	53 95       	inc	r21
    5f8e:	c9 f7       	brne	.-14     	; 0x5f82 <__addsf3x+0x52>
    5f90:	7e f4       	brtc	.+30     	; 0x5fb0 <__addsf3x+0x80>
    5f92:	1f 16       	cp	r1, r31
    5f94:	ba 0b       	sbc	r27, r26
    5f96:	62 0b       	sbc	r22, r18
    5f98:	73 0b       	sbc	r23, r19
    5f9a:	84 0b       	sbc	r24, r20
    5f9c:	ba f0       	brmi	.+46     	; 0x5fcc <__addsf3x+0x9c>
    5f9e:	91 50       	subi	r25, 0x01	; 1
    5fa0:	a1 f0       	breq	.+40     	; 0x5fca <__addsf3x+0x9a>
    5fa2:	ff 0f       	add	r31, r31
    5fa4:	bb 1f       	adc	r27, r27
    5fa6:	66 1f       	adc	r22, r22
    5fa8:	77 1f       	adc	r23, r23
    5faa:	88 1f       	adc	r24, r24
    5fac:	c2 f7       	brpl	.-16     	; 0x5f9e <__addsf3x+0x6e>
    5fae:	0e c0       	rjmp	.+28     	; 0x5fcc <__addsf3x+0x9c>
    5fb0:	ba 0f       	add	r27, r26
    5fb2:	62 1f       	adc	r22, r18
    5fb4:	73 1f       	adc	r23, r19
    5fb6:	84 1f       	adc	r24, r20
    5fb8:	48 f4       	brcc	.+18     	; 0x5fcc <__addsf3x+0x9c>
    5fba:	87 95       	ror	r24
    5fbc:	77 95       	ror	r23
    5fbe:	67 95       	ror	r22
    5fc0:	b7 95       	ror	r27
    5fc2:	f7 95       	ror	r31
    5fc4:	9e 3f       	cpi	r25, 0xFE	; 254
    5fc6:	08 f0       	brcs	.+2      	; 0x5fca <__addsf3x+0x9a>
    5fc8:	b0 cf       	rjmp	.-160    	; 0x5f2a <__addsf3+0x28>
    5fca:	93 95       	inc	r25
    5fcc:	88 0f       	add	r24, r24
    5fce:	08 f0       	brcs	.+2      	; 0x5fd2 <__addsf3x+0xa2>
    5fd0:	99 27       	eor	r25, r25
    5fd2:	ee 0f       	add	r30, r30
    5fd4:	97 95       	ror	r25
    5fd6:	87 95       	ror	r24
    5fd8:	08 95       	ret

00005fda <__cmpsf2>:
    5fda:	0e 94 ee 30 	call	0x61dc	; 0x61dc <__fp_cmp>
    5fde:	08 f4       	brcc	.+2      	; 0x5fe2 <__cmpsf2+0x8>
    5fe0:	81 e0       	ldi	r24, 0x01	; 1
    5fe2:	08 95       	ret

00005fe4 <__divsf3>:
    5fe4:	0e 94 06 30 	call	0x600c	; 0x600c <__divsf3x>
    5fe8:	0c 94 52 31 	jmp	0x62a4	; 0x62a4 <__fp_round>
    5fec:	0e 94 4b 31 	call	0x6296	; 0x6296 <__fp_pscB>
    5ff0:	58 f0       	brcs	.+22     	; 0x6008 <__divsf3+0x24>
    5ff2:	0e 94 44 31 	call	0x6288	; 0x6288 <__fp_pscA>
    5ff6:	40 f0       	brcs	.+16     	; 0x6008 <__divsf3+0x24>
    5ff8:	29 f4       	brne	.+10     	; 0x6004 <__divsf3+0x20>
    5ffa:	5f 3f       	cpi	r21, 0xFF	; 255
    5ffc:	29 f0       	breq	.+10     	; 0x6008 <__divsf3+0x24>
    5ffe:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__fp_inf>
    6002:	51 11       	cpse	r21, r1
    6004:	0c 94 9e 31 	jmp	0x633c	; 0x633c <__fp_szero>
    6008:	0c 94 41 31 	jmp	0x6282	; 0x6282 <__fp_nan>

0000600c <__divsf3x>:
    600c:	0e 94 63 31 	call	0x62c6	; 0x62c6 <__fp_split3>
    6010:	68 f3       	brcs	.-38     	; 0x5fec <__divsf3+0x8>

00006012 <__divsf3_pse>:
    6012:	99 23       	and	r25, r25
    6014:	b1 f3       	breq	.-20     	; 0x6002 <__divsf3+0x1e>
    6016:	55 23       	and	r21, r21
    6018:	91 f3       	breq	.-28     	; 0x5ffe <__divsf3+0x1a>
    601a:	95 1b       	sub	r25, r21
    601c:	55 0b       	sbc	r21, r21
    601e:	bb 27       	eor	r27, r27
    6020:	aa 27       	eor	r26, r26
    6022:	62 17       	cp	r22, r18
    6024:	73 07       	cpc	r23, r19
    6026:	84 07       	cpc	r24, r20
    6028:	38 f0       	brcs	.+14     	; 0x6038 <__divsf3_pse+0x26>
    602a:	9f 5f       	subi	r25, 0xFF	; 255
    602c:	5f 4f       	sbci	r21, 0xFF	; 255
    602e:	22 0f       	add	r18, r18
    6030:	33 1f       	adc	r19, r19
    6032:	44 1f       	adc	r20, r20
    6034:	aa 1f       	adc	r26, r26
    6036:	a9 f3       	breq	.-22     	; 0x6022 <__divsf3_pse+0x10>
    6038:	35 d0       	rcall	.+106    	; 0x60a4 <__divsf3_pse+0x92>
    603a:	0e 2e       	mov	r0, r30
    603c:	3a f0       	brmi	.+14     	; 0x604c <__divsf3_pse+0x3a>
    603e:	e0 e8       	ldi	r30, 0x80	; 128
    6040:	32 d0       	rcall	.+100    	; 0x60a6 <__divsf3_pse+0x94>
    6042:	91 50       	subi	r25, 0x01	; 1
    6044:	50 40       	sbci	r21, 0x00	; 0
    6046:	e6 95       	lsr	r30
    6048:	00 1c       	adc	r0, r0
    604a:	ca f7       	brpl	.-14     	; 0x603e <__divsf3_pse+0x2c>
    604c:	2b d0       	rcall	.+86     	; 0x60a4 <__divsf3_pse+0x92>
    604e:	fe 2f       	mov	r31, r30
    6050:	29 d0       	rcall	.+82     	; 0x60a4 <__divsf3_pse+0x92>
    6052:	66 0f       	add	r22, r22
    6054:	77 1f       	adc	r23, r23
    6056:	88 1f       	adc	r24, r24
    6058:	bb 1f       	adc	r27, r27
    605a:	26 17       	cp	r18, r22
    605c:	37 07       	cpc	r19, r23
    605e:	48 07       	cpc	r20, r24
    6060:	ab 07       	cpc	r26, r27
    6062:	b0 e8       	ldi	r27, 0x80	; 128
    6064:	09 f0       	breq	.+2      	; 0x6068 <__divsf3_pse+0x56>
    6066:	bb 0b       	sbc	r27, r27
    6068:	80 2d       	mov	r24, r0
    606a:	bf 01       	movw	r22, r30
    606c:	ff 27       	eor	r31, r31
    606e:	93 58       	subi	r25, 0x83	; 131
    6070:	5f 4f       	sbci	r21, 0xFF	; 255
    6072:	3a f0       	brmi	.+14     	; 0x6082 <__divsf3_pse+0x70>
    6074:	9e 3f       	cpi	r25, 0xFE	; 254
    6076:	51 05       	cpc	r21, r1
    6078:	78 f0       	brcs	.+30     	; 0x6098 <__divsf3_pse+0x86>
    607a:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__fp_inf>
    607e:	0c 94 9e 31 	jmp	0x633c	; 0x633c <__fp_szero>
    6082:	5f 3f       	cpi	r21, 0xFF	; 255
    6084:	e4 f3       	brlt	.-8      	; 0x607e <__divsf3_pse+0x6c>
    6086:	98 3e       	cpi	r25, 0xE8	; 232
    6088:	d4 f3       	brlt	.-12     	; 0x607e <__divsf3_pse+0x6c>
    608a:	86 95       	lsr	r24
    608c:	77 95       	ror	r23
    608e:	67 95       	ror	r22
    6090:	b7 95       	ror	r27
    6092:	f7 95       	ror	r31
    6094:	9f 5f       	subi	r25, 0xFF	; 255
    6096:	c9 f7       	brne	.-14     	; 0x608a <__divsf3_pse+0x78>
    6098:	88 0f       	add	r24, r24
    609a:	91 1d       	adc	r25, r1
    609c:	96 95       	lsr	r25
    609e:	87 95       	ror	r24
    60a0:	97 f9       	bld	r25, 7
    60a2:	08 95       	ret
    60a4:	e1 e0       	ldi	r30, 0x01	; 1
    60a6:	66 0f       	add	r22, r22
    60a8:	77 1f       	adc	r23, r23
    60aa:	88 1f       	adc	r24, r24
    60ac:	bb 1f       	adc	r27, r27
    60ae:	62 17       	cp	r22, r18
    60b0:	73 07       	cpc	r23, r19
    60b2:	84 07       	cpc	r24, r20
    60b4:	ba 07       	cpc	r27, r26
    60b6:	20 f0       	brcs	.+8      	; 0x60c0 <__divsf3_pse+0xae>
    60b8:	62 1b       	sub	r22, r18
    60ba:	73 0b       	sbc	r23, r19
    60bc:	84 0b       	sbc	r24, r20
    60be:	ba 0b       	sbc	r27, r26
    60c0:	ee 1f       	adc	r30, r30
    60c2:	88 f7       	brcc	.-30     	; 0x60a6 <__divsf3_pse+0x94>
    60c4:	e0 95       	com	r30
    60c6:	08 95       	ret

000060c8 <__fixsfsi>:
    60c8:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <__fixunssfsi>
    60cc:	68 94       	set
    60ce:	b1 11       	cpse	r27, r1
    60d0:	0c 94 9e 31 	jmp	0x633c	; 0x633c <__fp_szero>
    60d4:	08 95       	ret

000060d6 <__fixunssfsi>:
    60d6:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <__fp_splitA>
    60da:	88 f0       	brcs	.+34     	; 0x60fe <__fixunssfsi+0x28>
    60dc:	9f 57       	subi	r25, 0x7F	; 127
    60de:	98 f0       	brcs	.+38     	; 0x6106 <__fixunssfsi+0x30>
    60e0:	b9 2f       	mov	r27, r25
    60e2:	99 27       	eor	r25, r25
    60e4:	b7 51       	subi	r27, 0x17	; 23
    60e6:	b0 f0       	brcs	.+44     	; 0x6114 <__fixunssfsi+0x3e>
    60e8:	e1 f0       	breq	.+56     	; 0x6122 <__fixunssfsi+0x4c>
    60ea:	66 0f       	add	r22, r22
    60ec:	77 1f       	adc	r23, r23
    60ee:	88 1f       	adc	r24, r24
    60f0:	99 1f       	adc	r25, r25
    60f2:	1a f0       	brmi	.+6      	; 0x60fa <__fixunssfsi+0x24>
    60f4:	ba 95       	dec	r27
    60f6:	c9 f7       	brne	.-14     	; 0x60ea <__fixunssfsi+0x14>
    60f8:	14 c0       	rjmp	.+40     	; 0x6122 <__fixunssfsi+0x4c>
    60fa:	b1 30       	cpi	r27, 0x01	; 1
    60fc:	91 f0       	breq	.+36     	; 0x6122 <__fixunssfsi+0x4c>
    60fe:	0e 94 9d 31 	call	0x633a	; 0x633a <__fp_zero>
    6102:	b1 e0       	ldi	r27, 0x01	; 1
    6104:	08 95       	ret
    6106:	0c 94 9d 31 	jmp	0x633a	; 0x633a <__fp_zero>
    610a:	67 2f       	mov	r22, r23
    610c:	78 2f       	mov	r23, r24
    610e:	88 27       	eor	r24, r24
    6110:	b8 5f       	subi	r27, 0xF8	; 248
    6112:	39 f0       	breq	.+14     	; 0x6122 <__fixunssfsi+0x4c>
    6114:	b9 3f       	cpi	r27, 0xF9	; 249
    6116:	cc f3       	brlt	.-14     	; 0x610a <__fixunssfsi+0x34>
    6118:	86 95       	lsr	r24
    611a:	77 95       	ror	r23
    611c:	67 95       	ror	r22
    611e:	b3 95       	inc	r27
    6120:	d9 f7       	brne	.-10     	; 0x6118 <__fixunssfsi+0x42>
    6122:	3e f4       	brtc	.+14     	; 0x6132 <__fixunssfsi+0x5c>
    6124:	90 95       	com	r25
    6126:	80 95       	com	r24
    6128:	70 95       	com	r23
    612a:	61 95       	neg	r22
    612c:	7f 4f       	sbci	r23, 0xFF	; 255
    612e:	8f 4f       	sbci	r24, 0xFF	; 255
    6130:	9f 4f       	sbci	r25, 0xFF	; 255
    6132:	08 95       	ret

00006134 <__floatunsisf>:
    6134:	e8 94       	clt
    6136:	09 c0       	rjmp	.+18     	; 0x614a <__floatsisf+0x12>

00006138 <__floatsisf>:
    6138:	97 fb       	bst	r25, 7
    613a:	3e f4       	brtc	.+14     	; 0x614a <__floatsisf+0x12>
    613c:	90 95       	com	r25
    613e:	80 95       	com	r24
    6140:	70 95       	com	r23
    6142:	61 95       	neg	r22
    6144:	7f 4f       	sbci	r23, 0xFF	; 255
    6146:	8f 4f       	sbci	r24, 0xFF	; 255
    6148:	9f 4f       	sbci	r25, 0xFF	; 255
    614a:	99 23       	and	r25, r25
    614c:	a9 f0       	breq	.+42     	; 0x6178 <__floatsisf+0x40>
    614e:	f9 2f       	mov	r31, r25
    6150:	96 e9       	ldi	r25, 0x96	; 150
    6152:	bb 27       	eor	r27, r27
    6154:	93 95       	inc	r25
    6156:	f6 95       	lsr	r31
    6158:	87 95       	ror	r24
    615a:	77 95       	ror	r23
    615c:	67 95       	ror	r22
    615e:	b7 95       	ror	r27
    6160:	f1 11       	cpse	r31, r1
    6162:	f8 cf       	rjmp	.-16     	; 0x6154 <__floatsisf+0x1c>
    6164:	fa f4       	brpl	.+62     	; 0x61a4 <__floatsisf+0x6c>
    6166:	bb 0f       	add	r27, r27
    6168:	11 f4       	brne	.+4      	; 0x616e <__floatsisf+0x36>
    616a:	60 ff       	sbrs	r22, 0
    616c:	1b c0       	rjmp	.+54     	; 0x61a4 <__floatsisf+0x6c>
    616e:	6f 5f       	subi	r22, 0xFF	; 255
    6170:	7f 4f       	sbci	r23, 0xFF	; 255
    6172:	8f 4f       	sbci	r24, 0xFF	; 255
    6174:	9f 4f       	sbci	r25, 0xFF	; 255
    6176:	16 c0       	rjmp	.+44     	; 0x61a4 <__floatsisf+0x6c>
    6178:	88 23       	and	r24, r24
    617a:	11 f0       	breq	.+4      	; 0x6180 <__floatsisf+0x48>
    617c:	96 e9       	ldi	r25, 0x96	; 150
    617e:	11 c0       	rjmp	.+34     	; 0x61a2 <__floatsisf+0x6a>
    6180:	77 23       	and	r23, r23
    6182:	21 f0       	breq	.+8      	; 0x618c <__floatsisf+0x54>
    6184:	9e e8       	ldi	r25, 0x8E	; 142
    6186:	87 2f       	mov	r24, r23
    6188:	76 2f       	mov	r23, r22
    618a:	05 c0       	rjmp	.+10     	; 0x6196 <__floatsisf+0x5e>
    618c:	66 23       	and	r22, r22
    618e:	71 f0       	breq	.+28     	; 0x61ac <__floatsisf+0x74>
    6190:	96 e8       	ldi	r25, 0x86	; 134
    6192:	86 2f       	mov	r24, r22
    6194:	70 e0       	ldi	r23, 0x00	; 0
    6196:	60 e0       	ldi	r22, 0x00	; 0
    6198:	2a f0       	brmi	.+10     	; 0x61a4 <__floatsisf+0x6c>
    619a:	9a 95       	dec	r25
    619c:	66 0f       	add	r22, r22
    619e:	77 1f       	adc	r23, r23
    61a0:	88 1f       	adc	r24, r24
    61a2:	da f7       	brpl	.-10     	; 0x619a <__floatsisf+0x62>
    61a4:	88 0f       	add	r24, r24
    61a6:	96 95       	lsr	r25
    61a8:	87 95       	ror	r24
    61aa:	97 f9       	bld	r25, 7
    61ac:	08 95       	ret

000061ae <floor>:
    61ae:	0e 94 85 31 	call	0x630a	; 0x630a <__fp_trunc>
    61b2:	90 f0       	brcs	.+36     	; 0x61d8 <floor+0x2a>
    61b4:	9f 37       	cpi	r25, 0x7F	; 127
    61b6:	48 f4       	brcc	.+18     	; 0x61ca <floor+0x1c>
    61b8:	91 11       	cpse	r25, r1
    61ba:	16 f0       	brts	.+4      	; 0x61c0 <floor+0x12>
    61bc:	0c 94 9e 31 	jmp	0x633c	; 0x633c <__fp_szero>
    61c0:	60 e0       	ldi	r22, 0x00	; 0
    61c2:	70 e0       	ldi	r23, 0x00	; 0
    61c4:	80 e8       	ldi	r24, 0x80	; 128
    61c6:	9f eb       	ldi	r25, 0xBF	; 191
    61c8:	08 95       	ret
    61ca:	26 f4       	brtc	.+8      	; 0x61d4 <floor+0x26>
    61cc:	1b 16       	cp	r1, r27
    61ce:	61 1d       	adc	r22, r1
    61d0:	71 1d       	adc	r23, r1
    61d2:	81 1d       	adc	r24, r1
    61d4:	0c 94 18 31 	jmp	0x6230	; 0x6230 <__fp_mintl>
    61d8:	0c 94 33 31 	jmp	0x6266	; 0x6266 <__fp_mpack>

000061dc <__fp_cmp>:
    61dc:	99 0f       	add	r25, r25
    61de:	00 08       	sbc	r0, r0
    61e0:	55 0f       	add	r21, r21
    61e2:	aa 0b       	sbc	r26, r26
    61e4:	e0 e8       	ldi	r30, 0x80	; 128
    61e6:	fe ef       	ldi	r31, 0xFE	; 254
    61e8:	16 16       	cp	r1, r22
    61ea:	17 06       	cpc	r1, r23
    61ec:	e8 07       	cpc	r30, r24
    61ee:	f9 07       	cpc	r31, r25
    61f0:	c0 f0       	brcs	.+48     	; 0x6222 <__fp_cmp+0x46>
    61f2:	12 16       	cp	r1, r18
    61f4:	13 06       	cpc	r1, r19
    61f6:	e4 07       	cpc	r30, r20
    61f8:	f5 07       	cpc	r31, r21
    61fa:	98 f0       	brcs	.+38     	; 0x6222 <__fp_cmp+0x46>
    61fc:	62 1b       	sub	r22, r18
    61fe:	73 0b       	sbc	r23, r19
    6200:	84 0b       	sbc	r24, r20
    6202:	95 0b       	sbc	r25, r21
    6204:	39 f4       	brne	.+14     	; 0x6214 <__fp_cmp+0x38>
    6206:	0a 26       	eor	r0, r26
    6208:	61 f0       	breq	.+24     	; 0x6222 <__fp_cmp+0x46>
    620a:	23 2b       	or	r18, r19
    620c:	24 2b       	or	r18, r20
    620e:	25 2b       	or	r18, r21
    6210:	21 f4       	brne	.+8      	; 0x621a <__fp_cmp+0x3e>
    6212:	08 95       	ret
    6214:	0a 26       	eor	r0, r26
    6216:	09 f4       	brne	.+2      	; 0x621a <__fp_cmp+0x3e>
    6218:	a1 40       	sbci	r26, 0x01	; 1
    621a:	a6 95       	lsr	r26
    621c:	8f ef       	ldi	r24, 0xFF	; 255
    621e:	81 1d       	adc	r24, r1
    6220:	81 1d       	adc	r24, r1
    6222:	08 95       	ret

00006224 <__fp_inf>:
    6224:	97 f9       	bld	r25, 7
    6226:	9f 67       	ori	r25, 0x7F	; 127
    6228:	80 e8       	ldi	r24, 0x80	; 128
    622a:	70 e0       	ldi	r23, 0x00	; 0
    622c:	60 e0       	ldi	r22, 0x00	; 0
    622e:	08 95       	ret

00006230 <__fp_mintl>:
    6230:	88 23       	and	r24, r24
    6232:	71 f4       	brne	.+28     	; 0x6250 <__fp_mintl+0x20>
    6234:	77 23       	and	r23, r23
    6236:	21 f0       	breq	.+8      	; 0x6240 <__fp_mintl+0x10>
    6238:	98 50       	subi	r25, 0x08	; 8
    623a:	87 2b       	or	r24, r23
    623c:	76 2f       	mov	r23, r22
    623e:	07 c0       	rjmp	.+14     	; 0x624e <__fp_mintl+0x1e>
    6240:	66 23       	and	r22, r22
    6242:	11 f4       	brne	.+4      	; 0x6248 <__fp_mintl+0x18>
    6244:	99 27       	eor	r25, r25
    6246:	0d c0       	rjmp	.+26     	; 0x6262 <__fp_mintl+0x32>
    6248:	90 51       	subi	r25, 0x10	; 16
    624a:	86 2b       	or	r24, r22
    624c:	70 e0       	ldi	r23, 0x00	; 0
    624e:	60 e0       	ldi	r22, 0x00	; 0
    6250:	2a f0       	brmi	.+10     	; 0x625c <__fp_mintl+0x2c>
    6252:	9a 95       	dec	r25
    6254:	66 0f       	add	r22, r22
    6256:	77 1f       	adc	r23, r23
    6258:	88 1f       	adc	r24, r24
    625a:	da f7       	brpl	.-10     	; 0x6252 <__fp_mintl+0x22>
    625c:	88 0f       	add	r24, r24
    625e:	96 95       	lsr	r25
    6260:	87 95       	ror	r24
    6262:	97 f9       	bld	r25, 7
    6264:	08 95       	ret

00006266 <__fp_mpack>:
    6266:	9f 3f       	cpi	r25, 0xFF	; 255
    6268:	31 f0       	breq	.+12     	; 0x6276 <__fp_mpack_finite+0xc>

0000626a <__fp_mpack_finite>:
    626a:	91 50       	subi	r25, 0x01	; 1
    626c:	20 f4       	brcc	.+8      	; 0x6276 <__fp_mpack_finite+0xc>
    626e:	87 95       	ror	r24
    6270:	77 95       	ror	r23
    6272:	67 95       	ror	r22
    6274:	b7 95       	ror	r27
    6276:	88 0f       	add	r24, r24
    6278:	91 1d       	adc	r25, r1
    627a:	96 95       	lsr	r25
    627c:	87 95       	ror	r24
    627e:	97 f9       	bld	r25, 7
    6280:	08 95       	ret

00006282 <__fp_nan>:
    6282:	9f ef       	ldi	r25, 0xFF	; 255
    6284:	80 ec       	ldi	r24, 0xC0	; 192
    6286:	08 95       	ret

00006288 <__fp_pscA>:
    6288:	00 24       	eor	r0, r0
    628a:	0a 94       	dec	r0
    628c:	16 16       	cp	r1, r22
    628e:	17 06       	cpc	r1, r23
    6290:	18 06       	cpc	r1, r24
    6292:	09 06       	cpc	r0, r25
    6294:	08 95       	ret

00006296 <__fp_pscB>:
    6296:	00 24       	eor	r0, r0
    6298:	0a 94       	dec	r0
    629a:	12 16       	cp	r1, r18
    629c:	13 06       	cpc	r1, r19
    629e:	14 06       	cpc	r1, r20
    62a0:	05 06       	cpc	r0, r21
    62a2:	08 95       	ret

000062a4 <__fp_round>:
    62a4:	09 2e       	mov	r0, r25
    62a6:	03 94       	inc	r0
    62a8:	00 0c       	add	r0, r0
    62aa:	11 f4       	brne	.+4      	; 0x62b0 <__fp_round+0xc>
    62ac:	88 23       	and	r24, r24
    62ae:	52 f0       	brmi	.+20     	; 0x62c4 <__fp_round+0x20>
    62b0:	bb 0f       	add	r27, r27
    62b2:	40 f4       	brcc	.+16     	; 0x62c4 <__fp_round+0x20>
    62b4:	bf 2b       	or	r27, r31
    62b6:	11 f4       	brne	.+4      	; 0x62bc <__fp_round+0x18>
    62b8:	60 ff       	sbrs	r22, 0
    62ba:	04 c0       	rjmp	.+8      	; 0x62c4 <__fp_round+0x20>
    62bc:	6f 5f       	subi	r22, 0xFF	; 255
    62be:	7f 4f       	sbci	r23, 0xFF	; 255
    62c0:	8f 4f       	sbci	r24, 0xFF	; 255
    62c2:	9f 4f       	sbci	r25, 0xFF	; 255
    62c4:	08 95       	ret

000062c6 <__fp_split3>:
    62c6:	57 fd       	sbrc	r21, 7
    62c8:	90 58       	subi	r25, 0x80	; 128
    62ca:	44 0f       	add	r20, r20
    62cc:	55 1f       	adc	r21, r21
    62ce:	59 f0       	breq	.+22     	; 0x62e6 <__fp_splitA+0x10>
    62d0:	5f 3f       	cpi	r21, 0xFF	; 255
    62d2:	71 f0       	breq	.+28     	; 0x62f0 <__fp_splitA+0x1a>
    62d4:	47 95       	ror	r20

000062d6 <__fp_splitA>:
    62d6:	88 0f       	add	r24, r24
    62d8:	97 fb       	bst	r25, 7
    62da:	99 1f       	adc	r25, r25
    62dc:	61 f0       	breq	.+24     	; 0x62f6 <__fp_splitA+0x20>
    62de:	9f 3f       	cpi	r25, 0xFF	; 255
    62e0:	79 f0       	breq	.+30     	; 0x6300 <__fp_splitA+0x2a>
    62e2:	87 95       	ror	r24
    62e4:	08 95       	ret
    62e6:	12 16       	cp	r1, r18
    62e8:	13 06       	cpc	r1, r19
    62ea:	14 06       	cpc	r1, r20
    62ec:	55 1f       	adc	r21, r21
    62ee:	f2 cf       	rjmp	.-28     	; 0x62d4 <__fp_split3+0xe>
    62f0:	46 95       	lsr	r20
    62f2:	f1 df       	rcall	.-30     	; 0x62d6 <__fp_splitA>
    62f4:	08 c0       	rjmp	.+16     	; 0x6306 <__fp_splitA+0x30>
    62f6:	16 16       	cp	r1, r22
    62f8:	17 06       	cpc	r1, r23
    62fa:	18 06       	cpc	r1, r24
    62fc:	99 1f       	adc	r25, r25
    62fe:	f1 cf       	rjmp	.-30     	; 0x62e2 <__fp_splitA+0xc>
    6300:	86 95       	lsr	r24
    6302:	71 05       	cpc	r23, r1
    6304:	61 05       	cpc	r22, r1
    6306:	08 94       	sec
    6308:	08 95       	ret

0000630a <__fp_trunc>:
    630a:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <__fp_splitA>
    630e:	a0 f0       	brcs	.+40     	; 0x6338 <__fp_trunc+0x2e>
    6310:	be e7       	ldi	r27, 0x7E	; 126
    6312:	b9 17       	cp	r27, r25
    6314:	88 f4       	brcc	.+34     	; 0x6338 <__fp_trunc+0x2e>
    6316:	bb 27       	eor	r27, r27
    6318:	9f 38       	cpi	r25, 0x8F	; 143
    631a:	60 f4       	brcc	.+24     	; 0x6334 <__fp_trunc+0x2a>
    631c:	16 16       	cp	r1, r22
    631e:	b1 1d       	adc	r27, r1
    6320:	67 2f       	mov	r22, r23
    6322:	78 2f       	mov	r23, r24
    6324:	88 27       	eor	r24, r24
    6326:	98 5f       	subi	r25, 0xF8	; 248
    6328:	f7 cf       	rjmp	.-18     	; 0x6318 <__fp_trunc+0xe>
    632a:	86 95       	lsr	r24
    632c:	77 95       	ror	r23
    632e:	67 95       	ror	r22
    6330:	b1 1d       	adc	r27, r1
    6332:	93 95       	inc	r25
    6334:	96 39       	cpi	r25, 0x96	; 150
    6336:	c8 f3       	brcs	.-14     	; 0x632a <__fp_trunc+0x20>
    6338:	08 95       	ret

0000633a <__fp_zero>:
    633a:	e8 94       	clt

0000633c <__fp_szero>:
    633c:	bb 27       	eor	r27, r27
    633e:	66 27       	eor	r22, r22
    6340:	77 27       	eor	r23, r23
    6342:	cb 01       	movw	r24, r22
    6344:	97 f9       	bld	r25, 7
    6346:	08 95       	ret

00006348 <__gesf2>:
    6348:	0e 94 ee 30 	call	0x61dc	; 0x61dc <__fp_cmp>
    634c:	08 f4       	brcc	.+2      	; 0x6350 <__gesf2+0x8>
    634e:	8f ef       	ldi	r24, 0xFF	; 255
    6350:	08 95       	ret

00006352 <__mulsf3>:
    6352:	0e 94 bc 31 	call	0x6378	; 0x6378 <__mulsf3x>
    6356:	0c 94 52 31 	jmp	0x62a4	; 0x62a4 <__fp_round>
    635a:	0e 94 44 31 	call	0x6288	; 0x6288 <__fp_pscA>
    635e:	38 f0       	brcs	.+14     	; 0x636e <__mulsf3+0x1c>
    6360:	0e 94 4b 31 	call	0x6296	; 0x6296 <__fp_pscB>
    6364:	20 f0       	brcs	.+8      	; 0x636e <__mulsf3+0x1c>
    6366:	95 23       	and	r25, r21
    6368:	11 f0       	breq	.+4      	; 0x636e <__mulsf3+0x1c>
    636a:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__fp_inf>
    636e:	0c 94 41 31 	jmp	0x6282	; 0x6282 <__fp_nan>
    6372:	11 24       	eor	r1, r1
    6374:	0c 94 9e 31 	jmp	0x633c	; 0x633c <__fp_szero>

00006378 <__mulsf3x>:
    6378:	0e 94 63 31 	call	0x62c6	; 0x62c6 <__fp_split3>
    637c:	70 f3       	brcs	.-36     	; 0x635a <__mulsf3+0x8>

0000637e <__mulsf3_pse>:
    637e:	95 9f       	mul	r25, r21
    6380:	c1 f3       	breq	.-16     	; 0x6372 <__mulsf3+0x20>
    6382:	95 0f       	add	r25, r21
    6384:	50 e0       	ldi	r21, 0x00	; 0
    6386:	55 1f       	adc	r21, r21
    6388:	62 9f       	mul	r22, r18
    638a:	f0 01       	movw	r30, r0
    638c:	72 9f       	mul	r23, r18
    638e:	bb 27       	eor	r27, r27
    6390:	f0 0d       	add	r31, r0
    6392:	b1 1d       	adc	r27, r1
    6394:	63 9f       	mul	r22, r19
    6396:	aa 27       	eor	r26, r26
    6398:	f0 0d       	add	r31, r0
    639a:	b1 1d       	adc	r27, r1
    639c:	aa 1f       	adc	r26, r26
    639e:	64 9f       	mul	r22, r20
    63a0:	66 27       	eor	r22, r22
    63a2:	b0 0d       	add	r27, r0
    63a4:	a1 1d       	adc	r26, r1
    63a6:	66 1f       	adc	r22, r22
    63a8:	82 9f       	mul	r24, r18
    63aa:	22 27       	eor	r18, r18
    63ac:	b0 0d       	add	r27, r0
    63ae:	a1 1d       	adc	r26, r1
    63b0:	62 1f       	adc	r22, r18
    63b2:	73 9f       	mul	r23, r19
    63b4:	b0 0d       	add	r27, r0
    63b6:	a1 1d       	adc	r26, r1
    63b8:	62 1f       	adc	r22, r18
    63ba:	83 9f       	mul	r24, r19
    63bc:	a0 0d       	add	r26, r0
    63be:	61 1d       	adc	r22, r1
    63c0:	22 1f       	adc	r18, r18
    63c2:	74 9f       	mul	r23, r20
    63c4:	33 27       	eor	r19, r19
    63c6:	a0 0d       	add	r26, r0
    63c8:	61 1d       	adc	r22, r1
    63ca:	23 1f       	adc	r18, r19
    63cc:	84 9f       	mul	r24, r20
    63ce:	60 0d       	add	r22, r0
    63d0:	21 1d       	adc	r18, r1
    63d2:	82 2f       	mov	r24, r18
    63d4:	76 2f       	mov	r23, r22
    63d6:	6a 2f       	mov	r22, r26
    63d8:	11 24       	eor	r1, r1
    63da:	9f 57       	subi	r25, 0x7F	; 127
    63dc:	50 40       	sbci	r21, 0x00	; 0
    63de:	9a f0       	brmi	.+38     	; 0x6406 <__mulsf3_pse+0x88>
    63e0:	f1 f0       	breq	.+60     	; 0x641e <__mulsf3_pse+0xa0>
    63e2:	88 23       	and	r24, r24
    63e4:	4a f0       	brmi	.+18     	; 0x63f8 <__mulsf3_pse+0x7a>
    63e6:	ee 0f       	add	r30, r30
    63e8:	ff 1f       	adc	r31, r31
    63ea:	bb 1f       	adc	r27, r27
    63ec:	66 1f       	adc	r22, r22
    63ee:	77 1f       	adc	r23, r23
    63f0:	88 1f       	adc	r24, r24
    63f2:	91 50       	subi	r25, 0x01	; 1
    63f4:	50 40       	sbci	r21, 0x00	; 0
    63f6:	a9 f7       	brne	.-22     	; 0x63e2 <__mulsf3_pse+0x64>
    63f8:	9e 3f       	cpi	r25, 0xFE	; 254
    63fa:	51 05       	cpc	r21, r1
    63fc:	80 f0       	brcs	.+32     	; 0x641e <__mulsf3_pse+0xa0>
    63fe:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__fp_inf>
    6402:	0c 94 9e 31 	jmp	0x633c	; 0x633c <__fp_szero>
    6406:	5f 3f       	cpi	r21, 0xFF	; 255
    6408:	e4 f3       	brlt	.-8      	; 0x6402 <__mulsf3_pse+0x84>
    640a:	98 3e       	cpi	r25, 0xE8	; 232
    640c:	d4 f3       	brlt	.-12     	; 0x6402 <__mulsf3_pse+0x84>
    640e:	86 95       	lsr	r24
    6410:	77 95       	ror	r23
    6412:	67 95       	ror	r22
    6414:	b7 95       	ror	r27
    6416:	f7 95       	ror	r31
    6418:	e7 95       	ror	r30
    641a:	9f 5f       	subi	r25, 0xFF	; 255
    641c:	c1 f7       	brne	.-16     	; 0x640e <__mulsf3_pse+0x90>
    641e:	fe 2b       	or	r31, r30
    6420:	88 0f       	add	r24, r24
    6422:	91 1d       	adc	r25, r1
    6424:	96 95       	lsr	r25
    6426:	87 95       	ror	r24
    6428:	97 f9       	bld	r25, 7
    642a:	08 95       	ret

0000642c <pow>:
    642c:	fa 01       	movw	r30, r20
    642e:	ee 0f       	add	r30, r30
    6430:	ff 1f       	adc	r31, r31
    6432:	30 96       	adiw	r30, 0x00	; 0
    6434:	21 05       	cpc	r18, r1
    6436:	31 05       	cpc	r19, r1
    6438:	a1 f1       	breq	.+104    	; 0x64a2 <pow+0x76>
    643a:	61 15       	cp	r22, r1
    643c:	71 05       	cpc	r23, r1
    643e:	61 f4       	brne	.+24     	; 0x6458 <pow+0x2c>
    6440:	80 38       	cpi	r24, 0x80	; 128
    6442:	bf e3       	ldi	r27, 0x3F	; 63
    6444:	9b 07       	cpc	r25, r27
    6446:	49 f1       	breq	.+82     	; 0x649a <pow+0x6e>
    6448:	68 94       	set
    644a:	90 38       	cpi	r25, 0x80	; 128
    644c:	81 05       	cpc	r24, r1
    644e:	61 f0       	breq	.+24     	; 0x6468 <pow+0x3c>
    6450:	80 38       	cpi	r24, 0x80	; 128
    6452:	bf ef       	ldi	r27, 0xFF	; 255
    6454:	9b 07       	cpc	r25, r27
    6456:	41 f0       	breq	.+16     	; 0x6468 <pow+0x3c>
    6458:	99 23       	and	r25, r25
    645a:	4a f5       	brpl	.+82     	; 0x64ae <pow+0x82>
    645c:	ff 3f       	cpi	r31, 0xFF	; 255
    645e:	e1 05       	cpc	r30, r1
    6460:	31 05       	cpc	r19, r1
    6462:	21 05       	cpc	r18, r1
    6464:	19 f1       	breq	.+70     	; 0x64ac <pow+0x80>
    6466:	e8 94       	clt
    6468:	08 94       	sec
    646a:	e7 95       	ror	r30
    646c:	d9 01       	movw	r26, r18
    646e:	aa 23       	and	r26, r26
    6470:	29 f4       	brne	.+10     	; 0x647c <pow+0x50>
    6472:	ab 2f       	mov	r26, r27
    6474:	be 2f       	mov	r27, r30
    6476:	f8 5f       	subi	r31, 0xF8	; 248
    6478:	d0 f3       	brcs	.-12     	; 0x646e <pow+0x42>
    647a:	10 c0       	rjmp	.+32     	; 0x649c <pow+0x70>
    647c:	ff 5f       	subi	r31, 0xFF	; 255
    647e:	70 f4       	brcc	.+28     	; 0x649c <pow+0x70>
    6480:	a6 95       	lsr	r26
    6482:	e0 f7       	brcc	.-8      	; 0x647c <pow+0x50>
    6484:	f7 39       	cpi	r31, 0x97	; 151
    6486:	50 f0       	brcs	.+20     	; 0x649c <pow+0x70>
    6488:	19 f0       	breq	.+6      	; 0x6490 <pow+0x64>
    648a:	ff 3a       	cpi	r31, 0xAF	; 175
    648c:	38 f4       	brcc	.+14     	; 0x649c <pow+0x70>
    648e:	9f 77       	andi	r25, 0x7F	; 127
    6490:	9f 93       	push	r25
    6492:	0d d0       	rcall	.+26     	; 0x64ae <pow+0x82>
    6494:	0f 90       	pop	r0
    6496:	07 fc       	sbrc	r0, 7
    6498:	90 58       	subi	r25, 0x80	; 128
    649a:	08 95       	ret
    649c:	46 f0       	brts	.+16     	; 0x64ae <pow+0x82>
    649e:	0c 94 41 31 	jmp	0x6282	; 0x6282 <__fp_nan>
    64a2:	60 e0       	ldi	r22, 0x00	; 0
    64a4:	70 e0       	ldi	r23, 0x00	; 0
    64a6:	80 e8       	ldi	r24, 0x80	; 128
    64a8:	9f e3       	ldi	r25, 0x3F	; 63
    64aa:	08 95       	ret
    64ac:	4f e7       	ldi	r20, 0x7F	; 127
    64ae:	9f 77       	andi	r25, 0x7F	; 127
    64b0:	5f 93       	push	r21
    64b2:	4f 93       	push	r20
    64b4:	3f 93       	push	r19
    64b6:	2f 93       	push	r18
    64b8:	0e 94 11 33 	call	0x6622	; 0x6622 <log>
    64bc:	2f 91       	pop	r18
    64be:	3f 91       	pop	r19
    64c0:	4f 91       	pop	r20
    64c2:	5f 91       	pop	r21
    64c4:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    64c8:	0c 94 6e 32 	jmp	0x64dc	; 0x64dc <exp>
    64cc:	29 f4       	brne	.+10     	; 0x64d8 <pow+0xac>
    64ce:	16 f0       	brts	.+4      	; 0x64d4 <pow+0xa8>
    64d0:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__fp_inf>
    64d4:	0c 94 9d 31 	jmp	0x633a	; 0x633a <__fp_zero>
    64d8:	0c 94 41 31 	jmp	0x6282	; 0x6282 <__fp_nan>

000064dc <exp>:
    64dc:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <__fp_splitA>
    64e0:	a8 f3       	brcs	.-22     	; 0x64cc <pow+0xa0>
    64e2:	96 38       	cpi	r25, 0x86	; 134
    64e4:	a0 f7       	brcc	.-24     	; 0x64ce <pow+0xa2>
    64e6:	07 f8       	bld	r0, 7
    64e8:	0f 92       	push	r0
    64ea:	e8 94       	clt
    64ec:	2b e3       	ldi	r18, 0x3B	; 59
    64ee:	3a ea       	ldi	r19, 0xAA	; 170
    64f0:	48 eb       	ldi	r20, 0xB8	; 184
    64f2:	5f e7       	ldi	r21, 0x7F	; 127
    64f4:	0e 94 bf 31 	call	0x637e	; 0x637e <__mulsf3_pse>
    64f8:	0f 92       	push	r0
    64fa:	0f 92       	push	r0
    64fc:	0f 92       	push	r0
    64fe:	4d b7       	in	r20, 0x3d	; 61
    6500:	5e b7       	in	r21, 0x3e	; 62
    6502:	0f 92       	push	r0
    6504:	0e 94 59 33 	call	0x66b2	; 0x66b2 <modf>
    6508:	e4 e2       	ldi	r30, 0x24	; 36
    650a:	f1 e0       	ldi	r31, 0x01	; 1
    650c:	0e 94 a0 32 	call	0x6540	; 0x6540 <__fp_powser>
    6510:	4f 91       	pop	r20
    6512:	5f 91       	pop	r21
    6514:	ef 91       	pop	r30
    6516:	ff 91       	pop	r31
    6518:	e5 95       	asr	r30
    651a:	ee 1f       	adc	r30, r30
    651c:	ff 1f       	adc	r31, r31
    651e:	49 f0       	breq	.+18     	; 0x6532 <exp+0x56>
    6520:	fe 57       	subi	r31, 0x7E	; 126
    6522:	e0 68       	ori	r30, 0x80	; 128
    6524:	44 27       	eor	r20, r20
    6526:	ee 0f       	add	r30, r30
    6528:	44 1f       	adc	r20, r20
    652a:	fa 95       	dec	r31
    652c:	e1 f7       	brne	.-8      	; 0x6526 <exp+0x4a>
    652e:	41 95       	neg	r20
    6530:	55 0b       	sbc	r21, r21
    6532:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <ldexp>
    6536:	0f 90       	pop	r0
    6538:	07 fe       	sbrs	r0, 7
    653a:	0c 94 c7 32 	jmp	0x658e	; 0x658e <inverse>
    653e:	08 95       	ret

00006540 <__fp_powser>:
    6540:	df 93       	push	r29
    6542:	cf 93       	push	r28
    6544:	1f 93       	push	r17
    6546:	0f 93       	push	r16
    6548:	ff 92       	push	r15
    654a:	ef 92       	push	r14
    654c:	df 92       	push	r13
    654e:	7b 01       	movw	r14, r22
    6550:	8c 01       	movw	r16, r24
    6552:	68 94       	set
    6554:	06 c0       	rjmp	.+12     	; 0x6562 <__fp_powser+0x22>
    6556:	da 2e       	mov	r13, r26
    6558:	ef 01       	movw	r28, r30
    655a:	0e 94 bc 31 	call	0x6378	; 0x6378 <__mulsf3x>
    655e:	fe 01       	movw	r30, r28
    6560:	e8 94       	clt
    6562:	a5 91       	lpm	r26, Z+
    6564:	25 91       	lpm	r18, Z+
    6566:	35 91       	lpm	r19, Z+
    6568:	45 91       	lpm	r20, Z+
    656a:	55 91       	lpm	r21, Z+
    656c:	a6 f3       	brts	.-24     	; 0x6556 <__fp_powser+0x16>
    656e:	ef 01       	movw	r28, r30
    6570:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <__addsf3x>
    6574:	fe 01       	movw	r30, r28
    6576:	97 01       	movw	r18, r14
    6578:	a8 01       	movw	r20, r16
    657a:	da 94       	dec	r13
    657c:	69 f7       	brne	.-38     	; 0x6558 <__fp_powser+0x18>
    657e:	df 90       	pop	r13
    6580:	ef 90       	pop	r14
    6582:	ff 90       	pop	r15
    6584:	0f 91       	pop	r16
    6586:	1f 91       	pop	r17
    6588:	cf 91       	pop	r28
    658a:	df 91       	pop	r29
    658c:	08 95       	ret

0000658e <inverse>:
    658e:	9b 01       	movw	r18, r22
    6590:	ac 01       	movw	r20, r24
    6592:	60 e0       	ldi	r22, 0x00	; 0
    6594:	70 e0       	ldi	r23, 0x00	; 0
    6596:	80 e8       	ldi	r24, 0x80	; 128
    6598:	9f e3       	ldi	r25, 0x3F	; 63
    659a:	0c 94 f2 2f 	jmp	0x5fe4	; 0x5fe4 <__divsf3>
    659e:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__fp_inf>
    65a2:	0c 94 33 31 	jmp	0x6266	; 0x6266 <__fp_mpack>

000065a6 <ldexp>:
    65a6:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <__fp_splitA>
    65aa:	d8 f3       	brcs	.-10     	; 0x65a2 <inverse+0x14>
    65ac:	99 23       	and	r25, r25
    65ae:	c9 f3       	breq	.-14     	; 0x65a2 <inverse+0x14>
    65b0:	94 0f       	add	r25, r20
    65b2:	51 1d       	adc	r21, r1
    65b4:	a3 f3       	brvs	.-24     	; 0x659e <inverse+0x10>
    65b6:	91 50       	subi	r25, 0x01	; 1
    65b8:	50 40       	sbci	r21, 0x00	; 0
    65ba:	94 f0       	brlt	.+36     	; 0x65e0 <ldexp+0x3a>
    65bc:	59 f0       	breq	.+22     	; 0x65d4 <ldexp+0x2e>
    65be:	88 23       	and	r24, r24
    65c0:	32 f0       	brmi	.+12     	; 0x65ce <ldexp+0x28>
    65c2:	66 0f       	add	r22, r22
    65c4:	77 1f       	adc	r23, r23
    65c6:	88 1f       	adc	r24, r24
    65c8:	91 50       	subi	r25, 0x01	; 1
    65ca:	50 40       	sbci	r21, 0x00	; 0
    65cc:	c1 f7       	brne	.-16     	; 0x65be <ldexp+0x18>
    65ce:	9e 3f       	cpi	r25, 0xFE	; 254
    65d0:	51 05       	cpc	r21, r1
    65d2:	2c f7       	brge	.-54     	; 0x659e <inverse+0x10>
    65d4:	88 0f       	add	r24, r24
    65d6:	91 1d       	adc	r25, r1
    65d8:	96 95       	lsr	r25
    65da:	87 95       	ror	r24
    65dc:	97 f9       	bld	r25, 7
    65de:	08 95       	ret
    65e0:	5f 3f       	cpi	r21, 0xFF	; 255
    65e2:	ac f0       	brlt	.+42     	; 0x660e <ldexp+0x68>
    65e4:	98 3e       	cpi	r25, 0xE8	; 232
    65e6:	9c f0       	brlt	.+38     	; 0x660e <ldexp+0x68>
    65e8:	bb 27       	eor	r27, r27
    65ea:	86 95       	lsr	r24
    65ec:	77 95       	ror	r23
    65ee:	67 95       	ror	r22
    65f0:	b7 95       	ror	r27
    65f2:	08 f4       	brcc	.+2      	; 0x65f6 <ldexp+0x50>
    65f4:	b1 60       	ori	r27, 0x01	; 1
    65f6:	93 95       	inc	r25
    65f8:	c1 f7       	brne	.-16     	; 0x65ea <ldexp+0x44>
    65fa:	bb 0f       	add	r27, r27
    65fc:	58 f7       	brcc	.-42     	; 0x65d4 <ldexp+0x2e>
    65fe:	11 f4       	brne	.+4      	; 0x6604 <ldexp+0x5e>
    6600:	60 ff       	sbrs	r22, 0
    6602:	e8 cf       	rjmp	.-48     	; 0x65d4 <ldexp+0x2e>
    6604:	6f 5f       	subi	r22, 0xFF	; 255
    6606:	7f 4f       	sbci	r23, 0xFF	; 255
    6608:	8f 4f       	sbci	r24, 0xFF	; 255
    660a:	9f 4f       	sbci	r25, 0xFF	; 255
    660c:	e3 cf       	rjmp	.-58     	; 0x65d4 <ldexp+0x2e>
    660e:	0c 94 9e 31 	jmp	0x633c	; 0x633c <__fp_szero>
    6612:	16 f0       	brts	.+4      	; 0x6618 <ldexp+0x72>
    6614:	0c 94 33 31 	jmp	0x6266	; 0x6266 <__fp_mpack>
    6618:	0c 94 41 31 	jmp	0x6282	; 0x6282 <__fp_nan>
    661c:	68 94       	set
    661e:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__fp_inf>

00006622 <log>:
    6622:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <__fp_splitA>
    6626:	a8 f3       	brcs	.-22     	; 0x6612 <ldexp+0x6c>
    6628:	99 23       	and	r25, r25
    662a:	c1 f3       	breq	.-16     	; 0x661c <ldexp+0x76>
    662c:	ae f3       	brts	.-22     	; 0x6618 <ldexp+0x72>
    662e:	df 93       	push	r29
    6630:	cf 93       	push	r28
    6632:	1f 93       	push	r17
    6634:	0f 93       	push	r16
    6636:	ff 92       	push	r15
    6638:	c9 2f       	mov	r28, r25
    663a:	dd 27       	eor	r29, r29
    663c:	88 23       	and	r24, r24
    663e:	2a f0       	brmi	.+10     	; 0x664a <log+0x28>
    6640:	21 97       	sbiw	r28, 0x01	; 1
    6642:	66 0f       	add	r22, r22
    6644:	77 1f       	adc	r23, r23
    6646:	88 1f       	adc	r24, r24
    6648:	da f7       	brpl	.-10     	; 0x6640 <log+0x1e>
    664a:	20 e0       	ldi	r18, 0x00	; 0
    664c:	30 e0       	ldi	r19, 0x00	; 0
    664e:	40 e8       	ldi	r20, 0x80	; 128
    6650:	5f eb       	ldi	r21, 0xBF	; 191
    6652:	9f e3       	ldi	r25, 0x3F	; 63
    6654:	88 39       	cpi	r24, 0x98	; 152
    6656:	20 f0       	brcs	.+8      	; 0x6660 <log+0x3e>
    6658:	80 3e       	cpi	r24, 0xE0	; 224
    665a:	38 f0       	brcs	.+14     	; 0x666a <log+0x48>
    665c:	21 96       	adiw	r28, 0x01	; 1
    665e:	8f 77       	andi	r24, 0x7F	; 127
    6660:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    6664:	ec e4       	ldi	r30, 0x4C	; 76
    6666:	f1 e0       	ldi	r31, 0x01	; 1
    6668:	04 c0       	rjmp	.+8      	; 0x6672 <log+0x50>
    666a:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__addsf3>
    666e:	e9 e7       	ldi	r30, 0x79	; 121
    6670:	f1 e0       	ldi	r31, 0x01	; 1
    6672:	0e 94 a0 32 	call	0x6540	; 0x6540 <__fp_powser>
    6676:	8b 01       	movw	r16, r22
    6678:	be 01       	movw	r22, r28
    667a:	ec 01       	movw	r28, r24
    667c:	fb 2e       	mov	r15, r27
    667e:	6f 57       	subi	r22, 0x7F	; 127
    6680:	71 09       	sbc	r23, r1
    6682:	75 95       	asr	r23
    6684:	77 1f       	adc	r23, r23
    6686:	88 0b       	sbc	r24, r24
    6688:	99 0b       	sbc	r25, r25
    668a:	0e 94 9c 30 	call	0x6138	; 0x6138 <__floatsisf>
    668e:	28 e1       	ldi	r18, 0x18	; 24
    6690:	32 e7       	ldi	r19, 0x72	; 114
    6692:	41 e3       	ldi	r20, 0x31	; 49
    6694:	5f e3       	ldi	r21, 0x3F	; 63
    6696:	0e 94 bc 31 	call	0x6378	; 0x6378 <__mulsf3x>
    669a:	af 2d       	mov	r26, r15
    669c:	98 01       	movw	r18, r16
    669e:	ae 01       	movw	r20, r28
    66a0:	ff 90       	pop	r15
    66a2:	0f 91       	pop	r16
    66a4:	1f 91       	pop	r17
    66a6:	cf 91       	pop	r28
    66a8:	df 91       	pop	r29
    66aa:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <__addsf3x>
    66ae:	0c 94 52 31 	jmp	0x62a4	; 0x62a4 <__fp_round>

000066b2 <modf>:
    66b2:	fa 01       	movw	r30, r20
    66b4:	dc 01       	movw	r26, r24
    66b6:	aa 0f       	add	r26, r26
    66b8:	bb 1f       	adc	r27, r27
    66ba:	9b 01       	movw	r18, r22
    66bc:	ac 01       	movw	r20, r24
    66be:	bf 57       	subi	r27, 0x7F	; 127
    66c0:	28 f4       	brcc	.+10     	; 0x66cc <modf+0x1a>
    66c2:	22 27       	eor	r18, r18
    66c4:	33 27       	eor	r19, r19
    66c6:	44 27       	eor	r20, r20
    66c8:	50 78       	andi	r21, 0x80	; 128
    66ca:	20 c0       	rjmp	.+64     	; 0x670c <modf+0x5a>
    66cc:	b7 51       	subi	r27, 0x17	; 23
    66ce:	90 f4       	brcc	.+36     	; 0x66f4 <modf+0x42>
    66d0:	ab 2f       	mov	r26, r27
    66d2:	00 24       	eor	r0, r0
    66d4:	46 95       	lsr	r20
    66d6:	37 95       	ror	r19
    66d8:	27 95       	ror	r18
    66da:	01 1c       	adc	r0, r1
    66dc:	a3 95       	inc	r26
    66de:	d2 f3       	brmi	.-12     	; 0x66d4 <modf+0x22>
    66e0:	00 20       	and	r0, r0
    66e2:	71 f0       	breq	.+28     	; 0x6700 <modf+0x4e>
    66e4:	22 0f       	add	r18, r18
    66e6:	33 1f       	adc	r19, r19
    66e8:	44 1f       	adc	r20, r20
    66ea:	b3 95       	inc	r27
    66ec:	da f3       	brmi	.-10     	; 0x66e4 <modf+0x32>
    66ee:	0e d0       	rcall	.+28     	; 0x670c <modf+0x5a>
    66f0:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__subsf3>
    66f4:	61 30       	cpi	r22, 0x01	; 1
    66f6:	71 05       	cpc	r23, r1
    66f8:	a0 e8       	ldi	r26, 0x80	; 128
    66fa:	8a 07       	cpc	r24, r26
    66fc:	b9 46       	sbci	r27, 0x69	; 105
    66fe:	30 f4       	brcc	.+12     	; 0x670c <modf+0x5a>
    6700:	9b 01       	movw	r18, r22
    6702:	ac 01       	movw	r20, r24
    6704:	66 27       	eor	r22, r22
    6706:	77 27       	eor	r23, r23
    6708:	88 27       	eor	r24, r24
    670a:	90 78       	andi	r25, 0x80	; 128
    670c:	30 96       	adiw	r30, 0x00	; 0
    670e:	21 f0       	breq	.+8      	; 0x6718 <modf+0x66>
    6710:	20 83       	st	Z, r18
    6712:	31 83       	std	Z+1, r19	; 0x01
    6714:	42 83       	std	Z+2, r20	; 0x02
    6716:	53 83       	std	Z+3, r21	; 0x03
    6718:	08 95       	ret

0000671a <vfprintf>:
    671a:	a3 e1       	ldi	r26, 0x13	; 19
    671c:	b0 e0       	ldi	r27, 0x00	; 0
    671e:	e3 e9       	ldi	r30, 0x93	; 147
    6720:	f3 e3       	ldi	r31, 0x33	; 51
    6722:	0c 94 75 3b 	jmp	0x76ea	; 0x76ea <__prologue_saves__>
    6726:	6c 01       	movw	r12, r24
    6728:	4b 01       	movw	r8, r22
    672a:	2a 01       	movw	r4, r20
    672c:	fc 01       	movw	r30, r24
    672e:	17 82       	std	Z+7, r1	; 0x07
    6730:	16 82       	std	Z+6, r1	; 0x06
    6732:	83 81       	ldd	r24, Z+3	; 0x03
    6734:	81 ff       	sbrs	r24, 1
    6736:	43 c3       	rjmp	.+1670   	; 0x6dbe <vfprintf+0x6a4>
    6738:	ae 01       	movw	r20, r28
    673a:	4f 5f       	subi	r20, 0xFF	; 255
    673c:	5f 4f       	sbci	r21, 0xFF	; 255
    673e:	3a 01       	movw	r6, r20
    6740:	f6 01       	movw	r30, r12
    6742:	93 81       	ldd	r25, Z+3	; 0x03
    6744:	f4 01       	movw	r30, r8
    6746:	93 fd       	sbrc	r25, 3
    6748:	85 91       	lpm	r24, Z+
    674a:	93 ff       	sbrs	r25, 3
    674c:	81 91       	ld	r24, Z+
    674e:	4f 01       	movw	r8, r30
    6750:	88 23       	and	r24, r24
    6752:	09 f4       	brne	.+2      	; 0x6756 <vfprintf+0x3c>
    6754:	30 c3       	rjmp	.+1632   	; 0x6db6 <vfprintf+0x69c>
    6756:	85 32       	cpi	r24, 0x25	; 37
    6758:	39 f4       	brne	.+14     	; 0x6768 <vfprintf+0x4e>
    675a:	93 fd       	sbrc	r25, 3
    675c:	85 91       	lpm	r24, Z+
    675e:	93 ff       	sbrs	r25, 3
    6760:	81 91       	ld	r24, Z+
    6762:	4f 01       	movw	r8, r30
    6764:	85 32       	cpi	r24, 0x25	; 37
    6766:	39 f4       	brne	.+14     	; 0x6776 <vfprintf+0x5c>
    6768:	b6 01       	movw	r22, r12
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6770:	52 01       	movw	r10, r4
    6772:	25 01       	movw	r4, r10
    6774:	e5 cf       	rjmp	.-54     	; 0x6740 <vfprintf+0x26>
    6776:	10 e0       	ldi	r17, 0x00	; 0
    6778:	f1 2c       	mov	r15, r1
    677a:	20 e0       	ldi	r18, 0x00	; 0
    677c:	20 32       	cpi	r18, 0x20	; 32
    677e:	a0 f4       	brcc	.+40     	; 0x67a8 <vfprintf+0x8e>
    6780:	8b 32       	cpi	r24, 0x2B	; 43
    6782:	69 f0       	breq	.+26     	; 0x679e <vfprintf+0x84>
    6784:	30 f4       	brcc	.+12     	; 0x6792 <vfprintf+0x78>
    6786:	80 32       	cpi	r24, 0x20	; 32
    6788:	59 f0       	breq	.+22     	; 0x67a0 <vfprintf+0x86>
    678a:	83 32       	cpi	r24, 0x23	; 35
    678c:	69 f4       	brne	.+26     	; 0x67a8 <vfprintf+0x8e>
    678e:	20 61       	ori	r18, 0x10	; 16
    6790:	2c c0       	rjmp	.+88     	; 0x67ea <vfprintf+0xd0>
    6792:	8d 32       	cpi	r24, 0x2D	; 45
    6794:	39 f0       	breq	.+14     	; 0x67a4 <vfprintf+0x8a>
    6796:	80 33       	cpi	r24, 0x30	; 48
    6798:	39 f4       	brne	.+14     	; 0x67a8 <vfprintf+0x8e>
    679a:	21 60       	ori	r18, 0x01	; 1
    679c:	26 c0       	rjmp	.+76     	; 0x67ea <vfprintf+0xd0>
    679e:	22 60       	ori	r18, 0x02	; 2
    67a0:	24 60       	ori	r18, 0x04	; 4
    67a2:	23 c0       	rjmp	.+70     	; 0x67ea <vfprintf+0xd0>
    67a4:	28 60       	ori	r18, 0x08	; 8
    67a6:	21 c0       	rjmp	.+66     	; 0x67ea <vfprintf+0xd0>
    67a8:	27 fd       	sbrc	r18, 7
    67aa:	27 c0       	rjmp	.+78     	; 0x67fa <vfprintf+0xe0>
    67ac:	30 ed       	ldi	r19, 0xD0	; 208
    67ae:	38 0f       	add	r19, r24
    67b0:	3a 30       	cpi	r19, 0x0A	; 10
    67b2:	78 f4       	brcc	.+30     	; 0x67d2 <vfprintf+0xb8>
    67b4:	26 ff       	sbrs	r18, 6
    67b6:	06 c0       	rjmp	.+12     	; 0x67c4 <vfprintf+0xaa>
    67b8:	fa e0       	ldi	r31, 0x0A	; 10
    67ba:	1f 9f       	mul	r17, r31
    67bc:	30 0d       	add	r19, r0
    67be:	11 24       	eor	r1, r1
    67c0:	13 2f       	mov	r17, r19
    67c2:	13 c0       	rjmp	.+38     	; 0x67ea <vfprintf+0xd0>
    67c4:	4a e0       	ldi	r20, 0x0A	; 10
    67c6:	f4 9e       	mul	r15, r20
    67c8:	30 0d       	add	r19, r0
    67ca:	11 24       	eor	r1, r1
    67cc:	f3 2e       	mov	r15, r19
    67ce:	20 62       	ori	r18, 0x20	; 32
    67d0:	0c c0       	rjmp	.+24     	; 0x67ea <vfprintf+0xd0>
    67d2:	8e 32       	cpi	r24, 0x2E	; 46
    67d4:	21 f4       	brne	.+8      	; 0x67de <vfprintf+0xc4>
    67d6:	26 fd       	sbrc	r18, 6
    67d8:	ee c2       	rjmp	.+1500   	; 0x6db6 <vfprintf+0x69c>
    67da:	20 64       	ori	r18, 0x40	; 64
    67dc:	06 c0       	rjmp	.+12     	; 0x67ea <vfprintf+0xd0>
    67de:	8c 36       	cpi	r24, 0x6C	; 108
    67e0:	11 f4       	brne	.+4      	; 0x67e6 <vfprintf+0xcc>
    67e2:	20 68       	ori	r18, 0x80	; 128
    67e4:	02 c0       	rjmp	.+4      	; 0x67ea <vfprintf+0xd0>
    67e6:	88 36       	cpi	r24, 0x68	; 104
    67e8:	41 f4       	brne	.+16     	; 0x67fa <vfprintf+0xe0>
    67ea:	f4 01       	movw	r30, r8
    67ec:	93 fd       	sbrc	r25, 3
    67ee:	85 91       	lpm	r24, Z+
    67f0:	93 ff       	sbrs	r25, 3
    67f2:	81 91       	ld	r24, Z+
    67f4:	4f 01       	movw	r8, r30
    67f6:	81 11       	cpse	r24, r1
    67f8:	c1 cf       	rjmp	.-126    	; 0x677c <vfprintf+0x62>
    67fa:	9b eb       	ldi	r25, 0xBB	; 187
    67fc:	98 0f       	add	r25, r24
    67fe:	93 30       	cpi	r25, 0x03	; 3
    6800:	18 f4       	brcc	.+6      	; 0x6808 <vfprintf+0xee>
    6802:	20 61       	ori	r18, 0x10	; 16
    6804:	80 5e       	subi	r24, 0xE0	; 224
    6806:	06 c0       	rjmp	.+12     	; 0x6814 <vfprintf+0xfa>
    6808:	9b e9       	ldi	r25, 0x9B	; 155
    680a:	98 0f       	add	r25, r24
    680c:	93 30       	cpi	r25, 0x03	; 3
    680e:	08 f0       	brcs	.+2      	; 0x6812 <vfprintf+0xf8>
    6810:	71 c1       	rjmp	.+738    	; 0x6af4 <vfprintf+0x3da>
    6812:	2f 7e       	andi	r18, 0xEF	; 239
    6814:	26 ff       	sbrs	r18, 6
    6816:	16 e0       	ldi	r17, 0x06	; 6
    6818:	2f 73       	andi	r18, 0x3F	; 63
    681a:	32 2e       	mov	r3, r18
    681c:	85 36       	cpi	r24, 0x65	; 101
    681e:	19 f4       	brne	.+6      	; 0x6826 <vfprintf+0x10c>
    6820:	20 64       	ori	r18, 0x40	; 64
    6822:	32 2e       	mov	r3, r18
    6824:	08 c0       	rjmp	.+16     	; 0x6836 <vfprintf+0x11c>
    6826:	86 36       	cpi	r24, 0x66	; 102
    6828:	21 f4       	brne	.+8      	; 0x6832 <vfprintf+0x118>
    682a:	f2 2f       	mov	r31, r18
    682c:	f0 68       	ori	r31, 0x80	; 128
    682e:	3f 2e       	mov	r3, r31
    6830:	02 c0       	rjmp	.+4      	; 0x6836 <vfprintf+0x11c>
    6832:	11 11       	cpse	r17, r1
    6834:	11 50       	subi	r17, 0x01	; 1
    6836:	37 fe       	sbrs	r3, 7
    6838:	07 c0       	rjmp	.+14     	; 0x6848 <vfprintf+0x12e>
    683a:	1c 33       	cpi	r17, 0x3C	; 60
    683c:	50 f4       	brcc	.+20     	; 0x6852 <vfprintf+0x138>
    683e:	ee 24       	eor	r14, r14
    6840:	e3 94       	inc	r14
    6842:	e1 0e       	add	r14, r17
    6844:	27 e0       	ldi	r18, 0x07	; 7
    6846:	0b c0       	rjmp	.+22     	; 0x685e <vfprintf+0x144>
    6848:	18 30       	cpi	r17, 0x08	; 8
    684a:	38 f0       	brcs	.+14     	; 0x685a <vfprintf+0x140>
    684c:	27 e0       	ldi	r18, 0x07	; 7
    684e:	17 e0       	ldi	r17, 0x07	; 7
    6850:	05 c0       	rjmp	.+10     	; 0x685c <vfprintf+0x142>
    6852:	27 e0       	ldi	r18, 0x07	; 7
    6854:	4c e3       	ldi	r20, 0x3C	; 60
    6856:	e4 2e       	mov	r14, r20
    6858:	02 c0       	rjmp	.+4      	; 0x685e <vfprintf+0x144>
    685a:	21 2f       	mov	r18, r17
    685c:	e1 2c       	mov	r14, r1
    685e:	52 01       	movw	r10, r4
    6860:	44 e0       	ldi	r20, 0x04	; 4
    6862:	a4 0e       	add	r10, r20
    6864:	b1 1c       	adc	r11, r1
    6866:	f2 01       	movw	r30, r4
    6868:	60 81       	ld	r22, Z
    686a:	71 81       	ldd	r23, Z+1	; 0x01
    686c:	82 81       	ldd	r24, Z+2	; 0x02
    686e:	93 81       	ldd	r25, Z+3	; 0x03
    6870:	0e 2d       	mov	r16, r14
    6872:	a3 01       	movw	r20, r6
    6874:	0e 94 c0 3b 	call	0x7780	; 0x7780 <__ftoa_engine>
    6878:	2c 01       	movw	r4, r24
    687a:	09 81       	ldd	r16, Y+1	; 0x01
    687c:	00 ff       	sbrs	r16, 0
    687e:	02 c0       	rjmp	.+4      	; 0x6884 <vfprintf+0x16a>
    6880:	03 ff       	sbrs	r16, 3
    6882:	07 c0       	rjmp	.+14     	; 0x6892 <vfprintf+0x178>
    6884:	31 fc       	sbrc	r3, 1
    6886:	08 c0       	rjmp	.+16     	; 0x6898 <vfprintf+0x17e>
    6888:	32 fe       	sbrs	r3, 2
    688a:	09 c0       	rjmp	.+18     	; 0x689e <vfprintf+0x184>
    688c:	30 e2       	ldi	r19, 0x20	; 32
    688e:	23 2e       	mov	r2, r19
    6890:	07 c0       	rjmp	.+14     	; 0x68a0 <vfprintf+0x186>
    6892:	2d e2       	ldi	r18, 0x2D	; 45
    6894:	22 2e       	mov	r2, r18
    6896:	04 c0       	rjmp	.+8      	; 0x68a0 <vfprintf+0x186>
    6898:	9b e2       	ldi	r25, 0x2B	; 43
    689a:	29 2e       	mov	r2, r25
    689c:	01 c0       	rjmp	.+2      	; 0x68a0 <vfprintf+0x186>
    689e:	21 2c       	mov	r2, r1
    68a0:	80 2f       	mov	r24, r16
    68a2:	8c 70       	andi	r24, 0x0C	; 12
    68a4:	19 f0       	breq	.+6      	; 0x68ac <vfprintf+0x192>
    68a6:	21 10       	cpse	r2, r1
    68a8:	68 c2       	rjmp	.+1232   	; 0x6d7a <vfprintf+0x660>
    68aa:	a8 c2       	rjmp	.+1360   	; 0x6dfc <vfprintf+0x6e2>
    68ac:	37 fe       	sbrs	r3, 7
    68ae:	0f c0       	rjmp	.+30     	; 0x68ce <vfprintf+0x1b4>
    68b0:	e4 0c       	add	r14, r4
    68b2:	04 ff       	sbrs	r16, 4
    68b4:	04 c0       	rjmp	.+8      	; 0x68be <vfprintf+0x1a4>
    68b6:	8a 81       	ldd	r24, Y+2	; 0x02
    68b8:	81 33       	cpi	r24, 0x31	; 49
    68ba:	09 f4       	brne	.+2      	; 0x68be <vfprintf+0x1a4>
    68bc:	ea 94       	dec	r14
    68be:	1e 14       	cp	r1, r14
    68c0:	74 f5       	brge	.+92     	; 0x691e <vfprintf+0x204>
    68c2:	f8 e0       	ldi	r31, 0x08	; 8
    68c4:	fe 15       	cp	r31, r14
    68c6:	78 f5       	brcc	.+94     	; 0x6926 <vfprintf+0x20c>
    68c8:	88 e0       	ldi	r24, 0x08	; 8
    68ca:	e8 2e       	mov	r14, r24
    68cc:	2c c0       	rjmp	.+88     	; 0x6926 <vfprintf+0x20c>
    68ce:	36 fc       	sbrc	r3, 6
    68d0:	2a c0       	rjmp	.+84     	; 0x6926 <vfprintf+0x20c>
    68d2:	81 2f       	mov	r24, r17
    68d4:	90 e0       	ldi	r25, 0x00	; 0
    68d6:	84 15       	cp	r24, r4
    68d8:	95 05       	cpc	r25, r5
    68da:	9c f0       	brlt	.+38     	; 0x6902 <vfprintf+0x1e8>
    68dc:	2c ef       	ldi	r18, 0xFC	; 252
    68de:	42 16       	cp	r4, r18
    68e0:	2f ef       	ldi	r18, 0xFF	; 255
    68e2:	52 06       	cpc	r5, r18
    68e4:	74 f0       	brlt	.+28     	; 0x6902 <vfprintf+0x1e8>
    68e6:	43 2d       	mov	r20, r3
    68e8:	40 68       	ori	r20, 0x80	; 128
    68ea:	34 2e       	mov	r3, r20
    68ec:	0a c0       	rjmp	.+20     	; 0x6902 <vfprintf+0x1e8>
    68ee:	e2 e0       	ldi	r30, 0x02	; 2
    68f0:	f0 e0       	ldi	r31, 0x00	; 0
    68f2:	ec 0f       	add	r30, r28
    68f4:	fd 1f       	adc	r31, r29
    68f6:	e1 0f       	add	r30, r17
    68f8:	f1 1d       	adc	r31, r1
    68fa:	80 81       	ld	r24, Z
    68fc:	80 33       	cpi	r24, 0x30	; 48
    68fe:	19 f4       	brne	.+6      	; 0x6906 <vfprintf+0x1ec>
    6900:	11 50       	subi	r17, 0x01	; 1
    6902:	11 11       	cpse	r17, r1
    6904:	f4 cf       	rjmp	.-24     	; 0x68ee <vfprintf+0x1d4>
    6906:	37 fe       	sbrs	r3, 7
    6908:	0e c0       	rjmp	.+28     	; 0x6926 <vfprintf+0x20c>
    690a:	ee 24       	eor	r14, r14
    690c:	e3 94       	inc	r14
    690e:	e1 0e       	add	r14, r17
    6910:	81 2f       	mov	r24, r17
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	48 16       	cp	r4, r24
    6916:	59 06       	cpc	r5, r25
    6918:	2c f4       	brge	.+10     	; 0x6924 <vfprintf+0x20a>
    691a:	14 19       	sub	r17, r4
    691c:	04 c0       	rjmp	.+8      	; 0x6926 <vfprintf+0x20c>
    691e:	ee 24       	eor	r14, r14
    6920:	e3 94       	inc	r14
    6922:	01 c0       	rjmp	.+2      	; 0x6926 <vfprintf+0x20c>
    6924:	10 e0       	ldi	r17, 0x00	; 0
    6926:	37 fe       	sbrs	r3, 7
    6928:	06 c0       	rjmp	.+12     	; 0x6936 <vfprintf+0x21c>
    692a:	14 14       	cp	r1, r4
    692c:	15 04       	cpc	r1, r5
    692e:	34 f4       	brge	.+12     	; 0x693c <vfprintf+0x222>
    6930:	c2 01       	movw	r24, r4
    6932:	01 96       	adiw	r24, 0x01	; 1
    6934:	05 c0       	rjmp	.+10     	; 0x6940 <vfprintf+0x226>
    6936:	85 e0       	ldi	r24, 0x05	; 5
    6938:	90 e0       	ldi	r25, 0x00	; 0
    693a:	02 c0       	rjmp	.+4      	; 0x6940 <vfprintf+0x226>
    693c:	81 e0       	ldi	r24, 0x01	; 1
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	21 10       	cpse	r2, r1
    6942:	01 96       	adiw	r24, 0x01	; 1
    6944:	11 23       	and	r17, r17
    6946:	31 f0       	breq	.+12     	; 0x6954 <vfprintf+0x23a>
    6948:	21 2f       	mov	r18, r17
    694a:	30 e0       	ldi	r19, 0x00	; 0
    694c:	2f 5f       	subi	r18, 0xFF	; 255
    694e:	3f 4f       	sbci	r19, 0xFF	; 255
    6950:	82 0f       	add	r24, r18
    6952:	93 1f       	adc	r25, r19
    6954:	2f 2d       	mov	r18, r15
    6956:	30 e0       	ldi	r19, 0x00	; 0
    6958:	82 17       	cp	r24, r18
    695a:	93 07       	cpc	r25, r19
    695c:	14 f4       	brge	.+4      	; 0x6962 <vfprintf+0x248>
    695e:	f8 1a       	sub	r15, r24
    6960:	01 c0       	rjmp	.+2      	; 0x6964 <vfprintf+0x24a>
    6962:	f1 2c       	mov	r15, r1
    6964:	83 2d       	mov	r24, r3
    6966:	89 70       	andi	r24, 0x09	; 9
    6968:	49 f4       	brne	.+18     	; 0x697c <vfprintf+0x262>
    696a:	ff 20       	and	r15, r15
    696c:	39 f0       	breq	.+14     	; 0x697c <vfprintf+0x262>
    696e:	b6 01       	movw	r22, r12
    6970:	80 e2       	ldi	r24, 0x20	; 32
    6972:	90 e0       	ldi	r25, 0x00	; 0
    6974:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6978:	fa 94       	dec	r15
    697a:	f7 cf       	rjmp	.-18     	; 0x696a <vfprintf+0x250>
    697c:	22 20       	and	r2, r2
    697e:	29 f0       	breq	.+10     	; 0x698a <vfprintf+0x270>
    6980:	b6 01       	movw	r22, r12
    6982:	82 2d       	mov	r24, r2
    6984:	90 e0       	ldi	r25, 0x00	; 0
    6986:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    698a:	33 fc       	sbrc	r3, 3
    698c:	09 c0       	rjmp	.+18     	; 0x69a0 <vfprintf+0x286>
    698e:	ff 20       	and	r15, r15
    6990:	39 f0       	breq	.+14     	; 0x69a0 <vfprintf+0x286>
    6992:	b6 01       	movw	r22, r12
    6994:	80 e3       	ldi	r24, 0x30	; 48
    6996:	90 e0       	ldi	r25, 0x00	; 0
    6998:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    699c:	fa 94       	dec	r15
    699e:	f7 cf       	rjmp	.-18     	; 0x698e <vfprintf+0x274>
    69a0:	37 fe       	sbrs	r3, 7
    69a2:	5a c0       	rjmp	.+180    	; 0x6a58 <vfprintf+0x33e>
    69a4:	94 2d       	mov	r25, r4
    69a6:	85 2d       	mov	r24, r5
    69a8:	57 fe       	sbrs	r5, 7
    69aa:	02 c0       	rjmp	.+4      	; 0x69b0 <vfprintf+0x296>
    69ac:	90 e0       	ldi	r25, 0x00	; 0
    69ae:	80 e0       	ldi	r24, 0x00	; 0
    69b0:	29 2e       	mov	r2, r25
    69b2:	38 2e       	mov	r3, r24
    69b4:	20 e0       	ldi	r18, 0x00	; 0
    69b6:	30 e0       	ldi	r19, 0x00	; 0
    69b8:	a2 01       	movw	r20, r4
    69ba:	4e 19       	sub	r20, r14
    69bc:	51 09       	sbc	r21, r1
    69be:	5d 87       	std	Y+13, r21	; 0x0d
    69c0:	4c 87       	std	Y+12, r20	; 0x0c
    69c2:	a2 01       	movw	r20, r4
    69c4:	42 19       	sub	r20, r2
    69c6:	53 09       	sbc	r21, r3
    69c8:	5f 87       	std	Y+15, r21	; 0x0f
    69ca:	4e 87       	std	Y+14, r20	; 0x0e
    69cc:	61 2f       	mov	r22, r17
    69ce:	70 e0       	ldi	r23, 0x00	; 0
    69d0:	44 27       	eor	r20, r20
    69d2:	55 27       	eor	r21, r21
    69d4:	46 1b       	sub	r20, r22
    69d6:	57 0b       	sbc	r21, r23
    69d8:	59 8b       	std	Y+17, r21	; 0x11
    69da:	48 8b       	std	Y+16, r20	; 0x10
    69dc:	5f ef       	ldi	r21, 0xFF	; 255
    69de:	25 16       	cp	r2, r21
    69e0:	35 06       	cpc	r3, r21
    69e2:	49 f4       	brne	.+18     	; 0x69f6 <vfprintf+0x2dc>
    69e4:	b6 01       	movw	r22, r12
    69e6:	8e e2       	ldi	r24, 0x2E	; 46
    69e8:	90 e0       	ldi	r25, 0x00	; 0
    69ea:	2a 8b       	std	Y+18, r18	; 0x12
    69ec:	3b 8b       	std	Y+19, r19	; 0x13
    69ee:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    69f2:	3b 89       	ldd	r19, Y+19	; 0x13
    69f4:	2a 89       	ldd	r18, Y+18	; 0x12
    69f6:	42 14       	cp	r4, r2
    69f8:	53 04       	cpc	r5, r3
    69fa:	6c f0       	brlt	.+26     	; 0x6a16 <vfprintf+0x2fc>
    69fc:	4c 85       	ldd	r20, Y+12	; 0x0c
    69fe:	5d 85       	ldd	r21, Y+13	; 0x0d
    6a00:	42 15       	cp	r20, r2
    6a02:	53 05       	cpc	r21, r3
    6a04:	44 f4       	brge	.+16     	; 0x6a16 <vfprintf+0x2fc>
    6a06:	ee 85       	ldd	r30, Y+14	; 0x0e
    6a08:	ff 85       	ldd	r31, Y+15	; 0x0f
    6a0a:	e2 0f       	add	r30, r18
    6a0c:	f3 1f       	adc	r31, r19
    6a0e:	e6 0d       	add	r30, r6
    6a10:	f7 1d       	adc	r31, r7
    6a12:	81 81       	ldd	r24, Z+1	; 0x01
    6a14:	01 c0       	rjmp	.+2      	; 0x6a18 <vfprintf+0x2fe>
    6a16:	80 e3       	ldi	r24, 0x30	; 48
    6a18:	51 e0       	ldi	r21, 0x01	; 1
    6a1a:	25 1a       	sub	r2, r21
    6a1c:	31 08       	sbc	r3, r1
    6a1e:	2f 5f       	subi	r18, 0xFF	; 255
    6a20:	3f 4f       	sbci	r19, 0xFF	; 255
    6a22:	48 89       	ldd	r20, Y+16	; 0x10
    6a24:	59 89       	ldd	r21, Y+17	; 0x11
    6a26:	24 16       	cp	r2, r20
    6a28:	35 06       	cpc	r3, r21
    6a2a:	4c f0       	brlt	.+18     	; 0x6a3e <vfprintf+0x324>
    6a2c:	b6 01       	movw	r22, r12
    6a2e:	90 e0       	ldi	r25, 0x00	; 0
    6a30:	2a 8b       	std	Y+18, r18	; 0x12
    6a32:	3b 8b       	std	Y+19, r19	; 0x13
    6a34:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6a38:	2a 89       	ldd	r18, Y+18	; 0x12
    6a3a:	3b 89       	ldd	r19, Y+19	; 0x13
    6a3c:	cf cf       	rjmp	.-98     	; 0x69dc <vfprintf+0x2c2>
    6a3e:	24 14       	cp	r2, r4
    6a40:	35 04       	cpc	r3, r5
    6a42:	39 f4       	brne	.+14     	; 0x6a52 <vfprintf+0x338>
    6a44:	9a 81       	ldd	r25, Y+2	; 0x02
    6a46:	96 33       	cpi	r25, 0x36	; 54
    6a48:	18 f4       	brcc	.+6      	; 0x6a50 <vfprintf+0x336>
    6a4a:	95 33       	cpi	r25, 0x35	; 53
    6a4c:	11 f4       	brne	.+4      	; 0x6a52 <vfprintf+0x338>
    6a4e:	04 ff       	sbrs	r16, 4
    6a50:	81 e3       	ldi	r24, 0x31	; 49
    6a52:	b6 01       	movw	r22, r12
    6a54:	90 e0       	ldi	r25, 0x00	; 0
    6a56:	4b c0       	rjmp	.+150    	; 0x6aee <vfprintf+0x3d4>
    6a58:	8a 81       	ldd	r24, Y+2	; 0x02
    6a5a:	81 33       	cpi	r24, 0x31	; 49
    6a5c:	09 f0       	breq	.+2      	; 0x6a60 <vfprintf+0x346>
    6a5e:	0f 7e       	andi	r16, 0xEF	; 239
    6a60:	b6 01       	movw	r22, r12
    6a62:	90 e0       	ldi	r25, 0x00	; 0
    6a64:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6a68:	11 11       	cpse	r17, r1
    6a6a:	05 c0       	rjmp	.+10     	; 0x6a76 <vfprintf+0x35c>
    6a6c:	34 fc       	sbrc	r3, 4
    6a6e:	18 c0       	rjmp	.+48     	; 0x6aa0 <vfprintf+0x386>
    6a70:	85 e6       	ldi	r24, 0x65	; 101
    6a72:	90 e0       	ldi	r25, 0x00	; 0
    6a74:	17 c0       	rjmp	.+46     	; 0x6aa4 <vfprintf+0x38a>
    6a76:	b6 01       	movw	r22, r12
    6a78:	8e e2       	ldi	r24, 0x2E	; 46
    6a7a:	90 e0       	ldi	r25, 0x00	; 0
    6a7c:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6a80:	82 e0       	ldi	r24, 0x02	; 2
    6a82:	ee 24       	eor	r14, r14
    6a84:	e3 94       	inc	r14
    6a86:	e8 0e       	add	r14, r24
    6a88:	f3 01       	movw	r30, r6
    6a8a:	e8 0f       	add	r30, r24
    6a8c:	f1 1d       	adc	r31, r1
    6a8e:	80 81       	ld	r24, Z
    6a90:	b6 01       	movw	r22, r12
    6a92:	90 e0       	ldi	r25, 0x00	; 0
    6a94:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6a98:	11 50       	subi	r17, 0x01	; 1
    6a9a:	8e 2d       	mov	r24, r14
    6a9c:	91 f7       	brne	.-28     	; 0x6a82 <vfprintf+0x368>
    6a9e:	e6 cf       	rjmp	.-52     	; 0x6a6c <vfprintf+0x352>
    6aa0:	85 e4       	ldi	r24, 0x45	; 69
    6aa2:	90 e0       	ldi	r25, 0x00	; 0
    6aa4:	b6 01       	movw	r22, r12
    6aa6:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6aaa:	57 fc       	sbrc	r5, 7
    6aac:	05 c0       	rjmp	.+10     	; 0x6ab8 <vfprintf+0x39e>
    6aae:	41 14       	cp	r4, r1
    6ab0:	51 04       	cpc	r5, r1
    6ab2:	39 f4       	brne	.+14     	; 0x6ac2 <vfprintf+0x3a8>
    6ab4:	04 ff       	sbrs	r16, 4
    6ab6:	05 c0       	rjmp	.+10     	; 0x6ac2 <vfprintf+0x3a8>
    6ab8:	51 94       	neg	r5
    6aba:	41 94       	neg	r4
    6abc:	51 08       	sbc	r5, r1
    6abe:	8d e2       	ldi	r24, 0x2D	; 45
    6ac0:	01 c0       	rjmp	.+2      	; 0x6ac4 <vfprintf+0x3aa>
    6ac2:	8b e2       	ldi	r24, 0x2B	; 43
    6ac4:	b6 01       	movw	r22, r12
    6ac6:	90 e0       	ldi	r25, 0x00	; 0
    6ac8:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6acc:	80 e3       	ldi	r24, 0x30	; 48
    6ace:	9a e0       	ldi	r25, 0x0A	; 10
    6ad0:	49 16       	cp	r4, r25
    6ad2:	51 04       	cpc	r5, r1
    6ad4:	2c f0       	brlt	.+10     	; 0x6ae0 <vfprintf+0x3c6>
    6ad6:	8f 5f       	subi	r24, 0xFF	; 255
    6ad8:	5a e0       	ldi	r21, 0x0A	; 10
    6ada:	45 1a       	sub	r4, r21
    6adc:	51 08       	sbc	r5, r1
    6ade:	f7 cf       	rjmp	.-18     	; 0x6ace <vfprintf+0x3b4>
    6ae0:	b6 01       	movw	r22, r12
    6ae2:	90 e0       	ldi	r25, 0x00	; 0
    6ae4:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6ae8:	b6 01       	movw	r22, r12
    6aea:	c2 01       	movw	r24, r4
    6aec:	c0 96       	adiw	r24, 0x30	; 48
    6aee:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6af2:	57 c1       	rjmp	.+686    	; 0x6da2 <vfprintf+0x688>
    6af4:	83 36       	cpi	r24, 0x63	; 99
    6af6:	31 f0       	breq	.+12     	; 0x6b04 <vfprintf+0x3ea>
    6af8:	83 37       	cpi	r24, 0x73	; 115
    6afa:	79 f0       	breq	.+30     	; 0x6b1a <vfprintf+0x400>
    6afc:	83 35       	cpi	r24, 0x53	; 83
    6afe:	09 f0       	breq	.+2      	; 0x6b02 <vfprintf+0x3e8>
    6b00:	58 c0       	rjmp	.+176    	; 0x6bb2 <vfprintf+0x498>
    6b02:	21 c0       	rjmp	.+66     	; 0x6b46 <vfprintf+0x42c>
    6b04:	52 01       	movw	r10, r4
    6b06:	e2 e0       	ldi	r30, 0x02	; 2
    6b08:	ae 0e       	add	r10, r30
    6b0a:	b1 1c       	adc	r11, r1
    6b0c:	f2 01       	movw	r30, r4
    6b0e:	80 81       	ld	r24, Z
    6b10:	89 83       	std	Y+1, r24	; 0x01
    6b12:	01 e0       	ldi	r16, 0x01	; 1
    6b14:	10 e0       	ldi	r17, 0x00	; 0
    6b16:	23 01       	movw	r4, r6
    6b18:	14 c0       	rjmp	.+40     	; 0x6b42 <vfprintf+0x428>
    6b1a:	52 01       	movw	r10, r4
    6b1c:	f2 e0       	ldi	r31, 0x02	; 2
    6b1e:	af 0e       	add	r10, r31
    6b20:	b1 1c       	adc	r11, r1
    6b22:	f2 01       	movw	r30, r4
    6b24:	40 80       	ld	r4, Z
    6b26:	51 80       	ldd	r5, Z+1	; 0x01
    6b28:	26 ff       	sbrs	r18, 6
    6b2a:	03 c0       	rjmp	.+6      	; 0x6b32 <vfprintf+0x418>
    6b2c:	61 2f       	mov	r22, r17
    6b2e:	70 e0       	ldi	r23, 0x00	; 0
    6b30:	02 c0       	rjmp	.+4      	; 0x6b36 <vfprintf+0x41c>
    6b32:	6f ef       	ldi	r22, 0xFF	; 255
    6b34:	7f ef       	ldi	r23, 0xFF	; 255
    6b36:	c2 01       	movw	r24, r4
    6b38:	2a 8b       	std	Y+18, r18	; 0x12
    6b3a:	0e 94 e3 3c 	call	0x79c6	; 0x79c6 <strnlen>
    6b3e:	8c 01       	movw	r16, r24
    6b40:	2a 89       	ldd	r18, Y+18	; 0x12
    6b42:	2f 77       	andi	r18, 0x7F	; 127
    6b44:	15 c0       	rjmp	.+42     	; 0x6b70 <vfprintf+0x456>
    6b46:	52 01       	movw	r10, r4
    6b48:	f2 e0       	ldi	r31, 0x02	; 2
    6b4a:	af 0e       	add	r10, r31
    6b4c:	b1 1c       	adc	r11, r1
    6b4e:	f2 01       	movw	r30, r4
    6b50:	40 80       	ld	r4, Z
    6b52:	51 80       	ldd	r5, Z+1	; 0x01
    6b54:	26 ff       	sbrs	r18, 6
    6b56:	03 c0       	rjmp	.+6      	; 0x6b5e <vfprintf+0x444>
    6b58:	61 2f       	mov	r22, r17
    6b5a:	70 e0       	ldi	r23, 0x00	; 0
    6b5c:	02 c0       	rjmp	.+4      	; 0x6b62 <vfprintf+0x448>
    6b5e:	6f ef       	ldi	r22, 0xFF	; 255
    6b60:	7f ef       	ldi	r23, 0xFF	; 255
    6b62:	c2 01       	movw	r24, r4
    6b64:	2a 8b       	std	Y+18, r18	; 0x12
    6b66:	0e 94 b4 3c 	call	0x7968	; 0x7968 <strnlen_P>
    6b6a:	8c 01       	movw	r16, r24
    6b6c:	2a 89       	ldd	r18, Y+18	; 0x12
    6b6e:	20 68       	ori	r18, 0x80	; 128
    6b70:	32 2e       	mov	r3, r18
    6b72:	23 fd       	sbrc	r18, 3
    6b74:	1a c0       	rjmp	.+52     	; 0x6baa <vfprintf+0x490>
    6b76:	8f 2d       	mov	r24, r15
    6b78:	90 e0       	ldi	r25, 0x00	; 0
    6b7a:	08 17       	cp	r16, r24
    6b7c:	19 07       	cpc	r17, r25
    6b7e:	a8 f4       	brcc	.+42     	; 0x6baa <vfprintf+0x490>
    6b80:	b6 01       	movw	r22, r12
    6b82:	80 e2       	ldi	r24, 0x20	; 32
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6b8a:	fa 94       	dec	r15
    6b8c:	f4 cf       	rjmp	.-24     	; 0x6b76 <vfprintf+0x45c>
    6b8e:	f2 01       	movw	r30, r4
    6b90:	37 fc       	sbrc	r3, 7
    6b92:	85 91       	lpm	r24, Z+
    6b94:	37 fe       	sbrs	r3, 7
    6b96:	81 91       	ld	r24, Z+
    6b98:	2f 01       	movw	r4, r30
    6b9a:	b6 01       	movw	r22, r12
    6b9c:	90 e0       	ldi	r25, 0x00	; 0
    6b9e:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6ba2:	f1 10       	cpse	r15, r1
    6ba4:	fa 94       	dec	r15
    6ba6:	01 50       	subi	r16, 0x01	; 1
    6ba8:	11 09       	sbc	r17, r1
    6baa:	01 15       	cp	r16, r1
    6bac:	11 05       	cpc	r17, r1
    6bae:	79 f7       	brne	.-34     	; 0x6b8e <vfprintf+0x474>
    6bb0:	f8 c0       	rjmp	.+496    	; 0x6da2 <vfprintf+0x688>
    6bb2:	84 36       	cpi	r24, 0x64	; 100
    6bb4:	11 f0       	breq	.+4      	; 0x6bba <vfprintf+0x4a0>
    6bb6:	89 36       	cpi	r24, 0x69	; 105
    6bb8:	59 f5       	brne	.+86     	; 0x6c10 <vfprintf+0x4f6>
    6bba:	52 01       	movw	r10, r4
    6bbc:	27 ff       	sbrs	r18, 7
    6bbe:	09 c0       	rjmp	.+18     	; 0x6bd2 <vfprintf+0x4b8>
    6bc0:	f4 e0       	ldi	r31, 0x04	; 4
    6bc2:	af 0e       	add	r10, r31
    6bc4:	b1 1c       	adc	r11, r1
    6bc6:	f2 01       	movw	r30, r4
    6bc8:	60 81       	ld	r22, Z
    6bca:	71 81       	ldd	r23, Z+1	; 0x01
    6bcc:	82 81       	ldd	r24, Z+2	; 0x02
    6bce:	93 81       	ldd	r25, Z+3	; 0x03
    6bd0:	0a c0       	rjmp	.+20     	; 0x6be6 <vfprintf+0x4cc>
    6bd2:	f2 e0       	ldi	r31, 0x02	; 2
    6bd4:	af 0e       	add	r10, r31
    6bd6:	b1 1c       	adc	r11, r1
    6bd8:	f2 01       	movw	r30, r4
    6bda:	60 81       	ld	r22, Z
    6bdc:	71 81       	ldd	r23, Z+1	; 0x01
    6bde:	07 2e       	mov	r0, r23
    6be0:	00 0c       	add	r0, r0
    6be2:	88 0b       	sbc	r24, r24
    6be4:	99 0b       	sbc	r25, r25
    6be6:	2f 76       	andi	r18, 0x6F	; 111
    6be8:	32 2e       	mov	r3, r18
    6bea:	97 ff       	sbrs	r25, 7
    6bec:	09 c0       	rjmp	.+18     	; 0x6c00 <vfprintf+0x4e6>
    6bee:	90 95       	com	r25
    6bf0:	80 95       	com	r24
    6bf2:	70 95       	com	r23
    6bf4:	61 95       	neg	r22
    6bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    6bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    6bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    6bfc:	20 68       	ori	r18, 0x80	; 128
    6bfe:	32 2e       	mov	r3, r18
    6c00:	2a e0       	ldi	r18, 0x0A	; 10
    6c02:	30 e0       	ldi	r19, 0x00	; 0
    6c04:	a3 01       	movw	r20, r6
    6c06:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__ultoa_invert>
    6c0a:	e8 2e       	mov	r14, r24
    6c0c:	e6 18       	sub	r14, r6
    6c0e:	3f c0       	rjmp	.+126    	; 0x6c8e <vfprintf+0x574>
    6c10:	02 2f       	mov	r16, r18
    6c12:	85 37       	cpi	r24, 0x75	; 117
    6c14:	21 f4       	brne	.+8      	; 0x6c1e <vfprintf+0x504>
    6c16:	0f 7e       	andi	r16, 0xEF	; 239
    6c18:	2a e0       	ldi	r18, 0x0A	; 10
    6c1a:	30 e0       	ldi	r19, 0x00	; 0
    6c1c:	1d c0       	rjmp	.+58     	; 0x6c58 <vfprintf+0x53e>
    6c1e:	09 7f       	andi	r16, 0xF9	; 249
    6c20:	8f 36       	cpi	r24, 0x6F	; 111
    6c22:	91 f0       	breq	.+36     	; 0x6c48 <vfprintf+0x52e>
    6c24:	18 f4       	brcc	.+6      	; 0x6c2c <vfprintf+0x512>
    6c26:	88 35       	cpi	r24, 0x58	; 88
    6c28:	59 f0       	breq	.+22     	; 0x6c40 <vfprintf+0x526>
    6c2a:	c5 c0       	rjmp	.+394    	; 0x6db6 <vfprintf+0x69c>
    6c2c:	80 37       	cpi	r24, 0x70	; 112
    6c2e:	19 f0       	breq	.+6      	; 0x6c36 <vfprintf+0x51c>
    6c30:	88 37       	cpi	r24, 0x78	; 120
    6c32:	11 f0       	breq	.+4      	; 0x6c38 <vfprintf+0x51e>
    6c34:	c0 c0       	rjmp	.+384    	; 0x6db6 <vfprintf+0x69c>
    6c36:	00 61       	ori	r16, 0x10	; 16
    6c38:	04 ff       	sbrs	r16, 4
    6c3a:	09 c0       	rjmp	.+18     	; 0x6c4e <vfprintf+0x534>
    6c3c:	04 60       	ori	r16, 0x04	; 4
    6c3e:	07 c0       	rjmp	.+14     	; 0x6c4e <vfprintf+0x534>
    6c40:	24 ff       	sbrs	r18, 4
    6c42:	08 c0       	rjmp	.+16     	; 0x6c54 <vfprintf+0x53a>
    6c44:	06 60       	ori	r16, 0x06	; 6
    6c46:	06 c0       	rjmp	.+12     	; 0x6c54 <vfprintf+0x53a>
    6c48:	28 e0       	ldi	r18, 0x08	; 8
    6c4a:	30 e0       	ldi	r19, 0x00	; 0
    6c4c:	05 c0       	rjmp	.+10     	; 0x6c58 <vfprintf+0x53e>
    6c4e:	20 e1       	ldi	r18, 0x10	; 16
    6c50:	30 e0       	ldi	r19, 0x00	; 0
    6c52:	02 c0       	rjmp	.+4      	; 0x6c58 <vfprintf+0x53e>
    6c54:	20 e1       	ldi	r18, 0x10	; 16
    6c56:	32 e0       	ldi	r19, 0x02	; 2
    6c58:	52 01       	movw	r10, r4
    6c5a:	07 ff       	sbrs	r16, 7
    6c5c:	09 c0       	rjmp	.+18     	; 0x6c70 <vfprintf+0x556>
    6c5e:	f4 e0       	ldi	r31, 0x04	; 4
    6c60:	af 0e       	add	r10, r31
    6c62:	b1 1c       	adc	r11, r1
    6c64:	f2 01       	movw	r30, r4
    6c66:	60 81       	ld	r22, Z
    6c68:	71 81       	ldd	r23, Z+1	; 0x01
    6c6a:	82 81       	ldd	r24, Z+2	; 0x02
    6c6c:	93 81       	ldd	r25, Z+3	; 0x03
    6c6e:	08 c0       	rjmp	.+16     	; 0x6c80 <vfprintf+0x566>
    6c70:	f2 e0       	ldi	r31, 0x02	; 2
    6c72:	af 0e       	add	r10, r31
    6c74:	b1 1c       	adc	r11, r1
    6c76:	f2 01       	movw	r30, r4
    6c78:	60 81       	ld	r22, Z
    6c7a:	71 81       	ldd	r23, Z+1	; 0x01
    6c7c:	80 e0       	ldi	r24, 0x00	; 0
    6c7e:	90 e0       	ldi	r25, 0x00	; 0
    6c80:	a3 01       	movw	r20, r6
    6c82:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <__ultoa_invert>
    6c86:	e8 2e       	mov	r14, r24
    6c88:	e6 18       	sub	r14, r6
    6c8a:	0f 77       	andi	r16, 0x7F	; 127
    6c8c:	30 2e       	mov	r3, r16
    6c8e:	36 fe       	sbrs	r3, 6
    6c90:	0b c0       	rjmp	.+22     	; 0x6ca8 <vfprintf+0x58e>
    6c92:	33 2d       	mov	r19, r3
    6c94:	3e 7f       	andi	r19, 0xFE	; 254
    6c96:	e1 16       	cp	r14, r17
    6c98:	50 f4       	brcc	.+20     	; 0x6cae <vfprintf+0x594>
    6c9a:	34 fe       	sbrs	r3, 4
    6c9c:	0a c0       	rjmp	.+20     	; 0x6cb2 <vfprintf+0x598>
    6c9e:	32 fc       	sbrc	r3, 2
    6ca0:	08 c0       	rjmp	.+16     	; 0x6cb2 <vfprintf+0x598>
    6ca2:	33 2d       	mov	r19, r3
    6ca4:	3e 7e       	andi	r19, 0xEE	; 238
    6ca6:	05 c0       	rjmp	.+10     	; 0x6cb2 <vfprintf+0x598>
    6ca8:	0e 2d       	mov	r16, r14
    6caa:	33 2d       	mov	r19, r3
    6cac:	03 c0       	rjmp	.+6      	; 0x6cb4 <vfprintf+0x59a>
    6cae:	0e 2d       	mov	r16, r14
    6cb0:	01 c0       	rjmp	.+2      	; 0x6cb4 <vfprintf+0x59a>
    6cb2:	01 2f       	mov	r16, r17
    6cb4:	34 ff       	sbrs	r19, 4
    6cb6:	0c c0       	rjmp	.+24     	; 0x6cd0 <vfprintf+0x5b6>
    6cb8:	fe 01       	movw	r30, r28
    6cba:	ee 0d       	add	r30, r14
    6cbc:	f1 1d       	adc	r31, r1
    6cbe:	80 81       	ld	r24, Z
    6cc0:	80 33       	cpi	r24, 0x30	; 48
    6cc2:	11 f4       	brne	.+4      	; 0x6cc8 <vfprintf+0x5ae>
    6cc4:	39 7e       	andi	r19, 0xE9	; 233
    6cc6:	08 c0       	rjmp	.+16     	; 0x6cd8 <vfprintf+0x5be>
    6cc8:	32 ff       	sbrs	r19, 2
    6cca:	05 c0       	rjmp	.+10     	; 0x6cd6 <vfprintf+0x5bc>
    6ccc:	0e 5f       	subi	r16, 0xFE	; 254
    6cce:	04 c0       	rjmp	.+8      	; 0x6cd8 <vfprintf+0x5be>
    6cd0:	83 2f       	mov	r24, r19
    6cd2:	86 78       	andi	r24, 0x86	; 134
    6cd4:	09 f0       	breq	.+2      	; 0x6cd8 <vfprintf+0x5be>
    6cd6:	0f 5f       	subi	r16, 0xFF	; 255
    6cd8:	33 fd       	sbrc	r19, 3
    6cda:	13 c0       	rjmp	.+38     	; 0x6d02 <vfprintf+0x5e8>
    6cdc:	30 ff       	sbrs	r19, 0
    6cde:	06 c0       	rjmp	.+12     	; 0x6cec <vfprintf+0x5d2>
    6ce0:	1e 2d       	mov	r17, r14
    6ce2:	0f 15       	cp	r16, r15
    6ce4:	18 f4       	brcc	.+6      	; 0x6cec <vfprintf+0x5d2>
    6ce6:	1f 0d       	add	r17, r15
    6ce8:	10 1b       	sub	r17, r16
    6cea:	0f 2d       	mov	r16, r15
    6cec:	0f 15       	cp	r16, r15
    6cee:	68 f4       	brcc	.+26     	; 0x6d0a <vfprintf+0x5f0>
    6cf0:	b6 01       	movw	r22, r12
    6cf2:	80 e2       	ldi	r24, 0x20	; 32
    6cf4:	90 e0       	ldi	r25, 0x00	; 0
    6cf6:	3b 8b       	std	Y+19, r19	; 0x13
    6cf8:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6cfc:	0f 5f       	subi	r16, 0xFF	; 255
    6cfe:	3b 89       	ldd	r19, Y+19	; 0x13
    6d00:	f5 cf       	rjmp	.-22     	; 0x6cec <vfprintf+0x5d2>
    6d02:	0f 15       	cp	r16, r15
    6d04:	10 f4       	brcc	.+4      	; 0x6d0a <vfprintf+0x5f0>
    6d06:	f0 1a       	sub	r15, r16
    6d08:	01 c0       	rjmp	.+2      	; 0x6d0c <vfprintf+0x5f2>
    6d0a:	f1 2c       	mov	r15, r1
    6d0c:	34 ff       	sbrs	r19, 4
    6d0e:	12 c0       	rjmp	.+36     	; 0x6d34 <vfprintf+0x61a>
    6d10:	b6 01       	movw	r22, r12
    6d12:	80 e3       	ldi	r24, 0x30	; 48
    6d14:	90 e0       	ldi	r25, 0x00	; 0
    6d16:	3b 8b       	std	Y+19, r19	; 0x13
    6d18:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6d1c:	3b 89       	ldd	r19, Y+19	; 0x13
    6d1e:	32 ff       	sbrs	r19, 2
    6d20:	17 c0       	rjmp	.+46     	; 0x6d50 <vfprintf+0x636>
    6d22:	31 fd       	sbrc	r19, 1
    6d24:	03 c0       	rjmp	.+6      	; 0x6d2c <vfprintf+0x612>
    6d26:	88 e7       	ldi	r24, 0x78	; 120
    6d28:	90 e0       	ldi	r25, 0x00	; 0
    6d2a:	02 c0       	rjmp	.+4      	; 0x6d30 <vfprintf+0x616>
    6d2c:	88 e5       	ldi	r24, 0x58	; 88
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	b6 01       	movw	r22, r12
    6d32:	0c c0       	rjmp	.+24     	; 0x6d4c <vfprintf+0x632>
    6d34:	83 2f       	mov	r24, r19
    6d36:	86 78       	andi	r24, 0x86	; 134
    6d38:	59 f0       	breq	.+22     	; 0x6d50 <vfprintf+0x636>
    6d3a:	31 ff       	sbrs	r19, 1
    6d3c:	02 c0       	rjmp	.+4      	; 0x6d42 <vfprintf+0x628>
    6d3e:	8b e2       	ldi	r24, 0x2B	; 43
    6d40:	01 c0       	rjmp	.+2      	; 0x6d44 <vfprintf+0x62a>
    6d42:	80 e2       	ldi	r24, 0x20	; 32
    6d44:	37 fd       	sbrc	r19, 7
    6d46:	8d e2       	ldi	r24, 0x2D	; 45
    6d48:	b6 01       	movw	r22, r12
    6d4a:	90 e0       	ldi	r25, 0x00	; 0
    6d4c:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6d50:	e1 16       	cp	r14, r17
    6d52:	38 f4       	brcc	.+14     	; 0x6d62 <vfprintf+0x648>
    6d54:	b6 01       	movw	r22, r12
    6d56:	80 e3       	ldi	r24, 0x30	; 48
    6d58:	90 e0       	ldi	r25, 0x00	; 0
    6d5a:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6d5e:	11 50       	subi	r17, 0x01	; 1
    6d60:	f7 cf       	rjmp	.-18     	; 0x6d50 <vfprintf+0x636>
    6d62:	ea 94       	dec	r14
    6d64:	f3 01       	movw	r30, r6
    6d66:	ee 0d       	add	r30, r14
    6d68:	f1 1d       	adc	r31, r1
    6d6a:	80 81       	ld	r24, Z
    6d6c:	b6 01       	movw	r22, r12
    6d6e:	90 e0       	ldi	r25, 0x00	; 0
    6d70:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6d74:	e1 10       	cpse	r14, r1
    6d76:	f5 cf       	rjmp	.-22     	; 0x6d62 <vfprintf+0x648>
    6d78:	14 c0       	rjmp	.+40     	; 0x6da2 <vfprintf+0x688>
    6d7a:	f4 e0       	ldi	r31, 0x04	; 4
    6d7c:	ff 15       	cp	r31, r15
    6d7e:	58 f5       	brcc	.+86     	; 0x6dd6 <vfprintf+0x6bc>
    6d80:	84 e0       	ldi	r24, 0x04	; 4
    6d82:	f8 1a       	sub	r15, r24
    6d84:	33 fe       	sbrs	r3, 3
    6d86:	1e c0       	rjmp	.+60     	; 0x6dc4 <vfprintf+0x6aa>
    6d88:	21 10       	cpse	r2, r1
    6d8a:	26 c0       	rjmp	.+76     	; 0x6dd8 <vfprintf+0x6be>
    6d8c:	03 ff       	sbrs	r16, 3
    6d8e:	2a c0       	rjmp	.+84     	; 0x6de4 <vfprintf+0x6ca>
    6d90:	06 ea       	ldi	r16, 0xA6	; 166
    6d92:	11 e0       	ldi	r17, 0x01	; 1
    6d94:	f3 2d       	mov	r31, r3
    6d96:	f0 71       	andi	r31, 0x10	; 16
    6d98:	3f 2e       	mov	r3, r31
    6d9a:	f8 01       	movw	r30, r16
    6d9c:	84 91       	lpm	r24, Z
    6d9e:	81 11       	cpse	r24, r1
    6da0:	24 c0       	rjmp	.+72     	; 0x6dea <vfprintf+0x6d0>
    6da2:	ff 20       	and	r15, r15
    6da4:	09 f4       	brne	.+2      	; 0x6da8 <vfprintf+0x68e>
    6da6:	e5 cc       	rjmp	.-1590   	; 0x6772 <vfprintf+0x58>
    6da8:	b6 01       	movw	r22, r12
    6daa:	80 e2       	ldi	r24, 0x20	; 32
    6dac:	90 e0       	ldi	r25, 0x00	; 0
    6dae:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6db2:	fa 94       	dec	r15
    6db4:	f6 cf       	rjmp	.-20     	; 0x6da2 <vfprintf+0x688>
    6db6:	f6 01       	movw	r30, r12
    6db8:	86 81       	ldd	r24, Z+6	; 0x06
    6dba:	97 81       	ldd	r25, Z+7	; 0x07
    6dbc:	26 c0       	rjmp	.+76     	; 0x6e0a <vfprintf+0x6f0>
    6dbe:	8f ef       	ldi	r24, 0xFF	; 255
    6dc0:	9f ef       	ldi	r25, 0xFF	; 255
    6dc2:	23 c0       	rjmp	.+70     	; 0x6e0a <vfprintf+0x6f0>
    6dc4:	b6 01       	movw	r22, r12
    6dc6:	80 e2       	ldi	r24, 0x20	; 32
    6dc8:	90 e0       	ldi	r25, 0x00	; 0
    6dca:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6dce:	fa 94       	dec	r15
    6dd0:	f1 10       	cpse	r15, r1
    6dd2:	f8 cf       	rjmp	.-16     	; 0x6dc4 <vfprintf+0x6aa>
    6dd4:	d9 cf       	rjmp	.-78     	; 0x6d88 <vfprintf+0x66e>
    6dd6:	f1 2c       	mov	r15, r1
    6dd8:	b6 01       	movw	r22, r12
    6dda:	82 2d       	mov	r24, r2
    6ddc:	90 e0       	ldi	r25, 0x00	; 0
    6dde:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6de2:	d4 cf       	rjmp	.-88     	; 0x6d8c <vfprintf+0x672>
    6de4:	0a ea       	ldi	r16, 0xAA	; 170
    6de6:	11 e0       	ldi	r17, 0x01	; 1
    6de8:	d5 cf       	rjmp	.-86     	; 0x6d94 <vfprintf+0x67a>
    6dea:	31 10       	cpse	r3, r1
    6dec:	80 52       	subi	r24, 0x20	; 32
    6dee:	b6 01       	movw	r22, r12
    6df0:	90 e0       	ldi	r25, 0x00	; 0
    6df2:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fputc>
    6df6:	0f 5f       	subi	r16, 0xFF	; 255
    6df8:	1f 4f       	sbci	r17, 0xFF	; 255
    6dfa:	cf cf       	rjmp	.-98     	; 0x6d9a <vfprintf+0x680>
    6dfc:	23 e0       	ldi	r18, 0x03	; 3
    6dfe:	2f 15       	cp	r18, r15
    6e00:	10 f4       	brcc	.+4      	; 0x6e06 <vfprintf+0x6ec>
    6e02:	83 e0       	ldi	r24, 0x03	; 3
    6e04:	be cf       	rjmp	.-132    	; 0x6d82 <vfprintf+0x668>
    6e06:	f1 2c       	mov	r15, r1
    6e08:	c1 cf       	rjmp	.-126    	; 0x6d8c <vfprintf+0x672>
    6e0a:	63 96       	adiw	r28, 0x13	; 19
    6e0c:	e2 e1       	ldi	r30, 0x12	; 18
    6e0e:	0c 94 91 3b 	jmp	0x7722	; 0x7722 <__epilogue_restores__>

00006e12 <putval>:
    6e12:	20 fd       	sbrc	r18, 0
    6e14:	09 c0       	rjmp	.+18     	; 0x6e28 <putval+0x16>
    6e16:	fc 01       	movw	r30, r24
    6e18:	23 fd       	sbrc	r18, 3
    6e1a:	05 c0       	rjmp	.+10     	; 0x6e26 <putval+0x14>
    6e1c:	22 ff       	sbrs	r18, 2
    6e1e:	02 c0       	rjmp	.+4      	; 0x6e24 <putval+0x12>
    6e20:	73 83       	std	Z+3, r23	; 0x03
    6e22:	62 83       	std	Z+2, r22	; 0x02
    6e24:	51 83       	std	Z+1, r21	; 0x01
    6e26:	40 83       	st	Z, r20
    6e28:	08 95       	ret

00006e2a <mulacc>:
    6e2a:	44 fd       	sbrc	r20, 4
    6e2c:	10 c0       	rjmp	.+32     	; 0x6e4e <mulacc+0x24>
    6e2e:	46 fd       	sbrc	r20, 6
    6e30:	10 c0       	rjmp	.+32     	; 0x6e52 <mulacc+0x28>
    6e32:	db 01       	movw	r26, r22
    6e34:	fc 01       	movw	r30, r24
    6e36:	aa 0f       	add	r26, r26
    6e38:	bb 1f       	adc	r27, r27
    6e3a:	ee 1f       	adc	r30, r30
    6e3c:	ff 1f       	adc	r31, r31
    6e3e:	10 94       	com	r1
    6e40:	d1 f7       	brne	.-12     	; 0x6e36 <mulacc+0xc>
    6e42:	6a 0f       	add	r22, r26
    6e44:	7b 1f       	adc	r23, r27
    6e46:	8e 1f       	adc	r24, r30
    6e48:	9f 1f       	adc	r25, r31
    6e4a:	31 e0       	ldi	r19, 0x01	; 1
    6e4c:	03 c0       	rjmp	.+6      	; 0x6e54 <mulacc+0x2a>
    6e4e:	33 e0       	ldi	r19, 0x03	; 3
    6e50:	01 c0       	rjmp	.+2      	; 0x6e54 <mulacc+0x2a>
    6e52:	34 e0       	ldi	r19, 0x04	; 4
    6e54:	66 0f       	add	r22, r22
    6e56:	77 1f       	adc	r23, r23
    6e58:	88 1f       	adc	r24, r24
    6e5a:	99 1f       	adc	r25, r25
    6e5c:	31 50       	subi	r19, 0x01	; 1
    6e5e:	d1 f7       	brne	.-12     	; 0x6e54 <mulacc+0x2a>
    6e60:	62 0f       	add	r22, r18
    6e62:	71 1d       	adc	r23, r1
    6e64:	81 1d       	adc	r24, r1
    6e66:	91 1d       	adc	r25, r1
    6e68:	08 95       	ret

00006e6a <skip_spaces>:
    6e6a:	0f 93       	push	r16
    6e6c:	1f 93       	push	r17
    6e6e:	cf 93       	push	r28
    6e70:	df 93       	push	r29
    6e72:	8c 01       	movw	r16, r24
    6e74:	c8 01       	movw	r24, r16
    6e76:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    6e7a:	ec 01       	movw	r28, r24
    6e7c:	97 fd       	sbrc	r25, 7
    6e7e:	08 c0       	rjmp	.+16     	; 0x6e90 <skip_spaces+0x26>
    6e80:	0e 94 98 3c 	call	0x7930	; 0x7930 <isspace>
    6e84:	89 2b       	or	r24, r25
    6e86:	b1 f7       	brne	.-20     	; 0x6e74 <skip_spaces+0xa>
    6e88:	b8 01       	movw	r22, r16
    6e8a:	ce 01       	movw	r24, r28
    6e8c:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <ungetc>
    6e90:	ce 01       	movw	r24, r28
    6e92:	df 91       	pop	r29
    6e94:	cf 91       	pop	r28
    6e96:	1f 91       	pop	r17
    6e98:	0f 91       	pop	r16
    6e9a:	08 95       	ret

00006e9c <conv_int>:
    6e9c:	a0 e0       	ldi	r26, 0x00	; 0
    6e9e:	b0 e0       	ldi	r27, 0x00	; 0
    6ea0:	e4 e5       	ldi	r30, 0x54	; 84
    6ea2:	f7 e3       	ldi	r31, 0x37	; 55
    6ea4:	0c 94 7b 3b 	jmp	0x76f6	; 0x76f6 <__prologue_saves__+0xc>
    6ea8:	7c 01       	movw	r14, r24
    6eaa:	8b 01       	movw	r16, r22
    6eac:	6a 01       	movw	r12, r20
    6eae:	d2 2f       	mov	r29, r18
    6eb0:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    6eb4:	9c 01       	movw	r18, r24
    6eb6:	33 27       	eor	r19, r19
    6eb8:	2b 32       	cpi	r18, 0x2B	; 43
    6eba:	31 05       	cpc	r19, r1
    6ebc:	21 f0       	breq	.+8      	; 0x6ec6 <conv_int+0x2a>
    6ebe:	2d 32       	cpi	r18, 0x2D	; 45
    6ec0:	31 05       	cpc	r19, r1
    6ec2:	59 f4       	brne	.+22     	; 0x6eda <conv_int+0x3e>
    6ec4:	d0 68       	ori	r29, 0x80	; 128
    6ec6:	01 50       	subi	r16, 0x01	; 1
    6ec8:	11 09       	sbc	r17, r1
    6eca:	11 f4       	brne	.+4      	; 0x6ed0 <conv_int+0x34>
    6ecc:	80 e0       	ldi	r24, 0x00	; 0
    6ece:	69 c0       	rjmp	.+210    	; 0x6fa2 <conv_int+0x106>
    6ed0:	c7 01       	movw	r24, r14
    6ed2:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    6ed6:	97 fd       	sbrc	r25, 7
    6ed8:	f9 cf       	rjmp	.-14     	; 0x6ecc <conv_int+0x30>
    6eda:	cd 2f       	mov	r28, r29
    6edc:	cd 7f       	andi	r28, 0xFD	; 253
    6ede:	2d 2f       	mov	r18, r29
    6ee0:	20 73       	andi	r18, 0x30	; 48
    6ee2:	09 f5       	brne	.+66     	; 0x6f26 <conv_int+0x8a>
    6ee4:	80 33       	cpi	r24, 0x30	; 48
    6ee6:	f9 f4       	brne	.+62     	; 0x6f26 <conv_int+0x8a>
    6ee8:	58 01       	movw	r10, r16
    6eea:	81 e0       	ldi	r24, 0x01	; 1
    6eec:	a8 1a       	sub	r10, r24
    6eee:	b1 08       	sbc	r11, r1
    6ef0:	09 f4       	brne	.+2      	; 0x6ef4 <conv_int+0x58>
    6ef2:	43 c0       	rjmp	.+134    	; 0x6f7a <conv_int+0xde>
    6ef4:	c7 01       	movw	r24, r14
    6ef6:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    6efa:	97 fd       	sbrc	r25, 7
    6efc:	3e c0       	rjmp	.+124    	; 0x6f7a <conv_int+0xde>
    6efe:	28 2f       	mov	r18, r24
    6f00:	2f 7d       	andi	r18, 0xDF	; 223
    6f02:	28 35       	cpi	r18, 0x58	; 88
    6f04:	51 f4       	brne	.+20     	; 0x6f1a <conv_int+0x7e>
    6f06:	c2 64       	ori	r28, 0x42	; 66
    6f08:	02 50       	subi	r16, 0x02	; 2
    6f0a:	11 09       	sbc	r17, r1
    6f0c:	b1 f1       	breq	.+108    	; 0x6f7a <conv_int+0xde>
    6f0e:	c7 01       	movw	r24, r14
    6f10:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    6f14:	97 ff       	sbrs	r25, 7
    6f16:	07 c0       	rjmp	.+14     	; 0x6f26 <conv_int+0x8a>
    6f18:	30 c0       	rjmp	.+96     	; 0x6f7a <conv_int+0xde>
    6f1a:	d6 ff       	sbrs	r29, 6
    6f1c:	02 c0       	rjmp	.+4      	; 0x6f22 <conv_int+0x86>
    6f1e:	c2 60       	ori	r28, 0x02	; 2
    6f20:	01 c0       	rjmp	.+2      	; 0x6f24 <conv_int+0x88>
    6f22:	c2 61       	ori	r28, 0x12	; 18
    6f24:	85 01       	movw	r16, r10
    6f26:	81 2c       	mov	r8, r1
    6f28:	91 2c       	mov	r9, r1
    6f2a:	54 01       	movw	r10, r8
    6f2c:	20 ed       	ldi	r18, 0xD0	; 208
    6f2e:	28 0f       	add	r18, r24
    6f30:	28 30       	cpi	r18, 0x08	; 8
    6f32:	80 f0       	brcs	.+32     	; 0x6f54 <conv_int+0xb8>
    6f34:	c4 ff       	sbrs	r28, 4
    6f36:	04 c0       	rjmp	.+8      	; 0x6f40 <conv_int+0xa4>
    6f38:	b7 01       	movw	r22, r14
    6f3a:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <ungetc>
    6f3e:	1a c0       	rjmp	.+52     	; 0x6f74 <conv_int+0xd8>
    6f40:	2a 30       	cpi	r18, 0x0A	; 10
    6f42:	40 f0       	brcs	.+16     	; 0x6f54 <conv_int+0xb8>
    6f44:	c6 ff       	sbrs	r28, 6
    6f46:	f8 cf       	rjmp	.-16     	; 0x6f38 <conv_int+0x9c>
    6f48:	2f 7d       	andi	r18, 0xDF	; 223
    6f4a:	3f ee       	ldi	r19, 0xEF	; 239
    6f4c:	32 0f       	add	r19, r18
    6f4e:	36 30       	cpi	r19, 0x06	; 6
    6f50:	98 f7       	brcc	.-26     	; 0x6f38 <conv_int+0x9c>
    6f52:	27 50       	subi	r18, 0x07	; 7
    6f54:	4c 2f       	mov	r20, r28
    6f56:	c5 01       	movw	r24, r10
    6f58:	b4 01       	movw	r22, r8
    6f5a:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <mulacc>
    6f5e:	4b 01       	movw	r8, r22
    6f60:	5c 01       	movw	r10, r24
    6f62:	c2 60       	ori	r28, 0x02	; 2
    6f64:	01 50       	subi	r16, 0x01	; 1
    6f66:	11 09       	sbc	r17, r1
    6f68:	59 f0       	breq	.+22     	; 0x6f80 <conv_int+0xe4>
    6f6a:	c7 01       	movw	r24, r14
    6f6c:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    6f70:	97 ff       	sbrs	r25, 7
    6f72:	dc cf       	rjmp	.-72     	; 0x6f2c <conv_int+0x90>
    6f74:	c1 fd       	sbrc	r28, 1
    6f76:	04 c0       	rjmp	.+8      	; 0x6f80 <conv_int+0xe4>
    6f78:	a9 cf       	rjmp	.-174    	; 0x6ecc <conv_int+0x30>
    6f7a:	81 2c       	mov	r8, r1
    6f7c:	91 2c       	mov	r9, r1
    6f7e:	54 01       	movw	r10, r8
    6f80:	c7 ff       	sbrs	r28, 7
    6f82:	08 c0       	rjmp	.+16     	; 0x6f94 <conv_int+0xf8>
    6f84:	b0 94       	com	r11
    6f86:	a0 94       	com	r10
    6f88:	90 94       	com	r9
    6f8a:	80 94       	com	r8
    6f8c:	81 1c       	adc	r8, r1
    6f8e:	91 1c       	adc	r9, r1
    6f90:	a1 1c       	adc	r10, r1
    6f92:	b1 1c       	adc	r11, r1
    6f94:	2c 2f       	mov	r18, r28
    6f96:	b5 01       	movw	r22, r10
    6f98:	a4 01       	movw	r20, r8
    6f9a:	c6 01       	movw	r24, r12
    6f9c:	0e 94 09 37 	call	0x6e12	; 0x6e12 <putval>
    6fa0:	81 e0       	ldi	r24, 0x01	; 1
    6fa2:	cd b7       	in	r28, 0x3d	; 61
    6fa4:	de b7       	in	r29, 0x3e	; 62
    6fa6:	ec e0       	ldi	r30, 0x0C	; 12
    6fa8:	0c 94 97 3b 	jmp	0x772e	; 0x772e <__epilogue_restores__+0xc>

00006fac <conv_brk>:
    6fac:	a0 e2       	ldi	r26, 0x20	; 32
    6fae:	b0 e0       	ldi	r27, 0x00	; 0
    6fb0:	ec ed       	ldi	r30, 0xDC	; 220
    6fb2:	f7 e3       	ldi	r31, 0x37	; 55
    6fb4:	0c 94 77 3b 	jmp	0x76ee	; 0x76ee <__prologue_saves__+0x4>
    6fb8:	4c 01       	movw	r8, r24
    6fba:	5b 01       	movw	r10, r22
    6fbc:	7a 01       	movw	r14, r20
    6fbe:	8e 01       	movw	r16, r28
    6fc0:	0f 5f       	subi	r16, 0xFF	; 255
    6fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    6fc4:	68 01       	movw	r12, r16
    6fc6:	80 e2       	ldi	r24, 0x20	; 32
    6fc8:	f8 01       	movw	r30, r16
    6fca:	11 92       	st	Z+, r1
    6fcc:	8a 95       	dec	r24
    6fce:	e9 f7       	brne	.-6      	; 0x6fca <conv_brk+0x1e>
    6fd0:	f4 01       	movw	r30, r8
    6fd2:	63 80       	ldd	r6, Z+3	; 0x03
    6fd4:	40 e0       	ldi	r20, 0x00	; 0
    6fd6:	50 e0       	ldi	r21, 0x00	; 0
    6fd8:	71 2c       	mov	r7, r1
    6fda:	41 2c       	mov	r4, r1
    6fdc:	80 e0       	ldi	r24, 0x00	; 0
    6fde:	a1 e0       	ldi	r26, 0x01	; 1
    6fe0:	b0 e0       	ldi	r27, 0x00	; 0
    6fe2:	f9 01       	movw	r30, r18
    6fe4:	63 fc       	sbrc	r6, 3
    6fe6:	55 90       	lpm	r5, Z+
    6fe8:	63 fe       	sbrs	r6, 3
    6fea:	51 90       	ld	r5, Z+
    6fec:	8f 01       	movw	r16, r30
    6fee:	95 2d       	mov	r25, r5
    6ff0:	9f 01       	movw	r18, r30
    6ff2:	51 10       	cpse	r5, r1
    6ff4:	03 c0       	rjmp	.+6      	; 0x6ffc <conv_brk+0x50>
    6ff6:	80 e0       	ldi	r24, 0x00	; 0
    6ff8:	90 e0       	ldi	r25, 0x00	; 0
    6ffa:	80 c0       	rjmp	.+256    	; 0x70fc <conv_brk+0x150>
    6ffc:	fe e5       	ldi	r31, 0x5E	; 94
    6ffe:	5f 12       	cpse	r5, r31
    7000:	03 c0       	rjmp	.+6      	; 0x7008 <conv_brk+0x5c>
    7002:	41 15       	cp	r20, r1
    7004:	51 05       	cpc	r21, r1
    7006:	61 f1       	breq	.+88     	; 0x7060 <conv_brk+0xb4>
    7008:	68 2f       	mov	r22, r24
    700a:	70 e0       	ldi	r23, 0x00	; 0
    700c:	64 17       	cp	r22, r20
    700e:	75 07       	cpc	r23, r21
    7010:	4c f4       	brge	.+18     	; 0x7024 <conv_brk+0x78>
    7012:	6d e5       	ldi	r22, 0x5D	; 93
    7014:	56 16       	cp	r5, r22
    7016:	69 f1       	breq	.+90     	; 0x7072 <conv_brk+0xc6>
    7018:	ed e2       	ldi	r30, 0x2D	; 45
    701a:	5e 12       	cpse	r5, r30
    701c:	03 c0       	rjmp	.+6      	; 0x7024 <conv_brk+0x78>
    701e:	44 20       	and	r4, r4
    7020:	09 f1       	breq	.+66     	; 0x7064 <conv_brk+0xb8>
    7022:	03 c0       	rjmp	.+6      	; 0x702a <conv_brk+0x7e>
    7024:	41 10       	cpse	r4, r1
    7026:	01 c0       	rjmp	.+2      	; 0x702a <conv_brk+0x7e>
    7028:	75 2c       	mov	r7, r5
    702a:	69 2f       	mov	r22, r25
    702c:	66 95       	lsr	r22
    702e:	66 95       	lsr	r22
    7030:	66 95       	lsr	r22
    7032:	f6 01       	movw	r30, r12
    7034:	e6 0f       	add	r30, r22
    7036:	f1 1d       	adc	r31, r1
    7038:	69 2f       	mov	r22, r25
    703a:	67 70       	andi	r22, 0x07	; 7
    703c:	8d 01       	movw	r16, r26
    703e:	02 c0       	rjmp	.+4      	; 0x7044 <conv_brk+0x98>
    7040:	00 0f       	add	r16, r16
    7042:	11 1f       	adc	r17, r17
    7044:	6a 95       	dec	r22
    7046:	e2 f7       	brpl	.-8      	; 0x7040 <conv_brk+0x94>
    7048:	b8 01       	movw	r22, r16
    704a:	70 81       	ld	r23, Z
    704c:	67 2b       	or	r22, r23
    704e:	60 83       	st	Z, r22
    7050:	97 15       	cp	r25, r7
    7052:	59 f0       	breq	.+22     	; 0x706a <conv_brk+0xbe>
    7054:	97 15       	cp	r25, r7
    7056:	10 f4       	brcc	.+4      	; 0x705c <conv_brk+0xb0>
    7058:	9f 5f       	subi	r25, 0xFF	; 255
    705a:	e7 cf       	rjmp	.-50     	; 0x702a <conv_brk+0x7e>
    705c:	91 50       	subi	r25, 0x01	; 1
    705e:	e5 cf       	rjmp	.-54     	; 0x702a <conv_brk+0x7e>
    7060:	81 e0       	ldi	r24, 0x01	; 1
    7062:	04 c0       	rjmp	.+8      	; 0x706c <conv_brk+0xc0>
    7064:	44 24       	eor	r4, r4
    7066:	43 94       	inc	r4
    7068:	01 c0       	rjmp	.+2      	; 0x706c <conv_brk+0xc0>
    706a:	41 2c       	mov	r4, r1
    706c:	4f 5f       	subi	r20, 0xFF	; 255
    706e:	5f 4f       	sbci	r21, 0xFF	; 255
    7070:	b8 cf       	rjmp	.-144    	; 0x6fe2 <conv_brk+0x36>
    7072:	44 20       	and	r4, r4
    7074:	19 f0       	breq	.+6      	; 0x707c <conv_brk+0xd0>
    7076:	9e 81       	ldd	r25, Y+6	; 0x06
    7078:	90 62       	ori	r25, 0x20	; 32
    707a:	9e 83       	std	Y+6, r25	; 0x06
    707c:	81 11       	cpse	r24, r1
    707e:	03 c0       	rjmp	.+6      	; 0x7086 <conv_brk+0xda>
    7080:	77 24       	eor	r7, r7
    7082:	73 94       	inc	r7
    7084:	18 c0       	rjmp	.+48     	; 0x70b6 <conv_brk+0x10a>
    7086:	f6 01       	movw	r30, r12
    7088:	9e 01       	movw	r18, r28
    708a:	2f 5d       	subi	r18, 0xDF	; 223
    708c:	3f 4f       	sbci	r19, 0xFF	; 255
    708e:	80 81       	ld	r24, Z
    7090:	80 95       	com	r24
    7092:	81 93       	st	Z+, r24
    7094:	e2 17       	cp	r30, r18
    7096:	f3 07       	cpc	r31, r19
    7098:	d1 f7       	brne	.-12     	; 0x708e <conv_brk+0xe2>
    709a:	f2 cf       	rjmp	.-28     	; 0x7080 <conv_brk+0xd4>
    709c:	e1 14       	cp	r14, r1
    709e:	f1 04       	cpc	r15, r1
    70a0:	29 f0       	breq	.+10     	; 0x70ac <conv_brk+0x100>
    70a2:	f7 01       	movw	r30, r14
    70a4:	80 83       	st	Z, r24
    70a6:	c7 01       	movw	r24, r14
    70a8:	01 96       	adiw	r24, 0x01	; 1
    70aa:	7c 01       	movw	r14, r24
    70ac:	91 e0       	ldi	r25, 0x01	; 1
    70ae:	a9 1a       	sub	r10, r25
    70b0:	b1 08       	sbc	r11, r1
    70b2:	71 2c       	mov	r7, r1
    70b4:	e9 f0       	breq	.+58     	; 0x70f0 <conv_brk+0x144>
    70b6:	c4 01       	movw	r24, r8
    70b8:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    70bc:	97 fd       	sbrc	r25, 7
    70be:	16 c0       	rjmp	.+44     	; 0x70ec <conv_brk+0x140>
    70c0:	28 2f       	mov	r18, r24
    70c2:	26 95       	lsr	r18
    70c4:	26 95       	lsr	r18
    70c6:	26 95       	lsr	r18
    70c8:	f6 01       	movw	r30, r12
    70ca:	e2 0f       	add	r30, r18
    70cc:	f1 1d       	adc	r31, r1
    70ce:	20 81       	ld	r18, Z
    70d0:	30 e0       	ldi	r19, 0x00	; 0
    70d2:	ac 01       	movw	r20, r24
    70d4:	47 70       	andi	r20, 0x07	; 7
    70d6:	55 27       	eor	r21, r21
    70d8:	02 c0       	rjmp	.+4      	; 0x70de <conv_brk+0x132>
    70da:	35 95       	asr	r19
    70dc:	27 95       	ror	r18
    70de:	4a 95       	dec	r20
    70e0:	e2 f7       	brpl	.-8      	; 0x70da <conv_brk+0x12e>
    70e2:	20 fd       	sbrc	r18, 0
    70e4:	db cf       	rjmp	.-74     	; 0x709c <conv_brk+0xf0>
    70e6:	b4 01       	movw	r22, r8
    70e8:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <ungetc>
    70ec:	71 10       	cpse	r7, r1
    70ee:	83 cf       	rjmp	.-250    	; 0x6ff6 <conv_brk+0x4a>
    70f0:	e1 14       	cp	r14, r1
    70f2:	f1 04       	cpc	r15, r1
    70f4:	11 f0       	breq	.+4      	; 0x70fa <conv_brk+0x14e>
    70f6:	f7 01       	movw	r30, r14
    70f8:	10 82       	st	Z, r1
    70fa:	c8 01       	movw	r24, r16
    70fc:	a0 96       	adiw	r28, 0x20	; 32
    70fe:	e0 e1       	ldi	r30, 0x10	; 16
    7100:	0c 94 93 3b 	jmp	0x7726	; 0x7726 <__epilogue_restores__+0x4>

00007104 <conv_flt>:
    7104:	a6 e0       	ldi	r26, 0x06	; 6
    7106:	b0 e0       	ldi	r27, 0x00	; 0
    7108:	e8 e8       	ldi	r30, 0x88	; 136
    710a:	f8 e3       	ldi	r31, 0x38	; 56
    710c:	0c 94 75 3b 	jmp	0x76ea	; 0x76ea <__prologue_saves__>
    7110:	5c 01       	movw	r10, r24
    7112:	7b 01       	movw	r14, r22
    7114:	1a 01       	movw	r2, r20
    7116:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    711a:	9e 83       	std	Y+6, r25	; 0x06
    711c:	8d 83       	std	Y+5, r24	; 0x05
    711e:	99 27       	eor	r25, r25
    7120:	8b 32       	cpi	r24, 0x2B	; 43
    7122:	91 05       	cpc	r25, r1
    7124:	21 f0       	breq	.+8      	; 0x712e <conv_flt+0x2a>
    7126:	8d 97       	sbiw	r24, 0x2d	; 45
    7128:	89 f4       	brne	.+34     	; 0x714c <conv_flt+0x48>
    712a:	10 e8       	ldi	r17, 0x80	; 128
    712c:	01 c0       	rjmp	.+2      	; 0x7130 <conv_flt+0x2c>
    712e:	10 e0       	ldi	r17, 0x00	; 0
    7130:	21 e0       	ldi	r18, 0x01	; 1
    7132:	e2 1a       	sub	r14, r18
    7134:	f1 08       	sbc	r15, r1
    7136:	11 f4       	brne	.+4      	; 0x713c <conv_flt+0x38>
    7138:	80 e0       	ldi	r24, 0x00	; 0
    713a:	2c c1       	rjmp	.+600    	; 0x7394 <conv_flt+0x290>
    713c:	c5 01       	movw	r24, r10
    713e:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    7142:	9e 83       	std	Y+6, r25	; 0x06
    7144:	8d 83       	std	Y+5, r24	; 0x05
    7146:	97 ff       	sbrs	r25, 7
    7148:	02 c0       	rjmp	.+4      	; 0x714e <conv_flt+0x4a>
    714a:	f6 cf       	rjmp	.-20     	; 0x7138 <conv_flt+0x34>
    714c:	10 e0       	ldi	r17, 0x00	; 0
    714e:	8d 81       	ldd	r24, Y+5	; 0x05
    7150:	9e 81       	ldd	r25, Y+6	; 0x06
    7152:	0e 94 a1 3c 	call	0x7942	; 0x7942 <tolower>
    7156:	89 36       	cpi	r24, 0x69	; 105
    7158:	91 05       	cpc	r25, r1
    715a:	49 f0       	breq	.+18     	; 0x716e <conv_flt+0x6a>
    715c:	8e 36       	cpi	r24, 0x6E	; 110
    715e:	91 05       	cpc	r25, r1
    7160:	09 f0       	breq	.+2      	; 0x7164 <conv_flt+0x60>
    7162:	3b c0       	rjmp	.+118    	; 0x71da <conv_flt+0xd6>
    7164:	6f ed       	ldi	r22, 0xDF	; 223
    7166:	86 2e       	mov	r8, r22
    7168:	6e e0       	ldi	r22, 0x0E	; 14
    716a:	96 2e       	mov	r9, r22
    716c:	04 c0       	rjmp	.+8      	; 0x7176 <conv_flt+0x72>
    716e:	72 ee       	ldi	r23, 0xE2	; 226
    7170:	87 2e       	mov	r8, r23
    7172:	7e e0       	ldi	r23, 0x0E	; 14
    7174:	97 2e       	mov	r9, r23
    7176:	ef ef       	ldi	r30, 0xFF	; 255
    7178:	8e 1a       	sub	r8, r30
    717a:	9e 0a       	sbc	r9, r30
    717c:	f4 01       	movw	r30, r8
    717e:	31 97       	sbiw	r30, 0x01	; 1
    7180:	04 91       	lpm	r16, Z
    7182:	00 23       	and	r16, r16
    7184:	c9 f0       	breq	.+50     	; 0x71b8 <conv_flt+0xb4>
    7186:	81 e0       	ldi	r24, 0x01	; 1
    7188:	e8 1a       	sub	r14, r24
    718a:	f1 08       	sbc	r15, r1
    718c:	71 f0       	breq	.+28     	; 0x71aa <conv_flt+0xa6>
    718e:	c5 01       	movw	r24, r10
    7190:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    7194:	6c 01       	movw	r12, r24
    7196:	97 fd       	sbrc	r25, 7
    7198:	08 c0       	rjmp	.+16     	; 0x71aa <conv_flt+0xa6>
    719a:	0e 94 a1 3c 	call	0x7942	; 0x7942 <tolower>
    719e:	08 17       	cp	r16, r24
    71a0:	51 f3       	breq	.-44     	; 0x7176 <conv_flt+0x72>
    71a2:	b5 01       	movw	r22, r10
    71a4:	c6 01       	movw	r24, r12
    71a6:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <ungetc>
    71aa:	95 ee       	ldi	r25, 0xE5	; 229
    71ac:	89 16       	cp	r8, r25
    71ae:	9e e0       	ldi	r25, 0x0E	; 14
    71b0:	99 06       	cpc	r9, r25
    71b2:	09 f0       	breq	.+2      	; 0x71b6 <conv_flt+0xb2>
    71b4:	c1 cf       	rjmp	.-126    	; 0x7138 <conv_flt+0x34>
    71b6:	05 c0       	rjmp	.+10     	; 0x71c2 <conv_flt+0xbe>
    71b8:	f2 ee       	ldi	r31, 0xE2	; 226
    71ba:	8f 16       	cp	r8, r31
    71bc:	fe e0       	ldi	r31, 0x0E	; 14
    71be:	9f 06       	cpc	r9, r31
    71c0:	29 f0       	breq	.+10     	; 0x71cc <conv_flt+0xc8>
    71c2:	80 e0       	ldi	r24, 0x00	; 0
    71c4:	90 e0       	ldi	r25, 0x00	; 0
    71c6:	a0 e8       	ldi	r26, 0x80	; 128
    71c8:	bf e7       	ldi	r27, 0x7F	; 127
    71ca:	04 c0       	rjmp	.+8      	; 0x71d4 <conv_flt+0xd0>
    71cc:	80 e0       	ldi	r24, 0x00	; 0
    71ce:	90 e0       	ldi	r25, 0x00	; 0
    71d0:	a0 ec       	ldi	r26, 0xC0	; 192
    71d2:	bf e7       	ldi	r27, 0x7F	; 127
    71d4:	bc 01       	movw	r22, r24
    71d6:	cd 01       	movw	r24, r26
    71d8:	cd c0       	rjmp	.+410    	; 0x7374 <conv_flt+0x270>
    71da:	41 2c       	mov	r4, r1
    71dc:	51 2c       	mov	r5, r1
    71de:	32 01       	movw	r6, r4
    71e0:	c1 2c       	mov	r12, r1
    71e2:	d1 2c       	mov	r13, r1
    71e4:	2d 81       	ldd	r18, Y+5	; 0x05
    71e6:	20 53       	subi	r18, 0x30	; 48
    71e8:	2a 30       	cpi	r18, 0x0A	; 10
    71ea:	18 f5       	brcc	.+70     	; 0x7232 <conv_flt+0x12e>
    71ec:	01 2f       	mov	r16, r17
    71ee:	02 60       	ori	r16, 0x02	; 2
    71f0:	81 2f       	mov	r24, r17
    71f2:	88 70       	andi	r24, 0x08	; 8
    71f4:	12 ff       	sbrs	r17, 2
    71f6:	06 c0       	rjmp	.+12     	; 0x7204 <conv_flt+0x100>
    71f8:	81 11       	cpse	r24, r1
    71fa:	21 c0       	rjmp	.+66     	; 0x723e <conv_flt+0x13a>
    71fc:	2f ef       	ldi	r18, 0xFF	; 255
    71fe:	c2 1a       	sub	r12, r18
    7200:	d2 0a       	sbc	r13, r18
    7202:	1d c0       	rjmp	.+58     	; 0x723e <conv_flt+0x13a>
    7204:	88 23       	and	r24, r24
    7206:	19 f0       	breq	.+6      	; 0x720e <conv_flt+0x10a>
    7208:	81 e0       	ldi	r24, 0x01	; 1
    720a:	c8 1a       	sub	r12, r24
    720c:	d1 08       	sbc	r13, r1
    720e:	40 e2       	ldi	r20, 0x20	; 32
    7210:	c3 01       	movw	r24, r6
    7212:	b2 01       	movw	r22, r4
    7214:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <mulacc>
    7218:	2b 01       	movw	r4, r22
    721a:	3c 01       	movw	r6, r24
    721c:	98 e9       	ldi	r25, 0x98	; 152
    721e:	49 16       	cp	r4, r25
    7220:	99 e9       	ldi	r25, 0x99	; 153
    7222:	59 06       	cpc	r5, r25
    7224:	69 06       	cpc	r6, r25
    7226:	99 e1       	ldi	r25, 0x19	; 25
    7228:	79 06       	cpc	r7, r25
    722a:	48 f0       	brcs	.+18     	; 0x723e <conv_flt+0x13a>
    722c:	01 2f       	mov	r16, r17
    722e:	06 60       	ori	r16, 0x06	; 6
    7230:	06 c0       	rjmp	.+12     	; 0x723e <conv_flt+0x13a>
    7232:	2e 3f       	cpi	r18, 0xFE	; 254
    7234:	91 f4       	brne	.+36     	; 0x725a <conv_flt+0x156>
    7236:	13 fd       	sbrc	r17, 3
    7238:	10 c0       	rjmp	.+32     	; 0x725a <conv_flt+0x156>
    723a:	01 2f       	mov	r16, r17
    723c:	08 60       	ori	r16, 0x08	; 8
    723e:	e1 e0       	ldi	r30, 0x01	; 1
    7240:	ee 1a       	sub	r14, r30
    7242:	f1 08       	sbc	r15, r1
    7244:	49 f0       	breq	.+18     	; 0x7258 <conv_flt+0x154>
    7246:	c5 01       	movw	r24, r10
    7248:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    724c:	9e 83       	std	Y+6, r25	; 0x06
    724e:	8d 83       	std	Y+5, r24	; 0x05
    7250:	10 2f       	mov	r17, r16
    7252:	97 ff       	sbrs	r25, 7
    7254:	c7 cf       	rjmp	.-114    	; 0x71e4 <conv_flt+0xe0>
    7256:	01 c0       	rjmp	.+2      	; 0x725a <conv_flt+0x156>
    7258:	10 2f       	mov	r17, r16
    725a:	11 ff       	sbrs	r17, 1
    725c:	6d cf       	rjmp	.-294    	; 0x7138 <conv_flt+0x34>
    725e:	8d 81       	ldd	r24, Y+5	; 0x05
    7260:	8f 7d       	andi	r24, 0xDF	; 223
    7262:	85 34       	cpi	r24, 0x45	; 69
    7264:	09 f0       	breq	.+2      	; 0x7268 <conv_flt+0x164>
    7266:	4e c0       	rjmp	.+156    	; 0x7304 <conv_flt+0x200>
    7268:	47 01       	movw	r8, r14
    726a:	f1 e0       	ldi	r31, 0x01	; 1
    726c:	8f 1a       	sub	r8, r31
    726e:	91 08       	sbc	r9, r1
    7270:	09 f4       	brne	.+2      	; 0x7274 <conv_flt+0x170>
    7272:	62 cf       	rjmp	.-316    	; 0x7138 <conv_flt+0x34>
    7274:	c5 01       	movw	r24, r10
    7276:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    727a:	9e 83       	std	Y+6, r25	; 0x06
    727c:	8d 83       	std	Y+5, r24	; 0x05
    727e:	97 fd       	sbrc	r25, 7
    7280:	5b cf       	rjmp	.-330    	; 0x7138 <conv_flt+0x34>
    7282:	99 27       	eor	r25, r25
    7284:	8b 32       	cpi	r24, 0x2B	; 43
    7286:	91 05       	cpc	r25, r1
    7288:	19 f0       	breq	.+6      	; 0x7290 <conv_flt+0x18c>
    728a:	8d 97       	sbiw	r24, 0x2d	; 45
    728c:	61 f4       	brne	.+24     	; 0x72a6 <conv_flt+0x1a2>
    728e:	10 61       	ori	r17, 0x10	; 16
    7290:	47 01       	movw	r8, r14
    7292:	22 e0       	ldi	r18, 0x02	; 2
    7294:	82 1a       	sub	r8, r18
    7296:	91 08       	sbc	r9, r1
    7298:	09 f4       	brne	.+2      	; 0x729c <conv_flt+0x198>
    729a:	4e cf       	rjmp	.-356    	; 0x7138 <conv_flt+0x34>
    729c:	c5 01       	movw	r24, r10
    729e:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    72a2:	9e 83       	std	Y+6, r25	; 0x06
    72a4:	8d 83       	std	Y+5, r24	; 0x05
    72a6:	8d 81       	ldd	r24, Y+5	; 0x05
    72a8:	9e 81       	ldd	r25, Y+6	; 0x06
    72aa:	c0 97       	sbiw	r24, 0x30	; 48
    72ac:	0a 97       	sbiw	r24, 0x0a	; 10
    72ae:	08 f0       	brcs	.+2      	; 0x72b2 <conv_flt+0x1ae>
    72b0:	43 cf       	rjmp	.-378    	; 0x7138 <conv_flt+0x34>
    72b2:	74 01       	movw	r14, r8
    72b4:	81 2c       	mov	r8, r1
    72b6:	91 2c       	mov	r9, r1
    72b8:	b4 01       	movw	r22, r8
    72ba:	99 0c       	add	r9, r9
    72bc:	88 0b       	sbc	r24, r24
    72be:	99 0b       	sbc	r25, r25
    72c0:	2d 81       	ldd	r18, Y+5	; 0x05
    72c2:	20 53       	subi	r18, 0x30	; 48
    72c4:	40 e2       	ldi	r20, 0x20	; 32
    72c6:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <mulacc>
    72ca:	ab 01       	movw	r20, r22
    72cc:	bc 01       	movw	r22, r24
    72ce:	4a 01       	movw	r8, r20
    72d0:	81 e0       	ldi	r24, 0x01	; 1
    72d2:	e8 1a       	sub	r14, r24
    72d4:	f1 08       	sbc	r15, r1
    72d6:	71 f0       	breq	.+28     	; 0x72f4 <conv_flt+0x1f0>
    72d8:	c5 01       	movw	r24, r10
    72da:	49 83       	std	Y+1, r20	; 0x01
    72dc:	5a 83       	std	Y+2, r21	; 0x02
    72de:	6b 83       	std	Y+3, r22	; 0x03
    72e0:	7c 83       	std	Y+4, r23	; 0x04
    72e2:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    72e6:	9e 83       	std	Y+6, r25	; 0x06
    72e8:	8d 83       	std	Y+5, r24	; 0x05
    72ea:	c0 97       	sbiw	r24, 0x30	; 48
    72ec:	49 81       	ldd	r20, Y+1	; 0x01
    72ee:	5a 81       	ldd	r21, Y+2	; 0x02
    72f0:	0a 97       	sbiw	r24, 0x0a	; 10
    72f2:	10 f3       	brcs	.-60     	; 0x72b8 <conv_flt+0x1b4>
    72f4:	14 ff       	sbrs	r17, 4
    72f6:	04 c0       	rjmp	.+8      	; 0x7300 <conv_flt+0x1fc>
    72f8:	88 24       	eor	r8, r8
    72fa:	99 24       	eor	r9, r9
    72fc:	84 1a       	sub	r8, r20
    72fe:	95 0a       	sbc	r9, r21
    7300:	c8 0c       	add	r12, r8
    7302:	d9 1c       	adc	r13, r9
    7304:	ef 28       	or	r14, r15
    7306:	41 f0       	breq	.+16     	; 0x7318 <conv_flt+0x214>
    7308:	ed 81       	ldd	r30, Y+5	; 0x05
    730a:	fe 81       	ldd	r31, Y+6	; 0x06
    730c:	f7 fd       	sbrc	r31, 7
    730e:	04 c0       	rjmp	.+8      	; 0x7318 <conv_flt+0x214>
    7310:	b5 01       	movw	r22, r10
    7312:	cf 01       	movw	r24, r30
    7314:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <ungetc>
    7318:	c3 01       	movw	r24, r6
    731a:	b2 01       	movw	r22, r4
    731c:	0e 94 9a 30 	call	0x6134	; 0x6134 <__floatunsisf>
    7320:	d7 fe       	sbrs	r13, 7
    7322:	08 c0       	rjmp	.+16     	; 0x7334 <conv_flt+0x230>
    7324:	d1 94       	neg	r13
    7326:	c1 94       	neg	r12
    7328:	d1 08       	sbc	r13, r1
    732a:	5e ef       	ldi	r21, 0xFE	; 254
    732c:	85 2e       	mov	r8, r21
    732e:	5e e0       	ldi	r21, 0x0E	; 14
    7330:	95 2e       	mov	r9, r21
    7332:	04 c0       	rjmp	.+8      	; 0x733c <conv_flt+0x238>
    7334:	46 e1       	ldi	r20, 0x16	; 22
    7336:	84 2e       	mov	r8, r20
    7338:	4f e0       	ldi	r20, 0x0F	; 15
    733a:	94 2e       	mov	r9, r20
    733c:	54 01       	movw	r10, r8
    733e:	f8 e1       	ldi	r31, 0x18	; 24
    7340:	af 1a       	sub	r10, r31
    7342:	b1 08       	sbc	r11, r1
    7344:	30 e2       	ldi	r19, 0x20	; 32
    7346:	e3 2e       	mov	r14, r19
    7348:	f1 2c       	mov	r15, r1
    734a:	ce 14       	cp	r12, r14
    734c:	df 04       	cpc	r13, r15
    734e:	50 f0       	brcs	.+20     	; 0x7364 <conv_flt+0x260>
    7350:	f4 01       	movw	r30, r8
    7352:	25 91       	lpm	r18, Z+
    7354:	35 91       	lpm	r19, Z+
    7356:	45 91       	lpm	r20, Z+
    7358:	54 91       	lpm	r21, Z
    735a:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulsf3>
    735e:	ce 18       	sub	r12, r14
    7360:	df 08       	sbc	r13, r15
    7362:	f3 cf       	rjmp	.-26     	; 0x734a <conv_flt+0x246>
    7364:	24 e0       	ldi	r18, 0x04	; 4
    7366:	82 1a       	sub	r8, r18
    7368:	91 08       	sbc	r9, r1
    736a:	f6 94       	lsr	r15
    736c:	e7 94       	ror	r14
    736e:	8a 14       	cp	r8, r10
    7370:	9b 04       	cpc	r9, r11
    7372:	59 f7       	brne	.-42     	; 0x734a <conv_flt+0x246>
    7374:	17 ff       	sbrs	r17, 7
    7376:	05 c0       	rjmp	.+10     	; 0x7382 <conv_flt+0x27e>
    7378:	dc 01       	movw	r26, r24
    737a:	cb 01       	movw	r24, r22
    737c:	b0 58       	subi	r27, 0x80	; 128
    737e:	bc 01       	movw	r22, r24
    7380:	cd 01       	movw	r24, r26
    7382:	21 14       	cp	r2, r1
    7384:	31 04       	cpc	r3, r1
    7386:	29 f0       	breq	.+10     	; 0x7392 <conv_flt+0x28e>
    7388:	f1 01       	movw	r30, r2
    738a:	60 83       	st	Z, r22
    738c:	71 83       	std	Z+1, r23	; 0x01
    738e:	82 83       	std	Z+2, r24	; 0x02
    7390:	93 83       	std	Z+3, r25	; 0x03
    7392:	81 e0       	ldi	r24, 0x01	; 1
    7394:	26 96       	adiw	r28, 0x06	; 6
    7396:	e2 e1       	ldi	r30, 0x12	; 18
    7398:	0c 94 91 3b 	jmp	0x7722	; 0x7722 <__epilogue_restores__>

0000739c <vfscanf>:
    739c:	a1 e0       	ldi	r26, 0x01	; 1
    739e:	b0 e0       	ldi	r27, 0x00	; 0
    73a0:	e4 ed       	ldi	r30, 0xD4	; 212
    73a2:	f9 e3       	ldi	r31, 0x39	; 57
    73a4:	0c 94 77 3b 	jmp	0x76ee	; 0x76ee <__prologue_saves__+0x4>
    73a8:	6c 01       	movw	r12, r24
    73aa:	2b 01       	movw	r4, r22
    73ac:	4a 01       	movw	r8, r20
    73ae:	fc 01       	movw	r30, r24
    73b0:	17 82       	std	Z+7, r1	; 0x07
    73b2:	16 82       	std	Z+6, r1	; 0x06
    73b4:	a1 2c       	mov	r10, r1
    73b6:	f6 01       	movw	r30, r12
    73b8:	f3 80       	ldd	r15, Z+3	; 0x03
    73ba:	f2 01       	movw	r30, r4
    73bc:	f3 fc       	sbrc	r15, 3
    73be:	85 91       	lpm	r24, Z+
    73c0:	f3 fe       	sbrs	r15, 3
    73c2:	81 91       	ld	r24, Z+
    73c4:	48 2f       	mov	r20, r24
    73c6:	2f 01       	movw	r4, r30
    73c8:	88 23       	and	r24, r24
    73ca:	09 f4       	brne	.+2      	; 0x73ce <vfscanf+0x32>
    73cc:	10 c1       	rjmp	.+544    	; 0x75ee <vfscanf+0x252>
    73ce:	90 e0       	ldi	r25, 0x00	; 0
    73d0:	49 83       	std	Y+1, r20	; 0x01
    73d2:	0e 94 98 3c 	call	0x7930	; 0x7930 <isspace>
    73d6:	49 81       	ldd	r20, Y+1	; 0x01
    73d8:	89 2b       	or	r24, r25
    73da:	21 f0       	breq	.+8      	; 0x73e4 <vfscanf+0x48>
    73dc:	c6 01       	movw	r24, r12
    73de:	0e 94 35 37 	call	0x6e6a	; 0x6e6a <skip_spaces>
    73e2:	e9 cf       	rjmp	.-46     	; 0x73b6 <vfscanf+0x1a>
    73e4:	45 32       	cpi	r20, 0x25	; 37
    73e6:	41 f4       	brne	.+16     	; 0x73f8 <vfscanf+0x5c>
    73e8:	f2 01       	movw	r30, r4
    73ea:	f3 fc       	sbrc	r15, 3
    73ec:	45 91       	lpm	r20, Z+
    73ee:	f3 fe       	sbrs	r15, 3
    73f0:	41 91       	ld	r20, Z+
    73f2:	2f 01       	movw	r4, r30
    73f4:	45 32       	cpi	r20, 0x25	; 37
    73f6:	69 f4       	brne	.+26     	; 0x7412 <vfscanf+0x76>
    73f8:	c6 01       	movw	r24, r12
    73fa:	49 83       	std	Y+1, r20	; 0x01
    73fc:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    7400:	49 81       	ldd	r20, Y+1	; 0x01
    7402:	97 fd       	sbrc	r25, 7
    7404:	f2 c0       	rjmp	.+484    	; 0x75ea <vfscanf+0x24e>
    7406:	48 17       	cp	r20, r24
    7408:	b1 f2       	breq	.-84     	; 0x73b6 <vfscanf+0x1a>
    740a:	b6 01       	movw	r22, r12
    740c:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <ungetc>
    7410:	ee c0       	rjmp	.+476    	; 0x75ee <vfscanf+0x252>
    7412:	4a 32       	cpi	r20, 0x2A	; 42
    7414:	39 f4       	brne	.+14     	; 0x7424 <vfscanf+0x88>
    7416:	f3 fc       	sbrc	r15, 3
    7418:	45 91       	lpm	r20, Z+
    741a:	f3 fe       	sbrs	r15, 3
    741c:	41 91       	ld	r20, Z+
    741e:	2f 01       	movw	r4, r30
    7420:	51 e0       	ldi	r21, 0x01	; 1
    7422:	01 c0       	rjmp	.+2      	; 0x7426 <vfscanf+0x8a>
    7424:	50 e0       	ldi	r21, 0x00	; 0
    7426:	32 01       	movw	r6, r4
    7428:	00 e0       	ldi	r16, 0x00	; 0
    742a:	10 e0       	ldi	r17, 0x00	; 0
    742c:	20 ed       	ldi	r18, 0xD0	; 208
    742e:	24 0f       	add	r18, r20
    7430:	2a 30       	cpi	r18, 0x0A	; 10
    7432:	88 f4       	brcc	.+34     	; 0x7456 <vfscanf+0xba>
    7434:	52 60       	ori	r21, 0x02	; 2
    7436:	b8 01       	movw	r22, r16
    7438:	80 e0       	ldi	r24, 0x00	; 0
    743a:	90 e0       	ldi	r25, 0x00	; 0
    743c:	40 e2       	ldi	r20, 0x20	; 32
    743e:	59 83       	std	Y+1, r21	; 0x01
    7440:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <mulacc>
    7444:	8b 01       	movw	r16, r22
    7446:	f3 01       	movw	r30, r6
    7448:	f3 fc       	sbrc	r15, 3
    744a:	45 91       	lpm	r20, Z+
    744c:	f3 fe       	sbrs	r15, 3
    744e:	41 91       	ld	r20, Z+
    7450:	3f 01       	movw	r6, r30
    7452:	59 81       	ldd	r21, Y+1	; 0x01
    7454:	eb cf       	rjmp	.-42     	; 0x742c <vfscanf+0x90>
    7456:	b5 2e       	mov	r11, r21
    7458:	34 2f       	mov	r19, r20
    745a:	23 01       	movw	r4, r6
    745c:	51 ff       	sbrs	r21, 1
    745e:	04 c0       	rjmp	.+8      	; 0x7468 <vfscanf+0xcc>
    7460:	01 15       	cp	r16, r1
    7462:	11 05       	cpc	r17, r1
    7464:	19 f4       	brne	.+6      	; 0x746c <vfscanf+0xd0>
    7466:	c3 c0       	rjmp	.+390    	; 0x75ee <vfscanf+0x252>
    7468:	0f ef       	ldi	r16, 0xFF	; 255
    746a:	1f ef       	ldi	r17, 0xFF	; 255
    746c:	48 36       	cpi	r20, 0x68	; 104
    746e:	19 f0       	breq	.+6      	; 0x7476 <vfscanf+0xda>
    7470:	4c 36       	cpi	r20, 0x6C	; 108
    7472:	59 f0       	breq	.+22     	; 0x748a <vfscanf+0xee>
    7474:	13 c0       	rjmp	.+38     	; 0x749c <vfscanf+0x100>
    7476:	f3 01       	movw	r30, r6
    7478:	f3 fc       	sbrc	r15, 3
    747a:	35 91       	lpm	r19, Z+
    747c:	f3 fe       	sbrs	r15, 3
    747e:	31 91       	ld	r19, Z+
    7480:	2f 01       	movw	r4, r30
    7482:	38 36       	cpi	r19, 0x68	; 104
    7484:	59 f4       	brne	.+22     	; 0x749c <vfscanf+0x100>
    7486:	58 60       	ori	r21, 0x08	; 8
    7488:	b5 2e       	mov	r11, r21
    748a:	fb 2d       	mov	r31, r11
    748c:	f4 60       	ori	r31, 0x04	; 4
    748e:	bf 2e       	mov	r11, r31
    7490:	f2 01       	movw	r30, r4
    7492:	f3 fc       	sbrc	r15, 3
    7494:	35 91       	lpm	r19, Z+
    7496:	f3 fe       	sbrs	r15, 3
    7498:	31 91       	ld	r19, Z+
    749a:	2f 01       	movw	r4, r30
    749c:	33 23       	and	r19, r19
    749e:	09 f4       	brne	.+2      	; 0x74a2 <vfscanf+0x106>
    74a0:	a6 c0       	rjmp	.+332    	; 0x75ee <vfscanf+0x252>
    74a2:	63 2f       	mov	r22, r19
    74a4:	70 e0       	ldi	r23, 0x00	; 0
    74a6:	8d ec       	ldi	r24, 0xCD	; 205
    74a8:	9e e0       	ldi	r25, 0x0E	; 14
    74aa:	39 83       	std	Y+1, r19	; 0x01
    74ac:	0e 94 a9 3c 	call	0x7952	; 0x7952 <strchr_P>
    74b0:	39 81       	ldd	r19, Y+1	; 0x01
    74b2:	89 2b       	or	r24, r25
    74b4:	09 f4       	brne	.+2      	; 0x74b8 <vfscanf+0x11c>
    74b6:	9b c0       	rjmp	.+310    	; 0x75ee <vfscanf+0x252>
    74b8:	b0 fc       	sbrc	r11, 0
    74ba:	07 c0       	rjmp	.+14     	; 0x74ca <vfscanf+0x12e>
    74bc:	f4 01       	movw	r30, r8
    74be:	e0 80       	ld	r14, Z
    74c0:	f1 80       	ldd	r15, Z+1	; 0x01
    74c2:	c4 01       	movw	r24, r8
    74c4:	02 96       	adiw	r24, 0x02	; 2
    74c6:	4c 01       	movw	r8, r24
    74c8:	02 c0       	rjmp	.+4      	; 0x74ce <vfscanf+0x132>
    74ca:	e1 2c       	mov	r14, r1
    74cc:	f1 2c       	mov	r15, r1
    74ce:	3e 36       	cpi	r19, 0x6E	; 110
    74d0:	51 f4       	brne	.+20     	; 0x74e6 <vfscanf+0x14a>
    74d2:	f6 01       	movw	r30, r12
    74d4:	46 81       	ldd	r20, Z+6	; 0x06
    74d6:	57 81       	ldd	r21, Z+7	; 0x07
    74d8:	60 e0       	ldi	r22, 0x00	; 0
    74da:	70 e0       	ldi	r23, 0x00	; 0
    74dc:	2b 2d       	mov	r18, r11
    74de:	c7 01       	movw	r24, r14
    74e0:	0e 94 09 37 	call	0x6e12	; 0x6e12 <putval>
    74e4:	68 cf       	rjmp	.-304    	; 0x73b6 <vfscanf+0x1a>
    74e6:	33 36       	cpi	r19, 0x63	; 99
    74e8:	a9 f4       	brne	.+42     	; 0x7514 <vfscanf+0x178>
    74ea:	b1 fc       	sbrc	r11, 1
    74ec:	02 c0       	rjmp	.+4      	; 0x74f2 <vfscanf+0x156>
    74ee:	01 e0       	ldi	r16, 0x01	; 1
    74f0:	10 e0       	ldi	r17, 0x00	; 0
    74f2:	c6 01       	movw	r24, r12
    74f4:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    74f8:	97 fd       	sbrc	r25, 7
    74fa:	77 c0       	rjmp	.+238    	; 0x75ea <vfscanf+0x24e>
    74fc:	e1 14       	cp	r14, r1
    74fe:	f1 04       	cpc	r15, r1
    7500:	29 f0       	breq	.+10     	; 0x750c <vfscanf+0x170>
    7502:	f7 01       	movw	r30, r14
    7504:	80 83       	st	Z, r24
    7506:	c7 01       	movw	r24, r14
    7508:	01 96       	adiw	r24, 0x01	; 1
    750a:	7c 01       	movw	r14, r24
    750c:	01 50       	subi	r16, 0x01	; 1
    750e:	11 09       	sbc	r17, r1
    7510:	81 f7       	brne	.-32     	; 0x74f2 <vfscanf+0x156>
    7512:	67 c0       	rjmp	.+206    	; 0x75e2 <vfscanf+0x246>
    7514:	3b 35       	cpi	r19, 0x5B	; 91
    7516:	59 f4       	brne	.+22     	; 0x752e <vfscanf+0x192>
    7518:	92 01       	movw	r18, r4
    751a:	a7 01       	movw	r20, r14
    751c:	b8 01       	movw	r22, r16
    751e:	c6 01       	movw	r24, r12
    7520:	0e 94 d6 37 	call	0x6fac	; 0x6fac <conv_brk>
    7524:	2c 01       	movw	r4, r24
    7526:	89 2b       	or	r24, r25
    7528:	09 f0       	breq	.+2      	; 0x752c <vfscanf+0x190>
    752a:	5b c0       	rjmp	.+182    	; 0x75e2 <vfscanf+0x246>
    752c:	55 c0       	rjmp	.+170    	; 0x75d8 <vfscanf+0x23c>
    752e:	c6 01       	movw	r24, r12
    7530:	39 83       	std	Y+1, r19	; 0x01
    7532:	0e 94 35 37 	call	0x6e6a	; 0x6e6a <skip_spaces>
    7536:	39 81       	ldd	r19, Y+1	; 0x01
    7538:	97 fd       	sbrc	r25, 7
    753a:	57 c0       	rjmp	.+174    	; 0x75ea <vfscanf+0x24e>
    753c:	3f 36       	cpi	r19, 0x6F	; 111
    753e:	d9 f1       	breq	.+118    	; 0x75b6 <vfscanf+0x21a>
    7540:	40 f4       	brcc	.+16     	; 0x7552 <vfscanf+0x1b6>
    7542:	34 36       	cpi	r19, 0x64	; 100
    7544:	a1 f1       	breq	.+104    	; 0x75ae <vfscanf+0x212>
    7546:	39 36       	cpi	r19, 0x69	; 105
    7548:	c9 f1       	breq	.+114    	; 0x75bc <vfscanf+0x220>
    754a:	38 35       	cpi	r19, 0x58	; 88
    754c:	09 f0       	breq	.+2      	; 0x7550 <vfscanf+0x1b4>
    754e:	3d c0       	rjmp	.+122    	; 0x75ca <vfscanf+0x22e>
    7550:	2a c0       	rjmp	.+84     	; 0x75a6 <vfscanf+0x20a>
    7552:	33 37       	cpi	r19, 0x73	; 115
    7554:	a1 f0       	breq	.+40     	; 0x757e <vfscanf+0x1e2>
    7556:	18 f4       	brcc	.+6      	; 0x755e <vfscanf+0x1c2>
    7558:	30 37       	cpi	r19, 0x70	; 112
    755a:	29 f1       	breq	.+74     	; 0x75a6 <vfscanf+0x20a>
    755c:	36 c0       	rjmp	.+108    	; 0x75ca <vfscanf+0x22e>
    755e:	35 37       	cpi	r19, 0x75	; 117
    7560:	31 f1       	breq	.+76     	; 0x75ae <vfscanf+0x212>
    7562:	38 37       	cpi	r19, 0x78	; 120
    7564:	01 f1       	breq	.+64     	; 0x75a6 <vfscanf+0x20a>
    7566:	31 c0       	rjmp	.+98     	; 0x75ca <vfscanf+0x22e>
    7568:	e1 14       	cp	r14, r1
    756a:	f1 04       	cpc	r15, r1
    756c:	29 f0       	breq	.+10     	; 0x7578 <vfscanf+0x1dc>
    756e:	f7 01       	movw	r30, r14
    7570:	60 82       	st	Z, r6
    7572:	c7 01       	movw	r24, r14
    7574:	01 96       	adiw	r24, 0x01	; 1
    7576:	7c 01       	movw	r14, r24
    7578:	01 50       	subi	r16, 0x01	; 1
    757a:	11 09       	sbc	r17, r1
    757c:	71 f0       	breq	.+28     	; 0x759a <vfscanf+0x1fe>
    757e:	c6 01       	movw	r24, r12
    7580:	0e 94 ee 3c 	call	0x79dc	; 0x79dc <fgetc>
    7584:	3c 01       	movw	r6, r24
    7586:	97 fd       	sbrc	r25, 7
    7588:	08 c0       	rjmp	.+16     	; 0x759a <vfscanf+0x1fe>
    758a:	0e 94 98 3c 	call	0x7930	; 0x7930 <isspace>
    758e:	89 2b       	or	r24, r25
    7590:	59 f3       	breq	.-42     	; 0x7568 <vfscanf+0x1cc>
    7592:	b6 01       	movw	r22, r12
    7594:	c3 01       	movw	r24, r6
    7596:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <ungetc>
    759a:	e1 14       	cp	r14, r1
    759c:	f1 04       	cpc	r15, r1
    759e:	09 f1       	breq	.+66     	; 0x75e2 <vfscanf+0x246>
    75a0:	f7 01       	movw	r30, r14
    75a2:	10 82       	st	Z, r1
    75a4:	1e c0       	rjmp	.+60     	; 0x75e2 <vfscanf+0x246>
    75a6:	fb 2d       	mov	r31, r11
    75a8:	f0 64       	ori	r31, 0x40	; 64
    75aa:	bf 2e       	mov	r11, r31
    75ac:	07 c0       	rjmp	.+14     	; 0x75bc <vfscanf+0x220>
    75ae:	8b 2d       	mov	r24, r11
    75b0:	80 62       	ori	r24, 0x20	; 32
    75b2:	b8 2e       	mov	r11, r24
    75b4:	03 c0       	rjmp	.+6      	; 0x75bc <vfscanf+0x220>
    75b6:	9b 2d       	mov	r25, r11
    75b8:	90 61       	ori	r25, 0x10	; 16
    75ba:	b9 2e       	mov	r11, r25
    75bc:	2b 2d       	mov	r18, r11
    75be:	a7 01       	movw	r20, r14
    75c0:	b8 01       	movw	r22, r16
    75c2:	c6 01       	movw	r24, r12
    75c4:	0e 94 4e 37 	call	0x6e9c	; 0x6e9c <conv_int>
    75c8:	05 c0       	rjmp	.+10     	; 0x75d4 <vfscanf+0x238>
    75ca:	a7 01       	movw	r20, r14
    75cc:	b8 01       	movw	r22, r16
    75ce:	c6 01       	movw	r24, r12
    75d0:	0e 94 82 38 	call	0x7104	; 0x7104 <conv_flt>
    75d4:	81 11       	cpse	r24, r1
    75d6:	05 c0       	rjmp	.+10     	; 0x75e2 <vfscanf+0x246>
    75d8:	f6 01       	movw	r30, r12
    75da:	83 81       	ldd	r24, Z+3	; 0x03
    75dc:	80 73       	andi	r24, 0x30	; 48
    75de:	29 f4       	brne	.+10     	; 0x75ea <vfscanf+0x24e>
    75e0:	06 c0       	rjmp	.+12     	; 0x75ee <vfscanf+0x252>
    75e2:	b0 fc       	sbrc	r11, 0
    75e4:	e8 ce       	rjmp	.-560    	; 0x73b6 <vfscanf+0x1a>
    75e6:	a3 94       	inc	r10
    75e8:	e6 ce       	rjmp	.-564    	; 0x73b6 <vfscanf+0x1a>
    75ea:	aa 20       	and	r10, r10
    75ec:	19 f0       	breq	.+6      	; 0x75f4 <vfscanf+0x258>
    75ee:	8a 2d       	mov	r24, r10
    75f0:	90 e0       	ldi	r25, 0x00	; 0
    75f2:	02 c0       	rjmp	.+4      	; 0x75f8 <vfscanf+0x25c>
    75f4:	8f ef       	ldi	r24, 0xFF	; 255
    75f6:	9f ef       	ldi	r25, 0xFF	; 255
    75f8:	21 96       	adiw	r28, 0x01	; 1
    75fa:	e0 e1       	ldi	r30, 0x10	; 16
    75fc:	0c 94 93 3b 	jmp	0x7726	; 0x7726 <__epilogue_restores__+0x4>

00007600 <__divmodhi4>:
    7600:	97 fb       	bst	r25, 7
    7602:	07 2e       	mov	r0, r23
    7604:	16 f4       	brtc	.+4      	; 0x760a <__divmodhi4+0xa>
    7606:	00 94       	com	r0
    7608:	07 d0       	rcall	.+14     	; 0x7618 <__divmodhi4_neg1>
    760a:	77 fd       	sbrc	r23, 7
    760c:	09 d0       	rcall	.+18     	; 0x7620 <__divmodhi4_neg2>
    760e:	0e 94 ac 3b 	call	0x7758	; 0x7758 <__udivmodhi4>
    7612:	07 fc       	sbrc	r0, 7
    7614:	05 d0       	rcall	.+10     	; 0x7620 <__divmodhi4_neg2>
    7616:	3e f4       	brtc	.+14     	; 0x7626 <__divmodhi4_exit>

00007618 <__divmodhi4_neg1>:
    7618:	90 95       	com	r25
    761a:	81 95       	neg	r24
    761c:	9f 4f       	sbci	r25, 0xFF	; 255
    761e:	08 95       	ret

00007620 <__divmodhi4_neg2>:
    7620:	70 95       	com	r23
    7622:	61 95       	neg	r22
    7624:	7f 4f       	sbci	r23, 0xFF	; 255

00007626 <__divmodhi4_exit>:
    7626:	08 95       	ret

00007628 <__udivmodsi4>:
    7628:	a1 e2       	ldi	r26, 0x21	; 33
    762a:	1a 2e       	mov	r1, r26
    762c:	aa 1b       	sub	r26, r26
    762e:	bb 1b       	sub	r27, r27
    7630:	fd 01       	movw	r30, r26
    7632:	0d c0       	rjmp	.+26     	; 0x764e <__udivmodsi4_ep>

00007634 <__udivmodsi4_loop>:
    7634:	aa 1f       	adc	r26, r26
    7636:	bb 1f       	adc	r27, r27
    7638:	ee 1f       	adc	r30, r30
    763a:	ff 1f       	adc	r31, r31
    763c:	a2 17       	cp	r26, r18
    763e:	b3 07       	cpc	r27, r19
    7640:	e4 07       	cpc	r30, r20
    7642:	f5 07       	cpc	r31, r21
    7644:	20 f0       	brcs	.+8      	; 0x764e <__udivmodsi4_ep>
    7646:	a2 1b       	sub	r26, r18
    7648:	b3 0b       	sbc	r27, r19
    764a:	e4 0b       	sbc	r30, r20
    764c:	f5 0b       	sbc	r31, r21

0000764e <__udivmodsi4_ep>:
    764e:	66 1f       	adc	r22, r22
    7650:	77 1f       	adc	r23, r23
    7652:	88 1f       	adc	r24, r24
    7654:	99 1f       	adc	r25, r25
    7656:	1a 94       	dec	r1
    7658:	69 f7       	brne	.-38     	; 0x7634 <__udivmodsi4_loop>
    765a:	60 95       	com	r22
    765c:	70 95       	com	r23
    765e:	80 95       	com	r24
    7660:	90 95       	com	r25
    7662:	9b 01       	movw	r18, r22
    7664:	ac 01       	movw	r20, r24
    7666:	bd 01       	movw	r22, r26
    7668:	cf 01       	movw	r24, r30
    766a:	08 95       	ret

0000766c <__divmodsi4>:
    766c:	05 2e       	mov	r0, r21
    766e:	97 fb       	bst	r25, 7
    7670:	1e f4       	brtc	.+6      	; 0x7678 <__divmodsi4+0xc>
    7672:	00 94       	com	r0
    7674:	0e 94 4d 3b 	call	0x769a	; 0x769a <__negsi2>
    7678:	57 fd       	sbrc	r21, 7
    767a:	07 d0       	rcall	.+14     	; 0x768a <__divmodsi4_neg2>
    767c:	0e 94 14 3b 	call	0x7628	; 0x7628 <__udivmodsi4>
    7680:	07 fc       	sbrc	r0, 7
    7682:	03 d0       	rcall	.+6      	; 0x768a <__divmodsi4_neg2>
    7684:	4e f4       	brtc	.+18     	; 0x7698 <__divmodsi4_exit>
    7686:	0c 94 4d 3b 	jmp	0x769a	; 0x769a <__negsi2>

0000768a <__divmodsi4_neg2>:
    768a:	50 95       	com	r21
    768c:	40 95       	com	r20
    768e:	30 95       	com	r19
    7690:	21 95       	neg	r18
    7692:	3f 4f       	sbci	r19, 0xFF	; 255
    7694:	4f 4f       	sbci	r20, 0xFF	; 255
    7696:	5f 4f       	sbci	r21, 0xFF	; 255

00007698 <__divmodsi4_exit>:
    7698:	08 95       	ret

0000769a <__negsi2>:
    769a:	90 95       	com	r25
    769c:	80 95       	com	r24
    769e:	70 95       	com	r23
    76a0:	61 95       	neg	r22
    76a2:	7f 4f       	sbci	r23, 0xFF	; 255
    76a4:	8f 4f       	sbci	r24, 0xFF	; 255
    76a6:	9f 4f       	sbci	r25, 0xFF	; 255
    76a8:	08 95       	ret

000076aa <__tablejump2__>:
    76aa:	ee 0f       	add	r30, r30
    76ac:	ff 1f       	adc	r31, r31
    76ae:	05 90       	lpm	r0, Z+
    76b0:	f4 91       	lpm	r31, Z
    76b2:	e0 2d       	mov	r30, r0
    76b4:	09 94       	ijmp

000076b6 <__umulhisi3>:
    76b6:	a2 9f       	mul	r26, r18
    76b8:	b0 01       	movw	r22, r0
    76ba:	b3 9f       	mul	r27, r19
    76bc:	c0 01       	movw	r24, r0
    76be:	a3 9f       	mul	r26, r19
    76c0:	70 0d       	add	r23, r0
    76c2:	81 1d       	adc	r24, r1
    76c4:	11 24       	eor	r1, r1
    76c6:	91 1d       	adc	r25, r1
    76c8:	b2 9f       	mul	r27, r18
    76ca:	70 0d       	add	r23, r0
    76cc:	81 1d       	adc	r24, r1
    76ce:	11 24       	eor	r1, r1
    76d0:	91 1d       	adc	r25, r1
    76d2:	08 95       	ret

000076d4 <__muluhisi3>:
    76d4:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <__umulhisi3>
    76d8:	a5 9f       	mul	r26, r21
    76da:	90 0d       	add	r25, r0
    76dc:	b4 9f       	mul	r27, r20
    76de:	90 0d       	add	r25, r0
    76e0:	a4 9f       	mul	r26, r20
    76e2:	80 0d       	add	r24, r0
    76e4:	91 1d       	adc	r25, r1
    76e6:	11 24       	eor	r1, r1
    76e8:	08 95       	ret

000076ea <__prologue_saves__>:
    76ea:	2f 92       	push	r2
    76ec:	3f 92       	push	r3
    76ee:	4f 92       	push	r4
    76f0:	5f 92       	push	r5
    76f2:	6f 92       	push	r6
    76f4:	7f 92       	push	r7
    76f6:	8f 92       	push	r8
    76f8:	9f 92       	push	r9
    76fa:	af 92       	push	r10
    76fc:	bf 92       	push	r11
    76fe:	cf 92       	push	r12
    7700:	df 92       	push	r13
    7702:	ef 92       	push	r14
    7704:	ff 92       	push	r15
    7706:	0f 93       	push	r16
    7708:	1f 93       	push	r17
    770a:	cf 93       	push	r28
    770c:	df 93       	push	r29
    770e:	cd b7       	in	r28, 0x3d	; 61
    7710:	de b7       	in	r29, 0x3e	; 62
    7712:	ca 1b       	sub	r28, r26
    7714:	db 0b       	sbc	r29, r27
    7716:	0f b6       	in	r0, 0x3f	; 63
    7718:	f8 94       	cli
    771a:	de bf       	out	0x3e, r29	; 62
    771c:	0f be       	out	0x3f, r0	; 63
    771e:	cd bf       	out	0x3d, r28	; 61
    7720:	09 94       	ijmp

00007722 <__epilogue_restores__>:
    7722:	2a 88       	ldd	r2, Y+18	; 0x12
    7724:	39 88       	ldd	r3, Y+17	; 0x11
    7726:	48 88       	ldd	r4, Y+16	; 0x10
    7728:	5f 84       	ldd	r5, Y+15	; 0x0f
    772a:	6e 84       	ldd	r6, Y+14	; 0x0e
    772c:	7d 84       	ldd	r7, Y+13	; 0x0d
    772e:	8c 84       	ldd	r8, Y+12	; 0x0c
    7730:	9b 84       	ldd	r9, Y+11	; 0x0b
    7732:	aa 84       	ldd	r10, Y+10	; 0x0a
    7734:	b9 84       	ldd	r11, Y+9	; 0x09
    7736:	c8 84       	ldd	r12, Y+8	; 0x08
    7738:	df 80       	ldd	r13, Y+7	; 0x07
    773a:	ee 80       	ldd	r14, Y+6	; 0x06
    773c:	fd 80       	ldd	r15, Y+5	; 0x05
    773e:	0c 81       	ldd	r16, Y+4	; 0x04
    7740:	1b 81       	ldd	r17, Y+3	; 0x03
    7742:	aa 81       	ldd	r26, Y+2	; 0x02
    7744:	b9 81       	ldd	r27, Y+1	; 0x01
    7746:	ce 0f       	add	r28, r30
    7748:	d1 1d       	adc	r29, r1
    774a:	0f b6       	in	r0, 0x3f	; 63
    774c:	f8 94       	cli
    774e:	de bf       	out	0x3e, r29	; 62
    7750:	0f be       	out	0x3f, r0	; 63
    7752:	cd bf       	out	0x3d, r28	; 61
    7754:	ed 01       	movw	r28, r26
    7756:	08 95       	ret

00007758 <__udivmodhi4>:
    7758:	aa 1b       	sub	r26, r26
    775a:	bb 1b       	sub	r27, r27
    775c:	51 e1       	ldi	r21, 0x11	; 17
    775e:	07 c0       	rjmp	.+14     	; 0x776e <__udivmodhi4_ep>

00007760 <__udivmodhi4_loop>:
    7760:	aa 1f       	adc	r26, r26
    7762:	bb 1f       	adc	r27, r27
    7764:	a6 17       	cp	r26, r22
    7766:	b7 07       	cpc	r27, r23
    7768:	10 f0       	brcs	.+4      	; 0x776e <__udivmodhi4_ep>
    776a:	a6 1b       	sub	r26, r22
    776c:	b7 0b       	sbc	r27, r23

0000776e <__udivmodhi4_ep>:
    776e:	88 1f       	adc	r24, r24
    7770:	99 1f       	adc	r25, r25
    7772:	5a 95       	dec	r21
    7774:	a9 f7       	brne	.-22     	; 0x7760 <__udivmodhi4_loop>
    7776:	80 95       	com	r24
    7778:	90 95       	com	r25
    777a:	bc 01       	movw	r22, r24
    777c:	cd 01       	movw	r24, r26
    777e:	08 95       	ret

00007780 <__ftoa_engine>:
    7780:	28 30       	cpi	r18, 0x08	; 8
    7782:	08 f0       	brcs	.+2      	; 0x7786 <__ftoa_engine+0x6>
    7784:	27 e0       	ldi	r18, 0x07	; 7
    7786:	33 27       	eor	r19, r19
    7788:	da 01       	movw	r26, r20
    778a:	99 0f       	add	r25, r25
    778c:	31 1d       	adc	r19, r1
    778e:	87 fd       	sbrc	r24, 7
    7790:	91 60       	ori	r25, 0x01	; 1
    7792:	00 96       	adiw	r24, 0x00	; 0
    7794:	61 05       	cpc	r22, r1
    7796:	71 05       	cpc	r23, r1
    7798:	39 f4       	brne	.+14     	; 0x77a8 <__ftoa_engine+0x28>
    779a:	32 60       	ori	r19, 0x02	; 2
    779c:	2e 5f       	subi	r18, 0xFE	; 254
    779e:	3d 93       	st	X+, r19
    77a0:	30 e3       	ldi	r19, 0x30	; 48
    77a2:	2a 95       	dec	r18
    77a4:	e1 f7       	brne	.-8      	; 0x779e <__ftoa_engine+0x1e>
    77a6:	08 95       	ret
    77a8:	9f 3f       	cpi	r25, 0xFF	; 255
    77aa:	30 f0       	brcs	.+12     	; 0x77b8 <__ftoa_engine+0x38>
    77ac:	80 38       	cpi	r24, 0x80	; 128
    77ae:	71 05       	cpc	r23, r1
    77b0:	61 05       	cpc	r22, r1
    77b2:	09 f0       	breq	.+2      	; 0x77b6 <__ftoa_engine+0x36>
    77b4:	3c 5f       	subi	r19, 0xFC	; 252
    77b6:	3c 5f       	subi	r19, 0xFC	; 252
    77b8:	3d 93       	st	X+, r19
    77ba:	91 30       	cpi	r25, 0x01	; 1
    77bc:	08 f0       	brcs	.+2      	; 0x77c0 <__ftoa_engine+0x40>
    77be:	80 68       	ori	r24, 0x80	; 128
    77c0:	91 1d       	adc	r25, r1
    77c2:	df 93       	push	r29
    77c4:	cf 93       	push	r28
    77c6:	1f 93       	push	r17
    77c8:	0f 93       	push	r16
    77ca:	ff 92       	push	r15
    77cc:	ef 92       	push	r14
    77ce:	19 2f       	mov	r17, r25
    77d0:	98 7f       	andi	r25, 0xF8	; 248
    77d2:	96 95       	lsr	r25
    77d4:	e9 2f       	mov	r30, r25
    77d6:	96 95       	lsr	r25
    77d8:	96 95       	lsr	r25
    77da:	e9 0f       	add	r30, r25
    77dc:	ff 27       	eor	r31, r31
    77de:	e8 5f       	subi	r30, 0xF8	; 248
    77e0:	fd 4f       	sbci	r31, 0xFD	; 253
    77e2:	99 27       	eor	r25, r25
    77e4:	33 27       	eor	r19, r19
    77e6:	ee 24       	eor	r14, r14
    77e8:	ff 24       	eor	r15, r15
    77ea:	a7 01       	movw	r20, r14
    77ec:	e7 01       	movw	r28, r14
    77ee:	05 90       	lpm	r0, Z+
    77f0:	08 94       	sec
    77f2:	07 94       	ror	r0
    77f4:	28 f4       	brcc	.+10     	; 0x7800 <__ftoa_engine+0x80>
    77f6:	36 0f       	add	r19, r22
    77f8:	e7 1e       	adc	r14, r23
    77fa:	f8 1e       	adc	r15, r24
    77fc:	49 1f       	adc	r20, r25
    77fe:	51 1d       	adc	r21, r1
    7800:	66 0f       	add	r22, r22
    7802:	77 1f       	adc	r23, r23
    7804:	88 1f       	adc	r24, r24
    7806:	99 1f       	adc	r25, r25
    7808:	06 94       	lsr	r0
    780a:	a1 f7       	brne	.-24     	; 0x77f4 <__ftoa_engine+0x74>
    780c:	05 90       	lpm	r0, Z+
    780e:	07 94       	ror	r0
    7810:	28 f4       	brcc	.+10     	; 0x781c <__ftoa_engine+0x9c>
    7812:	e7 0e       	add	r14, r23
    7814:	f8 1e       	adc	r15, r24
    7816:	49 1f       	adc	r20, r25
    7818:	56 1f       	adc	r21, r22
    781a:	c1 1d       	adc	r28, r1
    781c:	77 0f       	add	r23, r23
    781e:	88 1f       	adc	r24, r24
    7820:	99 1f       	adc	r25, r25
    7822:	66 1f       	adc	r22, r22
    7824:	06 94       	lsr	r0
    7826:	a1 f7       	brne	.-24     	; 0x7810 <__ftoa_engine+0x90>
    7828:	05 90       	lpm	r0, Z+
    782a:	07 94       	ror	r0
    782c:	28 f4       	brcc	.+10     	; 0x7838 <__ftoa_engine+0xb8>
    782e:	f8 0e       	add	r15, r24
    7830:	49 1f       	adc	r20, r25
    7832:	56 1f       	adc	r21, r22
    7834:	c7 1f       	adc	r28, r23
    7836:	d1 1d       	adc	r29, r1
    7838:	88 0f       	add	r24, r24
    783a:	99 1f       	adc	r25, r25
    783c:	66 1f       	adc	r22, r22
    783e:	77 1f       	adc	r23, r23
    7840:	06 94       	lsr	r0
    7842:	a1 f7       	brne	.-24     	; 0x782c <__ftoa_engine+0xac>
    7844:	05 90       	lpm	r0, Z+
    7846:	07 94       	ror	r0
    7848:	20 f4       	brcc	.+8      	; 0x7852 <__ftoa_engine+0xd2>
    784a:	49 0f       	add	r20, r25
    784c:	56 1f       	adc	r21, r22
    784e:	c7 1f       	adc	r28, r23
    7850:	d8 1f       	adc	r29, r24
    7852:	99 0f       	add	r25, r25
    7854:	66 1f       	adc	r22, r22
    7856:	77 1f       	adc	r23, r23
    7858:	88 1f       	adc	r24, r24
    785a:	06 94       	lsr	r0
    785c:	a9 f7       	brne	.-22     	; 0x7848 <__ftoa_engine+0xc8>
    785e:	84 91       	lpm	r24, Z
    7860:	10 95       	com	r17
    7862:	17 70       	andi	r17, 0x07	; 7
    7864:	41 f0       	breq	.+16     	; 0x7876 <__ftoa_engine+0xf6>
    7866:	d6 95       	lsr	r29
    7868:	c7 95       	ror	r28
    786a:	57 95       	ror	r21
    786c:	47 95       	ror	r20
    786e:	f7 94       	ror	r15
    7870:	e7 94       	ror	r14
    7872:	1a 95       	dec	r17
    7874:	c1 f7       	brne	.-16     	; 0x7866 <__ftoa_engine+0xe6>
    7876:	ee ea       	ldi	r30, 0xAE	; 174
    7878:	f1 e0       	ldi	r31, 0x01	; 1
    787a:	68 94       	set
    787c:	15 90       	lpm	r1, Z+
    787e:	15 91       	lpm	r17, Z+
    7880:	35 91       	lpm	r19, Z+
    7882:	65 91       	lpm	r22, Z+
    7884:	95 91       	lpm	r25, Z+
    7886:	05 90       	lpm	r0, Z+
    7888:	7f e2       	ldi	r23, 0x2F	; 47
    788a:	73 95       	inc	r23
    788c:	e1 18       	sub	r14, r1
    788e:	f1 0a       	sbc	r15, r17
    7890:	43 0b       	sbc	r20, r19
    7892:	56 0b       	sbc	r21, r22
    7894:	c9 0b       	sbc	r28, r25
    7896:	d0 09       	sbc	r29, r0
    7898:	c0 f7       	brcc	.-16     	; 0x788a <__ftoa_engine+0x10a>
    789a:	e1 0c       	add	r14, r1
    789c:	f1 1e       	adc	r15, r17
    789e:	43 1f       	adc	r20, r19
    78a0:	56 1f       	adc	r21, r22
    78a2:	c9 1f       	adc	r28, r25
    78a4:	d0 1d       	adc	r29, r0
    78a6:	7e f4       	brtc	.+30     	; 0x78c6 <__ftoa_engine+0x146>
    78a8:	70 33       	cpi	r23, 0x30	; 48
    78aa:	11 f4       	brne	.+4      	; 0x78b0 <__ftoa_engine+0x130>
    78ac:	8a 95       	dec	r24
    78ae:	e6 cf       	rjmp	.-52     	; 0x787c <__ftoa_engine+0xfc>
    78b0:	e8 94       	clt
    78b2:	01 50       	subi	r16, 0x01	; 1
    78b4:	30 f0       	brcs	.+12     	; 0x78c2 <__ftoa_engine+0x142>
    78b6:	08 0f       	add	r16, r24
    78b8:	0a f4       	brpl	.+2      	; 0x78bc <__ftoa_engine+0x13c>
    78ba:	00 27       	eor	r16, r16
    78bc:	02 17       	cp	r16, r18
    78be:	08 f4       	brcc	.+2      	; 0x78c2 <__ftoa_engine+0x142>
    78c0:	20 2f       	mov	r18, r16
    78c2:	23 95       	inc	r18
    78c4:	02 2f       	mov	r16, r18
    78c6:	7a 33       	cpi	r23, 0x3A	; 58
    78c8:	28 f0       	brcs	.+10     	; 0x78d4 <__ftoa_engine+0x154>
    78ca:	79 e3       	ldi	r23, 0x39	; 57
    78cc:	7d 93       	st	X+, r23
    78ce:	2a 95       	dec	r18
    78d0:	e9 f7       	brne	.-6      	; 0x78cc <__ftoa_engine+0x14c>
    78d2:	10 c0       	rjmp	.+32     	; 0x78f4 <__ftoa_engine+0x174>
    78d4:	7d 93       	st	X+, r23
    78d6:	2a 95       	dec	r18
    78d8:	89 f6       	brne	.-94     	; 0x787c <__ftoa_engine+0xfc>
    78da:	06 94       	lsr	r0
    78dc:	97 95       	ror	r25
    78de:	67 95       	ror	r22
    78e0:	37 95       	ror	r19
    78e2:	17 95       	ror	r17
    78e4:	17 94       	ror	r1
    78e6:	e1 18       	sub	r14, r1
    78e8:	f1 0a       	sbc	r15, r17
    78ea:	43 0b       	sbc	r20, r19
    78ec:	56 0b       	sbc	r21, r22
    78ee:	c9 0b       	sbc	r28, r25
    78f0:	d0 09       	sbc	r29, r0
    78f2:	98 f0       	brcs	.+38     	; 0x791a <__ftoa_engine+0x19a>
    78f4:	23 95       	inc	r18
    78f6:	7e 91       	ld	r23, -X
    78f8:	73 95       	inc	r23
    78fa:	7a 33       	cpi	r23, 0x3A	; 58
    78fc:	08 f0       	brcs	.+2      	; 0x7900 <__ftoa_engine+0x180>
    78fe:	70 e3       	ldi	r23, 0x30	; 48
    7900:	7c 93       	st	X, r23
    7902:	20 13       	cpse	r18, r16
    7904:	b8 f7       	brcc	.-18     	; 0x78f4 <__ftoa_engine+0x174>
    7906:	7e 91       	ld	r23, -X
    7908:	70 61       	ori	r23, 0x10	; 16
    790a:	7d 93       	st	X+, r23
    790c:	30 f0       	brcs	.+12     	; 0x791a <__ftoa_engine+0x19a>
    790e:	83 95       	inc	r24
    7910:	71 e3       	ldi	r23, 0x31	; 49
    7912:	7d 93       	st	X+, r23
    7914:	70 e3       	ldi	r23, 0x30	; 48
    7916:	2a 95       	dec	r18
    7918:	e1 f7       	brne	.-8      	; 0x7912 <__ftoa_engine+0x192>
    791a:	11 24       	eor	r1, r1
    791c:	ef 90       	pop	r14
    791e:	ff 90       	pop	r15
    7920:	0f 91       	pop	r16
    7922:	1f 91       	pop	r17
    7924:	cf 91       	pop	r28
    7926:	df 91       	pop	r29
    7928:	99 27       	eor	r25, r25
    792a:	87 fd       	sbrc	r24, 7
    792c:	90 95       	com	r25
    792e:	08 95       	ret

00007930 <isspace>:
    7930:	91 11       	cpse	r25, r1
    7932:	0c 94 47 3e 	jmp	0x7c8e	; 0x7c8e <__ctype_isfalse>
    7936:	80 32       	cpi	r24, 0x20	; 32
    7938:	19 f0       	breq	.+6      	; 0x7940 <isspace+0x10>
    793a:	89 50       	subi	r24, 0x09	; 9
    793c:	85 50       	subi	r24, 0x05	; 5
    793e:	c8 f7       	brcc	.-14     	; 0x7932 <isspace+0x2>
    7940:	08 95       	ret

00007942 <tolower>:
    7942:	91 11       	cpse	r25, r1
    7944:	08 95       	ret
    7946:	81 54       	subi	r24, 0x41	; 65
    7948:	8a 51       	subi	r24, 0x1A	; 26
    794a:	08 f4       	brcc	.+2      	; 0x794e <tolower+0xc>
    794c:	80 5e       	subi	r24, 0xE0	; 224
    794e:	85 5a       	subi	r24, 0xA5	; 165
    7950:	08 95       	ret

00007952 <strchr_P>:
    7952:	fc 01       	movw	r30, r24
    7954:	05 90       	lpm	r0, Z+
    7956:	06 16       	cp	r0, r22
    7958:	21 f0       	breq	.+8      	; 0x7962 <strchr_P+0x10>
    795a:	00 20       	and	r0, r0
    795c:	d9 f7       	brne	.-10     	; 0x7954 <strchr_P+0x2>
    795e:	c0 01       	movw	r24, r0
    7960:	08 95       	ret
    7962:	31 97       	sbiw	r30, 0x01	; 1
    7964:	cf 01       	movw	r24, r30
    7966:	08 95       	ret

00007968 <strnlen_P>:
    7968:	fc 01       	movw	r30, r24
    796a:	05 90       	lpm	r0, Z+
    796c:	61 50       	subi	r22, 0x01	; 1
    796e:	70 40       	sbci	r23, 0x00	; 0
    7970:	01 10       	cpse	r0, r1
    7972:	d8 f7       	brcc	.-10     	; 0x796a <strnlen_P+0x2>
    7974:	80 95       	com	r24
    7976:	90 95       	com	r25
    7978:	8e 0f       	add	r24, r30
    797a:	9f 1f       	adc	r25, r31
    797c:	08 95       	ret

0000797e <memcmp>:
    797e:	fb 01       	movw	r30, r22
    7980:	dc 01       	movw	r26, r24
    7982:	04 c0       	rjmp	.+8      	; 0x798c <memcmp+0xe>
    7984:	8d 91       	ld	r24, X+
    7986:	01 90       	ld	r0, Z+
    7988:	80 19       	sub	r24, r0
    798a:	21 f4       	brne	.+8      	; 0x7994 <memcmp+0x16>
    798c:	41 50       	subi	r20, 0x01	; 1
    798e:	50 40       	sbci	r21, 0x00	; 0
    7990:	c8 f7       	brcc	.-14     	; 0x7984 <memcmp+0x6>
    7992:	88 1b       	sub	r24, r24
    7994:	99 0b       	sbc	r25, r25
    7996:	08 95       	ret

00007998 <memcpy>:
    7998:	fb 01       	movw	r30, r22
    799a:	dc 01       	movw	r26, r24
    799c:	02 c0       	rjmp	.+4      	; 0x79a2 <memcpy+0xa>
    799e:	01 90       	ld	r0, Z+
    79a0:	0d 92       	st	X+, r0
    79a2:	41 50       	subi	r20, 0x01	; 1
    79a4:	50 40       	sbci	r21, 0x00	; 0
    79a6:	d8 f7       	brcc	.-10     	; 0x799e <memcpy+0x6>
    79a8:	08 95       	ret

000079aa <strncmp>:
    79aa:	fb 01       	movw	r30, r22
    79ac:	dc 01       	movw	r26, r24
    79ae:	41 50       	subi	r20, 0x01	; 1
    79b0:	50 40       	sbci	r21, 0x00	; 0
    79b2:	30 f0       	brcs	.+12     	; 0x79c0 <strncmp+0x16>
    79b4:	8d 91       	ld	r24, X+
    79b6:	01 90       	ld	r0, Z+
    79b8:	80 19       	sub	r24, r0
    79ba:	19 f4       	brne	.+6      	; 0x79c2 <strncmp+0x18>
    79bc:	00 20       	and	r0, r0
    79be:	b9 f7       	brne	.-18     	; 0x79ae <strncmp+0x4>
    79c0:	88 1b       	sub	r24, r24
    79c2:	99 0b       	sbc	r25, r25
    79c4:	08 95       	ret

000079c6 <strnlen>:
    79c6:	fc 01       	movw	r30, r24
    79c8:	61 50       	subi	r22, 0x01	; 1
    79ca:	70 40       	sbci	r23, 0x00	; 0
    79cc:	01 90       	ld	r0, Z+
    79ce:	01 10       	cpse	r0, r1
    79d0:	d8 f7       	brcc	.-10     	; 0x79c8 <strnlen+0x2>
    79d2:	80 95       	com	r24
    79d4:	90 95       	com	r25
    79d6:	8e 0f       	add	r24, r30
    79d8:	9f 1f       	adc	r25, r31
    79da:	08 95       	ret

000079dc <fgetc>:
    79dc:	cf 93       	push	r28
    79de:	df 93       	push	r29
    79e0:	ec 01       	movw	r28, r24
    79e2:	2b 81       	ldd	r18, Y+3	; 0x03
    79e4:	20 ff       	sbrs	r18, 0
    79e6:	33 c0       	rjmp	.+102    	; 0x7a4e <fgetc+0x72>
    79e8:	26 ff       	sbrs	r18, 6
    79ea:	0a c0       	rjmp	.+20     	; 0x7a00 <fgetc+0x24>
    79ec:	2f 7b       	andi	r18, 0xBF	; 191
    79ee:	2b 83       	std	Y+3, r18	; 0x03
    79f0:	8e 81       	ldd	r24, Y+6	; 0x06
    79f2:	9f 81       	ldd	r25, Y+7	; 0x07
    79f4:	01 96       	adiw	r24, 0x01	; 1
    79f6:	9f 83       	std	Y+7, r25	; 0x07
    79f8:	8e 83       	std	Y+6, r24	; 0x06
    79fa:	8a 81       	ldd	r24, Y+2	; 0x02
    79fc:	90 e0       	ldi	r25, 0x00	; 0
    79fe:	29 c0       	rjmp	.+82     	; 0x7a52 <fgetc+0x76>
    7a00:	22 ff       	sbrs	r18, 2
    7a02:	0f c0       	rjmp	.+30     	; 0x7a22 <fgetc+0x46>
    7a04:	e8 81       	ld	r30, Y
    7a06:	f9 81       	ldd	r31, Y+1	; 0x01
    7a08:	80 81       	ld	r24, Z
    7a0a:	08 2e       	mov	r0, r24
    7a0c:	00 0c       	add	r0, r0
    7a0e:	99 0b       	sbc	r25, r25
    7a10:	00 97       	sbiw	r24, 0x00	; 0
    7a12:	19 f4       	brne	.+6      	; 0x7a1a <fgetc+0x3e>
    7a14:	20 62       	ori	r18, 0x20	; 32
    7a16:	2b 83       	std	Y+3, r18	; 0x03
    7a18:	1a c0       	rjmp	.+52     	; 0x7a4e <fgetc+0x72>
    7a1a:	31 96       	adiw	r30, 0x01	; 1
    7a1c:	f9 83       	std	Y+1, r31	; 0x01
    7a1e:	e8 83       	st	Y, r30
    7a20:	0e c0       	rjmp	.+28     	; 0x7a3e <fgetc+0x62>
    7a22:	ea 85       	ldd	r30, Y+10	; 0x0a
    7a24:	fb 85       	ldd	r31, Y+11	; 0x0b
    7a26:	09 95       	icall
    7a28:	97 ff       	sbrs	r25, 7
    7a2a:	09 c0       	rjmp	.+18     	; 0x7a3e <fgetc+0x62>
    7a2c:	2b 81       	ldd	r18, Y+3	; 0x03
    7a2e:	01 96       	adiw	r24, 0x01	; 1
    7a30:	11 f0       	breq	.+4      	; 0x7a36 <fgetc+0x5a>
    7a32:	80 e2       	ldi	r24, 0x20	; 32
    7a34:	01 c0       	rjmp	.+2      	; 0x7a38 <fgetc+0x5c>
    7a36:	80 e1       	ldi	r24, 0x10	; 16
    7a38:	82 2b       	or	r24, r18
    7a3a:	8b 83       	std	Y+3, r24	; 0x03
    7a3c:	08 c0       	rjmp	.+16     	; 0x7a4e <fgetc+0x72>
    7a3e:	2e 81       	ldd	r18, Y+6	; 0x06
    7a40:	3f 81       	ldd	r19, Y+7	; 0x07
    7a42:	2f 5f       	subi	r18, 0xFF	; 255
    7a44:	3f 4f       	sbci	r19, 0xFF	; 255
    7a46:	3f 83       	std	Y+7, r19	; 0x07
    7a48:	2e 83       	std	Y+6, r18	; 0x06
    7a4a:	99 27       	eor	r25, r25
    7a4c:	02 c0       	rjmp	.+4      	; 0x7a52 <fgetc+0x76>
    7a4e:	8f ef       	ldi	r24, 0xFF	; 255
    7a50:	9f ef       	ldi	r25, 0xFF	; 255
    7a52:	df 91       	pop	r29
    7a54:	cf 91       	pop	r28
    7a56:	08 95       	ret

00007a58 <fputc>:
    7a58:	0f 93       	push	r16
    7a5a:	1f 93       	push	r17
    7a5c:	cf 93       	push	r28
    7a5e:	df 93       	push	r29
    7a60:	fb 01       	movw	r30, r22
    7a62:	23 81       	ldd	r18, Z+3	; 0x03
    7a64:	21 fd       	sbrc	r18, 1
    7a66:	03 c0       	rjmp	.+6      	; 0x7a6e <fputc+0x16>
    7a68:	8f ef       	ldi	r24, 0xFF	; 255
    7a6a:	9f ef       	ldi	r25, 0xFF	; 255
    7a6c:	28 c0       	rjmp	.+80     	; 0x7abe <fputc+0x66>
    7a6e:	22 ff       	sbrs	r18, 2
    7a70:	16 c0       	rjmp	.+44     	; 0x7a9e <fputc+0x46>
    7a72:	46 81       	ldd	r20, Z+6	; 0x06
    7a74:	57 81       	ldd	r21, Z+7	; 0x07
    7a76:	24 81       	ldd	r18, Z+4	; 0x04
    7a78:	35 81       	ldd	r19, Z+5	; 0x05
    7a7a:	42 17       	cp	r20, r18
    7a7c:	53 07       	cpc	r21, r19
    7a7e:	44 f4       	brge	.+16     	; 0x7a90 <fputc+0x38>
    7a80:	a0 81       	ld	r26, Z
    7a82:	b1 81       	ldd	r27, Z+1	; 0x01
    7a84:	9d 01       	movw	r18, r26
    7a86:	2f 5f       	subi	r18, 0xFF	; 255
    7a88:	3f 4f       	sbci	r19, 0xFF	; 255
    7a8a:	31 83       	std	Z+1, r19	; 0x01
    7a8c:	20 83       	st	Z, r18
    7a8e:	8c 93       	st	X, r24
    7a90:	26 81       	ldd	r18, Z+6	; 0x06
    7a92:	37 81       	ldd	r19, Z+7	; 0x07
    7a94:	2f 5f       	subi	r18, 0xFF	; 255
    7a96:	3f 4f       	sbci	r19, 0xFF	; 255
    7a98:	37 83       	std	Z+7, r19	; 0x07
    7a9a:	26 83       	std	Z+6, r18	; 0x06
    7a9c:	10 c0       	rjmp	.+32     	; 0x7abe <fputc+0x66>
    7a9e:	eb 01       	movw	r28, r22
    7aa0:	09 2f       	mov	r16, r25
    7aa2:	18 2f       	mov	r17, r24
    7aa4:	00 84       	ldd	r0, Z+8	; 0x08
    7aa6:	f1 85       	ldd	r31, Z+9	; 0x09
    7aa8:	e0 2d       	mov	r30, r0
    7aaa:	09 95       	icall
    7aac:	89 2b       	or	r24, r25
    7aae:	e1 f6       	brne	.-72     	; 0x7a68 <fputc+0x10>
    7ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    7ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    7ab4:	01 96       	adiw	r24, 0x01	; 1
    7ab6:	9f 83       	std	Y+7, r25	; 0x07
    7ab8:	8e 83       	std	Y+6, r24	; 0x06
    7aba:	81 2f       	mov	r24, r17
    7abc:	90 2f       	mov	r25, r16
    7abe:	df 91       	pop	r29
    7ac0:	cf 91       	pop	r28
    7ac2:	1f 91       	pop	r17
    7ac4:	0f 91       	pop	r16
    7ac6:	08 95       	ret

00007ac8 <snprintf>:
    7ac8:	ae e0       	ldi	r26, 0x0E	; 14
    7aca:	b0 e0       	ldi	r27, 0x00	; 0
    7acc:	ea e6       	ldi	r30, 0x6A	; 106
    7ace:	fd e3       	ldi	r31, 0x3D	; 61
    7ad0:	0c 94 83 3b 	jmp	0x7706	; 0x7706 <__prologue_saves__+0x1c>
    7ad4:	0d 89       	ldd	r16, Y+21	; 0x15
    7ad6:	1e 89       	ldd	r17, Y+22	; 0x16
    7ad8:	8f 89       	ldd	r24, Y+23	; 0x17
    7ada:	98 8d       	ldd	r25, Y+24	; 0x18
    7adc:	26 e0       	ldi	r18, 0x06	; 6
    7ade:	2c 83       	std	Y+4, r18	; 0x04
    7ae0:	1a 83       	std	Y+2, r17	; 0x02
    7ae2:	09 83       	std	Y+1, r16	; 0x01
    7ae4:	97 ff       	sbrs	r25, 7
    7ae6:	02 c0       	rjmp	.+4      	; 0x7aec <snprintf+0x24>
    7ae8:	80 e0       	ldi	r24, 0x00	; 0
    7aea:	90 e8       	ldi	r25, 0x80	; 128
    7aec:	01 97       	sbiw	r24, 0x01	; 1
    7aee:	9e 83       	std	Y+6, r25	; 0x06
    7af0:	8d 83       	std	Y+5, r24	; 0x05
    7af2:	ae 01       	movw	r20, r28
    7af4:	45 5e       	subi	r20, 0xE5	; 229
    7af6:	5f 4f       	sbci	r21, 0xFF	; 255
    7af8:	69 8d       	ldd	r22, Y+25	; 0x19
    7afa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7afc:	ce 01       	movw	r24, r28
    7afe:	01 96       	adiw	r24, 0x01	; 1
    7b00:	0e 94 8d 33 	call	0x671a	; 0x671a <vfprintf>
    7b04:	4d 81       	ldd	r20, Y+5	; 0x05
    7b06:	5e 81       	ldd	r21, Y+6	; 0x06
    7b08:	57 fd       	sbrc	r21, 7
    7b0a:	0a c0       	rjmp	.+20     	; 0x7b20 <snprintf+0x58>
    7b0c:	2f 81       	ldd	r18, Y+7	; 0x07
    7b0e:	38 85       	ldd	r19, Y+8	; 0x08
    7b10:	42 17       	cp	r20, r18
    7b12:	53 07       	cpc	r21, r19
    7b14:	0c f4       	brge	.+2      	; 0x7b18 <snprintf+0x50>
    7b16:	9a 01       	movw	r18, r20
    7b18:	f8 01       	movw	r30, r16
    7b1a:	e2 0f       	add	r30, r18
    7b1c:	f3 1f       	adc	r31, r19
    7b1e:	10 82       	st	Z, r1
    7b20:	2e 96       	adiw	r28, 0x0e	; 14
    7b22:	e4 e0       	ldi	r30, 0x04	; 4
    7b24:	0c 94 9f 3b 	jmp	0x773e	; 0x773e <__epilogue_restores__+0x1c>

00007b28 <sprintf>:
    7b28:	ae e0       	ldi	r26, 0x0E	; 14
    7b2a:	b0 e0       	ldi	r27, 0x00	; 0
    7b2c:	ea e9       	ldi	r30, 0x9A	; 154
    7b2e:	fd e3       	ldi	r31, 0x3D	; 61
    7b30:	0c 94 83 3b 	jmp	0x7706	; 0x7706 <__prologue_saves__+0x1c>
    7b34:	0d 89       	ldd	r16, Y+21	; 0x15
    7b36:	1e 89       	ldd	r17, Y+22	; 0x16
    7b38:	86 e0       	ldi	r24, 0x06	; 6
    7b3a:	8c 83       	std	Y+4, r24	; 0x04
    7b3c:	1a 83       	std	Y+2, r17	; 0x02
    7b3e:	09 83       	std	Y+1, r16	; 0x01
    7b40:	8f ef       	ldi	r24, 0xFF	; 255
    7b42:	9f e7       	ldi	r25, 0x7F	; 127
    7b44:	9e 83       	std	Y+6, r25	; 0x06
    7b46:	8d 83       	std	Y+5, r24	; 0x05
    7b48:	ae 01       	movw	r20, r28
    7b4a:	47 5e       	subi	r20, 0xE7	; 231
    7b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    7b4e:	6f 89       	ldd	r22, Y+23	; 0x17
    7b50:	78 8d       	ldd	r23, Y+24	; 0x18
    7b52:	ce 01       	movw	r24, r28
    7b54:	01 96       	adiw	r24, 0x01	; 1
    7b56:	0e 94 8d 33 	call	0x671a	; 0x671a <vfprintf>
    7b5a:	2f 81       	ldd	r18, Y+7	; 0x07
    7b5c:	38 85       	ldd	r19, Y+8	; 0x08
    7b5e:	f8 01       	movw	r30, r16
    7b60:	e2 0f       	add	r30, r18
    7b62:	f3 1f       	adc	r31, r19
    7b64:	10 82       	st	Z, r1
    7b66:	2e 96       	adiw	r28, 0x0e	; 14
    7b68:	e4 e0       	ldi	r30, 0x04	; 4
    7b6a:	0c 94 9f 3b 	jmp	0x773e	; 0x773e <__epilogue_restores__+0x1c>

00007b6e <sscanf>:
    7b6e:	ae e0       	ldi	r26, 0x0E	; 14
    7b70:	b0 e0       	ldi	r27, 0x00	; 0
    7b72:	ed eb       	ldi	r30, 0xBD	; 189
    7b74:	fd e3       	ldi	r31, 0x3D	; 61
    7b76:	0c 94 85 3b 	jmp	0x770a	; 0x770a <__prologue_saves__+0x20>
    7b7a:	85 e0       	ldi	r24, 0x05	; 5
    7b7c:	8c 83       	std	Y+4, r24	; 0x04
    7b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    7b80:	9c 89       	ldd	r25, Y+20	; 0x14
    7b82:	9a 83       	std	Y+2, r25	; 0x02
    7b84:	89 83       	std	Y+1, r24	; 0x01
    7b86:	ae 01       	movw	r20, r28
    7b88:	49 5e       	subi	r20, 0xE9	; 233
    7b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    7b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    7b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    7b90:	ce 01       	movw	r24, r28
    7b92:	01 96       	adiw	r24, 0x01	; 1
    7b94:	0e 94 ce 39 	call	0x739c	; 0x739c <vfscanf>
    7b98:	2e 96       	adiw	r28, 0x0e	; 14
    7b9a:	e2 e0       	ldi	r30, 0x02	; 2
    7b9c:	0c 94 a1 3b 	jmp	0x7742	; 0x7742 <__epilogue_restores__+0x20>

00007ba0 <ungetc>:
    7ba0:	fb 01       	movw	r30, r22
    7ba2:	23 81       	ldd	r18, Z+3	; 0x03
    7ba4:	20 ff       	sbrs	r18, 0
    7ba6:	12 c0       	rjmp	.+36     	; 0x7bcc <ungetc+0x2c>
    7ba8:	26 fd       	sbrc	r18, 6
    7baa:	10 c0       	rjmp	.+32     	; 0x7bcc <ungetc+0x2c>
    7bac:	8f 3f       	cpi	r24, 0xFF	; 255
    7bae:	3f ef       	ldi	r19, 0xFF	; 255
    7bb0:	93 07       	cpc	r25, r19
    7bb2:	61 f0       	breq	.+24     	; 0x7bcc <ungetc+0x2c>
    7bb4:	82 83       	std	Z+2, r24	; 0x02
    7bb6:	2f 7d       	andi	r18, 0xDF	; 223
    7bb8:	20 64       	ori	r18, 0x40	; 64
    7bba:	23 83       	std	Z+3, r18	; 0x03
    7bbc:	26 81       	ldd	r18, Z+6	; 0x06
    7bbe:	37 81       	ldd	r19, Z+7	; 0x07
    7bc0:	21 50       	subi	r18, 0x01	; 1
    7bc2:	31 09       	sbc	r19, r1
    7bc4:	37 83       	std	Z+7, r19	; 0x07
    7bc6:	26 83       	std	Z+6, r18	; 0x06
    7bc8:	99 27       	eor	r25, r25
    7bca:	08 95       	ret
    7bcc:	8f ef       	ldi	r24, 0xFF	; 255
    7bce:	9f ef       	ldi	r25, 0xFF	; 255
    7bd0:	08 95       	ret

00007bd2 <__ultoa_invert>:
    7bd2:	fa 01       	movw	r30, r20
    7bd4:	aa 27       	eor	r26, r26
    7bd6:	28 30       	cpi	r18, 0x08	; 8
    7bd8:	51 f1       	breq	.+84     	; 0x7c2e <__ultoa_invert+0x5c>
    7bda:	20 31       	cpi	r18, 0x10	; 16
    7bdc:	81 f1       	breq	.+96     	; 0x7c3e <__ultoa_invert+0x6c>
    7bde:	e8 94       	clt
    7be0:	6f 93       	push	r22
    7be2:	6e 7f       	andi	r22, 0xFE	; 254
    7be4:	6e 5f       	subi	r22, 0xFE	; 254
    7be6:	7f 4f       	sbci	r23, 0xFF	; 255
    7be8:	8f 4f       	sbci	r24, 0xFF	; 255
    7bea:	9f 4f       	sbci	r25, 0xFF	; 255
    7bec:	af 4f       	sbci	r26, 0xFF	; 255
    7bee:	b1 e0       	ldi	r27, 0x01	; 1
    7bf0:	3e d0       	rcall	.+124    	; 0x7c6e <__ultoa_invert+0x9c>
    7bf2:	b4 e0       	ldi	r27, 0x04	; 4
    7bf4:	3c d0       	rcall	.+120    	; 0x7c6e <__ultoa_invert+0x9c>
    7bf6:	67 0f       	add	r22, r23
    7bf8:	78 1f       	adc	r23, r24
    7bfa:	89 1f       	adc	r24, r25
    7bfc:	9a 1f       	adc	r25, r26
    7bfe:	a1 1d       	adc	r26, r1
    7c00:	68 0f       	add	r22, r24
    7c02:	79 1f       	adc	r23, r25
    7c04:	8a 1f       	adc	r24, r26
    7c06:	91 1d       	adc	r25, r1
    7c08:	a1 1d       	adc	r26, r1
    7c0a:	6a 0f       	add	r22, r26
    7c0c:	71 1d       	adc	r23, r1
    7c0e:	81 1d       	adc	r24, r1
    7c10:	91 1d       	adc	r25, r1
    7c12:	a1 1d       	adc	r26, r1
    7c14:	20 d0       	rcall	.+64     	; 0x7c56 <__ultoa_invert+0x84>
    7c16:	09 f4       	brne	.+2      	; 0x7c1a <__ultoa_invert+0x48>
    7c18:	68 94       	set
    7c1a:	3f 91       	pop	r19
    7c1c:	2a e0       	ldi	r18, 0x0A	; 10
    7c1e:	26 9f       	mul	r18, r22
    7c20:	11 24       	eor	r1, r1
    7c22:	30 19       	sub	r19, r0
    7c24:	30 5d       	subi	r19, 0xD0	; 208
    7c26:	31 93       	st	Z+, r19
    7c28:	de f6       	brtc	.-74     	; 0x7be0 <__ultoa_invert+0xe>
    7c2a:	cf 01       	movw	r24, r30
    7c2c:	08 95       	ret
    7c2e:	46 2f       	mov	r20, r22
    7c30:	47 70       	andi	r20, 0x07	; 7
    7c32:	40 5d       	subi	r20, 0xD0	; 208
    7c34:	41 93       	st	Z+, r20
    7c36:	b3 e0       	ldi	r27, 0x03	; 3
    7c38:	0f d0       	rcall	.+30     	; 0x7c58 <__ultoa_invert+0x86>
    7c3a:	c9 f7       	brne	.-14     	; 0x7c2e <__ultoa_invert+0x5c>
    7c3c:	f6 cf       	rjmp	.-20     	; 0x7c2a <__ultoa_invert+0x58>
    7c3e:	46 2f       	mov	r20, r22
    7c40:	4f 70       	andi	r20, 0x0F	; 15
    7c42:	40 5d       	subi	r20, 0xD0	; 208
    7c44:	4a 33       	cpi	r20, 0x3A	; 58
    7c46:	18 f0       	brcs	.+6      	; 0x7c4e <__ultoa_invert+0x7c>
    7c48:	49 5d       	subi	r20, 0xD9	; 217
    7c4a:	31 fd       	sbrc	r19, 1
    7c4c:	40 52       	subi	r20, 0x20	; 32
    7c4e:	41 93       	st	Z+, r20
    7c50:	02 d0       	rcall	.+4      	; 0x7c56 <__ultoa_invert+0x84>
    7c52:	a9 f7       	brne	.-22     	; 0x7c3e <__ultoa_invert+0x6c>
    7c54:	ea cf       	rjmp	.-44     	; 0x7c2a <__ultoa_invert+0x58>
    7c56:	b4 e0       	ldi	r27, 0x04	; 4
    7c58:	a6 95       	lsr	r26
    7c5a:	97 95       	ror	r25
    7c5c:	87 95       	ror	r24
    7c5e:	77 95       	ror	r23
    7c60:	67 95       	ror	r22
    7c62:	ba 95       	dec	r27
    7c64:	c9 f7       	brne	.-14     	; 0x7c58 <__ultoa_invert+0x86>
    7c66:	00 97       	sbiw	r24, 0x00	; 0
    7c68:	61 05       	cpc	r22, r1
    7c6a:	71 05       	cpc	r23, r1
    7c6c:	08 95       	ret
    7c6e:	9b 01       	movw	r18, r22
    7c70:	ac 01       	movw	r20, r24
    7c72:	0a 2e       	mov	r0, r26
    7c74:	06 94       	lsr	r0
    7c76:	57 95       	ror	r21
    7c78:	47 95       	ror	r20
    7c7a:	37 95       	ror	r19
    7c7c:	27 95       	ror	r18
    7c7e:	ba 95       	dec	r27
    7c80:	c9 f7       	brne	.-14     	; 0x7c74 <__ultoa_invert+0xa2>
    7c82:	62 0f       	add	r22, r18
    7c84:	73 1f       	adc	r23, r19
    7c86:	84 1f       	adc	r24, r20
    7c88:	95 1f       	adc	r25, r21
    7c8a:	a0 1d       	adc	r26, r0
    7c8c:	08 95       	ret

00007c8e <__ctype_isfalse>:
    7c8e:	99 27       	eor	r25, r25
    7c90:	88 27       	eor	r24, r24

00007c92 <__ctype_istrue>:
    7c92:	08 95       	ret

00007c94 <eeprom_read_byte>:
    7c94:	f9 99       	sbic	0x1f, 1	; 31
    7c96:	fe cf       	rjmp	.-4      	; 0x7c94 <eeprom_read_byte>
    7c98:	92 bd       	out	0x22, r25	; 34
    7c9a:	81 bd       	out	0x21, r24	; 33
    7c9c:	f8 9a       	sbi	0x1f, 0	; 31
    7c9e:	99 27       	eor	r25, r25
    7ca0:	80 b5       	in	r24, 0x20	; 32
    7ca2:	08 95       	ret

00007ca4 <eeprom_write_byte>:
    7ca4:	26 2f       	mov	r18, r22

00007ca6 <eeprom_write_r18>:
    7ca6:	f9 99       	sbic	0x1f, 1	; 31
    7ca8:	fe cf       	rjmp	.-4      	; 0x7ca6 <eeprom_write_r18>
    7caa:	1f ba       	out	0x1f, r1	; 31
    7cac:	92 bd       	out	0x22, r25	; 34
    7cae:	81 bd       	out	0x21, r24	; 33
    7cb0:	20 bd       	out	0x20, r18	; 32
    7cb2:	0f b6       	in	r0, 0x3f	; 63
    7cb4:	f8 94       	cli
    7cb6:	fa 9a       	sbi	0x1f, 2	; 31
    7cb8:	f9 9a       	sbi	0x1f, 1	; 31
    7cba:	0f be       	out	0x3f, r0	; 63
    7cbc:	01 96       	adiw	r24, 0x01	; 1
    7cbe:	08 95       	ret

00007cc0 <_exit>:
    7cc0:	f8 94       	cli

00007cc2 <__stop_program>:
    7cc2:	ff cf       	rjmp	.-2      	; 0x7cc2 <__stop_program>
