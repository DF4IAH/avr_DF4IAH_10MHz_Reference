
DF4IAH_10MHz_Reference_Appl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00006eba  00006f6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006eba  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000070c  00800118  00800118  00006f86  2**0
                  ALLOC
  3 .eeprom       00000400  00810000  00810000  00006f86  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00007386  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000073e4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000470  00000000  00000000  00007428  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b8ba  00000000  00000000  00007898  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002312  00000000  00000000  00013152  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000045bd  00000000  00000000  00015464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bec  00000000  00000000  00019a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002e93  00000000  00000000  0001a610  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005648  00000000  00000000  0001d4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d0  00000000  00000000  00022aeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bf c6       	rjmp	.+3454   	; 0xd80 <__ctors_end>
       2:	00 00       	nop
       4:	04 c7       	rjmp	.+3592   	; 0xe0e <__vector_1>
       6:	00 00       	nop
       8:	d8 c6       	rjmp	.+3504   	; 0xdba <__bad_interrupt>
       a:	00 00       	nop
       c:	d6 c6       	rjmp	.+3500   	; 0xdba <__bad_interrupt>
       e:	00 00       	nop
      10:	d4 c6       	rjmp	.+3496   	; 0xdba <__bad_interrupt>
      12:	00 00       	nop
      14:	d2 c6       	rjmp	.+3492   	; 0xdba <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__vector_6>
      1c:	ce c6       	rjmp	.+3484   	; 0xdba <__bad_interrupt>
      1e:	00 00       	nop
      20:	cc c6       	rjmp	.+3480   	; 0xdba <__bad_interrupt>
      22:	00 00       	nop
      24:	ca c6       	rjmp	.+3476   	; 0xdba <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__vector_10>
      2c:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_11>
      30:	c4 c6       	rjmp	.+3464   	; 0xdba <__bad_interrupt>
      32:	00 00       	nop
      34:	c2 c6       	rjmp	.+3460   	; 0xdba <__bad_interrupt>
      36:	00 00       	nop
      38:	c0 c6       	rjmp	.+3456   	; 0xdba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	be c6       	rjmp	.+3452   	; 0xdba <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__vector_16>
      44:	ba c6       	rjmp	.+3444   	; 0xdba <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 4b 24 	jmp	0x4896	; 0x4896 <__vector_18>
      4c:	0c 94 cd 24 	jmp	0x499a	; 0x499a <__vector_19>
      50:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__vector_20>
      54:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_21>
      58:	b0 c6       	rjmp	.+3424   	; 0xdba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ae c6       	rjmp	.+3420   	; 0xdba <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 30 26 	jmp	0x4c60	; 0x4c60 <__vector_24>
      64:	aa c6       	rjmp	.+3412   	; 0xdba <__bad_interrupt>
      66:	00 00       	nop
      68:	2b 0e       	add	r2, r27
      6a:	37 0e       	add	r3, r23
      6c:	b6 0e       	add	r11, r22
      6e:	43 0e       	add	r4, r19
      70:	4f 0e       	add	r4, r31
      72:	5b 0e       	add	r5, r27
      74:	67 0e       	add	r6, r23
      76:	73 0e       	add	r7, r19
      78:	7f 0e       	add	r7, r31
      7a:	8b 0e       	add	r8, r27
      7c:	97 0e       	add	r9, r23
      7e:	a3 0e       	add	r10, r19
      80:	af 0e       	add	r10, r31
      82:	07 63       	ori	r16, 0x37	; 55
      84:	42 36       	cpi	r20, 0x62	; 98
      86:	b7 9b       	sbis	0x16, 7	; 22
      88:	d8 a7       	std	Y+40, r29	; 0x28
      8a:	1a 39       	cpi	r17, 0x9A	; 154
      8c:	68 56       	subi	r22, 0x68	; 104
      8e:	18 ae       	std	Y+56, r1	; 0x38
      90:	ba ab       	std	Y+50, r27	; 0x32
      92:	55 8c       	ldd	r5, Z+29	; 0x1d
      94:	1d 3c       	cpi	r17, 0xCD	; 205
      96:	b7 cc       	rjmp	.-1682   	; 0xfffffa06 <__eeprom_end+0xff7ef606>
      98:	57 63       	ori	r21, 0x37	; 55
      9a:	bd 6d       	ori	r27, 0xDD	; 221
      9c:	ed fd       	.word	0xfded	; ????
      9e:	75 3e       	cpi	r23, 0xE5	; 229
      a0:	f6 17       	cp	r31, r22
      a2:	72 31       	cpi	r23, 0x12	; 18
      a4:	bf 00       	.word	0x00bf	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240
      aa:	08 00       	.word	0x0008	; ????
      ac:	00 00       	nop
      ae:	be 92       	st	-X, r11
      b0:	24 49       	sbci	r18, 0x94	; 148
      b2:	12 3e       	cpi	r17, 0xE2	; 226
      b4:	ab aa       	std	Y+51, r10	; 0x33
      b6:	aa 2a       	or	r10, r26
      b8:	be cd       	rjmp	.-1156   	; 0xfffffc36 <__eeprom_end+0xff7ef836>
      ba:	cc cc       	rjmp	.-1640   	; 0xfffffa54 <__eeprom_end+0xff7ef654>
      bc:	4c 3e       	cpi	r20, 0xEC	; 236
      be:	00 00       	nop
      c0:	00 80       	ld	r0, Z
      c2:	be ab       	std	Y+54, r27	; 0x36
      c4:	aa aa       	std	Y+50, r10	; 0x32
      c6:	aa 3e       	cpi	r26, 0xEA	; 234
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	00 08       	sbc	r0, r0
      d8:	41 78       	andi	r20, 0x81	; 129
      da:	d3 bb       	out	0x13, r29	; 19
      dc:	43 87       	std	Z+11, r20	; 0x0b
      de:	d1 13       	cpse	r29, r17
      e0:	3d 19       	sub	r19, r13
      e2:	0e 3c       	cpi	r16, 0xCE	; 206
      e4:	c3 bd       	out	0x23, r28	; 35
      e6:	42 82       	std	Z+2, r4	; 0x02
      e8:	ad 2b       	or	r26, r29
      ea:	3e 68       	ori	r19, 0x8E	; 142
      ec:	ec 82       	std	Y+4, r14	; 0x04
      ee:	76 be       	out	0x36, r7	; 54
      f0:	d9 8f       	std	Y+25, r29	; 0x19
      f2:	e1 a9       	ldd	r30, Z+49	; 0x31
      f4:	3e 4c       	sbci	r19, 0xCE	; 206
      f6:	80 ef       	ldi	r24, 0xF0	; 240
      f8:	ff be       	out	0x3f, r15	; 63
      fa:	01 c4       	rjmp	.+2050   	; 0x8fe <PM_INTERPRETER_HELP12+0x21>
      fc:	ff 7f       	andi	r31, 0xFF	; 255
      fe:	3f 00       	.word	0x003f	; ????
     100:	00 00       	nop
	...

00000104 <PM_PARSE_NMEA_MSG41>:
     104:	24 47 4c 47 53 56 2c 25 2a 64 2c 31 2c 25 64 2c     $GLGSV,%*d,1,%d,
	...

00000115 <PM_PARSE_NMEA_MSG31>:
     115:	24 47 50 47 53 56 2c 25 2a 64 2c 31 2c 25 64 2c     $GPGSV,%*d,1,%d,
	...

00000126 <PM_PARSE_NMEA_MSG21>:
     126:	24 47 50 52 4d 43 2c 25 6c 64 2e 25 64 2c 25 2a     $GPRMC,%ld.%d,%*
     136:	63 2c 25 66 2c 25 63 2c 25 66 2c 25 63 2c 25 2a     c,%f,%c,%f,%c,%*
     146:	66 2c 25 2a 66 2c 25 6c 64 2c 2c 2c 25 2a 63 2a     f,%*f,%ld,,,%*c*
     156:	25 64 00                                            %d.

00000159 <PM_PARSE_NMEA_MSG12>:
     159:	25 66 2c 25 66 2c 25 66 2a 25 64 00                 %f,%f,%f*%d.

00000165 <PM_PARSE_NMEA_MSG11>:
     165:	24 47 50 47 53 41 2c 25 2a 63 2c 25 64 2c 00        $GPGSA,%*c,%d,.

00000174 <PM_PARSE_NMEA_MSG01>:
     174:	24 47 50 47 47 41 2c 25 6c 64 2e 25 64 2c 25 66     $GPGGA,%ld.%d,%f
     184:	2c 25 63 2c 25 66 2c 25 63 2c 25 64 2c 25 64 2c     ,%c,%f,%c,%d,%d,
     194:	25 66 2c 25 66 2c 25 2a 63 2c 25 2a 66 2c 25 2a     %f,%f,%*c,%*f,%*
     1a4:	63 2c 25 2a 64 2c 25 2a 64 2a 25 64 00              c,%*d,%*d*%d.

000001b1 <PM_FORMAT_SET_BAUD>:
     1b1:	43 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e 20 62 61     Communication ba
     1c1:	75 64 20 72 61 74 65 20 73 65 74 20 74 6f 20 25     ud rate set to %
     1d1:	35 75 20 62 61 75 64 2e 0a 00                       5u baud...

000001db <PM_FORMAT_GPIB_SCM_IDN>:
     1db:	44 46 34 49 41 48 2c 25 73 2c 25 30 35 75 2c 56     DF4IAH,%s,%05u,V
     1eb:	32 30 25 30 33 75 25 30 33 75 2e 00                 20%03u%03u..

000001f7 <PM_FORMAT_SC02>:
     1f7:	23 53 43 30 32 3a 20 73 3d 30 78 25 30 32 78 2c     #SC02: s=0x%02x,
     207:	64 53 3d 25 75 2c 69 50 3d 25 75 0a 00              dS=%u,iP=%u..

00000214 <PM_FORMAT_SC01>:
     214:	23 53 43 30 31 3a 20 53 74 61 63 6b 2d 43 68 65     #SC01: Stack-Che
     224:	63 6b 3a 20 6d 75 6e 67 2d 77 61 6c 6c 20 61 64     ck: mung-wall ad
     234:	64 72 65 73 73 3a 20 30 78 25 30 34 78 2c 20 6c     dress: 0x%04x, l
     244:	6f 77 65 73 74 2d 73 74 61 63 6b 3a 20 30 78 25     owest-stack: 0x%
     254:	30 34 78 0a 00                                      04x..

00000259 <PM_FORMAT_LC23>:
     259:	25 63 25 30 33 64 2e 25 30 33 64 20 25 63 25 31     %c%03d.%03d %c%1
     269:	64 2e 25 30 33 64 56 20 00                          d.%03dV .

00000272 <PM_FORMAT_LC22>:
     272:	25 63 25 31 75 20 25 63 25 31 75 20 25 31 64 2e     %c%1u %c%1u %1d.
     282:	25 31 64 20 25 63 25 30 32 75 25 63 25 30 32 75     %1d %c%02u%c%02u
     292:	20 00                                                .

00000294 <PM_FORMAT_LC21>:
     294:	25 30 34 75 25 30 32 75 25 30 32 75 20 55 25 30     %04u%02u%02u U%0
     2a4:	32 75 25 30 32 75 25 30 32 75 20 00                 2u%02u%02u .

000002b0 <PM_FORMAT_LC12>:
     2b0:	62 20 2d 2d 2d 2e 2d 2d 2d 20 25 63 25 31 58 20     b ---.--- %c%1X 
     2c0:	25 63 25 30 32 75 20 00                             %c%02u .

000002c8 <PM_FORMAT_LC11>:
     2c8:	25 63 20 25 30 33 64 2e 25 30 33 64 20 25 63 25     %c %03d.%03d %c%
     2d8:	31 58 20 25 63 25 30 32 75 20 00                    1X %c%02u .

000002e3 <PM_FORMAT_LC02>:
     2e3:	31 30 4d 48 7a 52 65 66 4f 73 63 20 56 32 78 31     10MHzRefOsc V2x1
	...

000002f4 <PM_FORMAT_LC01>:
     2f4:	2b 3d 3d 3d 20 44 46 34 49 41 48 20 3d 3d 3d 2b     +=== DF4IAH ===+
	...

00000305 <PM_FORMAT_IA12>:
     305:	23 49 41 31 32 3a 20 50 48 41 53 45 20 66 61 73     #IA12: PHASE fas
     315:	74 50 77 6d 53 69 6e 67 6c 65 44 69 66 66 5f 73     tPwmSingleDiff_s
     325:	74 65 70 73 20 3d 20 25 63 25 30 33 64 2e 25 30     teps = %c%03d.%0
     335:	33 64 0a 00                                         3d..

00000339 <PM_FORMAT_IA11>:
     339:	23 49 41 31 31 3a 20 50 48 41 53 45 20 70 68 61     #IA11: PHASE pha
     349:	73 65 45 72 72 20 20 3d 20 25 30 33 64 2e 25 30     seErr  = %03d.%0
     359:	33 64 c2 b0 2c 20 09 20 70 68 61 73 65 53 74 65     3d.., . phaseSte
     369:	70 73 46 72 65 71 75 65 6e 63 79 20 3d 20 25 63     psFrequency = %c
     379:	25 30 33 64 2e 25 30 33 64 2c 20 09 70 68 61 73     %03d.%03d, .phas
     389:	65 53 74 65 70 73 50 68 61 73 65 20 3d 20 25 63     eStepsPhase = %c
     399:	25 30 33 64 2e 25 30 33 64 0a 00                    %03d.%03d..

000003a4 <PM_FORMAT_IA03>:
     3a4:	23 49 41 30 33 3a 20 51 52 47 20 20 20 6e 65 77     #IA03: QRG   new
     3b4:	50 77 6d 56 61 6c 20 3d 20 25 30 33 64 2e 25 30     PwmVal = %03d.%0
     3c4:	33 64 2c 20 09 70 77 6d 43 6f 72 53 74 65 70 73     3d, .pwmCorSteps
     3d4:	20 20 20 20 20 20 20 20 20 3d 20 25 2b 30 34 64              = %+04d
     3e4:	2e 25 30 33 64 0a 00                                .%03d..

000003eb <PM_FORMAT_IA02>:
     3eb:	23 49 41 30 32 3a 20 43 6c 6f 63 6b 20 6c 6f 63     #IA02: Clock loc
     3fb:	61 6c 4d 65 61 6e 46 6c 6f 61 74 43 6c 6f 63 6b     alMeanFloatClock
     40b:	44 69 66 66 20 3d 20 25 63 25 2b 30 33 64 2e 25     Diff = %c%+03d.%
     41b:	30 33 64 48 7a 20 40 32 30 4d 48 7a 2c 20 09 71     03dHz @20MHz, .q
     42b:	72 67 44 65 76 5f 48 7a 20 3d 20 25 63 25 30 33     rgDev_Hz = %c%03
     43b:	64 2e 25 30 33 64 48 7a 20 40 31 30 4d 48 7a 2c     d.%03dHz @10MHz,
     44b:	20 09 70 70 6d 20 3d 20 25 63 25 30 32 64 2e 25      .ppm = %c%02d.%
     45b:	30 36 64 0a 00                                      06d..

00000460 <PM_FORMAT_IA01>:
     460:	23 49 41 30 31 3a 20 43 6c 6f 63 6b 20 69 6e 74     #IA01: Clock int
     470:	32 30 4d 48 7a 43 6c 6f 63 6b 44 69 66 66 20 20     20MHzClockDiff  
     480:	20 20 20 20 20 3d 20 25 2b 30 34 6c 69 20 20 48          = %+04li  H
     490:	7a 20 40 32 30 4d 48 7a 0a 00                       z @20MHz..

0000049a <PM_FORMAT_ID02>:
     49a:	23 49 44 30 32 3a 20 2b 2f 2d 20 4b 45 59 20 09     #ID02: +/- KEY .
     4aa:	6d 61 69 6e 50 77 6d 54 65 72 6d 69 6e 61 6c 41     mainPwmTerminalA
     4ba:	64 6a 20 3d 20 25 64 2e 25 30 37 64 2c 20 09 6c     dj = %d.%07d, .l
     4ca:	6f 63 61 6c 46 61 73 74 50 77 6d 56 61 6c 4e 65     ocalFastPwmValNe
     4da:	78 74 20 3d 20 25 30 33 75 20 2b 20 6c 6f 63 61     xt = %03u + loca
     4ea:	6c 46 61 73 74 50 77 6d 53 75 62 43 6d 70 4e 65     lFastPwmSubCmpNe
     4fa:	78 74 20 3d 20 25 30 33 75 0a 00                    xt = %03u..

00000505 <PM_FORMAT_ID01>:
     505:	23 49 44 30 31 3a 20 2b 2f 2d 20 4b 45 59 20 09     #ID01: +/- KEY .
     515:	6d 61 69 6e 50 77 6d 54 65 72 6d 69 6e 61 6c 41     mainPwmTerminalA
     525:	64 6a 20 3d 20 25 64 2e 25 30 37 64 2c 20 09 70     dj = %d.%07d, .p
     535:	75 6c 6c 50 77 6d 56 61 6c 42 65 66 6f 72 65 20     ullPwmValBefore 
     545:	20 20 20 3d 20 25 30 33 75 20 2b 20 66 61 73 74        = %03u + fast
     555:	50 77 6d 53 75 62 43 6d 70 42 65 66 6f 72 65 20     PwmSubCmpBefore 
     565:	20 20 20 3d 20 25 30 33 75 0a 00                       = %03u..

00000570 <PM_FORMAT_TA14>:
     570:	23 54 41 31 34 3a 20 6d 61 69 6e 52 65 66 43 6c     #TA14: mainRefCl
     580:	6b 53 74 61 74 65 20 3d 20 30 78 25 31 58 0a 00     kState = 0x%1X..

00000590 <PM_FORMAT_TA13>:
     590:	23 54 41 31 33 3a 20 50 57 4d 20 3d 20 25 30 33     #TA13: PWM = %03
     5a0:	75 2c 20 09 53 75 62 2d 50 57 4d 20 3d 20 25 30     u, .Sub-PWM = %0
     5b0:	33 75 0a 00                                         3u..

000005b4 <PM_FORMAT_TA12>:
     5b4:	23 54 41 31 32 3a 20 70 70 73 53 74 61 6d 70 43     #TA12: ppsStampC
     5c4:	74 72 31 6d 73 20 20 3d 20 25 30 39 6c 75 2c 20     tr1ms  = %09lu, 
     5d4:	09 70 70 73 53 74 61 6d 70 49 43 52 31 20 20 20     .ppsStampICR1   
     5e4:	3d 20 25 30 35 75 2c 20 09 70 70 73 53 74 61 6d     = %05u, .ppsStam
     5f4:	70 43 74 72 31 6d 73 5f 6c 61 73 74 20 20 3d 20     pCtr1ms_last  = 
     604:	25 30 39 6c 75 2c 20 09 70 70 73 53 74 61 6d 70     %09lu, .ppsStamp
     614:	49 43 52 31 5f 6c 61 73 74 20 20 20 3d 20 25 30     ICR1_last   = %0
     624:	35 75 0a 00                                         5u..

00000628 <PM_FORMAT_TA11>:
     628:	23 54 41 31 31 3a 20 6c 6f 63 61 6c 46 61 73 74     #TA11: localFast
     638:	43 74 72 31 6d 73 20 3d 20 25 30 39 6c 75 2c 20     Ctr1ms = %09lu, 
     648:	09 6c 6f 63 61 6c 46 61 73 74 54 43 4e 54 31 20     .localFastTCNT1 
     658:	3d 20 25 30 35 75 0a 00                             = %05u..

00000660 <PM_FORMAT_TA03>:
     660:	23 54 41 30 33 3a 20 54 65 6d 70 20 3d 20 25 30     #TA03: Temp = %0
     670:	34 75 20 28 25 64 2e 25 31 64 43 29 0a 00           4u (%d.%1dC)..

0000067e <PM_FORMAT_TA02>:
     67e:	23 54 41 30 32 3a 20 41 44 43 31 20 3d 20 25 30     #TA02: ADC1 = %0
     68e:	34 75 20 28 25 64 2e 25 30 33 64 56 29 0a 00        4u (%d.%03dV)..

0000069d <PM_FORMAT_TA01>:
     69d:	23 54 41 30 31 3a 20 41 44 43 30 20 3d 20 25 30     #TA01: ADC0 = %0
     6ad:	34 75 20 28 25 64 2e 25 30 33 64 56 29 0a 00        4u (%d.%03dV)..

000006bc <PM_FORMAT_GP05>:
     6bc:	23 47 50 30 35 3a 20 4c 61 74 20 3d 20 25 63 20     #GP05: Lat = %c 
     6cc:	25 30 34 64 2e 25 30 34 64 2c 20 4c 6f 6e 20 3d     %04d.%04d, Lon =
     6dc:	20 25 63 20 25 30 35 64 2e 25 30 34 64 2c 20 48      %c %05d.%04d, H
     6ec:	65 69 67 68 74 20 3d 20 25 64 2e 25 30 32 64 20     eight = %d.%02d 
     6fc:	6d 0a 00                                            m..

000006ff <PM_FORMAT_GP04>:
     6ff:	23 47 50 30 34 3a 20 50 44 4f 50 20 3d 20 25 64     #GP04: PDOP = %d
     70f:	2e 25 30 32 64 2c 20 48 44 4f 50 20 3d 20 25 64     .%02d, HDOP = %d
     71f:	2e 25 30 32 64 2c 20 56 44 4f 50 20 3d 20 25 64     .%02d, VDOP = %d
     72f:	2e 25 30 32 64 2c 0a 00                             .%02d,..

00000737 <PM_FORMAT_GP03>:
     737:	23 47 50 30 33 3a 20 53 61 74 73 55 73 65 64 20     #GP03: SatsUsed 
     747:	3d 20 25 30 32 64 2c 20 53 61 74 73 45 70 68 69     = %02d, SatsEphi
     757:	6d 5f 47 70 73 47 61 6c 69 6c 65 6f 51 7a 73 73     m_GpsGalileoQzss
     767:	20 3d 20 25 30 32 64 2c 20 53 61 74 73 45 70 68      = %02d, SatsEph
     777:	69 6d 5f 47 6c 6f 6e 61 73 73 20 3d 20 25 30 32     im_Glonass = %02
     787:	64 0a 00                                            d..

0000078a <PM_FORMAT_GP02>:
     78a:	23 47 50 30 32 3a 20 4d 6f 64 65 32 20 3d 20 25     #GP02: Mode2 = %
     79a:	31 64 2c 20 50 6f 73 46 69 78 49 6e 64 20 3d 20     1d, PosFixInd = 
     7aa:	25 31 64 0a 00                                      %1d..

000007af <PM_FORMAT_GP01>:
     7af:	23 47 50 30 31 3a 20 44 61 74 65 20 3d 20 25 30     #GP01: Date = %0
     7bf:	38 6c 64 2c 20 54 69 6d 65 20 3d 20 25 30 36 6c     8ld, Time = %06l
     7cf:	64 2e 25 30 33 64 0a 00                             d.%03d..

000007d7 <PM_FORMAT_GP00>:
     7d7:	0a 23 47 50 30 30 3a 20 3d 3d 3d 3d 3d 3d 3d 00     .#GP00: =======.

000007e7 <PM_FORMAT_GPS_WEST1_EAST1>:
     7e7:	24 50 4d 54 4b 33 35 33 2c 31 2c 31 2a 33 37 0d     $PMTK353,1,1*37.
     7f7:	0a 00                                               ..

000007f9 <PM_FORMAT_GPS_WEST1_EAST0>:
     7f9:	24 50 4d 54 4b 33 35 33 2c 31 2c 30 2a 33 36 0d     $PMTK353,1,0*36.
     809:	0a 00                                               ..

0000080b <PM_FORMAT_GPS_WEST0_EAST0>:
     80b:	24 50 4d 54 4b 33 35 33 2c 30 2c 30 2a 33 37 0d     $PMTK353,0,0*37.
     81b:	0a 00                                               ..

0000081d <PM_FORMAT_GPS_WARM_RESTART>:
     81d:	24 50 4d 54 4b 31 30 32 2a 33 31 0d 0a 00           $PMTK102*31...

0000082b <PM_FORMAT_VERSION>:
     82b:	0a 3d 3d 3d 20 44 46 34 49 41 48 20 2d 20 31 30     .=== DF4IAH - 10
     83b:	20 4d 48 7a 20 52 65 66 65 72 65 6e 63 65 20 4f      MHz Reference O
     84b:	73 63 69 6c 6c 61 74 6f 72 20 3d 3d 3d 0a 3d 3d     scillator ===.==
     85b:	3d 20 56 65 72 3a 20 32 30 25 30 33 64 25 30 33     = Ver: 20%03d%03
     86b:	64 00                                               d.

0000086d <PM_INTERPRETER_UNKNOWN>:
     86d:	0a 2a 3f 2a 20 20 75 6e 6b 6e 6f 77 6e 20 63 6f     .*?*  unknown co
     87d:	6d 6d 61 6e 64 20 27 25 73 27 20 72 65 63 65 69     mmand '%s' recei
     88d:	76 65 64 2c 20 74 72 79 20 48 45 4c 50 2e 0a 3e     ved, try HELP..>
	...

0000089e <PM_INTERPRETER_HELP14>:
     89e:	0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 3e 00        .===========.>.

000008ad <PM_INTERPRETER_HELP13>:
     8ad:	0a 2b 2f 2d 20 3c 50 57 4d 20 76 61 6c 75 65 3e     .+/- <PWM value>
     8bd:	09 09 63 6f 72 72 65 63 74 69 6f 6e 20 76 61 6c     ..correction val
     8cd:	75 65 20 74 6f 20 62 65 20 61 64 64 65 64 2e 00     ue to be added..

000008dd <PM_INTERPRETER_HELP12>:
     8dd:	0a 57 52 49 54 45 50 57 4d 09 09 09 73 74 6f 72     .WRITEPWM...stor
     8ed:	65 20 63 75 72 72 65 6e 74 20 50 57 4d 20 61 73     e current PWM as
     8fd:	20 64 65 66 61 75 6c 74 20 76 61 6c 75 65 2e 0a      default value..
     90d:	57 52 49 54 45 54 45 4d 50 20 3c 54 45 4d 50 20     WRITETEMP <TEMP 
     91d:	76 61 6c 75 65 3e 09 09 77 72 69 74 65 20 63 75     value>..write cu
     92d:	72 72 65 6e 74 20 74 65 6d 70 65 72 61 74 75 72     rrent temperatur
     93d:	65 20 61 73 20 64 65 66 61 75 6c 74 20 76 61 6c     e as default val
     94d:	75 65 2e 00                                         ue..

00000951 <PM_INTERPRETER_HELP11>:
     951:	0a 54 45 53 54 09 09 09 09 74 6f 67 67 6c 65 73     .TEST....toggles
     961:	20 63 6f 75 6e 74 65 72 20 74 65 73 74 2e 00         counter test..

00000970 <PM_INTERPRETER_HELP10>:
     970:	0a 53 54 41 43 4b 09 09 09 09 74 6f 67 67 6c 65     .STACK....toggle
     980:	73 20 73 74 61 63 6b 20 6d 75 6e 67 2d 77 61 6c     s stack mung-wal
     990:	6c 20 74 65 73 74 2e 00                             l test..

00000998 <PM_INTERPRETER_HELP09>:
     998:	0a 53 45 52 4f 46 46 09 09 09 09 73 77 69 74 63     .SEROFF....switc
     9a8:	68 20 73 65 72 69 61 6c 20 63 6f 6d 6d 75 6e 69     h serial communi
     9b8:	63 61 74 69 6f 6e 20 4f 46 46 2e 0a 53 45 52 4f     cation OFF..SERO
     9c8:	4e 09 09 09 09 73 77 69 74 63 68 20 73 65 72 69     N....switch seri
     9d8:	61 6c 20 63 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e     al communication
     9e8:	20 4f 4e 2e 00                                       ON..

000009ed <PM_INTERPRETER_HELP08>:
     9ed:	0a 53 45 52 42 41 55 44 20 3c 62 61 75 64 3e 09     .SERBAUD <baud>.
     9fd:	09 09 73 65 74 74 69 6e 67 20 73 65 72 69 61 6c     ..setting serial
     a0d:	20 62 61 75 64 20 72 61 74 65 2e 00                  baud rate..

00000a19 <PM_INTERPRETER_HELP07>:
     a19:	0a 4c 45 44 4f 46 46 09 09 09 09 73 77 69 74 63     .LEDOFF....switc
     a29:	68 20 62 61 63 6b 6c 69 67 68 74 20 4f 46 46 2e     h backlight OFF.
     a39:	0a 4c 45 44 4f 4e 09 09 09 09 73 77 69 74 63 68     .LEDON....switch
     a49:	20 62 61 63 6b 6c 69 67 68 74 20 4f 4e 2e 00         backlight ON..

00000a58 <PM_INTERPRETER_HELP06>:
     a58:	0a 49 4e 46 4f 09 09 09 09 74 6f 67 67 6c 65 73     .INFO....toggles
     a68:	20 61 64 64 69 74 69 6f 6e 61 6c 20 70 72 69 6e      additional prin
     a78:	74 65 64 20 69 6e 66 6f 73 2e 00                    ted infos..

00000a83 <PM_INTERPRETER_HELP05>:
     a83:	0a 48 45 4c 50 09 09 09 09 74 68 69 73 20 6d 65     .HELP....this me
     a93:	73 73 61 67 65 2e 00                                ssage..

00000a9a <PM_INTERPRETER_HELP03>:
     a9a:	0a 41 50 43 4f 46 46 09 09 09 09 73 77 69 74 63     .APCOFF....switc
     aaa:	68 20 41 50 43 20 28 61 75 74 6f 6d 61 74 69 63     h APC (automatic
     aba:	20 70 68 61 73 65 20 63 6f 6e 74 72 6f 6c 29 20      phase control) 
     aca:	6f 66 66 2e 0a 41 50 43 4f 4e 09 09 09 09 73 77     off..APCON....sw
     ada:	69 74 63 68 20 41 50 43 20 28 61 75 74 6f 6d 61     itch APC (automa
     aea:	74 69 63 20 70 68 61 73 65 20 63 6f 6e 74 72 6f     tic phase contro
     afa:	6c 29 20 6f 6e 2e 00                                l) on..

00000b01 <PM_INTERPRETER_HELP02>:
     b01:	0a 41 46 43 4f 46 46 09 09 09 09 73 77 69 74 63     .AFCOFF....switc
     b11:	68 20 41 46 43 20 28 61 75 74 6f 6d 61 74 69 63     h AFC (automatic
     b21:	20 66 72 65 71 75 65 6e 63 79 20 63 6f 6e 74 72      frequency contr
     b31:	6f 6c 29 20 6f 66 66 2e 0a 41 46 43 4f 4e 09 09     ol) off..AFCON..
     b41:	09 09 73 77 69 74 63 68 20 41 46 43 20 28 61 75     ..switch AFC (au
     b51:	74 6f 6d 61 74 69 63 20 66 72 65 71 75 65 6e 63     tomatic frequenc
     b61:	79 20 63 6f 6e 74 72 6f 6c 29 20 6f 6e 2e 00        y control) on..

00000b70 <PM_INTERPRETER_HELP01>:
     b70:	0a 3d 3d 3d 20 48 45 4c 50 20 3d 3d 3d 0a 0a 24     .=== HELP ===..$
     b80:	20 3c 4e 4d 45 41 2d 4d 65 73 73 61 67 65 3e 09      <NMEA-Message>.
     b90:	09 73 65 6e 64 73 20 6d 65 73 73 61 67 65 20 74     .sends message t
     ba0:	6f 20 74 68 65 20 47 50 53 20 6d 6f 64 75 6c 65     o the GPS module
     bb0:	2e 00                                               ..

00000bb2 <PM_GPIB_SCM_IDN>:
     bb2:	2a 49 44 4e 3f 00                                   *IDN?.

00000bb8 <PM_COMMAND_WRITETEMP>:
     bb8:	57 52 49 54 45 54 45 4d 50 00                       WRITETEMP.

00000bc2 <PM_COMMAND_WRITEPWM>:
     bc2:	57 52 49 54 45 50 57 4d 00                          WRITEPWM.

00000bcb <PM_COMMAND_TEST>:
     bcb:	54 45 53 54 00                                      TEST.

00000bd0 <PM_COMMAND_STACK>:
     bd0:	53 54 41 43 4b 00                                   STACK.

00000bd6 <PM_COMMAND_SERON>:
     bd6:	53 45 52 4f 4e 00                                   SERON.

00000bdc <PM_COMMAND_SEROFF>:
     bdc:	53 45 52 4f 46 46 00                                SEROFF.

00000be3 <PM_COMMAND_SERBAUD>:
     be3:	53 45 52 42 41 55 44 00                             SERBAUD.

00000beb <PM_COMMAND_LEDON>:
     beb:	4c 45 44 4f 4e 00                                   LEDON.

00000bf1 <PM_COMMAND_LEDOFF>:
     bf1:	4c 45 44 4f 46 46 00                                LEDOFF.

00000bf8 <PM_COMMAND_INFO>:
     bf8:	49 4e 46 4f 00                                      INFO.

00000bfd <PM_COMMAND_HELP>:
     bfd:	48 45 4c 50 00                                      HELP.

00000c02 <PM_COMMAND_APCON>:
     c02:	41 50 43 4f 4e 00                                   APCON.

00000c08 <PM_COMMAND_APCOFF>:
     c08:	41 50 43 4f 46 46 00                                APCOFF.

00000c0f <PM_COMMAND_AFCON>:
     c0f:	41 46 43 4f 4e 00                                   AFCON.

00000c15 <PM_COMMAND_AFCOFF>:
     c15:	41 46 43 4f 46 46 00                                AFCOFF.

00000c1c <eeprom_defaultValues_content>:
     c1c:	44 46 34 49 41 48 20 31 30 4d 68 7a 2d 52 65 66     DF4IAH 10Mhz-Ref
     c2c:	a0 ab 00 00 01 ff ff ff ff ff ff ff 00 00 0c b0     ................
     c3c:	a5 2c 8f 40 48 e1 8a 3f 00 80 af 43 00 a0 87 3f     .,.@H..?...C...?
     c4c:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 1c b0     ................
     c5c:	cd cc 94 c0 5c 8f c2 3f b8 1e 05 3d ff ff ff ff     ....\..?...=....
     c6c:	ff ff 71 3d 8a 3f 33 33 13 40 78 00 00 00 2c b0     ..q=.?33.@x...,.
     c7c:	80 25 08 01 00 00 00 00 ff ff ff ff ff ff ff ff     .%..............
     c8c:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 3c b0     ..............<.
     c9c:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
     cac:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 4c b0     ..............L.

00000cbc <usbDescriptorConfiguration>:
     cbc:	09 02 19 00 01 01 00 80 69 09 04 00 00 01 ff 00     ........i.......
     ccc:	00 00 07 05 81 03 08 00 0a                          .........

00000cd5 <usbDescriptorDevice>:
     cd5:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
     ce5:	03 01                                               ..

00000ce7 <usbDescriptorStringSerialNumber>:
     ce7:	10 03 50 00 72 00 6f 00 74 00 6f 00 2d 00 31 00     ..P.r.o.t.o.-.1.

00000cf7 <usbDescriptorStringDevice>:
     cf7:	2a 03 44 00 46 00 34 00 49 00 41 00 48 00 2d 00     *.D.F.4.I.A.H.-.
     d07:	31 00 30 00 4d 00 48 00 7a 00 2d 00 52 00 65 00     1.0.M.H.z.-.R.e.
     d17:	66 00 2d 00 4f 00 73 00 63 00                       f.-.O.s.c.

00000d21 <usbDescriptorStringVendor>:
     d21:	0e 03 44 00 46 00 34 00 49 00 41 00 48 00           ..D.F.4.I.A.H.

00000d2f <usbDescriptorString0>:
     d2f:	04 03 09 04                                         ....

00000d33 <__c.2437>:
     d33:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     d43:	47 00                                               G.

00000d45 <pstr_an>:
     d45:	61 6e 00                                            an.

00000d48 <pstr_nfinity>:
     d48:	6e 66 69 6e 69 74 79 00                             nfinity.

00000d50 <pwr_m10>:
     d50:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     d60:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000d68 <pwr_p10>:
     d68:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     d78:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000d80 <__ctors_end>:
     d80:	11 24       	eor	r1, r1
     d82:	1f be       	out	0x3f, r1	; 63
     d84:	cf ef       	ldi	r28, 0xFF	; 255
     d86:	d8 e0       	ldi	r29, 0x08	; 8
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	cd bf       	out	0x3d, r28	; 61

00000d8c <__do_copy_data>:
     d8c:	11 e0       	ldi	r17, 0x01	; 1
     d8e:	a0 e0       	ldi	r26, 0x00	; 0
     d90:	b1 e0       	ldi	r27, 0x01	; 1
     d92:	ea eb       	ldi	r30, 0xBA	; 186
     d94:	fe e6       	ldi	r31, 0x6E	; 110
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <__do_copy_data+0x10>
     d98:	05 90       	lpm	r0, Z+
     d9a:	0d 92       	st	X+, r0
     d9c:	a8 31       	cpi	r26, 0x18	; 24
     d9e:	b1 07       	cpc	r27, r17
     da0:	d9 f7       	brne	.-10     	; 0xd98 <__do_copy_data+0xc>

00000da2 <__do_clear_bss>:
     da2:	28 e0       	ldi	r18, 0x08	; 8
     da4:	a8 e1       	ldi	r26, 0x18	; 24
     da6:	b1 e0       	ldi	r27, 0x01	; 1
     da8:	01 c0       	rjmp	.+2      	; 0xdac <.do_clear_bss_start>

00000daa <.do_clear_bss_loop>:
     daa:	1d 92       	st	X+, r1

00000dac <.do_clear_bss_start>:
     dac:	a4 32       	cpi	r26, 0x24	; 36
     dae:	b2 07       	cpc	r27, r18
     db0:	e1 f7       	brne	.-8      	; 0xdaa <.do_clear_bss_loop>
     db2:	0e 94 65 1f 	call	0x3eca	; 0x3eca <main>
     db6:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <_exit>

00000dba <__bad_interrupt>:
     dba:	22 c9       	rjmp	.-3516   	; 0x0 <__vectors>

00000dbc <usbCrc16>:
;   byte    r18 / r22
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     dbc:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     dbe:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xFF
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xFF
     dc2:	9f ef       	ldi	r25, 0xFF	; 255
    rjmp    usbCrc16LoopTest
     dc4:	1b c0       	rjmp	.+54     	; 0xdfc <usbCrc16LoopTest>

00000dc6 <usbCrc16ByteLoop>:
usbCrc16ByteLoop:
    ld      byte, ptr+
     dc6:	2d 91       	ld	r18, X+
    eor     resCrcL, byte   ; resCrcL is now 'x' in table()
     dc8:	82 27       	eor	r24, r18
    mov     byte, resCrcL   ; compute parity of 'x'
     dca:	28 2f       	mov	r18, r24
    swap    byte
     dcc:	22 95       	swap	r18
    eor     byte, resCrcL
     dce:	28 27       	eor	r18, r24
    mov     scratch, byte
     dd0:	72 2f       	mov	r23, r18
    lsr     byte
     dd2:	26 95       	lsr	r18
    lsr     byte
     dd4:	26 95       	lsr	r18
    eor     byte, scratch
     dd6:	27 27       	eor	r18, r23
    inc     byte
     dd8:	23 95       	inc	r18
    lsr     byte
     dda:	26 95       	lsr	r18
    andi    byte, 1         ; byte is now parity(x)
     ddc:	21 70       	andi	r18, 0x01	; 1
    mov     scratch, resCrcL
     dde:	78 2f       	mov	r23, r24
    mov     resCrcL, resCrcH
     de0:	89 2f       	mov	r24, r25
    eor     resCrcL, byte   ; low byte of if(parity(x)) value ^= 0xc001;
     de2:	82 27       	eor	r24, r18
    neg     byte
     de4:	21 95       	neg	r18
    andi    byte, 0xc0
     de6:	20 7c       	andi	r18, 0xC0	; 192
    mov     resCrcH, byte   ; high byte of if(parity(x)) value ^= 0xc001;
     de8:	92 2f       	mov	r25, r18
    clr     byte
     dea:	22 27       	eor	r18, r18
    lsr     scratch
     dec:	76 95       	lsr	r23
    ror     byte
     dee:	27 95       	ror	r18
    eor     resCrcH, scratch
     df0:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     df2:	82 27       	eor	r24, r18
    lsr     scratch
     df4:	76 95       	lsr	r23
    ror     byte
     df6:	27 95       	ror	r18
    eor     resCrcH, scratch
     df8:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     dfa:	82 27       	eor	r24, r18

00000dfc <usbCrc16LoopTest>:
usbCrc16LoopTest:
    subi    argLen, 1
     dfc:	61 50       	subi	r22, 0x01	; 1
    brsh    usbCrc16ByteLoop
     dfe:	18 f7       	brcc	.-58     	; 0xdc6 <usbCrc16ByteLoop>
    com     resCrcL
     e00:	80 95       	com	r24
    com     resCrcH
     e02:	90 95       	com	r25
    ret
     e04:	08 95       	ret

00000e06 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     e06:	da df       	rcall	.-76     	; 0xdbc <usbCrc16>
    st      ptr+, resCrcL
     e08:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     e0a:	9d 93       	st	X+, r25
    ret
     e0c:	08 95       	ret

00000e0e <__vector_1>:
; bitcnt is used to determine when a stuff bit is due
; cnt holds the number of bytes left in the receive buffer

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-28] push only what is necessary to sync with edge ASAP
     e0e:	cf 93       	push	r28
    in      YL, SREG            ;[-26]
     e10:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-25]
     e12:	cf 93       	push	r28
    push    YH                  ;[-23]
     e14:	df 93       	push	r29

00000e16 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     e16:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     e18:	33 9b       	sbis	0x06, 3	; 6
    brne    waitForJ        ; just make sure we have ANY timeout
     e1a:	e9 f7       	brne	.-6      	; 0xe16 <waitForJ>

00000e1c <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-19]
     e1c:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK              ;[-18]
     e1e:	11 c0       	rjmp	.+34     	; 0xe42 <foundK>
    sbis    USBIN, USBMINUS
     e20:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e22:	0f c0       	rjmp	.+30     	; 0xe42 <foundK>
    sbis    USBIN, USBMINUS
     e24:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e26:	0d c0       	rjmp	.+26     	; 0xe42 <foundK>
    sbis    USBIN, USBMINUS
     e28:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e2a:	0b c0       	rjmp	.+22     	; 0xe42 <foundK>
    sbis    USBIN, USBMINUS
     e2c:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <foundK>
    sbis    USBIN, USBMINUS
     e30:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e32:	07 c0       	rjmp	.+14     	; 0xe42 <foundK>
    sbis    USBIN, USBMINUS
     e34:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <foundK>
    sbis    USBIN, USBMINUS
     e38:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <foundK>
    sbis    USBIN, USBMINUS
     e3c:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     e40:	83 c0       	rjmp	.+262    	; 0xf48 <sofError>

00000e42 <foundK>:
foundK:                         ;[-16]
;{3, 5} after falling D- edge, average delay: 4 cycles
;bit0 should be at 34 for center sampling. Currently at 4 so 30 cylces till bit 0 sample
;use 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-16]
     e42:	6f 93       	push	r22
;   [---]                       ;[-15]
    lds     YL, usbInputBufOffset;[-14]
     e44:	c0 91 07 08 	lds	r28, 0x0807	; 0x800807 <usbInputBufOffset>
;   [---]                       ;[-13]
    clr     YH                  ;[-12]
     e48:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-11] [rx loop init]
     e4a:	c2 5f       	subi	r28, 0xF2	; 242
    sbci    YH, hi8(-(usbRxBuf));[-10] [rx loop init]
     e4c:	d7 4f       	sbci	r29, 0xF7	; 247
    push    shift               ;[-9]
     e4e:	2f 93       	push	r18
;   [---]                       ;[-8]
    ldi     shift,0x40          ;[-7] set msb to "1" so processing bit7 can be detected
     e50:	20 e4       	ldi	r18, 0x40	; 64
    nop2                        ;[-6]
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <foundK+0x12>
;   [---]                       ;[-5]
    ldi     bitcnt, 5           ;[-4] [rx loop init]
     e54:	65 e0       	ldi	r22, 0x05	; 5
    sbis    USBIN, USBMINUS     ;[-3] we want two bits K (sample 3 cycles too early)
     e56:	33 9b       	sbis	0x06, 3	; 6
    rjmp    haveTwoBitsK        ;[-2]
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <haveTwoBitsK>
    pop     shift               ;[-1] undo the push from before
     e5a:	2f 91       	pop	r18
    pop     bitcnt              ;[1] 
     e5c:	6f 91       	pop	r22
    rjmp    waitForK            ;[3] this was not the end of sync, retry
     e5e:	de cf       	rjmp	.-68     	; 0xe1c <waitForK>

00000e60 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1                  ;[0]
     e60:	0f 93       	push	r16
    push    x2                  ;[2]
     e62:	1f 93       	push	r17
    push    x3                  ;[4] (leap2)
     e64:	4f 93       	push	r20
    ldi     leap2, 0x55         ;[6] add leap cycle on 2nd,5th,8th,... stuff bit
     e66:	45 e5       	ldi	r20, 0x55	; 85
    push    x4                  ;[7] == leap
     e68:	5f 93       	push	r21
    ldi     leap, 0x55          ;[9] skip leap cycle on 2nd,5th,8th,... byte received
     e6a:	55 e5       	ldi	r21, 0x55	; 85
    push    cnt                 ;[10]
     e6c:	3f 93       	push	r19
    ldi     cnt, USB_BUFSIZE    ;[12] [rx loop init]
     e6e:	3b e0       	ldi	r19, 0x0B	; 11
    ldi     x2, 1<<USBPLUS      ;[13] current line state is K state. D+=="1", D-=="0"
     e70:	14 e0       	ldi	r17, 0x04	; 4

00000e72 <bit0>:
bit0:       
    in      x1, USBIN           ;[0] sample line state
     e72:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     e74:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;[2] make bit0 14 cycles long
     e76:	2e c0       	rjmp	.+92     	; 0xed4 <handleBit>

00000e78 <b6checkUnstuff>:
;----------------------------------------------------------------------------
; Process bit7. However, bit 6 still may need unstuffing.
;----------------------------------------------------------------------------

b6checkUnstuff:
    dec     bitcnt              ;[9]
     e78:	6a 95       	dec	r22
    breq    unstuff6            ;[10]
     e7a:	c9 f0       	breq	.+50     	; 0xeae <unstuff6>

00000e7c <bit7>:
bit7:
    subi    cnt, 1              ;[11] cannot use dec becaus it does not affect the carry flag
     e7c:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow            ;[12] Too many bytes received. Ignore packet
     e7e:	d8 f1       	brcs	.+118    	; 0xef6 <overflow>
    in      x1, USBIN           ;[0] sample line state
     e80:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     e82:	0c 70       	andi	r16, 0x0C	; 12
    cpse    x1, x2              ;[2] when previous line state equals current line state, handle "1"
     e84:	01 13       	cpse	r16, r17
    rjmp    b7handle0           ;[3] when line state differs, handle "0"
     e86:	0b c0       	rjmp	.+22     	; 0xe9e <b7handle0>
    sec                         ;[4]
     e88:	08 94       	sec
    ror     shift               ;[5] shift "1" into the data
     e8a:	27 95       	ror	r18
    st      y+, shift           ;[6] store the data into the buffer
     e8c:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[7] reset data for receiving the next byte
     e8e:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[9] trick to introduce a leap cycle every 3 bytes
     e90:	55 55       	subi	r21, 0x55	; 85
    brcc    nextInst            ;[10 or 11] it will fail after 85 bytes. However low speed can only receive 11
     e92:	00 f4       	brcc	.+0      	; 0xe94 <bit7+0x18>
    dec     bitcnt              ;[11 or 12]
     e94:	6a 95       	dec	r22
    brne    bit0                ;[12 or 13]
     e96:	69 f7       	brne	.-38     	; 0xe72 <bit0>
    ldi     x1, 1               ;[13 or 14] unstuffing bit 7
     e98:	01 e0       	ldi	r16, 0x01	; 1
    in      bitcnt, USBIN       ;[0] sample stuff bit
     e9a:	66 b1       	in	r22, 0x06	; 6
    rjmp    unstuff             ;[1]
     e9c:	0b c0       	rjmp	.+22     	; 0xeb4 <unstuff>

00000e9e <b7handle0>:

b7handle0:
    mov     x2,x1               ;[5] Set x2 to current line state
     e9e:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[6]
     ea0:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[7] shift "0" into the data
     ea2:	26 95       	lsr	r18
    st      y+, shift           ;[8] store data into the buffer
     ea4:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[10] reset data for receiving the next byte
     ea6:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[11] trick to introduce a leap cycle every 3 bytes
     ea8:	55 55       	subi	r21, 0x55	; 85
    brcs    bit0                ;[12] it will fail after 85 bytes. However low speed can only receive 11
     eaa:	18 f3       	brcs	.-58     	; 0xe72 <bit0>
    rjmp    bit0                ;[13]
     eac:	e2 cf       	rjmp	.-60     	; 0xe72 <bit0>

00000eae <unstuff6>:
; Handle unstuff
; x1==0xFF indicate unstuffing bit6
;----------------------------------------------------------------------------

unstuff6:
    ldi     x1,0xFF             ;[12] indicate unstuffing bit 6
     eae:	0f ef       	ldi	r16, 0xFF	; 255
    in      bitcnt, USBIN       ;[0]  sample stuff bit
     eb0:	66 b1       	in	r22, 0x06	; 6
	...

00000eb4 <unstuff>:
    nop                         ;[1]  fix timing
unstuff:                        ;b0-5  b6   b7
    mov     x2,bitcnt           ;[3]  [2]  [3]  Set x2 to match line state
     eb4:	16 2f       	mov	r17, r22
    subi    leap2, 0x55         ;[4]  [3]  [4]  delay loop
     eb6:	45 55       	subi	r20, 0x55	; 85
    brcs    nextInst            ;[5]  [4]  [5]  add one cycle every three stuff bits
     eb8:	00 f0       	brcs	.+0      	; 0xeba <unstuff+0x6>
    sbci    leap2,0             ;[6]  [5]  [6]
     eba:	40 40       	sbci	r20, 0x00	; 0
    ldi     bitcnt,6            ;[7]  [6]  [7]  reset bit stuff counter
     ebc:	66 e0       	ldi	r22, 0x06	; 6
    andi    x2, USBMASK         ;[8]  [7]  [8] only keep D+ and D-
     ebe:	1c 70       	andi	r17, 0x0C	; 12
    cpi     x1,0                ;[9]  [8]  [9]
     ec0:	00 30       	cpi	r16, 0x00	; 0
    brmi    bit7                ;[10] [9]  [10] finished unstuffing bit6 When x1<0
     ec2:	e2 f2       	brmi	.-72     	; 0xe7c <bit7>
    breq    bitloop             ;[11] ---  [11] finished unstuffing bit0-5 when x1=0
     ec4:	21 f0       	breq	.+8      	; 0xece <bitloop>
    nop                         ;---  ---  [12]
     ec6:	00 00       	nop
    in      x1, USBIN           ;---  ---  [0] sample line state for bit0
     ec8:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;---  ---  [1] filter only D+ and D- bits
     eca:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;---  ---  [2] make bit0 14 cycles long
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <handleBit>

00000ece <bitloop>:

;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------
bitloop:
    in      x1, USBIN           ;[0] sample line state
     ece:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     ed0:	0c 70       	andi	r16, 0x0C	; 12
    breq    se0                 ;[2] both lines are low so handle se0
     ed2:	a9 f0       	breq	.+42     	; 0xefe <se0>

00000ed4 <handleBit>:
handleBit:
    cpse    x1, x2              ;[3] when previous line state equals current line state, handle "1"
     ed4:	01 13       	cpse	r16, r17
    rjmp    handle0             ;[4] when line state differs, handle "0"
     ed6:	09 c0       	rjmp	.+18     	; 0xeea <handle0>
    sec                         ;[5]
     ed8:	08 94       	sec
    ror     shift               ;[6] shift "1" into the data
     eda:	27 95       	ror	r18
    brcs    b6checkUnstuff      ;[7] When after shift C is set, next bit is bit7
     edc:	68 f2       	brcs	.-102    	; 0xe78 <b6checkUnstuff>
    nop2                        ;[8]
     ede:	00 c0       	rjmp	.+0      	; 0xee0 <handleBit+0xc>
    dec     bitcnt              ;[10]
     ee0:	6a 95       	dec	r22
    brne    bitloop             ;[11]
     ee2:	a9 f7       	brne	.-22     	; 0xece <bitloop>
    ldi     x1,0                ;[12] indicate unstuff for bit other than bit6 or bit7
     ee4:	00 e0       	ldi	r16, 0x00	; 0
    in      bitcnt, USBIN       ;[0] sample stuff bit
     ee6:	66 b1       	in	r22, 0x06	; 6
    rjmp    unstuff             ;[1]
     ee8:	e5 cf       	rjmp	.-54     	; 0xeb4 <unstuff>

00000eea <handle0>:

handle0:
    mov     x2, x1              ;[6] Set x2 to current line state
     eea:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[7] reset unstuff counter. 
     eec:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[8] shift "0" into the data
     eee:	26 95       	lsr	r18
    brcs    bit7                ;[9] When after shift C is set, next bit is bit7
     ef0:	28 f2       	brcs	.-118    	; 0xe7c <bit7>
    nop                         ;[10]
     ef2:	00 00       	nop
    rjmp    bitloop             ;[11] 
     ef4:	ec cf       	rjmp	.-40     	; 0xece <bitloop>

00000ef6 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     ef6:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     ef8:	1c bb       	out	0x1c, r17	; 28

00000efa <ignorePacket>:
ignorePacket:
    clr     token
     efa:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     efc:	19 c0       	rjmp	.+50     	; 0xf30 <handleSetupOrOut>

00000efe <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     efe:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     f00:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     f02:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     f04:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     f06:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     f08:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
     f0a:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     f0c:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     f0e:	09 f1       	breq	.+66     	; 0xf52 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     f10:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     f12:	f9 f0       	breq	.+62     	; 0xf52 <handleData>
    lds     shift, usbDeviceAddr;[17]
     f14:	20 91 05 08 	lds	r18, 0x0805	; 0x800805 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     f18:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     f1a:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     f1c:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     f1e:	ed cf       	rjmp	.-38     	; 0xefa <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     f20:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     f22:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     f24:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     f26:	51 f1       	breq	.+84     	; 0xf7c <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     f28:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     f2a:	11 f0       	breq	.+4      	; 0xf30 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     f2c:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     f2e:	29 f7       	brne	.-54     	; 0xefa <ignorePacket>

00000f30 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     f30:	00 93 0c 08 	sts	0x080C, r16	; 0x80080c <usbCurrentTok>

00000f34 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     f34:	3f 91       	pop	r19
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	2f 91       	pop	r18
     f40:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
     f42:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     f44:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     f46:	67 cf       	rjmp	.-306    	; 0xe16 <waitForJ>

00000f48 <sofError>:
sofError:
    POP_RETI                    ;macro call
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	cf bf       	out	0x3f, r28	; 63
     f4e:	cf 91       	pop	r28
    reti
     f50:	18 95       	reti

00000f52 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     f52:	20 91 0c 08 	lds	r18, 0x080C	; 0x80080c <usbCurrentTok>
    tst     shift               ;[20]
     f56:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     f58:	69 f3       	breq	.-38     	; 0xf34 <doReturn>
    lds     x2, usbRxLen        ;[22]
     f5a:	10 91 0a 08 	lds	r17, 0x080A	; 0x80080a <usbRxLen>
    tst     x2                  ;[24]
     f5e:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     f60:	81 f5       	brne	.+96     	; 0xfc2 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     f62:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     f64:	82 f1       	brmi	.+96     	; 0xfc6 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     f66:	30 93 0a 08 	sts	0x080A, r19	; 0x80080a <usbRxLen>
    sts     usbRxToken, shift   ;[30]
     f6a:	20 93 06 08 	sts	0x0806, r18	; 0x800806 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
     f6e:	10 91 07 08 	lds	r17, 0x0807	; 0x800807 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
     f72:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     f74:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     f76:	30 93 07 08 	sts	0x0807, r19	; 0x800807 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     f7a:	25 c0       	rjmp	.+74     	; 0xfc6 <sendAckAndReti>

00000f7c <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     f7c:	00 91 0a 08 	lds	r16, 0x080A	; 0x80080a <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     f80:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     f82:	fc f4       	brge	.+62     	; 0xfc2 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     f84:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     f86:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     f88:	49 f4       	brne	.+18     	; 0xf9c <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     f8a:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     f8e:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     f90:	1b c0       	rjmp	.+54     	; 0xfc8 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     f92:	00 93 10 01 	sts	0x0110, r16	; 0x800110 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
     f96:	ca ef       	ldi	r28, 0xFA	; 250
    ldi     YH, hi8(usbTxBuf)   ;[44]
     f98:	d7 e0       	ldi	r29, 0x07	; 7
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     f9a:	1a c0       	rjmp	.+52     	; 0xfd0 <usbSendAndReti>

00000f9c <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     f9c:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     fa0:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     fa2:	12 c0       	rjmp	.+36     	; 0xfc8 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     fa4:	00 93 8d 05 	sts	0x058D, r16	; 0x80058d <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     fa8:	ce e8       	ldi	r28, 0x8E	; 142
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     faa:	d5 e0       	ldi	r29, 0x05	; 5
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     fac:	11 c0       	rjmp	.+34     	; 0xfd0 <usbSendAndReti>

00000fae <bitstuffN>:
; Spec allows 7.5 bit times from EOP to SOP for replies
; 7.5 bit times is 100 cycles. This implementation arrives a bit later at se0
; then specified in the include file but there is plenty of time

bitstuffN:
    eor     x1, x4          ;[8]
     fae:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[9]
     fb0:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[10]
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <bitstuffN+0x6>
    out     USBOUT, x1      ;[12] <-- out
     fb4:	08 b9       	out	0x08, r16	; 8
    rjmp    didStuffN       ;[0]
     fb6:	19 c0       	rjmp	.+50     	; 0xfea <didStuffN>

00000fb8 <bitstuff7>:
    
bitstuff7:
    eor     x1, x4          ;[6]
     fb8:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[7] Carry is zero due to brcc
     fba:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[8] compensate for ror shift at branch destination
     fbc:	22 1f       	adc	r18, r18
    nop2                    ;[9]
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <bitstuff7+0x8>
    rjmp    didStuff7       ;[11]
     fc0:	1d c0       	rjmp	.+58     	; 0xffc <didStuff7>

00000fc2 <sendNakAndReti>:

sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
     fc2:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <sendX3AndReti>

00000fc6 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     fc6:	32 ed       	ldi	r19, 0xD2	; 210

00000fc8 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
     fc8:	43 2f       	mov	r20, r19

00000fca <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
     fca:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
     fcc:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     fce:	32 e0       	ldi	r19, 0x02	; 2

00000fd0 <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     fd0:	17 b1       	in	r17, 0x07	; 7
    ori     x2, USBMASK     ;[-11]
     fd2:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     fd4:	43 9a       	sbi	0x08, 3	; 8
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     fd6:	08 b1       	in	r16, 0x08	; 8
    out     USBDDR, x2      ;[-7] <- acquire bus
     fd8:	17 b9       	out	0x07, r17	; 7
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     fda:	5c e0       	ldi	r21, 0x0C	; 12
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     fdc:	20 e8       	ldi	r18, 0x80	; 128

00000fde <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x49    ;[-4]        [10] binary 01001001
     fde:	69 e4       	ldi	r22, 0x49	; 73

00000fe0 <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [10]   [11]
     fe0:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [11]   [12]
     fe2:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [12]   [13]   <-- out N
     fe4:	08 b9       	out	0x08, r16	; 8
    ror     shift           ;[0]  [13]   [14]
     fe6:	27 95       	ror	r18
    ror     x2              ;[1]
     fe8:	17 95       	ror	r17

00000fea <didStuffN>:
didStuffN:
    nop2                    ;[2]
     fea:	00 c0       	rjmp	.+0      	; 0xfec <didStuffN+0x2>
    nop                     ;[4]
     fec:	00 00       	nop
    cpi     x2, 0xfc        ;[5]
     fee:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[6]
     ff0:	f0 f6       	brcc	.-68     	; 0xfae <bitstuffN>
    lsr     bitcnt          ;[7]
     ff2:	66 95       	lsr	r22
    brcc    txBitLoop       ;[8]
     ff4:	a8 f7       	brcc	.-22     	; 0xfe0 <txBitLoop>
    brne    txBitLoop       ;[9]
     ff6:	a1 f7       	brne	.-24     	; 0xfe0 <txBitLoop>

    sbrs    shift, 0        ;[10]
     ff8:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[11]
     ffa:	05 27       	eor	r16, r21

00000ffc <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[-1] [13] <-- out 7
     ffc:	08 b9       	out	0x08, r16	; 8
    ror     shift           ;[0] [14]
     ffe:	27 95       	ror	r18
    ror     x2              ;[1]
    1000:	17 95       	ror	r17
    nop                     ;[2]
    1002:	00 00       	nop
    cpi     x2, 0xfc        ;[3]
    1004:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[4]
    1006:	c0 f6       	brcc	.-80     	; 0xfb8 <bitstuff7>
    ld      shift, y+       ;[5]
    1008:	29 91       	ld	r18, Y+
    dec     cnt             ;[7]
    100a:	3a 95       	dec	r19
    brne    txByteLoop      ;[8]
    100c:	41 f7       	brne	.-48     	; 0xfde <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[9] prepare SE0 [spec says EOP may be 25 to 30 cycles]
    100e:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[10]
    1010:	10 91 0b 08 	lds	r17, 0x080B	; 0x80080b <usbNewDeviceAddr>
    lsl     x2              ;[12] we compare with left shifted address
    1014:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[13] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
    1016:	08 b9       	out	0x08, r16	; 8
    subi    YL, 20 + 2      ;[0] Only assign address on data packets, not ACK/NAK in x3
    1018:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[1]
    101a:	d0 40       	sbci	r29, 0x00	; 0
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[2]
    101c:	11 f0       	breq	.+4      	; 0x1022 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
    101e:	10 93 05 08 	sts	0x0805, r17	; 0x800805 <usbDeviceAddr>

00001022 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
    1022:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)   ;[5]
    1024:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     ;[6]
    1026:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR      ;[7]
    1028:	17 b1       	in	r17, 0x07	; 7
    cbr     x2, USBMASK     ;[8] set both pins to input
    102a:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1          ;[9]
    102c:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
    102e:	43 7f       	andi	r20, 0xF3	; 243
    ldi     x4, 5           ;[11]
    1030:	55 e0       	ldi	r21, 0x05	; 5

00001032 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21] [24]
    1032:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22] [25]
    1034:	f1 f7       	brne	.-4      	; 0x1032 <se0Delay>
    out     USBOUT, x1      ;[26] <-- out J (idle) -- end of SE0 (EOP signal)
    1036:	08 b9       	out	0x08, r16	; 8
    out     USBDDR, x2      ;[27] <-- release bus now
    1038:	17 b9       	out	0x07, r17	; 7
    out     USBOUT, x3      ;[28] <-- ensure no pull-up resistors are active
    103a:	48 b9       	out	0x08, r20	; 8
    rjmp    doReturn
    103c:	7b cf       	rjmp	.-266    	; 0xf34 <doReturn>

0000103e <anlgComp_fw_init>:


void anlgComp_fw_init(void)
{
	/* enable power for ADC, reference voltage and analog comparator */
	PRR &= ~(_BV(PRADC));
    103e:	e4 e6       	ldi	r30, 0x64	; 100
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8e 7f       	andi	r24, 0xFE	; 254
    1046:	80 83       	st	Z, r24

	/* init the ADC counter */
	acAdcConvertNowCntr = 0;
    1048:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <acAdcConvertNowCntr>

	/* disable digital input buffers on AIN0, AIN1, ADC0 and ADC1 */
	DIDR1 |= (0b11 << AIN0D);
    104c:	ef e7       	ldi	r30, 0x7F	; 127
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	83 60       	ori	r24, 0x03	; 3
    1054:	80 83       	st	Z, r24
	DIDR0  = (0b000011 << ADC0D);
    1056:	83 e0       	ldi	r24, 0x03	; 3
    1058:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	/* enable comparator AIN1 pin */
	ADCSRB &= ~(_BV(ACME));									// disable Analog Comparator Multiplex Enable
    105c:	eb e7       	ldi	r30, 0x7B	; 123
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8f 7b       	andi	r24, 0xBF	; 191
    1064:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN) | (0b111 << ADPS0);					// AD enable, use 128/1 prescaler for ADC clock = 156250 Hz
    1066:	ea e7       	ldi	r30, 0x7A	; 122
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	87 68       	ori	r24, 0x87	; 135
    106e:	80 83       	st	Z, r24

	/* enable comparator AIN0 pin */
	ACSR  = (ACSR &  ~(_BV(ACBG) | _BV(ACD)	|	 		  	// disable bandgap reference voltage, switch off Analog Comparator Disable
    1070:	80 b7       	in	r24, 0x30	; 48
    1072:	87 e1       	ldi	r24, 0x17	; 23
    1074:	80 bf       	out	0x30, r24	; 48
			_BV(ACI)						|				// clear any pending interrupt
			(0b11 << ACIS0);								// disable ACIE for interrupt as long interrupt source is changed, interrupt on Rising Edge
	// ACSR |= _BV(ACIE);									// now set ACIE for interrupt (disabled --> done within Timer1)

	/* ADC reference set to AREF */
	acAdcConvertNowState = 0x11;							// set FSM address to "discard next conversion"
    1076:	81 e1       	ldi	r24, 0x11	; 17
    1078:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>
	ADMUX = (0b01 << REFS0) | 0x1;							// use AVcc as Vref, keep ADLAR off, switch to channel ADC1 (phase input)
    107c:	81 e4       	ldi	r24, 0x41	; 65
    107e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	/* start the initial conversion */
	ADCSRA |= _BV(ADSC) | _BV(ADIF);						// start first conversion of the conversion train and clear pending interrupt flag
    1082:	80 81       	ld	r24, Z
    1084:	80 65       	ori	r24, 0x50	; 80
    1086:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);									// enable ADC interrupt
    1088:	80 81       	ld	r24, Z
    108a:	88 60       	ori	r24, 0x08	; 8
    108c:	80 83       	st	Z, r24
    108e:	08 95       	ret

00001090 <anlgComp_fw_startAdcConvertion>:
#if 0
	set_sleep_mode(SLEEP_MODE_ADC);							// do not use SLEEP_MODE_ADC due to the fact that the timers are stopped
	sleep_enable();
	sleep_cpu();
#else
	ADCSRA |= _BV(ADSC);									// start conversion
    1090:	ea e7       	ldi	r30, 0x7A	; 122
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	80 64       	ori	r24, 0x40	; 64
    1098:	80 83       	st	Z, r24
    109a:	08 95       	ret

0000109c <__vector_21>:
}
#endif

//void anlgComp_fw_ISR_ADC() - __vector_21
ISR(ADC_vect, ISR_BLOCK)
{
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
	//sleep_disable();

	/* read the ADC value */
	uint8_t localADCL = ADCL;								// read LSB first
    10be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint8_t localADCH = ADCH;
    10c2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	sei();
    10c6:	78 94       	sei

	uint16_t adVal  =  localADCL | (localADCH << 8);
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	92 2b       	or	r25, r18

	switch (acAdcConvertNowState)
    10cc:	20 91 29 05 	lds	r18, 0x0529	; 0x800529 <acAdcConvertNowState>
    10d0:	28 30       	cpi	r18, 0x08	; 8
    10d2:	21 f1       	breq	.+72     	; 0x111c <__vector_21+0x80>
    10d4:	68 f4       	brcc	.+26     	; 0x10f0 <__vector_21+0x54>
    10d6:	22 23       	and	r18, r18
    10d8:	a1 f0       	breq	.+40     	; 0x1102 <__vector_21+0x66>
    10da:	21 30       	cpi	r18, 0x01	; 1
    10dc:	19 f5       	brne	.+70     	; 0x1124 <__vector_21+0x88>
	{
	case 0x01:
		/* store PHASE value */
		acAdcCh[1] = adVal;
    10de:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <acAdcCh+0x3>
    10e2:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <acAdcCh+0x2>

		/* switch to ADC input channel 0 - PWM analog value */
		acAdcConvertNowState = 0x10;
    10e6:	80 e1       	ldi	r24, 0x10	; 16
    10e8:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>
		ADMUX = 0b01000000;  								// = (0b01 << REFS0) | ((ac_adc_convertNowCh & 0x07) << MUX0);
    10ec:	80 e4       	ldi	r24, 0x40	; 64
    10ee:	1e c0       	rjmp	.+60     	; 0x112c <__vector_21+0x90>

	sei();

	uint16_t adVal  =  localADCL | (localADCH << 8);

	switch (acAdcConvertNowState)
    10f0:	21 31       	cpi	r18, 0x11	; 17
    10f2:	01 f1       	breq	.+64     	; 0x1134 <__vector_21+0x98>
    10f4:	28 31       	cpi	r18, 0x18	; 24
    10f6:	71 f0       	breq	.+28     	; 0x1114 <__vector_21+0x78>
    10f8:	20 31       	cpi	r18, 0x10	; 16
    10fa:	a1 f4       	brne	.+40     	; 0x1124 <__vector_21+0x88>
		anlgComp_fw_startAdcConvertion();
		break;

	case 0x10:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x00;
    10fc:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <acAdcConvertNowState>
    1100:	17 c0       	rjmp	.+46     	; 0x1130 <__vector_21+0x94>
		anlgComp_fw_startAdcConvertion();
		break;

	case 0x00:
		/* store PWM analog value */
		acAdcCh[0] = adVal;
    1102:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <acAdcCh+0x1>
    1106:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <acAdcCh>

		/* switch to ADC input channel for temperature */
		acAdcConvertNowState = 0x18;
    110a:	88 e1       	ldi	r24, 0x18	; 24
    110c:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>

		/* switch over to temperature conversion */
		ADMUX = 0b11001000;  								// = (0b11 << REFS0) | (0x08 << MUX0);
    1110:	88 ec       	ldi	r24, 0xC8	; 200
    1112:	0c c0       	rjmp	.+24     	; 0x112c <__vector_21+0x90>
		anlgComp_fw_startAdcConvertion();
		break;

	case 0x18:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x08;
    1114:	88 e0       	ldi	r24, 0x08	; 8
    1116:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>
    111a:	0a c0       	rjmp	.+20     	; 0x1130 <__vector_21+0x94>
		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
		break;

	case 0x08:
		acAdcCh[2] = adVal;
    111c:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <acAdcCh+0x5>
    1120:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <acAdcCh+0x4>
		// no break
	default:
		/* switch to ADC input channel 1 - PHASE value */
		acAdcConvertNowState = 0x11;
    1124:	81 e1       	ldi	r24, 0x11	; 17
    1126:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>
		ADMUX = 0b01000000 | 1;  							// = (0b01 << REFS0) | ((ac_adc_convertNowCh & 0x07) << MUX0);
    112a:	81 e4       	ldi	r24, 0x41	; 65
    112c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
    1130:	af df       	rcall	.-162    	; 0x1090 <anlgComp_fw_startAdcConvertion>
		break;
    1132:	08 c0       	rjmp	.+16     	; 0x1144 <__vector_21+0xa8>

	case 0x11:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x01;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>

		/* update ADC counter to inform about a new conversion train is ready to be read */
		acAdcConvertNowCntr++;
    113a:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <acAdcConvertNowCntr>
    113e:	8f 5f       	subi	r24, 0xFF	; 255
    1140:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <acAdcConvertNowCntr>

		/* end of conversion train - no more ADSC. Woken up by the next rising edge of PPS in ISR(ANALOG_COMP_vect, ISR_BLOCK) */
		break;
	}
}
    1144:	ff 91       	pop	r31
    1146:	ef 91       	pop	r30
    1148:	bf 91       	pop	r27
    114a:	af 91       	pop	r26
    114c:	9f 91       	pop	r25
    114e:	8f 91       	pop	r24
    1150:	7f 91       	pop	r23
    1152:	6f 91       	pop	r22
    1154:	5f 91       	pop	r21
    1156:	4f 91       	pop	r20
    1158:	3f 91       	pop	r19
    115a:	2f 91       	pop	r18
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f 90       	pop	r0
    1162:	1f 90       	pop	r1
    1164:	18 95       	reti

00001166 <clkFastCtr_fw_init>:


void clkFastCtr_fw_init(void)
{
	/* power up this module */
	PRR &= ~(_BV(PRTIM1));
    1166:	e4 e6       	ldi	r30, 0x64	; 100
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	87 7f       	andi	r24, 0xF7	; 247
    116e:	80 83       	st	Z, r24

	/* clear the timer */
	TCNT1H = 0;												// write high byte first
    1170:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
    1174:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	/* set the timer top value for 20.000 clocks @ 20MHz --> 1ms */
	OCR1AH = (OCR1_TOP_VALUE >> 8);							// write high byte first
    1178:	8e e4       	ldi	r24, 0x4E	; 78
    117a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = (OCR1_TOP_VALUE & 0xff);
    117e:	8f e1       	ldi	r24, 0x1F	; 31
    1180:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	/* set the timer-1 mode of operation: 0x4 = CTC, counting up, TOP := OCR1A [. . WGM01 WGM00] */
	TCCR1A = (0b00<<WGM10);
    1184:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	/* set the timer-1 mode of operation: 0x4 = CTC, counting up, TOP := OCR1A [WGM03 WGM02 . .] */
	/* no ICNC1 input filtering */
	/* ICES is set to trigger on the rising edge of the Comparator output --> rising edge of AIN0 */
	/* set the timer-1 clock source to 20 MHz XTAL */
	TCCR1B = _BV(ICES1)						|				// select rising edge of the ICP1/AIN0 input to trigger
    1188:	89 e4       	ldi	r24, 0x49	; 73
    118a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			 (0b01<<WGM12)					|				// WGM03 WGM02
			 (0b001<<CS10);									// since now the timer runs

	/* ICF1 and OCF1A interrupt enable */
	TIMSK1 = _BV(ICIE1) 					|				// ICF1   - GPS PPS rising edge event
    118e:	82 e2       	ldi	r24, 0x22	; 34
    1190:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1194:	08 95       	ret

00001196 <__vector_11>:
}
#endif

//void clkFastCtr_fw_ISR_T1_CompA() - __vector_11
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	2f 93       	push	r18
    11a2:	3f 93       	push	r19
    11a4:	8f 93       	push	r24
    11a6:	9f 93       	push	r25
    11a8:	af 93       	push	r26
    11aa:	bf 93       	push	r27
	/* this ISR is called every 20.000 clocks - repeating each ms again */

	/* the 32 bit timer overflows every 3 1/4 year */
	fastCtr1ms++;
    11ac:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <fastCtr1ms>
    11b0:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <fastCtr1ms+0x1>
    11b4:	a0 91 37 05 	lds	r26, 0x0537	; 0x800537 <fastCtr1ms+0x2>
    11b8:	b0 91 38 05 	lds	r27, 0x0538	; 0x800538 <fastCtr1ms+0x3>
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	a1 1d       	adc	r26, r1
    11c0:	b1 1d       	adc	r27, r1
    11c2:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <fastCtr1ms>
    11c6:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <fastCtr1ms+0x1>
    11ca:	a0 93 37 05 	sts	0x0537, r26	; 0x800537 <fastCtr1ms+0x2>
    11ce:	b0 93 38 05 	sts	0x0538, r27	; 0x800538 <fastCtr1ms+0x3>

	sei();													// since here we can accept interruptions
    11d2:	78 94       	sei

	if (main_bf.mainStackCheck) {
    11d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    11d8:	86 ff       	sbrs	r24, 6
    11da:	11 c0       	rjmp	.+34     	; 0x11fe <__vector_11+0x68>
		cli();
    11dc:	f8 94       	cli
		uint8_t localStackLo = SPL;
    11de:	8d b7       	in	r24, 0x3d	; 61
		uint8_t localStackHi = SPH;
    11e0:	2e b7       	in	r18, 0x3e	; 62
		sei();
    11e2:	78 94       	sei

		uint16_t localStackAddr = (localStackHi << 8) | localStackLo;
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	92 2b       	or	r25, r18
		if (mainSCStackAddr > localStackAddr) {
    11e8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <mainSCStackAddr>
    11ec:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <mainSCStackAddr+0x1>
    11f0:	82 17       	cp	r24, r18
    11f2:	93 07       	cpc	r25, r19
    11f4:	20 f4       	brcc	.+8      	; 0x11fe <__vector_11+0x68>
			mainSCStackAddr = localStackAddr;
    11f6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <mainSCStackAddr+0x1>
    11fa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <mainSCStackAddr>
		}
	}
}
    11fe:	bf 91       	pop	r27
    1200:	af 91       	pop	r26
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	3f 91       	pop	r19
    1208:	2f 91       	pop	r18
    120a:	0f 90       	pop	r0
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	0f 90       	pop	r0
    1210:	1f 90       	pop	r1
    1212:	18 95       	reti

00001214 <__vector_10>:


//void clkFastCtr_fw_ISR_T1_Capt() - __vector_10
ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    1214:	1f 92       	push	r1
    1216:	0f 92       	push	r0
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	0f 92       	push	r0
    121c:	11 24       	eor	r1, r1
    121e:	2f 93       	push	r18
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	ef 93       	push	r30
    122e:	ff 93       	push	r31
	/* rising edge of the PPS signal from df4iah_fw_anlgComp.c detected */

	/* take the current timestamp of the free floating 20 MHz timer */
	register uint8_t  localICR1L = ICR1L;					// capture timer value - low byte first
    1230:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	register uint8_t  localICR1H = ICR1H;
    1234:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
	register uint32_t localFastCtr1ms = fastCtr1ms;
    1238:	40 91 35 05 	lds	r20, 0x0535	; 0x800535 <fastCtr1ms>
    123c:	50 91 36 05 	lds	r21, 0x0536	; 0x800536 <fastCtr1ms+0x1>
    1240:	60 91 37 05 	lds	r22, 0x0537	; 0x800537 <fastCtr1ms+0x2>
    1244:	70 91 38 05 	lds	r23, 0x0538	; 0x800538 <fastCtr1ms+0x3>

	sei();
    1248:	78 94       	sei

	//anlgComp_fw_startAdcConvertion();
	ADCSRA |= _BV(ADSC);									// start conversion
    124a:	ea e7       	ldi	r30, 0x7A	; 122
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	90 81       	ld	r25, Z
    1250:	90 64       	ori	r25, 0x40	; 64
    1252:	90 83       	st	Z, r25

	cli();
    1254:	f8 94       	cli
	fastStampTCNT1  = localICR1L | (localICR1H << 8);
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	92 2b       	or	r25, r18
    125a:	90 93 3e 05 	sts	0x053E, r25	; 0x80053e <fastStampTCNT1+0x1>
    125e:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <fastStampTCNT1>
	fastStampCtr1ms = localFastCtr1ms;
    1262:	40 93 39 05 	sts	0x0539, r20	; 0x800539 <fastStampCtr1ms>
    1266:	50 93 3a 05 	sts	0x053A, r21	; 0x80053a <fastStampCtr1ms+0x1>
    126a:	60 93 3b 05 	sts	0x053B, r22	; 0x80053b <fastStampCtr1ms+0x2>
    126e:	70 93 3c 05 	sts	0x053C, r23	; 0x80053c <fastStampCtr1ms+0x3>
	sei();
    1272:	78 94       	sei
}
    1274:	ff 91       	pop	r31
    1276:	ef 91       	pop	r30
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <clkPullPwm_fw_init>:


void clkPullPwm_fw_init(void)
{
	// power up this module
	PRR &= ~(_BV(PRTIM0));
    1290:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    1294:	8f 7d       	andi	r24, 0xDF	; 223
    1296:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

	// set the timer-0 counter to zero.
	TCNT0 = 0x00;
    129a:	16 bc       	out	0x26, r1	; 38

	// set the timer-0 PWM-B compare register
	OCR0B = DEFAULT_PWM_COUNT;
    129c:	8a e5       	ldi	r24, 0x5A	; 90
    129e:	88 bd       	out	0x28, r24	; 40

	// set the timer-0 mode of operation: 0x3 = Fast PWM, counting up, TOP := MAX [. . WGM01 WGM00]
	// set the timer-0 compare-B waveform generator to: PWM, 1 at >= match, 0 else
	TCCR0A = (0b10<<COM0B0) | (0b11<<WGM00);
    12a0:	83 e2       	ldi	r24, 0x23	; 35
    12a2:	84 bd       	out	0x24, r24	; 36

	// set the timer-0 mode of operation: 0x3 = Fast PWM, counting up, TOP := MAX [WGM02 . .]
	// set the timer-0 clock source to 20 MHz XTAL.
	TCCR0B = (0b0<<WGM02) | (0b001<<CS00);
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	85 bd       	out	0x25, r24	; 37

	// set the timer-0 PWM-B compare output: setting data port for output
	DDR_OC0B_REG |= _BV(DDR_OC0B);
    12a8:	55 9a       	sbi	0x0a, 5	; 10


	/* single memory access */
	if (memory_fw_isEepromBlockValid(BLOCK_REFOSC_NR)) {
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	0e 94 01 21 	call	0x4202	; 0x4202 <memory_fw_isEepromBlockValid>
    12b0:	88 23       	and	r24, r24
    12b2:	c9 f0       	breq	.+50     	; 0x12e6 <clkPullPwm_fw_init+0x56>
		memory_fw_readEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial));
    12b4:	4a e5       	ldi	r20, 0x5A	; 90
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	80 e4       	ldi	r24, 0x40	; 64
    12bc:	95 e0       	ldi	r25, 0x05	; 5
    12be:	0e 94 de 20 	call	0x41bc	; 0x41bc <memory_fw_readEEpromPage>
		memory_fw_readEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial_sub, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial_sub));
    12c2:	4b e5       	ldi	r20, 0x5B	; 91
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	8f e3       	ldi	r24, 0x3F	; 63
    12ca:	95 e0       	ldi	r25, 0x05	; 5
    12cc:	0e 94 de 20 	call	0x41bc	; 0x41bc <memory_fw_readEEpromPage>

		uint8_t sreg = SREG;
    12d0:	8f b7       	in	r24, 0x3f	; 63
		cli();
    12d2:	f8 94       	cli
		fastPwmLoopVal		= pullCoef_b02_pwm_initial;
    12d4:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <pullCoef_b02_pwm_initial>
    12d8:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <fastPwmLoopVal>
		fastPwmSubLoopVal	= pullCoef_b02_pwm_initial_sub;
    12dc:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <pullCoef_b02_pwm_initial_sub>
    12e0:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <fastPwmSubLoopVal>
		SREG = sreg;
    12e4:	8f bf       	out	0x3f, r24	; 63
	}

	/* init interrupt */
	TIFR0  |= _BV(TOV0);
    12e6:	a8 9a       	sbi	0x15, 0	; 21
	TIMSK0 |= _BV(TOIE0);
    12e8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    12ec:	81 60       	ori	r24, 0x01	; 1
    12ee:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    12f2:	08 95       	ret

000012f4 <__vector_16>:
#endif


//void clkPullPwm_fw_ISR_T0_OVF() - __vector_16
ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    12f4:	1f 92       	push	r1
    12f6:	0f 92       	push	r0
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	0f 92       	push	r0
    12fc:	11 24       	eor	r1, r1
    12fe:	8f 93       	push	r24
    1300:	9f 93       	push	r25
	sei();
    1302:	78 94       	sei

	/* minimal Sub-PWM value for its FAST_PWM_SUB_BITCNT */
	const uint8_t localSubPwmInc = (1 << (8 - FAST_PWM_SUB_BITCNT));

	if (fastPwmSingleLoad) {
    1304:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <fastPwmSingleLoad>
    1308:	88 23       	and	r24, r24
    130a:	61 f0       	breq	.+24     	; 0x1324 <__vector_16+0x30>
		cli();
    130c:	f8 94       	cli
		OCR0B			= fastPwmSingleVal;
    130e:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <fastPwmSingleVal>
    1312:	88 bd       	out	0x28, r24	; 40
		fastPwmSubCmp	= fastPwmSubSingleVal;
    1314:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <fastPwmSubSingleVal>
    1318:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <fastPwmSubCmp>
		sei();
    131c:	78 94       	sei

		/* single value loaded */
		fastPwmSingleLoad = 0;
    131e:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <fastPwmSingleLoad>
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <__vector_16+0x42>

	} else {
		/* set the T0 compare B register with the current setting of the integer PWM value */
		cli();
    1324:	f8 94       	cli
		OCR0B			= fastPwmLoopVal;
    1326:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <fastPwmLoopVal>
    132a:	88 bd       	out	0x28, r24	; 40
		fastPwmSubCmp	= fastPwmSubLoopVal;
    132c:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <fastPwmSubLoopVal>
    1330:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <fastPwmSubCmp>
		sei();
    1334:	78 94       	sei
	}

	/* increment if counter is lower than the sub-compare value to get a Sub-PWM (fractional part) */
	cli();
    1336:	f8 94       	cli
	if (fastPwmSubCnt < fastPwmSubCmp) {
    1338:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <fastPwmSubCnt>
    133c:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <fastPwmSubCmp>
    1340:	98 17       	cp	r25, r24
    1342:	18 f4       	brcc	.+6      	; 0x134a <__vector_16+0x56>
		OCR0B++;
    1344:	88 b5       	in	r24, 0x28	; 40
    1346:	8f 5f       	subi	r24, 0xFF	; 255
    1348:	88 bd       	out	0x28, r24	; 40
	}
	sei();
    134a:	78 94       	sei

	/* sub-counter increment */
	fastPwmSubCnt += localSubPwmInc;						// overflowing is intended
    134c:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <fastPwmSubCnt>
    1350:	8f 5f       	subi	r24, 0xFF	; 255
    1352:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <fastPwmSubCnt>
}
    1356:	9f 91       	pop	r25
    1358:	8f 91       	pop	r24
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <main_fw_nmeaUtcPlusOneSec>:

		twi_smart_lcd_fw_set_pos_height(height_int, height_frac100);
	}
}

static void main_fw_nmeaUtcPlusOneSec(void) {
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
	++main_nmeaTimeUtcInt;
    136c:	c0 90 53 05 	lds	r12, 0x0553	; 0x800553 <main_nmeaTimeUtcInt>
    1370:	d0 90 54 05 	lds	r13, 0x0554	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    1374:	e0 90 55 05 	lds	r14, 0x0555	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    1378:	f0 90 56 05 	lds	r15, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x3>
    137c:	2f ef       	ldi	r18, 0xFF	; 255
    137e:	c2 1a       	sub	r12, r18
    1380:	d2 0a       	sbc	r13, r18
    1382:	e2 0a       	sbc	r14, r18
    1384:	f2 0a       	sbc	r15, r18

	if ((main_nmeaTimeUtcInt % 100) > 59) {
    1386:	c7 01       	movw	r24, r14
    1388:	b6 01       	movw	r22, r12
    138a:	24 e6       	ldi	r18, 0x64	; 100
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e0       	ldi	r20, 0x00	; 0
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
    1396:	6c 33       	cpi	r22, 0x3C	; 60
    1398:	71 05       	cpc	r23, r1
    139a:	81 05       	cpc	r24, r1
    139c:	91 05       	cpc	r25, r1
    139e:	4c f0       	brlt	.+18     	; 0x13b2 <main_fw_nmeaUtcPlusOneSec+0x4e>
		main_nmeaTimeUtcInt -= main_nmeaTimeUtcInt % 100;
    13a0:	c6 1a       	sub	r12, r22
    13a2:	d7 0a       	sbc	r13, r23
    13a4:	e8 0a       	sbc	r14, r24
    13a6:	f9 0a       	sbc	r15, r25
		main_nmeaTimeUtcInt += 100;
    13a8:	84 e6       	ldi	r24, 0x64	; 100
    13aa:	c8 0e       	add	r12, r24
    13ac:	d1 1c       	adc	r13, r1
    13ae:	e1 1c       	adc	r14, r1
    13b0:	f1 1c       	adc	r15, r1
    13b2:	c0 92 53 05 	sts	0x0553, r12	; 0x800553 <main_nmeaTimeUtcInt>
    13b6:	d0 92 54 05 	sts	0x0554, r13	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    13ba:	e0 92 55 05 	sts	0x0555, r14	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    13be:	f0 92 56 05 	sts	0x0556, r15	; 0x800556 <main_nmeaTimeUtcInt+0x3>
	}

	if ((main_nmeaTimeUtcInt % 10000) > 5959) {
    13c2:	c0 90 53 05 	lds	r12, 0x0553	; 0x800553 <main_nmeaTimeUtcInt>
    13c6:	d0 90 54 05 	lds	r13, 0x0554	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    13ca:	e0 90 55 05 	lds	r14, 0x0555	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    13ce:	f0 90 56 05 	lds	r15, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x3>
    13d2:	c7 01       	movw	r24, r14
    13d4:	b6 01       	movw	r22, r12
    13d6:	20 e1       	ldi	r18, 0x10	; 16
    13d8:	37 e2       	ldi	r19, 0x27	; 39
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
    13e2:	68 34       	cpi	r22, 0x48	; 72
    13e4:	27 e1       	ldi	r18, 0x17	; 23
    13e6:	72 07       	cpc	r23, r18
    13e8:	81 05       	cpc	r24, r1
    13ea:	91 05       	cpc	r25, r1
    13ec:	94 f0       	brlt	.+36     	; 0x1412 <main_fw_nmeaUtcPlusOneSec+0xae>
		main_nmeaTimeUtcInt -= (main_nmeaTimeUtcInt % 10000)  /* - (main_nmeaTimeUtcSec % 100) */ ;  // with +1 this can be cut out
    13ee:	c6 1a       	sub	r12, r22
    13f0:	d7 0a       	sbc	r13, r23
    13f2:	e8 0a       	sbc	r14, r24
    13f4:	f9 0a       	sbc	r15, r25
		main_nmeaTimeUtcInt +=  10000;
    13f6:	80 e1       	ldi	r24, 0x10	; 16
    13f8:	c8 0e       	add	r12, r24
    13fa:	87 e2       	ldi	r24, 0x27	; 39
    13fc:	d8 1e       	adc	r13, r24
    13fe:	e1 1c       	adc	r14, r1
    1400:	f1 1c       	adc	r15, r1
    1402:	c0 92 53 05 	sts	0x0553, r12	; 0x800553 <main_nmeaTimeUtcInt>
    1406:	d0 92 54 05 	sts	0x0554, r13	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    140a:	e0 92 55 05 	sts	0x0555, r14	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    140e:	f0 92 56 05 	sts	0x0556, r15	; 0x800556 <main_nmeaTimeUtcInt+0x3>
	}
}
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	df 90       	pop	r13
    1418:	cf 90       	pop	r12
    141a:	08 95       	ret

0000141c <recalcEepromCrc>:
	val *= pow(10, digits);			// shift digits count left of decimal format
	return (int) floorf(val);		// return integer part
}

static void recalcEepromCrc(enum BLOCK_NR_t block, uint16_t crcOffset)
{
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	00 d0       	rcall	.+0      	; 0x1428 <recalcEepromCrc+0xc>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	18 2f       	mov	r17, r24
    142e:	7b 01       	movw	r14, r22
	/* for any modified block add the corresponding CRC seal marker and do a  memory_fw_manageBlock() */
	uint16_t newCrc = memory_fw_getSealMarker(block);
    1430:	0e 94 9e 20 	call	0x413c	; 0x413c <memory_fw_getSealMarker>
    1434:	9a 83       	std	Y+2, r25	; 0x02
    1436:	89 83       	std	Y+1, r24	; 0x01
	memory_fw_writeEEpromPage((uint8_t*) &newCrc, sizeof(uint16_t), crcOffset);
    1438:	a7 01       	movw	r20, r14
    143a:	62 e0       	ldi	r22, 0x02	; 2
    143c:	ce 01       	movw	r24, r28
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	0e 94 3a 21 	call	0x4274	; 0x4274 <memory_fw_writeEEpromPage>
	memory_fw_manageBlock(block);
    1444:	81 2f       	mov	r24, r17
    1446:	0e 94 83 21 	call	0x4306	; 0x4306 <memory_fw_manageBlock>
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	08 95       	ret

0000145a <main_fw_calcTimerAdj>:
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
}

static float main_fw_calcTimerAdj(float pwmAdjust, uint8_t* intVal, uint8_t* intSubVal)
{
    145a:	4f 92       	push	r4
    145c:	5f 92       	push	r5
    145e:	6f 92       	push	r6
    1460:	7f 92       	push	r7
    1462:	8f 92       	push	r8
    1464:	9f 92       	push	r9
    1466:	af 92       	push	r10
    1468:	bf 92       	push	r11
    146a:	cf 92       	push	r12
    146c:	df 92       	push	r13
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	4b 01       	movw	r8, r22
    147c:	5c 01       	movw	r10, r24
    147e:	6a 01       	movw	r12, r20
    1480:	79 01       	movw	r14, r18
}

static float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    1482:	fa 01       	movw	r30, r20
    1484:	60 81       	ld	r22, Z
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    1490:	2b 01       	movw	r4, r22
    1492:	3c 01       	movw	r6, r24
    1494:	f7 01       	movw	r30, r14
    1496:	60 81       	ld	r22, Z
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e8       	ldi	r20, 0x80	; 128
    14a8:	5b e3       	ldi	r21, 0x3B	; 59
    14aa:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	c3 01       	movw	r24, r6
    14b4:	b2 01       	movw	r22, r4
    14b6:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
	const float maxLimit = 255.0f - (1.0f / (1 << FAST_PWM_SUB_BITCNT));	// NOT 256.0f due to the compare unit that catches not around the overflow value

	/* add the time offset to the current PWM settings */
	fltTime += pwmAdjust;
    14ba:	a5 01       	movw	r20, r10
    14bc:	94 01       	movw	r18, r8
    14be:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    14c2:	8b 01       	movw	r16, r22
    14c4:	d8 2f       	mov	r29, r24
    14c6:	c9 2f       	mov	r28, r25

	/* windowing the next value into the 8-Bit range */
	if (fltTime < 0.0f) {
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	a9 01       	movw	r20, r18
    14ce:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    14d2:	87 fd       	sbrc	r24, 7
    14d4:	1c c0       	rjmp	.+56     	; 0x150e <main_fw_calcTimerAdj+0xb4>
		residue = fltTime;
		fltTime = 0.0f;

	} else if (fltTime > maxLimit) {
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4e e7       	ldi	r20, 0x7E	; 126
    14dc:	53 e4       	ldi	r21, 0x43	; 67
    14de:	b8 01       	movw	r22, r16
    14e0:	8d 2f       	mov	r24, r29
    14e2:	9c 2f       	mov	r25, r28
    14e4:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    14e8:	18 16       	cp	r1, r24
    14ea:	b4 f4       	brge	.+44     	; 0x1518 <main_fw_calcTimerAdj+0xbe>
		residue = fltTime - maxLimit;
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	3f ef       	ldi	r19, 0xFF	; 255
    14f0:	4e e7       	ldi	r20, 0x7E	; 126
    14f2:	53 e4       	ldi	r21, 0x43	; 67
    14f4:	b8 01       	movw	r22, r16
    14f6:	8d 2f       	mov	r24, r29
    14f8:	9c 2f       	mov	r25, r28
    14fa:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    14fe:	8b 01       	movw	r16, r22
    1500:	d8 2f       	mov	r29, r24
    1502:	c9 2f       	mov	r28, r25
		fltTime = maxLimit;
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	af ef       	ldi	r26, 0xFF	; 255
    1508:	fe e7       	ldi	r31, 0x7E	; 126
    150a:	e3 e4       	ldi	r30, 0x43	; 67
    150c:	0c c0       	rjmp	.+24     	; 0x1526 <main_fw_calcTimerAdj+0xcc>
	fltTime += pwmAdjust;

	/* windowing the next value into the 8-Bit range */
	if (fltTime < 0.0f) {
		residue = fltTime;
		fltTime = 0.0f;
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	a0 e0       	ldi	r26, 0x00	; 0
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	e0 e0       	ldi	r30, 0x00	; 0
    1516:	07 c0       	rjmp	.+14     	; 0x1526 <main_fw_calcTimerAdj+0xcc>
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
	const float maxLimit = 255.0f - (1.0f / (1 << FAST_PWM_SUB_BITCNT));	// NOT 256.0f due to the compare unit that catches not around the overflow value

	/* add the time offset to the current PWM settings */
	fltTime += pwmAdjust;
    1518:	b0 2f       	mov	r27, r16
    151a:	a1 2f       	mov	r26, r17
    151c:	fe 01       	movw	r30, r28
}

static float main_fw_calcTimerAdj(float pwmAdjust, uint8_t* intVal, uint8_t* intSubVal)
{
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
    151e:	00 e0       	ldi	r16, 0x00	; 0
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	d0 e0       	ldi	r29, 0x00	; 0
    1524:	c0 e0       	ldi	r28, 0x00	; 0
		residue = fltTime - maxLimit;
		fltTime = maxLimit;
	}

	/* add rounding value */
	fltTime += 1.0f / 512.0f;
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	5b e3       	ldi	r21, 0x3B	; 59
    152e:	6b 2f       	mov	r22, r27
    1530:	7a 2f       	mov	r23, r26
    1532:	8f 2f       	mov	r24, r31
    1534:	9e 2f       	mov	r25, r30
    1536:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    153a:	4b 01       	movw	r8, r22
    153c:	5c 01       	movw	r10, r24

	/* break up into integer and fractional parts */
	*intVal		= (uint8_t) fltTime;
    153e:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fixunssfsi>
    1542:	f6 01       	movw	r30, r12
    1544:	60 83       	st	Z, r22
	*intSubVal	= (uint8_t) ((fltTime - floorf(fltTime)) * 256.0f);
    1546:	c5 01       	movw	r24, r10
    1548:	b4 01       	movw	r22, r8
    154a:	0e 94 54 31 	call	0x62a8	; 0x62a8 <floor>
    154e:	9b 01       	movw	r18, r22
    1550:	ac 01       	movw	r20, r24
    1552:	c5 01       	movw	r24, r10
    1554:	b4 01       	movw	r22, r8
    1556:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e8       	ldi	r20, 0x80	; 128
    1560:	53 e4       	ldi	r21, 0x43	; 67
    1562:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    1566:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fixunssfsi>
    156a:	f7 01       	movw	r30, r14
    156c:	60 83       	st	Z, r22
	return residue;
}
    156e:	b8 01       	movw	r22, r16
    1570:	8d 2f       	mov	r24, r29
    1572:	9c 2f       	mov	r25, r28
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	ff 90       	pop	r15
    157e:	ef 90       	pop	r14
    1580:	df 90       	pop	r13
    1582:	cf 90       	pop	r12
    1584:	bf 90       	pop	r11
    1586:	af 90       	pop	r10
    1588:	9f 90       	pop	r9
    158a:	8f 90       	pop	r8
    158c:	7f 90       	pop	r7
    158e:	6f 90       	pop	r6
    1590:	5f 90       	pop	r5
    1592:	4f 90       	pop	r4
    1594:	08 95       	ret

00001596 <s_flt_frac>:
{
	return val >= 0.0f ?  '+' : '-';
}

static int s_flt_frac(float val, uint8_t digits)
{
    1596:	cf 92       	push	r12
    1598:	df 92       	push	r13
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	cf 93       	push	r28
    15a0:	6b 01       	movw	r12, r22
    15a2:	7c 01       	movw	r14, r24
    15a4:	c4 2f       	mov	r28, r20
	val -= floorf(val);				// drop integer part
    15a6:	0e 94 54 31 	call	0x62a8	; 0x62a8 <floor>
    15aa:	9b 01       	movw	r18, r22
    15ac:	ac 01       	movw	r20, r24
    15ae:	c7 01       	movw	r24, r14
    15b0:	b6 01       	movw	r22, r12
    15b2:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    15b6:	6b 01       	movw	r12, r22
    15b8:	7c 01       	movw	r14, r24
	val *= pow(10, digits);			// shift digits count left of decimal format
    15ba:	6c 2f       	mov	r22, r28
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 17 31 	call	0x622e	; 0x622e <__floatunsisf>
    15c6:	9b 01       	movw	r18, r22
    15c8:	ac 01       	movw	r20, r24
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	80 e2       	ldi	r24, 0x20	; 32
    15d0:	91 e4       	ldi	r25, 0x41	; 65
    15d2:	0e 94 83 32 	call	0x6506	; 0x6506 <pow>
    15d6:	9b 01       	movw	r18, r22
    15d8:	ac 01       	movw	r20, r24
    15da:	c7 01       	movw	r24, r14
    15dc:	b6 01       	movw	r22, r12
    15de:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
	return (int) floorf(val);		// return integer part
    15e2:	0e 94 54 31 	call	0x62a8	; 0x62a8 <floor>
    15e6:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
}
    15ea:	cb 01       	movw	r24, r22
    15ec:	cf 91       	pop	r28
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	df 90       	pop	r13
    15f4:	cf 90       	pop	r12
    15f6:	08 95       	ret

000015f8 <pwmTimerCorrection.part.0>:
	if (--holdOffTime == 255) {
		holdOffTime = 0;
	}
}

static float pwmTimerCorrection(float correction, uint8_t doSingleLoad)
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	00 d0       	rcall	.+0      	; 0x1602 <pwmTimerCorrection.part.0+0xa>
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	04 2f       	mov	r16, r20

	if (correction) {
		uint8_t localFastPwmXXXVal;
		uint8_t localFastPwmSubXXXVal;

		uint8_t sreg = SREG;
    1608:	1f b7       	in	r17, 0x3f	; 63
		cli();
    160a:	f8 94       	cli
		localFastPwmXXXVal		= fastPwmLoopVal;
    160c:	20 91 34 05 	lds	r18, 0x0534	; 0x800534 <fastPwmLoopVal>
    1610:	2a 83       	std	Y+2, r18	; 0x02
		localFastPwmSubXXXVal	= fastPwmSubLoopVal;
    1612:	20 91 33 05 	lds	r18, 0x0533	; 0x800533 <fastPwmSubLoopVal>
    1616:	29 83       	std	Y+1, r18	; 0x01
		SREG = sreg;
    1618:	1f bf       	out	0x3f, r17	; 63

		ret =  main_fw_calcTimerAdj(correction, &localFastPwmXXXVal, &localFastPwmSubXXXVal);
    161a:	9e 01       	movw	r18, r28
    161c:	2f 5f       	subi	r18, 0xFF	; 255
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	ae 01       	movw	r20, r28
    1622:	4e 5f       	subi	r20, 0xFE	; 254
    1624:	5f 4f       	sbci	r21, 0xFF	; 255
    1626:	19 df       	rcall	.-462    	; 0x145a <main_fw_calcTimerAdj>

		cli();
    1628:	f8 94       	cli
    162a:	3a 81       	ldd	r19, Y+2	; 0x02
    162c:	29 81       	ldd	r18, Y+1	; 0x01
		if (!doSingleLoad) {
    162e:	01 11       	cpse	r16, r1
    1630:	05 c0       	rjmp	.+10     	; 0x163c <pwmTimerCorrection.part.0+0x44>
			fastPwmLoopVal		= localFastPwmXXXVal;			// single frequency correction
    1632:	30 93 34 05 	sts	0x0534, r19	; 0x800534 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubXXXVal;
    1636:	20 93 33 05 	sts	0x0533, r18	; 0x800533 <fastPwmSubLoopVal>
    163a:	07 c0       	rjmp	.+14     	; 0x164a <pwmTimerCorrection.part.0+0x52>

		} else {
			fastPwmSingleVal	= localFastPwmXXXVal;			// phase hammering correction
    163c:	30 93 31 05 	sts	0x0531, r19	; 0x800531 <fastPwmSingleVal>
			fastPwmSubSingleVal	= localFastPwmSubXXXVal;
    1640:	20 93 30 05 	sts	0x0530, r18	; 0x800530 <fastPwmSubSingleVal>
			fastPwmSingleLoad	= true;
    1644:	21 e0       	ldi	r18, 0x01	; 1
    1646:	20 93 32 05 	sts	0x0532, r18	; 0x800532 <fastPwmSingleLoad>
		}
		SREG = sreg;
    164a:	1f bf       	out	0x3f, r17	; 63
	}

	return ret;
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	08 95       	ret

0000165a <__vector_6>:

/* assign interrupt routines to vectors */
/* due to optimizations the ISRs are set at the function block directly */

ISR(WDT_vect, ISR_NAKED) {  // vector_6 - nothing to do, resets WDIF bit
	__asm__ __volatile__ ("reti" ::: "memory");
    165a:	18 95       	reti

0000165c <main_fw_strncmp>:
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
	}
}

int main_fw_strncmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	8c 01       	movw	r16, r24
    1666:	ea 01       	movw	r28, r20
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
    1668:	9a 01       	movw	r18, r20
    166a:	ab 01       	movw	r20, r22
    166c:	6d e8       	ldi	r22, 0x8D	; 141
    166e:	73 e0       	ldi	r23, 0x03	; 3
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
	return strncmp((const char*) msg, (const char*) mainFormatBuffer, size);
    1676:	ae 01       	movw	r20, r28
    1678:	6d e8       	ldi	r22, 0x8D	; 141
    167a:	73 e0       	ldi	r23, 0x03	; 3
    167c:	c8 01       	movw	r24, r16
}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
}

int main_fw_strncmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
	return strncmp((const char*) msg, (const char*) mainFormatBuffer, size);
    1686:	0c 94 0b 34 	jmp	0x6816	; 0x6816 <strncmp>

0000168a <main_fw_memcmp>:
}

int main_fw_memcmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	8c 01       	movw	r16, r24
    1694:	ea 01       	movw	r28, r20
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
    1696:	9a 01       	movw	r18, r20
    1698:	ab 01       	movw	r20, r22
    169a:	6d e8       	ldi	r22, 0x8D	; 141
    169c:	73 e0       	ldi	r23, 0x03	; 3
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
	return memcmp((const char*) msg, (const char*) mainFormatBuffer, size);
    16a4:	ae 01       	movw	r20, r28
    16a6:	6d e8       	ldi	r22, 0x8D	; 141
    16a8:	73 e0       	ldi	r23, 0x03	; 3
    16aa:	c8 01       	movw	r24, r16
}
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
}

int main_fw_memcmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
	return memcmp((const char*) msg, (const char*) mainFormatBuffer, size);
    16b4:	0c 94 f5 33 	jmp	0x67ea	; 0x67ea <memcmp>

000016b8 <workInQueue>:
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
	}
}

void workInQueue(void)
{
    16b8:	8f 92       	push	r8
    16ba:	9f 92       	push	r9
    16bc:	af 92       	push	r10
    16be:	bf 92       	push	r11
    16c0:	cf 92       	push	r12
    16c2:	df 92       	push	r13
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <workInQueue+0x1a>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <workInQueue+0x1c>
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
	if (ringbuffer_fw_getSemaphore(true)) {
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	0e 94 d5 21 	call	0x43aa	; 0x43aa <ringbuffer_fw_getSemaphore>
    16de:	88 23       	and	r24, r24
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <workInQueue+0x2c>
    16e2:	4d c3       	rjmp	.+1690   	; 0x1d7e <workInQueue+0x6c6>
		uint8_t isLocked = true;
		enum RINGBUFFER_MSG_STATUS_t statusSend = ringbuffer_fw_getStatusNextMsg(true);
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	0e 94 12 23 	call	0x4624	; 0x4624 <ringbuffer_fw_getStatusNextMsg>
    16ea:	18 2f       	mov	r17, r24
		enum RINGBUFFER_MSG_STATUS_t statusRcv  = ringbuffer_fw_getStatusNextMsg(false);
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	0e 94 12 23 	call	0x4624	; 0x4624 <ringbuffer_fw_getStatusNextMsg>

		if (!(main_bf.mainHelpConcatNr) && (statusSend & RINGBUFFER_MSG_STATUS_AVAIL)) {		// if any message is available and not during help printing
    16f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    16f6:	96 95       	lsr	r25
    16f8:	9f 70       	andi	r25, 0x0F	; 15
    16fa:	09 f0       	breq	.+2      	; 0x16fe <workInQueue+0x46>
    16fc:	93 c2       	rjmp	.+1318   	; 0x1c24 <workInQueue+0x56c>
    16fe:	10 ff       	sbrs	r17, 0
    1700:	91 c2       	rjmp	.+1314   	; 0x1c24 <workInQueue+0x56c>
			if (statusSend & RINGBUFFER_MSG_STATUS_IS_NMEA) {
    1702:	14 ff       	sbrs	r17, 4
    1704:	04 c0       	rjmp	.+8      	; 0x170e <workInQueue+0x56>
				serial_fw_pullAndSendNmea_havingSemaphore(true); isLocked = false;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	0e 94 08 24 	call	0x4810	; 0x4810 <serial_fw_pullAndSendNmea_havingSemaphore>
    170c:	38 c3       	rjmp	.+1648   	; 0x1d7e <workInQueue+0x6c6>

			} else if ((statusSend & RINGBUFFER_MSG_STATUS_IS_MASK) == 0) {						// message from firmware state machine
    170e:	10 7f       	andi	r17, 0xF0	; 240
    1710:	09 f0       	breq	.+2      	; 0x1714 <workInQueue+0x5c>
    1712:	32 c3       	rjmp	.+1636   	; 0x1d78 <workInQueue+0x6c0>
				uint8_t localMsgLen = ringbuffer_fw_ringBufferPull(true, mainInterpreterBuffer, (uint8_t) (sizeof(mainInterpreterBuffer) - 1));
    1714:	4f e7       	ldi	r20, 0x7F	; 127
    1716:	6d e8       	ldi	r22, 0x8D	; 141
    1718:	74 e0       	ldi	r23, 0x04	; 4
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	0e 94 8a 22 	call	0x4514	; 0x4514 <ringbuffer_fw_ringBufferPull>
				ringbuffer_fw_freeSemaphore(true); isLocked = false;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ringbuffer_fw_freeSemaphore>
			&main_nmeaSatsEphemerisGlonass);
}

static void doInterpret(uchar msg[], uint8_t len)
{
	if (!main_fw_strncmp(msg, PM_GPIB_SCM_IDN, sizeof(PM_GPIB_SCM_IDN))) {
    1726:	46 e0       	ldi	r20, 0x06	; 6
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	62 eb       	ldi	r22, 0xB2	; 178
    172c:	7b e0       	ldi	r23, 0x0B	; 11
    172e:	8d e8       	ldi	r24, 0x8D	; 141
    1730:	94 e0       	ldi	r25, 0x04	; 4
    1732:	94 df       	rcall	.-216    	; 0x165c <main_fw_strncmp>
    1734:	89 2b       	or	r24, r25
    1736:	41 f5       	brne	.+80     	; 0x1788 <workInQueue+0xd0>
		/* GPIB commands - SCPI/SCM - *IDN? */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GPIB_SCM_IDN, sizeof(PM_FORMAT_GPIB_SCM_IDN));
    1738:	2c e1       	ldi	r18, 0x1C	; 28
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	4b ed       	ldi	r20, 0xDB	; 219
    173e:	51 e0       	ldi	r21, 0x01	; 1
    1740:	6d e8       	ldi	r22, 0x8D	; 141
    1742:	73 e0       	ldi	r23, 0x03	; 3
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    174a:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <mainCoef_b00_dev_version>
    174e:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <mainCoef_b00_dev_version+0x1>
    1752:	9c 01       	movw	r18, r24
    1754:	33 27       	eor	r19, r19
    1756:	3f 93       	push	r19
    1758:	2f 93       	push	r18
    175a:	1f 92       	push	r1
    175c:	9f 93       	push	r25
    175e:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <mainCoef_b00_dev_serial+0x1>
    1762:	8f 93       	push	r24
    1764:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <mainCoef_b00_dev_serial>
    1768:	8f 93       	push	r24
    176a:	86 ec       	ldi	r24, 0xC6	; 198
    176c:	95 e0       	ldi	r25, 0x05	; 5
    176e:	9f 93       	push	r25
    1770:	8f 93       	push	r24
    1772:	8d e8       	ldi	r24, 0x8D	; 141
    1774:	93 e0       	ldi	r25, 0x03	; 3
    1776:	9f 93       	push	r25
    1778:	8f 93       	push	r24
    177a:	8d e0       	ldi	r24, 0x0D	; 13
    177c:	94 e0       	ldi	r25, 0x04	; 4
    177e:	9f 93       	push	r25
    1780:	8f 93       	push	r24
    1782:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
    1786:	29 c1       	rjmp	.+594    	; 0x19da <workInQueue+0x322>
				mainCoef_b00_dev_serial,
				mainCoef_b00_dev_version >> 8,
				mainCoef_b00_dev_version & 0xff);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

	} else if (!main_fw_strncmp(msg, PM_COMMAND_AFCOFF, sizeof(PM_COMMAND_AFCOFF))) {
    1788:	47 e0       	ldi	r20, 0x07	; 7
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	65 e1       	ldi	r22, 0x15	; 21
    178e:	7c e0       	ldi	r23, 0x0C	; 12
    1790:	8d e8       	ldi	r24, 0x8D	; 141
    1792:	94 e0       	ldi	r25, 0x04	; 4
    1794:	63 df       	rcall	.-314    	; 0x165c <main_fw_strncmp>
    1796:	89 2b       	or	r24, r25
    1798:	21 f4       	brne	.+8      	; 0x17a2 <workInQueue+0xea>
		/* automatic frequency control OFF */
		main_bf.mainIsAFC = false;
    179a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    179e:	8e 7f       	andi	r24, 0xFE	; 254
    17a0:	0c c0       	rjmp	.+24     	; 0x17ba <workInQueue+0x102>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_AFCON, sizeof(PM_COMMAND_AFCON))) {
    17a2:	46 e0       	ldi	r20, 0x06	; 6
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	6f e0       	ldi	r22, 0x0F	; 15
    17a8:	7c e0       	ldi	r23, 0x0C	; 12
    17aa:	8d e8       	ldi	r24, 0x8D	; 141
    17ac:	94 e0       	ldi	r25, 0x04	; 4
    17ae:	56 df       	rcall	.-340    	; 0x165c <main_fw_strncmp>
    17b0:	89 2b       	or	r24, r25
    17b2:	31 f4       	brne	.+12     	; 0x17c0 <workInQueue+0x108>
		/* automatic frequency control ON */
		main_bf.mainIsAFC = true;
    17b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    17b8:	81 60       	ori	r24, 0x01	; 1
    17ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    17be:	df c2       	rjmp	.+1470   	; 0x1d7e <workInQueue+0x6c6>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_APCOFF, sizeof(PM_COMMAND_APCOFF))) {
    17c0:	47 e0       	ldi	r20, 0x07	; 7
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	68 e0       	ldi	r22, 0x08	; 8
    17c6:	7c e0       	ldi	r23, 0x0C	; 12
    17c8:	8d e8       	ldi	r24, 0x8D	; 141
    17ca:	94 e0       	ldi	r25, 0x04	; 4
    17cc:	47 df       	rcall	.-370    	; 0x165c <main_fw_strncmp>
    17ce:	89 2b       	or	r24, r25
    17d0:	21 f4       	brne	.+8      	; 0x17da <workInQueue+0x122>
		/* automatic phase control OFF */
		main_bf.mainIsAPC = false;
    17d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    17d6:	8d 7f       	andi	r24, 0xFD	; 253
    17d8:	f0 cf       	rjmp	.-32     	; 0x17ba <workInQueue+0x102>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_APCON, sizeof(PM_COMMAND_APCON))) {
    17da:	46 e0       	ldi	r20, 0x06	; 6
    17dc:	50 e0       	ldi	r21, 0x00	; 0
    17de:	62 e0       	ldi	r22, 0x02	; 2
    17e0:	7c e0       	ldi	r23, 0x0C	; 12
    17e2:	8d e8       	ldi	r24, 0x8D	; 141
    17e4:	94 e0       	ldi	r25, 0x04	; 4
    17e6:	3a df       	rcall	.-396    	; 0x165c <main_fw_strncmp>
    17e8:	89 2b       	or	r24, r25
    17ea:	21 f4       	brne	.+8      	; 0x17f4 <workInQueue+0x13c>
		/* automatic phase control ON */
		main_bf.mainIsAPC = true;
    17ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    17f0:	82 60       	ori	r24, 0x02	; 2
    17f2:	e3 cf       	rjmp	.-58     	; 0x17ba <workInQueue+0x102>

		main_bf.mainIsSerComm = false;
		main_bf.mainStopAvr = true;
#endif

	} else if (!main_fw_strncmp(msg, PM_COMMAND_HELP, sizeof(PM_COMMAND_HELP))) {
    17f4:	45 e0       	ldi	r20, 0x05	; 5
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	6d ef       	ldi	r22, 0xFD	; 253
    17fa:	7b e0       	ldi	r23, 0x0B	; 11
    17fc:	8d e8       	ldi	r24, 0x8D	; 141
    17fe:	94 e0       	ldi	r25, 0x04	; 4
    1800:	2d df       	rcall	.-422    	; 0x165c <main_fw_strncmp>
    1802:	89 2b       	or	r24, r25
    1804:	e1 f5       	brne	.+120    	; 0x187e <workInQueue+0x1c6>
		/* help information */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_VERSION, sizeof(PM_FORMAT_VERSION));
    1806:	22 e4       	ldi	r18, 0x42	; 66
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	4b e2       	ldi	r20, 0x2B	; 43
    180c:	58 e0       	ldi	r21, 0x08	; 8
    180e:	6d e8       	ldi	r22, 0x8D	; 141
    1810:	73 e0       	ldi	r23, 0x03	; 3
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		int len = snprintf((char*) mainPrepareBuffer, sizeof(mainPrepareBuffer) - 1, (char*) mainFormatBuffer, VERSION_HIGH, VERSION_LOW);
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	8f 93       	push	r24
    181c:	80 ea       	ldi	r24, 0xA0	; 160
    181e:	8f 93       	push	r24
    1820:	1f 92       	push	r1
    1822:	8a ea       	ldi	r24, 0xAA	; 170
    1824:	8f 93       	push	r24
    1826:	8d e8       	ldi	r24, 0x8D	; 141
    1828:	93 e0       	ldi	r25, 0x03	; 3
    182a:	9f 93       	push	r25
    182c:	8f 93       	push	r24
    182e:	1f 92       	push	r1
    1830:	8f e7       	ldi	r24, 0x7F	; 127
    1832:	8f 93       	push	r24
    1834:	8d e0       	ldi	r24, 0x0D	; 13
    1836:	94 e0       	ldi	r25, 0x04	; 4
    1838:	9f 93       	push	r25
    183a:	8f 93       	push	r24
    183c:	0e 94 57 34 	call	0x68ae	; 0x68ae <snprintf>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    1840:	28 2f       	mov	r18, r24
    1842:	4d e0       	ldi	r20, 0x0D	; 13
    1844:	54 e0       	ldi	r21, 0x04	; 4
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
		ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP01, sizeof(PM_INTERPRETER_HELP01));
    184e:	22 e4       	ldi	r18, 0x42	; 66
    1850:	40 e7       	ldi	r20, 0x70	; 112
    1852:	5b e0       	ldi	r21, 0x0B	; 11
    1854:	61 e0       	ldi	r22, 0x01	; 1
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
		main_bf.mainHelpConcatNr = 1;
    185c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1860:	81 7e       	andi	r24, 0xE1	; 225
    1862:	82 60       	ori	r24, 0x02	; 2
    1864:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
		main_bf.mainIsUsbCommTest = false;
    1868:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    186c:	8f 7e       	andi	r24, 0xEF	; 239
    186e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	80 c2       	rjmp	.+1280   	; 0x1d7e <workInQueue+0x6c6>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_INFO, sizeof(PM_COMMAND_INFO))) {
    187e:	45 e0       	ldi	r20, 0x05	; 5
    1880:	50 e0       	ldi	r21, 0x00	; 0
    1882:	68 ef       	ldi	r22, 0xF8	; 248
    1884:	7b e0       	ldi	r23, 0x0B	; 11
    1886:	8d e8       	ldi	r24, 0x8D	; 141
    1888:	94 e0       	ldi	r25, 0x04	; 4
    188a:	e8 de       	rcall	.-560    	; 0x165c <main_fw_strncmp>
    188c:	89 2b       	or	r24, r25
    188e:	a9 f4       	brne	.+42     	; 0x18ba <workInQueue+0x202>
		/* timer 2 overflow counter TEST */
		main_bf.mainIsTimerTest = !(main_bf.mainIsTimerTest);
    1890:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1894:	82 fb       	bst	r24, 2
    1896:	99 27       	eor	r25, r25
    1898:	90 f9       	bld	r25, 0
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	89 27       	eor	r24, r25
    189e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    18a2:	80 fb       	bst	r24, 0
    18a4:	92 f9       	bld	r25, 2
    18a6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		if (main_bf.mainIsTimerTest) {
    18aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    18ae:	82 ff       	sbrs	r24, 2
    18b0:	66 c2       	rjmp	.+1228   	; 0x1d7e <workInQueue+0x6c6>
			main_bf.mainIsSerComm = false;
    18b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    18b6:	87 7f       	andi	r24, 0xF7	; 247
    18b8:	48 c0       	rjmp	.+144    	; 0x194a <workInQueue+0x292>
			main_bf.mainIsUsbCommTest = false;
		}

	} else if (!main_fw_strncmp(msg, PM_COMMAND_LEDOFF, sizeof(PM_COMMAND_LEDOFF))) {
    18ba:	47 e0       	ldi	r20, 0x07	; 7
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	61 ef       	ldi	r22, 0xF1	; 241
    18c0:	7b e0       	ldi	r23, 0x0B	; 11
    18c2:	8d e8       	ldi	r24, 0x8D	; 141
    18c4:	94 e0       	ldi	r25, 0x04	; 4
    18c6:	ca de       	rcall	.-620    	; 0x165c <main_fw_strncmp>
    18c8:	89 2b       	or	r24, r25
    18ca:	29 f4       	brne	.+10     	; 0x18d6 <workInQueue+0x21e>
		/* backlight of the LCD module OFF */
		const uint8_t lcdLedMode = LCD_LED_MODE_OFF;
    18cc:	19 82       	std	Y+1, r1	; 0x01
		main_bf.mainLcdLedMode = lcdLedMode;
    18ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    18d2:	8f 71       	andi	r24, 0x1F	; 31
    18d4:	0f c0       	rjmp	.+30     	; 0x18f4 <workInQueue+0x23c>

		memory_fw_writeEEpromPage((uint8_t*) &lcdLedMode, sizeof(uint8_t), offsetof(eeprom_layout_t, b00.b00_lcdLedMode));
		recalcEepromCrc(BLOCK_HEADER_NR, offsetof(eeprom_layout_t, b00.b00_crc));

	} else if (!main_fw_strncmp(msg, PM_COMMAND_LEDON, sizeof(PM_COMMAND_LEDON))) {
    18d6:	46 e0       	ldi	r20, 0x06	; 6
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	6b ee       	ldi	r22, 0xEB	; 235
    18dc:	7b e0       	ldi	r23, 0x0B	; 11
    18de:	8d e8       	ldi	r24, 0x8D	; 141
    18e0:	94 e0       	ldi	r25, 0x04	; 4
    18e2:	bc de       	rcall	.-648    	; 0x165c <main_fw_strncmp>
    18e4:	89 2b       	or	r24, r25
    18e6:	99 f4       	brne	.+38     	; 0x190e <workInQueue+0x256>
		/* backlight of the LCD module ON */
		const uint8_t lcdLedMode = LCD_LED_MODE_ON;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	89 83       	std	Y+1, r24	; 0x01
		main_bf.mainLcdLedMode = lcdLedMode;
    18ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    18f0:	8f 71       	andi	r24, 0x1F	; 31
    18f2:	80 62       	ori	r24, 0x20	; 32
    18f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>

		memory_fw_writeEEpromPage((uint8_t*) &lcdLedMode, sizeof(uint8_t), offsetof(eeprom_layout_t, b00.b00_lcdLedMode));
    18f8:	44 e1       	ldi	r20, 0x14	; 20
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	ce 01       	movw	r24, r28
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	0e 94 3a 21 	call	0x4274	; 0x4274 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_HEADER_NR, offsetof(eeprom_layout_t, b00.b00_crc));
    1906:	6e e1       	ldi	r22, 0x1E	; 30
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	33 c1       	rjmp	.+614    	; 0x1b74 <workInQueue+0x4bc>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_SEROFF, sizeof(PM_COMMAND_SEROFF))) {
    190e:	47 e0       	ldi	r20, 0x07	; 7
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	6c ed       	ldi	r22, 0xDC	; 220
    1914:	7b e0       	ldi	r23, 0x0B	; 11
    1916:	8d e8       	ldi	r24, 0x8D	; 141
    1918:	94 e0       	ldi	r25, 0x04	; 4
    191a:	a0 de       	rcall	.-704    	; 0x165c <main_fw_strncmp>
    191c:	89 2b       	or	r24, r25
    191e:	21 f4       	brne	.+8      	; 0x1928 <workInQueue+0x270>
		/* serial communication OFF */
		main_bf.mainIsSerComm = false;
    1920:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1924:	87 7f       	andi	r24, 0xF7	; 247
    1926:	49 cf       	rjmp	.-366    	; 0x17ba <workInQueue+0x102>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_SERON, sizeof(PM_COMMAND_SERON))) {
    1928:	46 e0       	ldi	r20, 0x06	; 6
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	66 ed       	ldi	r22, 0xD6	; 214
    192e:	7b e0       	ldi	r23, 0x0B	; 11
    1930:	8d e8       	ldi	r24, 0x8D	; 141
    1932:	94 e0       	ldi	r25, 0x04	; 4
    1934:	93 de       	rcall	.-730    	; 0x165c <main_fw_strncmp>
    1936:	89 2b       	or	r24, r25
    1938:	71 f4       	brne	.+28     	; 0x1956 <workInQueue+0x29e>
		/* serial communication ON */
		main_bf.mainIsSerComm = true;
    193a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    193e:	88 60       	ori	r24, 0x08	; 8
    1940:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		main_bf.mainIsTimerTest = false;
    1944:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1948:	8b 7f       	andi	r24, 0xFB	; 251
    194a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		main_bf.mainIsUsbCommTest = false;
    194e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1952:	8f 7e       	andi	r24, 0xEF	; 239
    1954:	32 cf       	rjmp	.-412    	; 0x17ba <workInQueue+0x102>

	} else if (!main_fw_memcmp(msg, PM_COMMAND_SERBAUD, sizeof(PM_COMMAND_SERBAUD) - 1)) {
    1956:	47 e0       	ldi	r20, 0x07	; 7
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	63 ee       	ldi	r22, 0xE3	; 227
    195c:	7b e0       	ldi	r23, 0x0B	; 11
    195e:	8d e8       	ldi	r24, 0x8D	; 141
    1960:	94 e0       	ldi	r25, 0x04	; 4
    1962:	93 de       	rcall	.-730    	; 0x168a <main_fw_memcmp>
    1964:	89 2b       	or	r24, r25
    1966:	09 f0       	breq	.+2      	; 0x196a <workInQueue+0x2b2>
    1968:	40 c0       	rjmp	.+128    	; 0x19ea <workInQueue+0x332>
		/* serial communication baud parameter */
		sscanf((char*) msg + sizeof(PM_COMMAND_SERBAUD) - 1, "%d", &serialCoef_b03_serial_baud);
    196a:	80 e2       	ldi	r24, 0x20	; 32
    196c:	95 e0       	ldi	r25, 0x05	; 5
    196e:	9f 93       	push	r25
    1970:	8f 93       	push	r24
    1972:	81 e1       	ldi	r24, 0x11	; 17
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	9f 93       	push	r25
    1978:	8f 93       	push	r24
    197a:	84 e9       	ldi	r24, 0x94	; 148
    197c:	94 e0       	ldi	r25, 0x04	; 4
    197e:	9f 93       	push	r25
    1980:	8f 93       	push	r24
    1982:	0e 94 a4 34 	call	0x6948	; 0x6948 <sscanf>
		serial_fw_setCommBaud(serialCoef_b03_serial_baud);
    1986:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <serialCoef_b03_serial_baud>
    198a:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <serialCoef_b03_serial_baud+0x1>
    198e:	0e 94 8c 23 	call	0x4718	; 0x4718 <serial_fw_setCommBaud>

		/* write current baud rate as the default/startup value to the EEPROM */
		memory_fw_writeEEpromPage((uint8_t*) &serialCoef_b03_serial_baud, sizeof(uint16_t), offsetof(eeprom_layout_t, b03.b03_serial_baud));
    1992:	40 e6       	ldi	r20, 0x60	; 96
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	62 e0       	ldi	r22, 0x02	; 2
    1998:	80 e2       	ldi	r24, 0x20	; 32
    199a:	95 e0       	ldi	r25, 0x05	; 5
    199c:	0e 94 3a 21 	call	0x4274	; 0x4274 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_GPS_NR, offsetof(eeprom_layout_t, b03.b03_crc));
    19a0:	6e e7       	ldi	r22, 0x7E	; 126
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	3a dd       	rcall	.-1420   	; 0x141c <recalcEepromCrc>

		/* user information */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SET_BAUD, sizeof(PM_FORMAT_SET_BAUD));
    19a8:	2a e2       	ldi	r18, 0x2A	; 42
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	41 eb       	ldi	r20, 0xB1	; 177
    19ae:	51 e0       	ldi	r21, 0x01	; 1
    19b0:	6d e8       	ldi	r22, 0x8D	; 141
    19b2:	73 e0       	ldi	r23, 0x03	; 3
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    19ba:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <serialCoef_b03_serial_baud+0x1>
    19be:	8f 93       	push	r24
    19c0:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <serialCoef_b03_serial_baud>
    19c4:	8f 93       	push	r24
    19c6:	8d e8       	ldi	r24, 0x8D	; 141
    19c8:	93 e0       	ldi	r25, 0x03	; 3
    19ca:	9f 93       	push	r25
    19cc:	8f 93       	push	r24
    19ce:	8d e0       	ldi	r24, 0x0D	; 13
    19d0:	94 e0       	ldi	r25, 0x04	; 4
    19d2:	9f 93       	push	r25
    19d4:	8f 93       	push	r24
    19d6:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				serialCoef_b03_serial_baud);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    19da:	28 2f       	mov	r18, r24
    19dc:	4d e0       	ldi	r20, 0x0D	; 13
    19de:	54 e0       	ldi	r21, 0x04	; 4
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
    19e8:	44 cf       	rjmp	.-376    	; 0x1872 <workInQueue+0x1ba>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_STACK, sizeof(PM_COMMAND_STACK))) {
    19ea:	46 e0       	ldi	r20, 0x06	; 6
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	60 ed       	ldi	r22, 0xD0	; 208
    19f0:	7b e0       	ldi	r23, 0x0B	; 11
    19f2:	8d e8       	ldi	r24, 0x8D	; 141
    19f4:	94 e0       	ldi	r25, 0x04	; 4
    19f6:	32 de       	rcall	.-924    	; 0x165c <main_fw_strncmp>
    19f8:	89 2b       	or	r24, r25
    19fa:	71 f4       	brne	.+28     	; 0x1a18 <workInQueue+0x360>
		/* Stack Check facility */
		main_bf.mainStackCheck = !(main_bf.mainStackCheck);
    19fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a00:	86 fb       	bst	r24, 6
    1a02:	99 27       	eor	r25, r25
    1a04:	90 f9       	bld	r25, 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	89 27       	eor	r24, r25
    1a0a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    1a0e:	80 fb       	bst	r24, 0
    1a10:	96 f9       	bld	r25, 6
    1a12:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
    1a16:	b3 c1       	rjmp	.+870    	; 0x1d7e <workInQueue+0x6c6>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_TEST, sizeof(PM_COMMAND_TEST))) {
    1a18:	45 e0       	ldi	r20, 0x05	; 5
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	6b ec       	ldi	r22, 0xCB	; 203
    1a1e:	7b e0       	ldi	r23, 0x0B	; 11
    1a20:	8d e8       	ldi	r24, 0x8D	; 141
    1a22:	94 e0       	ldi	r25, 0x04	; 4
    1a24:	1b de       	rcall	.-970    	; 0x165c <main_fw_strncmp>
    1a26:	89 2b       	or	r24, r25
    1a28:	d1 f4       	brne	.+52     	; 0x1a5e <workInQueue+0x3a6>
		/* special communication TEST */
		main_bf.mainIsUsbCommTest = !(main_bf.mainIsUsbCommTest);
    1a2a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a2e:	84 fb       	bst	r24, 4
    1a30:	99 27       	eor	r25, r25
    1a32:	90 f9       	bld	r25, 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	89 27       	eor	r24, r25
    1a38:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    1a3c:	80 fb       	bst	r24, 0
    1a3e:	94 f9       	bld	r25, 4
    1a40:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		if (main_bf.mainIsUsbCommTest) {
    1a44:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a48:	84 ff       	sbrs	r24, 4
    1a4a:	99 c1       	rjmp	.+818    	; 0x1d7e <workInQueue+0x6c6>
			main_bf.mainIsSerComm = false;
    1a4c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a50:	87 7f       	andi	r24, 0xF7	; 247
    1a52:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			main_bf.mainIsTimerTest = false;
    1a56:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a5a:	8b 7f       	andi	r24, 0xFB	; 251
    1a5c:	ae ce       	rjmp	.-676    	; 0x17ba <workInQueue+0x102>
		}

	} else if (!main_fw_strncmp(msg, PM_COMMAND_WRITEPWM, sizeof(PM_COMMAND_WRITEPWM))) {
    1a5e:	49 e0       	ldi	r20, 0x09	; 9
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	62 ec       	ldi	r22, 0xC2	; 194
    1a64:	7b e0       	ldi	r23, 0x0B	; 11
    1a66:	8d e8       	ldi	r24, 0x8D	; 141
    1a68:	94 e0       	ldi	r25, 0x04	; 4
    1a6a:	f8 dd       	rcall	.-1040   	; 0x165c <main_fw_strncmp>
    1a6c:	89 2b       	or	r24, r25
    1a6e:	e9 f4       	brne	.+58     	; 0x1aaa <workInQueue+0x3f2>
		/* write current PWM value as the default/startup value to the EEPROM */
		uint8_t sreg = SREG;
    1a70:	8f b7       	in	r24, 0x3f	; 63
		cli();
    1a72:	f8 94       	cli
		pullCoef_b02_pwm_initial		= fastPwmLoopVal;
    1a74:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <fastPwmLoopVal>
    1a78:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <pullCoef_b02_pwm_initial>
		pullCoef_b02_pwm_initial_sub	= fastPwmSubLoopVal;
    1a7c:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <fastPwmSubLoopVal>
    1a80:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <pullCoef_b02_pwm_initial_sub>
		SREG = sreg;
    1a84:	8f bf       	out	0x3f, r24	; 63

		memory_fw_writeEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial));
    1a86:	4a e5       	ldi	r20, 0x5A	; 90
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	80 e4       	ldi	r24, 0x40	; 64
    1a8e:	95 e0       	ldi	r25, 0x05	; 5
    1a90:	0e 94 3a 21 	call	0x4274	; 0x4274 <memory_fw_writeEEpromPage>
		memory_fw_writeEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial_sub, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial_sub));
    1a94:	4b e5       	ldi	r20, 0x5B	; 91
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	8f e3       	ldi	r24, 0x3F	; 63
    1a9c:	95 e0       	ldi	r25, 0x05	; 5
    1a9e:	0e 94 3a 21 	call	0x4274	; 0x4274 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_REFOSC_NR, offsetof(eeprom_layout_t, b02.b02_crc));
    1aa2:	6e e5       	ldi	r22, 0x5E	; 94
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	65 c0       	rjmp	.+202    	; 0x1b74 <workInQueue+0x4bc>

	} else if (!main_fw_memcmp(msg, PM_COMMAND_WRITETEMP, sizeof(PM_COMMAND_WRITETEMP) - 1)) {
    1aaa:	49 e0       	ldi	r20, 0x09	; 9
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	68 eb       	ldi	r22, 0xB8	; 184
    1ab0:	7b e0       	ldi	r23, 0x0B	; 11
    1ab2:	8d e8       	ldi	r24, 0x8D	; 141
    1ab4:	94 e0       	ldi	r25, 0x04	; 4
    1ab6:	e9 dd       	rcall	.-1070   	; 0x168a <main_fw_memcmp>
    1ab8:	89 2b       	or	r24, r25
    1aba:	09 f0       	breq	.+2      	; 0x1abe <workInQueue+0x406>
    1abc:	5d c0       	rjmp	.+186    	; 0x1b78 <workInQueue+0x4c0>
		float localTemp = 0.0f;
    1abe:	19 82       	std	Y+1, r1	; 0x01
    1ac0:	1a 82       	std	Y+2, r1	; 0x02
    1ac2:	1b 82       	std	Y+3, r1	; 0x03
    1ac4:	1c 82       	std	Y+4, r1	; 0x04
		/* take current temperature value to correct the displayed values */
		sscanf(((char*) msg) + sizeof(PM_COMMAND_WRITETEMP) - 1, "%f", &localTemp);
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	01 96       	adiw	r24, 0x01	; 1
    1aca:	9f 93       	push	r25
    1acc:	8f 93       	push	r24
    1ace:	84 e1       	ldi	r24, 0x14	; 20
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	9f 93       	push	r25
    1ad4:	8f 93       	push	r24
    1ad6:	86 e9       	ldi	r24, 0x96	; 150
    1ad8:	94 e0       	ldi	r25, 0x04	; 4
    1ada:	9f 93       	push	r25
    1adc:	8f 93       	push	r24
    1ade:	0e 94 a4 34 	call	0x6948	; 0x6948 <sscanf>
		if (localTemp) {
    1ae2:	c9 80       	ldd	r12, Y+1	; 0x01
    1ae4:	da 80       	ldd	r13, Y+2	; 0x02
    1ae6:	eb 80       	ldd	r14, Y+3	; 0x03
    1ae8:	fc 80       	ldd	r15, Y+4	; 0x04
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	a9 01       	movw	r20, r18
    1afc:	c7 01       	movw	r24, r14
    1afe:	b6 01       	movw	r22, r12
    1b00:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    1b04:	88 23       	and	r24, r24
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <workInQueue+0x452>
    1b08:	3a c1       	rjmp	.+628    	; 0x1d7e <workInQueue+0x6c6>
			/* calculate the new correction value */
			mainCoef_b01_temp_ofs_adc_25C_steps = (acAdcCh[ADC_CH_TEMP] - ((localTemp - 25.0f) / mainCoef_b01_temp_k_p1step_adc_K));
    1b0a:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <acAdcCh+0x4>
    1b0e:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <acAdcCh+0x5>
    1b12:	bc 01       	movw	r22, r24
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 17 31 	call	0x622e	; 0x622e <__floatunsisf>
    1b1c:	4b 01       	movw	r8, r22
    1b1e:	5c 01       	movw	r10, r24
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	48 ec       	ldi	r20, 0xC8	; 200
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	c7 01       	movw	r24, r14
    1b2a:	b6 01       	movw	r22, r12
    1b2c:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    1b30:	20 91 b2 05 	lds	r18, 0x05B2	; 0x8005b2 <mainCoef_b01_temp_k_p1step_adc_K>
    1b34:	30 91 b3 05 	lds	r19, 0x05B3	; 0x8005b3 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    1b38:	40 91 b4 05 	lds	r20, 0x05B4	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    1b3c:	50 91 b5 05 	lds	r21, 0x05B5	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
    1b40:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    1b44:	9b 01       	movw	r18, r22
    1b46:	ac 01       	movw	r20, r24
    1b48:	c5 01       	movw	r24, r10
    1b4a:	b4 01       	movw	r22, r8
    1b4c:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    1b50:	60 93 b6 05 	sts	0x05B6, r22	; 0x8005b6 <mainCoef_b01_temp_ofs_adc_25C_steps>
    1b54:	70 93 b7 05 	sts	0x05B7, r23	; 0x8005b7 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    1b58:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    1b5c:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>

			/* write the correction value to the EEPROM */
			memory_fw_writeEEpromPage((uint8_t*) &mainCoef_b01_temp_ofs_adc_25C_steps, sizeof(float), offsetof(eeprom_layout_t, b01.b01_temp_ofs_adc_25C_steps));
    1b60:	48 e2       	ldi	r20, 0x28	; 40
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	64 e0       	ldi	r22, 0x04	; 4
    1b66:	86 eb       	ldi	r24, 0xB6	; 182
    1b68:	95 e0       	ldi	r25, 0x05	; 5
    1b6a:	0e 94 3a 21 	call	0x4274	; 0x4274 <memory_fw_writeEEpromPage>
			recalcEepromCrc(BLOCK_MEASURING_NR, offsetof(eeprom_layout_t, b01.b01_crc));
    1b6e:	6e e3       	ldi	r22, 0x3E	; 62
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	53 dc       	rcall	.-1882   	; 0x141c <recalcEepromCrc>
    1b76:	03 c1       	rjmp	.+518    	; 0x1d7e <workInQueue+0x6c6>
		}
	} else if (msg[0] == PM_COMMAND_PLUSSIGN[0]) {
    1b78:	0d e8       	ldi	r16, 0x8D	; 141
    1b7a:	14 e0       	ldi	r17, 0x04	; 4
    1b7c:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <mainInterpreterBuffer>
    1b80:	8b 32       	cpi	r24, 0x2B	; 43
    1b82:	79 f4       	brne	.+30     	; 0x1ba2 <workInQueue+0x4ea>
		/* correct the PWM value up */
		sscanf(((char*) msg) + 1, "%f", &mainPwmTerminalAdj);
    1b84:	89 e9       	ldi	r24, 0x99	; 153
    1b86:	95 e0       	ldi	r25, 0x05	; 5
    1b88:	9f 93       	push	r25
    1b8a:	8f 93       	push	r24
    1b8c:	84 e1       	ldi	r24, 0x14	; 20
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	9f 93       	push	r25
    1b92:	8f 93       	push	r24
    1b94:	8e e8       	ldi	r24, 0x8E	; 142
    1b96:	94 e0       	ldi	r25, 0x04	; 4
    1b98:	9f 93       	push	r25
    1b9a:	8f 93       	push	r24
    1b9c:	0e 94 a4 34 	call	0x6948	; 0x6948 <sscanf>
    1ba0:	21 c0       	rjmp	.+66     	; 0x1be4 <workInQueue+0x52c>

	} else if (msg[0] == PM_COMMAND_MINUSSIGN[0]) {
    1ba2:	8d 32       	cpi	r24, 0x2D	; 45
    1ba4:	31 f5       	brne	.+76     	; 0x1bf2 <workInQueue+0x53a>
		/* correct the PWM value down */
		sscanf(((char*) msg) + 1, "%f", &mainPwmTerminalAdj);
    1ba6:	89 e9       	ldi	r24, 0x99	; 153
    1ba8:	95 e0       	ldi	r25, 0x05	; 5
    1baa:	9f 93       	push	r25
    1bac:	8f 93       	push	r24
    1bae:	84 e1       	ldi	r24, 0x14	; 20
    1bb0:	91 e0       	ldi	r25, 0x01	; 1
    1bb2:	9f 93       	push	r25
    1bb4:	8f 93       	push	r24
    1bb6:	8e e8       	ldi	r24, 0x8E	; 142
    1bb8:	94 e0       	ldi	r25, 0x04	; 4
    1bba:	9f 93       	push	r25
    1bbc:	8f 93       	push	r24
    1bbe:	0e 94 a4 34 	call	0x6948	; 0x6948 <sscanf>
		mainPwmTerminalAdj = -mainPwmTerminalAdj;
    1bc2:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <mainPwmTerminalAdj>
    1bc6:	90 91 9a 05 	lds	r25, 0x059A	; 0x80059a <mainPwmTerminalAdj+0x1>
    1bca:	a0 91 9b 05 	lds	r26, 0x059B	; 0x80059b <mainPwmTerminalAdj+0x2>
    1bce:	b0 91 9c 05 	lds	r27, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x3>
    1bd2:	b0 58       	subi	r27, 0x80	; 128
    1bd4:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <mainPwmTerminalAdj>
    1bd8:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <mainPwmTerminalAdj+0x1>
    1bdc:	a0 93 9b 05 	sts	0x059B, r26	; 0x80059b <mainPwmTerminalAdj+0x2>
    1be0:	b0 93 9c 05 	sts	0x059C, r27	; 0x80059c <mainPwmTerminalAdj+0x3>
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	c6 c0       	rjmp	.+396    	; 0x1d7e <workInQueue+0x6c6>

	} else {
		/* unknown command */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_INTERPRETER_UNKNOWN, sizeof(PM_INTERPRETER_UNKNOWN));
    1bf2:	21 e3       	ldi	r18, 0x31	; 49
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4d e6       	ldi	r20, 0x6D	; 109
    1bf8:	58 e0       	ldi	r21, 0x08	; 8
    1bfa:	6d e8       	ldi	r22, 0x8D	; 141
    1bfc:	73 e0       	ldi	r23, 0x03	; 3
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		int len = snprintf((char*) mainPrepareBuffer, sizeof(mainPrepareBuffer) - 1, (char*) mainFormatBuffer, msg);
    1c04:	1f 93       	push	r17
    1c06:	0f 93       	push	r16
    1c08:	8d e8       	ldi	r24, 0x8D	; 141
    1c0a:	93 e0       	ldi	r25, 0x03	; 3
    1c0c:	9f 93       	push	r25
    1c0e:	8f 93       	push	r24
    1c10:	1f 92       	push	r1
    1c12:	8f e7       	ldi	r24, 0x7F	; 127
    1c14:	8f 93       	push	r24
    1c16:	8d e0       	ldi	r24, 0x0D	; 13
    1c18:	94 e0       	ldi	r25, 0x04	; 4
    1c1a:	9f 93       	push	r25
    1c1c:	8f 93       	push	r24
    1c1e:	0e 94 57 34 	call	0x68ae	; 0x68ae <snprintf>
    1c22:	db ce       	rjmp	.-586    	; 0x19da <workInQueue+0x322>
#endif

				doInterpret(mainInterpreterBuffer, localMsgLen);								// message is clean to process
			}

		} else if (main_bf.mainHelpConcatNr && !(statusRcv & RINGBUFFER_MSG_STATUS_AVAIL)) {	// during help printing, go ahead when receive buffer is empty again
    1c24:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1c28:	96 95       	lsr	r25
    1c2a:	9f 70       	andi	r25, 0x0F	; 15
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <workInQueue+0x578>
    1c2e:	a4 c0       	rjmp	.+328    	; 0x1d78 <workInQueue+0x6c0>
    1c30:	80 fd       	sbrc	r24, 0
    1c32:	a2 c0       	rjmp	.+324    	; 0x1d78 <workInQueue+0x6c0>
			ringbuffer_fw_freeSemaphore(true); isLocked = false;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ringbuffer_fw_freeSemaphore>

			switch (main_bf.mainHelpConcatNr) {
    1c3a:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    1c3e:	e6 95       	lsr	r30
    1c40:	ef 70       	andi	r30, 0x0F	; 15
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	31 97       	sbiw	r30, 0x01	; 1
    1c46:	ed 30       	cpi	r30, 0x0D	; 13
    1c48:	f1 05       	cpc	r31, r1
    1c4a:	08 f0       	brcs	.+2      	; 0x1c4e <workInQueue+0x596>
    1c4c:	8f c0       	rjmp	.+286    	; 0x1d6c <workInQueue+0x6b4>
    1c4e:	ec 5c       	subi	r30, 0xCC	; 204
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	0c 94 bf 2f 	jmp	0x5f7e	; 0x5f7e <__tablejump2__>
			case 1:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP02, sizeof(PM_INTERPRETER_HELP02));
    1c56:	2f e6       	ldi	r18, 0x6F	; 111
    1c58:	41 e0       	ldi	r20, 0x01	; 1
    1c5a:	5b e0       	ldi	r21, 0x0B	; 11
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 2;
    1c64:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1c68:	81 7e       	andi	r24, 0xE1	; 225
    1c6a:	84 60       	ori	r24, 0x04	; 4
    1c6c:	82 c0       	rjmp	.+260    	; 0x1d72 <workInQueue+0x6ba>
				break;

			case 2:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP03, sizeof(PM_INTERPRETER_HELP03));
    1c6e:	27 e6       	ldi	r18, 0x67	; 103
    1c70:	4a e9       	ldi	r20, 0x9A	; 154
    1c72:	5a e0       	ldi	r21, 0x0A	; 10
    1c74:	61 e0       	ldi	r22, 0x01	; 1
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				break;

			case 3:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP04, sizeof(PM_INTERPRETER_HELP04));
#endif
				main_bf.mainHelpConcatNr = 4;
    1c7c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1c80:	81 7e       	andi	r24, 0xE1	; 225
    1c82:	88 60       	ori	r24, 0x08	; 8
    1c84:	76 c0       	rjmp	.+236    	; 0x1d72 <workInQueue+0x6ba>
				break;

			case 4:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP05, sizeof(PM_INTERPRETER_HELP05));
    1c86:	27 e1       	ldi	r18, 0x17	; 23
    1c88:	43 e8       	ldi	r20, 0x83	; 131
    1c8a:	5a e0       	ldi	r21, 0x0A	; 10
    1c8c:	61 e0       	ldi	r22, 0x01	; 1
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 5;
    1c94:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1c98:	81 7e       	andi	r24, 0xE1	; 225
    1c9a:	8a 60       	ori	r24, 0x0A	; 10
    1c9c:	6a c0       	rjmp	.+212    	; 0x1d72 <workInQueue+0x6ba>
				break;

			case 5:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP06, sizeof(PM_INTERPRETER_HELP06));
    1c9e:	2b e2       	ldi	r18, 0x2B	; 43
    1ca0:	48 e5       	ldi	r20, 0x58	; 88
    1ca2:	5a e0       	ldi	r21, 0x0A	; 10
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 6;
    1cac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1cb0:	81 7e       	andi	r24, 0xE1	; 225
    1cb2:	8c 60       	ori	r24, 0x0C	; 12
    1cb4:	5e c0       	rjmp	.+188    	; 0x1d72 <workInQueue+0x6ba>
				break;

			case 6:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP07, sizeof(PM_INTERPRETER_HELP07));
    1cb6:	2f e3       	ldi	r18, 0x3F	; 63
    1cb8:	49 e1       	ldi	r20, 0x19	; 25
    1cba:	5a e0       	ldi	r21, 0x0A	; 10
    1cbc:	61 e0       	ldi	r22, 0x01	; 1
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 7;
    1cc4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1cc8:	81 7e       	andi	r24, 0xE1	; 225
    1cca:	8e 60       	ori	r24, 0x0E	; 14
    1ccc:	52 c0       	rjmp	.+164    	; 0x1d72 <workInQueue+0x6ba>
				break;

			case 7:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP08, sizeof(PM_INTERPRETER_HELP08));
    1cce:	2c e2       	ldi	r18, 0x2C	; 44
    1cd0:	4d ee       	ldi	r20, 0xED	; 237
    1cd2:	59 e0       	ldi	r21, 0x09	; 9
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 8;
    1cdc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1ce0:	81 7e       	andi	r24, 0xE1	; 225
    1ce2:	80 61       	ori	r24, 0x10	; 16
    1ce4:	46 c0       	rjmp	.+140    	; 0x1d72 <workInQueue+0x6ba>
				break;

			case 8:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP09, sizeof(PM_INTERPRETER_HELP09));
    1ce6:	25 e5       	ldi	r18, 0x55	; 85
    1ce8:	48 e9       	ldi	r20, 0x98	; 152
    1cea:	59 e0       	ldi	r21, 0x09	; 9
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 9;
    1cf4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1cf8:	81 7e       	andi	r24, 0xE1	; 225
    1cfa:	82 61       	ori	r24, 0x12	; 18
    1cfc:	3a c0       	rjmp	.+116    	; 0x1d72 <workInQueue+0x6ba>
				break;

			case 9:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP10, sizeof(PM_INTERPRETER_HELP10));
    1cfe:	28 e2       	ldi	r18, 0x28	; 40
    1d00:	40 e7       	ldi	r20, 0x70	; 112
    1d02:	59 e0       	ldi	r21, 0x09	; 9
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 10;
    1d0c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1d10:	81 7e       	andi	r24, 0xE1	; 225
    1d12:	84 61       	ori	r24, 0x14	; 20
    1d14:	2e c0       	rjmp	.+92     	; 0x1d72 <workInQueue+0x6ba>
				break;

			case 10:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP11, sizeof(PM_INTERPRETER_HELP11));
    1d16:	2f e1       	ldi	r18, 0x1F	; 31
    1d18:	41 e5       	ldi	r20, 0x51	; 81
    1d1a:	59 e0       	ldi	r21, 0x09	; 9
    1d1c:	61 e0       	ldi	r22, 0x01	; 1
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 11;
    1d24:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1d28:	81 7e       	andi	r24, 0xE1	; 225
    1d2a:	86 61       	ori	r24, 0x16	; 22
    1d2c:	22 c0       	rjmp	.+68     	; 0x1d72 <workInQueue+0x6ba>
				break;

			case 11:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP12, sizeof(PM_INTERPRETER_HELP12));
    1d2e:	24 e7       	ldi	r18, 0x74	; 116
    1d30:	4d ed       	ldi	r20, 0xDD	; 221
    1d32:	58 e0       	ldi	r21, 0x08	; 8
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 12;
    1d3c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1d40:	81 7e       	andi	r24, 0xE1	; 225
    1d42:	88 61       	ori	r24, 0x18	; 24
    1d44:	16 c0       	rjmp	.+44     	; 0x1d72 <workInQueue+0x6ba>
				break;

			case 12:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP13, sizeof(PM_INTERPRETER_HELP13));
    1d46:	20 e3       	ldi	r18, 0x30	; 48
    1d48:	4d ea       	ldi	r20, 0xAD	; 173
    1d4a:	58 e0       	ldi	r21, 0x08	; 8
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				main_bf.mainHelpConcatNr = 13;
    1d54:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1d58:	81 7e       	andi	r24, 0xE1	; 225
    1d5a:	8a 61       	ori	r24, 0x1A	; 26
    1d5c:	0a c0       	rjmp	.+20     	; 0x1d72 <workInQueue+0x6ba>
				break;

			case 13:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP14, sizeof(PM_INTERPRETER_HELP14));
    1d5e:	2f e0       	ldi	r18, 0x0F	; 15
    1d60:	4e e9       	ldi	r20, 0x9E	; 158
    1d62:	58 e0       	ldi	r21, 0x08	; 8
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
				// no break
			default:
				main_bf.mainHelpConcatNr = 0;
    1d6c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1d70:	81 7e       	andi	r24, 0xE1	; 225
    1d72:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
    1d76:	03 c0       	rjmp	.+6      	; 0x1d7e <workInQueue+0x6c6>
				break;
			}
		}

		if (isLocked) {
			ringbuffer_fw_freeSemaphore(true);
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ringbuffer_fw_freeSemaphore>
		}
	}
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	bf 90       	pop	r11
    1d98:	af 90       	pop	r10
    1d9a:	9f 90       	pop	r9
    1d9c:	8f 90       	pop	r8
    1d9e:	08 95       	ret

00001da0 <main_fw_giveAway>:
		mainPwmTerminalAdj = 0.0f;
	}
}

void main_fw_giveAway(void)
{
    1da0:	2f 92       	push	r2
    1da2:	3f 92       	push	r3
    1da4:	4f 92       	push	r4
    1da6:	5f 92       	push	r5
    1da8:	6f 92       	push	r6
    1daa:	7f 92       	push	r7
    1dac:	8f 92       	push	r8
    1dae:	9f 92       	push	r9
    1db0:	af 92       	push	r10
    1db2:	bf 92       	push	r11
    1db4:	cf 92       	push	r12
    1db6:	df 92       	push	r13
    1db8:	ef 92       	push	r14
    1dba:	ff 92       	push	r15
    1dbc:	0f 93       	push	r16
    1dbe:	1f 93       	push	r17
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	69 97       	sbiw	r28, 0x19	; 25
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    wdt_reset();
    1dd4:	a8 95       	wdr
	usbPoll();
    1dd6:	0e 94 2a 2a 	call	0x5454	; 0x5454 <usbPoll>

	usb_fw_sendInInterrupt();
    1dda:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <usb_fw_sendInInterrupt>
	workInQueue();
    1dde:	6c dc       	rcall	.-1832   	; 0x16b8 <workInQueue>
	uint16_t localStampICR1;
	uint8_t len = 0;

	{
		/* get the timers */
		uint8_t sreg = SREG;
    1de0:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1de2:	f8 94       	cli

		/* get the current ms and ticks timer */
		uint8_t localTCNT1L = TCNT1L;						// low byte first
    1de4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1de8:	2b 87       	std	Y+11, r18	; 0x0b
		uint8_t localTCNT1H = TCNT1H;
    1dea:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1dee:	3f 83       	std	Y+7, r19	; 0x07
		localFastCtr1ms = fastCtr1ms;						// make a copy of the running clock
    1df0:	c0 90 35 05 	lds	r12, 0x0535	; 0x800535 <fastCtr1ms>
    1df4:	d0 90 36 05 	lds	r13, 0x0536	; 0x800536 <fastCtr1ms+0x1>
    1df8:	e0 90 37 05 	lds	r14, 0x0537	; 0x800537 <fastCtr1ms+0x2>
    1dfc:	f0 90 38 05 	lds	r15, 0x0538	; 0x800538 <fastCtr1ms+0x3>

		/* get the last stamped time as ms and ticks */
		uint8_t localICR1L = ICR1L;							// low byte first
    1e00:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		uint8_t localICR1H = ICR1H;
    1e04:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock
    1e08:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <fastStampCtr1ms>
    1e0c:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <fastStampCtr1ms+0x1>
    1e10:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <fastStampCtr1ms+0x2>
    1e14:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <fastStampCtr1ms+0x3>

		SREG = sreg;
    1e18:	9f bf       	out	0x3f, r25	; 63

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
		localStampICR1	= localICR1L  | (localICR1H  << 8);
	}

	if (localAdcConvertNowCntrLast != acAdcConvertNowCntr) {  // a new PPS impulse has arrived
    1e1a:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <acAdcConvertNowCntr>
    1e1e:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <localAdcConvertNowCntrLast.2996>
    1e22:	39 17       	cp	r19, r25
    1e24:	69 f1       	breq	.+90     	; 0x1e80 <main_fw_giveAway+0xe0>
		localAdcConvertNowCntrLast = acAdcConvertNowCntr;
    1e26:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <localAdcConvertNowCntrLast.2996>
		localNoPpsCnt = 0;
    1e2a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <localNoPpsCnt.2998>

		ppsStampCtr1ms_last = ppsStampCtr1ms;
    1e2e:	80 90 89 05 	lds	r8, 0x0589	; 0x800589 <ppsStampCtr1ms>
    1e32:	90 90 8a 05 	lds	r9, 0x058A	; 0x80058a <ppsStampCtr1ms+0x1>
    1e36:	a0 90 8b 05 	lds	r10, 0x058B	; 0x80058b <ppsStampCtr1ms+0x2>
    1e3a:	b0 90 8c 05 	lds	r11, 0x058C	; 0x80058c <ppsStampCtr1ms+0x3>
    1e3e:	80 92 83 05 	sts	0x0583, r8	; 0x800583 <ppsStampCtr1ms_last>
    1e42:	90 92 84 05 	sts	0x0584, r9	; 0x800584 <ppsStampCtr1ms_last+0x1>
    1e46:	a0 92 85 05 	sts	0x0585, r10	; 0x800585 <ppsStampCtr1ms_last+0x2>
    1e4a:	b0 92 86 05 	sts	0x0586, r11	; 0x800586 <ppsStampCtr1ms_last+0x3>
		ppsStampICR1_last   = ppsStampICR1;
    1e4e:	e0 91 87 05 	lds	r30, 0x0587	; 0x800587 <ppsStampICR1>
    1e52:	f0 91 88 05 	lds	r31, 0x0588	; 0x800588 <ppsStampICR1+0x1>
    1e56:	f0 93 82 05 	sts	0x0582, r31	; 0x800582 <ppsStampICR1_last+0x1>
    1e5a:	e0 93 81 05 	sts	0x0581, r30	; 0x800581 <ppsStampICR1_last>

		ppsStampCtr1ms = localStampCtr1ms;
    1e5e:	66 27       	eor	r22, r22
    1e60:	77 27       	eor	r23, r23
    1e62:	40 93 89 05 	sts	0x0589, r20	; 0x800589 <ppsStampCtr1ms>
    1e66:	50 93 8a 05 	sts	0x058A, r21	; 0x80058a <ppsStampCtr1ms+0x1>
    1e6a:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <ppsStampCtr1ms+0x2>
    1e6e:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <ppsStampCtr1ms+0x3>
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock

		SREG = sreg;

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
		localStampICR1	= localICR1L  | (localICR1H  << 8);
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	92 2b       	or	r25, r18

		ppsStampCtr1ms_last = ppsStampCtr1ms;
		ppsStampICR1_last   = ppsStampICR1;

		ppsStampCtr1ms = localStampCtr1ms;
		ppsStampICR1   = localStampICR1;
    1e76:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <ppsStampICR1+0x1>
    1e7a:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <ppsStampICR1>
    1e7e:	2c c0       	rjmp	.+88     	; 0x1ed8 <main_fw_giveAway+0x138>

		/* reload timer */
		localFastCtr1ms_next = localFastCtr1ms + LocalCtr1sSpanMs + LocalCtr250msBorderMs;

	} else if (localFastCtr1ms >= localFastCtr1ms_next) {  	// the timer has elapsed without a PPS impulse
    1e80:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <localFastCtr1ms_next.2997>
    1e84:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <localFastCtr1ms_next.2997+0x1>
    1e88:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <localFastCtr1ms_next.2997+0x2>
    1e8c:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <localFastCtr1ms_next.2997+0x3>
    1e90:	c8 16       	cp	r12, r24
    1e92:	d9 06       	cpc	r13, r25
    1e94:	ea 06       	cpc	r14, r26
    1e96:	fb 06       	cpc	r15, r27
    1e98:	98 f1       	brcs	.+102    	; 0x1f00 <main_fw_giveAway+0x160>
		if (++localNoPpsCnt > 180) {
    1e9a:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <localNoPpsCnt.2998>
    1e9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ea0:	25 3b       	cpi	r18, 0xB5	; 181
    1ea2:	08 f0       	brcs	.+2      	; 0x1ea6 <main_fw_giveAway+0x106>
			localNoPpsCnt = 180;							// clamp to 3 minutes
    1ea4:	24 eb       	ldi	r18, 0xB4	; 180
    1ea6:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <localNoPpsCnt.2998>
		}
		if (localNoPpsCnt >= 5) {
    1eaa:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <localNoPpsCnt.2998>
    1eae:	25 30       	cpi	r18, 0x05	; 5
    1eb0:	50 f0       	brcs	.+20     	; 0x1ec6 <main_fw_giveAway+0x126>
			mainRefClkState = REFCLK_STATE_NOSYNC;			// reset clock state when at least 5 seconds without a reference signal
    1eb2:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <mainRefClkState>
			mainPpm = 0.0f;
    1eb6:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <mainPpm>
    1eba:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <mainPpm+0x1>
    1ebe:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <mainPpm+0x2>
    1ec2:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <mainPpm+0x3>
		}

		if ((localFastCtr1ms_next + LocalCtr1sSpanMs) > localFastCtr1ms) {
    1ec6:	88 51       	subi	r24, 0x18	; 24
    1ec8:	9c 4f       	sbci	r25, 0xFC	; 252
    1eca:	af 4f       	sbci	r26, 0xFF	; 255
    1ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ece:	c8 16       	cp	r12, r24
    1ed0:	d9 06       	cpc	r13, r25
    1ed2:	ea 06       	cpc	r14, r26
    1ed4:	fb 06       	cpc	r15, r27
    1ed6:	30 f0       	brcs	.+12     	; 0x1ee4 <main_fw_giveAway+0x144>
			/* adjust */
			localFastCtr1ms_next += LocalCtr1sSpanMs;		// +1 second

		} else {
			/* reload / initial timer */
			localFastCtr1ms_next = localFastCtr1ms + LocalCtr1sSpanMs + LocalCtr250msBorderMs;
    1ed8:	d7 01       	movw	r26, r14
    1eda:	c6 01       	movw	r24, r12
    1edc:	8e 51       	subi	r24, 0x1E	; 30
    1ede:	9b 4f       	sbci	r25, 0xFB	; 251
    1ee0:	af 4f       	sbci	r26, 0xFF	; 255
    1ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <localFastCtr1ms_next.2997>
    1ee8:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <localFastCtr1ms_next.2997+0x1>
    1eec:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <localFastCtr1ms_next.2997+0x2>
    1ef0:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <localFastCtr1ms_next.2997+0x3>
	 *
	 * ATTENTION: This version of the application does drop the vprintf() floating point facilities.
	 *            vscanf() floating point is still in use.
	 */

	if (mainGpsInitVal) {
    1ef4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <mainGpsInitVal>
    1ef8:	88 23       	and	r24, r24
    1efa:	09 f4       	brne	.+2      	; 0x1efe <main_fw_giveAway+0x15e>
    1efc:	c9 c1       	rjmp	.+914    	; 0x2290 <main_fw_giveAway+0x4f0>
    1efe:	9f c1       	rjmp	.+830    	; 0x223e <main_fw_giveAway+0x49e>
		}

	} else {
		/* nothing has happened - do some bulk data if a job is ready to be done */

		if (serialCtxtBufferState == SERIAL_CTXT_BUFFER_STATE_SEND) {
    1f00:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <serialCtxtBufferState>
    1f04:	82 30       	cpi	r24, 0x02	; 2
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <main_fw_giveAway+0x16a>
    1f08:	71 c1       	rjmp	.+738    	; 0x21ec <main_fw_giveAway+0x44c>
		main_nmeaTimeUtcInt +=  10000;
	}
}

static void main_fw_parseNmeaLineData(void) {
	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG01, sizeof(PM_PARSE_NMEA_MSG01));
    1f0a:	2d e3       	ldi	r18, 0x3D	; 61
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	44 e7       	ldi	r20, 0x74	; 116
    1f10:	51 e0       	ldi	r21, 0x01	; 1
    1f12:	6d e8       	ldi	r22, 0x8D	; 141
    1f14:	73 e0       	ldi	r23, 0x03	; 3
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
	int len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1f1c:	81 e4       	ldi	r24, 0x41	; 65
    1f1e:	95 e0       	ldi	r25, 0x05	; 5
    1f20:	9f 93       	push	r25
    1f22:	8f 93       	push	r24
    1f24:	83 e4       	ldi	r24, 0x43	; 67
    1f26:	95 e0       	ldi	r25, 0x05	; 5
    1f28:	9f 93       	push	r25
    1f2a:	8f 93       	push	r24
    1f2c:	8f e5       	ldi	r24, 0x5F	; 95
    1f2e:	95 e0       	ldi	r25, 0x05	; 5
    1f30:	9f 93       	push	r25
    1f32:	8f 93       	push	r24
    1f34:	87 e6       	ldi	r24, 0x67	; 103
    1f36:	95 e0       	ldi	r25, 0x05	; 5
    1f38:	9f 93       	push	r25
    1f3a:	8f 93       	push	r24
    1f3c:	8d e6       	ldi	r24, 0x6D	; 109
    1f3e:	95 e0       	ldi	r25, 0x05	; 5
    1f40:	9f 93       	push	r25
    1f42:	8f 93       	push	r24
    1f44:	87 e4       	ldi	r24, 0x47	; 71
    1f46:	95 e0       	ldi	r25, 0x05	; 5
    1f48:	9f 93       	push	r25
    1f4a:	8f 93       	push	r24
    1f4c:	88 e4       	ldi	r24, 0x48	; 72
    1f4e:	95 e0       	ldi	r25, 0x05	; 5
    1f50:	9f 93       	push	r25
    1f52:	8f 93       	push	r24
    1f54:	8c e4       	ldi	r24, 0x4C	; 76
    1f56:	95 e0       	ldi	r25, 0x05	; 5
    1f58:	9f 93       	push	r25
    1f5a:	8f 93       	push	r24
    1f5c:	8d e4       	ldi	r24, 0x4D	; 77
    1f5e:	95 e0       	ldi	r25, 0x05	; 5
    1f60:	9f 93       	push	r25
    1f62:	8f 93       	push	r24
    1f64:	81 e5       	ldi	r24, 0x51	; 81
    1f66:	95 e0       	ldi	r25, 0x05	; 5
    1f68:	9f 93       	push	r25
    1f6a:	8f 93       	push	r24
    1f6c:	83 e5       	ldi	r24, 0x53	; 83
    1f6e:	95 e0       	ldi	r25, 0x05	; 5
    1f70:	9f 93       	push	r25
    1f72:	8f 93       	push	r24
    1f74:	8d e8       	ldi	r24, 0x8D	; 141
    1f76:	e8 2e       	mov	r14, r24
    1f78:	83 e0       	ldi	r24, 0x03	; 3
    1f7a:	f8 2e       	mov	r15, r24
    1f7c:	ff 92       	push	r15
    1f7e:	ef 92       	push	r14
    1f80:	0f e0       	ldi	r16, 0x0F	; 15
    1f82:	12 e0       	ldi	r17, 0x02	; 2
    1f84:	1f 93       	push	r17
    1f86:	0f 93       	push	r16
    1f88:	0e 94 a4 34 	call	0x6948	; 0x6948 <sscanf>
			&main_nmeaSatsUsed,
			&main_nmeaHdop,
			&main_nmeaAltitudeM,
			&main_checksum);

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG11, sizeof(PM_PARSE_NMEA_MSG11));
    1f8c:	2f e0       	ldi	r18, 0x0F	; 15
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	45 e6       	ldi	r20, 0x65	; 101
    1f92:	51 e0       	ldi	r21, 0x01	; 1
    1f94:	b7 01       	movw	r22, r14
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1f9c:	8f e6       	ldi	r24, 0x6F	; 111
    1f9e:	95 e0       	ldi	r25, 0x05	; 5
    1fa0:	9f 93       	push	r25
    1fa2:	8f 93       	push	r24
    1fa4:	ff 92       	push	r15
    1fa6:	ef 92       	push	r14
    1fa8:	1f 93       	push	r17
    1faa:	0f 93       	push	r16
    1fac:	0e 94 a4 34 	call	0x6948	; 0x6948 <sscanf>
			&main_nmeaMode2);
	if (len > 0) {
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	18 16       	cp	r1, r24
    1fbc:	19 06       	cpc	r1, r25
    1fbe:	0c f0       	brlt	.+2      	; 0x1fc2 <main_fw_giveAway+0x222>
    1fc0:	57 c0       	rjmp	.+174    	; 0x2070 <main_fw_giveAway+0x2d0>
		main_fw_nmeaUtcPlusOneSec();
    1fc2:	d0 d9       	rcall	.-3168   	; 0x1364 <main_fw_nmeaUtcPlusOneSec>

		if ((main_nmeaMode2 < 2) || (3 < main_nmeaMode2)) {
    1fc4:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaMode2>
    1fc8:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <main_nmeaMode2+0x1>
    1fcc:	02 97       	sbiw	r24, 0x02	; 2
    1fce:	02 97       	sbiw	r24, 0x02	; 2
    1fd0:	20 f0       	brcs	.+8      	; 0x1fda <main_fw_giveAway+0x23a>
			main_nmeaMode2 = 0;
    1fd2:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <main_nmeaMode2+0x1>
    1fd6:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <main_nmeaMode2>
		}

		int ofs = 0, commaCnt = 0;
		for (int idx = serialCtxtRxBufferLen - 1; idx; --idx) {
    1fda:	00 91 1b 05 	lds	r16, 0x051B	; 0x80051b <serialCtxtRxBufferLen>
    1fde:	10 e0       	ldi	r17, 0x00	; 0
    1fe0:	01 50       	subi	r16, 0x01	; 1
    1fe2:	11 09       	sbc	r17, r1
    1fe4:	31 f0       	breq	.+12     	; 0x1ff2 <main_fw_giveAway+0x252>
    1fe6:	f8 01       	movw	r30, r16
    1fe8:	e1 5f       	subi	r30, 0xF1	; 241
    1fea:	fd 4f       	sbci	r31, 0xFD	; 253
			if (serialCtxtRxBuffer[idx] == '*') {
    1fec:	80 81       	ld	r24, Z
    1fee:	8a 32       	cpi	r24, 0x2A	; 42
    1ff0:	b9 f7       	brne	.-18     	; 0x1fe0 <main_fw_giveAway+0x240>
				ofs = idx;
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1ff2:	c8 01       	movw	r24, r16

		if ((main_nmeaMode2 < 2) || (3 < main_nmeaMode2)) {
			main_nmeaMode2 = 0;
		}

		int ofs = 0, commaCnt = 0;
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
			if (serialCtxtRxBuffer[idx] == '*') {
				ofs = idx;
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1ff8:	18 16       	cp	r1, r24
    1ffa:	19 06       	cpc	r1, r25
    1ffc:	8c f4       	brge	.+34     	; 0x2020 <main_fw_giveAway+0x280>
    1ffe:	fc 01       	movw	r30, r24
    2000:	e1 5f       	subi	r30, 0xF1	; 241
    2002:	fd 4f       	sbci	r31, 0xFD	; 253
			if (serialCtxtRxBuffer[idx] == ',') {
    2004:	40 81       	ld	r20, Z
    2006:	4c 32       	cpi	r20, 0x2C	; 44
    2008:	49 f4       	brne	.+18     	; 0x201c <main_fw_giveAway+0x27c>
				if (++commaCnt == 3) {
    200a:	2f 5f       	subi	r18, 0xFF	; 255
    200c:	3f 4f       	sbci	r19, 0xFF	; 255
    200e:	23 30       	cpi	r18, 0x03	; 3
    2010:	31 05       	cpc	r19, r1
    2012:	21 f4       	brne	.+8      	; 0x201c <main_fw_giveAway+0x27c>
					ofs = ++idx;
    2014:	8c 01       	movw	r16, r24
    2016:	0f 5f       	subi	r16, 0xFF	; 255
    2018:	1f 4f       	sbci	r17, 0xFF	; 255
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <main_fw_giveAway+0x280>
			if (serialCtxtRxBuffer[idx] == '*') {
				ofs = idx;
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	ec cf       	rjmp	.-40     	; 0x1ff8 <main_fw_giveAway+0x258>
					ofs = ++idx;
					break;
				}
			}
		}
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG12, sizeof(PM_PARSE_NMEA_MSG12));
    2020:	2c e0       	ldi	r18, 0x0C	; 12
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	49 e5       	ldi	r20, 0x59	; 89
    2026:	51 e0       	ldi	r21, 0x01	; 1
    2028:	6d e8       	ldi	r22, 0x8D	; 141
    202a:	73 e0       	ldi	r23, 0x03	; 3
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		sscanf((char*) serialCtxtRxBuffer + ofs, (char*) mainFormatBuffer,
    2032:	81 e4       	ldi	r24, 0x41	; 65
    2034:	95 e0       	ldi	r25, 0x05	; 5
    2036:	9f 93       	push	r25
    2038:	8f 93       	push	r24
    203a:	8b e5       	ldi	r24, 0x5B	; 91
    203c:	95 e0       	ldi	r25, 0x05	; 5
    203e:	9f 93       	push	r25
    2040:	8f 93       	push	r24
    2042:	8f e5       	ldi	r24, 0x5F	; 95
    2044:	95 e0       	ldi	r25, 0x05	; 5
    2046:	9f 93       	push	r25
    2048:	8f 93       	push	r24
    204a:	83 e6       	ldi	r24, 0x63	; 99
    204c:	95 e0       	ldi	r25, 0x05	; 5
    204e:	9f 93       	push	r25
    2050:	8f 93       	push	r24
    2052:	8d e8       	ldi	r24, 0x8D	; 141
    2054:	93 e0       	ldi	r25, 0x03	; 3
    2056:	9f 93       	push	r25
    2058:	8f 93       	push	r24
    205a:	01 5f       	subi	r16, 0xF1	; 241
    205c:	1d 4f       	sbci	r17, 0xFD	; 253
    205e:	1f 93       	push	r17
    2060:	0f 93       	push	r16
    2062:	0e 94 a4 34 	call	0x6948	; 0x6948 <sscanf>
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
				&main_nmeaHdop,
				&main_nmeaVdop,
				&main_checksum);
	}

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG21, sizeof(PM_PARSE_NMEA_MSG21));
    2070:	23 e3       	ldi	r18, 0x33	; 51
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	46 e2       	ldi	r20, 0x26	; 38
    2076:	51 e0       	ldi	r21, 0x01	; 1
    2078:	6d e8       	ldi	r22, 0x8D	; 141
    207a:	73 e0       	ldi	r23, 0x03	; 3
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    2082:	81 e4       	ldi	r24, 0x41	; 65
    2084:	95 e0       	ldi	r25, 0x05	; 5
    2086:	9f 93       	push	r25
    2088:	8f 93       	push	r24
    208a:	87 e5       	ldi	r24, 0x57	; 87
    208c:	95 e0       	ldi	r25, 0x05	; 5
    208e:	9f 93       	push	r25
    2090:	8f 93       	push	r24
    2092:	87 e4       	ldi	r24, 0x47	; 71
    2094:	95 e0       	ldi	r25, 0x05	; 5
    2096:	9f 93       	push	r25
    2098:	8f 93       	push	r24
    209a:	88 e4       	ldi	r24, 0x48	; 72
    209c:	95 e0       	ldi	r25, 0x05	; 5
    209e:	9f 93       	push	r25
    20a0:	8f 93       	push	r24
    20a2:	8c e4       	ldi	r24, 0x4C	; 76
    20a4:	95 e0       	ldi	r25, 0x05	; 5
    20a6:	9f 93       	push	r25
    20a8:	8f 93       	push	r24
    20aa:	8d e4       	ldi	r24, 0x4D	; 77
    20ac:	95 e0       	ldi	r25, 0x05	; 5
    20ae:	9f 93       	push	r25
    20b0:	8f 93       	push	r24
    20b2:	81 e5       	ldi	r24, 0x51	; 81
    20b4:	95 e0       	ldi	r25, 0x05	; 5
    20b6:	9f 93       	push	r25
    20b8:	8f 93       	push	r24
    20ba:	83 e5       	ldi	r24, 0x53	; 83
    20bc:	95 e0       	ldi	r25, 0x05	; 5
    20be:	9f 93       	push	r25
    20c0:	8f 93       	push	r24
    20c2:	8d e8       	ldi	r24, 0x8D	; 141
    20c4:	93 e0       	ldi	r25, 0x03	; 3
    20c6:	9f 93       	push	r25
    20c8:	8f 93       	push	r24
    20ca:	8f e0       	ldi	r24, 0x0F	; 15
    20cc:	92 e0       	ldi	r25, 0x02	; 2
    20ce:	9f 93       	push	r25
    20d0:	8f 93       	push	r24
    20d2:	0e 94 a4 34 	call	0x6948	; 0x6948 <sscanf>
			&main_nmeaPosLatSign,
			&main_nmeaPosLon,
			&main_nmeaPosLonSign,
			&main_nmeaDate,
			&main_checksum);
	if (len > 0) {
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	18 16       	cp	r1, r24
    20e2:	19 06       	cpc	r1, r25
    20e4:	0c f0       	brlt	.+2      	; 0x20e8 <main_fw_giveAway+0x348>
    20e6:	43 c0       	rjmp	.+134    	; 0x216e <main_fw_giveAway+0x3ce>
		main_fw_nmeaUtcPlusOneSec();
    20e8:	3d d9       	rcall	.-3462   	; 0x1364 <main_fw_nmeaUtcPlusOneSec>
		if ((main_nmeaDate >= 010100) && (main_nmeaDate < 311299)) {
    20ea:	c0 90 57 05 	lds	r12, 0x0557	; 0x800557 <main_nmeaDate>
    20ee:	d0 90 58 05 	lds	r13, 0x0558	; 0x800558 <main_nmeaDate+0x1>
    20f2:	e0 90 59 05 	lds	r14, 0x0559	; 0x800559 <main_nmeaDate+0x2>
    20f6:	f0 90 5a 05 	lds	r15, 0x055A	; 0x80055a <main_nmeaDate+0x3>
    20fa:	d7 01       	movw	r26, r14
    20fc:	c6 01       	movw	r24, r12
    20fe:	80 54       	subi	r24, 0x40	; 64
    2100:	90 41       	sbci	r25, 0x10	; 16
    2102:	a1 09       	sbc	r26, r1
    2104:	b1 09       	sbc	r27, r1
    2106:	83 3c       	cpi	r24, 0xC3	; 195
    2108:	9f 4a       	sbci	r25, 0xAF	; 175
    210a:	a4 40       	sbci	r26, 0x04	; 4
    210c:	b1 05       	cpc	r27, r1
    210e:	38 f5       	brcc	.+78     	; 0x215e <main_fw_giveAway+0x3be>
			main_nmeaDate = ((main_nmeaDate - (main_nmeaDate % 100)) * 100) + 2000 + (main_nmeaDate % 100);
    2110:	c7 01       	movw	r24, r14
    2112:	b6 01       	movw	r22, r12
    2114:	24 e6       	ldi	r18, 0x64	; 100
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
    2120:	4b 01       	movw	r8, r22
    2122:	5c 01       	movw	r10, r24
    2124:	a7 01       	movw	r20, r14
    2126:	96 01       	movw	r18, r12
    2128:	26 1b       	sub	r18, r22
    212a:	37 0b       	sbc	r19, r23
    212c:	48 0b       	sbc	r20, r24
    212e:	59 0b       	sbc	r21, r25
    2130:	a4 e6       	ldi	r26, 0x64	; 100
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__muluhisi3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	80 53       	subi	r24, 0x30	; 48
    213e:	98 4f       	sbci	r25, 0xF8	; 248
    2140:	af 4f       	sbci	r26, 0xFF	; 255
    2142:	bf 4f       	sbci	r27, 0xFF	; 255
    2144:	88 0e       	add	r8, r24
    2146:	99 1e       	adc	r9, r25
    2148:	aa 1e       	adc	r10, r26
    214a:	bb 1e       	adc	r11, r27
    214c:	80 92 57 05 	sts	0x0557, r8	; 0x800557 <main_nmeaDate>
    2150:	90 92 58 05 	sts	0x0558, r9	; 0x800558 <main_nmeaDate+0x1>
    2154:	a0 92 59 05 	sts	0x0559, r10	; 0x800559 <main_nmeaDate+0x2>
    2158:	b0 92 5a 05 	sts	0x055A, r11	; 0x80055a <main_nmeaDate+0x3>
    215c:	08 c0       	rjmp	.+16     	; 0x216e <main_fw_giveAway+0x3ce>
		} else {
			main_nmeaDate = 0;
    215e:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <main_nmeaDate>
    2162:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <main_nmeaDate+0x1>
    2166:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <main_nmeaDate+0x2>
    216a:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <main_nmeaDate+0x3>
		}
	}

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG31, sizeof(PM_PARSE_NMEA_MSG31));
    216e:	21 e1       	ldi	r18, 0x11	; 17
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	45 e1       	ldi	r20, 0x15	; 21
    2174:	51 e0       	ldi	r21, 0x01	; 1
    2176:	6d e8       	ldi	r22, 0x8D	; 141
    2178:	73 e0       	ldi	r23, 0x03	; 3
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    2180:	8b e6       	ldi	r24, 0x6B	; 107
    2182:	95 e0       	ldi	r25, 0x05	; 5
    2184:	9f 93       	push	r25
    2186:	8f 93       	push	r24
    2188:	0d e8       	ldi	r16, 0x8D	; 141
    218a:	e0 2e       	mov	r14, r16
    218c:	03 e0       	ldi	r16, 0x03	; 3
    218e:	f0 2e       	mov	r15, r16
    2190:	ff 92       	push	r15
    2192:	ef 92       	push	r14
    2194:	0f e0       	ldi	r16, 0x0F	; 15
    2196:	12 e0       	ldi	r17, 0x02	; 2
    2198:	1f 93       	push	r17
    219a:	0f 93       	push	r16
    219c:	0e 94 a4 34 	call	0x6948	; 0x6948 <sscanf>
			&main_nmeaSatsEphemerisGpsGalileoQzss);

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG41, sizeof(PM_PARSE_NMEA_MSG41));
    21a0:	21 e1       	ldi	r18, 0x11	; 17
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	44 e0       	ldi	r20, 0x04	; 4
    21a6:	51 e0       	ldi	r21, 0x01	; 1
    21a8:	b7 01       	movw	r22, r14
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    21b0:	89 e6       	ldi	r24, 0x69	; 105
    21b2:	95 e0       	ldi	r25, 0x05	; 5
    21b4:	9f 93       	push	r25
    21b6:	8f 93       	push	r24
    21b8:	ff 92       	push	r15
    21ba:	ef 92       	push	r14
    21bc:	1f 93       	push	r17
    21be:	0f 93       	push	r16
    21c0:	0e 94 a4 34 	call	0x6948	; 0x6948 <sscanf>

		if (serialCtxtBufferState == SERIAL_CTXT_BUFFER_STATE_SEND) {
			main_fw_parseNmeaLineData();

			/* if serial data from the GPS module is required, send it to USB in-port */
			if (main_bf.mainIsSerComm) {
    21c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	83 ff       	sbrs	r24, 3
    21d4:	07 c0       	rjmp	.+14     	; 0x21e4 <main_fw_giveAway+0x444>
				ringbuffer_fw_ringBufferWaitAppend(false, false, serialCtxtRxBuffer, serialCtxtRxBufferLen);
    21d6:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <serialCtxtRxBufferLen>
    21da:	a8 01       	movw	r20, r16
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
			}

			/* mark the serial buffer as to be ready again for receiving GPS data */
			serialCtxtRxBufferLen = 0;
    21e4:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <serialCtxtRxBufferLen>
			serialCtxtBufferState = 0;
    21e8:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <serialCtxtBufferState>

static void calcPhaseResidue(void)
{
	uint8_t localFastPwmSingleLoad;

	uint8_t sreg = SREG;
    21ec:	8f b7       	in	r24, 0x3f	; 63
	cli();
    21ee:	f8 94       	cli
	localFastPwmSingleLoad = fastPwmSingleLoad;
    21f0:	10 91 32 05 	lds	r17, 0x0532	; 0x800532 <fastPwmSingleLoad>
	SREG = sreg;
    21f4:	8f bf       	out	0x3f, r24	; 63

	if (fastPwmSingleDiffSum && (!localFastPwmSingleLoad)) {  // enter only if an offset is accumulated and the last phase correction is loaded
    21f6:	c0 90 2a 05 	lds	r12, 0x052A	; 0x80052a <fastPwmSingleDiffSum>
    21fa:	d0 90 2b 05 	lds	r13, 0x052B	; 0x80052b <fastPwmSingleDiffSum+0x1>
    21fe:	e0 90 2c 05 	lds	r14, 0x052C	; 0x80052c <fastPwmSingleDiffSum+0x2>
    2202:	f0 90 2d 05 	lds	r15, 0x052D	; 0x80052d <fastPwmSingleDiffSum+0x3>
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	a9 01       	movw	r20, r18
    220c:	c7 01       	movw	r24, r14
    220e:	b6 01       	movw	r22, r12
    2210:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    2214:	88 23       	and	r24, r24
    2216:	11 f4       	brne	.+4      	; 0x221c <main_fw_giveAway+0x47c>
    2218:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <main_fw_giveAway+0x20f8>
    221c:	11 11       	cpse	r17, r1
    221e:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <main_fw_giveAway+0x20f8>
    2222:	41 e0       	ldi	r20, 0x01	; 1
    2224:	c7 01       	movw	r24, r14
    2226:	b6 01       	movw	r22, r12
    2228:	e7 d9       	rcall	.-3122   	; 0x15f8 <pwmTimerCorrection.part.0>
		/* Calculate and execute phase correction */
		fastPwmSingleDiffSum = pwmTimerCorrection(fastPwmSingleDiffSum, true);
    222a:	60 93 2a 05 	sts	0x052A, r22	; 0x80052a <fastPwmSingleDiffSum>
    222e:	70 93 2b 05 	sts	0x052B, r23	; 0x80052b <fastPwmSingleDiffSum+0x1>
    2232:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <fastPwmSingleDiffSum+0x2>
    2236:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <fastPwmSingleDiffSum+0x3>
    223a:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <main_fw_giveAway+0x20f8>
	 */

	if (mainGpsInitVal) {
		/* activate GPS module for GPS / GALILEO / QZSS as well as GLONASS reception */

		mainGpsInitVal++;
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <mainGpsInitVal>
		if (5 == mainGpsInitVal) {  // XXX init of GPS-Module is here
    2244:	85 30       	cpi	r24, 0x05	; 5
    2246:	21 f4       	brne	.+8      	; 0x2250 <main_fw_giveAway+0x4b0>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WARM_RESTART, sizeof(PM_FORMAT_GPS_WARM_RESTART));
    2248:	4e e0       	ldi	r20, 0x0E	; 14
    224a:	6d e1       	ldi	r22, 0x1D	; 29
    224c:	78 e0       	ldi	r23, 0x08	; 8
    224e:	05 c0       	rjmp	.+10     	; 0x225a <main_fw_giveAway+0x4ba>

		} else if (10 == mainGpsInitVal) {
    2250:	8a 30       	cpi	r24, 0x0A	; 10
    2252:	39 f4       	brne	.+14     	; 0x2262 <main_fw_giveAway+0x4c2>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST0_EAST0, sizeof(PM_FORMAT_GPS_WEST0_EAST0));  // disable all GNSS systems
    2254:	42 e1       	ldi	r20, 0x12	; 18
    2256:	6b e0       	ldi	r22, 0x0B	; 11
    2258:	78 e0       	ldi	r23, 0x08	; 8
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	0e 94 f6 23 	call	0x47ec	; 0x47ec <serial_fw_copyAndSendNmea>
    2260:	17 c0       	rjmp	.+46     	; 0x2290 <main_fw_giveAway+0x4f0>

		} else if (11 == mainGpsInitVal) {
    2262:	8b 30       	cpi	r24, 0x0B	; 11
    2264:	21 f4       	brne	.+8      	; 0x226e <main_fw_giveAway+0x4ce>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST0, sizeof(PM_FORMAT_GPS_WEST1_EAST0));  // activate GPS, QZSS & Galileo
    2266:	42 e1       	ldi	r20, 0x12	; 18
    2268:	69 ef       	ldi	r22, 0xF9	; 249
    226a:	77 e0       	ldi	r23, 0x07	; 7
    226c:	f6 cf       	rjmp	.-20     	; 0x225a <main_fw_giveAway+0x4ba>

		} else if (12 == mainGpsInitVal) {
    226e:	8c 30       	cpi	r24, 0x0C	; 12
    2270:	21 f4       	brne	.+8      	; 0x227a <main_fw_giveAway+0x4da>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST1, sizeof(PM_FORMAT_GPS_WEST1_EAST1));  // activate GLONASS also
    2272:	42 e1       	ldi	r20, 0x12	; 18
    2274:	67 ee       	ldi	r22, 0xE7	; 231
    2276:	77 e0       	ldi	r23, 0x07	; 7
    2278:	f0 cf       	rjmp	.-32     	; 0x225a <main_fw_giveAway+0x4ba>

		} else if (70 == mainGpsInitVal) {
    227a:	86 34       	cpi	r24, 0x46	; 70
    227c:	49 f4       	brne	.+18     	; 0x2290 <main_fw_giveAway+0x4f0>
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST1, sizeof(PM_FORMAT_GPS_WEST1_EAST1));  // activate GLONASS also (sent every minute)
    227e:	42 e1       	ldi	r20, 0x12	; 18
    2280:	67 ee       	ldi	r22, 0xE7	; 231
    2282:	77 e0       	ldi	r23, 0x07	; 7
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	0e 94 f6 23 	call	0x47ec	; 0x47ec <serial_fw_copyAndSendNmea>
			mainGpsInitVal = 10;
    228a:	8a e0       	ldi	r24, 0x0A	; 10
    228c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <mainGpsInitVal>
		}
	}

	mainAdcPullVolts	= ( acAdcCh[ADC_CH_PWMPULL] / ADC_STEPS_1V) + ADC_OFS_0ADC_V;
    2290:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <acAdcCh>
    2294:	70 91 88 03 	lds	r23, 0x0388	; 0x800388 <acAdcCh+0x1>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 17 31 	call	0x622e	; 0x622e <__floatunsisf>
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	45 e5       	ldi	r20, 0x55	; 85
    22a6:	53 e4       	ldi	r21, 0x43	; 67
    22a8:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    22ac:	29 e6       	ldi	r18, 0x69	; 105
    22ae:	39 e3       	ldi	r19, 0x39	; 57
    22b0:	40 e1       	ldi	r20, 0x10	; 16
    22b2:	5d e3       	ldi	r21, 0x3D	; 61
    22b4:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    22b8:	60 93 79 05 	sts	0x0579, r22	; 0x800579 <mainAdcPullVolts>
    22bc:	70 93 7a 05 	sts	0x057A, r23	; 0x80057a <mainAdcPullVolts+0x1>
    22c0:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <mainAdcPullVolts+0x2>
    22c4:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <mainAdcPullVolts+0x3>
	mainAdcPhaseVolts	= ( acAdcCh[ADC_CH_PHASE]	/ ADC_STEPS_1V) + ADC_OFS_0ADC_V;
    22c8:	60 91 89 03 	lds	r22, 0x0389	; 0x800389 <acAdcCh+0x2>
    22cc:	70 91 8a 03 	lds	r23, 0x038A	; 0x80038a <acAdcCh+0x3>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 17 31 	call	0x622e	; 0x622e <__floatunsisf>
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	45 e5       	ldi	r20, 0x55	; 85
    22de:	53 e4       	ldi	r21, 0x43	; 67
    22e0:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    22e4:	29 e6       	ldi	r18, 0x69	; 105
    22e6:	39 e3       	ldi	r19, 0x39	; 57
    22e8:	40 e1       	ldi	r20, 0x10	; 16
    22ea:	5d e3       	ldi	r21, 0x3D	; 61
    22ec:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    22f0:	60 93 75 05 	sts	0x0575, r22	; 0x800575 <mainAdcPhaseVolts>
    22f4:	70 93 76 05 	sts	0x0576, r23	; 0x800576 <mainAdcPhaseVolts+0x1>
    22f8:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <mainAdcPhaseVolts+0x2>
    22fc:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <mainAdcPhaseVolts+0x3>
	mainAdcTemp			= ((acAdcCh[ADC_CH_TEMP]	- mainCoef_b01_temp_ofs_adc_25C_steps) * mainCoef_b01_temp_k_p1step_adc_K) + 25.0f;
    2300:	60 91 8b 03 	lds	r22, 0x038B	; 0x80038b <acAdcCh+0x4>
    2304:	70 91 8c 03 	lds	r23, 0x038C	; 0x80038c <acAdcCh+0x5>
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 17 31 	call	0x622e	; 0x622e <__floatunsisf>
    2310:	20 91 b6 05 	lds	r18, 0x05B6	; 0x8005b6 <mainCoef_b01_temp_ofs_adc_25C_steps>
    2314:	30 91 b7 05 	lds	r19, 0x05B7	; 0x8005b7 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    2318:	40 91 b8 05 	lds	r20, 0x05B8	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    231c:	50 91 b9 05 	lds	r21, 0x05B9	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>
    2320:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    2324:	20 91 b2 05 	lds	r18, 0x05B2	; 0x8005b2 <mainCoef_b01_temp_k_p1step_adc_K>
    2328:	30 91 b3 05 	lds	r19, 0x05B3	; 0x8005b3 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    232c:	40 91 b4 05 	lds	r20, 0x05B4	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    2330:	50 91 b5 05 	lds	r21, 0x05B5	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
    2334:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	48 ec       	ldi	r20, 0xC8	; 200
    233e:	51 e4       	ldi	r21, 0x41	; 65
    2340:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    2344:	60 93 71 05 	sts	0x0571, r22	; 0x800571 <mainAdcTemp>
    2348:	70 93 72 05 	sts	0x0572, r23	; 0x800572 <mainAdcTemp+0x1>
    234c:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <mainAdcTemp+0x2>
    2350:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <mainAdcTemp+0x3>

	if (main_bf.mainIsTimerTest) {
    2354:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2358:	82 ff       	sbrs	r24, 2
    235a:	b3 c2       	rjmp	.+1382   	; 0x28c2 <main_fw_giveAway+0xb22>
		/* print NMEA data */
		memory_fw_copyBuffer(true, mainPrepareBuffer, PM_FORMAT_GP00, sizeof(PM_FORMAT_GP00) + 1);
    235c:	21 e1       	ldi	r18, 0x11	; 17
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	47 ed       	ldi	r20, 0xD7	; 215
    2362:	57 e0       	ldi	r21, 0x07	; 7
    2364:	6d e0       	ldi	r22, 0x0D	; 13
    2366:	74 e0       	ldi	r23, 0x04	; 4
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, sizeof(PM_FORMAT_GP00) + 1);
    236e:	21 e1       	ldi	r18, 0x11	; 17
    2370:	4d e0       	ldi	r20, 0x0D	; 13
    2372:	54 e0       	ldi	r21, 0x04	; 4
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP01, sizeof(PM_FORMAT_GP01));
    237c:	28 e2       	ldi	r18, 0x28	; 40
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4f ea       	ldi	r20, 0xAF	; 175
    2382:	57 e0       	ldi	r21, 0x07	; 7
    2384:	6d e8       	ldi	r22, 0x8D	; 141
    2386:	73 e0       	ldi	r23, 0x03	; 3
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    238e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <main_nmeaTimeUtcMilsec+0x1>
    2392:	8f 93       	push	r24
    2394:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <main_nmeaTimeUtcMilsec>
    2398:	8f 93       	push	r24
    239a:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x3>
    239e:	8f 93       	push	r24
    23a0:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    23a4:	8f 93       	push	r24
    23a6:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    23aa:	8f 93       	push	r24
    23ac:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <main_nmeaTimeUtcInt>
    23b0:	8f 93       	push	r24
    23b2:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <main_nmeaDate+0x3>
    23b6:	8f 93       	push	r24
    23b8:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <main_nmeaDate+0x2>
    23bc:	8f 93       	push	r24
    23be:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <main_nmeaDate+0x1>
    23c2:	8f 93       	push	r24
    23c4:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <main_nmeaDate>
    23c8:	8f 93       	push	r24
    23ca:	1d e8       	ldi	r17, 0x8D	; 141
    23cc:	21 2e       	mov	r2, r17
    23ce:	13 e0       	ldi	r17, 0x03	; 3
    23d0:	31 2e       	mov	r3, r17
    23d2:	3f 92       	push	r3
    23d4:	2f 92       	push	r2
    23d6:	0d e0       	ldi	r16, 0x0D	; 13
    23d8:	14 e0       	ldi	r17, 0x04	; 4
    23da:	1f 93       	push	r17
    23dc:	0f 93       	push	r16
    23de:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				main_nmeaDate,
				main_nmeaTimeUtcInt,
				main_nmeaTimeUtcMilsec);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    23e2:	28 2f       	mov	r18, r24
    23e4:	a8 01       	movw	r20, r16
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP02, sizeof(PM_FORMAT_GP02));
    23ee:	25 e2       	ldi	r18, 0x25	; 37
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	4a e8       	ldi	r20, 0x8A	; 138
    23f4:	57 e0       	ldi	r21, 0x07	; 7
    23f6:	b1 01       	movw	r22, r2
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    23fe:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <main_nmeaPosFixIndicator+0x1>
    2402:	8f 93       	push	r24
    2404:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaPosFixIndicator>
    2408:	8f 93       	push	r24
    240a:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <main_nmeaMode2+0x1>
    240e:	8f 93       	push	r24
    2410:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaMode2>
    2414:	8f 93       	push	r24
    2416:	3f 92       	push	r3
    2418:	2f 92       	push	r2
    241a:	1f 93       	push	r17
    241c:	0f 93       	push	r16
    241e:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				main_nmeaMode2,
				main_nmeaPosFixIndicator);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2422:	28 2f       	mov	r18, r24
    2424:	a8 01       	movw	r20, r16
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP03, sizeof(PM_FORMAT_GP03));
    242e:	23 e5       	ldi	r18, 0x53	; 83
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	47 e3       	ldi	r20, 0x37	; 55
    2434:	57 e0       	ldi	r21, 0x07	; 7
    2436:	b1 01       	movw	r22, r2
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    243e:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <main_nmeaSatsEphemerisGlonass+0x1>
    2442:	8f 93       	push	r24
    2444:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <main_nmeaSatsEphemerisGlonass>
    2448:	8f 93       	push	r24
    244a:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <main_nmeaSatsEphemerisGpsGalileoQzss+0x1>
    244e:	8f 93       	push	r24
    2450:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGpsGalileoQzss>
    2454:	8f 93       	push	r24
    2456:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <main_nmeaSatsUsed+0x1>
    245a:	8f 93       	push	r24
    245c:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <main_nmeaSatsUsed>
    2460:	8f 93       	push	r24
    2462:	3f 92       	push	r3
    2464:	2f 92       	push	r2
    2466:	1f 93       	push	r17
    2468:	0f 93       	push	r16
    246a:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				main_nmeaSatsUsed,
				main_nmeaSatsEphemerisGpsGalileoQzss,
				main_nmeaSatsEphemerisGlonass);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	28 2f       	mov	r18, r24
    247a:	a8 01       	movw	r20, r16
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP04, sizeof(PM_FORMAT_GP04));
    2484:	28 e3       	ldi	r18, 0x38	; 56
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4f ef       	ldi	r20, 0xFF	; 255
    248a:	56 e0       	ldi	r21, 0x06	; 6
    248c:	b1 01       	movw	r22, r2
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2494:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <main_nmeaVdop>
    2498:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <main_nmeaVdop+0x1>
    249c:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <main_nmeaVdop+0x2>
    24a0:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <main_nmeaVdop+0x3>
    24a4:	8b 83       	std	Y+3, r24	; 0x03
    24a6:	9c 83       	std	Y+4, r25	; 0x04
    24a8:	ad 83       	std	Y+5, r26	; 0x05
    24aa:	be 83       	std	Y+6, r27	; 0x06
    24ac:	42 e0       	ldi	r20, 0x02	; 2
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	71 d8       	rcall	.-3870   	; 0x1596 <s_flt_frac>
    24b4:	8f 87       	std	Y+15, r24	; 0x0f
    24b6:	99 8b       	std	Y+17, r25	; 0x11
    24b8:	40 90 5f 05 	lds	r4, 0x055F	; 0x80055f <main_nmeaHdop>
    24bc:	50 90 60 05 	lds	r5, 0x0560	; 0x800560 <main_nmeaHdop+0x1>
    24c0:	60 90 61 05 	lds	r6, 0x0561	; 0x800561 <main_nmeaHdop+0x2>
    24c4:	70 90 62 05 	lds	r7, 0x0562	; 0x800562 <main_nmeaHdop+0x3>
    24c8:	42 e0       	ldi	r20, 0x02	; 2
    24ca:	c3 01       	movw	r24, r6
    24cc:	b2 01       	movw	r22, r4
    24ce:	63 d8       	rcall	.-3898   	; 0x1596 <s_flt_frac>
    24d0:	38 2f       	mov	r19, r24
    24d2:	29 2f       	mov	r18, r25
    24d4:	80 90 63 05 	lds	r8, 0x0563	; 0x800563 <main_nmeaPdop>
    24d8:	90 90 64 05 	lds	r9, 0x0564	; 0x800564 <main_nmeaPdop+0x1>
    24dc:	a0 90 65 05 	lds	r10, 0x0565	; 0x800565 <main_nmeaPdop+0x2>
    24e0:	b0 90 66 05 	lds	r11, 0x0566	; 0x800566 <main_nmeaPdop+0x3>
    24e4:	42 e0       	ldi	r20, 0x02	; 2
    24e6:	c5 01       	movw	r24, r10
    24e8:	b4 01       	movw	r22, r8
    24ea:	28 8f       	std	Y+24, r18	; 0x18
    24ec:	3f 8b       	std	Y+23, r19	; 0x17
    24ee:	53 d8       	rcall	.-3930   	; 0x1596 <s_flt_frac>
    24f0:	ac 01       	movw	r20, r24
    24f2:	99 89       	ldd	r25, Y+17	; 0x11
    24f4:	9f 93       	push	r25
    24f6:	af 85       	ldd	r26, Y+15	; 0x0f
    24f8:	af 93       	push	r26
    24fa:	6b 81       	ldd	r22, Y+3	; 0x03
    24fc:	7c 81       	ldd	r23, Y+4	; 0x04
    24fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2500:	9e 81       	ldd	r25, Y+6	; 0x06
    2502:	4e 8b       	std	Y+22, r20	; 0x16
    2504:	59 8f       	std	Y+25, r21	; 0x19
    2506:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    250a:	7f 93       	push	r23
    250c:	6f 93       	push	r22
    250e:	28 8d       	ldd	r18, Y+24	; 0x18
    2510:	2f 93       	push	r18
    2512:	3f 89       	ldd	r19, Y+23	; 0x17
    2514:	3f 93       	push	r19
    2516:	c3 01       	movw	r24, r6
    2518:	b2 01       	movw	r22, r4
    251a:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    251e:	7f 93       	push	r23
    2520:	6f 93       	push	r22
    2522:	59 8d       	ldd	r21, Y+25	; 0x19
    2524:	5f 93       	push	r21
    2526:	4e 89       	ldd	r20, Y+22	; 0x16
    2528:	4f 93       	push	r20
    252a:	c5 01       	movw	r24, r10
    252c:	b4 01       	movw	r22, r8
    252e:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    2532:	7f 93       	push	r23
    2534:	6f 93       	push	r22
    2536:	3f 92       	push	r3
    2538:	2f 92       	push	r2
    253a:	1f 93       	push	r17
    253c:	0f 93       	push	r16
    253e:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				(int) main_nmeaPdop, s_flt_frac(main_nmeaPdop, 2),
				(int) main_nmeaHdop, s_flt_frac(main_nmeaHdop, 2),
				(int) main_nmeaVdop, s_flt_frac(main_nmeaVdop, 2));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2542:	28 2f       	mov	r18, r24
    2544:	a8 01       	movw	r20, r16
    2546:	60 e0       	ldi	r22, 0x00	; 0
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
    254e:	23 e4       	ldi	r18, 0x43	; 67
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4c eb       	ldi	r20, 0xBC	; 188
    2554:	56 e0       	ldi	r21, 0x06	; 6
    2556:	b1 01       	movw	r22, r2
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    255e:	80 90 43 05 	lds	r8, 0x0543	; 0x800543 <main_nmeaAltitudeM>
    2562:	90 90 44 05 	lds	r9, 0x0544	; 0x800544 <main_nmeaAltitudeM+0x1>
    2566:	a0 90 45 05 	lds	r10, 0x0545	; 0x800545 <main_nmeaAltitudeM+0x2>
    256a:	b0 90 46 05 	lds	r11, 0x0546	; 0x800546 <main_nmeaAltitudeM+0x3>
    256e:	42 e0       	ldi	r20, 0x02	; 2
    2570:	c5 01       	movw	r24, r10
    2572:	b4 01       	movw	r22, r8
    2574:	10 d8       	rcall	.-4064   	; 0x1596 <s_flt_frac>
    2576:	38 2e       	mov	r3, r24
    2578:	29 2e       	mov	r2, r25
    257a:	c5 01       	movw	r24, r10
    257c:	b4 01       	movw	r22, r8
    257e:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    2582:	56 2e       	mov	r5, r22
    2584:	47 2e       	mov	r4, r23
    2586:	80 90 48 05 	lds	r8, 0x0548	; 0x800548 <main_nmeaPosLon>
    258a:	90 90 49 05 	lds	r9, 0x0549	; 0x800549 <main_nmeaPosLon+0x1>
    258e:	a0 90 4a 05 	lds	r10, 0x054A	; 0x80054a <main_nmeaPosLon+0x2>
    2592:	b0 90 4b 05 	lds	r11, 0x054B	; 0x80054b <main_nmeaPosLon+0x3>
    2596:	44 e0       	ldi	r20, 0x04	; 4
    2598:	c5 01       	movw	r24, r10
    259a:	b4 01       	movw	r22, r8
    259c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    25a0:	78 2e       	mov	r7, r24
    25a2:	69 2e       	mov	r6, r25
    25a4:	c5 01       	movw	r24, r10
    25a6:	b4 01       	movw	r22, r8
    25a8:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    25ac:	36 2f       	mov	r19, r22
    25ae:	57 2f       	mov	r21, r23
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
				(int) main_nmeaPosLat, s_flt_frac(main_nmeaPosLat, 4),
				(main_nmeaPosLonSign > 0 ?  main_nmeaPosLonSign : '-'),
    25b0:	00 91 47 05 	lds	r16, 0x0547	; 0x800547 <main_nmeaPosLonSign>
				(int) main_nmeaHdop, s_flt_frac(main_nmeaHdop, 2),
				(int) main_nmeaVdop, s_flt_frac(main_nmeaVdop, 2));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	00 23       	and	r16, r16
    25c0:	11 f0       	breq	.+4      	; 0x25c6 <main_fw_giveAway+0x826>
    25c2:	10 e0       	ldi	r17, 0x00	; 0
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <main_fw_giveAway+0x82a>
    25c6:	0d e2       	ldi	r16, 0x2D	; 45
    25c8:	10 e0       	ldi	r17, 0x00	; 0
    25ca:	80 90 4d 05 	lds	r8, 0x054D	; 0x80054d <main_nmeaPosLat>
    25ce:	90 90 4e 05 	lds	r9, 0x054E	; 0x80054e <main_nmeaPosLat+0x1>
    25d2:	a0 90 4f 05 	lds	r10, 0x054F	; 0x80054f <main_nmeaPosLat+0x2>
    25d6:	b0 90 50 05 	lds	r11, 0x0550	; 0x800550 <main_nmeaPosLat+0x3>
    25da:	44 e0       	ldi	r20, 0x04	; 4
    25dc:	c5 01       	movw	r24, r10
    25de:	b4 01       	movw	r22, r8
    25e0:	3f 8b       	std	Y+23, r19	; 0x17
    25e2:	59 8f       	std	Y+25, r21	; 0x19
    25e4:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    25e8:	28 2f       	mov	r18, r24
    25ea:	49 2f       	mov	r20, r25
    25ec:	c5 01       	movw	r24, r10
    25ee:	b4 01       	movw	r22, r8
    25f0:	28 8f       	std	Y+24, r18	; 0x18
    25f2:	4e 8b       	std	Y+22, r20	; 0x16
    25f4:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
    25f8:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <main_nmeaPosLatSign>
				(int) main_nmeaHdop, s_flt_frac(main_nmeaHdop, 2),
				(int) main_nmeaVdop, s_flt_frac(main_nmeaVdop, 2));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    25fc:	28 8d       	ldd	r18, Y+24	; 0x18
    25fe:	3f 89       	ldd	r19, Y+23	; 0x17
    2600:	4e 89       	ldd	r20, Y+22	; 0x16
    2602:	59 8d       	ldd	r21, Y+25	; 0x19
    2604:	88 23       	and	r24, r24
    2606:	11 f0       	breq	.+4      	; 0x260c <main_fw_giveAway+0x86c>
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <main_fw_giveAway+0x870>
    260c:	8d e2       	ldi	r24, 0x2D	; 45
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	2f 92       	push	r2
    2612:	3f 92       	push	r3
    2614:	4f 92       	push	r4
    2616:	5f 92       	push	r5
    2618:	6f 92       	push	r6
    261a:	7f 92       	push	r7
    261c:	5f 93       	push	r21
    261e:	3f 93       	push	r19
    2620:	1f 93       	push	r17
    2622:	0f 93       	push	r16
    2624:	4f 93       	push	r20
    2626:	2f 93       	push	r18
    2628:	7f 93       	push	r23
    262a:	6f 93       	push	r22
    262c:	9f 93       	push	r25
    262e:	8f 93       	push	r24
    2630:	bd e8       	ldi	r27, 0x8D	; 141
    2632:	ab 2e       	mov	r10, r27
    2634:	b3 e0       	ldi	r27, 0x03	; 3
    2636:	bb 2e       	mov	r11, r27
    2638:	bf 92       	push	r11
    263a:	af 92       	push	r10
    263c:	0d e0       	ldi	r16, 0x0D	; 13
    263e:	14 e0       	ldi	r17, 0x04	; 4
    2640:	1f 93       	push	r17
    2642:	0f 93       	push	r16
    2644:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
				(int) main_nmeaPosLat, s_flt_frac(main_nmeaPosLat, 4),
				(main_nmeaPosLonSign > 0 ?  main_nmeaPosLonSign : '-'),
				(int) main_nmeaPosLon, s_flt_frac(main_nmeaPosLon, 4),
				(int) main_nmeaAltitudeM, s_flt_frac(main_nmeaAltitudeM, 2));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2648:	28 2f       	mov	r18, r24
    264a:	a8 01       	movw	r20, r16
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		if (!localNoPpsCnt) {
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <localNoPpsCnt.2998>
    2662:	81 11       	cpse	r24, r1
    2664:	92 c0       	rjmp	.+292    	; 0x278a <main_fw_giveAway+0x9ea>
			/* print ADC values - only valid when a PPS has arrived */
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA01, sizeof(PM_FORMAT_TA01));
    2666:	2f e1       	ldi	r18, 0x1F	; 31
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4d e9       	ldi	r20, 0x9D	; 157
    266c:	56 e0       	ldi	r21, 0x06	; 6
    266e:	b5 01       	movw	r22, r10
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2676:	40 90 79 05 	lds	r4, 0x0579	; 0x800579 <mainAdcPullVolts>
    267a:	50 90 7a 05 	lds	r5, 0x057A	; 0x80057a <mainAdcPullVolts+0x1>
    267e:	60 90 7b 05 	lds	r6, 0x057B	; 0x80057b <mainAdcPullVolts+0x2>
    2682:	70 90 7c 05 	lds	r7, 0x057C	; 0x80057c <mainAdcPullVolts+0x3>
    2686:	43 e0       	ldi	r20, 0x03	; 3
    2688:	c3 01       	movw	r24, r6
    268a:	b2 01       	movw	r22, r4
    268c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    2690:	80 90 87 03 	lds	r8, 0x0387	; 0x800387 <acAdcCh>
    2694:	90 90 88 03 	lds	r9, 0x0388	; 0x800388 <acAdcCh+0x1>
    2698:	9f 93       	push	r25
    269a:	8f 93       	push	r24
    269c:	c3 01       	movw	r24, r6
    269e:	b2 01       	movw	r22, r4
    26a0:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    26a4:	7f 93       	push	r23
    26a6:	6f 93       	push	r22
    26a8:	9f 92       	push	r9
    26aa:	8f 92       	push	r8
    26ac:	bf 92       	push	r11
    26ae:	af 92       	push	r10
    26b0:	1f 93       	push	r17
    26b2:	0f 93       	push	r16
    26b4:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
					acAdcCh[ADC_CH_PWMPULL],
					(int) mainAdcPullVolts, s_flt_frac(mainAdcPullVolts, 3));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    26b8:	28 2f       	mov	r18, r24
    26ba:	a8 01       	movw	r20, r16
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA02, sizeof(PM_FORMAT_TA02));
    26c4:	2f e1       	ldi	r18, 0x1F	; 31
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	4e e7       	ldi	r20, 0x7E	; 126
    26ca:	56 e0       	ldi	r21, 0x06	; 6
    26cc:	b5 01       	movw	r22, r10
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    26d4:	40 90 75 05 	lds	r4, 0x0575	; 0x800575 <mainAdcPhaseVolts>
    26d8:	50 90 76 05 	lds	r5, 0x0576	; 0x800576 <mainAdcPhaseVolts+0x1>
    26dc:	60 90 77 05 	lds	r6, 0x0577	; 0x800577 <mainAdcPhaseVolts+0x2>
    26e0:	70 90 78 05 	lds	r7, 0x0578	; 0x800578 <mainAdcPhaseVolts+0x3>
    26e4:	43 e0       	ldi	r20, 0x03	; 3
    26e6:	c3 01       	movw	r24, r6
    26e8:	b2 01       	movw	r22, r4
    26ea:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    26ee:	80 90 89 03 	lds	r8, 0x0389	; 0x800389 <acAdcCh+0x2>
    26f2:	90 90 8a 03 	lds	r9, 0x038A	; 0x80038a <acAdcCh+0x3>
    26f6:	9f 93       	push	r25
    26f8:	8f 93       	push	r24
    26fa:	c3 01       	movw	r24, r6
    26fc:	b2 01       	movw	r22, r4
    26fe:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    2702:	7f 93       	push	r23
    2704:	6f 93       	push	r22
    2706:	9f 92       	push	r9
    2708:	8f 92       	push	r8
    270a:	bf 92       	push	r11
    270c:	af 92       	push	r10
    270e:	1f 93       	push	r17
    2710:	0f 93       	push	r16
    2712:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
					acAdcCh[ADC_CH_PHASE],
					(int) mainAdcPhaseVolts, s_flt_frac(mainAdcPhaseVolts, 3));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2716:	28 2f       	mov	r18, r24
    2718:	a8 01       	movw	r20, r16
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA03, sizeof(PM_FORMAT_TA03));
    2722:	2e e1       	ldi	r18, 0x1E	; 30
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e6       	ldi	r20, 0x60	; 96
    2728:	56 e0       	ldi	r21, 0x06	; 6
    272a:	b5 01       	movw	r22, r10
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2732:	40 90 71 05 	lds	r4, 0x0571	; 0x800571 <mainAdcTemp>
    2736:	50 90 72 05 	lds	r5, 0x0572	; 0x800572 <mainAdcTemp+0x1>
    273a:	60 90 73 05 	lds	r6, 0x0573	; 0x800573 <mainAdcTemp+0x2>
    273e:	70 90 74 05 	lds	r7, 0x0574	; 0x800574 <mainAdcTemp+0x3>
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	c3 01       	movw	r24, r6
    2746:	b2 01       	movw	r22, r4
    2748:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    274c:	80 90 8b 03 	lds	r8, 0x038B	; 0x80038b <acAdcCh+0x4>
    2750:	90 90 8c 03 	lds	r9, 0x038C	; 0x80038c <acAdcCh+0x5>
    2754:	9f 93       	push	r25
    2756:	8f 93       	push	r24
    2758:	c3 01       	movw	r24, r6
    275a:	b2 01       	movw	r22, r4
    275c:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    2760:	7f 93       	push	r23
    2762:	6f 93       	push	r22
    2764:	9f 92       	push	r9
    2766:	8f 92       	push	r8
    2768:	bf 92       	push	r11
    276a:	af 92       	push	r10
    276c:	1f 93       	push	r17
    276e:	0f 93       	push	r16
    2770:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
					acAdcCh[ADC_CH_TEMP],
					(int) mainAdcTemp, s_flt_frac(mainAdcTemp, 1));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2774:	28 2f       	mov	r18, r24
    2776:	a8 01       	movw	r20, r16
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA11, sizeof(PM_FORMAT_TA11));
    278a:	28 e3       	ldi	r18, 0x38	; 56
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	48 e2       	ldi	r20, 0x28	; 40
    2790:	56 e0       	ldi	r21, 0x06	; 6
    2792:	6d e8       	ldi	r22, 0x8D	; 141
    2794:	73 e0       	ldi	r23, 0x03	; 3
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		uint8_t localICR1H = ICR1H;
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock

		SREG = sreg;

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
    279c:	3b 85       	ldd	r19, Y+11	; 0x0b
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	af 81       	ldd	r26, Y+7	; 0x07
    27a2:	9a 2b       	or	r25, r26
					(int) mainAdcTemp, s_flt_frac(mainAdcTemp, 1));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA11, sizeof(PM_FORMAT_TA11));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    27a4:	9f 93       	push	r25
    27a6:	3f 93       	push	r19
    27a8:	ff 92       	push	r15
    27aa:	ef 92       	push	r14
    27ac:	df 92       	push	r13
    27ae:	cf 92       	push	r12
    27b0:	ad e8       	ldi	r26, 0x8D	; 141
    27b2:	ea 2e       	mov	r14, r26
    27b4:	a3 e0       	ldi	r26, 0x03	; 3
    27b6:	fa 2e       	mov	r15, r26
    27b8:	ff 92       	push	r15
    27ba:	ef 92       	push	r14
    27bc:	0d e0       	ldi	r16, 0x0D	; 13
    27be:	14 e0       	ldi	r17, 0x04	; 4
    27c0:	1f 93       	push	r17
    27c2:	0f 93       	push	r16
    27c4:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				localFastCtr1ms,
				localFastTCNT1);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    27c8:	28 2f       	mov	r18, r24
    27ca:	a8 01       	movw	r20, r16
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA12, sizeof(PM_FORMAT_TA12));
    27d4:	24 e7       	ldi	r18, 0x74	; 116
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	44 eb       	ldi	r20, 0xB4	; 180
    27da:	55 e0       	ldi	r21, 0x05	; 5
    27dc:	b7 01       	movw	r22, r14
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    27e4:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <ppsStampICR1_last+0x1>
    27e8:	8f 93       	push	r24
    27ea:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <ppsStampICR1_last>
    27ee:	8f 93       	push	r24
    27f0:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <ppsStampCtr1ms_last+0x3>
    27f4:	8f 93       	push	r24
    27f6:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <ppsStampCtr1ms_last+0x2>
    27fa:	8f 93       	push	r24
    27fc:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <ppsStampCtr1ms_last+0x1>
    2800:	8f 93       	push	r24
    2802:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <ppsStampCtr1ms_last>
    2806:	8f 93       	push	r24
    2808:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <ppsStampICR1+0x1>
    280c:	8f 93       	push	r24
    280e:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <ppsStampICR1>
    2812:	8f 93       	push	r24
    2814:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <ppsStampCtr1ms+0x3>
    2818:	8f 93       	push	r24
    281a:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <ppsStampCtr1ms+0x2>
    281e:	8f 93       	push	r24
    2820:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <ppsStampCtr1ms+0x1>
    2824:	8f 93       	push	r24
    2826:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <ppsStampCtr1ms>
    282a:	8f 93       	push	r24
    282c:	ff 92       	push	r15
    282e:	ef 92       	push	r14
    2830:	1f 93       	push	r17
    2832:	0f 93       	push	r16
    2834:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				ppsStampCtr1ms,
				ppsStampICR1,
				ppsStampCtr1ms_last,
				ppsStampICR1_last);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2838:	28 2f       	mov	r18, r24
    283a:	a8 01       	movw	r20, r16
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA13, sizeof(PM_FORMAT_TA13));
    2844:	24 e2       	ldi	r18, 0x24	; 36
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e9       	ldi	r20, 0x90	; 144
    284a:	55 e0       	ldi	r21, 0x05	; 5
    284c:	b7 01       	movw	r22, r14
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2854:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <fastPwmSubLoopVal>
    2858:	1f 92       	push	r1
    285a:	8f 93       	push	r24
    285c:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <fastPwmLoopVal>
    2860:	1f 92       	push	r1
    2862:	8f 93       	push	r24
    2864:	ff 92       	push	r15
    2866:	ef 92       	push	r14
    2868:	1f 93       	push	r17
    286a:	0f 93       	push	r16
    286c:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				fastPwmLoopVal,
				fastPwmSubLoopVal);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	28 2f       	mov	r18, r24
    287c:	a8 01       	movw	r20, r16
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA14, sizeof(PM_FORMAT_TA14));
    2886:	20 e2       	ldi	r18, 0x20	; 32
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e7       	ldi	r20, 0x70	; 112
    288c:	55 e0       	ldi	r21, 0x05	; 5
    288e:	b7 01       	movw	r22, r14
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2896:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    289a:	1f 92       	push	r1
    289c:	8f 93       	push	r24
    289e:	ff 92       	push	r15
    28a0:	ef 92       	push	r14
    28a2:	1f 93       	push	r17
    28a4:	0f 93       	push	r16
    28a6:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				mainRefClkState);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    28aa:	28 2f       	mov	r18, r24
    28ac:	a8 01       	movw	r20, r16
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
	}

	if (!localNoPpsCnt) {
    28c2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <localNoPpsCnt.2998>
    28c6:	81 11       	cpse	r24, r1
    28c8:	f1 c5       	rjmp	.+3042   	; 0x34ac <main_fw_giveAway+0x170c>
		/* PPS - 1 Hz Ref.-Clk. - State Machine */

		/* central calculations */
		static float localMeanClockDiffSum = 0.0f;
		float qrgDev_Hz;
		int32_t local20MHzClockDiff =   (20000L * (((int32_t) ppsStampCtr1ms) - ((int32_t) ppsStampCtr1ms_last)))
    28ca:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <ppsStampCtr1ms>
    28ce:	50 91 8a 05 	lds	r21, 0x058A	; 0x80058a <ppsStampCtr1ms+0x1>
    28d2:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <ppsStampCtr1ms+0x2>
    28d6:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <ppsStampCtr1ms+0x3>
    28da:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <ppsStampCtr1ms_last>
    28de:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <ppsStampCtr1ms_last+0x1>
    28e2:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <ppsStampCtr1ms_last+0x2>
    28e6:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <ppsStampCtr1ms_last+0x3>
    28ea:	9a 01       	movw	r18, r20
    28ec:	ab 01       	movw	r20, r22
    28ee:	28 1b       	sub	r18, r24
    28f0:	39 0b       	sbc	r19, r25
    28f2:	4a 0b       	sbc	r20, r26
    28f4:	5b 0b       	sbc	r21, r27
    28f6:	a0 e2       	ldi	r26, 0x20	; 32
    28f8:	be e4       	ldi	r27, 0x4E	; 78
    28fa:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <__muluhisi3>
							    	  +           (((int32_t) ppsStampICR1)   - ((int32_t) ppsStampICR1_last))
    28fe:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <ppsStampICR1>
    2902:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <ppsStampICR1+0x1>
    2906:	49 01       	movw	r8, r18
    2908:	a1 2c       	mov	r10, r1
    290a:	b1 2c       	mov	r11, r1
    290c:	20 91 81 05 	lds	r18, 0x0581	; 0x800581 <ppsStampICR1_last>
    2910:	30 91 82 05 	lds	r19, 0x0582	; 0x800582 <ppsStampICR1_last+0x1>
    2914:	82 1a       	sub	r8, r18
    2916:	93 0a       	sbc	r9, r19
    2918:	a1 08       	sbc	r10, r1
    291a:	b1 08       	sbc	r11, r1
    291c:	86 0e       	add	r8, r22
    291e:	97 1e       	adc	r9, r23
    2920:	a8 1e       	adc	r10, r24
    2922:	b9 1e       	adc	r11, r25
		/* PPS - 1 Hz Ref.-Clk. - State Machine */

		/* central calculations */
		static float localMeanClockDiffSum = 0.0f;
		float qrgDev_Hz;
		int32_t local20MHzClockDiff =   (20000L * (((int32_t) ppsStampCtr1ms) - ((int32_t) ppsStampCtr1ms_last)))
    2924:	d5 01       	movw	r26, r10
    2926:	c4 01       	movw	r24, r8
    2928:	9d 52       	subi	r25, 0x2D	; 45
    292a:	a1 43       	sbci	r26, 0x31	; 49
    292c:	b1 40       	sbci	r27, 0x01	; 1
    292e:	8b 83       	std	Y+3, r24	; 0x03
    2930:	9c 83       	std	Y+4, r25	; 0x04
    2932:	ad 83       	std	Y+5, r26	; 0x05
    2934:	be 83       	std	Y+6, r27	; 0x06
							    	  +           (((int32_t) ppsStampICR1)   - ((int32_t) ppsStampICR1_last))
							    	  -  20000000L;

		float localMeanFloatClockDiff = localMeanClockDiffSum / MEAN_QRG_CLOCK_STAGES_F;
    2936:	40 90 23 01 	lds	r4, 0x0123	; 0x800123 <localMeanClockDiffSum.3009>
    293a:	50 90 24 01 	lds	r5, 0x0124	; 0x800124 <localMeanClockDiffSum.3009+0x1>
    293e:	60 90 25 01 	lds	r6, 0x0125	; 0x800125 <localMeanClockDiffSum.3009+0x2>
    2942:	70 90 26 01 	lds	r7, 0x0126	; 0x800126 <localMeanClockDiffSum.3009+0x3>
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 ea       	ldi	r20, 0xA0	; 160
    294c:	50 e4       	ldi	r21, 0x40	; 64
    294e:	c3 01       	movw	r24, r6
    2950:	b2 01       	movw	r22, r4
    2952:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    2956:	6b 01       	movw	r12, r22
    2958:	7c 01       	movw	r14, r24
		float localPpm = 0.0f;
		if ((local20MHzClockDiff < -CLOCK_DIFF_OUT) || (CLOCK_DIFF_OUT < local20MHzClockDiff)) {
    295a:	9c e9       	ldi	r25, 0x9C	; 156
    295c:	89 1a       	sub	r8, r25
    295e:	9c e2       	ldi	r25, 0x2C	; 44
    2960:	99 0a       	sbc	r9, r25
    2962:	91 e3       	ldi	r25, 0x31	; 49
    2964:	a9 0a       	sbc	r10, r25
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	b9 0a       	sbc	r11, r25
    296a:	a9 ec       	ldi	r26, 0xC9	; 201
    296c:	8a 16       	cp	r8, r26
    296e:	91 04       	cpc	r9, r1
    2970:	a1 04       	cpc	r10, r1
    2972:	b1 04       	cpc	r11, r1
    2974:	d8 f0       	brcs	.+54     	; 0x29ac <main_fw_giveAway+0xc0c>
			/* bad value - ignore */
			local20MHzClockDiff = 0;
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	c7 01       	movw	r24, r14
    2980:	b6 01       	movw	r22, r12
    2982:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    2986:	2b 01       	movw	r4, r22
    2988:	3c 01       	movw	r6, r24
			localPpm = (localMeanFloatClockDiff / 20.0f);
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 ea       	ldi	r20, 0xA0	; 160
    2990:	51 e4       	ldi	r21, 0x41	; 65
    2992:	c7 01       	movw	r24, r14
    2994:	b6 01       	movw	r22, r12
    2996:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    299a:	6b 87       	std	Y+11, r22	; 0x0b
    299c:	7c 87       	std	Y+12, r23	; 0x0c
    299e:	8d 87       	std	Y+13, r24	; 0x0d
    29a0:	9e 87       	std	Y+14, r25	; 0x0e

		float localMeanFloatClockDiff = localMeanClockDiffSum / MEAN_QRG_CLOCK_STAGES_F;
		float localPpm = 0.0f;
		if ((local20MHzClockDiff < -CLOCK_DIFF_OUT) || (CLOCK_DIFF_OUT < local20MHzClockDiff)) {
			/* bad value - ignore */
			local20MHzClockDiff = 0;
    29a2:	1b 82       	std	Y+3, r1	; 0x03
    29a4:	1c 82       	std	Y+4, r1	; 0x04
    29a6:	1d 82       	std	Y+5, r1	; 0x05
    29a8:	1e 82       	std	Y+6, r1	; 0x06
    29aa:	58 c0       	rjmp	.+176    	; 0x2a5c <main_fw_giveAway+0xcbc>
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
			localPpm = (localMeanFloatClockDiff / 20.0f);

		} else if ((-CLOCK_DIFF_COARSE_FINE < local20MHzClockDiff) && (local20MHzClockDiff < CLOCK_DIFF_COARSE_FINE)) {
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	9c 81       	ldd	r25, Y+4	; 0x04
    29b0:	ad 81       	ldd	r26, Y+5	; 0x05
    29b2:	be 81       	ldd	r27, Y+6	; 0x06
    29b4:	43 96       	adiw	r24, 0x13	; 19
    29b6:	a1 1d       	adc	r26, r1
    29b8:	b1 1d       	adc	r27, r1
    29ba:	87 97       	sbiw	r24, 0x27	; 39
    29bc:	a1 05       	cpc	r26, r1
    29be:	b1 05       	cpc	r27, r1
    29c0:	48 f5       	brcc	.+82     	; 0x2a14 <main_fw_giveAway+0xc74>
			/* fine mode */
			localMeanClockDiffSum += (((float) local20MHzClockDiff) - localMeanFloatClockDiff);
    29c2:	6b 81       	ldd	r22, Y+3	; 0x03
    29c4:	7c 81       	ldd	r23, Y+4	; 0x04
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    29ce:	a7 01       	movw	r20, r14
    29d0:	96 01       	movw	r18, r12
    29d2:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    29d6:	9b 01       	movw	r18, r22
    29d8:	ac 01       	movw	r20, r24
    29da:	c3 01       	movw	r24, r6
    29dc:	b2 01       	movw	r22, r4
    29de:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    29e2:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <localMeanClockDiffSum.3009>
    29e6:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <localMeanClockDiffSum.3009+0x1>
    29ea:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <localMeanClockDiffSum.3009+0x2>
    29ee:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <localMeanClockDiffSum.3009+0x3>
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	5f e3       	ldi	r21, 0x3F	; 63
    29fa:	c7 01       	movw	r24, r14
    29fc:	b6 01       	movw	r22, r12
    29fe:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    2a02:	2b 01       	movw	r4, r22
    2a04:	3c 01       	movw	r6, r24
			localPpm = (localMeanFloatClockDiff / 20.0f);
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 ea       	ldi	r20, 0xA0	; 160
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	c7 01       	movw	r24, r14
    2a10:	b6 01       	movw	r22, r12
    2a12:	1e c0       	rjmp	.+60     	; 0x2a50 <main_fw_giveAway+0xcb0>

		} else {
			/* re-init the mean value sum when being in coarse mode */
			localMeanClockDiffSum = 0.0f;
    2a14:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <localMeanClockDiffSum.3009>
    2a18:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <localMeanClockDiffSum.3009+0x1>
    2a1c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <localMeanClockDiffSum.3009+0x2>
    2a20:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <localMeanClockDiffSum.3009+0x3>
			qrgDev_Hz = (local20MHzClockDiff / 2.0f);
    2a24:	6b 81       	ldd	r22, Y+3	; 0x03
    2a26:	7c 81       	ldd	r23, Y+4	; 0x04
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2c:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    2a30:	4b 01       	movw	r8, r22
    2a32:	5c 01       	movw	r10, r24
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	5f e3       	ldi	r21, 0x3F	; 63
    2a3c:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    2a40:	2b 01       	movw	r4, r22
    2a42:	3c 01       	movw	r6, r24
			localPpm = (local20MHzClockDiff / 20.0f);
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 ea       	ldi	r20, 0xA0	; 160
    2a4a:	51 e4       	ldi	r21, 0x41	; 65
    2a4c:	c5 01       	movw	r24, r10
    2a4e:	b4 01       	movw	r22, r8
    2a50:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    2a54:	6b 87       	std	Y+11, r22	; 0x0b
    2a56:	7c 87       	std	Y+12, r23	; 0x0c
    2a58:	8d 87       	std	Y+13, r24	; 0x0d
    2a5a:	9e 87       	std	Y+14, r25	; 0x0e
		}

		if (main_bf.mainIsTimerTest && (!main_bf.mainIsAFC)) {
    2a5c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2a60:	82 ff       	sbrs	r24, 2
    2a62:	c3 c0       	rjmp	.+390    	; 0x2bea <main_fw_giveAway+0xe4a>
    2a64:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2a68:	80 fd       	sbrc	r24, 0
    2a6a:	bf c0       	rjmp	.+382    	; 0x2bea <main_fw_giveAway+0xe4a>
			/* monitoring frequency even when AFC is switched off */
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA01, sizeof(PM_FORMAT_IA01));
    2a6c:	2a e3       	ldi	r18, 0x3A	; 58
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e6       	ldi	r20, 0x60	; 96
    2a72:	54 e0       	ldi	r21, 0x04	; 4
    2a74:	6d e8       	ldi	r22, 0x8D	; 141
    2a76:	73 e0       	ldi	r23, 0x03	; 3
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
			int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2a7e:	be 81       	ldd	r27, Y+6	; 0x06
    2a80:	bf 93       	push	r27
    2a82:	2d 81       	ldd	r18, Y+5	; 0x05
    2a84:	2f 93       	push	r18
    2a86:	3c 81       	ldd	r19, Y+4	; 0x04
    2a88:	3f 93       	push	r19
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	8f 93       	push	r24
    2a8e:	8d e8       	ldi	r24, 0x8D	; 141
    2a90:	93 e0       	ldi	r25, 0x03	; 3
    2a92:	9f 93       	push	r25
    2a94:	8f 93       	push	r24
    2a96:	8d e0       	ldi	r24, 0x0D	; 13
    2a98:	94 e0       	ldi	r25, 0x04	; 4
    2a9a:	9f 93       	push	r25
    2a9c:	8f 93       	push	r24
    2a9e:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	4d e0       	ldi	r20, 0x0D	; 13
    2aa6:	54 e0       	ldi	r21, 0x04	; 4
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

			float l_mainPpm = mainPpm + 2.5f;
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e2       	ldi	r20, 0x20	; 32
    2ab6:	50 e4       	ldi	r21, 0x40	; 64
    2ab8:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <mainPpm>
    2abc:	70 91 7e 05 	lds	r23, 0x057E	; 0x80057e <mainPpm+0x1>
    2ac0:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <mainPpm+0x2>
    2ac4:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <mainPpm+0x3>
    2ac8:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    2acc:	4b 01       	movw	r8, r22
    2ace:	5c 01       	movw	r10, r24
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
    2ad0:	25 e7       	ldi	r18, 0x75	; 117
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	4b ee       	ldi	r20, 0xEB	; 235
    2ad6:	53 e0       	ldi	r21, 0x03	; 3
    2ad8:	6d e8       	ldi	r22, 0x8D	; 141
    2ada:	73 e0       	ldi	r23, 0x03	; 3
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2ae2:	46 e0       	ldi	r20, 0x06	; 6
    2ae4:	c5 01       	movw	r24, r10
    2ae6:	b4 01       	movw	r22, r8
    2ae8:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    2aec:	8f 87       	std	Y+15, r24	; 0x0f
    2aee:	99 8b       	std	Y+17, r25	; 0x11
    2af0:	c5 01       	movw	r24, r10
    2af2:	b4 01       	movw	r22, r8
    2af4:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    2af8:	6a 8b       	std	Y+18, r22	; 0x12
    2afa:	7b 8b       	std	Y+19, r23	; 0x13
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	a9 01       	movw	r20, r18
    2b0c:	c5 01       	movw	r24, r10
    2b0e:	b4 01       	movw	r22, r8
    2b10:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    2b14:	87 ff       	sbrs	r24, 7
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <main_fw_giveAway+0xd7c>
    2b18:	8d e2       	ldi	r24, 0x2D	; 45
    2b1a:	01 c0       	rjmp	.+2      	; 0x2b1e <main_fw_giveAway+0xd7e>
    2b1c:	8b e2       	ldi	r24, 0x2B	; 43
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			float l_mainPpm = mainPpm + 2.5f;
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2b1e:	28 2f       	mov	r18, r24
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	38 87       	std	Y+8, r19	; 0x08
    2b24:	2f 83       	std	Y+7, r18	; 0x07
    2b26:	43 e0       	ldi	r20, 0x03	; 3
    2b28:	c3 01       	movw	r24, r6
    2b2a:	b2 01       	movw	r22, r4
    2b2c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    2b30:	1c 01       	movw	r2, r24
    2b32:	c3 01       	movw	r24, r6
    2b34:	b2 01       	movw	r22, r4
    2b36:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    2b3a:	6c 8b       	std	Y+20, r22	; 0x14
    2b3c:	7d 8b       	std	Y+21, r23	; 0x15
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	a9 01       	movw	r20, r18
    2b44:	c3 01       	movw	r24, r6
    2b46:	b2 01       	movw	r22, r4
    2b48:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    2b4c:	87 ff       	sbrs	r24, 7
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <main_fw_giveAway+0xdb4>
    2b50:	0d e2       	ldi	r16, 0x2D	; 45
    2b52:	01 c0       	rjmp	.+2      	; 0x2b56 <main_fw_giveAway+0xdb6>
    2b54:	0b e2       	ldi	r16, 0x2B	; 43
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			float l_mainPpm = mainPpm + 2.5f;
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2b56:	10 e0       	ldi	r17, 0x00	; 0
    2b58:	43 e0       	ldi	r20, 0x03	; 3
    2b5a:	c7 01       	movw	r24, r14
    2b5c:	b6 01       	movw	r22, r12
    2b5e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    2b62:	98 2e       	mov	r9, r24
    2b64:	89 2e       	mov	r8, r25
    2b66:	c7 01       	movw	r24, r14
    2b68:	b6 01       	movw	r22, r12
    2b6a:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    2b6e:	b6 2e       	mov	r11, r22
    2b70:	a7 2e       	mov	r10, r23
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	a9 01       	movw	r20, r18
    2b78:	c7 01       	movw	r24, r14
    2b7a:	b6 01       	movw	r22, r12
    2b7c:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    2b80:	87 ff       	sbrs	r24, 7
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <main_fw_giveAway+0xde8>
    2b84:	8d e2       	ldi	r24, 0x2D	; 45
    2b86:	01 c0       	rjmp	.+2      	; 0x2b8a <main_fw_giveAway+0xdea>
    2b88:	8b e2       	ldi	r24, 0x2B	; 43
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			float l_mainPpm = mainPpm + 2.5f;
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2b8a:	39 89       	ldd	r19, Y+17	; 0x11
    2b8c:	3f 93       	push	r19
    2b8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b90:	9f 93       	push	r25
    2b92:	ab 89       	ldd	r26, Y+19	; 0x13
    2b94:	af 93       	push	r26
    2b96:	ba 89       	ldd	r27, Y+18	; 0x12
    2b98:	bf 93       	push	r27
    2b9a:	28 85       	ldd	r18, Y+8	; 0x08
    2b9c:	2f 93       	push	r18
    2b9e:	3f 81       	ldd	r19, Y+7	; 0x07
    2ba0:	3f 93       	push	r19
    2ba2:	3f 92       	push	r3
    2ba4:	2f 92       	push	r2
    2ba6:	9d 89       	ldd	r25, Y+21	; 0x15
    2ba8:	9f 93       	push	r25
    2baa:	ac 89       	ldd	r26, Y+20	; 0x14
    2bac:	af 93       	push	r26
    2bae:	1f 93       	push	r17
    2bb0:	0f 93       	push	r16
    2bb2:	8f 92       	push	r8
    2bb4:	9f 92       	push	r9
    2bb6:	af 92       	push	r10
    2bb8:	bf 92       	push	r11
    2bba:	1f 92       	push	r1
    2bbc:	8f 93       	push	r24
    2bbe:	8d e8       	ldi	r24, 0x8D	; 141
    2bc0:	93 e0       	ldi	r25, 0x03	; 3
    2bc2:	9f 93       	push	r25
    2bc4:	8f 93       	push	r24
    2bc6:	8d e0       	ldi	r24, 0x0D	; 13
    2bc8:	94 e0       	ldi	r25, 0x04	; 4
    2bca:	9f 93       	push	r25
    2bcc:	8f 93       	push	r24
    2bce:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
					s_flt_sign(localMeanFloatClockDiff), (int) localMeanFloatClockDiff, s_flt_frac(localMeanFloatClockDiff, 3),
					s_flt_sign(qrgDev_Hz), (int) qrgDev_Hz, s_flt_frac(qrgDev_Hz, 3),
					s_flt_sign(l_mainPpm), (int) l_mainPpm, s_flt_frac(l_mainPpm, 6));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	4d e0       	ldi	r20, 0x0D	; 13
    2bd6:	54 e0       	ldi	r21, 0x04	; 4
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
	const  uint8_t holdOffTimeStart = 20;
	static uint8_t holdOffTime = 0;

	uint8_t localIsOffset = false;

	if ((mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) && main_bf.mainIsAPC) {
    2bea:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2bee:	84 30       	cpi	r24, 0x04	; 4
    2bf0:	80 f4       	brcc	.+32     	; 0x2c12 <main_fw_giveAway+0xe72>
    2bf2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2bf6:	81 ff       	sbrs	r24, 1
    2bf8:	0c c0       	rjmp	.+24     	; 0x2c12 <main_fw_giveAway+0xe72>
		/* Help APC to find its phase - when found, stop offset */
		meanFloatClockDiff += 0.1f;							// 0.1 Hz @ 20 MHz below center frequency to let the phase wander and
    2bfa:	2d ec       	ldi	r18, 0xCD	; 205
    2bfc:	3c ec       	ldi	r19, 0xCC	; 204
    2bfe:	4c ec       	ldi	r20, 0xCC	; 204
    2c00:	5d e3       	ldi	r21, 0x3D	; 61
    2c02:	c7 01       	movw	r24, r14
    2c04:	b6 01       	movw	r22, r12
    2c06:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    2c0a:	6b 01       	movw	r12, r22
    2c0c:	7c 01       	movw	r14, r24
															// the phase locker find its position to lock in
		localIsOffset = true;
    2c0e:	11 e0       	ldi	r17, 0x01	; 1
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <main_fw_giveAway+0xe74>
	/* frequency shift calculation */

	const  uint8_t holdOffTimeStart = 20;
	static uint8_t holdOffTime = 0;

	uint8_t localIsOffset = false;
    2c12:	10 e0       	ldi	r17, 0x00	; 0
		meanFloatClockDiff += 0.1f;							// 0.1 Hz @ 20 MHz below center frequency to let the phase wander and
															// the phase locker find its position to lock in
		localIsOffset = true;
	}

	if ((-1000.0f < meanFloatClockDiff) &&
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	4a e7       	ldi	r20, 0x7A	; 122
    2c1a:	54 ec       	ldi	r21, 0xC4	; 196
    2c1c:	c7 01       	movw	r24, r14
    2c1e:	b6 01       	movw	r22, r12
    2c20:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    2c24:	18 16       	cp	r1, r24
    2c26:	0c f0       	brlt	.+2      	; 0x2c2a <main_fw_giveAway+0xe8a>
    2c28:	18 c2       	rjmp	.+1072   	; 0x305a <main_fw_giveAway+0x12ba>
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	4a e7       	ldi	r20, 0x7A	; 122
    2c30:	54 e4       	ldi	r21, 0x44	; 68
    2c32:	c7 01       	movw	r24, r14
    2c34:	b6 01       	movw	r22, r12
    2c36:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    2c3a:	87 ff       	sbrs	r24, 7
    2c3c:	0e c2       	rjmp	.+1052   	; 0x305a <main_fw_giveAway+0x12ba>
		( 1000.0f > meanFloatClockDiff)) {
		/* keep measuring window between +/-50ppm */
		ppm -=  (localIsOffset ?  0.005f : 0.0f);			// correct the clock offset
    2c3e:	11 11       	cpse	r17, r1
    2c40:	04 c0       	rjmp	.+8      	; 0x2c4a <main_fw_giveAway+0xeaa>
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	a9 01       	movw	r20, r18
    2c48:	04 c0       	rjmp	.+8      	; 0x2c52 <main_fw_giveAway+0xeb2>
    2c4a:	2a e0       	ldi	r18, 0x0A	; 10
    2c4c:	37 ed       	ldi	r19, 0xD7	; 215
    2c4e:	43 ea       	ldi	r20, 0xA3	; 163
    2c50:	5b e3       	ldi	r21, 0x3B	; 59
    2c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5a:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    2c5e:	4b 01       	movw	r8, r22
    2c60:	5c 01       	movw	r10, r24

		float pwmCorSteps;
		if ((-CLOCK_DIFF_FAST_FRAME <= int20MHzClockDiff) && (int20MHzClockDiff <= CLOCK_DIFF_FAST_FRAME)) {
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	ad 81       	ldd	r26, Y+5	; 0x05
    2c68:	be 81       	ldd	r27, Y+6	; 0x06
    2c6a:	03 96       	adiw	r24, 0x03	; 3
    2c6c:	a1 1d       	adc	r26, r1
    2c6e:	b1 1d       	adc	r27, r1
    2c70:	07 97       	sbiw	r24, 0x07	; 7
    2c72:	a1 05       	cpc	r26, r1
    2c74:	b1 05       	cpc	r27, r1
    2c76:	f0 f4       	brcc	.+60     	; 0x2cb4 <main_fw_giveAway+0xf14>
			/* fine pitching */
			pwmCorSteps = ((-meanFloatClockDiff / 20.0f) / mainCoef_b02_qrg_k_pPwmStep_25C_ppm) / PWM_COR_STEPS_FINE_DIV_F;
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 ea       	ldi	r20, 0xA0	; 160
    2c7e:	51 e4       	ldi	r21, 0x41	; 65
    2c80:	c7 01       	movw	r24, r14
    2c82:	b6 01       	movw	r22, r12
    2c84:	90 58       	subi	r25, 0x80	; 128
    2c86:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    2c8a:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    2c8e:	30 91 a7 05 	lds	r19, 0x05A7	; 0x8005a7 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    2c92:	40 91 a8 05 	lds	r20, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    2c96:	50 91 a9 05 	lds	r21, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    2c9a:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e2       	ldi	r20, 0x20	; 32
    2ca4:	51 e4       	ldi	r21, 0x41	; 65
    2ca6:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    2caa:	6f 83       	std	Y+7, r22	; 0x07
    2cac:	78 87       	std	Y+8, r23	; 0x08
    2cae:	89 87       	std	Y+9, r24	; 0x09
    2cb0:	9a 87       	std	Y+10, r25	; 0x0a
    2cb2:	29 c0       	rjmp	.+82     	; 0x2d06 <main_fw_giveAway+0xf66>

		} else {
			/* coarse pitching */
			pwmCorSteps = ((((float) -int20MHzClockDiff) / 20.0f) / mainCoef_b02_qrg_k_pPwmStep_25C_ppm) / PWM_COR_STEPS_COARSE_DIV_F;  // used also in main_fw_calcPhase()
    2cb4:	6b 81       	ldd	r22, Y+3	; 0x03
    2cb6:	7c 81       	ldd	r23, Y+4	; 0x04
    2cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cba:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbc:	90 95       	com	r25
    2cbe:	80 95       	com	r24
    2cc0:	70 95       	com	r23
    2cc2:	61 95       	neg	r22
    2cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc6:	8f 4f       	sbci	r24, 0xFF	; 255
    2cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cca:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 ea       	ldi	r20, 0xA0	; 160
    2cd4:	51 e4       	ldi	r21, 0x41	; 65
    2cd6:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    2cda:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    2cde:	30 91 a7 05 	lds	r19, 0x05A7	; 0x8005a7 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    2ce2:	40 91 a8 05 	lds	r20, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    2ce6:	50 91 a9 05 	lds	r21, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    2cea:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    2cee:	2d ec       	ldi	r18, 0xCD	; 205
    2cf0:	3c ec       	ldi	r19, 0xCC	; 204
    2cf2:	4c e8       	ldi	r20, 0x8C	; 140
    2cf4:	5f e3       	ldi	r21, 0x3F	; 63
    2cf6:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    2cfa:	6f 83       	std	Y+7, r22	; 0x07
    2cfc:	78 87       	std	Y+8, r23	; 0x08
    2cfe:	89 87       	std	Y+9, r24	; 0x09
    2d00:	9a 87       	std	Y+10, r25	; 0x0a
			mainRefClkState = REFCLK_STATE_NOSYNC;
    2d02:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <mainRefClkState>
		}

		/* determine the new state of the FSM */
		if ((-0.015f <= ppm) && (ppm <= 0.015f) && (mainRefClkState == REFCLK_STATE_SEARCH_PHASE)) {  // single step tuning with counter stabilizer
    2d06:	2f e8       	ldi	r18, 0x8F	; 143
    2d08:	32 ec       	ldi	r19, 0xC2	; 194
    2d0a:	45 e7       	ldi	r20, 0x75	; 117
    2d0c:	5c eb       	ldi	r21, 0xBC	; 188
    2d0e:	c5 01       	movw	r24, r10
    2d10:	b4 01       	movw	r22, r8
    2d12:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    2d16:	87 fd       	sbrc	r24, 7
    2d18:	16 c0       	rjmp	.+44     	; 0x2d46 <main_fw_giveAway+0xfa6>
    2d1a:	2f e8       	ldi	r18, 0x8F	; 143
    2d1c:	32 ec       	ldi	r19, 0xC2	; 194
    2d1e:	45 e7       	ldi	r20, 0x75	; 117
    2d20:	5c e3       	ldi	r21, 0x3C	; 60
    2d22:	c5 01       	movw	r24, r10
    2d24:	b4 01       	movw	r22, r8
    2d26:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    2d2a:	18 16       	cp	r1, r24
    2d2c:	64 f0       	brlt	.+24     	; 0x2d46 <main_fw_giveAway+0xfa6>
    2d2e:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2d32:	82 30       	cpi	r24, 0x02	; 2
    2d34:	41 f4       	brne	.+16     	; 0x2d46 <main_fw_giveAway+0xfa6>
			/* Upgrading: switch on the frequency mean value counter */
			if (!holdOffTime) {
    2d36:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2810>
    2d3a:	81 11       	cpse	r24, r1
    2d3c:	62 c0       	rjmp	.+196    	; 0x2e02 <main_fw_giveAway+0x1062>
				mainRefClkState = REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED;
    2d3e:	83 e0       	ldi	r24, 0x03	; 3
    2d40:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>
    2d44:	5e c0       	rjmp	.+188    	; 0x2e02 <main_fw_giveAway+0x1062>
			}

		} else if ((-0.045f <= ppm) && (ppm <= 0.045f) && (mainRefClkState == REFCLK_STATE_SEARCH_QRG)) {	 // entering phase window (deviation less than 1 Hz @ 20 MHz)
    2d46:	2c ee       	ldi	r18, 0xEC	; 236
    2d48:	31 e5       	ldi	r19, 0x51	; 81
    2d4a:	48 e3       	ldi	r20, 0x38	; 56
    2d4c:	5d eb       	ldi	r21, 0xBD	; 189
    2d4e:	c5 01       	movw	r24, r10
    2d50:	b4 01       	movw	r22, r8
    2d52:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    2d56:	87 fd       	sbrc	r24, 7
    2d58:	14 c0       	rjmp	.+40     	; 0x2d82 <main_fw_giveAway+0xfe2>
    2d5a:	2c ee       	ldi	r18, 0xEC	; 236
    2d5c:	31 e5       	ldi	r19, 0x51	; 81
    2d5e:	48 e3       	ldi	r20, 0x38	; 56
    2d60:	5d e3       	ldi	r21, 0x3D	; 61
    2d62:	c5 01       	movw	r24, r10
    2d64:	b4 01       	movw	r22, r8
    2d66:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    2d6a:	18 16       	cp	r1, r24
    2d6c:	54 f0       	brlt	.+20     	; 0x2d82 <main_fw_giveAway+0xfe2>
    2d6e:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2d72:	81 30       	cpi	r24, 0x01	; 1
    2d74:	31 f4       	brne	.+12     	; 0x2d82 <main_fw_giveAway+0xfe2>
			/* Upgrading: search phase window */
			if (!holdOffTime) {
    2d76:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2810>
    2d7a:	81 11       	cpse	r24, r1
    2d7c:	42 c0       	rjmp	.+132    	; 0x2e02 <main_fw_giveAway+0x1062>
				mainRefClkState = REFCLK_STATE_SEARCH_PHASE;
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	31 c0       	rjmp	.+98     	; 0x2de4 <main_fw_giveAway+0x1044>
				holdOffTime = holdOffTimeStart;
			}

		} else if ((-0.095f <= ppm) && (ppm <= 0.095f) && (mainRefClkState > REFCLK_STATE_SEARCH_QRG)) {  // do not fall out of phase window
    2d82:	2c e5       	ldi	r18, 0x5C	; 92
    2d84:	3f e8       	ldi	r19, 0x8F	; 143
    2d86:	42 ec       	ldi	r20, 0xC2	; 194
    2d88:	5d eb       	ldi	r21, 0xBD	; 189
    2d8a:	c5 01       	movw	r24, r10
    2d8c:	b4 01       	movw	r22, r8
    2d8e:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    2d92:	87 fd       	sbrc	r24, 7
    2d94:	0e c0       	rjmp	.+28     	; 0x2db2 <main_fw_giveAway+0x1012>
    2d96:	2c e5       	ldi	r18, 0x5C	; 92
    2d98:	3f e8       	ldi	r19, 0x8F	; 143
    2d9a:	42 ec       	ldi	r20, 0xC2	; 194
    2d9c:	5d e3       	ldi	r21, 0x3D	; 61
    2d9e:	c5 01       	movw	r24, r10
    2da0:	b4 01       	movw	r22, r8
    2da2:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    2da6:	18 16       	cp	r1, r24
    2da8:	24 f0       	brlt	.+8      	; 0x2db2 <main_fw_giveAway+0x1012>
    2daa:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2dae:	82 30       	cpi	r24, 0x02	; 2
    2db0:	40 f5       	brcc	.+80     	; 0x2e02 <main_fw_giveAway+0x1062>
			/* hysteresis: keep state a bit longer */

		} else if ((-25.0 <= ppm) && (ppm <= 25.0f)) {  // searching QRG until 1 Hz resolution is established
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	48 ec       	ldi	r20, 0xC8	; 200
    2db8:	51 ec       	ldi	r21, 0xC1	; 193
    2dba:	c5 01       	movw	r24, r10
    2dbc:	b4 01       	movw	r22, r8
    2dbe:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    2dc2:	87 fd       	sbrc	r24, 7
    2dc4:	19 c0       	rjmp	.+50     	; 0x2df8 <main_fw_giveAway+0x1058>
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	48 ec       	ldi	r20, 0xC8	; 200
    2dcc:	51 e4       	ldi	r21, 0x41	; 65
    2dce:	c5 01       	movw	r24, r10
    2dd0:	b4 01       	movw	r22, r8
    2dd2:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    2dd6:	18 16       	cp	r1, r24
    2dd8:	7c f0       	brlt	.+30     	; 0x2df8 <main_fw_giveAway+0x1058>
			if (mainRefClkState > REFCLK_STATE_SEARCH_QRG) {
    2dda:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2dde:	82 30       	cpi	r24, 0x02	; 2
    2de0:	20 f0       	brcs	.+8      	; 0x2dea <main_fw_giveAway+0x104a>
				/* Downgrading */
				mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>
    2de8:	09 c0       	rjmp	.+18     	; 0x2dfc <main_fw_giveAway+0x105c>
				holdOffTime = holdOffTimeStart;

			} else if (mainRefClkState < REFCLK_STATE_SEARCH_QRG) {
    2dea:	81 11       	cpse	r24, r1
    2dec:	0a c0       	rjmp	.+20     	; 0x2e02 <main_fw_giveAway+0x1062>
				/* Upgrading */
				if (!holdOffTime) {
    2dee:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2810>
    2df2:	88 23       	and	r24, r24
    2df4:	b1 f3       	breq	.-20     	; 0x2de2 <main_fw_giveAway+0x1042>
    2df6:	05 c0       	rjmp	.+10     	; 0x2e02 <main_fw_giveAway+0x1062>
				}
			}

		} else {
			/* no valid frequency detected */
			mainRefClkState = REFCLK_STATE_NOSYNC;
    2df8:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <mainRefClkState>
			holdOffTime = holdOffTimeStart;
    2dfc:	84 e1       	ldi	r24, 0x14	; 20
    2dfe:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2810>
		}

		if (!main_bf.mainIsAFC) {
    2e02:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2e06:	80 ff       	sbrs	r24, 0
    2e08:	31 c1       	rjmp	.+610    	; 0x306c <main_fw_giveAway+0x12cc>
		}


		/* windowing and adding of the new PWM value */

		uint8_t sreg = SREG;
    2e0a:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2e0c:	f8 94       	cli
		uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
    2e0e:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <fastPwmLoopVal>
    2e12:	9a 83       	std	Y+2, r25	; 0x02
		uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
    2e14:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <fastPwmSubLoopVal>
    2e18:	99 83       	std	Y+1, r25	; 0x01
		SREG = sreg;
    2e1a:	8f bf       	out	0x3f, r24	; 63

		if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    2e1c:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2e20:	84 30       	cpi	r24, 0x04	; 4
    2e22:	a8 f4       	brcc	.+42     	; 0x2e4e <main_fw_giveAway+0x10ae>
			/* adjusting the PWM registers and make the new value public - only when hand-over to Phase Correction is not made */
			(void) main_fw_calcTimerAdj(pwmCorSteps, &localFastPwmLoopVal, &localFastPwmSubLoopVal);
    2e24:	9e 01       	movw	r18, r28
    2e26:	2f 5f       	subi	r18, 0xFF	; 255
    2e28:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2a:	ae 01       	movw	r20, r28
    2e2c:	4e 5f       	subi	r20, 0xFE	; 254
    2e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e30:	6f 81       	ldd	r22, Y+7	; 0x07
    2e32:	78 85       	ldd	r23, Y+8	; 0x08
    2e34:	89 85       	ldd	r24, Y+9	; 0x09
    2e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e38:	0e 94 2d 0a 	call	0x145a	; 0x145a <main_fw_calcTimerAdj>

			uint8_t sreg = SREG;
    2e3c:	8f b7       	in	r24, 0x3f	; 63
			cli();
    2e3e:	f8 94       	cli
			fastPwmLoopVal		= localFastPwmLoopVal;
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubLoopVal;
    2e46:	99 81       	ldd	r25, Y+1	; 0x01
    2e48:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <fastPwmSubLoopVal>
			SREG = sreg;
    2e4c:	8f bf       	out	0x3f, r24	; 63
		}

		if (main_bf.mainIsTimerTest) {
    2e4e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2e52:	82 ff       	sbrs	r24, 2
    2e54:	02 c1       	rjmp	.+516    	; 0x305a <main_fw_giveAway+0x12ba>
			/* monitoring */
			int len;
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA01, sizeof(PM_FORMAT_IA01));
    2e56:	2a e3       	ldi	r18, 0x3A	; 58
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e6       	ldi	r20, 0x60	; 96
    2e5c:	54 e0       	ldi	r21, 0x04	; 4
    2e5e:	6d e8       	ldi	r22, 0x8D	; 141
    2e60:	73 e0       	ldi	r23, 0x03	; 3
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2e68:	3e 81       	ldd	r19, Y+6	; 0x06
    2e6a:	3f 93       	push	r19
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	8f 93       	push	r24
    2e70:	9c 81       	ldd	r25, Y+4	; 0x04
    2e72:	9f 93       	push	r25
    2e74:	ab 81       	ldd	r26, Y+3	; 0x03
    2e76:	af 93       	push	r26
    2e78:	8d e8       	ldi	r24, 0x8D	; 141
    2e7a:	93 e0       	ldi	r25, 0x03	; 3
    2e7c:	9f 93       	push	r25
    2e7e:	8f 93       	push	r24
    2e80:	8d e0       	ldi	r24, 0x0D	; 13
    2e82:	94 e0       	ldi	r25, 0x04	; 4
    2e84:	9f 93       	push	r25
    2e86:	8f 93       	push	r24
    2e88:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
					int20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	4d e0       	ldi	r20, 0x0D	; 13
    2e90:	54 e0       	ldi	r21, 0x04	; 4
    2e92:	60 e0       	ldi	r22, 0x00	; 0
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
    2e9a:	25 e7       	ldi	r18, 0x75	; 117
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	4b ee       	ldi	r20, 0xEB	; 235
    2ea0:	53 e0       	ldi	r21, 0x03	; 3
    2ea2:	6d e8       	ldi	r22, 0x8D	; 141
    2ea4:	73 e0       	ldi	r23, 0x03	; 3
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2eac:	46 e0       	ldi	r20, 0x06	; 6
    2eae:	c5 01       	movw	r24, r10
    2eb0:	b4 01       	movw	r22, r8
    2eb2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    2eb6:	8c 01       	movw	r16, r24
    2eb8:	c5 01       	movw	r24, r10
    2eba:	b4 01       	movw	r22, r8
    2ebc:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    2ec0:	1b 01       	movw	r2, r22
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	f8 94       	cli
    2ec6:	de bf       	out	0x3e, r29	; 62
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	cd bf       	out	0x3d, r28	; 61
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	a9 01       	movw	r20, r18
    2ed2:	c5 01       	movw	r24, r10
    2ed4:	b4 01       	movw	r22, r8
    2ed6:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    2eda:	87 ff       	sbrs	r24, 7
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <main_fw_giveAway+0x1142>
    2ede:	8d e2       	ldi	r24, 0x2D	; 45
    2ee0:	01 c0       	rjmp	.+2      	; 0x2ee4 <main_fw_giveAway+0x1144>
    2ee2:	8b e2       	ldi	r24, 0x2B	; 43
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
					int20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2ee4:	a8 2f       	mov	r26, r24
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	bc 83       	std	Y+4, r27	; 0x04
    2eea:	ab 83       	std	Y+3, r26	; 0x03
    2eec:	43 e0       	ldi	r20, 0x03	; 3
    2eee:	c3 01       	movw	r24, r6
    2ef0:	b2 01       	movw	r22, r4
    2ef2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    2ef6:	5c 01       	movw	r10, r24
    2ef8:	c3 01       	movw	r24, r6
    2efa:	b2 01       	movw	r22, r4
    2efc:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    2f00:	4b 01       	movw	r8, r22
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	a9 01       	movw	r20, r18
    2f08:	c3 01       	movw	r24, r6
    2f0a:	b2 01       	movw	r22, r4
    2f0c:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    2f10:	87 ff       	sbrs	r24, 7
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <main_fw_giveAway+0x1178>
    2f14:	8d e2       	ldi	r24, 0x2D	; 45
    2f16:	01 c0       	rjmp	.+2      	; 0x2f1a <main_fw_giveAway+0x117a>
    2f18:	8b e2       	ldi	r24, 0x2B	; 43
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
					int20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	38 8b       	std	Y+16, r19	; 0x10
    2f20:	2f 87       	std	Y+15, r18	; 0x0f
    2f22:	43 e0       	ldi	r20, 0x03	; 3
    2f24:	c7 01       	movw	r24, r14
    2f26:	b6 01       	movw	r22, r12
    2f28:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    2f2c:	89 8b       	std	Y+17, r24	; 0x11
    2f2e:	9a 8b       	std	Y+18, r25	; 0x12
    2f30:	c7 01       	movw	r24, r14
    2f32:	b6 01       	movw	r22, r12
    2f34:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    2f38:	6b 8b       	std	Y+19, r22	; 0x13
    2f3a:	7c 8b       	std	Y+20, r23	; 0x14
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	a9 01       	movw	r20, r18
    2f42:	c7 01       	movw	r24, r14
    2f44:	b6 01       	movw	r22, r12
    2f46:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    2f4a:	87 ff       	sbrs	r24, 7
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <main_fw_giveAway+0x11b2>
    2f4e:	8d e2       	ldi	r24, 0x2D	; 45
    2f50:	01 c0       	rjmp	.+2      	; 0x2f54 <main_fw_giveAway+0x11b4>
    2f52:	8b e2       	ldi	r24, 0x2B	; 43
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
					int20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2f54:	1f 93       	push	r17
    2f56:	0f 93       	push	r16
    2f58:	3f 92       	push	r3
    2f5a:	2f 92       	push	r2
    2f5c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f5e:	3f 93       	push	r19
    2f60:	9b 81       	ldd	r25, Y+3	; 0x03
    2f62:	9f 93       	push	r25
    2f64:	bf 92       	push	r11
    2f66:	af 92       	push	r10
    2f68:	9f 92       	push	r9
    2f6a:	8f 92       	push	r8
    2f6c:	a8 89       	ldd	r26, Y+16	; 0x10
    2f6e:	af 93       	push	r26
    2f70:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f72:	bf 93       	push	r27
    2f74:	2a 89       	ldd	r18, Y+18	; 0x12
    2f76:	2f 93       	push	r18
    2f78:	39 89       	ldd	r19, Y+17	; 0x11
    2f7a:	3f 93       	push	r19
    2f7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f7e:	9f 93       	push	r25
    2f80:	ab 89       	ldd	r26, Y+19	; 0x13
    2f82:	af 93       	push	r26
    2f84:	1f 92       	push	r1
    2f86:	8f 93       	push	r24
    2f88:	fd e8       	ldi	r31, 0x8D	; 141
    2f8a:	ef 2e       	mov	r14, r31
    2f8c:	f3 e0       	ldi	r31, 0x03	; 3
    2f8e:	ff 2e       	mov	r15, r31
    2f90:	ff 92       	push	r15
    2f92:	ef 92       	push	r14
    2f94:	0d e0       	ldi	r16, 0x0D	; 13
    2f96:	14 e0       	ldi	r17, 0x04	; 4
    2f98:	1f 93       	push	r17
    2f9a:	0f 93       	push	r16
    2f9c:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
					s_flt_sign(meanFloatClockDiff), (int) meanFloatClockDiff, s_flt_frac(meanFloatClockDiff, 3),
					s_flt_sign(qrgDev_Hz), (int) qrgDev_Hz, s_flt_frac(qrgDev_Hz, 3),
					s_flt_sign(ppm), (int) ppm, s_flt_frac(ppm, 6));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	a8 01       	movw	r20, r16
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
}

static float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    2fac:	6a 81       	ldd	r22, Y+2	; 0x02
    2fae:	70 e0       	ldi	r23, 0x00	; 0
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    2fb8:	4b 01       	movw	r8, r22
    2fba:	5c 01       	movw	r10, r24
    2fbc:	69 81       	ldd	r22, Y+1	; 0x01
    2fbe:	70 e0       	ldi	r23, 0x00	; 0
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	40 e8       	ldi	r20, 0x80	; 128
    2fce:	5b e3       	ldi	r21, 0x3B	; 59
    2fd0:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    2fd4:	9b 01       	movw	r18, r22
    2fd6:	ac 01       	movw	r20, r24
    2fd8:	c5 01       	movw	r24, r10
    2fda:	b4 01       	movw	r22, r8
    2fdc:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    2fe0:	4b 01       	movw	r8, r22
    2fe2:	5c 01       	movw	r10, r24
					s_flt_sign(qrgDev_Hz), (int) qrgDev_Hz, s_flt_frac(qrgDev_Hz, 3),
					s_flt_sign(ppm), (int) ppm, s_flt_frac(ppm, 6));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			float l_timer = main_fw_calcTimerToFloat(localFastPwmLoopVal, localFastPwmSubLoopVal);
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA03, sizeof(PM_FORMAT_IA03));
    2fe4:	27 e4       	ldi	r18, 0x47	; 71
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	44 ea       	ldi	r20, 0xA4	; 164
    2fea:	53 e0       	ldi	r21, 0x03	; 3
    2fec:	b7 01       	movw	r22, r14
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2ff4:	43 e0       	ldi	r20, 0x03	; 3
    2ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff8:	78 85       	ldd	r23, Y+8	; 0x08
    2ffa:	89 85       	ldd	r24, Y+9	; 0x09
    2ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffe:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    3002:	c8 2e       	mov	r12, r24
    3004:	39 2e       	mov	r3, r25
    3006:	43 e0       	ldi	r20, 0x03	; 3
    3008:	c5 01       	movw	r24, r10
    300a:	b4 01       	movw	r22, r8
    300c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    3010:	d8 2e       	mov	r13, r24
    3012:	29 2e       	mov	r2, r25
    3014:	3f 92       	push	r3
    3016:	cf 92       	push	r12
    3018:	6f 81       	ldd	r22, Y+7	; 0x07
    301a:	78 85       	ldd	r23, Y+8	; 0x08
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3020:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    3024:	7f 93       	push	r23
    3026:	6f 93       	push	r22
    3028:	2f 92       	push	r2
    302a:	df 92       	push	r13
    302c:	c5 01       	movw	r24, r10
    302e:	b4 01       	movw	r22, r8
    3030:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    3034:	7f 93       	push	r23
    3036:	6f 93       	push	r22
    3038:	ff 92       	push	r15
    303a:	ef 92       	push	r14
    303c:	1f 93       	push	r17
    303e:	0f 93       	push	r16
    3040:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
					(int) l_timer, s_flt_frac(l_timer, 3),
					(int) pwmCorSteps, s_flt_frac(pwmCorSteps, 3));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
    304e:	28 2f       	mov	r18, r24
    3050:	a8 01       	movw	r20, r16
    3052:	60 e0       	ldi	r22, 0x00	; 0
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
	} else {
		/* frequency search and lock loop - out if sync */
		// mainRefClkState = REFCLK_STATE_NOSYNC;  // single spike should not destroy time base - deactivated
	}

	if (--holdOffTime == 255) {
    305a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2810>
    305e:	81 50       	subi	r24, 0x01	; 1
    3060:	18 f0       	brcs	.+6      	; 0x3068 <main_fw_giveAway+0x12c8>
    3062:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2810>
    3066:	02 c0       	rjmp	.+4      	; 0x306c <main_fw_giveAway+0x12cc>
		holdOffTime = 0;
    3068:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <holdOffTime.2810>
		/* frequency & phase correction modules */

		/* AFC = automatic frequency calculation */
		calcQrg(local20MHzClockDiff, localMeanFloatClockDiff, qrgDev_Hz, localPpm);  // corrections are done when  main_bf.mainIsAFC == true

		if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    306c:	10 91 9d 05 	lds	r17, 0x059D	; 0x80059d <mainRefClkState>
    3070:	14 30       	cpi	r17, 0x04	; 4
    3072:	60 f4       	brcc	.+24     	; 0x308c <main_fw_giveAway+0x12ec>
			/* phase corrections are done by the AFC unit */
			mainPpm = localPpm;
    3074:	8b 85       	ldd	r24, Y+11	; 0x0b
    3076:	9c 85       	ldd	r25, Y+12	; 0x0c
    3078:	ad 85       	ldd	r26, Y+13	; 0x0d
    307a:	be 85       	ldd	r27, Y+14	; 0x0e
    307c:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <mainPpm>
    3080:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <mainPpm+0x1>
    3084:	a0 93 7f 05 	sts	0x057F, r26	; 0x80057f <mainPpm+0x2>
    3088:	b0 93 80 05 	sts	0x0580, r27	; 0x800580 <mainPpm+0x3>
		}

		if (main_bf.mainIsAPC) {
    308c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3090:	81 ff       	sbrs	r24, 1
    3092:	0c c2       	rjmp	.+1048   	; 0x34ac <main_fw_giveAway+0x170c>
{
	/* APC = automatic phase control */

	static float phaseStepsErrorSum		= 0.0f;

	uint16_t adcPhaseAdc			= acAdcCh[ADC_CH_PHASE];
    3094:	60 91 89 03 	lds	r22, 0x0389	; 0x800389 <acAdcCh+0x2>
    3098:	70 91 8a 03 	lds	r23, 0x038A	; 0x80038a <acAdcCh+0x3>
	int16_t  adcPhaseCenteredAdc	= adcPhaseAdc - ADC_PHASE_ADC_CENTER;
    309c:	6d 50       	subi	r22, 0x0D	; 13
    309e:	71 40       	sbci	r23, 0x01	; 1
	float    adcPhaseCenteredVolt	= ((float) adcPhaseCenteredAdc) / ADC_STEPS_1V;
    30a0:	07 2e       	mov	r0, r23
    30a2:	00 0c       	add	r0, r0
    30a4:	88 0b       	sbc	r24, r24
    30a6:	99 0b       	sbc	r25, r25
    30a8:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	45 e5       	ldi	r20, 0x55	; 85
    30b2:	53 e4       	ldi	r21, 0x43	; 67
    30b4:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
	float    adcPhaseCentered		= adcPhaseCenteredVolt / ADC_PHASE_DELTAVOLTS_90DEG;
    30b8:	23 e3       	ldi	r18, 0x33	; 51
    30ba:	33 e3       	ldi	r19, 0x33	; 51
    30bc:	43 eb       	ldi	r20, 0xB3	; 179
    30be:	5f e3       	ldi	r21, 0x3F	; 63
    30c0:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
	float    adcPhase				= adcPhaseCentered * 90.0f;
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	44 eb       	ldi	r20, 0xB4	; 180
    30ca:	52 e4       	ldi	r21, 0x42	; 66
    30cc:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    30d0:	4b 01       	movw	r8, r22
    30d2:	5c 01       	movw	r10, r24

	/* Handling of new mainRefClkState value */
	if (mainRefClkState >= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    30d4:	13 30       	cpi	r17, 0x03	; 3
    30d6:	08 f4       	brcc	.+2      	; 0x30da <main_fw_giveAway+0x133a>
    30d8:	7e c0       	rjmp	.+252    	; 0x31d6 <main_fw_giveAway+0x1436>
		if ((-ADC_PHASE_LOCKING_DEG <= adcPhase) && (adcPhase <= ADC_PHASE_LOCKING_DEG)) {
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 ea       	ldi	r20, 0xA0	; 160
    30e0:	52 ec       	ldi	r21, 0xC2	; 194
    30e2:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    30e6:	87 fd       	sbrc	r24, 7
    30e8:	66 c0       	rjmp	.+204    	; 0x31b6 <main_fw_giveAway+0x1416>
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 ea       	ldi	r20, 0xA0	; 160
    30f0:	52 e4       	ldi	r21, 0x42	; 66
    30f2:	c5 01       	movw	r24, r10
    30f4:	b4 01       	movw	r22, r8
    30f6:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    30fa:	18 16       	cp	r1, r24
    30fc:	0c f4       	brge	.+2      	; 0x3100 <main_fw_giveAway+0x1360>
    30fe:	5b c0       	rjmp	.+182    	; 0x31b6 <main_fw_giveAway+0x1416>
			if (mainRefClkState < REFCLK_STATE_LOCKING_PHASE) {
    3100:	17 30       	cpi	r17, 0x07	; 7
    3102:	78 f4       	brcc	.+30     	; 0x3122 <main_fw_giveAway+0x1382>
				/* up-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
    3104:	87 e0       	ldi	r24, 0x07	; 7
    3106:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>

				uint8_t sreg = SREG;
    310a:	8f b7       	in	r24, 0x3f	; 63
				cli();
    310c:	f8 94       	cli
				fastPwmSingleDiffSum = 0.0f;
    310e:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <fastPwmSingleDiffSum>
    3112:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <fastPwmSingleDiffSum+0x1>
    3116:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <fastPwmSingleDiffSum+0x2>
    311a:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <fastPwmSingleDiffSum+0x3>
				SREG = sreg;
    311e:	8f bf       	out	0x3f, r24	; 63
    3120:	2e c0       	rjmp	.+92     	; 0x317e <main_fw_giveAway+0x13de>

			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
    3122:	17 30       	cpi	r17, 0x07	; 7
    3124:	61 f1       	breq	.+88     	; 0x317e <main_fw_giveAway+0x13de>
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
    3126:	87 e0       	ldi	r24, 0x07	; 7
    3128:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>
			}

			if ((-ADC_PHASE_INSYNC_DEG <= adcPhase) && (adcPhase <= ADC_PHASE_INSYNC_DEG)) {
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	4c e5       	ldi	r20, 0x5C	; 92
    3132:	52 ec       	ldi	r21, 0xC2	; 194
    3134:	c5 01       	movw	r24, r10
    3136:	b4 01       	movw	r22, r8
    3138:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    313c:	87 ff       	sbrs	r24, 7
    313e:	a0 c6       	rjmp	.+3392   	; 0x3e80 <main_fw_giveAway+0x20e0>
	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
		/* phase correction */
		phaseStepsPhase = (float) ((pow(fabs(adcPhase), 1.20f)) * 100.f);		// magic values  XXX PHASE: trimming is done here
    3140:	2a e9       	ldi	r18, 0x9A	; 154
    3142:	39 e9       	ldi	r19, 0x99	; 153
    3144:	49 e9       	ldi	r20, 0x99	; 153
    3146:	5f e3       	ldi	r21, 0x3F	; 63
    3148:	c5 01       	movw	r24, r10
    314a:	b4 01       	movw	r22, r8
    314c:	9f 77       	andi	r25, 0x7F	; 127
    314e:	0e 94 83 32 	call	0x6506	; 0x6506 <pow>
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	48 ec       	ldi	r20, 0xC8	; 200
    3158:	52 e4       	ldi	r21, 0x42	; 66
    315a:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    315e:	6b 01       	movw	r12, r22
    3160:	7c 01       	movw	r14, r24
		if (adcPhase < 0.0f) {
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	a9 01       	movw	r20, r18
    3168:	c5 01       	movw	r24, r10
    316a:	b4 01       	movw	r22, r8
    316c:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    3170:	87 ff       	sbrs	r24, 7
    3172:	3c c0       	rjmp	.+120    	; 0x31ec <main_fw_giveAway+0x144c>
			phaseStepsPhase = -phaseStepsPhase;
    3174:	f7 fa       	bst	r15, 7
    3176:	f0 94       	com	r15
    3178:	f7 f8       	bld	r15, 7
    317a:	f0 94       	com	r15
    317c:	37 c0       	rjmp	.+110    	; 0x31ec <main_fw_giveAway+0x144c>
			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
			}

			if ((-ADC_PHASE_INSYNC_DEG <= adcPhase) && (adcPhase <= ADC_PHASE_INSYNC_DEG)) {
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	4c e5       	ldi	r20, 0x5C	; 92
    3184:	52 ec       	ldi	r21, 0xC2	; 194
    3186:	c5 01       	movw	r24, r10
    3188:	b4 01       	movw	r22, r8
    318a:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    318e:	87 fd       	sbrc	r24, 7
    3190:	22 c0       	rjmp	.+68     	; 0x31d6 <main_fw_giveAway+0x1436>
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	4c e5       	ldi	r20, 0x5C	; 92
    3198:	52 e4       	ldi	r21, 0x42	; 66
    319a:	c5 01       	movw	r24, r10
    319c:	b4 01       	movw	r22, r8
    319e:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    31a2:	18 16       	cp	r1, r24
    31a4:	c4 f0       	brlt	.+48     	; 0x31d6 <main_fw_giveAway+0x1436>
				if (mainRefClkState < REFCLK_STATE_IN_SYNC) {
    31a6:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    31aa:	8f 30       	cpi	r24, 0x0F	; 15
    31ac:	a0 f4       	brcc	.+40     	; 0x31d6 <main_fw_giveAway+0x1436>
					mainRefClkState = REFCLK_STATE_IN_SYNC;
    31ae:	8f e0       	ldi	r24, 0x0F	; 15
    31b0:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>
    31b4:	10 c0       	rjmp	.+32     	; 0x31d6 <main_fw_giveAway+0x1436>
				}
			}

		} else {
			/* lost phase: hand-over to AFC */
			if (mainRefClkState >= REFCLK_STATE_LOCKING_PHASE) {
    31b6:	17 30       	cpi	r17, 0x07	; 7
    31b8:	70 f0       	brcs	.+28     	; 0x31d6 <main_fw_giveAway+0x1436>
				mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>

				uint8_t sreg = SREG;
    31c0:	8f b7       	in	r24, 0x3f	; 63
				cli();
    31c2:	f8 94       	cli
				fastPwmSingleDiffSum = 0.0f;
    31c4:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <fastPwmSingleDiffSum>
    31c8:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <fastPwmSingleDiffSum+0x1>
    31cc:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <fastPwmSingleDiffSum+0x2>
    31d0:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <fastPwmSingleDiffSum+0x3>
				SREG = sreg;
    31d4:	8f bf       	out	0x3f, r24	; 63
	}

	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
    31d6:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    31da:	87 30       	cpi	r24, 0x07	; 7
    31dc:	08 f0       	brcs	.+2      	; 0x31e0 <main_fw_giveAway+0x1440>
    31de:	b0 cf       	rjmp	.-160    	; 0x3140 <main_fw_giveAway+0x13a0>
			}
		}
	}

	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;
    31e0:	c1 2c       	mov	r12, r1
    31e2:	d1 2c       	mov	r13, r1
    31e4:	76 01       	movw	r14, r12
				SREG = sreg;
			}
		}
	}

	float phaseStepsFrequency	= 0.0f;
    31e6:	26 01       	movw	r4, r12
    31e8:	37 01       	movw	r6, r14
    31ea:	a8 c0       	rjmp	.+336    	; 0x333c <main_fw_giveAway+0x159c>
		}
	}

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
		static float lastPhaseStepsPhase = 0.0f;
		float diffPhaseStepsPhase = phaseStepsPhase - lastPhaseStepsPhase;
    31ec:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <lastPhaseStepsPhase.2845>
    31f0:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <lastPhaseStepsPhase.2845+0x1>
    31f4:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <lastPhaseStepsPhase.2845+0x2>
    31f8:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <lastPhaseStepsPhase.2845+0x3>
    31fc:	c7 01       	movw	r24, r14
    31fe:	b6 01       	movw	r22, r12
    3200:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    3204:	2b 01       	movw	r4, r22
    3206:	3c 01       	movw	r6, r24
		uint8_t isAfterSignRev = false;

		/* Find out direction to or from optimum point */
		if (((phaseStepsPhase > 0) && (diffPhaseStepsPhase > 0)) ||
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	a9 01       	movw	r20, r18
    320e:	c7 01       	movw	r24, r14
    3210:	b6 01       	movw	r22, r12
    3212:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    3216:	18 16       	cp	r1, r24
    3218:	54 f4       	brge	.+20     	; 0x322e <main_fw_giveAway+0x148e>
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	a9 01       	movw	r20, r18
    3220:	c3 01       	movw	r24, r6
    3222:	b2 01       	movw	r22, r4
    3224:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    3228:	18 16       	cp	r1, r24
    322a:	0c f4       	brge	.+2      	; 0x322e <main_fw_giveAway+0x148e>
    322c:	1c c6       	rjmp	.+3128   	; 0x3e66 <main_fw_giveAway+0x20c6>
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	a9 01       	movw	r20, r18
    3234:	c7 01       	movw	r24, r14
    3236:	b6 01       	movw	r22, r12
    3238:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    323c:	87 ff       	sbrs	r24, 7
    323e:	15 c6       	rjmp	.+3114   	; 0x3e6a <main_fw_giveAway+0x20ca>
		    ((phaseStepsPhase < 0) && (diffPhaseStepsPhase < 0))) {
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	a9 01       	movw	r20, r18
    3246:	c3 01       	movw	r24, r6
    3248:	b2 01       	movw	r22, r4
    324a:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    324e:	88 1f       	adc	r24, r24
    3250:	88 27       	eor	r24, r24
    3252:	88 1f       	adc	r24, r24
			isAfterSignRev = true;
		}
		lastPhaseStepsPhase = phaseStepsPhase;
    3254:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <lastPhaseStepsPhase.2845>
    3258:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <lastPhaseStepsPhase.2845+0x1>
    325c:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <lastPhaseStepsPhase.2845+0x2>
    3260:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <lastPhaseStepsPhase.2845+0x3>

		/* frequency drift correction */
		phaseStepsFrequency += phaseStepsPhase * (isAfterSignRev ?  0.00001500f
																 :  0.00000100f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here
    3264:	81 11       	cpse	r24, r1
    3266:	03 c6       	rjmp	.+3078   	; 0x3e6e <main_fw_giveAway+0x20ce>
    3268:	2d eb       	ldi	r18, 0xBD	; 189
    326a:	37 e3       	ldi	r19, 0x37	; 55
    326c:	46 e8       	ldi	r20, 0x86	; 134
    326e:	55 e3       	ldi	r21, 0x35	; 53
			isAfterSignRev = true;
		}
		lastPhaseStepsPhase = phaseStepsPhase;

		/* frequency drift correction */
		phaseStepsFrequency += phaseStepsPhase * (isAfterSignRev ?  0.00001500f
    3270:	c7 01       	movw	r24, r14
    3272:	b6 01       	movw	r22, r12
    3274:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	a9 01       	movw	r20, r18
    327e:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    3282:	2b 01       	movw	r4, r22
    3284:	3c 01       	movw	r6, r24
																 :  0.00000100f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here

		/* mainPpm calculations */
		float phaseStepsErrorDiff = phaseStepsErrorSum / MEAN_PHASE_PPM_STAGES_F;
    3286:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <phaseStepsErrorSum.2835>
    328a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <phaseStepsErrorSum.2835+0x1>
    328e:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <phaseStepsErrorSum.2835+0x2>
    3292:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <phaseStepsErrorSum.2835+0x3>
    3296:	8b 83       	std	Y+3, r24	; 0x03
    3298:	9c 83       	std	Y+4, r25	; 0x04
    329a:	ad 83       	std	Y+5, r26	; 0x05
    329c:	be 83       	std	Y+6, r27	; 0x06
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 ee       	ldi	r20, 0xE0	; 224
    32a4:	50 e4       	ldi	r21, 0x40	; 64
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    32ae:	6b 87       	std	Y+11, r22	; 0x0b
    32b0:	7c 87       	std	Y+12, r23	; 0x0c
    32b2:	8d 87       	std	Y+13, r24	; 0x0d
    32b4:	9e 87       	std	Y+14, r25	; 0x0e
		mainPpm = mainCoef_b02_qrg_k_pPwmStep_25C_ppm * phaseStepsErrorDiff;
    32b6:	9b 01       	movw	r18, r22
    32b8:	ac 01       	movw	r20, r24
    32ba:	60 91 a6 05 	lds	r22, 0x05A6	; 0x8005a6 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    32be:	70 91 a7 05 	lds	r23, 0x05A7	; 0x8005a7 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    32c2:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    32c6:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    32ca:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    32ce:	60 93 7d 05 	sts	0x057D, r22	; 0x80057d <mainPpm>
    32d2:	70 93 7e 05 	sts	0x057E, r23	; 0x80057e <mainPpm+0x1>
    32d6:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <mainPpm+0x2>
    32da:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <mainPpm+0x3>
		if (phaseStepsFrequency >= 0.0f) {
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	a9 01       	movw	r20, r18
    32e4:	c3 01       	movw	r24, r6
    32e6:	b2 01       	movw	r22, r4
    32e8:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
			phaseStepsErrorSum += (phaseStepsFrequency - phaseStepsErrorDiff);
    32ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    32ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    32f0:	4d 85       	ldd	r20, Y+13	; 0x0d
    32f2:	5e 85       	ldd	r21, Y+14	; 0x0e
																 :  0.00000100f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here

		/* mainPpm calculations */
		float phaseStepsErrorDiff = phaseStepsErrorSum / MEAN_PHASE_PPM_STAGES_F;
		mainPpm = mainCoef_b02_qrg_k_pPwmStep_25C_ppm * phaseStepsErrorDiff;
		if (phaseStepsFrequency >= 0.0f) {
    32f4:	87 fd       	sbrc	r24, 7
    32f6:	c0 c5       	rjmp	.+2944   	; 0x3e78 <main_fw_giveAway+0x20d8>
			phaseStepsErrorSum += (phaseStepsFrequency - phaseStepsErrorDiff);
    32f8:	c3 01       	movw	r24, r6
    32fa:	b2 01       	movw	r22, r4
		} else {
			phaseStepsErrorSum += (-phaseStepsFrequency - phaseStepsErrorDiff);
    32fc:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    3300:	9b 01       	movw	r18, r22
    3302:	ac 01       	movw	r20, r24
    3304:	6b 81       	ldd	r22, Y+3	; 0x03
    3306:	7c 81       	ldd	r23, Y+4	; 0x04
    3308:	8d 81       	ldd	r24, Y+5	; 0x05
    330a:	9e 81       	ldd	r25, Y+6	; 0x06
    330c:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    3310:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <phaseStepsErrorSum.2835>
    3314:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <phaseStepsErrorSum.2835+0x1>
    3318:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <phaseStepsErrorSum.2835+0x2>
    331c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <phaseStepsErrorSum.2835+0x3>

static float pwmTimerCorrection(float correction, uint8_t doSingleLoad)
{
	float ret = 0.0f;

	if (correction) {
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	a9 01       	movw	r20, r18
    3326:	c3 01       	movw	r24, r6
    3328:	b2 01       	movw	r22, r4
    332a:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    332e:	88 23       	and	r24, r24
    3330:	29 f0       	breq	.+10     	; 0x333c <main_fw_giveAway+0x159c>
    3332:	40 e0       	ldi	r20, 0x00	; 0
    3334:	c3 01       	movw	r24, r6
    3336:	b2 01       	movw	r22, r4
    3338:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <pwmTimerCorrection.part.0>

		/* Execute frequency correction */
		(void) pwmTimerCorrection(phaseStepsFrequency, false);
	}

	if (main_bf.mainIsTimerTest) {
    333c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3340:	82 ff       	sbrs	r24, 2
    3342:	b4 c0       	rjmp	.+360    	; 0x34ac <main_fw_giveAway+0x170c>
		/* monitoring */
		int len;
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA11, sizeof(PM_FORMAT_IA11));
    3344:	2b e6       	ldi	r18, 0x6B	; 107
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	49 e3       	ldi	r20, 0x39	; 57
    334a:	53 e0       	ldi	r21, 0x03	; 3
    334c:	6d e8       	ldi	r22, 0x8D	; 141
    334e:	73 e0       	ldi	r23, 0x03	; 3
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	d1 d6       	rcall	.+3490   	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3354:	43 e0       	ldi	r20, 0x03	; 3
    3356:	c7 01       	movw	r24, r14
    3358:	b6 01       	movw	r22, r12
    335a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    335e:	38 2e       	mov	r3, r24
    3360:	29 2e       	mov	r2, r25
    3362:	c7 01       	movw	r24, r14
    3364:	b6 01       	movw	r22, r12
    3366:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    336a:	16 2f       	mov	r17, r22
    336c:	07 2f       	mov	r16, r23
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	a9 01       	movw	r20, r18
    3374:	c7 01       	movw	r24, r14
    3376:	b6 01       	movw	r22, r12
    3378:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    337c:	87 ff       	sbrs	r24, 7
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <main_fw_giveAway+0x15e4>
    3380:	8d e2       	ldi	r24, 0x2D	; 45
    3382:	01 c0       	rjmp	.+2      	; 0x3386 <main_fw_giveAway+0x15e6>
    3384:	8b e2       	ldi	r24, 0x2B	; 43

	if (main_bf.mainIsTimerTest) {
		/* monitoring */
		int len;
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA11, sizeof(PM_FORMAT_IA11));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3386:	e8 2e       	mov	r14, r24
    3388:	f1 2c       	mov	r15, r1
    338a:	43 e0       	ldi	r20, 0x03	; 3
    338c:	c3 01       	movw	r24, r6
    338e:	b2 01       	movw	r22, r4
    3390:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    3394:	d8 2e       	mov	r13, r24
    3396:	c9 2e       	mov	r12, r25
    3398:	c3 01       	movw	r24, r6
    339a:	b2 01       	movw	r22, r4
    339c:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    33a0:	6b 83       	std	Y+3, r22	; 0x03
    33a2:	7b 87       	std	Y+11, r23	; 0x0b
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	a9 01       	movw	r20, r18
    33aa:	c3 01       	movw	r24, r6
    33ac:	b2 01       	movw	r22, r4
    33ae:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    33b2:	87 ff       	sbrs	r24, 7
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <main_fw_giveAway+0x161a>
    33b6:	2d e2       	ldi	r18, 0x2D	; 45
    33b8:	01 c0       	rjmp	.+2      	; 0x33bc <main_fw_giveAway+0x161c>
    33ba:	2b e2       	ldi	r18, 0x2B	; 43

	if (main_bf.mainIsTimerTest) {
		/* monitoring */
		int len;
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA11, sizeof(PM_FORMAT_IA11));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    33bc:	43 e0       	ldi	r20, 0x03	; 3
    33be:	c5 01       	movw	r24, r10
    33c0:	b4 01       	movw	r22, r8
    33c2:	28 8f       	std	Y+24, r18	; 0x18
    33c4:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    33c8:	2f 92       	push	r2
    33ca:	3f 92       	push	r3
    33cc:	0f 93       	push	r16
    33ce:	1f 93       	push	r17
    33d0:	ff 92       	push	r15
    33d2:	ef 92       	push	r14
    33d4:	cf 92       	push	r12
    33d6:	df 92       	push	r13
    33d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    33da:	af 93       	push	r26
    33dc:	bb 81       	ldd	r27, Y+3	; 0x03
    33de:	bf 93       	push	r27
    33e0:	1f 92       	push	r1
    33e2:	28 8d       	ldd	r18, Y+24	; 0x18
    33e4:	2f 93       	push	r18
    33e6:	9f 93       	push	r25
    33e8:	8f 93       	push	r24
    33ea:	c5 01       	movw	r24, r10
    33ec:	b4 01       	movw	r22, r8
    33ee:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    33f2:	7f 93       	push	r23
    33f4:	6f 93       	push	r22
    33f6:	8d e8       	ldi	r24, 0x8D	; 141
    33f8:	93 e0       	ldi	r25, 0x03	; 3
    33fa:	9f 93       	push	r25
    33fc:	8f 93       	push	r24
    33fe:	8d e0       	ldi	r24, 0x0D	; 13
    3400:	94 e0       	ldi	r25, 0x04	; 4
    3402:	9f 93       	push	r25
    3404:	8f 93       	push	r24
    3406:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				(int) adcPhase, s_flt_frac(adcPhase, 3),
				s_flt_sign(phaseStepsFrequency), (int) phaseStepsFrequency, s_flt_frac(phaseStepsFrequency, 3),
				s_flt_sign(phaseStepsPhase), (int) phaseStepsPhase, s_flt_frac(phaseStepsPhase, 3));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    340a:	28 2f       	mov	r18, r24
    340c:	4d e0       	ldi	r20, 0x0D	; 13
    340e:	54 e0       	ldi	r21, 0x04	; 4
    3410:	60 e0       	ldi	r22, 0x00	; 0
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA12, sizeof(PM_FORMAT_IA12));
    3418:	24 e3       	ldi	r18, 0x34	; 52
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	45 e0       	ldi	r20, 0x05	; 5
    341e:	53 e0       	ldi	r21, 0x03	; 3
    3420:	6d e8       	ldi	r22, 0x8D	; 141
    3422:	73 e0       	ldi	r23, 0x03	; 3
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	67 d6       	rcall	.+3278   	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3428:	c0 90 2a 05 	lds	r12, 0x052A	; 0x80052a <fastPwmSingleDiffSum>
    342c:	d0 90 2b 05 	lds	r13, 0x052B	; 0x80052b <fastPwmSingleDiffSum+0x1>
    3430:	e0 90 2c 05 	lds	r14, 0x052C	; 0x80052c <fastPwmSingleDiffSum+0x2>
    3434:	f0 90 2d 05 	lds	r15, 0x052D	; 0x80052d <fastPwmSingleDiffSum+0x3>
    3438:	43 e0       	ldi	r20, 0x03	; 3
    343a:	c7 01       	movw	r24, r14
    343c:	b6 01       	movw	r22, r12
    343e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    3442:	b8 2e       	mov	r11, r24
    3444:	a9 2e       	mov	r10, r25
    3446:	c7 01       	movw	r24, r14
    3448:	b6 01       	movw	r22, r12
    344a:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    344e:	16 2f       	mov	r17, r22
    3450:	07 2f       	mov	r16, r23
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	a9 01       	movw	r20, r18
    3462:	c7 01       	movw	r24, r14
    3464:	b6 01       	movw	r22, r12
    3466:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    346a:	87 ff       	sbrs	r24, 7
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <main_fw_giveAway+0x16d2>
    346e:	2d e2       	ldi	r18, 0x2D	; 45
    3470:	01 c0       	rjmp	.+2      	; 0x3474 <main_fw_giveAway+0x16d4>
    3472:	2b e2       	ldi	r18, 0x2B	; 43
				s_flt_sign(phaseStepsFrequency), (int) phaseStepsFrequency, s_flt_frac(phaseStepsFrequency, 3),
				s_flt_sign(phaseStepsPhase), (int) phaseStepsPhase, s_flt_frac(phaseStepsPhase, 3));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA12, sizeof(PM_FORMAT_IA12));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3474:	af 92       	push	r10
    3476:	bf 92       	push	r11
    3478:	0f 93       	push	r16
    347a:	1f 93       	push	r17
    347c:	1f 92       	push	r1
    347e:	2f 93       	push	r18
    3480:	8d e8       	ldi	r24, 0x8D	; 141
    3482:	93 e0       	ldi	r25, 0x03	; 3
    3484:	9f 93       	push	r25
    3486:	8f 93       	push	r24
    3488:	8d e0       	ldi	r24, 0x0D	; 13
    348a:	94 e0       	ldi	r25, 0x04	; 4
    348c:	9f 93       	push	r25
    348e:	8f 93       	push	r24
    3490:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				s_flt_sign(fastPwmSingleDiffSum), (int) fastPwmSingleDiffSum, s_flt_frac(fastPwmSingleDiffSum, 3));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3494:	28 2f       	mov	r18, r24
    3496:	4d e0       	ldi	r20, 0x0D	; 13
    3498:	54 e0       	ldi	r21, 0x04	; 4
    349a:	60 e0       	ldi	r22, 0x00	; 0
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
    34a2:	0f b6       	in	r0, 0x3f	; 63
    34a4:	f8 94       	cli
    34a6:	de bf       	out	0x3e, r29	; 62
    34a8:	0f be       	out	0x3f, r0	; 63
    34aa:	cd bf       	out	0x3d, r28	; 61
			/* APC = automatic phase control */
			calcPhase();
		}
	}

	if (main_bf.mainStackCheck) {
    34ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    34b0:	86 ff       	sbrs	r24, 6
    34b2:	67 c0       	rjmp	.+206    	; 0x3582 <main_fw_giveAway+0x17e2>
    34b4:	ea ed       	ldi	r30, 0xDA	; 218
    34b6:	f5 e0       	ldi	r31, 0x05	; 5
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	90 e0       	ldi	r25, 0x00	; 0
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
			if (stackCheckMungWall[idx] != 0x5a) {
    34bc:	21 91       	ld	r18, Z+
    34be:	2a 35       	cpi	r18, 0x5A	; 90
    34c0:	71 f0       	breq	.+28     	; 0x34de <main_fw_giveAway+0x173e>
				uint16_t localCheckAddr = (uint16_t) (&(stackCheckMungWall[idx]));
    34c2:	86 52       	subi	r24, 0x26	; 38
    34c4:	9a 4f       	sbci	r25, 0xFA	; 250
				if (mainSCMungwallAddr > localCheckAddr) {
    34c6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <mainSCMungwallAddr>
    34ca:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <mainSCMungwallAddr+0x1>
    34ce:	82 17       	cp	r24, r18
    34d0:	93 07       	cpc	r25, r19
    34d2:	50 f4       	brcc	.+20     	; 0x34e8 <main_fw_giveAway+0x1748>
					mainSCMungwallAddr = localCheckAddr;
    34d4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <mainSCMungwallAddr+0x1>
    34d8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mainSCMungwallAddr>
    34dc:	05 c0       	rjmp	.+10     	; 0x34e8 <main_fw_giveAway+0x1748>
	}

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	80 32       	cpi	r24, 0x20	; 32
    34e2:	a2 e0       	ldi	r26, 0x02	; 2
    34e4:	9a 07       	cpc	r25, r26
    34e6:	51 f7       	brne	.-44     	; 0x34bc <main_fw_giveAway+0x171c>
				/* leave loop body */
				break;
			}
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC01, sizeof(PM_FORMAT_SC01));
    34e8:	25 e4       	ldi	r18, 0x45	; 69
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	44 e1       	ldi	r20, 0x14	; 20
    34ee:	52 e0       	ldi	r21, 0x02	; 2
    34f0:	6d e8       	ldi	r22, 0x8D	; 141
    34f2:	73 e0       	ldi	r23, 0x03	; 3
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	ff d5       	rcall	.+3070   	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    34f8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mainSCStackAddr+0x1>
    34fc:	8f 93       	push	r24
    34fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mainSCStackAddr>
    3502:	8f 93       	push	r24
    3504:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <mainSCMungwallAddr+0x1>
    3508:	8f 93       	push	r24
    350a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mainSCMungwallAddr>
    350e:	8f 93       	push	r24
    3510:	ed e8       	ldi	r30, 0x8D	; 141
    3512:	ee 2e       	mov	r14, r30
    3514:	e3 e0       	ldi	r30, 0x03	; 3
    3516:	fe 2e       	mov	r15, r30
    3518:	ff 92       	push	r15
    351a:	ef 92       	push	r14
    351c:	0d e0       	ldi	r16, 0x0D	; 13
    351e:	14 e0       	ldi	r17, 0x04	; 4
    3520:	1f 93       	push	r17
    3522:	0f 93       	push	r16
    3524:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				mainSCMungwallAddr,
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3528:	28 2f       	mov	r18, r24
    352a:	a8 01       	movw	r20, r16
    352c:	60 e0       	ldi	r22, 0x00	; 0
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
    3534:	2d e1       	ldi	r18, 0x1D	; 29
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	47 ef       	ldi	r20, 0xF7	; 247
    353a:	51 e0       	ldi	r21, 0x01	; 1
    353c:	b7 01       	movw	r22, r14
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	da d5       	rcall	.+2996   	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
				twiState.isProcessing);
    3542:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
    3546:	96 95       	lsr	r25
    3548:	91 70       	andi	r25, 0x01	; 1
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
    354a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    354e:	81 70       	andi	r24, 0x01	; 1
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
    3550:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <twiState>
				mainSCMungwallAddr,
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3554:	1f 92       	push	r1
    3556:	9f 93       	push	r25
    3558:	1f 92       	push	r1
    355a:	8f 93       	push	r24
    355c:	1f 92       	push	r1
    355e:	2f 93       	push	r18
    3560:	ff 92       	push	r15
    3562:	ef 92       	push	r14
    3564:	1f 93       	push	r17
    3566:	0f 93       	push	r16
    3568:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				twiState.state,
				twiState.doStart,
				twiState.isProcessing);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    356c:	28 2f       	mov	r18, r24
    356e:	a8 01       	movw	r20, r16
    3570:	60 e0       	ldi	r22, 0x00	; 0
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	0e 94 35 23 	call	0x466a	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
#endif
}

static void twi_mcp23017_av1624_fw_showStatus(void)
{
	if (!main_bf.mainIsLcdAttached) {
    3582:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3586:	87 ff       	sbrs	r24, 7
    3588:	37 c0       	rjmp	.+110    	; 0x35f8 <main_fw_giveAway+0x1858>
			return;
		}
	}

	/* I2C LCD-Module via MCP23017 16 bit port expander */  // XXX I2C LCD-Module displayed fields are here
	uint8_t sreg = SREG;
    358a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    358c:	f8 94       	cli
	uint32_t localFastCtr1ms = fastCtr1ms;
    358e:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <fastCtr1ms>
    3592:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <fastCtr1ms+0x1>
    3596:	a0 91 37 05 	lds	r26, 0x0537	; 0x800537 <fastCtr1ms+0x2>
    359a:	b0 91 38 05 	lds	r27, 0x0538	; 0x800538 <fastCtr1ms+0x3>
	SREG = sreg;
    359e:	2f bf       	out	0x3f, r18	; 63

	if (localFastCtr1ms <= 5000) {
    35a0:	89 38       	cpi	r24, 0x89	; 137
    35a2:	93 41       	sbci	r25, 0x13	; 19
    35a4:	a1 05       	cpc	r26, r1
    35a6:	b1 05       	cpc	r27, r1
    35a8:	80 f5       	brcc	.+96     	; 0x360a <main_fw_giveAway+0x186a>
		/* welcome message */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC01, sizeof(PM_FORMAT_LC01));
    35aa:	21 e1       	ldi	r18, 0x11	; 17
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	44 ef       	ldi	r20, 0xF4	; 244
    35b0:	52 e0       	ldi	r21, 0x02	; 2
    35b2:	6d e8       	ldi	r22, 0x8D	; 141
    35b4:	73 e0       	ldi	r23, 0x03	; 3
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	9e d5       	rcall	.+2876   	; 0x40f6 <memory_fw_copyBuffer>
		twi_mcp23017_av1624_fw_gotoPosition(0, 0);
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <twi_mcp23017_av1624_fw_gotoPosition>
		twi_mcp23017_av1624_fw_writeString(mainFormatBuffer, 16);
    35c2:	60 e1       	ldi	r22, 0x10	; 16
    35c4:	8d e8       	ldi	r24, 0x8D	; 141
    35c6:	93 e0       	ldi	r25, 0x03	; 3
    35c8:	0e 94 1d 28 	call	0x503a	; 0x503a <twi_mcp23017_av1624_fw_writeString>
		usbPoll();
    35cc:	0e 94 2a 2a 	call	0x5454	; 0x5454 <usbPoll>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC02, sizeof(PM_FORMAT_LC02));
    35d0:	21 e1       	ldi	r18, 0x11	; 17
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	43 ee       	ldi	r20, 0xE3	; 227
    35d6:	52 e0       	ldi	r21, 0x02	; 2
    35d8:	6d e8       	ldi	r22, 0x8D	; 141
    35da:	73 e0       	ldi	r23, 0x03	; 3
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	8b d5       	rcall	.+2838   	; 0x40f6 <memory_fw_copyBuffer>
		twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    35e0:	60 e0       	ldi	r22, 0x00	; 0
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <twi_mcp23017_av1624_fw_gotoPosition>
		twi_mcp23017_av1624_fw_writeString(mainFormatBuffer, 16);
    35e8:	60 e1       	ldi	r22, 0x10	; 16
    35ea:	8d e8       	ldi	r24, 0x8D	; 141
    35ec:	93 e0       	ldi	r25, 0x03	; 3
    35ee:	0e 94 1d 28 	call	0x503a	; 0x503a <twi_mcp23017_av1624_fw_writeString>
		usbPoll();
    35f2:	0e 94 2a 2a 	call	0x5454	; 0x5454 <usbPoll>
    35f6:	b0 c1       	rjmp	.+864    	; 0x3958 <main_fw_giveAway+0x1bb8>
}

static void twi_mcp23017_av1624_fw_showStatus(void)
{
	if (!main_bf.mainIsLcdAttached) {
		twi_mcp23017_fw_init();
    35f8:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <twi_mcp23017_fw_init>
		twi_mcp23017_av1624_fw_init();
    35fc:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <twi_mcp23017_av1624_fw_init>
		if (!main_bf.mainIsLcdAttached) {
    3600:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3604:	87 fd       	sbrc	r24, 7
    3606:	c1 cf       	rjmp	.-126    	; 0x358a <main_fw_giveAway+0x17ea>
    3608:	a7 c1       	rjmp	.+846    	; 0x3958 <main_fw_giveAway+0x1bb8>
		static uint8_t displayNr	= 0;
		static uint8_t displaySubNr	= 0;
		int len = 0;

		/* the status-line */
		float l_ppb = mainPpm * 1000.0f;
    360a:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <mainPpm>
    360e:	70 91 7e 05 	lds	r23, 0x057E	; 0x80057e <mainPpm+0x1>
    3612:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <mainPpm+0x2>
    3616:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <mainPpm+0x3>
		if (mainRefClkState > REFCLK_STATE_NOSYNC) {
    361a:	20 91 9d 05 	lds	r18, 0x059D	; 0x80059d <mainRefClkState>
    361e:	22 23       	and	r18, r18
    3620:	d9 f1       	breq	.+118    	; 0x3698 <main_fw_giveAway+0x18f8>
		static uint8_t displayNr	= 0;
		static uint8_t displaySubNr	= 0;
		int len = 0;

		/* the status-line */
		float l_ppb = mainPpm * 1000.0f;
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	4a e7       	ldi	r20, 0x7A	; 122
    3628:	54 e4       	ldi	r21, 0x44	; 68
    362a:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    362e:	6b 01       	movw	r12, r22
    3630:	7c 01       	movw	r14, r24
		if (mainRefClkState > REFCLK_STATE_NOSYNC) {
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC11, sizeof(PM_FORMAT_LC11));
    3632:	2b e1       	ldi	r18, 0x1B	; 27
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	48 ec       	ldi	r20, 0xC8	; 200
    3638:	52 e0       	ldi	r21, 0x02	; 2
    363a:	6d e8       	ldi	r22, 0x8D	; 141
    363c:	73 e0       	ldi	r23, 0x03	; 3
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	5a d5       	rcall	.+2740   	; 0x40f6 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3642:	10 91 67 05 	lds	r17, 0x0567	; 0x800567 <main_nmeaSatsUsed>
    3646:	00 91 68 05 	lds	r16, 0x0568	; 0x800568 <main_nmeaSatsUsed+0x1>
    364a:	43 e0       	ldi	r20, 0x03	; 3
    364c:	c7 01       	movw	r24, r14
    364e:	b6 01       	movw	r22, r12
    3650:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    3654:	0f 93       	push	r16
    3656:	1f 93       	push	r17
    3658:	1f 92       	push	r1
    365a:	23 ef       	ldi	r18, 0xF3	; 243
    365c:	2f 93       	push	r18
    365e:	20 91 9d 05 	lds	r18, 0x059D	; 0x80059d <mainRefClkState>
    3662:	1f 92       	push	r1
    3664:	2f 93       	push	r18
    3666:	1f 92       	push	r1
    3668:	20 ee       	ldi	r18, 0xE0	; 224
    366a:	2f 93       	push	r18
    366c:	9f 93       	push	r25
    366e:	8f 93       	push	r24
    3670:	c7 01       	movw	r24, r14
    3672:	b6 01       	movw	r22, r12
    3674:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    3678:	7f 93       	push	r23
    367a:	6f 93       	push	r22
    367c:	1f 92       	push	r1
    367e:	82 e6       	ldi	r24, 0x62	; 98
    3680:	8f 93       	push	r24
    3682:	8d e8       	ldi	r24, 0x8D	; 141
    3684:	93 e0       	ldi	r25, 0x03	; 3
    3686:	9f 93       	push	r25
    3688:	8f 93       	push	r24
    368a:	8d e0       	ldi	r24, 0x0D	; 13
    368c:	94 e0       	ldi	r25, 0x04	; 4
    368e:	9f 93       	push	r25
    3690:	8f 93       	push	r24
    3692:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
    3696:	22 c0       	rjmp	.+68     	; 0x36dc <main_fw_giveAway+0x193c>
			mainRefClkState,
			0xf3,
			main_nmeaSatsUsed);

			} else {
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC12, sizeof(PM_FORMAT_LC12));
    3698:	28 e1       	ldi	r18, 0x18	; 24
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 eb       	ldi	r20, 0xB0	; 176
    369e:	52 e0       	ldi	r21, 0x02	; 2
    36a0:	6d e8       	ldi	r22, 0x8D	; 141
    36a2:	73 e0       	ldi	r23, 0x03	; 3
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	27 d5       	rcall	.+2638   	; 0x40f6 <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    36a8:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <main_nmeaSatsUsed+0x1>
    36ac:	8f 93       	push	r24
    36ae:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <main_nmeaSatsUsed>
    36b2:	8f 93       	push	r24
    36b4:	1f 92       	push	r1
    36b6:	83 ef       	ldi	r24, 0xF3	; 243
    36b8:	8f 93       	push	r24
    36ba:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    36be:	1f 92       	push	r1
    36c0:	8f 93       	push	r24
    36c2:	1f 92       	push	r1
    36c4:	80 ee       	ldi	r24, 0xE0	; 224
    36c6:	8f 93       	push	r24
    36c8:	8d e8       	ldi	r24, 0x8D	; 141
    36ca:	93 e0       	ldi	r25, 0x03	; 3
    36cc:	9f 93       	push	r25
    36ce:	8f 93       	push	r24
    36d0:	8d e0       	ldi	r24, 0x0D	; 13
    36d2:	94 e0       	ldi	r25, 0x04	; 4
    36d4:	9f 93       	push	r25
    36d6:	8f 93       	push	r24
    36d8:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
    36dc:	18 2f       	mov	r17, r24
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	de bf       	out	0x3e, r29	; 62
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	cd bf       	out	0x3d, r28	; 61
			0xe0,
			mainRefClkState,
			0xf3,
			main_nmeaSatsUsed);
		}
		twi_mcp23017_av1624_fw_gotoPosition(0, 0);
    36e8:	60 e0       	ldi	r22, 0x00	; 0
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <twi_mcp23017_av1624_fw_gotoPosition>
		twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    36f0:	61 2f       	mov	r22, r17
    36f2:	8d e0       	ldi	r24, 0x0D	; 13
    36f4:	94 e0       	ldi	r25, 0x04	; 4
    36f6:	0e 94 1d 28 	call	0x503a	; 0x503a <twi_mcp23017_av1624_fw_writeString>
		usbPoll();
    36fa:	0e 94 2a 2a 	call	0x5454	; 0x5454 <usbPoll>

		switch (displayNr) {
    36fe:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <displayNr.2868>
    3702:	81 30       	cpi	r24, 0x01	; 1
    3704:	09 f4       	brne	.+2      	; 0x3708 <main_fw_giveAway+0x1968>
    3706:	59 c0       	rjmp	.+178    	; 0x37ba <main_fw_giveAway+0x1a1a>
    3708:	82 30       	cpi	r24, 0x02	; 2
    370a:	09 f4       	brne	.+2      	; 0x370e <main_fw_giveAway+0x196e>
    370c:	a2 c0       	rjmp	.+324    	; 0x3852 <main_fw_giveAway+0x1ab2>
			default:
			case 0:
			{
				/* the timestamp */
				uint16_t year	=  main_nmeaDate					% 10000;
    370e:	80 90 57 05 	lds	r8, 0x0557	; 0x800557 <main_nmeaDate>
    3712:	90 90 58 05 	lds	r9, 0x0558	; 0x800558 <main_nmeaDate+0x1>
    3716:	a0 90 59 05 	lds	r10, 0x0559	; 0x800559 <main_nmeaDate+0x2>
    371a:	b0 90 5a 05 	lds	r11, 0x055A	; 0x80055a <main_nmeaDate+0x3>
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
    371e:	40 90 53 05 	lds	r4, 0x0553	; 0x800553 <main_nmeaTimeUtcInt>
    3722:	50 90 54 05 	lds	r5, 0x0554	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    3726:	60 90 55 05 	lds	r6, 0x0555	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    372a:	70 90 56 05 	lds	r7, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x3>
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
    372e:	2c e1       	ldi	r18, 0x1C	; 28
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	44 e9       	ldi	r20, 0x94	; 148
    3734:	52 e0       	ldi	r21, 0x02	; 2
    3736:	6d e8       	ldi	r22, 0x8D	; 141
    3738:	73 e0       	ldi	r23, 0x03	; 3
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	dc d4       	rcall	.+2488   	; 0x40f6 <memory_fw_copyBuffer>
				uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
    373e:	74 e6       	ldi	r23, 0x64	; 100
    3740:	c7 2e       	mov	r12, r23
    3742:	d1 2c       	mov	r13, r1
    3744:	e1 2c       	mov	r14, r1
    3746:	f1 2c       	mov	r15, r1
    3748:	c3 01       	movw	r24, r6
    374a:	b2 01       	movw	r22, r4
    374c:	a7 01       	movw	r20, r14
    374e:	96 01       	movw	r18, r12
    3750:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3754:	1f 92       	push	r1
    3756:	6f 93       	push	r22
				/* the timestamp */
				uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
    3758:	ca 01       	movw	r24, r20
    375a:	b9 01       	movw	r22, r18
    375c:	a7 01       	movw	r20, r14
    375e:	96 01       	movw	r18, r12
    3760:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3764:	1f 92       	push	r1
    3766:	6f 93       	push	r22
			{
				/* the timestamp */
				uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
    3768:	c3 01       	movw	r24, r6
    376a:	b2 01       	movw	r22, r4
    376c:	20 e1       	ldi	r18, 0x10	; 16
    376e:	37 e2       	ldi	r19, 0x27	; 39
    3770:	40 e0       	ldi	r20, 0x00	; 0
    3772:	50 e0       	ldi	r21, 0x00	; 0
    3774:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3778:	1f 92       	push	r1
    377a:	2f 93       	push	r18
			case 0:
			{
				/* the timestamp */
				uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
    377c:	c5 01       	movw	r24, r10
    377e:	b4 01       	movw	r22, r8
    3780:	20 e4       	ldi	r18, 0x40	; 64
    3782:	32 e4       	ldi	r19, 0x42	; 66
    3784:	4f e0       	ldi	r20, 0x0F	; 15
    3786:	50 e0       	ldi	r21, 0x00	; 0
    3788:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    378c:	1f 92       	push	r1
    378e:	2f 93       	push	r18
			default:
			case 0:
			{
				/* the timestamp */
				uint16_t year	=  main_nmeaDate					% 10000;
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
    3790:	c5 01       	movw	r24, r10
    3792:	b4 01       	movw	r22, r8
    3794:	20 e1       	ldi	r18, 0x10	; 16
    3796:	37 e2       	ldi	r19, 0x27	; 39
    3798:	40 e0       	ldi	r20, 0x00	; 0
    379a:	50 e0       	ldi	r21, 0x00	; 0
    379c:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
    37a0:	16 2f       	mov	r17, r22
    37a2:	07 2f       	mov	r16, r23
    37a4:	ca 01       	movw	r24, r20
    37a6:	b9 01       	movw	r22, r18
    37a8:	a7 01       	movw	r20, r14
    37aa:	96 01       	movw	r18, r12
    37ac:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    37b0:	1f 92       	push	r1
    37b2:	6f 93       	push	r22
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	a2 c0       	rjmp	.+324    	; 0x38fe <main_fw_giveAway+0x1b5e>
			break;

			case 1:
			{
				/* SAT data */
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC22, sizeof(PM_FORMAT_LC22));
    37ba:	22 e2       	ldi	r18, 0x22	; 34
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	42 e7       	ldi	r20, 0x72	; 114
    37c0:	52 e0       	ldi	r21, 0x02	; 2
    37c2:	6d e8       	ldi	r22, 0x8D	; 141
    37c4:	73 e0       	ldi	r23, 0x03	; 3
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	96 d4       	rcall	.+2348   	; 0x40f6 <memory_fw_copyBuffer>
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    37ca:	b0 90 69 05 	lds	r11, 0x0569	; 0x800569 <main_nmeaSatsEphemerisGlonass>
    37ce:	a0 90 6a 05 	lds	r10, 0x056A	; 0x80056a <main_nmeaSatsEphemerisGlonass+0x1>
    37d2:	10 91 6b 05 	lds	r17, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGpsGalileoQzss>
    37d6:	00 91 6c 05 	lds	r16, 0x056C	; 0x80056c <main_nmeaSatsEphemerisGpsGalileoQzss+0x1>
    37da:	c0 90 63 05 	lds	r12, 0x0563	; 0x800563 <main_nmeaPdop>
    37de:	d0 90 64 05 	lds	r13, 0x0564	; 0x800564 <main_nmeaPdop+0x1>
    37e2:	e0 90 65 05 	lds	r14, 0x0565	; 0x800565 <main_nmeaPdop+0x2>
    37e6:	f0 90 66 05 	lds	r15, 0x0566	; 0x800566 <main_nmeaPdop+0x3>
    37ea:	41 e0       	ldi	r20, 0x01	; 1
    37ec:	c7 01       	movw	r24, r14
    37ee:	b6 01       	movw	r22, r12
    37f0:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    37f4:	af 92       	push	r10
    37f6:	bf 92       	push	r11
    37f8:	1f 92       	push	r1
    37fa:	2b ee       	ldi	r18, 0xEB	; 235
    37fc:	2f 93       	push	r18
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	1f 92       	push	r1
    3804:	2f ed       	ldi	r18, 0xDF	; 223
    3806:	2f 93       	push	r18
    3808:	9f 93       	push	r25
    380a:	8f 93       	push	r24
    380c:	c7 01       	movw	r24, r14
    380e:	b6 01       	movw	r22, r12
    3810:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    3814:	7f 93       	push	r23
    3816:	6f 93       	push	r22
    3818:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <main_nmeaPosFixIndicator+0x1>
    381c:	8f 93       	push	r24
    381e:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaPosFixIndicator>
    3822:	8f 93       	push	r24
    3824:	1f 92       	push	r1
    3826:	86 e4       	ldi	r24, 0x46	; 70
    3828:	8f 93       	push	r24
    382a:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <main_nmeaMode2+0x1>
    382e:	8f 93       	push	r24
    3830:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaMode2>
    3834:	8f 93       	push	r24
    3836:	1f 92       	push	r1
    3838:	8d e4       	ldi	r24, 0x4D	; 77
    383a:	8f 93       	push	r24
    383c:	8d e8       	ldi	r24, 0x8D	; 141
    383e:	93 e0       	ldi	r25, 0x03	; 3
    3840:	9f 93       	push	r25
    3842:	8f 93       	push	r24
    3844:	8d e0       	ldi	r24, 0x0D	; 13
    3846:	94 e0       	ldi	r25, 0x04	; 4
    3848:	9f 93       	push	r25
    384a:	8f 93       	push	r24
    384c:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
    3850:	60 c0       	rjmp	.+192    	; 0x3912 <main_fw_giveAway+0x1b72>
			break;

			case 2:
			{
				/* PWM data */
				uint8_t sreg = SREG;
    3852:	8f b7       	in	r24, 0x3f	; 63
				cli();
    3854:	f8 94       	cli
				uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
    3856:	60 91 34 05 	lds	r22, 0x0534	; 0x800534 <fastPwmLoopVal>
				uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
    385a:	10 91 33 05 	lds	r17, 0x0533	; 0x800533 <fastPwmSubLoopVal>
				SREG = sreg;
    385e:	8f bf       	out	0x3f, r24	; 63
}

static float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    386a:	6b 01       	movw	r12, r22
    386c:	7c 01       	movw	r14, r24
    386e:	61 2f       	mov	r22, r17
    3870:	70 e0       	ldi	r23, 0x00	; 0
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    387a:	20 e0       	ldi	r18, 0x00	; 0
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	40 e8       	ldi	r20, 0x80	; 128
    3880:	5b e3       	ldi	r21, 0x3B	; 59
    3882:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    3886:	9b 01       	movw	r18, r22
    3888:	ac 01       	movw	r20, r24
    388a:	c7 01       	movw	r24, r14
    388c:	b6 01       	movw	r22, r12
    388e:	0e 94 16 30 	call	0x602c	; 0x602c <__addsf3>
    3892:	6b 01       	movw	r12, r22
    3894:	7c 01       	movw	r14, r24
				uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
				uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
				SREG = sreg;

				float l_timer = main_fw_calcTimerToFloat(localFastPwmLoopVal, localFastPwmSubLoopVal);
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC23, sizeof(PM_FORMAT_LC23));
    3896:	29 e1       	ldi	r18, 0x19	; 25
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	49 e5       	ldi	r20, 0x59	; 89
    389c:	52 e0       	ldi	r21, 0x02	; 2
    389e:	6d e8       	ldi	r22, 0x8D	; 141
    38a0:	73 e0       	ldi	r23, 0x03	; 3
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	28 d4       	rcall	.+2128   	; 0x40f6 <memory_fw_copyBuffer>
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    38a6:	80 90 79 05 	lds	r8, 0x0579	; 0x800579 <mainAdcPullVolts>
    38aa:	90 90 7a 05 	lds	r9, 0x057A	; 0x80057a <mainAdcPullVolts+0x1>
    38ae:	a0 90 7b 05 	lds	r10, 0x057B	; 0x80057b <mainAdcPullVolts+0x2>
    38b2:	b0 90 7c 05 	lds	r11, 0x057C	; 0x80057c <mainAdcPullVolts+0x3>
    38b6:	43 e0       	ldi	r20, 0x03	; 3
    38b8:	c5 01       	movw	r24, r10
    38ba:	b4 01       	movw	r22, r8
    38bc:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    38c0:	78 2e       	mov	r7, r24
    38c2:	69 2e       	mov	r6, r25
    38c4:	43 e0       	ldi	r20, 0x03	; 3
    38c6:	c7 01       	movw	r24, r14
    38c8:	b6 01       	movw	r22, r12
    38ca:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    38ce:	18 2f       	mov	r17, r24
    38d0:	09 2f       	mov	r16, r25
    38d2:	6f 92       	push	r6
    38d4:	7f 92       	push	r7
    38d6:	c5 01       	movw	r24, r10
    38d8:	b4 01       	movw	r22, r8
    38da:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    38de:	7f 93       	push	r23
    38e0:	6f 93       	push	r22
    38e2:	1f 92       	push	r1
    38e4:	8b ea       	ldi	r24, 0xAB	; 171
    38e6:	8f 93       	push	r24
    38e8:	0f 93       	push	r16
    38ea:	1f 93       	push	r17
    38ec:	c7 01       	movw	r24, r14
    38ee:	b6 01       	movw	r22, r12
    38f0:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    38f4:	7f 93       	push	r23
    38f6:	6f 93       	push	r22
    38f8:	1f 92       	push	r1
    38fa:	80 e5       	ldi	r24, 0x50	; 80
    38fc:	8f 93       	push	r24
    38fe:	8d e8       	ldi	r24, 0x8D	; 141
    3900:	93 e0       	ldi	r25, 0x03	; 3
    3902:	9f 93       	push	r25
    3904:	8f 93       	push	r24
    3906:	8d e0       	ldi	r24, 0x0D	; 13
    3908:	94 e0       	ldi	r25, 0x04	; 4
    390a:	9f 93       	push	r25
    390c:	8f 93       	push	r24
    390e:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
    3912:	18 2f       	mov	r17, r24
				'P',
				(int) l_timer, s_flt_frac(l_timer, 3),
				0xab,
				(int) mainAdcPullVolts, s_flt_frac(mainAdcPullVolts, 3));
				twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <twi_mcp23017_av1624_fw_gotoPosition>
				twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    391c:	61 2f       	mov	r22, r17
    391e:	8d e0       	ldi	r24, 0x0D	; 13
    3920:	94 e0       	ldi	r25, 0x04	; 4
    3922:	0e 94 1d 28 	call	0x503a	; 0x503a <twi_mcp23017_av1624_fw_writeString>
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
			}
			break;
		}
		usbPoll();
    3930:	0e 94 2a 2a 	call	0x5454	; 0x5454 <usbPoll>

		if (++displaySubNr >= 3) {
    3934:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
    3938:	8f 5f       	subi	r24, 0xFF	; 255
    393a:	83 30       	cpi	r24, 0x03	; 3
    393c:	18 f4       	brcc	.+6      	; 0x3944 <main_fw_giveAway+0x1ba4>
    393e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
    3942:	0a c0       	rjmp	.+20     	; 0x3958 <main_fw_giveAway+0x1bb8>
			displaySubNr = 0;
    3944:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
			++displayNr;
    3948:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <displayNr.2868>
    394c:	8f 5f       	subi	r24, 0xFF	; 255
			displayNr %= 3;
    394e:	63 e0       	ldi	r22, 0x03	; 3
    3950:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <__udivmodqi4>
    3954:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <displayNr.2868>
}

static void twi_smart_lcd_fw_showStatus(void)
{
	/* Init device */
	if (!main_bf.mainIsSmartAttached) {
    3958:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    395c:	80 ff       	sbrs	r24, 0
		twi_smart_lcd_fw_init();
    395e:	0e 94 64 28 	call	0x50c8	; 0x50c8 <twi_smart_lcd_fw_init>
	}

	{
		uint8_t clk_state;
		float phaseVolts;
		uint8_t sreg = SREG;
    3962:	8f b7       	in	r24, 0x3f	; 63
		cli();
    3964:	f8 94       	cli
		clk_state = (uint8_t) mainRefClkState;
    3966:	10 91 9d 05 	lds	r17, 0x059D	; 0x80059d <mainRefClkState>
		phaseVolts = mainAdcPhaseVolts;
    396a:	c0 90 75 05 	lds	r12, 0x0575	; 0x800575 <mainAdcPhaseVolts>
    396e:	d0 90 76 05 	lds	r13, 0x0576	; 0x800576 <mainAdcPhaseVolts+0x1>
    3972:	e0 90 77 05 	lds	r14, 0x0577	; 0x800577 <mainAdcPhaseVolts+0x2>
    3976:	f0 90 78 05 	lds	r15, 0x0578	; 0x800578 <mainAdcPhaseVolts+0x3>
		SREG = sreg;
    397a:	8f bf       	out	0x3f, r24	; 63

		uint16_t phaseVolt1000 = (uint16_t) (phaseVolts * 1000.0f);
		int16_t  phaseDeg100   = (int16_t)  (100.0f * (((ADC_PHASE_VOLTS_CENTER - phaseVolts) / ADC_PHASE_DELTAVOLTS_90DEG) * 90.0f));
    397c:	a7 01       	movw	r20, r14
    397e:	96 01       	movw	r18, r12
    3980:	66 e6       	ldi	r22, 0x66	; 102
    3982:	76 e6       	ldi	r23, 0x66	; 102
    3984:	86 ea       	ldi	r24, 0xA6	; 166
    3986:	9f e3       	ldi	r25, 0x3F	; 63
    3988:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    398c:	23 e3       	ldi	r18, 0x33	; 51
    398e:	33 e3       	ldi	r19, 0x33	; 51
    3990:	43 eb       	ldi	r20, 0xB3	; 179
    3992:	5f e3       	ldi	r21, 0x3F	; 63
    3994:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	44 eb       	ldi	r20, 0xB4	; 180
    399e:	52 e4       	ldi	r21, 0x42	; 66
    39a0:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	48 ec       	ldi	r20, 0xC8	; 200
    39aa:	52 e4       	ldi	r21, 0x42	; 66
    39ac:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    39b0:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    39b4:	4b 01       	movw	r8, r22
    39b6:	5c 01       	movw	r10, r24
		cli();
		clk_state = (uint8_t) mainRefClkState;
		phaseVolts = mainAdcPhaseVolts;
		SREG = sreg;

		uint16_t phaseVolt1000 = (uint16_t) (phaseVolts * 1000.0f);
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	4a e7       	ldi	r20, 0x7A	; 122
    39be:	54 e4       	ldi	r21, 0x44	; 68
    39c0:	c7 01       	movw	r24, r14
    39c2:	b6 01       	movw	r22, r12
    39c4:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    39c8:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fixunssfsi>
		int16_t  phaseDeg100   = (int16_t)  (100.0f * (((ADC_PHASE_VOLTS_CENTER - phaseVolts) / ADC_PHASE_DELTAVOLTS_90DEG) * 90.0f));
		twi_smart_lcd_fw_set_clkstate_phaseVolt__phaseDeg(clk_state, phaseVolt1000, phaseDeg100);
    39cc:	a4 01       	movw	r20, r8
    39ce:	81 2f       	mov	r24, r17
    39d0:	0e 94 65 28 	call	0x50ca	; 0x50ca <twi_smart_lcd_fw_set_clkstate_phaseVolt__phaseDeg>
	}

	{
		long date;
		uint8_t sreg = SREG;
    39d4:	8f b7       	in	r24, 0x3f	; 63
		cli();
    39d6:	f8 94       	cli
		date = main_nmeaDate;
    39d8:	c0 90 57 05 	lds	r12, 0x0557	; 0x800557 <main_nmeaDate>
    39dc:	d0 90 58 05 	lds	r13, 0x0558	; 0x800558 <main_nmeaDate+0x1>
    39e0:	e0 90 59 05 	lds	r14, 0x0559	; 0x800559 <main_nmeaDate+0x2>
    39e4:	f0 90 5a 05 	lds	r15, 0x055A	; 0x80055a <main_nmeaDate+0x3>
		SREG = sreg;
    39e8:	8f bf       	out	0x3f, r24	; 63

		uint16_t year  = (uint16_t) (date % 10000);
		uint8_t  month = (uint8_t) ((date / 10000) % 100);
		uint8_t  day   = (uint8_t)  (date / 1000000);
    39ea:	c7 01       	movw	r24, r14
    39ec:	b6 01       	movw	r22, r12
    39ee:	20 e4       	ldi	r18, 0x40	; 64
    39f0:	32 e4       	ldi	r19, 0x42	; 66
    39f2:	4f e0       	ldi	r20, 0x0F	; 15
    39f4:	50 e0       	ldi	r21, 0x00	; 0
    39f6:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
    39fa:	12 2f       	mov	r17, r18
		cli();
		date = main_nmeaDate;
		SREG = sreg;

		uint16_t year  = (uint16_t) (date % 10000);
		uint8_t  month = (uint8_t) ((date / 10000) % 100);
    39fc:	90 e1       	ldi	r25, 0x10	; 16
    39fe:	89 2e       	mov	r8, r25
    3a00:	97 e2       	ldi	r25, 0x27	; 39
    3a02:	99 2e       	mov	r9, r25
    3a04:	a1 2c       	mov	r10, r1
    3a06:	b1 2c       	mov	r11, r1
    3a08:	c7 01       	movw	r24, r14
    3a0a:	b6 01       	movw	r22, r12
    3a0c:	a5 01       	movw	r20, r10
    3a0e:	94 01       	movw	r18, r8
    3a10:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
    3a14:	2b 01       	movw	r4, r22
    3a16:	3c 01       	movw	r6, r24
    3a18:	64 e6       	ldi	r22, 0x64	; 100
    3a1a:	c6 2e       	mov	r12, r22
    3a1c:	d1 2c       	mov	r13, r1
    3a1e:	e1 2c       	mov	r14, r1
    3a20:	f1 2c       	mov	r15, r1
    3a22:	ca 01       	movw	r24, r20
    3a24:	b9 01       	movw	r22, r18
    3a26:	a7 01       	movw	r20, r14
    3a28:	96 01       	movw	r18, r12
    3a2a:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
		uint8_t  day   = (uint8_t)  (date / 1000000);
		twi_smart_lcd_fw_set_date(year, month, day);
    3a2e:	41 2f       	mov	r20, r17
    3a30:	c2 01       	movw	r24, r4
    3a32:	0e 94 71 28 	call	0x50e2	; 0x50e2 <twi_smart_lcd_fw_set_date>
	}

	{
		long utc;
		uint8_t sreg = SREG;
    3a36:	8f b7       	in	r24, 0x3f	; 63
		cli();
    3a38:	f8 94       	cli
		utc = main_nmeaTimeUtcInt;
    3a3a:	40 90 53 05 	lds	r4, 0x0553	; 0x800553 <main_nmeaTimeUtcInt>
    3a3e:	50 90 54 05 	lds	r5, 0x0554	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    3a42:	60 90 55 05 	lds	r6, 0x0555	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    3a46:	70 90 56 05 	lds	r7, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x3>
		SREG = sreg;
    3a4a:	8f bf       	out	0x3f, r24	; 63

		uint8_t  hour   = (uint8_t)  (utc / 10000);
		uint8_t  minute = (uint8_t) ((utc / 100) % 100);
		uint8_t  second = (uint8_t)  (utc % 100);
    3a4c:	c3 01       	movw	r24, r6
    3a4e:	b2 01       	movw	r22, r4
    3a50:	a7 01       	movw	r20, r14
    3a52:	96 01       	movw	r18, r12
    3a54:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
    3a58:	06 2f       	mov	r16, r22
		cli();
		utc = main_nmeaTimeUtcInt;
		SREG = sreg;

		uint8_t  hour   = (uint8_t)  (utc / 10000);
		uint8_t  minute = (uint8_t) ((utc / 100) % 100);
    3a5a:	ca 01       	movw	r24, r20
    3a5c:	b9 01       	movw	r22, r18
    3a5e:	a7 01       	movw	r20, r14
    3a60:	96 01       	movw	r18, r12
    3a62:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
    3a66:	16 2f       	mov	r17, r22
		uint8_t sreg = SREG;
		cli();
		utc = main_nmeaTimeUtcInt;
		SREG = sreg;

		uint8_t  hour   = (uint8_t)  (utc / 10000);
    3a68:	c3 01       	movw	r24, r6
    3a6a:	b2 01       	movw	r22, r4
    3a6c:	a5 01       	movw	r20, r10
    3a6e:	94 01       	movw	r18, r8
    3a70:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <__divmodsi4>
    3a74:	82 2f       	mov	r24, r18
		uint8_t  minute = (uint8_t) ((utc / 100) % 100);
		uint8_t  second = (uint8_t)  (utc % 100);
		twi_smart_lcd_fw_set_time(hour, minute, second);
    3a76:	40 2f       	mov	r20, r16
    3a78:	61 2f       	mov	r22, r17
    3a7a:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <twi_smart_lcd_fw_set_time>
	}

	{
		float ppm;
		uint8_t sreg = SREG;
    3a7e:	8f b7       	in	r24, 0x3f	; 63
		cli();
    3a80:	f8 94       	cli
		ppm = mainPpm;
    3a82:	c0 90 7d 05 	lds	r12, 0x057D	; 0x80057d <mainPpm>
    3a86:	d0 90 7e 05 	lds	r13, 0x057E	; 0x80057e <mainPpm+0x1>
    3a8a:	e0 90 7f 05 	lds	r14, 0x057F	; 0x80057f <mainPpm+0x2>
    3a8e:	f0 90 80 05 	lds	r15, 0x0580	; 0x800580 <mainPpm+0x3>
		SREG = sreg;
    3a92:	8f bf       	out	0x3f, r24	; 63

		float localPpb = ppm > 0 ?  ppm * 1000.0f : ppm * -1000.0f;
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	a9 01       	movw	r20, r18
    3a9a:	c7 01       	movw	r24, r14
    3a9c:	b6 01       	movw	r22, r12
    3a9e:	0e 94 1c 32 	call	0x6438	; 0x6438 <__gesf2>
    3aa2:	18 16       	cp	r1, r24
    3aa4:	2c f4       	brge	.+10     	; 0x3ab0 <main_fw_giveAway+0x1d10>
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	4a e7       	ldi	r20, 0x7A	; 122
    3aac:	54 e4       	ldi	r21, 0x44	; 68
    3aae:	04 c0       	rjmp	.+8      	; 0x3ab8 <main_fw_giveAway+0x1d18>
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	4a e7       	ldi	r20, 0x7A	; 122
    3ab6:	54 ec       	ldi	r21, 0xC4	; 196
    3ab8:	c7 01       	movw	r24, r14
    3aba:	b6 01       	movw	r22, r12
    3abc:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    3ac0:	2b 01       	movw	r4, r22
    3ac2:	3c 01       	movw	r6, r24
		int16_t ppb_int  = (int16_t) localPpb;
    3ac4:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    3ac8:	4b 01       	movw	r8, r22
    3aca:	5c 01       	movw	r10, r24
    3acc:	8b 01       	movw	r16, r22
		uint16_t ppb_frac1000 = (uint16_t) ((localPpb - ppb_int) * 1000.0f);
    3ace:	07 2e       	mov	r0, r23
    3ad0:	00 0c       	add	r0, r0
    3ad2:	88 0b       	sbc	r24, r24
    3ad4:	99 0b       	sbc	r25, r25
    3ad6:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    3ada:	9b 01       	movw	r18, r22
    3adc:	ac 01       	movw	r20, r24
    3ade:	c3 01       	movw	r24, r6
    3ae0:	b2 01       	movw	r22, r4
    3ae2:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	4a e7       	ldi	r20, 0x7A	; 122
    3aec:	54 e4       	ldi	r21, 0x44	; 68
    3aee:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    3af2:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fixunssfsi>
    3af6:	2b 01       	movw	r4, r22
    3af8:	3c 01       	movw	r6, r24
		if (ppm < 0) {
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	a9 01       	movw	r20, r18
    3b00:	c7 01       	movw	r24, r14
    3b02:	b6 01       	movw	r22, r12
    3b04:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    3b08:	87 ff       	sbrs	r24, 7
    3b0a:	04 c0       	rjmp	.+8      	; 0x3b14 <main_fw_giveAway+0x1d74>
			ppb_int = -ppb_int;
    3b0c:	00 27       	eor	r16, r16
    3b0e:	11 27       	eor	r17, r17
    3b10:	08 19       	sub	r16, r8
    3b12:	19 09       	sbc	r17, r9
		}
		twi_smart_lcd_fw_set_ppb(ppb_int, ppb_frac1000);
    3b14:	b2 01       	movw	r22, r4
    3b16:	c8 01       	movw	r24, r16
    3b18:	0e 94 86 28 	call	0x510c	; 0x510c <twi_smart_lcd_fw_set_ppb>
	}

	{
		uint8_t pwm_int;
		uint8_t pwm_frac256;
		uint8_t sreg = SREG;
    3b1c:	9f b7       	in	r25, 0x3f	; 63
		cli();
    3b1e:	f8 94       	cli
		pwm_int = fastPwmLoopVal;
    3b20:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <fastPwmLoopVal>
		pwm_frac256 = fastPwmSubLoopVal;
    3b24:	60 91 33 05 	lds	r22, 0x0533	; 0x800533 <fastPwmSubLoopVal>
		SREG = sreg;
    3b28:	9f bf       	out	0x3f, r25	; 63

		twi_smart_lcd_fw_set_pwm(pwm_int, pwm_frac256);
    3b2a:	0e 94 91 28 	call	0x5122	; 0x5122 <twi_smart_lcd_fw_set_pwm>
	}

	{
		float pv;
		uint8_t sreg = SREG;
    3b2e:	8f b7       	in	r24, 0x3f	; 63
		cli();
    3b30:	f8 94       	cli
		pv = mainAdcPullVolts;
    3b32:	c0 90 79 05 	lds	r12, 0x0579	; 0x800579 <mainAdcPullVolts>
    3b36:	d0 90 7a 05 	lds	r13, 0x057A	; 0x80057a <mainAdcPullVolts+0x1>
    3b3a:	e0 90 7b 05 	lds	r14, 0x057B	; 0x80057b <mainAdcPullVolts+0x2>
    3b3e:	f0 90 7c 05 	lds	r15, 0x057C	; 0x80057c <mainAdcPullVolts+0x3>
		SREG = sreg;
    3b42:	8f bf       	out	0x3f, r24	; 63

		uint8_t pv_int   = (uint8_t) pv;
    3b44:	c7 01       	movw	r24, r14
    3b46:	b6 01       	movw	r22, r12
    3b48:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fixunssfsi>
    3b4c:	16 2f       	mov	r17, r22
		uint16_t pv_frac1000 = (uint16_t) ((pv - pv_int) * 1000.0f);
    3b4e:	70 e0       	ldi	r23, 0x00	; 0
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    3b58:	9b 01       	movw	r18, r22
    3b5a:	ac 01       	movw	r20, r24
    3b5c:	c7 01       	movw	r24, r14
    3b5e:	b6 01       	movw	r22, r12
    3b60:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	4a e7       	ldi	r20, 0x7A	; 122
    3b6a:	54 e4       	ldi	r21, 0x44	; 68
    3b6c:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    3b70:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fixunssfsi>
		twi_smart_lcd_fw_set_pv(pv_int, pv_frac1000);
    3b74:	81 2f       	mov	r24, r17
    3b76:	0e 94 9a 28 	call	0x5134	; 0x5134 <twi_smart_lcd_fw_set_pv>

	{
		uint8_t sat_west;
		uint8_t sat_east;
		uint8_t sat_used;
		uint8_t sreg = SREG;
    3b7a:	9f b7       	in	r25, 0x3f	; 63
		cli();
    3b7c:	f8 94       	cli
		sat_west = (uint8_t) main_nmeaSatsEphemerisGpsGalileoQzss;
    3b7e:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGpsGalileoQzss>
		sat_east = (uint8_t) main_nmeaSatsEphemerisGlonass;
    3b82:	60 91 69 05 	lds	r22, 0x0569	; 0x800569 <main_nmeaSatsEphemerisGlonass>
		sat_used = (uint8_t) main_nmeaSatsUsed;
    3b86:	40 91 67 05 	lds	r20, 0x0567	; 0x800567 <main_nmeaSatsUsed>
		SREG = sreg;
    3b8a:	9f bf       	out	0x3f, r25	; 63

		twi_smart_lcd_fw_set_sat_use(sat_west, sat_east, sat_used);
    3b8c:	0e 94 a4 28 	call	0x5148	; 0x5148 <twi_smart_lcd_fw_set_sat_use>
	}

	{
		float sat_dop;
		uint8_t sreg = SREG;
    3b90:	2f b7       	in	r18, 0x3f	; 63
		cli();
    3b92:	f8 94       	cli
		sat_dop = main_nmeaPdop;
    3b94:	60 91 63 05 	lds	r22, 0x0563	; 0x800563 <main_nmeaPdop>
    3b98:	70 91 64 05 	lds	r23, 0x0564	; 0x800564 <main_nmeaPdop+0x1>
    3b9c:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <main_nmeaPdop+0x2>
    3ba0:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <main_nmeaPdop+0x3>
		SREG = sreg;
    3ba4:	2f bf       	out	0x3f, r18	; 63

		uint16_t sat_dop100 = (uint16_t) (sat_dop * 100.0f);
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	48 ec       	ldi	r20, 0xC8	; 200
    3bac:	52 e4       	ldi	r21, 0x42	; 66
    3bae:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    3bb2:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fixunssfsi>
		twi_smart_lcd_fw_set_sat_dop(sat_dop100);
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	0e 94 ae 28 	call	0x515c	; 0x515c <twi_smart_lcd_fw_set_sat_dop>
	}

	{
		uint8_t pos_fi;
		uint8_t pos_m2;
		uint8_t sreg = SREG;
    3bbc:	9f b7       	in	r25, 0x3f	; 63
		cli();
    3bbe:	f8 94       	cli
		pos_fi = (uint8_t) main_nmeaPosFixIndicator;
    3bc0:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaPosFixIndicator>
		pos_m2 = (uint8_t) main_nmeaMode2;
    3bc4:	60 91 6f 05 	lds	r22, 0x056F	; 0x80056f <main_nmeaMode2>
		SREG = sreg;
    3bc8:	9f bf       	out	0x3f, r25	; 63

		twi_smart_lcd_fw_set_pos_state(pos_fi, pos_m2);
    3bca:	0e 94 b7 28 	call	0x516e	; 0x516e <twi_smart_lcd_fw_set_pos_state>
	}

	{
		uint8_t lat_sgn;
		float lat;
		uint8_t sreg = SREG;
    3bce:	8f b7       	in	r24, 0x3f	; 63
		cli();
    3bd0:	f8 94       	cli
		lat_sgn = (uint8_t) main_nmeaPosLatSign;
    3bd2:	80 90 4c 05 	lds	r8, 0x054C	; 0x80054c <main_nmeaPosLatSign>
		lat = main_nmeaPosLat;
    3bd6:	40 90 4d 05 	lds	r4, 0x054D	; 0x80054d <main_nmeaPosLat>
    3bda:	50 90 4e 05 	lds	r5, 0x054E	; 0x80054e <main_nmeaPosLat+0x1>
    3bde:	60 90 4f 05 	lds	r6, 0x054F	; 0x80054f <main_nmeaPosLat+0x2>
    3be2:	70 90 50 05 	lds	r7, 0x0550	; 0x800550 <main_nmeaPosLat+0x3>
		SREG = sreg;
    3be6:	8f bf       	out	0x3f, r24	; 63

		uint8_t  lat_deg = (uint8_t) (lat / 100.0f);
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	48 ec       	ldi	r20, 0xC8	; 200
    3bee:	52 e4       	ldi	r21, 0x42	; 66
    3bf0:	c3 01       	movw	r24, r6
    3bf2:	b2 01       	movw	r22, r4
    3bf4:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    3bf8:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fixunssfsi>
    3bfc:	96 2e       	mov	r9, r22
		uint8_t  lat_min_int = (uint8_t) ((int) lat % 100);
    3bfe:	c3 01       	movw	r24, r6
    3c00:	b2 01       	movw	r22, r4
    3c02:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    3c06:	04 e6       	ldi	r16, 0x64	; 100
    3c08:	10 e0       	ldi	r17, 0x00	; 0
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	b8 01       	movw	r22, r16
    3c0e:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <__divmodhi4>
    3c12:	5c 01       	movw	r10, r24
		uint16_t lat_min_frac1000 = (uint16_t) ((lat - (lat_deg * 100 + lat_min_int)) * 1000.0f);
    3c14:	6c 01       	movw	r12, r24
    3c16:	dd 24       	eor	r13, r13
    3c18:	b4 e6       	ldi	r27, 0x64	; 100
    3c1a:	9b 9e       	mul	r9, r27
    3c1c:	c0 0c       	add	r12, r0
    3c1e:	d1 1c       	adc	r13, r1
    3c20:	11 24       	eor	r1, r1
    3c22:	b6 01       	movw	r22, r12
    3c24:	dd 0c       	add	r13, r13
    3c26:	88 0b       	sbc	r24, r24
    3c28:	99 0b       	sbc	r25, r25
    3c2a:	0e 94 19 31 	call	0x6232	; 0x6232 <__floatsisf>
    3c2e:	9b 01       	movw	r18, r22
    3c30:	ac 01       	movw	r20, r24
    3c32:	c3 01       	movw	r24, r6
    3c34:	b2 01       	movw	r22, r4
    3c36:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4a e7       	ldi	r20, 0x7A	; 122
    3c40:	54 e4       	ldi	r21, 0x44	; 68
    3c42:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    3c46:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fixunssfsi>
		twi_smart_lcd_fw_set_pos_lat(lat_sgn, lat_deg, lat_min_int, lat_min_frac1000);
    3c4a:	9b 01       	movw	r18, r22
    3c4c:	4a 2d       	mov	r20, r10
    3c4e:	69 2d       	mov	r22, r9
    3c50:	88 2d       	mov	r24, r8
    3c52:	0e 94 c0 28 	call	0x5180	; 0x5180 <twi_smart_lcd_fw_set_pos_lat>
	}

	{
		uint8_t lon_sgn;
		float lon;
		uint8_t sreg = SREG;
    3c56:	8f b7       	in	r24, 0x3f	; 63
		cli();
    3c58:	f8 94       	cli
		lon_sgn = main_nmeaPosLonSign;
    3c5a:	70 90 47 05 	lds	r7, 0x0547	; 0x800547 <main_nmeaPosLonSign>
		lon = main_nmeaPosLon;
    3c5e:	c0 90 48 05 	lds	r12, 0x0548	; 0x800548 <main_nmeaPosLon>
    3c62:	d0 90 49 05 	lds	r13, 0x0549	; 0x800549 <main_nmeaPosLon+0x1>
    3c66:	e0 90 4a 05 	lds	r14, 0x054A	; 0x80054a <main_nmeaPosLon+0x2>
    3c6a:	f0 90 4b 05 	lds	r15, 0x054B	; 0x80054b <main_nmeaPosLon+0x3>
		SREG = sreg;
    3c6e:	8f bf       	out	0x3f, r24	; 63

		uint16_t lon_deg = (uint16_t) (lon / 100.0f);
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	48 ec       	ldi	r20, 0xC8	; 200
    3c76:	52 e4       	ldi	r21, 0x42	; 66
    3c78:	c7 01       	movw	r24, r14
    3c7a:	b6 01       	movw	r22, r12
    3c7c:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__divsf3>
    3c80:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fixunssfsi>
    3c84:	4b 01       	movw	r8, r22
    3c86:	5c 01       	movw	r10, r24
		uint8_t  lon_min_int = (uint16_t) ((int) lon % 100);
    3c88:	c7 01       	movw	r24, r14
    3c8a:	b6 01       	movw	r22, r12
    3c8c:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    3c90:	cb 01       	movw	r24, r22
    3c92:	b8 01       	movw	r22, r16
    3c94:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <__divmodhi4>
    3c98:	68 2e       	mov	r6, r24
		uint16_t lon_min_frac1000 = (uint16_t) ((lon - (lon_deg * 100 + lon_min_int)) * 1000.0f);
    3c9a:	84 e6       	ldi	r24, 0x64	; 100
    3c9c:	88 9d       	mul	r24, r8
    3c9e:	80 01       	movw	r16, r0
    3ca0:	89 9d       	mul	r24, r9
    3ca2:	10 0d       	add	r17, r0
    3ca4:	11 24       	eor	r1, r1
    3ca6:	06 0d       	add	r16, r6
    3ca8:	11 1d       	adc	r17, r1
    3caa:	b8 01       	movw	r22, r16
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	0e 94 17 31 	call	0x622e	; 0x622e <__floatunsisf>
    3cb4:	9b 01       	movw	r18, r22
    3cb6:	ac 01       	movw	r20, r24
    3cb8:	c7 01       	movw	r24, r14
    3cba:	b6 01       	movw	r22, r12
    3cbc:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	4a e7       	ldi	r20, 0x7A	; 122
    3cc6:	54 e4       	ldi	r21, 0x44	; 68
    3cc8:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    3ccc:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fixunssfsi>
		twi_smart_lcd_fw_set_pos_lon(lon_sgn, lon_deg, lon_min_int, lon_min_frac1000);
    3cd0:	9b 01       	movw	r18, r22
    3cd2:	46 2d       	mov	r20, r6
    3cd4:	68 2d       	mov	r22, r8
    3cd6:	87 2d       	mov	r24, r7
    3cd8:	0e 94 cc 28 	call	0x5198	; 0x5198 <twi_smart_lcd_fw_set_pos_lon>
	}

	{
		uint16_t height_int;
		uint16_t height_frac100;
		uint8_t sreg = SREG;
    3cdc:	1f b7       	in	r17, 0x3f	; 63
		cli();
    3cde:	f8 94       	cli
		height_int     = (int16_t) main_nmeaAltitudeM;
    3ce0:	c0 90 43 05 	lds	r12, 0x0543	; 0x800543 <main_nmeaAltitudeM>
    3ce4:	d0 90 44 05 	lds	r13, 0x0544	; 0x800544 <main_nmeaAltitudeM+0x1>
    3ce8:	e0 90 45 05 	lds	r14, 0x0545	; 0x800545 <main_nmeaAltitudeM+0x2>
    3cec:	f0 90 46 05 	lds	r15, 0x0546	; 0x800546 <main_nmeaAltitudeM+0x3>
		height_frac100 = (int16_t) ((main_nmeaAltitudeM - floorf(main_nmeaAltitudeM)) * 100.0f);
    3cf0:	c7 01       	movw	r24, r14
    3cf2:	b6 01       	movw	r22, r12
    3cf4:	0e 94 54 31 	call	0x62a8	; 0x62a8 <floor>
    3cf8:	9b 01       	movw	r18, r22
    3cfa:	ac 01       	movw	r20, r24
		SREG = sreg;
    3cfc:	1f bf       	out	0x3f, r17	; 63
		uint16_t height_int;
		uint16_t height_frac100;
		uint8_t sreg = SREG;
		cli();
		height_int     = (int16_t) main_nmeaAltitudeM;
		height_frac100 = (int16_t) ((main_nmeaAltitudeM - floorf(main_nmeaAltitudeM)) * 100.0f);
    3cfe:	c7 01       	movw	r24, r14
    3d00:	b6 01       	movw	r22, r12
    3d02:	0e 94 15 30 	call	0x602a	; 0x602a <__subsf3>
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	48 ec       	ldi	r20, 0xC8	; 200
    3d0c:	52 e4       	ldi	r21, 0x42	; 66
    3d0e:	0e 94 20 32 	call	0x6440	; 0x6440 <__mulsf3>
    3d12:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    3d16:	16 2f       	mov	r17, r22
	{
		uint16_t height_int;
		uint16_t height_frac100;
		uint8_t sreg = SREG;
		cli();
		height_int     = (int16_t) main_nmeaAltitudeM;
    3d18:	c7 01       	movw	r24, r14
    3d1a:	b6 01       	movw	r22, r12
    3d1c:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    3d20:	dc 01       	movw	r26, r24
    3d22:	cb 01       	movw	r24, r22
		height_frac100 = (int16_t) ((main_nmeaAltitudeM - floorf(main_nmeaAltitudeM)) * 100.0f);
		SREG = sreg;

		twi_smart_lcd_fw_set_pos_height(height_int, height_frac100);
    3d24:	61 2f       	mov	r22, r17
    3d26:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <twi_smart_lcd_fw_set_pos_height>

	/* Show status at connected LCD devices */
	twi_mcp23017_av1624_fw_showStatus();
	twi_smart_lcd_fw_showStatus();

	if (mainPwmTerminalAdj) {
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	a9 01       	movw	r20, r18
    3d30:	60 91 99 05 	lds	r22, 0x0599	; 0x800599 <mainPwmTerminalAdj>
    3d34:	70 91 9a 05 	lds	r23, 0x059A	; 0x80059a <mainPwmTerminalAdj+0x1>
    3d38:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <mainPwmTerminalAdj+0x2>
    3d3c:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x3>
    3d40:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    3d44:	88 23       	and	r24, r24
    3d46:	09 f4       	brne	.+2      	; 0x3d4a <main_fw_giveAway+0x1faa>
    3d48:	a7 c0       	rjmp	.+334    	; 0x3e98 <main_fw_giveAway+0x20f8>
		uint8_t localFastPwmSubLoopValNext;
		uint8_t localFastPwmLoopValNext;

		{
			/* correct PWM with  +/- <value> */
			uint8_t sreg = SREG;
    3d4a:	ff b6       	in	r15, 0x3f	; 63
			cli();
    3d4c:	f8 94       	cli
			localFastPwmLoopValBefore		= fastPwmLoopVal;
    3d4e:	10 91 34 05 	lds	r17, 0x0534	; 0x800534 <fastPwmLoopVal>
			localFastPwmSubLoopValBefore	= fastPwmSubLoopVal;
    3d52:	00 91 33 05 	lds	r16, 0x0533	; 0x800533 <fastPwmSubLoopVal>
			SREG = sreg;
    3d56:	ff be       	out	0x3f, r15	; 63

			/* calculate next value */
			localFastPwmLoopValNext		= localFastPwmLoopValBefore;
    3d58:	19 83       	std	Y+1, r17	; 0x01
			localFastPwmSubLoopValNext	= localFastPwmSubLoopValBefore;
    3d5a:	0a 83       	std	Y+2, r16	; 0x02
			(void) main_fw_calcTimerAdj(mainPwmTerminalAdj, &localFastPwmLoopValNext, &localFastPwmSubLoopValNext);
    3d5c:	60 91 99 05 	lds	r22, 0x0599	; 0x800599 <mainPwmTerminalAdj>
    3d60:	70 91 9a 05 	lds	r23, 0x059A	; 0x80059a <mainPwmTerminalAdj+0x1>
    3d64:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <mainPwmTerminalAdj+0x2>
    3d68:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x3>
    3d6c:	9e 01       	movw	r18, r28
    3d6e:	2e 5f       	subi	r18, 0xFE	; 254
    3d70:	3f 4f       	sbci	r19, 0xFF	; 255
    3d72:	ae 01       	movw	r20, r28
    3d74:	4f 5f       	subi	r20, 0xFF	; 255
    3d76:	5f 4f       	sbci	r21, 0xFF	; 255
    3d78:	0e 94 2d 0a 	call	0x145a	; 0x145a <main_fw_calcTimerAdj>

			/* write back the global variables for PWM and sub-PWM */
			cli();
    3d7c:	f8 94       	cli
			fastPwmLoopVal		= localFastPwmLoopValNext;
    3d7e:	89 81       	ldd	r24, Y+1	; 0x01
    3d80:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubLoopValNext;
    3d84:	8a 81       	ldd	r24, Y+2	; 0x02
    3d86:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <fastPwmSubLoopVal>
			SREG = sreg;
    3d8a:	ff be       	out	0x3f, r15	; 63
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_ID01, sizeof(PM_FORMAT_ID01));
    3d8c:	2b e6       	ldi	r18, 0x6B	; 107
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	45 e0       	ldi	r20, 0x05	; 5
    3d92:	55 e0       	ldi	r21, 0x05	; 5
    3d94:	6d e8       	ldi	r22, 0x8D	; 141
    3d96:	73 e0       	ldi	r23, 0x03	; 3
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	ad d1       	rcall	.+858    	; 0x40f6 <memory_fw_copyBuffer>
		uint8_t len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3d9c:	c0 90 99 05 	lds	r12, 0x0599	; 0x800599 <mainPwmTerminalAdj>
    3da0:	d0 90 9a 05 	lds	r13, 0x059A	; 0x80059a <mainPwmTerminalAdj+0x1>
    3da4:	e0 90 9b 05 	lds	r14, 0x059B	; 0x80059b <mainPwmTerminalAdj+0x2>
    3da8:	f0 90 9c 05 	lds	r15, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x3>
    3dac:	47 e0       	ldi	r20, 0x07	; 7
    3dae:	c7 01       	movw	r24, r14
    3db0:	b6 01       	movw	r22, r12
    3db2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    3db6:	1f 92       	push	r1
    3db8:	0f 93       	push	r16
    3dba:	1f 92       	push	r1
    3dbc:	1f 93       	push	r17
    3dbe:	9f 93       	push	r25
    3dc0:	8f 93       	push	r24
    3dc2:	c7 01       	movw	r24, r14
    3dc4:	b6 01       	movw	r22, r12
    3dc6:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    3dca:	7f 93       	push	r23
    3dcc:	6f 93       	push	r22
    3dce:	8d e8       	ldi	r24, 0x8D	; 141
    3dd0:	a8 2e       	mov	r10, r24
    3dd2:	83 e0       	ldi	r24, 0x03	; 3
    3dd4:	b8 2e       	mov	r11, r24
    3dd6:	bf 92       	push	r11
    3dd8:	af 92       	push	r10
    3dda:	0d e0       	ldi	r16, 0x0D	; 13
    3ddc:	14 e0       	ldi	r17, 0x04	; 4
    3dde:	1f 93       	push	r17
    3de0:	0f 93       	push	r16
    3de2:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				(int) mainPwmTerminalAdj, s_flt_frac(mainPwmTerminalAdj, 7),
				localFastPwmLoopValBefore,
				localFastPwmSubLoopValBefore);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3de6:	28 2f       	mov	r18, r24
    3de8:	a8 01       	movw	r20, r16
    3dea:	60 e0       	ldi	r22, 0x00	; 0
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	3d d4       	rcall	.+2170   	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_ID02, sizeof(PM_FORMAT_ID02));
    3df0:	2b e6       	ldi	r18, 0x6B	; 107
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	4a e9       	ldi	r20, 0x9A	; 154
    3df6:	54 e0       	ldi	r21, 0x04	; 4
    3df8:	b5 01       	movw	r22, r10
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	7c d1       	rcall	.+760    	; 0x40f6 <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3dfe:	c0 90 99 05 	lds	r12, 0x0599	; 0x800599 <mainPwmTerminalAdj>
    3e02:	d0 90 9a 05 	lds	r13, 0x059A	; 0x80059a <mainPwmTerminalAdj+0x1>
    3e06:	e0 90 9b 05 	lds	r14, 0x059B	; 0x80059b <mainPwmTerminalAdj+0x2>
    3e0a:	f0 90 9c 05 	lds	r15, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x3>
    3e0e:	47 e0       	ldi	r20, 0x07	; 7
    3e10:	c7 01       	movw	r24, r14
    3e12:	b6 01       	movw	r22, r12
    3e14:	0e 94 cb 0a 	call	0x1596	; 0x1596 <s_flt_frac>
    3e18:	2a 81       	ldd	r18, Y+2	; 0x02
    3e1a:	1f 92       	push	r1
    3e1c:	2f 93       	push	r18
    3e1e:	29 81       	ldd	r18, Y+1	; 0x01
    3e20:	1f 92       	push	r1
    3e22:	2f 93       	push	r18
    3e24:	9f 93       	push	r25
    3e26:	8f 93       	push	r24
    3e28:	c7 01       	movw	r24, r14
    3e2a:	b6 01       	movw	r22, r12
    3e2c:	0e 94 e6 30 	call	0x61cc	; 0x61cc <__fixsfsi>
    3e30:	7f 93       	push	r23
    3e32:	6f 93       	push	r22
    3e34:	bf 92       	push	r11
    3e36:	af 92       	push	r10
    3e38:	1f 93       	push	r17
    3e3a:	0f 93       	push	r16
    3e3c:	0e 94 84 34 	call	0x6908	; 0x6908 <sprintf>
				(int) mainPwmTerminalAdj, s_flt_frac(mainPwmTerminalAdj, 7),
				localFastPwmLoopValNext,
				localFastPwmSubLoopValNext);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3e40:	28 2f       	mov	r18, r24
    3e42:	a8 01       	movw	r20, r16
    3e44:	60 e0       	ldi	r22, 0x00	; 0
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	10 d4       	rcall	.+2080   	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		// reset data entry
		mainPwmTerminalAdj = 0.0f;
    3e4a:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <mainPwmTerminalAdj>
    3e4e:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <mainPwmTerminalAdj+0x1>
    3e52:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <mainPwmTerminalAdj+0x2>
    3e56:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <mainPwmTerminalAdj+0x3>
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	19 c0       	rjmp	.+50     	; 0x3e98 <main_fw_giveAway+0x20f8>
		uint8_t isAfterSignRev = false;

		/* Find out direction to or from optimum point */
		if (((phaseStepsPhase > 0) && (diffPhaseStepsPhase > 0)) ||
		    ((phaseStepsPhase < 0) && (diffPhaseStepsPhase < 0))) {
			isAfterSignRev = true;
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	f5 c9       	rjmp	.-3094   	; 0x3254 <main_fw_giveAway+0x14b4>
	}

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
		static float lastPhaseStepsPhase = 0.0f;
		float diffPhaseStepsPhase = phaseStepsPhase - lastPhaseStepsPhase;
		uint8_t isAfterSignRev = false;
    3e6a:	80 e0       	ldi	r24, 0x00	; 0
    3e6c:	f3 c9       	rjmp	.-3098   	; 0x3254 <main_fw_giveAway+0x14b4>
		}
		lastPhaseStepsPhase = phaseStepsPhase;

		/* frequency drift correction */
		phaseStepsFrequency += phaseStepsPhase * (isAfterSignRev ?  0.00001500f
																 :  0.00000100f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here
    3e6e:	22 e8       	ldi	r18, 0x82	; 130
    3e70:	38 ea       	ldi	r19, 0xA8	; 168
    3e72:	4b e7       	ldi	r20, 0x7B	; 123
    3e74:	57 e3       	ldi	r21, 0x37	; 55
    3e76:	fc c9       	rjmp	.-3080   	; 0x3270 <main_fw_giveAway+0x14d0>
		float phaseStepsErrorDiff = phaseStepsErrorSum / MEAN_PHASE_PPM_STAGES_F;
		mainPpm = mainCoef_b02_qrg_k_pPwmStep_25C_ppm * phaseStepsErrorDiff;
		if (phaseStepsFrequency >= 0.0f) {
			phaseStepsErrorSum += (phaseStepsFrequency - phaseStepsErrorDiff);
		} else {
			phaseStepsErrorSum += (-phaseStepsFrequency - phaseStepsErrorDiff);
    3e78:	c3 01       	movw	r24, r6
    3e7a:	b2 01       	movw	r22, r4
    3e7c:	90 58       	subi	r25, 0x80	; 128
    3e7e:	3e ca       	rjmp	.-2948   	; 0x32fc <main_fw_giveAway+0x155c>
			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
			}

			if ((-ADC_PHASE_INSYNC_DEG <= adcPhase) && (adcPhase <= ADC_PHASE_INSYNC_DEG)) {
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	4c e5       	ldi	r20, 0x5C	; 92
    3e86:	52 e4       	ldi	r21, 0x42	; 66
    3e88:	c5 01       	movw	r24, r10
    3e8a:	b4 01       	movw	r22, r8
    3e8c:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__cmpsf2>
    3e90:	18 16       	cp	r1, r24
    3e92:	0c f0       	brlt	.+2      	; 0x3e96 <main_fw_giveAway+0x20f6>
    3e94:	8c c9       	rjmp	.-3304   	; 0x31ae <main_fw_giveAway+0x140e>
    3e96:	9f c9       	rjmp	.-3266   	; 0x31d6 <main_fw_giveAway+0x1436>
		clkPullPwm_fw_setPin(true);								// for debugging purposes only
	}
#else
	/* due to the fact that the clkFastCtr interrupts every 12.8 µs there is no chance to power down */
#endif
}
    3e98:	69 96       	adiw	r28, 0x19	; 25
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	de bf       	out	0x3e, r29	; 62
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	cd bf       	out	0x3d, r28	; 61
    3ea4:	df 91       	pop	r29
    3ea6:	cf 91       	pop	r28
    3ea8:	1f 91       	pop	r17
    3eaa:	0f 91       	pop	r16
    3eac:	ff 90       	pop	r15
    3eae:	ef 90       	pop	r14
    3eb0:	df 90       	pop	r13
    3eb2:	cf 90       	pop	r12
    3eb4:	bf 90       	pop	r11
    3eb6:	af 90       	pop	r10
    3eb8:	9f 90       	pop	r9
    3eba:	8f 90       	pop	r8
    3ebc:	7f 90       	pop	r7
    3ebe:	6f 90       	pop	r6
    3ec0:	5f 90       	pop	r5
    3ec2:	4f 90       	pop	r4
    3ec4:	3f 90       	pop	r3
    3ec6:	2f 90       	pop	r2
    3ec8:	08 95       	ret

00003eca <main>:
int main(void)
{
	/* init AVR */
	{
		/* initial interrupt set-up */
		cli();
    3eca:	f8 94       	cli
	__asm__ __volatile__ ("reti" ::: "memory");
}


static inline void vectortable_to_firmware(void) {
	cli();
    3ecc:	f8 94       	cli
	asm volatile											// set active vector table into the application section
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	85 bf       	out	0x35, r24	; 53
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	85 bf       	out	0x35, r24	; 53
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    3ed6:	0f b6       	in	r0, 0x3f	; 63
    3ed8:	f8 94       	cli
    3eda:	a8 95       	wdr
    3edc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3ee0:	88 61       	ori	r24, 0x18	; 24
    3ee2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3ee6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3eea:	0f be       	out	0x3f, r0	; 63
		cli();
		vectortable_to_firmware();
		wdt_init();

		/* activate hardware for this configuration */
		PRR    = 0xEF;										// disable all modules within the Power Reduction Register
    3eec:	8f ee       	ldi	r24, 0xEF	; 239
    3eee:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		ACSR  |= _BV(ACD);									// switch on Analog Comparator Disable
    3ef2:	80 b7       	in	r24, 0x30	; 48
    3ef4:	80 68       	ori	r24, 0x80	; 128
    3ef6:	80 bf       	out	0x30, r24	; 48
		DIDR1 |= (0b11 << AIN0D);							// disable digital input buffers on AIN0 and AIN1
    3ef8:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
    3efc:	83 60       	ori	r24, 0x03	; 3
    3efe:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
		MCUCR &= ~(_BV(PUD));								// switch off Pull-Up Disable
    3f02:	85 b7       	in	r24, 0x35	; 53
    3f04:	8f 7e       	andi	r24, 0xEF	; 239
    3f06:	85 bf       	out	0x35, r24	; 53

		/* PWM & debugging first */
		clkPullPwm_fw_init();
    3f08:	0e 94 48 09 	call	0x1290	; 0x1290 <clkPullPwm_fw_init>
    3f0c:	ea ef       	ldi	r30, 0xFA	; 250
    3f0e:	f7 e0       	ldi	r31, 0x07	; 7

		/* Stack-Check init before the modules */
		for (int idx = MAIN_STACK_CHECK_SIZE; idx;) {		// DEBUG
			stackCheckMungWall[--idx] = 0x5a;
    3f10:	8a e5       	ldi	r24, 0x5A	; 90
    3f12:	82 93       	st	-Z, r24

		/* PWM & debugging first */
		clkPullPwm_fw_init();

		/* Stack-Check init before the modules */
		for (int idx = MAIN_STACK_CHECK_SIZE; idx;) {		// DEBUG
    3f14:	95 e0       	ldi	r25, 0x05	; 5
    3f16:	ea 3d       	cpi	r30, 0xDA	; 218
    3f18:	f9 07       	cpc	r31, r25
    3f1a:	d9 f7       	brne	.-10     	; 0x3f12 <main+0x48>
			stackCheckMungWall[--idx] = 0x5a;
		}

		/* init the other modules */
		clkFastCtr_fw_init();
    3f1c:	0e 94 b3 08 	call	0x1166	; 0x1166 <clkFastCtr_fw_init>
		anlgComp_fw_init();
    3f20:	0e 94 1f 08 	call	0x103e	; 0x103e <anlgComp_fw_init>
		serial_fw_init();
    3f24:	19 d4       	rcall	.+2098   	; 0x4758 <serial_fw_init>

		usb_fw_init();
    3f26:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <usb_fw_init>
		sei();
    3f2a:	78 94       	sei
		usbIsUp = true;
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <usbIsUp>

		/* init TWI submodule, clock and ports */
		twi_fw_init();
    3f32:	88 d5       	rcall	.+2832   	; 0x4a44 <twi_fw_init>
		twi_mcp23017_fw_init();
    3f34:	80 d7       	rcall	.+3840   	; 0x4e36 <twi_mcp23017_fw_init>
		twi_mcp23017_av1624_fw_init();
    3f36:	f1 d7       	rcall	.+4066   	; 0x4f1a <twi_mcp23017_av1624_fw_init>
		twi_smart_lcd_fw_init();
    3f38:	0e 94 64 28 	call	0x50c8	; 0x50c8 <twi_smart_lcd_fw_init>

		/* check CRC of all blocks and update with default values if the data is non-valid */
		memory_fw_manageNonVolatileData();
    3f3c:	27 d2       	rcall	.+1102   	; 0x438c <memory_fw_manageNonVolatileData>

		/* read MEASURING coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_HEADER_NR)) {
    3f3e:	60 e0       	ldi	r22, 0x00	; 0
    3f40:	8d e8       	ldi	r24, 0x8D	; 141
    3f42:	93 e0       	ldi	r25, 0x03	; 3
    3f44:	7a d1       	rcall	.+756    	; 0x423a <memory_fw_readEepromValidBlock>
    3f46:	88 23       	and	r24, r24
    3f48:	39 f1       	breq	.+78     	; 0x3f98 <main+0xce>
			eeprom_b00_t* b00 = (eeprom_b00_t*) &mainFormatBuffer;
			memcpy(mainCoef_b00_dev_header, b00->b00_header, sizeof(mainCoef_b00_dev_header) - 1);
    3f4a:	80 e1       	ldi	r24, 0x10	; 16
    3f4c:	ed e8       	ldi	r30, 0x8D	; 141
    3f4e:	f3 e0       	ldi	r31, 0x03	; 3
    3f50:	a6 ec       	ldi	r26, 0xC6	; 198
    3f52:	b5 e0       	ldi	r27, 0x05	; 5
    3f54:	01 90       	ld	r0, Z+
    3f56:	0d 92       	st	X+, r0
    3f58:	8a 95       	dec	r24
    3f5a:	e1 f7       	brne	.-8      	; 0x3f54 <main+0x8a>
			mainCoef_b00_dev_header[sizeof(mainCoef_b00_dev_header) - 1] = 0;
    3f5c:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <mainCoef_b00_dev_header+0x10>

			mainCoef_b00_dev_serial					= b00->b00_device_serial;
    3f60:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <mainFormatBuffer+0x12>
    3f64:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <mainFormatBuffer+0x13>
    3f68:	90 93 c5 05 	sts	0x05C5, r25	; 0x8005c5 <mainCoef_b00_dev_serial+0x1>
    3f6c:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <mainCoef_b00_dev_serial>
			mainCoef_b00_dev_version				= b00->b00_version;
    3f70:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <mainFormatBuffer+0x10>
    3f74:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <mainFormatBuffer+0x11>
    3f78:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <mainCoef_b00_dev_version+0x1>
    3f7c:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <mainCoef_b00_dev_version>
			main_bf.mainLcdLedMode					= b00->b00_lcdLedMode;
    3f80:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <mainFormatBuffer+0x14>
    3f84:	98 2f       	mov	r25, r24
    3f86:	92 95       	swap	r25
    3f88:	99 0f       	add	r25, r25
    3f8a:	90 7e       	andi	r25, 0xE0	; 224
    3f8c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    3f90:	8f 71       	andi	r24, 0x1F	; 31
    3f92:	89 2b       	or	r24, r25
    3f94:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
		}

		/* read MEASURING coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_MEASURING_NR)) {
    3f98:	61 e0       	ldi	r22, 0x01	; 1
    3f9a:	8d e8       	ldi	r24, 0x8D	; 141
    3f9c:	93 e0       	ldi	r25, 0x03	; 3
    3f9e:	4d d1       	rcall	.+666    	; 0x423a <memory_fw_readEepromValidBlock>
    3fa0:	88 23       	and	r24, r24
    3fa2:	09 f4       	brne	.+2      	; 0x3fa6 <main+0xdc>
    3fa4:	40 c0       	rjmp	.+128    	; 0x4026 <main+0x15c>
			eeprom_b01_t* b01 = (eeprom_b01_t*) &mainFormatBuffer;
			mainCoef_b01_ref_AREF_V					= b01->b01_ref_AREF_V;
    3fa6:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <mainFormatBuffer>
    3faa:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <mainFormatBuffer+0x1>
    3fae:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <mainFormatBuffer+0x2>
    3fb2:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <mainFormatBuffer+0x3>
    3fb6:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <mainCoef_b01_ref_AREF_V>
    3fba:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <mainCoef_b01_ref_AREF_V+0x1>
    3fbe:	a0 93 c0 05 	sts	0x05C0, r26	; 0x8005c0 <mainCoef_b01_ref_AREF_V+0x2>
    3fc2:	b0 93 c1 05 	sts	0x05C1, r27	; 0x8005c1 <mainCoef_b01_ref_AREF_V+0x3>
			mainCoef_b01_ref_1V1_V					= b01->b01_ref_1V1_V;
    3fc6:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <mainFormatBuffer+0x4>
    3fca:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <mainFormatBuffer+0x5>
    3fce:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <mainFormatBuffer+0x6>
    3fd2:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <mainFormatBuffer+0x7>
    3fd6:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <mainCoef_b01_ref_1V1_V>
    3fda:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <mainCoef_b01_ref_1V1_V+0x1>
    3fde:	a0 93 bc 05 	sts	0x05BC, r26	; 0x8005bc <mainCoef_b01_ref_1V1_V+0x2>
    3fe2:	b0 93 bd 05 	sts	0x05BD, r27	; 0x8005bd <mainCoef_b01_ref_1V1_V+0x3>
			mainCoef_b01_temp_ofs_adc_25C_steps		= b01->b01_temp_ofs_adc_25C_steps;
    3fe6:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <mainFormatBuffer+0x8>
    3fea:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <mainFormatBuffer+0x9>
    3fee:	a0 91 97 03 	lds	r26, 0x0397	; 0x800397 <mainFormatBuffer+0xa>
    3ff2:	b0 91 98 03 	lds	r27, 0x0398	; 0x800398 <mainFormatBuffer+0xb>
    3ff6:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <mainCoef_b01_temp_ofs_adc_25C_steps>
    3ffa:	90 93 b7 05 	sts	0x05B7, r25	; 0x8005b7 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    3ffe:	a0 93 b8 05 	sts	0x05B8, r26	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    4002:	b0 93 b9 05 	sts	0x05B9, r27	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>
			mainCoef_b01_temp_k_p1step_adc_K		= b01->b01_temp_k_p1step_adc_K;
    4006:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <mainFormatBuffer+0xc>
    400a:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <mainFormatBuffer+0xd>
    400e:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <mainFormatBuffer+0xe>
    4012:	b0 91 9c 03 	lds	r27, 0x039C	; 0x80039c <mainFormatBuffer+0xf>
    4016:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <mainCoef_b01_temp_k_p1step_adc_K>
    401a:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    401e:	a0 93 b4 05 	sts	0x05B4, r26	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    4022:	b0 93 b5 05 	sts	0x05B5, r27	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
		}

		/* read REFERENCE OSCILLATOR (REFOSC) coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_REFOSC_NR)) {
    4026:	62 e0       	ldi	r22, 0x02	; 2
    4028:	8d e8       	ldi	r24, 0x8D	; 141
    402a:	93 e0       	ldi	r25, 0x03	; 3
    402c:	06 d1       	rcall	.+524    	; 0x423a <memory_fw_readEepromValidBlock>
    402e:	88 23       	and	r24, r24
    4030:	09 f4       	brne	.+2      	; 0x4034 <main+0x16a>
    4032:	50 c0       	rjmp	.+160    	; 0x40d4 <main+0x20a>
			eeprom_b02_t* b02 = (eeprom_b02_t*) &mainFormatBuffer;
			mainCoef_b02_qrg_ofs_minV_25C_ppm		= b02->b02_qrg_ofs_minV_25C_ppm;
    4034:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <mainFormatBuffer>
    4038:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <mainFormatBuffer+0x1>
    403c:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <mainFormatBuffer+0x2>
    4040:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <mainFormatBuffer+0x3>
    4044:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <mainCoef_b02_qrg_ofs_minV_25C_ppm>
    4048:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x1>
    404c:	a0 93 b0 05 	sts	0x05B0, r26	; 0x8005b0 <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x2>
    4050:	b0 93 b1 05 	sts	0x05B1, r27	; 0x8005b1 <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x3>
			mainCoef_b02_qrg_ofs_maxV_25C_ppm		= b02->b02_qrg_ofs_maxV_25C_ppm;
    4054:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <mainFormatBuffer+0x4>
    4058:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <mainFormatBuffer+0x5>
    405c:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <mainFormatBuffer+0x6>
    4060:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <mainFormatBuffer+0x7>
    4064:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <mainCoef_b02_qrg_ofs_maxV_25C_ppm>
    4068:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x1>
    406c:	a0 93 ac 05 	sts	0x05AC, r26	; 0x8005ac <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x2>
    4070:	b0 93 ad 05 	sts	0x05AD, r27	; 0x8005ad <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x3>
			mainCoef_b02_qrg_k_pPwmStep_25C_ppm		= b02->b02_qrg_k_pPwmStep_25C_ppm;
    4074:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <mainFormatBuffer+0x8>
    4078:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <mainFormatBuffer+0x9>
    407c:	a0 91 97 03 	lds	r26, 0x0397	; 0x800397 <mainFormatBuffer+0xa>
    4080:	b0 91 98 03 	lds	r27, 0x0398	; 0x800398 <mainFormatBuffer+0xb>
    4084:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    4088:	90 93 a7 05 	sts	0x05A7, r25	; 0x8005a7 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    408c:	a0 93 a8 05 	sts	0x05A8, r26	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    4090:	b0 93 a9 05 	sts	0x05A9, r27	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
			mainCoef_b02_pwm_minV_V					= b02->b02_pwm_minV_V;
    4094:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <mainFormatBuffer+0x12>
    4098:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <mainFormatBuffer+0x13>
    409c:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <mainFormatBuffer+0x14>
    40a0:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <mainFormatBuffer+0x15>
    40a4:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <mainCoef_b02_pwm_minV_V>
    40a8:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <mainCoef_b02_pwm_minV_V+0x1>
    40ac:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <mainCoef_b02_pwm_minV_V+0x2>
    40b0:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <mainCoef_b02_pwm_minV_V+0x3>
			mainCoef_b02_pwm_maxV_V					= b02->b02_pwm_maxV_V;
    40b4:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <mainFormatBuffer+0x16>
    40b8:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <mainFormatBuffer+0x17>
    40bc:	a0 91 a5 03 	lds	r26, 0x03A5	; 0x8003a5 <mainFormatBuffer+0x18>
    40c0:	b0 91 a6 03 	lds	r27, 0x03A6	; 0x8003a6 <mainFormatBuffer+0x19>
    40c4:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <mainCoef_b02_pwm_maxV_V>
    40c8:	90 93 9f 05 	sts	0x059F, r25	; 0x80059f <mainCoef_b02_pwm_maxV_V+0x1>
    40cc:	a0 93 a0 05 	sts	0x05A0, r26	; 0x8005a0 <mainCoef_b02_pwm_maxV_V+0x2>
    40d0:	b0 93 a1 05 	sts	0x05A1, r27	; 0x8005a1 <mainCoef_b02_pwm_maxV_V+0x3>

			/*	b02_pwm_initial			treated by df4iah_fw_clkPullPwm */
			/* 	b02_pwm_initial_sub		treated by df4iah_fw_clkPullPwm */
		}

		if (!(main_bf.mainIsLcdAttached) && !(main_bf.mainIsSmartAttached)) {
    40d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    40d8:	87 fd       	sbrc	r24, 7
    40da:	0a c0       	rjmp	.+20     	; 0x40f0 <main+0x226>
    40dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    40e0:	80 fd       	sbrc	r24, 0
    40e2:	06 c0       	rjmp	.+12     	; 0x40f0 <main+0x226>
}

static void main_fw_sendInitialHelp(void)
{
#if 1
	ringbuffer_fw_ringBufferWaitAppend(true, true, PM_COMMAND_HELP, sizeof(PM_COMMAND_HELP));
    40e4:	25 e0       	ldi	r18, 0x05	; 5
    40e6:	4d ef       	ldi	r20, 0xFD	; 253
    40e8:	5b e0       	ldi	r21, 0x0B	; 11
    40ea:	61 e0       	ldi	r22, 0x01	; 1
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	bd d2       	rcall	.+1402   	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>
#if 1
    while (true) {
#else
    while (!(main_bf.mainStopAvr)) {
#endif
    	main_fw_giveAway();
    40f0:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <main_fw_giveAway>
    }
    40f4:	fd cf       	rjmp	.-6      	; 0x40f0 <main+0x226>

000040f6 <memory_fw_copyBuffer>:
	}
}

void memory_fw_writeFlashPage(uint8_t source[], pagebuf_t size, uint32_t baddr)
{
	memory_bl_writeFlashPage(source, size, baddr);
    40f6:	1f 93       	push	r17
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
    40fc:	16 2f       	mov	r17, r22
    40fe:	97 2f       	mov	r25, r23
    4100:	ba 01       	movw	r22, r20
    4102:	88 23       	and	r24, r24
    4104:	29 f0       	breq	.+10     	; 0x4110 <memory_fw_copyBuffer+0x1a>
    4106:	c1 2f       	mov	r28, r17
    4108:	d9 2f       	mov	r29, r25
    410a:	a0 e0       	ldi	r26, 0x00	; 0
    410c:	b0 e0       	ldi	r27, 0x00	; 0
    410e:	07 c0       	rjmp	.+14     	; 0x411e <memory_fw_copyBuffer+0x28>
    4110:	a9 01       	movw	r20, r18
    4112:	81 2f       	mov	r24, r17
    4114:	df 91       	pop	r29
    4116:	cf 91       	pop	r28
    4118:	1f 91       	pop	r17
    411a:	0c 94 02 34 	jmp	0x6804	; 0x6804 <memcpy>
    411e:	a2 17       	cp	r26, r18
    4120:	b3 07       	cpc	r27, r19
    4122:	39 f0       	breq	.+14     	; 0x4132 <memory_fw_copyBuffer+0x3c>
    4124:	fb 01       	movw	r30, r22
    4126:	ea 0f       	add	r30, r26
    4128:	fb 1f       	adc	r31, r27
    412a:	e4 91       	lpm	r30, Z
    412c:	e9 93       	st	Y+, r30
    412e:	11 96       	adiw	r26, 0x01	; 1
    4130:	f6 cf       	rjmp	.-20     	; 0x411e <memory_fw_copyBuffer+0x28>
    4132:	81 2f       	mov	r24, r17
    4134:	df 91       	pop	r29
    4136:	cf 91       	pop	r28
    4138:	1f 91       	pop	r17
    413a:	08 95       	ret

0000413c <memory_fw_getSealMarker>:
    413c:	20 e1       	ldi	r18, 0x10	; 16
    413e:	82 9f       	mul	r24, r18
    4140:	c0 01       	movw	r24, r0
    4142:	11 24       	eor	r1, r1
    4144:	8c 60       	ori	r24, 0x0C	; 12
    4146:	90 6b       	ori	r25, 0xB0	; 176
    4148:	08 95       	ret

0000414a <memory_fw_calcBlockCrc>:
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
    414e:	fc 01       	movw	r30, r24
    4150:	dc 01       	movw	r26, r24
    4152:	5e 96       	adiw	r26, 0x1e	; 30
    4154:	25 ea       	ldi	r18, 0xA5	; 165
    4156:	35 ea       	ldi	r19, 0xA5	; 165
    4158:	60 e1       	ldi	r22, 0x10	; 16
    415a:	e9 01       	movw	r28, r18
    415c:	cc 0f       	add	r28, r28
    415e:	dd 1f       	adc	r29, r29
    4160:	92 2f       	mov	r25, r18
    4162:	91 70       	andi	r25, 0x01	; 1
    4164:	83 2f       	mov	r24, r19
    4166:	88 1f       	adc	r24, r24
    4168:	88 27       	eor	r24, r24
    416a:	88 1f       	adc	r24, r24
    416c:	98 27       	eor	r25, r24
    416e:	a9 01       	movw	r20, r18
    4170:	45 2f       	mov	r20, r21
    4172:	55 27       	eor	r21, r21
    4174:	42 95       	swap	r20
    4176:	46 95       	lsr	r20
    4178:	47 70       	andi	r20, 0x07	; 7
    417a:	41 70       	andi	r20, 0x01	; 1
    417c:	94 27       	eor	r25, r20
    417e:	33 fb       	bst	r19, 3
    4180:	33 27       	eor	r19, r19
    4182:	30 f9       	bld	r19, 0
    4184:	93 27       	eor	r25, r19
    4186:	27 fb       	bst	r18, 7
    4188:	88 27       	eor	r24, r24
    418a:	80 f9       	bld	r24, 0
    418c:	98 27       	eor	r25, r24
    418e:	22 fb       	bst	r18, 2
    4190:	22 27       	eor	r18, r18
    4192:	20 f9       	bld	r18, 0
    4194:	29 27       	eor	r18, r25
    4196:	ce 01       	movw	r24, r28
    4198:	82 2b       	or	r24, r18
    419a:	9c 01       	movw	r18, r24
    419c:	61 50       	subi	r22, 0x01	; 1
    419e:	e9 f6       	brne	.-70     	; 0x415a <memory_fw_calcBlockCrc+0x10>
    41a0:	81 91       	ld	r24, Z+
    41a2:	28 27       	eor	r18, r24
    41a4:	ea 17       	cp	r30, r26
    41a6:	fb 07       	cpc	r31, r27
    41a8:	b9 f6       	brne	.-82     	; 0x4158 <memory_fw_calcBlockCrc+0xe>
    41aa:	c9 01       	movw	r24, r18
    41ac:	df 91       	pop	r29
    41ae:	cf 91       	pop	r28
    41b0:	08 95       	ret

000041b2 <memory_fw_readFlashPage>:
    41b2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <memory_bl_readFlashPage>
    41b6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <memory_bl_readFlashPage+0x1>
    41ba:	09 94       	ijmp

000041bc <memory_fw_readEEpromPage>:
    41bc:	ef 92       	push	r14
    41be:	ff 92       	push	r15
    41c0:	0f 93       	push	r16
    41c2:	1f 93       	push	r17
    41c4:	cf 93       	push	r28
    41c6:	df 93       	push	r29
    41c8:	1f 92       	push	r1
    41ca:	cd b7       	in	r28, 0x3d	; 61
    41cc:	de b7       	in	r29, 0x3e	; 62
    41ce:	7c 01       	movw	r14, r24
    41d0:	8a 01       	movw	r16, r20
    41d2:	08 1b       	sub	r16, r24
    41d4:	19 0b       	sbc	r17, r25
    41d6:	66 23       	and	r22, r22
    41d8:	61 f0       	breq	.+24     	; 0x41f2 <memory_fw_readEEpromPage+0x36>
    41da:	c8 01       	movw	r24, r16
    41dc:	8e 0d       	add	r24, r14
    41de:	9f 1d       	adc	r25, r15
    41e0:	69 83       	std	Y+1, r22	; 0x01
    41e2:	0e 94 45 37 	call	0x6e8a	; 0x6e8a <eeprom_read_byte>
    41e6:	f7 01       	movw	r30, r14
    41e8:	81 93       	st	Z+, r24
    41ea:	7f 01       	movw	r14, r30
    41ec:	69 81       	ldd	r22, Y+1	; 0x01
    41ee:	61 50       	subi	r22, 0x01	; 1
    41f0:	f2 cf       	rjmp	.-28     	; 0x41d6 <memory_fw_readEEpromPage+0x1a>
    41f2:	0f 90       	pop	r0
    41f4:	df 91       	pop	r29
    41f6:	cf 91       	pop	r28
    41f8:	1f 91       	pop	r17
    41fa:	0f 91       	pop	r16
    41fc:	ff 90       	pop	r15
    41fe:	ef 90       	pop	r14
    4200:	08 95       	ret

00004202 <memory_fw_isEepromBlockValid>:
    4202:	88 30       	cpi	r24, 0x08	; 8
    4204:	b8 f4       	brcc	.+46     	; 0x4234 <memory_fw_isEepromBlockValid+0x32>
    4206:	90 e2       	ldi	r25, 0x20	; 32
    4208:	89 9f       	mul	r24, r25
    420a:	a0 01       	movw	r20, r0
    420c:	11 24       	eor	r1, r1
    420e:	60 e2       	ldi	r22, 0x20	; 32
    4210:	8d e8       	ldi	r24, 0x8D	; 141
    4212:	93 e0       	ldi	r25, 0x03	; 3
    4214:	d3 df       	rcall	.-90     	; 0x41bc <memory_fw_readEEpromPage>
    4216:	8d e8       	ldi	r24, 0x8D	; 141
    4218:	93 e0       	ldi	r25, 0x03	; 3
    421a:	97 df       	rcall	.-210    	; 0x414a <memory_fw_calcBlockCrc>
    421c:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <mainFormatBuffer+0x1f>
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	32 2f       	mov	r19, r18
    4224:	22 27       	eor	r18, r18
    4226:	40 91 ab 03 	lds	r20, 0x03AB	; 0x8003ab <mainFormatBuffer+0x1e>
    422a:	24 2b       	or	r18, r20
    422c:	41 e0       	ldi	r20, 0x01	; 1
    422e:	28 17       	cp	r18, r24
    4230:	39 07       	cpc	r19, r25
    4232:	09 f0       	breq	.+2      	; 0x4236 <memory_fw_isEepromBlockValid+0x34>
    4234:	40 e0       	ldi	r20, 0x00	; 0
    4236:	84 2f       	mov	r24, r20
    4238:	08 95       	ret

0000423a <memory_fw_readEepromValidBlock>:
    423a:	0f 93       	push	r16
    423c:	1f 93       	push	r17
    423e:	cf 93       	push	r28
    4240:	68 30       	cpi	r22, 0x08	; 8
    4242:	10 f0       	brcs	.+4      	; 0x4248 <memory_fw_readEepromValidBlock+0xe>
    4244:	80 e0       	ldi	r24, 0x00	; 0
    4246:	12 c0       	rjmp	.+36     	; 0x426c <memory_fw_readEepromValidBlock+0x32>
    4248:	c6 2f       	mov	r28, r22
    424a:	8c 01       	movw	r16, r24
    424c:	86 2f       	mov	r24, r22
    424e:	d9 df       	rcall	.-78     	; 0x4202 <memory_fw_isEepromBlockValid>
    4250:	88 23       	and	r24, r24
    4252:	c1 f3       	breq	.-16     	; 0x4244 <memory_fw_readEepromValidBlock+0xa>
    4254:	83 e0       	ldi	r24, 0x03	; 3
    4256:	0d 38       	cpi	r16, 0x8D	; 141
    4258:	18 07       	cpc	r17, r24
    425a:	39 f0       	breq	.+14     	; 0x426a <memory_fw_readEepromValidBlock+0x30>
    425c:	80 e2       	ldi	r24, 0x20	; 32
    425e:	c8 9f       	mul	r28, r24
    4260:	a0 01       	movw	r20, r0
    4262:	11 24       	eor	r1, r1
    4264:	60 e2       	ldi	r22, 0x20	; 32
    4266:	c8 01       	movw	r24, r16
    4268:	a9 df       	rcall	.-174    	; 0x41bc <memory_fw_readEEpromPage>
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	cf 91       	pop	r28
    426e:	1f 91       	pop	r17
    4270:	0f 91       	pop	r16
    4272:	08 95       	ret

00004274 <memory_fw_writeEEpromPage>:
}

void memory_fw_writeEEpromPage(uint8_t source[], pagebuf_t size, uint16_t baddr)
{
    4274:	ef 92       	push	r14
    4276:	ff 92       	push	r15
    4278:	1f 93       	push	r17
    427a:	cf 93       	push	r28
    427c:	df 93       	push	r29
    427e:	7c 01       	movw	r14, r24
	uint8_t idx = 0;

	while (size--) {								// decrease number of bytes to write
    4280:	c4 2f       	mov	r28, r20
    4282:	d5 2f       	mov	r29, r21
    4284:	16 2f       	mov	r17, r22
    4286:	14 0f       	add	r17, r20
    4288:	1c 17       	cp	r17, r28
    428a:	41 f0       	breq	.+16     	; 0x429c <memory_fw_writeEEpromPage+0x28>
		eeprom_write_byte((uint8_t*) baddr, source[idx++]);
    428c:	f7 01       	movw	r30, r14
    428e:	61 91       	ld	r22, Z+
    4290:	7f 01       	movw	r14, r30
    4292:	ce 01       	movw	r24, r28
    4294:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <eeprom_write_byte>
		baddr++;									// select next byte
    4298:	21 96       	adiw	r28, 0x01	; 1
    429a:	f6 cf       	rjmp	.-20     	; 0x4288 <memory_fw_writeEEpromPage+0x14>
	}												// loop until all bytes written

	// eeprom_busy_wait();
}
    429c:	df 91       	pop	r29
    429e:	cf 91       	pop	r28
    42a0:	1f 91       	pop	r17
    42a2:	ff 90       	pop	r15
    42a4:	ef 90       	pop	r14
    42a6:	08 95       	ret

000042a8 <memory_fw_writeEepromBlockMakeValid>:
	// bad usage
	return false;
}

uint8_t memory_fw_writeEepromBlockMakeValid(uint8_t* source, uint8_t blockNr)
{
    42a8:	1f 93       	push	r17
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
	if (blockNr < BLOCK_COUNT) {
    42ae:	68 30       	cpi	r22, 0x08	; 8
    42b0:	18 f5       	brcc	.+70     	; 0x42f8 <memory_fw_writeEepromBlockMakeValid+0x50>
    42b2:	16 2f       	mov	r17, r22
    42b4:	ec 01       	movw	r28, r24
		uint16_t oldCrcBlock = source[30] | (source[31] << 8);
		uint16_t oldCrcCalc  = memory_fw_calcBlockCrc(source);
    42b6:	49 df       	rcall	.-366    	; 0x414a <memory_fw_calcBlockCrc>
}

uint8_t memory_fw_writeEepromBlockMakeValid(uint8_t* source, uint8_t blockNr)
{
	if (blockNr < BLOCK_COUNT) {
		uint16_t oldCrcBlock = source[30] | (source[31] << 8);
    42b8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	32 2f       	mov	r19, r18
    42be:	22 27       	eor	r18, r18
    42c0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    42c2:	24 2b       	or	r18, r20
		uint16_t oldCrcCalc  = memory_fw_calcBlockCrc(source);

		if (oldCrcBlock != oldCrcCalc) {
    42c4:	28 17       	cp	r18, r24
    42c6:	39 07       	cpc	r19, r25
    42c8:	c9 f0       	breq	.+50     	; 0x42fc <memory_fw_writeEepromBlockMakeValid+0x54>
			/* initial CRC calc marker found, seal the content */
			source[30] = (oldCrcCalc & 0xff);
    42ca:	8e 8f       	std	Y+30, r24	; 0x1e
			source[31] = (oldCrcCalc >> 8);
    42cc:	9f 8f       	std	Y+31, r25	; 0x1f

			/* any recalculation of the CRC is counted */
			uint16_t counter = source[28] | (source[29] << 8);
    42ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	98 2f       	mov	r25, r24
    42d4:	88 27       	eor	r24, r24
    42d6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    42d8:	82 2b       	or	r24, r18

			counter++;
    42da:	01 96       	adiw	r24, 0x01	; 1
			source[28] = (counter & 0xff);
    42dc:	8c 8f       	std	Y+28, r24	; 0x1c
			source[29] = (counter >> 8);
    42de:	9d 8f       	std	Y+29, r25	; 0x1d

			/* re-calc the CRC */
			uint16_t newCrcCalc = memory_fw_calcBlockCrc(source);
    42e0:	ce 01       	movw	r24, r28
    42e2:	33 df       	rcall	.-410    	; 0x414a <memory_fw_calcBlockCrc>

			source[30] = (newCrcCalc & 0xff);
    42e4:	8e 8f       	std	Y+30, r24	; 0x1e
			source[31] = (newCrcCalc >> 8);
    42e6:	9f 8f       	std	Y+31, r25	; 0x1f

			memory_fw_writeEEpromPage(source, 1 << 5, blockNr << 5);
    42e8:	80 e2       	ldi	r24, 0x20	; 32
    42ea:	18 9f       	mul	r17, r24
    42ec:	a0 01       	movw	r20, r0
    42ee:	11 24       	eor	r1, r1
    42f0:	60 e2       	ldi	r22, 0x20	; 32
    42f2:	ce 01       	movw	r24, r28
    42f4:	bf df       	rcall	.-130    	; 0x4274 <memory_fw_writeEEpromPage>
    42f6:	02 c0       	rjmp	.+4      	; 0x42fc <memory_fw_writeEepromBlockMakeValid+0x54>
		// block valid
		return true;
	}

	// bad usage
	return false;
    42f8:	80 e0       	ldi	r24, 0x00	; 0
    42fa:	01 c0       	rjmp	.+2      	; 0x42fe <memory_fw_writeEepromBlockMakeValid+0x56>
{
	if (blockNr < BLOCK_COUNT) {
		uint16_t oldCrcBlock = source[30] | (source[31] << 8);
		uint16_t oldCrcCalc  = memory_fw_calcBlockCrc(source);

		if (oldCrcBlock != oldCrcCalc) {
    42fc:	81 e0       	ldi	r24, 0x01	; 1
		return true;
	}

	// bad usage
	return false;
}
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	1f 91       	pop	r17
    4304:	08 95       	ret

00004306 <memory_fw_manageBlock>:
	// bad usage or not valid block
	return false;
}

uint8_t memory_fw_manageBlock(uint8_t blockNr)
{
    4306:	1f 93       	push	r17
    4308:	cf 93       	push	r28
    430a:	df 93       	push	r29
	if (blockNr < BLOCK_COUNT) {
    430c:	88 30       	cpi	r24, 0x08	; 8
    430e:	10 f0       	brcs	.+4      	; 0x4314 <memory_fw_manageBlock+0xe>
			return 0;
		}
	}

	// bad usage or not a valid block
	return 0;
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	38 c0       	rjmp	.+112    	; 0x4384 <memory_fw_manageBlock+0x7e>
    4314:	18 2f       	mov	r17, r24
}

uint8_t memory_fw_manageBlock(uint8_t blockNr)
{
	if (blockNr < BLOCK_COUNT) {
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
    4316:	75 df       	rcall	.-278    	; 0x4202 <memory_fw_isEepromBlockValid>
    4318:	81 11       	cpse	r24, r1
    431a:	fa cf       	rjmp	.-12     	; 0x4310 <memory_fw_manageBlock+0xa>
	}
}

uint16_t memory_fw_getSealMarker(uint8_t blockNr)
{
	return (0xb00c | (blockNr << 4));
    431c:	21 2f       	mov	r18, r17
    431e:	30 e0       	ldi	r19, 0x00	; 0
uint8_t memory_fw_manageBlock(uint8_t blockNr)
{
	if (blockNr < BLOCK_COUNT) {
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
			/* the block is non-valid, reload the EEPROM block with the default data */
			uint16_t oldCrcBlock = mainFormatBuffer[30] | (mainFormatBuffer[31] << 8);
    4320:	40 91 ac 03 	lds	r20, 0x03AC	; 0x8003ac <mainFormatBuffer+0x1f>
    4324:	50 e0       	ldi	r21, 0x00	; 0
    4326:	54 2f       	mov	r21, r20
    4328:	44 27       	eor	r20, r20
    432a:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <mainFormatBuffer+0x1e>
    432e:	48 2b       	or	r20, r24
	}
}

uint16_t memory_fw_getSealMarker(uint8_t blockNr)
{
	return (0xb00c | (blockNr << 4));
    4330:	c9 01       	movw	r24, r18
    4332:	74 e0       	ldi	r23, 0x04	; 4
    4334:	88 0f       	add	r24, r24
    4336:	99 1f       	adc	r25, r25
    4338:	7a 95       	dec	r23
    433a:	e1 f7       	brne	.-8      	; 0x4334 <memory_fw_manageBlock+0x2e>
    433c:	8c 60       	ori	r24, 0x0C	; 12
    433e:	90 6b       	ori	r25, 0xB0	; 176
	if (blockNr < BLOCK_COUNT) {
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
			/* the block is non-valid, reload the EEPROM block with the default data */
			uint16_t oldCrcBlock = mainFormatBuffer[30] | (mainFormatBuffer[31] << 8);

			if (oldCrcBlock != memory_fw_getSealMarker(blockNr)) {
    4340:	48 17       	cp	r20, r24
    4342:	59 07       	cpc	r21, r25
    4344:	d1 f0       	breq	.+52     	; 0x437a <memory_fw_manageBlock+0x74>
				uint16_t counter = mainFormatBuffer[28] | (mainFormatBuffer[29] << 8);
    4346:	c0 91 aa 03 	lds	r28, 0x03AA	; 0x8003aa <mainFormatBuffer+0x1d>
    434a:	d0 e0       	ldi	r29, 0x00	; 0
    434c:	dc 2f       	mov	r29, r28
    434e:	cc 27       	eor	r28, r28
    4350:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <mainFormatBuffer+0x1c>
    4354:	c8 2b       	or	r28, r24

				/* reading default values if not CRC calc marker for sealing is found */
				memory_fw_readFlashPage(mainFormatBuffer,
						(1 << 5) - 4,								// load default data, without counter and special marked CRC value
						(((uint16_t) ((void*) &eeprom_defaultValues_content)) + (blockNr << 5)));
    4356:	95 e0       	ldi	r25, 0x05	; 5
    4358:	22 0f       	add	r18, r18
    435a:	33 1f       	adc	r19, r19
    435c:	9a 95       	dec	r25
    435e:	e1 f7       	brne	.-8      	; 0x4358 <memory_fw_manageBlock+0x52>
    4360:	24 5e       	subi	r18, 0xE4	; 228
    4362:	33 4f       	sbci	r19, 0xF3	; 243

			if (oldCrcBlock != memory_fw_getSealMarker(blockNr)) {
				uint16_t counter = mainFormatBuffer[28] | (mainFormatBuffer[29] << 8);

				/* reading default values if not CRC calc marker for sealing is found */
				memory_fw_readFlashPage(mainFormatBuffer,
    4364:	40 e0       	ldi	r20, 0x00	; 0
    4366:	50 e0       	ldi	r21, 0x00	; 0
    4368:	6c e1       	ldi	r22, 0x1C	; 28
    436a:	8d e8       	ldi	r24, 0x8D	; 141
    436c:	93 e0       	ldi	r25, 0x03	; 3
    436e:	21 df       	rcall	.-446    	; 0x41b2 <memory_fw_readFlashPage>
						(1 << 5) - 4,								// load default data, without counter and special marked CRC value
						(((uint16_t) ((void*) &eeprom_defaultValues_content)) + (blockNr << 5)));

				counter++;
    4370:	21 96       	adiw	r28, 0x01	; 1
				mainFormatBuffer[28] = (counter & 0xff);
    4372:	c0 93 a9 03 	sts	0x03A9, r28	; 0x8003a9 <mainFormatBuffer+0x1c>
				mainFormatBuffer[29] = (counter >> 8);
    4376:	d0 93 aa 03 	sts	0x03AA, r29	; 0x8003aa <mainFormatBuffer+0x1d>
			}

			/* update CRC and write to EEPROM */
			memory_fw_writeEepromBlockMakeValid(mainFormatBuffer, blockNr);
    437a:	61 2f       	mov	r22, r17
    437c:	8d e8       	ldi	r24, 0x8D	; 141
    437e:	93 e0       	ldi	r25, 0x03	; 3
    4380:	93 df       	rcall	.-218    	; 0x42a8 <memory_fw_writeEepromBlockMakeValid>
    4382:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	// bad usage or not a valid block
	return 0;
}
    4384:	df 91       	pop	r29
    4386:	cf 91       	pop	r28
    4388:	1f 91       	pop	r17
    438a:	08 95       	ret

0000438c <memory_fw_manageNonVolatileData>:

uint8_t memory_fw_manageNonVolatileData()
{
    438c:	cf 93       	push	r28
    438e:	df 93       	push	r29
    4390:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t ret = 0;
    4392:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t status;

	for (int blockIdx = 0; blockIdx < BLOCK_COUNT; ++blockIdx) {
		status = memory_fw_manageBlock(blockIdx);
    4394:	8c 2f       	mov	r24, r28
    4396:	b7 df       	rcall	.-146    	; 0x4306 <memory_fw_manageBlock>
		if (status) {
    4398:	81 11       	cpse	r24, r1
			++ret;
    439a:	df 5f       	subi	r29, 0xFF	; 255
    439c:	cf 5f       	subi	r28, 0xFF	; 255
uint8_t memory_fw_manageNonVolatileData()
{
	uint8_t ret = 0;
	uint8_t status;

	for (int blockIdx = 0; blockIdx < BLOCK_COUNT; ++blockIdx) {
    439e:	c8 30       	cpi	r28, 0x08	; 8
    43a0:	c9 f7       	brne	.-14     	; 0x4394 <memory_fw_manageNonVolatileData+0x8>
		}
	}

	// count of block that needed reloading of default values
	return ret;
}
    43a2:	8d 2f       	mov	r24, r29
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	08 95       	ret

000043aa <ringbuffer_fw_getSemaphore>:


uint8_t ringbuffer_fw_getSemaphore(uint8_t isSend)
{
	uint8_t isLocked;
	uint8_t* semPtr = (isSend ?  &usbRingBufferSendSemaphore : &usbRingBufferRcvSemaphore);
    43aa:	81 11       	cpse	r24, r1
    43ac:	03 c0       	rjmp	.+6      	; 0x43b4 <ringbuffer_fw_getSemaphore+0xa>
    43ae:	e2 e2       	ldi	r30, 0x22	; 34
    43b0:	f5 e0       	ldi	r31, 0x05	; 5
    43b2:	02 c0       	rjmp	.+4      	; 0x43b8 <ringbuffer_fw_getSemaphore+0xe>
    43b4:	e3 e2       	ldi	r30, 0x23	; 35
    43b6:	f5 e0       	ldi	r31, 0x05	; 5
		  "=r" (sreg)
		: "p" (semPtr)
		: "r19"
	);
#else
	uint8_t sreg = SREG;
    43b8:	8f b7       	in	r24, 0x3f	; 63
	cli();
    43ba:	f8 94       	cli
	isLocked = *semPtr;
    43bc:	90 81       	ld	r25, Z
	*semPtr = true;
    43be:	21 e0       	ldi	r18, 0x01	; 1
    43c0:	20 83       	st	Z, r18
	SREG = sreg;
    43c2:	8f bf       	out	0x3f, r24	; 63
#endif
	return !isLocked;
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	91 11       	cpse	r25, r1
    43c8:	80 e0       	ldi	r24, 0x00	; 0
}
    43ca:	08 95       	ret

000043cc <ringbuffer_fw_freeSemaphore>:

void ringbuffer_fw_freeSemaphore(uint8_t isSend)
{
	/* free semaphore */
	{
		uint8_t* semPtr = (isSend ?  &usbRingBufferSendSemaphore : &usbRingBufferRcvSemaphore);
    43cc:	81 11       	cpse	r24, r1
    43ce:	03 c0       	rjmp	.+6      	; 0x43d6 <ringbuffer_fw_freeSemaphore+0xa>
    43d0:	e2 e2       	ldi	r30, 0x22	; 34
    43d2:	f5 e0       	ldi	r31, 0x05	; 5
    43d4:	02 c0       	rjmp	.+4      	; 0x43da <ringbuffer_fw_freeSemaphore+0xe>
    43d6:	e3 e2       	ldi	r30, 0x23	; 35
    43d8:	f5 e0       	ldi	r31, 0x05	; 5
		uint8_t sreg = SREG;
    43da:	8f b7       	in	r24, 0x3f	; 63
		cli();
    43dc:	f8 94       	cli
		*semPtr = false;
    43de:	10 82       	st	Z, r1
		SREG = sreg;
    43e0:	8f bf       	out	0x3f, r24	; 63
    43e2:	08 95       	ret

000043e4 <ringbuffer_fw_ringBufferPush>:
	}
}

uint8_t ringbuffer_fw_ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
    43e4:	8f 92       	push	r8
    43e6:	9f 92       	push	r9
    43e8:	af 92       	push	r10
    43ea:	bf 92       	push	r11
    43ec:	cf 92       	push	r12
    43ee:	df 92       	push	r13
    43f0:	ef 92       	push	r14
    43f2:	ff 92       	push	r15
    43f4:	0f 93       	push	r16
    43f6:	1f 93       	push	r17
    43f8:	cf 93       	push	r28
    43fa:	df 93       	push	r29
    43fc:	98 2f       	mov	r25, r24
	uint8_t retLen = 0;
	uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);

	uint8_t sreg = SREG;
    43fe:	3f b7       	in	r19, 0x3f	; 63
	cli();
    4400:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4402:	88 23       	and	r24, r24
    4404:	29 f0       	breq	.+10     	; 0x4410 <ringbuffer_fw_ringBufferPush+0x2c>
    4406:	70 91 27 05 	lds	r23, 0x0527	; 0x800527 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    440a:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <usbRingBufferSendPullIdx>
    440e:	04 c0       	rjmp	.+8      	; 0x4418 <ringbuffer_fw_ringBufferPush+0x34>
	uint8_t retLen = 0;
	uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4410:	70 91 25 05 	lds	r23, 0x0525	; 0x800525 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4414:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    4418:	3f bf       	out	0x3f, r19	; 63

	if (!(((pushIdx + 1) == pullIdx) || (((pushIdx + 1) == bufferSize) && !pullIdx))) {
    441a:	a7 2f       	mov	r26, r23
    441c:	b0 e0       	ldi	r27, 0x00	; 0
    441e:	c8 2f       	mov	r28, r24
    4420:	d0 e0       	ldi	r29, 0x00	; 0
    4422:	fd 01       	movw	r30, r26
    4424:	31 96       	adiw	r30, 0x01	; 1
    4426:	ec 17       	cp	r30, r28
    4428:	fd 07       	cpc	r31, r29
    442a:	09 f4       	brne	.+2      	; 0x442e <ringbuffer_fw_ringBufferPush+0x4a>
    442c:	64 c0       	rjmp	.+200    	; 0x44f6 <ringbuffer_fw_ringBufferPush+0x112>
    442e:	7f 37       	cpi	r23, 0x7F	; 127
    4430:	19 f4       	brne	.+6      	; 0x4438 <ringbuffer_fw_ringBufferPush+0x54>
    4432:	88 23       	and	r24, r24
    4434:	09 f4       	brne	.+2      	; 0x4438 <ringbuffer_fw_ringBufferPush+0x54>
    4436:	5f c0       	rjmp	.+190    	; 0x44f6 <ringbuffer_fw_ringBufferPush+0x112>
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    4438:	91 11       	cpse	r25, r1
    443a:	05 c0       	rjmp	.+10     	; 0x4446 <ringbuffer_fw_ringBufferPush+0x62>
    443c:	e7 e8       	ldi	r30, 0x87	; 135
    443e:	ee 2e       	mov	r14, r30
    4440:	e2 e0       	ldi	r30, 0x02	; 2
    4442:	fe 2e       	mov	r15, r30
    4444:	04 c0       	rjmp	.+8      	; 0x444e <ringbuffer_fw_ringBufferPush+0x6a>
    4446:	37 e0       	ldi	r19, 0x07	; 7
    4448:	e3 2e       	mov	r14, r19
    444a:	33 e0       	ldi	r19, 0x03	; 3
    444c:	f3 2e       	mov	r15, r19
		uint8_t lenTop = min((pullIdx > pushIdx ?  (pullIdx - pushIdx - 1) : bufferSize - pushIdx - (!pullIdx ?  1 : 0)), len);
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	78 17       	cp	r23, r24
    4452:	28 f4       	brcc	.+10     	; 0x445e <ringbuffer_fw_ringBufferPush+0x7a>
    4454:	fe 01       	movw	r30, r28
    4456:	ea 1b       	sub	r30, r26
    4458:	fb 0b       	sbc	r31, r27
    445a:	31 97       	sbiw	r30, 0x01	; 1
    445c:	0c c0       	rjmp	.+24     	; 0x4476 <ringbuffer_fw_ringBufferPush+0x92>
    445e:	e0 e8       	ldi	r30, 0x80	; 128
    4460:	f0 e0       	ldi	r31, 0x00	; 0
    4462:	ea 1b       	sub	r30, r26
    4464:	fb 0b       	sbc	r31, r27
    4466:	01 e0       	ldi	r16, 0x01	; 1
    4468:	10 e0       	ldi	r17, 0x00	; 0
    446a:	88 23       	and	r24, r24
    446c:	11 f0       	breq	.+4      	; 0x4472 <ringbuffer_fw_ringBufferPush+0x8e>
    446e:	00 e0       	ldi	r16, 0x00	; 0
    4470:	10 e0       	ldi	r17, 0x00	; 0
    4472:	e0 1b       	sub	r30, r16
    4474:	f1 0b       	sbc	r31, r17
    4476:	2e 17       	cp	r18, r30
    4478:	3f 07       	cpc	r19, r31
    447a:	0c f4       	brge	.+2      	; 0x447e <ringbuffer_fw_ringBufferPush+0x9a>
    447c:	f9 01       	movw	r30, r18
    447e:	de 2e       	mov	r13, r30
		uint8_t lenBot = min((((pullIdx > pushIdx) || !pullIdx) ?  0 : pullIdx - 1), len - lenTop);
    4480:	8f 01       	movw	r16, r30
    4482:	11 27       	eor	r17, r17
    4484:	20 1b       	sub	r18, r16
    4486:	31 0b       	sbc	r19, r17
    4488:	78 17       	cp	r23, r24
    448a:	20 f0       	brcs	.+8      	; 0x4494 <ringbuffer_fw_ringBufferPush+0xb0>
    448c:	88 23       	and	r24, r24
    448e:	11 f0       	breq	.+4      	; 0x4494 <ringbuffer_fw_ringBufferPush+0xb0>
    4490:	21 97       	sbiw	r28, 0x01	; 1
    4492:	02 c0       	rjmp	.+4      	; 0x4498 <ringbuffer_fw_ringBufferPush+0xb4>
    4494:	c0 e0       	ldi	r28, 0x00	; 0
    4496:	d0 e0       	ldi	r29, 0x00	; 0
    4498:	2c 17       	cp	r18, r28
    449a:	3d 07       	cpc	r19, r29
    449c:	0c f4       	brge	.+2      	; 0x44a0 <ringbuffer_fw_ringBufferPush+0xbc>
    449e:	e9 01       	movw	r28, r18
    44a0:	5a 01       	movw	r10, r20
    44a2:	96 2e       	mov	r9, r22
    44a4:	89 2e       	mov	r8, r25
    44a6:	cc 2e       	mov	r12, r28

		if (lenTop) {
    44a8:	dd 20       	and	r13, r13
    44aa:	31 f0       	breq	.+12     	; 0x44b8 <ringbuffer_fw_ringBufferPush+0xd4>
			memory_fw_copyBuffer(isPgm, &(ringBuffer[pushIdx]), inData, lenTop);
    44ac:	b7 01       	movw	r22, r14
    44ae:	6a 0f       	add	r22, r26
    44b0:	7b 1f       	adc	r23, r27
    44b2:	98 01       	movw	r18, r16
    44b4:	89 2d       	mov	r24, r9
    44b6:	1f de       	rcall	.-962    	; 0x40f6 <memory_fw_copyBuffer>
			retLen += lenTop;
		}

		if (lenBot) {
    44b8:	cc 20       	and	r12, r12
    44ba:	49 f0       	breq	.+18     	; 0x44ce <ringbuffer_fw_ringBufferPush+0xea>
    44bc:	9e 01       	movw	r18, r28
    44be:	33 27       	eor	r19, r19
			memory_fw_copyBuffer(isPgm, &(ringBuffer[0]), &(inData[lenTop]), lenBot);
    44c0:	a5 01       	movw	r20, r10
    44c2:	40 0f       	add	r20, r16
    44c4:	51 1f       	adc	r21, r17
    44c6:	b7 01       	movw	r22, r14
    44c8:	89 2d       	mov	r24, r9
    44ca:	15 de       	rcall	.-982    	; 0x40f6 <memory_fw_copyBuffer>
			retLen += lenBot;
    44cc:	dc 0c       	add	r13, r12
		}

		// advance the index
		if (isSend) {
			uint8_t sreg = SREG;
    44ce:	9f b7       	in	r25, 0x3f	; 63
			memory_fw_copyBuffer(isPgm, &(ringBuffer[0]), &(inData[lenTop]), lenBot);
			retLen += lenBot;
		}

		// advance the index
		if (isSend) {
    44d0:	88 20       	and	r8, r8
    44d2:	41 f0       	breq	.+16     	; 0x44e4 <ringbuffer_fw_ringBufferPush+0x100>
			uint8_t sreg = SREG;
			cli();
    44d4:	f8 94       	cli
			usbRingBufferSendPushIdx += retLen;
    44d6:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <usbRingBufferSendPushIdx>
    44da:	8d 0d       	add	r24, r13
			usbRingBufferSendPushIdx %= bufferSize;
    44dc:	8f 77       	andi	r24, 0x7F	; 127
    44de:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <usbRingBufferSendPushIdx>
    44e2:	07 c0       	rjmp	.+14     	; 0x44f2 <ringbuffer_fw_ringBufferPush+0x10e>
			SREG = sreg;

		} else {
			uint8_t sreg = SREG;
			cli();
    44e4:	f8 94       	cli
			usbRingBufferRcvPushIdx += retLen;
    44e6:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <usbRingBufferRcvPushIdx>
    44ea:	8d 0d       	add	r24, r13
			usbRingBufferRcvPushIdx %= bufferSize;
    44ec:	8f 77       	andi	r24, 0x7F	; 127
    44ee:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <usbRingBufferRcvPushIdx>
			SREG = sreg;
    44f2:	9f bf       	out	0x3f, r25	; 63
    44f4:	01 c0       	rjmp	.+2      	; 0x44f8 <ringbuffer_fw_ringBufferPush+0x114>
	}
}

uint8_t ringbuffer_fw_ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
	uint8_t retLen = 0;
    44f6:	d1 2c       	mov	r13, r1
			usbRingBufferRcvPushIdx %= bufferSize;
			SREG = sreg;
		}
	}
	return retLen;
}
    44f8:	8d 2d       	mov	r24, r13
    44fa:	df 91       	pop	r29
    44fc:	cf 91       	pop	r28
    44fe:	1f 91       	pop	r17
    4500:	0f 91       	pop	r16
    4502:	ff 90       	pop	r15
    4504:	ef 90       	pop	r14
    4506:	df 90       	pop	r13
    4508:	cf 90       	pop	r12
    450a:	bf 90       	pop	r11
    450c:	af 90       	pop	r10
    450e:	9f 90       	pop	r9
    4510:	8f 90       	pop	r8
    4512:	08 95       	ret

00004514 <ringbuffer_fw_ringBufferPull>:

uint8_t ringbuffer_fw_ringBufferPull(uint8_t isSend, uchar outData[], uint8_t size)
{
    4514:	9f 92       	push	r9
    4516:	af 92       	push	r10
    4518:	bf 92       	push	r11
    451a:	cf 92       	push	r12
    451c:	df 92       	push	r13
    451e:	ef 92       	push	r14
    4520:	ff 92       	push	r15
    4522:	0f 93       	push	r16
    4524:	1f 93       	push	r17
    4526:	cf 93       	push	r28
    4528:	df 93       	push	r29
	uint8_t len = 0;

	uint8_t sreg = SREG;
    452a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    452c:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    452e:	88 23       	and	r24, r24
    4530:	29 f0       	breq	.+10     	; 0x453c <ringbuffer_fw_ringBufferPull+0x28>
    4532:	c0 91 27 05 	lds	r28, 0x0527	; 0x800527 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4536:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <usbRingBufferSendPullIdx>
    453a:	04 c0       	rjmp	.+8      	; 0x4544 <ringbuffer_fw_ringBufferPull+0x30>
{
	uint8_t len = 0;

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    453c:	c0 91 25 05 	lds	r28, 0x0525	; 0x800525 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4540:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    4544:	2f bf       	out	0x3f, r18	; 63

	if ((pushIdx != pullIdx) && (size > 1)) {
    4546:	c9 17       	cp	r28, r25
    4548:	09 f4       	brne	.+2      	; 0x454c <ringbuffer_fw_ringBufferPull+0x38>
    454a:	5a c0       	rjmp	.+180    	; 0x4600 <ringbuffer_fw_ringBufferPull+0xec>
    454c:	42 30       	cpi	r20, 0x02	; 2
    454e:	08 f4       	brcc	.+2      	; 0x4552 <ringbuffer_fw_ringBufferPull+0x3e>
    4550:	57 c0       	rjmp	.+174    	; 0x4600 <ringbuffer_fw_ringBufferPull+0xec>
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    4552:	81 11       	cpse	r24, r1
    4554:	03 c0       	rjmp	.+6      	; 0x455c <ringbuffer_fw_ringBufferPull+0x48>
    4556:	07 e8       	ldi	r16, 0x87	; 135
    4558:	12 e0       	ldi	r17, 0x02	; 2
    455a:	02 c0       	rjmp	.+4      	; 0x4560 <ringbuffer_fw_ringBufferPull+0x4c>
    455c:	07 e0       	ldi	r16, 0x07	; 7
    455e:	13 e0       	ldi	r17, 0x03	; 3
		uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);
		uint8_t lenTop = min((pushIdx > pullIdx ?  (pushIdx - pullIdx) : bufferSize - pullIdx), size - 1);
    4560:	50 e0       	ldi	r21, 0x00	; 0
    4562:	41 50       	subi	r20, 0x01	; 1
    4564:	51 09       	sbc	r21, r1
    4566:	e9 2f       	mov	r30, r25
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	9c 17       	cp	r25, r28
    456c:	18 f4       	brcc	.+6      	; 0x4574 <ringbuffer_fw_ringBufferPull+0x60>
    456e:	2c 2f       	mov	r18, r28
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	02 c0       	rjmp	.+4      	; 0x4578 <ringbuffer_fw_ringBufferPull+0x64>
    4574:	20 e8       	ldi	r18, 0x80	; 128
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	2e 1b       	sub	r18, r30
    457a:	3f 0b       	sbc	r19, r31
    457c:	42 17       	cp	r20, r18
    457e:	53 07       	cpc	r21, r19
    4580:	0c f4       	brge	.+2      	; 0x4584 <ringbuffer_fw_ringBufferPull+0x70>
    4582:	9a 01       	movw	r18, r20
    4584:	b2 2e       	mov	r11, r18
		uint8_t lenBot = min((pushIdx > pullIdx ?  0 : pushIdx), size - 1 - lenTop);
    4586:	79 01       	movw	r14, r18
    4588:	ff 24       	eor	r15, r15
    458a:	4e 19       	sub	r20, r14
    458c:	5f 09       	sbc	r21, r15
    458e:	9c 17       	cp	r25, r28
    4590:	10 f0       	brcs	.+4      	; 0x4596 <ringbuffer_fw_ringBufferPull+0x82>
    4592:	d0 e0       	ldi	r29, 0x00	; 0
    4594:	02 c0       	rjmp	.+4      	; 0x459a <ringbuffer_fw_ringBufferPull+0x86>
    4596:	c0 e0       	ldi	r28, 0x00	; 0
    4598:	d0 e0       	ldi	r29, 0x00	; 0
    459a:	4c 17       	cp	r20, r28
    459c:	5d 07       	cpc	r21, r29
    459e:	0c f4       	brge	.+2      	; 0x45a2 <ringbuffer_fw_ringBufferPull+0x8e>
    45a0:	ea 01       	movw	r28, r20
    45a2:	6b 01       	movw	r12, r22
    45a4:	a8 2e       	mov	r10, r24
    45a6:	9c 2e       	mov	r9, r28

		if (lenTop) {
    45a8:	bb 20       	and	r11, r11
    45aa:	39 f0       	breq	.+14     	; 0x45ba <ringbuffer_fw_ringBufferPull+0xa6>
			memcpy(outData, &(ringBuffer[pullIdx]), lenTop);
    45ac:	b8 01       	movw	r22, r16
    45ae:	6e 0f       	add	r22, r30
    45b0:	7f 1f       	adc	r23, r31
    45b2:	a7 01       	movw	r20, r14
    45b4:	c6 01       	movw	r24, r12
    45b6:	0e 94 02 34 	call	0x6804	; 0x6804 <memcpy>
			len += lenTop;
		}

		if (lenBot) {
    45ba:	99 20       	and	r9, r9
    45bc:	49 f0       	breq	.+18     	; 0x45d0 <ringbuffer_fw_ringBufferPull+0xbc>
    45be:	ae 01       	movw	r20, r28
    45c0:	55 27       	eor	r21, r21
			memcpy(&(outData[lenTop]), &(ringBuffer[0]), lenBot);
    45c2:	b8 01       	movw	r22, r16
    45c4:	c6 01       	movw	r24, r12
    45c6:	8e 0d       	add	r24, r14
    45c8:	9f 1d       	adc	r25, r15
    45ca:	0e 94 02 34 	call	0x6804	; 0x6804 <memcpy>
			len += lenBot;
    45ce:	b9 0c       	add	r11, r9
		}

		outData[len] = 0;
    45d0:	f6 01       	movw	r30, r12
    45d2:	eb 0d       	add	r30, r11
    45d4:	f1 1d       	adc	r31, r1
    45d6:	10 82       	st	Z, r1

		// advance the index
		if (isSend) {
			uint8_t sreg = SREG;
    45d8:	9f b7       	in	r25, 0x3f	; 63
		}

		outData[len] = 0;

		// advance the index
		if (isSend) {
    45da:	aa 20       	and	r10, r10
    45dc:	41 f0       	breq	.+16     	; 0x45ee <ringbuffer_fw_ringBufferPull+0xda>
			uint8_t sreg = SREG;
			cli();
    45de:	f8 94       	cli
			usbRingBufferSendPullIdx += len;
    45e0:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <usbRingBufferSendPullIdx>
    45e4:	8b 0d       	add	r24, r11
			usbRingBufferSendPullIdx %= bufferSize;
    45e6:	8f 77       	andi	r24, 0x7F	; 127
    45e8:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <usbRingBufferSendPullIdx>
    45ec:	07 c0       	rjmp	.+14     	; 0x45fc <ringbuffer_fw_ringBufferPull+0xe8>
			SREG = sreg;

		} else {
			uint8_t sreg = SREG;
			cli();
    45ee:	f8 94       	cli
			usbRingBufferRcvPullIdx += len;
    45f0:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <usbRingBufferRcvPullIdx>
    45f4:	8b 0d       	add	r24, r11
			usbRingBufferRcvPullIdx %= bufferSize;
    45f6:	8f 77       	andi	r24, 0x7F	; 127
    45f8:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <usbRingBufferRcvPullIdx>
			SREG = sreg;
    45fc:	9f bf       	out	0x3f, r25	; 63
    45fe:	05 c0       	rjmp	.+10     	; 0x460a <ringbuffer_fw_ringBufferPull+0xf6>
		}
	} else if (!size) {
    4600:	41 11       	cpse	r20, r1
    4602:	02 c0       	rjmp	.+4      	; 0x4608 <ringbuffer_fw_ringBufferPull+0xf4>
		outData[0] = 0;
    4604:	fb 01       	movw	r30, r22
    4606:	10 82       	st	Z, r1
	return retLen;
}

uint8_t ringbuffer_fw_ringBufferPull(uint8_t isSend, uchar outData[], uint8_t size)
{
	uint8_t len = 0;
    4608:	b1 2c       	mov	r11, r1
		}
	} else if (!size) {
		outData[0] = 0;
	}
	return len;
}
    460a:	8b 2d       	mov	r24, r11
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	1f 91       	pop	r17
    4612:	0f 91       	pop	r16
    4614:	ff 90       	pop	r15
    4616:	ef 90       	pop	r14
    4618:	df 90       	pop	r13
    461a:	cf 90       	pop	r12
    461c:	bf 90       	pop	r11
    461e:	af 90       	pop	r10
    4620:	9f 90       	pop	r9
    4622:	08 95       	ret

00004624 <ringbuffer_fw_getStatusNextMsg>:

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;

	uint8_t sreg = SREG;
    4624:	3f b7       	in	r19, 0x3f	; 63
	cli();
    4626:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4628:	88 23       	and	r24, r24
    462a:	29 f0       	breq	.+10     	; 0x4636 <ringbuffer_fw_getStatusNextMsg+0x12>
    462c:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4630:	20 91 26 05 	lds	r18, 0x0526	; 0x800526 <usbRingBufferSendPullIdx>
    4634:	04 c0       	rjmp	.+8      	; 0x463e <ringbuffer_fw_getStatusNextMsg+0x1a>
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4636:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    463a:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    463e:	3f bf       	out	0x3f, r19	; 63

	if (pullIdx != pushIdx) {
    4640:	29 17       	cp	r18, r25
    4642:	79 f0       	breq	.+30     	; 0x4662 <ringbuffer_fw_getStatusNextMsg+0x3e>
		status |= RINGBUFFER_MSG_STATUS_AVAIL;

		/* test for NMEA message */
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    4644:	81 11       	cpse	r24, r1
    4646:	03 c0       	rjmp	.+6      	; 0x464e <ringbuffer_fw_getStatusNextMsg+0x2a>
    4648:	87 e8       	ldi	r24, 0x87	; 135
    464a:	92 e0       	ldi	r25, 0x02	; 2
    464c:	02 c0       	rjmp	.+4      	; 0x4652 <ringbuffer_fw_getStatusNextMsg+0x2e>
    464e:	87 e0       	ldi	r24, 0x07	; 7
    4650:	93 e0       	ldi	r25, 0x03	; 3
		if (*(ringBuffer + pullIdx) == MSG_PATTERN_NMEA) {	// first character identifies message type
    4652:	fc 01       	movw	r30, r24
    4654:	e2 0f       	add	r30, r18
    4656:	f1 1d       	adc	r31, r1
    4658:	80 81       	ld	r24, Z
    465a:	84 32       	cpi	r24, 0x24	; 36
    465c:	21 f4       	brne	.+8      	; 0x4666 <ringbuffer_fw_getStatusNextMsg+0x42>
			status |= RINGBUFFER_MSG_STATUS_IS_NMEA;
    465e:	81 e1       	ldi	r24, 0x11	; 17
    4660:	08 95       	ret
	return len;
}

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;
    4662:	80 e0       	ldi	r24, 0x00	; 0
    4664:	08 95       	ret
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
	SREG = sreg;

	if (pullIdx != pushIdx) {
		status |= RINGBUFFER_MSG_STATUS_AVAIL;
    4666:	81 e0       	ldi	r24, 0x01	; 1
		if (*(ringBuffer + pullIdx) == MSG_PATTERN_NMEA) {	// first character identifies message type
			status |= RINGBUFFER_MSG_STATUS_IS_NMEA;
		}
	}
	return status;
}
    4668:	08 95       	ret

0000466a <ringbuffer_fw_ringBufferWaitAppend>:
	    usbPoll();
	}
}

uint8_t ringbuffer_fw_ringBufferWaitAppend(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
    466a:	ff 92       	push	r15
    466c:	0f 93       	push	r16
    466e:	1f 93       	push	r17
    4670:	cf 93       	push	r28
    4672:	df 93       	push	r29
    4674:	c8 2f       	mov	r28, r24
    4676:	d6 2f       	mov	r29, r22
    4678:	8a 01       	movw	r16, r20
    467a:	f2 2e       	mov	r15, r18
}

static void ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore(uint8_t isSend)
{
	for (;;) {
		if (ringbuffer_fw_getSemaphore(isSend)) {
    467c:	8c 2f       	mov	r24, r28
    467e:	95 de       	rcall	.-726    	; 0x43aa <ringbuffer_fw_getSemaphore>
    4680:	88 23       	and	r24, r24
    4682:	a9 f0       	breq	.+42     	; 0x46ae <ringbuffer_fw_ringBufferWaitAppend+0x44>
			uint8_t pushIdx;
			uint8_t pullIdx;

			if (isSend) {
				uint8_t sreg = SREG;
    4684:	2f b7       	in	r18, 0x3f	; 63
	for (;;) {
		if (ringbuffer_fw_getSemaphore(isSend)) {
			uint8_t pushIdx;
			uint8_t pullIdx;

			if (isSend) {
    4686:	cc 23       	and	r28, r28
    4688:	31 f0       	breq	.+12     	; 0x4696 <ringbuffer_fw_ringBufferWaitAppend+0x2c>
				uint8_t sreg = SREG;
				cli();
    468a:	f8 94       	cli
				pushIdx = usbRingBufferSendPushIdx;
    468c:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <usbRingBufferSendPushIdx>
				pullIdx = usbRingBufferSendPullIdx;
    4690:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <usbRingBufferSendPullIdx>
    4694:	05 c0       	rjmp	.+10     	; 0x46a0 <ringbuffer_fw_ringBufferWaitAppend+0x36>
				SREG = sreg;

			} else {
				uint8_t sreg = SREG;
				cli();
    4696:	f8 94       	cli
				pushIdx = usbRingBufferRcvPushIdx;
    4698:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <usbRingBufferRcvPushIdx>
				pullIdx = usbRingBufferRcvPullIdx;
    469c:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <usbRingBufferRcvPullIdx>
				SREG = sreg;
    46a0:	2f bf       	out	0x3f, r18	; 63
			}

			if (pullIdx == pushIdx) {
    46a2:	98 17       	cp	r25, r24
    46a4:	39 f0       	breq	.+14     	; 0x46b4 <ringbuffer_fw_ringBufferWaitAppend+0x4a>
				// buffer is empty, break loop and hold semaphore
				break;
			}

			ringbuffer_fw_freeSemaphore(isSend);
    46a6:	8c 2f       	mov	r24, r28
    46a8:	91 de       	rcall	.-734    	; 0x43cc <ringbuffer_fw_freeSemaphore>

			// give the CPU away for a moment to delay, do not use giveAway() that would make a loop
		    wdt_reset();
    46aa:	a8 95       	wdr
		    usbPoll();
    46ac:	d3 d6       	rcall	.+3494   	; 0x5454 <usbPoll>
		}

		// give the CPU away for a moment to delay, do not use giveAway() that would make a loop
	    wdt_reset();
    46ae:	a8 95       	wdr
	    usbPoll();
    46b0:	d1 d6       	rcall	.+3490   	; 0x5454 <usbPoll>
    46b2:	e4 cf       	rjmp	.-56     	; 0x467c <ringbuffer_fw_ringBufferWaitAppend+0x12>
}

uint8_t ringbuffer_fw_ringBufferWaitAppend(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
	ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore(isSend);
    uint8_t retLen = ringbuffer_fw_ringBufferPush(isSend, isPgm, inData, len);
    46b4:	2f 2d       	mov	r18, r15
    46b6:	a8 01       	movw	r20, r16
    46b8:	6d 2f       	mov	r22, r29
    46ba:	8c 2f       	mov	r24, r28
    46bc:	93 de       	rcall	.-730    	; 0x43e4 <ringbuffer_fw_ringBufferPush>
    46be:	d8 2f       	mov	r29, r24
	ringbuffer_fw_freeSemaphore(isSend);
    46c0:	8c 2f       	mov	r24, r28
    46c2:	84 de       	rcall	.-760    	; 0x43cc <ringbuffer_fw_freeSemaphore>
    return retLen;
}
    46c4:	8d 2f       	mov	r24, r29
    46c6:	df 91       	pop	r29
    46c8:	cf 91       	pop	r28
    46ca:	1f 91       	pop	r17
    46cc:	0f 91       	pop	r16
    46ce:	ff 90       	pop	r15
    46d0:	08 95       	ret

000046d2 <serial_fw_sendNmea>:
}

uint8_t serial_fw_isTxRunning(void)
{
	return (serialCtxtTxBufferLen > 0) ?  true : false;
}
    46d2:	9f b7       	in	r25, 0x3f	; 63
    46d4:	f8 94       	cli
    46d6:	e0 ec       	ldi	r30, 0xC0	; 192
    46d8:	f0 e0       	ldi	r31, 0x00	; 0
    46da:	80 81       	ld	r24, Z
    46dc:	8f 7b       	andi	r24, 0xBF	; 191
    46de:	80 83       	st	Z, r24
    46e0:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <serialCtxtTxBufferIdx>
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	8e 0f       	add	r24, r30
    46e8:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <serialCtxtTxBufferIdx>
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	e9 53       	subi	r30, 0x39	; 57
    46f0:	fe 4f       	sbci	r31, 0xFE	; 254
    46f2:	80 81       	ld	r24, Z
    46f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    46f8:	9f bf       	out	0x3f, r25	; 63
    46fa:	e1 ec       	ldi	r30, 0xC1	; 193
    46fc:	f0 e0       	ldi	r31, 0x00	; 0
    46fe:	80 81       	ld	r24, Z
    4700:	80 62       	ori	r24, 0x20	; 32
    4702:	80 83       	st	Z, r24
    4704:	08 95       	ret

00004706 <serial_fw_serRxIsrOn.part.0>:
    4706:	9f b7       	in	r25, 0x3f	; 63
    4708:	f8 94       	cli
    470a:	e1 ec       	ldi	r30, 0xC1	; 193
    470c:	f0 e0       	ldi	r31, 0x00	; 0
    470e:	80 81       	ld	r24, Z
    4710:	80 68       	ori	r24, 0x80	; 128
    4712:	80 83       	st	Z, r24
    4714:	9f bf       	out	0x3f, r25	; 63
    4716:	08 95       	ret

00004718 <serial_fw_setCommBaud>:
    4718:	9c 01       	movw	r18, r24
    471a:	bc 01       	movw	r22, r24
    471c:	76 95       	lsr	r23
    471e:	67 95       	ror	r22
    4720:	cb 01       	movw	r24, r22
    4722:	a0 e0       	ldi	r26, 0x00	; 0
    4724:	b0 e0       	ldi	r27, 0x00	; 0
    4726:	bc 01       	movw	r22, r24
    4728:	cd 01       	movw	r24, r26
    472a:	60 53       	subi	r22, 0x30	; 48
    472c:	7d 4e       	sbci	r23, 0xED	; 237
    472e:	8c 4e       	sbci	r24, 0xEC	; 236
    4730:	9f 4f       	sbci	r25, 0xFF	; 255
    4732:	40 e0       	ldi	r20, 0x00	; 0
    4734:	50 e0       	ldi	r21, 0x00	; 0
    4736:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__udivmodsi4>
    473a:	da 01       	movw	r26, r20
    473c:	c9 01       	movw	r24, r18
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	a1 09       	sbc	r26, r1
    4742:	b1 09       	sbc	r27, r1
    4744:	89 2f       	mov	r24, r25
    4746:	9a 2f       	mov	r25, r26
    4748:	ab 2f       	mov	r26, r27
    474a:	bb 27       	eor	r27, r27
    474c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4750:	21 50       	subi	r18, 0x01	; 1
    4752:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4756:	08 95       	ret

00004758 <serial_fw_init>:
    4758:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    475c:	8d 7f       	andi	r24, 0xFD	; 253
    475e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    4762:	85 b7       	in	r24, 0x35	; 53
    4764:	8f 7e       	andi	r24, 0xEF	; 239
    4766:	85 bf       	out	0x35, r24	; 53
    4768:	58 9a       	sbi	0x0b, 0	; 11
    476a:	63 e0       	ldi	r22, 0x03	; 3
    476c:	8d e8       	ldi	r24, 0x8D	; 141
    476e:	93 e0       	ldi	r25, 0x03	; 3
    4770:	64 dd       	rcall	.-1336   	; 0x423a <memory_fw_readEepromValidBlock>
    4772:	88 23       	and	r24, r24
    4774:	c1 f0       	breq	.+48     	; 0x47a6 <serial_fw_init+0x4e>
    4776:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <mainFormatBuffer>
    477a:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <mainFormatBuffer+0x1>
    477e:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <serialCoef_b03_serial_baud+0x1>
    4782:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <serialCoef_b03_serial_baud>
    4786:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <mainFormatBuffer+0x2>
    478a:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <mainFormatBuffer+0x3>
    478e:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <serialCoef_b03_bitsParityStopbits+0x1>
    4792:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <serialCoef_b03_bitsParityStopbits>
    4796:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <mainFormatBuffer+0x4>
    479a:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <mainFormatBuffer+0x5>
    479e:	90 93 1d 05 	sts	0x051D, r25	; 0x80051d <serialCoef_b03_gps_comm_mode+0x1>
    47a2:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <serialCoef_b03_gps_comm_mode>
    47a6:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <serialCoef_b03_serial_baud>
    47aa:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <serialCoef_b03_serial_baud+0x1>
    47ae:	b4 df       	rcall	.-152    	; 0x4718 <serial_fw_setCommBaud>
    47b0:	88 e1       	ldi	r24, 0x18	; 24
    47b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    47b6:	20 91 1e 05 	lds	r18, 0x051E	; 0x80051e <serialCoef_b03_bitsParityStopbits>
    47ba:	30 91 1f 05 	lds	r19, 0x051F	; 0x80051f <serialCoef_b03_bitsParityStopbits+0x1>
    47be:	83 e0       	ldi	r24, 0x03	; 3
    47c0:	82 0f       	add	r24, r18
    47c2:	83 70       	andi	r24, 0x03	; 3
    47c4:	88 0f       	add	r24, r24
    47c6:	93 2f       	mov	r25, r19
    47c8:	90 73       	andi	r25, 0x30	; 48
    47ca:	89 2b       	or	r24, r25
    47cc:	22 27       	eor	r18, r18
    47ce:	33 70       	andi	r19, 0x03	; 3
    47d0:	9f ef       	ldi	r25, 0xFF	; 255
    47d2:	93 0f       	add	r25, r19
    47d4:	91 70       	andi	r25, 0x01	; 1
    47d6:	99 0f       	add	r25, r25
    47d8:	99 0f       	add	r25, r25
    47da:	99 0f       	add	r25, r25
    47dc:	89 2b       	or	r24, r25
    47de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    47e2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    47e6:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <serialCtxtTxBufferIdx>
    47ea:	8d cf       	rjmp	.-230    	; 0x4706 <serial_fw_serRxIsrOn.part.0>

000047ec <serial_fw_copyAndSendNmea>:
	/* enable DATA REGISTER EMPTY INTERRUPT - the interrupt will arrive after initial UDSR0 loading */
	UART_CTRL |= _BV(UDRIE0);								// this will shoot an interrupt because UDR0 is ready again to be filled (UDRE0 is true)
}

void serial_fw_copyAndSendNmea(uint8_t isPgm, const uchar inData[], uint8_t len)
{
    47ec:	cf 93       	push	r28
	if (len) {
    47ee:	44 23       	and	r20, r20
    47f0:	69 f0       	breq	.+26     	; 0x480c <serial_fw_copyAndSendNmea+0x20>
    47f2:	c4 2f       	mov	r28, r20
    47f4:	ab 01       	movw	r20, r22
		memory_fw_copyBuffer(isPgm, serialCtxtTxBuffer, inData, len);
    47f6:	2c 2f       	mov	r18, r28
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	67 ec       	ldi	r22, 0xC7	; 199
    47fc:	71 e0       	ldi	r23, 0x01	; 1
    47fe:	7b dc       	rcall	.-1802   	; 0x40f6 <memory_fw_copyBuffer>
		serialCtxtTxBufferIdx = 0;
    4800:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <serialCtxtTxBufferIdx>
		serialCtxtTxBufferLen = len;
    4804:	c0 93 1a 05 	sts	0x051A, r28	; 0x80051a <serialCtxtTxBufferLen>
		serial_fw_sendNmea();
	}
}
    4808:	cf 91       	pop	r28
{
	if (len) {
		memory_fw_copyBuffer(isPgm, serialCtxtTxBuffer, inData, len);
		serialCtxtTxBufferIdx = 0;
		serialCtxtTxBufferLen = len;
		serial_fw_sendNmea();
    480a:	63 cf       	rjmp	.-314    	; 0x46d2 <serial_fw_sendNmea>
	}
}
    480c:	cf 91       	pop	r28
    480e:	08 95       	ret

00004810 <serial_fw_pullAndSendNmea_havingSemaphore>:

void serial_fw_pullAndSendNmea_havingSemaphore(uint8_t isSend)
{
    4810:	cf 93       	push	r28
	/* check if serial TX buffer is clear and the USART0 is ready for a new character to be sent */
	uint8_t sreg = SREG;
    4812:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4814:	f8 94       	cli
	uint8_t isTxRdy = UCSR0A & _BV(UDRE0);
    4816:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	SREG = sreg;
    481a:	2f bf       	out	0x3f, r18	; 63

	if (!serialCtxtTxBufferLen && isTxRdy) {
    481c:	20 91 1a 05 	lds	r18, 0x051A	; 0x80051a <serialCtxtTxBufferLen>
    4820:	21 11       	cpse	r18, r1
    4822:	35 c0       	rjmp	.+106    	; 0x488e <serial_fw_pullAndSendNmea_havingSemaphore+0x7e>
    4824:	95 ff       	sbrs	r25, 5
    4826:	33 c0       	rjmp	.+102    	; 0x488e <serial_fw_pullAndSendNmea_havingSemaphore+0x7e>
    4828:	c8 2f       	mov	r28, r24
		/* get message and free semaphore */
		serialCtxtTxBufferLen = ringbuffer_fw_ringBufferPull(isSend, serialCtxtTxBuffer, SERIALCTXT_TX_BUFFER_SIZE - 3);
    482a:	4d e3       	ldi	r20, 0x3D	; 61
    482c:	67 ec       	ldi	r22, 0xC7	; 199
    482e:	71 e0       	ldi	r23, 0x01	; 1
    4830:	71 de       	rcall	.-798    	; 0x4514 <ringbuffer_fw_ringBufferPull>
    4832:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <serialCtxtTxBufferLen>
		ringbuffer_fw_freeSemaphore(isSend);
    4836:	8c 2f       	mov	r24, r28
    4838:	c9 dd       	rcall	.-1134   	; 0x43cc <ringbuffer_fw_freeSemaphore>

		/* drop serial TX data if transportation is not activated */
		if (!(main_bf.mainIsSerComm)) {
    483a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    483e:	83 ff       	sbrs	r24, 3
			serialCtxtTxBufferLen = 0;
    4840:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <serialCtxtTxBufferLen>
		}

		serialCtxtTxBufferIdx = 0;
    4844:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <serialCtxtTxBufferIdx>
		if (serialCtxtTxBufferLen) {
    4848:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <serialCtxtTxBufferLen>
    484c:	88 23       	and	r24, r24
    484e:	09 f1       	breq	.+66     	; 0x4892 <serial_fw_pullAndSendNmea_havingSemaphore+0x82>
			if (serialCtxtTxBuffer[--serialCtxtTxBufferLen]) {  // chop off trailing NULL char
    4850:	ef ef       	ldi	r30, 0xFF	; 255
    4852:	e8 0f       	add	r30, r24
    4854:	e0 93 1a 05 	sts	0x051A, r30	; 0x80051a <serialCtxtTxBufferLen>
    4858:	f0 e0       	ldi	r31, 0x00	; 0
    485a:	e9 53       	subi	r30, 0x39	; 57
    485c:	fe 4f       	sbci	r31, 0xFE	; 254
    485e:	90 81       	ld	r25, Z
    4860:	91 11       	cpse	r25, r1
				serialCtxtTxBufferLen++;						// restore length, if not NULL
    4862:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <serialCtxtTxBufferLen>
			}
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\r';	// obligatory NMEA message ends with CR LF
    4866:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <serialCtxtTxBufferLen>
    486a:	ae 2f       	mov	r26, r30
    486c:	b0 e0       	ldi	r27, 0x00	; 0
    486e:	a9 53       	subi	r26, 0x39	; 57
    4870:	be 4f       	sbci	r27, 0xFE	; 254
    4872:	8d e0       	ldi	r24, 0x0D	; 13
    4874:	8c 93       	st	X, r24
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\n';
    4876:	82 e0       	ldi	r24, 0x02	; 2
    4878:	8e 0f       	add	r24, r30
    487a:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <serialCtxtTxBufferLen>
		serialCtxtTxBufferIdx = 0;
		if (serialCtxtTxBufferLen) {
			if (serialCtxtTxBuffer[--serialCtxtTxBufferLen]) {  // chop off trailing NULL char
				serialCtxtTxBufferLen++;						// restore length, if not NULL
			}
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\r';	// obligatory NMEA message ends with CR LF
    487e:	ef 5f       	subi	r30, 0xFF	; 255
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\n';
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	e9 53       	subi	r30, 0x39	; 57
    4884:	fe 4f       	sbci	r31, 0xFE	; 254
    4886:	8a e0       	ldi	r24, 0x0A	; 10
    4888:	80 83       	st	Z, r24
		}

	} else {  // now we are not ready yet, call us later again
		ringbuffer_fw_freeSemaphore(isSend);
	}
}
    488a:	cf 91       	pop	r28
				serialCtxtTxBufferLen++;						// restore length, if not NULL
			}
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\r';	// obligatory NMEA message ends with CR LF
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\n';

			serial_fw_sendNmea();
    488c:	22 cf       	rjmp	.-444    	; 0x46d2 <serial_fw_sendNmea>
		}

	} else {  // now we are not ready yet, call us later again
		ringbuffer_fw_freeSemaphore(isSend);
	}
}
    488e:	cf 91       	pop	r28

			serial_fw_sendNmea();
		}

	} else {  // now we are not ready yet, call us later again
		ringbuffer_fw_freeSemaphore(isSend);
    4890:	9d cd       	rjmp	.-1222   	; 0x43cc <ringbuffer_fw_freeSemaphore>
	}
}
    4892:	cf 91       	pop	r28
    4894:	08 95       	ret

00004896 <__vector_18>:

//void serial_ISR_RXC0(void) - __vector_18
ISR(USART_RX_vect, ISR_BLOCK)
{
    4896:	1f 92       	push	r1
    4898:	0f 92       	push	r0
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	0f 92       	push	r0
    489e:	11 24       	eor	r1, r1
    48a0:	2f 93       	push	r18
    48a2:	3f 93       	push	r19
    48a4:	4f 93       	push	r20
    48a6:	5f 93       	push	r21
    48a8:	8f 93       	push	r24
    48aa:	9f 93       	push	r25
    48ac:	af 93       	push	r26
    48ae:	bf 93       	push	r27
    48b0:	cf 93       	push	r28
    48b2:	df 93       	push	r29
    48b4:	ef 93       	push	r30
    48b6:	ff 93       	push	r31
	/* read the data byte received */
	uint8_t rxData = UDR0;
    48b8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	/* since here we can allow global interrupts again */
	sei();
    48bc:	78 94       	sei

	if (!serialCtxtBufferState && (serialCtxtRxBufferLen < (SERIALCTXT_RX_BUFFER_SIZE - 3))) {
    48be:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <serialCtxtBufferState>
    48c2:	20 91 17 05 	lds	r18, 0x0517	; 0x800517 <serialCtxtNmeaRxHookBufIdx>
    48c6:	81 11       	cpse	r24, r1
    48c8:	48 c0       	rjmp	.+144    	; 0x495a <__vector_18+0xc4>
    48ca:	30 91 1b 05 	lds	r19, 0x051B	; 0x80051b <serialCtxtRxBufferLen>
    48ce:	35 37       	cpi	r19, 0x75	; 117
    48d0:	08 f0       	brcs	.+2      	; 0x48d4 <__vector_18+0x3e>
    48d2:	43 c0       	rjmp	.+134    	; 0x495a <__vector_18+0xc4>
		serialCtxtBufferState = SERIAL_CTXT_BUFFER_STATE_BLOCK;
    48d4:	31 e0       	ldi	r19, 0x01	; 1
    48d6:	30 93 18 05 	sts	0x0518, r19	; 0x800518 <serialCtxtBufferState>

		/* if data is at the hook, get it first */
		if (serialCtxtNmeaRxHookBufIdx) {
    48da:	22 23       	and	r18, r18
    48dc:	c1 f0       	breq	.+48     	; 0x490e <__vector_18+0x78>
			uint8_t sreg = SREG;
    48de:	2f b7       	in	r18, 0x3f	; 63
			cli();
    48e0:	f8 94       	cli

			for (int idx = 0; idx < serialCtxtNmeaRxHookBufIdx; ++idx) {
    48e2:	30 91 17 05 	lds	r19, 0x0517	; 0x800517 <serialCtxtNmeaRxHookBufIdx>
    48e6:	40 91 1b 05 	lds	r20, 0x051B	; 0x80051b <serialCtxtRxBufferLen>
    48ea:	a7 e0       	ldi	r26, 0x07	; 7
    48ec:	b2 e0       	ldi	r27, 0x02	; 2
    48ee:	e8 2f       	mov	r30, r24
    48f0:	e4 0f       	add	r30, r20
    48f2:	83 17       	cp	r24, r19
    48f4:	39 f0       	breq	.+14     	; 0x4904 <__vector_18+0x6e>
				serialCtxtRxBuffer[serialCtxtRxBufferLen++] = serialCtxtNmeaRxHookBuf[idx];
    48f6:	5d 91       	ld	r21, X+
    48f8:	f0 e0       	ldi	r31, 0x00	; 0
    48fa:	e1 5f       	subi	r30, 0xF1	; 241
    48fc:	fd 4f       	sbci	r31, 0xFD	; 253
    48fe:	50 83       	st	Z, r21
    4900:	8f 5f       	subi	r24, 0xFF	; 255
    4902:	f5 cf       	rjmp	.-22     	; 0x48ee <__vector_18+0x58>
    4904:	e0 93 1b 05 	sts	0x051B, r30	; 0x80051b <serialCtxtRxBufferLen>
			}

			/* hook is processed and cleared */
			serialCtxtNmeaRxHookBufIdx = 0;
    4908:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <serialCtxtNmeaRxHookBufIdx>

			SREG = sreg;
    490c:	2f bf       	out	0x3f, r18	; 63
		}

		/* append data to the buffer */
		serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    490e:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <serialCtxtRxBufferLen>
    4912:	a1 e0       	ldi	r26, 0x01	; 1
    4914:	ae 0f       	add	r26, r30
    4916:	a0 93 1b 05 	sts	0x051B, r26	; 0x80051b <serialCtxtRxBufferLen>
    491a:	ce 2f       	mov	r28, r30
    491c:	d0 e0       	ldi	r29, 0x00	; 0
    491e:	c1 5f       	subi	r28, 0xF1	; 241
    4920:	dd 4f       	sbci	r29, 0xFD	; 253
    4922:	98 83       	st	Y, r25

		if (serialCtxtRxBufferLen >= (SERIALCTXT_RX_BUFFER_SIZE - 3)) {
    4924:	a5 37       	cpi	r26, 0x75	; 117
    4926:	80 f0       	brcs	.+32     	; 0x4948 <__vector_18+0xb2>
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = '\r';
    4928:	b0 e0       	ldi	r27, 0x00	; 0
    492a:	a1 5f       	subi	r26, 0xF1	; 241
    492c:	bd 4f       	sbci	r27, 0xFD	; 253
    492e:	8d e0       	ldi	r24, 0x0D	; 13
    4930:	8c 93       	st	X, r24
			rxData = '\n';
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    4932:	83 e0       	ldi	r24, 0x03	; 3
    4934:	8e 0f       	add	r24, r30
    4936:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <serialCtxtRxBufferLen>

		/* append data to the buffer */
		serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;

		if (serialCtxtRxBufferLen >= (SERIALCTXT_RX_BUFFER_SIZE - 3)) {
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = '\r';
    493a:	ee 5f       	subi	r30, 0xFE	; 254
			rxData = '\n';
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    493c:	f0 e0       	ldi	r31, 0x00	; 0
    493e:	e1 5f       	subi	r30, 0xF1	; 241
    4940:	fd 4f       	sbci	r31, 0xFD	; 253
    4942:	8a e0       	ldi	r24, 0x0A	; 10
    4944:	80 83       	st	Z, r24
    4946:	02 c0       	rjmp	.+4      	; 0x494c <__vector_18+0xb6>
		}

		/* if the end of a NMEA sentence is detected, send this serial RX buffer to the receive (IN) ring buffer */
		if (rxData == '\n') {  // a NMEA sentence stops with:  <sentence...*checksum\r\n>
    4948:	9a 30       	cpi	r25, 0x0A	; 10
    494a:	21 f4       	brne	.+8      	; 0x4954 <__vector_18+0xbe>
			/* mark this job to be done in the main context */
			serialCtxtBufferState = SERIAL_CTXT_BUFFER_STATE_SEND;
    494c:	82 e0       	ldi	r24, 0x02	; 2
    494e:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <serialCtxtBufferState>
    4952:	12 c0       	rjmp	.+36     	; 0x4978 <__vector_18+0xe2>

		} else {
			/* append more data */
			serialCtxtBufferState = 0;
    4954:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <serialCtxtBufferState>
    4958:	0f c0       	rjmp	.+30     	; 0x4978 <__vector_18+0xe2>
		}
	} else if (serialCtxtNmeaRxHookBufIdx < SERIALCTXT_NMEA_RX_HOOK_SIZE) {
    495a:	28 30       	cpi	r18, 0x08	; 8
    495c:	68 f4       	brcc	.+26     	; 0x4978 <__vector_18+0xe2>
		uint8_t sreg = SREG;
    495e:	8f b7       	in	r24, 0x3f	; 63
		cli();
    4960:	f8 94       	cli
		serialCtxtNmeaRxHookBuf[serialCtxtNmeaRxHookBufIdx++] = rxData;
    4962:	e0 91 17 05 	lds	r30, 0x0517	; 0x800517 <serialCtxtNmeaRxHookBufIdx>
    4966:	21 e0       	ldi	r18, 0x01	; 1
    4968:	2e 0f       	add	r18, r30
    496a:	20 93 17 05 	sts	0x0517, r18	; 0x800517 <serialCtxtNmeaRxHookBufIdx>
    496e:	f0 e0       	ldi	r31, 0x00	; 0
    4970:	e9 5f       	subi	r30, 0xF9	; 249
    4972:	fd 4f       	sbci	r31, 0xFD	; 253
    4974:	90 83       	st	Z, r25
		SREG = sreg;
    4976:	8f bf       	out	0x3f, r24	; 63
	}
}
    4978:	ff 91       	pop	r31
    497a:	ef 91       	pop	r30
    497c:	df 91       	pop	r29
    497e:	cf 91       	pop	r28
    4980:	bf 91       	pop	r27
    4982:	af 91       	pop	r26
    4984:	9f 91       	pop	r25
    4986:	8f 91       	pop	r24
    4988:	5f 91       	pop	r21
    498a:	4f 91       	pop	r20
    498c:	3f 91       	pop	r19
    498e:	2f 91       	pop	r18
    4990:	0f 90       	pop	r0
    4992:	0f be       	out	0x3f, r0	; 63
    4994:	0f 90       	pop	r0
    4996:	1f 90       	pop	r1
    4998:	18 95       	reti

0000499a <__vector_19>:

//void serial_ISR_UDRE0(void) - __vector_19
ISR(USART_UDRE_vect, ISR_BLOCK)
{
    499a:	1f 92       	push	r1
    499c:	0f 92       	push	r0
    499e:	0f b6       	in	r0, 0x3f	; 63
    49a0:	0f 92       	push	r0
    49a2:	11 24       	eor	r1, r1
    49a4:	8f 93       	push	r24
    49a6:	9f 93       	push	r25
    49a8:	ef 93       	push	r30
    49aa:	ff 93       	push	r31
	UCSR0B &= ~(_BV(UDRIE0));								// disable interrupt for register empty
    49ac:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    49b0:	8f 7d       	andi	r24, 0xDF	; 223
    49b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	sei();
    49b6:	78 94       	sei

	/* first look if the serial buffer is filled */
	if (serialCtxtTxBufferIdx < serialCtxtTxBufferLen) {
    49b8:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <serialCtxtTxBufferIdx>
    49bc:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <serialCtxtTxBufferLen>
    49c0:	98 17       	cp	r25, r24
    49c2:	98 f4       	brcc	.+38     	; 0x49ea <__vector_19+0x50>
		cli();
    49c4:	f8 94       	cli
		UDR0 = serialCtxtTxBuffer[serialCtxtTxBufferIdx++];	// UDRE0 becomes cleared
    49c6:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <serialCtxtTxBufferIdx>
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	8e 0f       	add	r24, r30
    49ce:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <serialCtxtTxBufferIdx>
    49d2:	f0 e0       	ldi	r31, 0x00	; 0
    49d4:	e9 53       	subi	r30, 0x39	; 57
    49d6:	fe 4f       	sbci	r31, 0xFE	; 254
    49d8:	80 81       	ld	r24, Z
    49da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		UCSR0B |= _BV(UDRIE0);								// enables interrupt for register empty
    49de:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    49e2:	80 62       	ori	r24, 0x20	; 32
    49e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		sei();
    49e8:	78 94       	sei
	}

	/* then check if job is now done */
	if (serialCtxtTxBufferIdx >= serialCtxtTxBufferLen) {
    49ea:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <serialCtxtTxBufferIdx>
    49ee:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <serialCtxtTxBufferLen>
    49f2:	98 17       	cp	r25, r24
    49f4:	48 f0       	brcs	.+18     	; 0x4a08 <__vector_19+0x6e>
		/* job is done - turn off data register empty interrupt */
		cli();
    49f6:	f8 94       	cli
		UCSR0B &= ~(_BV(UDRIE0));							// disable interrupt for register empty
    49f8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    49fc:	8f 7d       	andi	r24, 0xDF	; 223
    49fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		sei();
    4a02:	78 94       	sei

		/* mark buffer as free */
		serialCtxtTxBufferLen = 0;
    4a04:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <serialCtxtTxBufferLen>
	}
}
    4a08:	ff 91       	pop	r31
    4a0a:	ef 91       	pop	r30
    4a0c:	9f 91       	pop	r25
    4a0e:	8f 91       	pop	r24
    4a10:	0f 90       	pop	r0
    4a12:	0f be       	out	0x3f, r0	; 63
    4a14:	0f 90       	pop	r0
    4a16:	1f 90       	pop	r1
    4a18:	18 95       	reti

00004a1a <__vector_20>:

//void serial_ISR_TXC0(void) - __vector_20
ISR(USART_TX_vect, ISR_NOBLOCK)
{
    4a1a:	78 94       	sei
    4a1c:	1f 92       	push	r1
    4a1e:	0f 92       	push	r0
    4a20:	0f b6       	in	r0, 0x3f	; 63
    4a22:	0f 92       	push	r0
    4a24:	11 24       	eor	r1, r1
	// not used yet
}
    4a26:	0f 90       	pop	r0
    4a28:	0f be       	out	0x3f, r0	; 63
    4a2a:	0f 90       	pop	r0
    4a2c:	1f 90       	pop	r1
    4a2e:	18 95       	reti

00004a30 <s_delay>:
#endif


static void s_delay(void)
{
	wdt_reset();
    4a30:	a8 95       	wdr
	if (usbIsUp) {
    4a32:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <usbIsUp>
    4a36:	88 23       	and	r24, r24
    4a38:	21 f0       	breq	.+8      	; 0x4a42 <s_delay+0x12>
		usbPoll();
    4a3a:	0c d5       	rcall	.+2584   	; 0x5454 <usbPoll>
		usb_fw_sendInInterrupt();
    4a3c:	c3 d3       	rcall	.+1926   	; 0x51c4 <usb_fw_sendInInterrupt>
		workInQueue();
    4a3e:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <workInQueue>
    4a42:	08 95       	ret

00004a44 <twi_fw_init>:


void twi_fw_init(void)
{
	/* power up this module */
	PRR &= ~(_BV(PRTWI));
    4a44:	e4 e6       	ldi	r30, 0x64	; 100
    4a46:	f0 e0       	ldi	r31, 0x00	; 0
    4a48:	80 81       	ld	r24, Z
    4a4a:	8f 77       	andi	r24, 0x7F	; 127
    4a4c:	80 83       	st	Z, r24

	uint8_t sreg = SREG;
    4a4e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4a50:	f8 94       	cli

	// setting IO pins: pull-up on
	TWI_DDR   &= ~((_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM)));	// define SDA and SCL pins as input, as long the TWI alternate port function has not taken over
    4a52:	87 b1       	in	r24, 0x07	; 7
    4a54:	8f 7c       	andi	r24, 0xCF	; 207
    4a56:	87 b9       	out	0x07, r24	; 7
	TWI_PORT  |=   (_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM));		// SDA and SCL pull-up
    4a58:	88 b1       	in	r24, 0x08	; 8
    4a5a:	80 63       	ori	r24, 0x30	; 48
    4a5c:	88 b9       	out	0x08, r24	; 8

	// SCL frequency: using 400 kHz for SCL @20 MHz clock
	TWSR = 0; 							 						// prescaler = 1
    4a5e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 17;													// gives 400 kHz @20 MHz clock
    4a62:	81 e1       	ldi	r24, 0x11	; 17
    4a64:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// TWI interface enabled and interrupt cleared
	TWCR = (_BV(TWINT) | _BV(TWEN));
    4a68:	84 e8       	ldi	r24, 0x84	; 132
    4a6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	SREG = sreg;
    4a6e:	9f bf       	out	0x3f, r25	; 63
    4a70:	08 95       	ret

00004a72 <twi_fw_waitUntilDone>:
		workInQueue();
	}
}

void twi_fw_waitUntilDone(uint8_t extraDelay)
{
    4a72:	cf 93       	push	r28
    4a74:	df 93       	push	r29
    4a76:	c8 2f       	mov	r28, r24
	while (twiState.doStart || twiState.isProcessing) {
    4a78:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4a7c:	80 ff       	sbrs	r24, 0
    4a7e:	02 c0       	rjmp	.+4      	; 0x4a84 <twi_fw_waitUntilDone+0x12>
		s_delay();
    4a80:	d7 df       	rcall	.-82     	; 0x4a30 <s_delay>
    4a82:	fa cf       	rjmp	.-12     	; 0x4a78 <twi_fw_waitUntilDone+0x6>
	}
}

void twi_fw_waitUntilDone(uint8_t extraDelay)
{
	while (twiState.doStart || twiState.isProcessing) {
    4a84:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4a88:	81 fd       	sbrc	r24, 1
    4a8a:	fa cf       	rjmp	.-12     	; 0x4a80 <twi_fw_waitUntilDone+0xe>
		s_delay();
	}

	/* Give some more time for the TWI slave to process the data */
	for (int cnt = extraDelay; cnt; --cnt) {
    4a8c:	d0 e0       	ldi	r29, 0x00	; 0
    4a8e:	20 97       	sbiw	r28, 0x00	; 0
    4a90:	19 f0       	breq	.+6      	; 0x4a98 <twi_fw_waitUntilDone+0x26>
		s_delay();
    4a92:	ce df       	rcall	.-100    	; 0x4a30 <s_delay>
	while (twiState.doStart || twiState.isProcessing) {
		s_delay();
	}

	/* Give some more time for the TWI slave to process the data */
	for (int cnt = extraDelay; cnt; --cnt) {
    4a94:	21 97       	sbiw	r28, 0x01	; 1
    4a96:	fb cf       	rjmp	.-10     	; 0x4a8e <twi_fw_waitUntilDone+0x1c>
		s_delay();
	}
}
    4a98:	df 91       	pop	r29
    4a9a:	cf 91       	pop	r28
    4a9c:	08 95       	ret

00004a9e <isr_sendStart>:
	return twiSeq2Data[0];
}

void isr_sendStart(uint8_t sendSignal, uint8_t isRepeatedStart)
{
	uint8_t sreg = SREG;
    4a9e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4aa0:	f8 94       	cli

	if (((!twiState.isProcessing && twiState.doStart) ||
    4aa2:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
    4aa6:	91 fd       	sbrc	r25, 1
    4aa8:	04 c0       	rjmp	.+8      	; 0x4ab2 <isr_sendStart+0x14>
    4aaa:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
    4aae:	90 fd       	sbrc	r25, 0
    4ab0:	06 c0       	rjmp	.+12     	; 0x4abe <isr_sendStart+0x20>
		 ( twiState.isProcessing && isRepeatedStart)) &&
    4ab2:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
void isr_sendStart(uint8_t sendSignal, uint8_t isRepeatedStart)
{
	uint8_t sreg = SREG;
	cli();

	if (((!twiState.isProcessing && twiState.doStart) ||
    4ab6:	91 ff       	sbrs	r25, 1
    4ab8:	17 c0       	rjmp	.+46     	; 0x4ae8 <isr_sendStart+0x4a>
		 ( twiState.isProcessing && isRepeatedStart)) &&
    4aba:	66 23       	and	r22, r22
    4abc:	a9 f0       	breq	.+42     	; 0x4ae8 <isr_sendStart+0x4a>
    4abe:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4ac2:	99 23       	and	r25, r25
    4ac4:	89 f0       	breq	.+34     	; 0x4ae8 <isr_sendStart+0x4a>
		twiSeq2DataCnt) {

		twiState.isProcessing	= true;
    4ac6:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
    4aca:	92 60       	ori	r25, 0x02	; 2
    4acc:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <twiState+0x1>
		twiState.doStart		= false;
    4ad0:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
    4ad4:	9e 7f       	andi	r25, 0xFE	; 254
    4ad6:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <twiState+0x1>
		twiSeq2DataIdx			= 0;
    4ada:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <twiSeq2DataIdx>

		if (sendSignal) {
    4ade:	88 23       	and	r24, r24
    4ae0:	19 f0       	breq	.+6      	; 0x4ae8 <isr_sendStart+0x4a>
			/* send START or REPEATED START */
			TWCR = (_BV(TWINT) | _BV(TWSTA) | _BV(TWEN) | _BV(TWIE));	// start-TWI/rise clock, send START, TWI enabled, TWINT-Interrupt enabled
    4ae2:	85 ea       	ldi	r24, 0xA5	; 165
    4ae4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		}
	}

	SREG = sreg;
    4ae8:	2f bf       	out	0x3f, r18	; 63
    4aea:	08 95       	ret

00004aec <twi_fw_sendCmdSendData1SendDataVar>:

	twi_fw_sendCmdSendData1SendDataVar(addr, cmd, 2, (uint8_t*) &data);
}

void twi_fw_sendCmdSendData1SendDataVar(uint8_t addr, uint8_t cmd, uint8_t cnt, uint8_t data[])
{
    4aec:	ef 92       	push	r14
    4aee:	ff 92       	push	r15
    4af0:	1f 93       	push	r17
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	00 d0       	rcall	.+0      	; 0x4af8 <twi_fw_sendCmdSendData1SendDataVar+0xc>
    4af8:	cd b7       	in	r28, 0x3d	; 61
    4afa:	de b7       	in	r29, 0x3e	; 62
    4afc:	18 2f       	mov	r17, r24
    4afe:	79 01       	movw	r14, r18
	int i;
	uint8_t sreg;

	twi_fw_waitUntilDone(addr == TWI_SMART_LCD_ADDR ?  10 : 0);
    4b00:	82 32       	cpi	r24, 0x22	; 34
    4b02:	11 f0       	breq	.+4      	; 0x4b08 <twi_fw_sendCmdSendData1SendDataVar+0x1c>
    4b04:	80 e0       	ldi	r24, 0x00	; 0
    4b06:	01 c0       	rjmp	.+2      	; 0x4b0a <twi_fw_sendCmdSendData1SendDataVar+0x1e>
    4b08:	8a e0       	ldi	r24, 0x0A	; 10
    4b0a:	4a 83       	std	Y+2, r20	; 0x02
    4b0c:	69 83       	std	Y+1, r22	; 0x01
    4b0e:	b1 df       	rcall	.-158    	; 0x4a72 <twi_fw_waitUntilDone>

	sreg = SREG;
    4b10:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4b12:	f8 94       	cli
	twiSeq1Adr = addr;
    4b14:	10 93 10 05 	sts	0x0510, r17	; 0x800510 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    4b18:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    4b1c:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4b20:	81 e0       	ldi	r24, 0x01	; 1
    4b22:	8e 0f       	add	r24, r30
    4b24:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataCnt>
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	e3 5d       	subi	r30, 0xD3	; 211
    4b2c:	fe 4f       	sbci	r31, 0xFE	; 254
    4b2e:	69 81       	ldd	r22, Y+1	; 0x01
    4b30:	60 83       	st	Z, r22
	twiState.isRepeatedStart = false;
    4b32:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4b36:	8b 7f       	andi	r24, 0xFB	; 251
    4b38:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>
	for (i = 0; i < cnt; ++i) {
    4b3c:	d7 01       	movw	r26, r14
    4b3e:	4a 81       	ldd	r20, Y+2	; 0x02
    4b40:	50 e0       	ldi	r21, 0x00	; 0
    4b42:	9d 01       	movw	r18, r26
    4b44:	2e 19       	sub	r18, r14
    4b46:	3f 09       	sbc	r19, r15
    4b48:	24 17       	cp	r18, r20
    4b4a:	35 07       	cpc	r19, r21
    4b4c:	64 f4       	brge	.+24     	; 0x4b66 <twi_fw_sendCmdSendData1SendDataVar+0x7a>
		twiSeq2Data[twiSeq2DataCnt++] = data[i];
    4b4e:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	8e 0f       	add	r24, r30
    4b56:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataCnt>
    4b5a:	f0 e0       	ldi	r31, 0x00	; 0
    4b5c:	8d 91       	ld	r24, X+
    4b5e:	e3 5d       	subi	r30, 0xD3	; 211
    4b60:	fe 4f       	sbci	r31, 0xFE	; 254
    4b62:	80 83       	st	Z, r24
    4b64:	ee cf       	rjmp	.-36     	; 0x4b42 <twi_fw_sendCmdSendData1SendDataVar+0x56>
	}
	twiState.doStart = true;
    4b66:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4b6a:	81 60       	ori	r24, 0x01	; 1
    4b6c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>
	SREG = sreg;
    4b70:	9f bf       	out	0x3f, r25	; 63

	isr_sendStart(true, false);
    4b72:	60 e0       	ldi	r22, 0x00	; 0
    4b74:	81 e0       	ldi	r24, 0x01	; 1
}
    4b76:	0f 90       	pop	r0
    4b78:	0f 90       	pop	r0
    4b7a:	df 91       	pop	r29
    4b7c:	cf 91       	pop	r28
    4b7e:	1f 91       	pop	r17
    4b80:	ff 90       	pop	r15
    4b82:	ef 90       	pop	r14
		twiSeq2Data[twiSeq2DataCnt++] = data[i];
	}
	twiState.doStart = true;
	SREG = sreg;

	isr_sendStart(true, false);
    4b84:	8c cf       	rjmp	.-232    	; 0x4a9e <isr_sendStart>

00004b86 <twi_fw_sendCmdSendData1>:
		s_delay();
	}
}

void twi_fw_sendCmdSendData1(uint8_t addr, uint8_t cmd, uint8_t data1)
{
    4b86:	cf 93       	push	r28
    4b88:	df 93       	push	r29
    4b8a:	1f 92       	push	r1
    4b8c:	cd b7       	in	r28, 0x3d	; 61
    4b8e:	de b7       	in	r29, 0x3e	; 62
    4b90:	49 83       	std	Y+1, r20	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(addr, cmd, 1, &data1);
    4b92:	9e 01       	movw	r18, r28
    4b94:	2f 5f       	subi	r18, 0xFF	; 255
    4b96:	3f 4f       	sbci	r19, 0xFF	; 255
    4b98:	41 e0       	ldi	r20, 0x01	; 1
    4b9a:	a8 df       	rcall	.-176    	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>
}
    4b9c:	0f 90       	pop	r0
    4b9e:	df 91       	pop	r29
    4ba0:	cf 91       	pop	r28
    4ba2:	08 95       	ret

00004ba4 <twi_fw_sendCmdSendData1SendData2>:

void twi_fw_sendCmdSendData1SendData2(uint8_t addr, uint8_t cmd, uint8_t data1, uint8_t data2)
{
    4ba4:	cf 93       	push	r28
    4ba6:	df 93       	push	r29
    4ba8:	00 d0       	rcall	.+0      	; 0x4baa <twi_fw_sendCmdSendData1SendData2+0x6>
    4baa:	cd b7       	in	r28, 0x3d	; 61
    4bac:	de b7       	in	r29, 0x3e	; 62
	struct {
		uint8_t data1;
		uint8_t data2;
	} data = { data1, data2 };
    4bae:	49 83       	std	Y+1, r20	; 0x01
    4bb0:	2a 83       	std	Y+2, r18	; 0x02

	twi_fw_sendCmdSendData1SendDataVar(addr, cmd, 2, (uint8_t*) &data);
    4bb2:	9e 01       	movw	r18, r28
    4bb4:	2f 5f       	subi	r18, 0xFF	; 255
    4bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    4bb8:	42 e0       	ldi	r20, 0x02	; 2
    4bba:	98 df       	rcall	.-208    	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>
}
    4bbc:	0f 90       	pop	r0
    4bbe:	0f 90       	pop	r0
    4bc0:	df 91       	pop	r29
    4bc2:	cf 91       	pop	r28
    4bc4:	08 95       	ret

00004bc6 <twi_fw_sendCmdReadData1>:

	isr_sendStart(true, false);
}

uint8_t twi_fw_sendCmdReadData1(uint8_t addr, uint8_t cmd)
{
    4bc6:	1f 93       	push	r17
    4bc8:	cf 93       	push	r28
    4bca:	df 93       	push	r29
    4bcc:	1f 92       	push	r1
    4bce:	cd b7       	in	r28, 0x3d	; 61
    4bd0:	de b7       	in	r29, 0x3e	; 62
    4bd2:	18 2f       	mov	r17, r24
	uint8_t sreg;

	twi_fw_waitUntilDone(addr == TWI_SMART_LCD_ADDR ?  10 : 0);
    4bd4:	82 32       	cpi	r24, 0x22	; 34
    4bd6:	11 f0       	breq	.+4      	; 0x4bdc <twi_fw_sendCmdReadData1+0x16>
    4bd8:	80 e0       	ldi	r24, 0x00	; 0
    4bda:	01 c0       	rjmp	.+2      	; 0x4bde <twi_fw_sendCmdReadData1+0x18>
    4bdc:	8a e0       	ldi	r24, 0x0A	; 10
    4bde:	69 83       	std	Y+1, r22	; 0x01
    4be0:	48 df       	rcall	.-368    	; 0x4a72 <twi_fw_waitUntilDone>

	sreg = SREG;
    4be2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4be4:	f8 94       	cli
	twiSeq1Adr = addr;
    4be6:	10 93 10 05 	sts	0x0510, r17	; 0x800510 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    4bea:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    4bee:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4bf2:	81 e0       	ldi	r24, 0x01	; 1
    4bf4:	8e 0f       	add	r24, r30
    4bf6:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataCnt>
    4bfa:	f0 e0       	ldi	r31, 0x00	; 0
    4bfc:	e3 5d       	subi	r30, 0xD3	; 211
    4bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    4c00:	69 81       	ldd	r22, Y+1	; 0x01
    4c02:	60 83       	st	Z, r22
	twiState.isRepeatedStart = true;
    4c04:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4c08:	84 60       	ori	r24, 0x04	; 4
    4c0a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>
	twiSeq2DataRcvCnt = 1;
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <twiSeq2DataRcvCnt>
	twiState.doStart = true;
    4c14:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4c18:	81 60       	ori	r24, 0x01	; 1
    4c1a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>
	SREG = sreg;
    4c1e:	9f bf       	out	0x3f, r25	; 63

	isr_sendStart(true, false);
    4c20:	60 e0       	ldi	r22, 0x00	; 0
    4c22:	81 e0       	ldi	r24, 0x01	; 1
    4c24:	3c df       	rcall	.-392    	; 0x4a9e <isr_sendStart>
	twi_fw_waitUntilDone(0);
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	24 df       	rcall	.-440    	; 0x4a72 <twi_fw_waitUntilDone>

	return twiSeq2Data[0];
    4c2a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <twiSeq2Data>
}
    4c2e:	0f 90       	pop	r0
    4c30:	df 91       	pop	r29
    4c32:	cf 91       	pop	r28
    4c34:	1f 91       	pop	r17
    4c36:	08 95       	ret

00004c38 <isr_sendStop>:
	SREG = sreg;
}

void isr_sendStop(uint8_t sendSignal)
{
	uint8_t sreg = SREG;
    4c38:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4c3a:	f8 94       	cli

	if (sendSignal && twiState.isProcessing) {
    4c3c:	88 23       	and	r24, r24
    4c3e:	39 f0       	breq	.+14     	; 0x4c4e <isr_sendStop+0x16>
    4c40:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4c44:	81 ff       	sbrs	r24, 1
    4c46:	03 c0       	rjmp	.+6      	; 0x4c4e <isr_sendStop+0x16>
		/* send stop */
		TWCR = (_BV(TWINT) | _BV(TWSTO) | _BV(TWEN) | _BV(TWIE));
    4c48:	85 e9       	ldi	r24, 0x95	; 149
    4c4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}

	twiSeq2DataCnt = 0;
    4c4e:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <twiSeq2DataCnt>
	twiState.isProcessing = false;
    4c52:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4c56:	8d 7f       	andi	r24, 0xFD	; 253
    4c58:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>

	SREG = sreg;
    4c5c:	9f bf       	out	0x3f, r25	; 63
    4c5e:	08 95       	ret

00004c60 <__vector_24>:
/* Forward declaration */
static uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur);

//void twi_ISR_TWI(void) - __vector_24
ISR(TWI_vect, ISR_BLOCK)
{	/* TWI */
    4c60:	1f 92       	push	r1
    4c62:	0f 92       	push	r0
    4c64:	0f b6       	in	r0, 0x3f	; 63
    4c66:	0f 92       	push	r0
    4c68:	11 24       	eor	r1, r1
    4c6a:	2f 93       	push	r18
    4c6c:	3f 93       	push	r19
    4c6e:	4f 93       	push	r20
    4c70:	5f 93       	push	r21
    4c72:	6f 93       	push	r22
    4c74:	7f 93       	push	r23
    4c76:	8f 93       	push	r24
    4c78:	9f 93       	push	r25
    4c7a:	af 93       	push	r26
    4c7c:	bf 93       	push	r27
    4c7e:	cf 93       	push	r28
    4c80:	ef 93       	push	r30
    4c82:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    4c84:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4c88:	88 7f       	andi	r24, 0xF8	; 248
	uint8_t twd = TWDR;
    4c8a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    4c8e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);			// TWI interrupt flag reset, TWI enabled and TWINT-Interrupt enabled
}

static uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
	uint8_t twcr_new = twcr_cur & 0b01000101;
    4c92:	c2 2f       	mov	r28, r18
    4c94:	c5 74       	andi	r28, 0x45	; 69

	/* publish the state */
	twiState.state = tws;
    4c96:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <twiState>

	switch(tws) {
    4c9a:	88 32       	cpi	r24, 0x28	; 40
    4c9c:	09 f4       	brne	.+2      	; 0x4ca0 <__vector_24+0x40>
    4c9e:	6f c0       	rjmp	.+222    	; 0x4d7e <__vector_24+0x11e>
    4ca0:	80 f4       	brcc	.+32     	; 0x4cc2 <__vector_24+0x62>
    4ca2:	80 31       	cpi	r24, 0x10	; 16
    4ca4:	f9 f0       	breq	.+62     	; 0x4ce4 <__vector_24+0x84>
    4ca6:	38 f4       	brcc	.+14     	; 0x4cb6 <__vector_24+0x56>
    4ca8:	88 30       	cpi	r24, 0x08	; 8
    4caa:	09 f0       	breq	.+2      	; 0x4cae <__vector_24+0x4e>
    4cac:	ac c0       	rjmp	.+344    	; 0x4e06 <__vector_24+0x1a6>
	case TWI_TWSR_START:
		/* MASTER: send SLA - slave WRITE address */
		TWDR = (twiSeq1Adr << 1);  						// I2C device address - write mode after first start
    4cae:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4cb2:	88 0f       	add	r24, r24
    4cb4:	40 c0       	rjmp	.+128    	; 0x4d36 <__vector_24+0xd6>
	uint8_t twcr_new = twcr_cur & 0b01000101;

	/* publish the state */
	twiState.state = tws;

	switch(tws) {
    4cb6:	88 31       	cpi	r24, 0x18	; 24
    4cb8:	29 f1       	breq	.+74     	; 0x4d04 <__vector_24+0xa4>
    4cba:	80 32       	cpi	r24, 0x20	; 32
    4cbc:	09 f4       	brne	.+2      	; 0x4cc0 <__vector_24+0x60>
    4cbe:	4a c0       	rjmp	.+148    	; 0x4d54 <__vector_24+0xf4>
    4cc0:	a2 c0       	rjmp	.+324    	; 0x4e06 <__vector_24+0x1a6>
    4cc2:	88 34       	cpi	r24, 0x48	; 72
    4cc4:	09 f4       	brne	.+2      	; 0x4cc8 <__vector_24+0x68>
    4cc6:	46 c0       	rjmp	.+140    	; 0x4d54 <__vector_24+0xf4>
    4cc8:	30 f4       	brcc	.+12     	; 0x4cd6 <__vector_24+0x76>
    4cca:	80 33       	cpi	r24, 0x30	; 48
    4ccc:	09 f4       	brne	.+2      	; 0x4cd0 <__vector_24+0x70>
    4cce:	9b c0       	rjmp	.+310    	; 0x4e06 <__vector_24+0x1a6>
    4cd0:	80 34       	cpi	r24, 0x40	; 64
    4cd2:	c1 f0       	breq	.+48     	; 0x4d04 <__vector_24+0xa4>
    4cd4:	98 c0       	rjmp	.+304    	; 0x4e06 <__vector_24+0x1a6>
    4cd6:	80 35       	cpi	r24, 0x50	; 80
    4cd8:	09 f4       	brne	.+2      	; 0x4cdc <__vector_24+0x7c>
    4cda:	6c c0       	rjmp	.+216    	; 0x4db4 <__vector_24+0x154>
    4cdc:	88 35       	cpi	r24, 0x58	; 88
    4cde:	09 f4       	brne	.+2      	; 0x4ce2 <__vector_24+0x82>
    4ce0:	80 c0       	rjmp	.+256    	; 0x4de2 <__vector_24+0x182>
    4ce2:	91 c0       	rjmp	.+290    	; 0x4e06 <__vector_24+0x1a6>
		TWDR = (twiSeq1Adr << 1);  						// I2C device address - write mode after first start
		break;

	case TWI_TWSR_REPEATEDSTART:
		/* MASTER: send SLA - slave address */
		TWDR = (twiSeq1Adr << 1) | 1; 					// I2C device address - read mode after repeated start
    4ce4:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4ce8:	88 0f       	add	r24, r24
    4cea:	81 60       	ori	r24, 0x01	; 1
    4cec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

		twiState.isRepeatedStart = false;
    4cf0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4cf4:	8b 7f       	andi	r24, 0xFB	; 251
    4cf6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>
		twiSeq2DataCnt = twiSeq2DataRcvCnt;
    4cfa:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <twiSeq2DataRcvCnt>
    4cfe:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataCnt>
    4d02:	84 c0       	rjmp	.+264    	; 0x4e0c <__vector_24+0x1ac>
		break;

	case TWI_TWSR_M_SLAW_ADDR_ACK:
	case TWI_TWSR_M_SLAR_ADDR_ACK:
		if (twiSeq1Adr == TWI_MCP23017_ADDR) {
    4d04:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4d08:	80 32       	cpi	r24, 0x20	; 32
    4d0a:	31 f4       	brne	.+12     	; 0x4d18 <__vector_24+0xb8>
			main_bf.mainIsLcdAttached = true;
    4d0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4d10:	80 68       	ori	r24, 0x80	; 128
    4d12:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    4d16:	09 c0       	rjmp	.+18     	; 0x4d2a <__vector_24+0xca>
		} else if (twiSeq1Adr == TWI_SMART_LCD_ADDR) {
    4d18:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4d1c:	82 32       	cpi	r24, 0x22	; 34
    4d1e:	29 f4       	brne	.+10     	; 0x4d2a <__vector_24+0xca>
			main_bf.mainIsSmartAttached = true;
    4d20:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    4d24:	81 60       	ori	r24, 0x01	; 1
    4d26:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
		}

		if (twiState.state == TWI_TWSR_M_SLAW_ADDR_ACK) {
    4d2a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <twiState>
    4d2e:	88 31       	cpi	r24, 0x18	; 24
    4d30:	29 f4       	brne	.+10     	; 0x4d3c <__vector_24+0xdc>
			/* send command data */
			TWDR = twiSeq2Data[0];							// internal command or address register of the I2C device
    4d32:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <twiSeq2Data>
    4d36:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4d3a:	68 c0       	rjmp	.+208    	; 0x4e0c <__vector_24+0x1ac>
		} else {
			// no data byte to store, here
			if ((twiSeq2DataIdx + 1) >= twiSeq2DataCnt) {
    4d3c:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4d40:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	01 96       	adiw	r24, 0x01	; 1
    4d48:	50 e0       	ldi	r21, 0x00	; 0
    4d4a:	84 17       	cp	r24, r20
    4d4c:	95 07       	cpc	r25, r21
    4d4e:	0c f4       	brge	.+2      	; 0x4d52 <__vector_24+0xf2>
    4d50:	46 c0       	rjmp	.+140    	; 0x4dde <__vector_24+0x17e>
    4d52:	42 c0       	rjmp	.+132    	; 0x4dd8 <__vector_24+0x178>
		}
		break;

	case TWI_TWSR_M_SLAW_ADDR_NACK:
	case TWI_TWSR_M_SLAR_ADDR_NACK:
		if (twiSeq1Adr == TWI_MCP23017_ADDR) {
    4d54:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4d58:	80 32       	cpi	r24, 0x20	; 32
    4d5a:	31 f4       	brne	.+12     	; 0x4d68 <__vector_24+0x108>
			main_bf.mainIsLcdAttached = false;
    4d5c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4d60:	8f 77       	andi	r24, 0x7F	; 127
    4d62:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    4d66:	4f c0       	rjmp	.+158    	; 0x4e06 <__vector_24+0x1a6>
		} else if (twiSeq1Adr == TWI_SMART_LCD_ADDR) {
    4d68:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4d6c:	82 32       	cpi	r24, 0x22	; 34
    4d6e:	09 f0       	breq	.+2      	; 0x4d72 <__vector_24+0x112>
    4d70:	4a c0       	rjmp	.+148    	; 0x4e06 <__vector_24+0x1a6>
			main_bf.mainIsSmartAttached = false;
    4d72:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    4d76:	8e 7f       	andi	r24, 0xFE	; 254
    4d78:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
    4d7c:	44 c0       	rjmp	.+136    	; 0x4e06 <__vector_24+0x1a6>
		isr_sendStop(false);
		twcr_new |= _BV(TWSTO);
		break;

	case TWI_TWSR_M_SLAW_DATA_ACK:
		++twiSeq2DataIdx;
    4d7e:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4d82:	8f 5f       	subi	r24, 0xFF	; 255
    4d84:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <twiSeq2DataIdx>
		if (twiSeq2DataIdx < twiSeq2DataCnt) {
    4d88:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4d8c:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4d90:	98 17       	cp	r25, r24
    4d92:	38 f4       	brcc	.+14     	; 0x4da2 <__vector_24+0x142>
			/* send data */
			TWDR = twiSeq2Data[twiSeq2DataIdx];
    4d94:	e0 91 0d 05 	lds	r30, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4d98:	f0 e0       	ldi	r31, 0x00	; 0
    4d9a:	e3 5d       	subi	r30, 0xD3	; 211
    4d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d9e:	80 81       	ld	r24, Z
    4da0:	ca cf       	rjmp	.-108    	; 0x4d36 <__vector_24+0xd6>

		} else {
			if (twiState.isRepeatedStart) {
    4da2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4da6:	82 ff       	sbrs	r24, 2
    4da8:	2e c0       	rjmp	.+92     	; 0x4e06 <__vector_24+0x1a6>
				isr_sendStart(false, true);
    4daa:	61 e0       	ldi	r22, 0x01	; 1
    4dac:	80 e0       	ldi	r24, 0x00	; 0
    4dae:	77 de       	rcall	.-786    	; 0x4a9e <isr_sendStart>
				twcr_new |= _BV(TWSTA);
    4db0:	c0 62       	ori	r28, 0x20	; 32
    4db2:	2c c0       	rjmp	.+88     	; 0x4e0c <__vector_24+0x1ac>
		twcr_new |= _BV(TWSTO);
		break;

	case TWI_TWSR_M_SLAR_DATA_ACK:
		/* receive data */
		twiSeq2Data[twiSeq2DataIdx++]	= TWDR;
    4db4:	e0 91 0d 05 	lds	r30, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4db8:	81 e0       	ldi	r24, 0x01	; 1
    4dba:	8e 0f       	add	r24, r30
    4dbc:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <twiSeq2DataIdx>
    4dc0:	f0 e0       	ldi	r31, 0x00	; 0
    4dc2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4dc6:	e3 5d       	subi	r30, 0xD3	; 211
    4dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    4dca:	80 83       	st	Z, r24
		if (twiSeq2DataIdx >= twiSeq2DataCnt) {
    4dcc:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4dd0:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4dd4:	98 17       	cp	r25, r24
    4dd6:	18 f0       	brcs	.+6      	; 0x4dde <__vector_24+0x17e>
			twcr_new &= ~_BV(TWEA);							// NACK next data byte
    4dd8:	c2 2f       	mov	r28, r18
    4dda:	c5 70       	andi	r28, 0x05	; 5
    4ddc:	17 c0       	rjmp	.+46     	; 0x4e0c <__vector_24+0x1ac>
		} else {
			twcr_new |= _BV(TWEA);							// ACK  next data byte to get further data
    4dde:	c0 64       	ori	r28, 0x40	; 64
    4de0:	15 c0       	rjmp	.+42     	; 0x4e0c <__vector_24+0x1ac>
		}
		break;

	case TWI_TWSR_M_SLAR_DATA_NACK:
		if (twiSeq2DataIdx < twiSeq2DataCnt) {
    4de2:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4de6:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4dea:	98 17       	cp	r25, r24
    4dec:	60 f4       	brcc	.+24     	; 0x4e06 <__vector_24+0x1a6>
			twiSeq2Data[twiSeq2DataIdx++]	= TWDR;
    4dee:	e0 91 0d 05 	lds	r30, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4df2:	81 e0       	ldi	r24, 0x01	; 1
    4df4:	8e 0f       	add	r24, r30
    4df6:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <twiSeq2DataIdx>
    4dfa:	f0 e0       	ldi	r31, 0x00	; 0
    4dfc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4e00:	e3 5d       	subi	r30, 0xD3	; 211
    4e02:	fe 4f       	sbci	r31, 0xFE	; 254
    4e04:	80 83       	st	Z, r24
		isr_sendStop(false);
		twcr_new |= _BV(TWSTO);
		break;

	default:
		isr_sendStop(false);
    4e06:	80 e0       	ldi	r24, 0x00	; 0
    4e08:	17 df       	rcall	.-466    	; 0x4c38 <isr_sendStop>
		twcr_new |= _BV(TWSTO);
    4e0a:	c0 61       	ori	r28, 0x10	; 16
{	/* TWI */
	uint8_t tws = TWSR & (0b11111 << TWS3);
	uint8_t twd = TWDR;
	uint8_t twcr_cur = TWCR;
	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);			// TWI interrupt flag reset, TWI enabled and TWINT-Interrupt enabled
    4e0c:	c5 68       	ori	r28, 0x85	; 133
    4e0e:	c0 93 bc 00 	sts	0x00BC, r28	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    4e12:	ff 91       	pop	r31
    4e14:	ef 91       	pop	r30
    4e16:	cf 91       	pop	r28
    4e18:	bf 91       	pop	r27
    4e1a:	af 91       	pop	r26
    4e1c:	9f 91       	pop	r25
    4e1e:	8f 91       	pop	r24
    4e20:	7f 91       	pop	r23
    4e22:	6f 91       	pop	r22
    4e24:	5f 91       	pop	r21
    4e26:	4f 91       	pop	r20
    4e28:	3f 91       	pop	r19
    4e2a:	2f 91       	pop	r18
    4e2c:	0f 90       	pop	r0
    4e2e:	0f be       	out	0x3f, r0	; 63
    4e30:	0f 90       	pop	r0
    4e32:	1f 90       	pop	r1
    4e34:	18 95       	reti

00004e36 <twi_mcp23017_fw_init>:
	uint8_t clr_data = 0x00;  // clear data
	uint8_t set_data = 0xff;  // set data
	uint8_t conData = _BV(IOCON_SEQOP) | _BV(IOCON_ODR);	// BANK=0, no MIRROR, BYTE mode, do not overwrite INT bits (ODR),

	/* IOCON */
	(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IOCON, conData);
    4e36:	44 e2       	ldi	r20, 0x24	; 36
    4e38:	6a e0       	ldi	r22, 0x0A	; 10
    4e3a:	80 e2       	ldi	r24, 0x20	; 32
    4e3c:	a4 de       	rcall	.-696    	; 0x4b86 <twi_fw_sendCmdSendData1>
	twi_fw_waitUntilDone(0);
    4e3e:	80 e0       	ldi	r24, 0x00	; 0
    4e40:	18 de       	rcall	.-976    	; 0x4a72 <twi_fw_waitUntilDone>

	if (!main_bf.mainIsLcdAttached) {
    4e42:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4e46:	87 ff       	sbrs	r24, 7
    4e48:	28 c0       	rjmp	.+80     	; 0x4e9a <twi_mcp23017_fw_init+0x64>
	}

	/* GPIO */

	/* GPPU */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPPUA, set_data, set_data);  // pull up all GPIO bits - setting port-A and port-B
    4e4a:	2f ef       	ldi	r18, 0xFF	; 255
    4e4c:	4f ef       	ldi	r20, 0xFF	; 255
    4e4e:	6c e0       	ldi	r22, 0x0C	; 12
    4e50:	80 e2       	ldi	r24, 0x20	; 32
    4e52:	a8 de       	rcall	.-688    	; 0x4ba4 <twi_fw_sendCmdSendData1SendData2>

	/* IODIR */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data, clr_data);  // 0=output / 1=input - setting port-A and port-B
    4e54:	20 e0       	ldi	r18, 0x00	; 0
    4e56:	4f ef       	ldi	r20, 0xFF	; 255
    4e58:	60 e0       	ldi	r22, 0x00	; 0
    4e5a:	80 e2       	ldi	r24, 0x20	; 32
    4e5c:	a3 de       	rcall	.-698    	; 0x4ba4 <twi_fw_sendCmdSendData1SendData2>

	/* IPOL */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IPOLA, clr_data, clr_data);  // no pin inversion - setting port-A and port-B
    4e5e:	20 e0       	ldi	r18, 0x00	; 0
    4e60:	40 e0       	ldi	r20, 0x00	; 0
    4e62:	62 e0       	ldi	r22, 0x02	; 2
    4e64:	80 e2       	ldi	r24, 0x20	; 32
    4e66:	9e de       	rcall	.-708    	; 0x4ba4 <twi_fw_sendCmdSendData1SendData2>

	/* GPIO */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPIOA, clr_data, clr_data);  // all data out cleared - setting port-A and port-B
    4e68:	20 e0       	ldi	r18, 0x00	; 0
    4e6a:	40 e0       	ldi	r20, 0x00	; 0
    4e6c:	62 e1       	ldi	r22, 0x12	; 18
    4e6e:	80 e2       	ldi	r24, 0x20	; 32
    4e70:	99 de       	rcall	.-718    	; 0x4ba4 <twi_fw_sendCmdSendData1SendData2>

	/* OLAT */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATA, clr_data, clr_data);  // all data cleared - setting port-A and port-B
    4e72:	20 e0       	ldi	r18, 0x00	; 0
    4e74:	40 e0       	ldi	r20, 0x00	; 0
    4e76:	64 e1       	ldi	r22, 0x14	; 20
    4e78:	80 e2       	ldi	r24, 0x20	; 32
    4e7a:	94 de       	rcall	.-728    	; 0x4ba4 <twi_fw_sendCmdSendData1SendData2>


	/* INTERRUPTS */

	/* GPINTEN */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPINTENA, clr_data, clr_data);  // no INT used - setting port-A and port-B
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	40 e0       	ldi	r20, 0x00	; 0
    4e80:	64 e0       	ldi	r22, 0x04	; 4
    4e82:	80 e2       	ldi	r24, 0x20	; 32
    4e84:	8f de       	rcall	.-738    	; 0x4ba4 <twi_fw_sendCmdSendData1SendData2>

	/* DEFVAL */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_DEFVALA, clr_data, clr_data);  // unused - setting port-A and port-B
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	40 e0       	ldi	r20, 0x00	; 0
    4e8a:	66 e0       	ldi	r22, 0x06	; 6
    4e8c:	80 e2       	ldi	r24, 0x20	; 32
    4e8e:	8a de       	rcall	.-748    	; 0x4ba4 <twi_fw_sendCmdSendData1SendData2>

	/* INTCON */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_INTCONA, set_data, set_data);  // unused - setting port-A and port-B
    4e90:	2f ef       	ldi	r18, 0xFF	; 255
    4e92:	4f ef       	ldi	r20, 0xFF	; 255
    4e94:	68 e0       	ldi	r22, 0x08	; 8
    4e96:	80 e2       	ldi	r24, 0x20	; 32
    4e98:	85 ce       	rjmp	.-758    	; 0x4ba4 <twi_fw_sendCmdSendData1SendData2>
    4e9a:	08 95       	ret

00004e9c <twi_mcp23017_fw_setPortA_DirOut>:
void twi_mcp23017_fw_setPortA_DirOut(uint8_t isOut)
{
	uint8_t clr_data = 0x00;  // clear data
	uint8_t set_data = 0xff;  // set data

	if (isOut) {
    4e9c:	88 23       	and	r24, r24
    4e9e:	11 f0       	breq	.+4      	; 0x4ea4 <twi_mcp23017_fw_setPortA_DirOut+0x8>
		(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, clr_data);  // 0=output - setting port-A
    4ea0:	40 e0       	ldi	r20, 0x00	; 0
    4ea2:	01 c0       	rjmp	.+2      	; 0x4ea6 <twi_mcp23017_fw_setPortA_DirOut+0xa>

	} else {
		(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data);  // 1=input  - setting port-A
    4ea4:	4f ef       	ldi	r20, 0xFF	; 255
    4ea6:	60 e0       	ldi	r22, 0x00	; 0
    4ea8:	80 e2       	ldi	r24, 0x20	; 32
    4eaa:	6d ce       	rjmp	.-806    	; 0x4b86 <twi_fw_sendCmdSendData1>

00004eac <twi_mcp23017_fw_setPortB>:
	}
}

void twi_mcp23017_fw_setPortB(uint8_t portB)
{
	(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATB, portB);
    4eac:	48 2f       	mov	r20, r24
    4eae:	65 e1       	ldi	r22, 0x15	; 21
    4eb0:	80 e2       	ldi	r24, 0x20	; 32
    4eb2:	69 ce       	rjmp	.-814    	; 0x4b86 <twi_fw_sendCmdSendData1>

00004eb4 <twi_mcp23017_fw_setPortBA>:
}

void twi_mcp23017_fw_setPortBA(uint8_t portB, uint8_t portA)
{
    4eb4:	46 2f       	mov	r20, r22
	portB |= (portA & 0x01) << 7;							// XXX defective MCP23017 work-around
    4eb6:	90 e8       	ldi	r25, 0x80	; 128
    4eb8:	69 9f       	mul	r22, r25
    4eba:	90 01       	movw	r18, r0
    4ebc:	11 24       	eor	r1, r1
    4ebe:	28 2b       	or	r18, r24
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATA, portA, portB);
    4ec0:	64 e1       	ldi	r22, 0x14	; 20
    4ec2:	80 e2       	ldi	r24, 0x20	; 32
    4ec4:	6f ce       	rjmp	.-802    	; 0x4ba4 <twi_fw_sendCmdSendData1SendData2>

00004ec6 <twi_mcp23017_fw_readPortA>:
}

uint8_t twi_mcp23017_fw_readPortA(void)
{
	return twi_fw_sendCmdReadData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPIOA);
    4ec6:	62 e1       	ldi	r22, 0x12	; 18
    4ec8:	80 e2       	ldi	r24, 0x20	; 32
    4eca:	7d ce       	rjmp	.-774    	; 0x4bc6 <twi_fw_sendCmdReadData1>

00004ecc <twi_mcp23017_av1624_fw_waitUntilReady>:
	twi_mcp23017_fw_setPortA_DirOut(false);
}
#endif

void twi_mcp23017_av1624_fw_waitUntilReady(void)
{
    4ecc:	1f 93       	push	r17
    4ece:	cf 93       	push	r28
    4ed0:	df 93       	push	r29
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    4ed2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    4ed6:	82 95       	swap	r24
    4ed8:	86 95       	lsr	r24
    4eda:	87 70       	andi	r24, 0x07	; 7
    4edc:	81 30       	cpi	r24, 0x01	; 1
    4ede:	11 f0       	breq	.+4      	; 0x4ee4 <twi_mcp23017_av1624_fw_waitUntilReady+0x18>
    4ee0:	c0 e0       	ldi	r28, 0x00	; 0
    4ee2:	01 c0       	rjmp	.+2      	; 0x4ee6 <twi_mcp23017_av1624_fw_waitUntilReady+0x1a>
    4ee4:	c8 e0       	ldi	r28, 0x08	; 8

	twi_mcp23017_fw_setPortA_DirOut(false);
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	d9 df       	rcall	.-78     	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>

	for (;;) {
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    4eea:	dc 2f       	mov	r29, r28
    4eec:	d2 60       	ori	r29, 0x02	; 2
		twi_mcp23017_fw_setPortB(0b0011 | lightBF);
    4eee:	c3 60       	ori	r28, 0x03	; 3
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	twi_mcp23017_fw_setPortA_DirOut(false);

	for (;;) {
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    4ef0:	8d 2f       	mov	r24, r29
    4ef2:	dc df       	rcall	.-72     	; 0x4eac <twi_mcp23017_fw_setPortB>
		twi_mcp23017_fw_setPortB(0b0011 | lightBF);
    4ef4:	8c 2f       	mov	r24, r28
    4ef6:	da df       	rcall	.-76     	; 0x4eac <twi_mcp23017_fw_setPortB>
		uint8_t status = twi_mcp23017_fw_readPortA();
    4ef8:	e6 df       	rcall	.-52     	; 0x4ec6 <twi_mcp23017_fw_readPortA>
    4efa:	18 2f       	mov	r17, r24
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    4efc:	8d 2f       	mov	r24, r29
    4efe:	d6 df       	rcall	.-84     	; 0x4eac <twi_mcp23017_fw_setPortB>

		if (!(status & 0x80)) {
    4f00:	17 ff       	sbrs	r17, 7
    4f02:	07 c0       	rjmp	.+14     	; 0x4f12 <twi_mcp23017_av1624_fw_waitUntilReady+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4f04:	82 e4       	ldi	r24, 0x42	; 66
    4f06:	8a 95       	dec	r24
    4f08:	f1 f7       	brne	.-4      	; 0x4f06 <twi_mcp23017_av1624_fw_waitUntilReady+0x3a>
    4f0a:	00 c0       	rjmp	.+0      	; 0x4f0c <twi_mcp23017_av1624_fw_waitUntilReady+0x40>
			break;
		}

		_delay_us(10);
		wdt_reset();
    4f0c:	a8 95       	wdr
		usbPoll();
    4f0e:	a2 d2       	rcall	.+1348   	; 0x5454 <usbPoll>
	}
    4f10:	ef cf       	rjmp	.-34     	; 0x4ef0 <twi_mcp23017_av1624_fw_waitUntilReady+0x24>
}
    4f12:	df 91       	pop	r29
    4f14:	cf 91       	pop	r28
    4f16:	1f 91       	pop	r17
    4f18:	08 95       	ret

00004f1a <twi_mcp23017_av1624_fw_init>:
	 * 	PB7		(free)
	 */

	// wait > 30 ms --> done

	if (!(main_bf.mainIsLcdAttached)) {
    4f1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4f1e:	87 ff       	sbrs	r24, 7
    4f20:	62 c0       	rjmp	.+196    	; 0x4fe6 <twi_mcp23017_av1624_fw_init+0xcc>
		return;
	}

	twi_mcp23017_av1624_fw_waitUntilReady();											// within this function the main_bf.mainIsSmartAttached is being set/cleared
    4f22:	d4 df       	rcall	.-88     	; 0x4ecc <twi_mcp23017_av1624_fw_waitUntilReady>

	// set interface width to 8bits - (1)
	twi_mcp23017_fw_setPortA_DirOut(true);
    4f24:	81 e0       	ldi	r24, 0x01	; 1
    4f26:	ba df       	rcall	.-140    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f28:	6c e3       	ldi	r22, 0x3C	; 60
    4f2a:	80 e0       	ldi	r24, 0x00	; 0
    4f2c:	c3 df       	rcall	.-122    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4f2e:	6c e3       	ldi	r22, 0x3C	; 60
    4f30:	81 e0       	ldi	r24, 0x01	; 1
    4f32:	c0 df       	rcall	.-128    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f34:	6c e3       	ldi	r22, 0x3C	; 60
    4f36:	80 e0       	ldi	r24, 0x00	; 0
    4f38:	bd df       	rcall	.-134    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    4f3a:	80 e0       	ldi	r24, 0x00	; 0
    4f3c:	af df       	rcall	.-162    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
    4f3e:	8b e1       	ldi	r24, 0x1B	; 27
    4f40:	8a 95       	dec	r24
    4f42:	f1 f7       	brne	.-4      	; 0x4f40 <twi_mcp23017_av1624_fw_init+0x26>
    4f44:	00 00       	nop

	// > 4.1 µs
	_delay_us(4.1f);

	// set interface width to 8bits - (2)
	twi_mcp23017_fw_setPortA_DirOut(true);
    4f46:	81 e0       	ldi	r24, 0x01	; 1
    4f48:	a9 df       	rcall	.-174    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f4a:	6c e3       	ldi	r22, 0x3C	; 60
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	b2 df       	rcall	.-156    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4f50:	6c e3       	ldi	r22, 0x3C	; 60
    4f52:	81 e0       	ldi	r24, 0x01	; 1
    4f54:	af df       	rcall	.-162    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f56:	6c e3       	ldi	r22, 0x3C	; 60
    4f58:	80 e0       	ldi	r24, 0x00	; 0
    4f5a:	ac df       	rcall	.-168    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    4f5c:	80 e0       	ldi	r24, 0x00	; 0
    4f5e:	9e df       	rcall	.-196    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
    4f60:	83 ef       	ldi	r24, 0xF3	; 243
    4f62:	91 e0       	ldi	r25, 0x01	; 1
    4f64:	01 97       	sbiw	r24, 0x01	; 1
    4f66:	f1 f7       	brne	.-4      	; 0x4f64 <twi_mcp23017_av1624_fw_init+0x4a>
    4f68:	00 c0       	rjmp	.+0      	; 0x4f6a <twi_mcp23017_av1624_fw_init+0x50>
    4f6a:	00 00       	nop

	// > 100 µs
	_delay_us(100.0f);

	// set interface width to 8bits - (3)
	twi_mcp23017_fw_setPortA_DirOut(true);
    4f6c:	81 e0       	ldi	r24, 0x01	; 1
    4f6e:	96 df       	rcall	.-212    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f70:	6c e3       	ldi	r22, 0x3C	; 60
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	9f df       	rcall	.-194    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4f76:	6c e3       	ldi	r22, 0x3C	; 60
    4f78:	81 e0       	ldi	r24, 0x01	; 1
    4f7a:	9c df       	rcall	.-200    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f7c:	6c e3       	ldi	r22, 0x3C	; 60
    4f7e:	80 e0       	ldi	r24, 0x00	; 0
    4f80:	99 df       	rcall	.-206    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>

	// set interface width to 8bits - (4)
	twi_mcp23017_av1624_fw_waitUntilReady();
    4f82:	a4 df       	rcall	.-184    	; 0x4ecc <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    4f84:	81 e0       	ldi	r24, 0x01	; 1
    4f86:	8a df       	rcall	.-236    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f88:	6c e3       	ldi	r22, 0x3C	; 60
    4f8a:	80 e0       	ldi	r24, 0x00	; 0
    4f8c:	93 df       	rcall	.-218    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4f8e:	6c e3       	ldi	r22, 0x3C	; 60
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	90 df       	rcall	.-224    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f94:	6c e3       	ldi	r22, 0x3C	; 60
    4f96:	80 e0       	ldi	r24, 0x00	; 0
    4f98:	8d df       	rcall	.-230    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>


	// display ON
	twi_mcp23017_av1624_fw_waitUntilReady();
    4f9a:	98 df       	rcall	.-208    	; 0x4ecc <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	7e df       	rcall	.-260    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001100);
    4fa0:	6c e0       	ldi	r22, 0x0C	; 12
    4fa2:	80 e0       	ldi	r24, 0x00	; 0
    4fa4:	87 df       	rcall	.-242    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00001100);
    4fa6:	6c e0       	ldi	r22, 0x0C	; 12
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	84 df       	rcall	.-248    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001100);
    4fac:	6c e0       	ldi	r22, 0x0C	; 12
    4fae:	80 e0       	ldi	r24, 0x00	; 0
    4fb0:	81 df       	rcall	.-254    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>

	// display CLEAR
	twi_mcp23017_av1624_fw_waitUntilReady();
    4fb2:	8c df       	rcall	.-232    	; 0x4ecc <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    4fb4:	81 e0       	ldi	r24, 0x01	; 1
    4fb6:	72 df       	rcall	.-284    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    4fb8:	61 e0       	ldi	r22, 0x01	; 1
    4fba:	80 e0       	ldi	r24, 0x00	; 0
    4fbc:	7b df       	rcall	.-266    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000001);
    4fbe:	61 e0       	ldi	r22, 0x01	; 1
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
    4fc2:	78 df       	rcall	.-272    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    4fc4:	61 e0       	ldi	r22, 0x01	; 1
    4fc6:	80 e0       	ldi	r24, 0x00	; 0
    4fc8:	75 df       	rcall	.-278    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>

	// display Entry Mode Set
	twi_mcp23017_av1624_fw_waitUntilReady();
    4fca:	80 df       	rcall	.-256    	; 0x4ecc <twi_mcp23017_av1624_fw_waitUntilReady>
	twi_mcp23017_fw_setPortA_DirOut(true);
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	66 df       	rcall	.-308    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000110);
    4fd0:	66 e0       	ldi	r22, 0x06	; 6
    4fd2:	80 e0       	ldi	r24, 0x00	; 0
    4fd4:	6f df       	rcall	.-290    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000110);
    4fd6:	66 e0       	ldi	r22, 0x06	; 6
    4fd8:	81 e0       	ldi	r24, 0x01	; 1
    4fda:	6c df       	rcall	.-296    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b1000, 0b00000110);
    4fdc:	66 e0       	ldi	r22, 0x06	; 6
    4fde:	88 e0       	ldi	r24, 0x08	; 8
    4fe0:	69 df       	rcall	.-302    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	5b cf       	rjmp	.-330    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
    4fe6:	08 95       	ret

00004fe8 <twi_mcp23017_av1624_fw_gotoPosition>:
		usbPoll();
	}
}

void twi_mcp23017_av1624_fw_gotoPosition(uint8_t line, uint8_t column)
{
    4fe8:	cf 93       	push	r28
    4fea:	df 93       	push	r29
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    4fec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4ff0:	92 95       	swap	r25
    4ff2:	96 95       	lsr	r25
    4ff4:	97 70       	andi	r25, 0x07	; 7
    4ff6:	91 30       	cpi	r25, 0x01	; 1
    4ff8:	11 f0       	breq	.+4      	; 0x4ffe <twi_mcp23017_av1624_fw_gotoPosition+0x16>
    4ffa:	d0 e0       	ldi	r29, 0x00	; 0
    4ffc:	01 c0       	rjmp	.+2      	; 0x5000 <twi_mcp23017_av1624_fw_gotoPosition+0x18>
    4ffe:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t ddramAdrCmd = (0x80 | ((line % 2) << 6) | (column % 16));
    5000:	c6 2f       	mov	r28, r22
    5002:	cf 70       	andi	r28, 0x0F	; 15
    5004:	c0 68       	ori	r28, 0x80	; 128
    5006:	28 2f       	mov	r18, r24
    5008:	21 70       	andi	r18, 0x01	; 1
    500a:	30 e0       	ldi	r19, 0x00	; 0
    500c:	86 e0       	ldi	r24, 0x06	; 6
    500e:	22 0f       	add	r18, r18
    5010:	33 1f       	adc	r19, r19
    5012:	8a 95       	dec	r24
    5014:	e1 f7       	brne	.-8      	; 0x500e <twi_mcp23017_av1624_fw_gotoPosition+0x26>
    5016:	c2 2b       	or	r28, r18

	twi_mcp23017_av1624_fw_waitUntilReady();
    5018:	59 df       	rcall	.-334    	; 0x4ecc <twi_mcp23017_av1624_fw_waitUntilReady>

	// set DDRAM address
	twi_mcp23017_fw_setPortA_DirOut(true);
    501a:	81 e0       	ldi	r24, 0x01	; 1
    501c:	3f df       	rcall	.-386    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
    501e:	6c 2f       	mov	r22, r28
    5020:	8d 2f       	mov	r24, r29
    5022:	48 df       	rcall	.-368    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0001 | lightBF, ddramAdrCmd);
    5024:	6c 2f       	mov	r22, r28
    5026:	8d 2f       	mov	r24, r29
    5028:	81 60       	ori	r24, 0x01	; 1
    502a:	44 df       	rcall	.-376    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
    502c:	6c 2f       	mov	r22, r28
    502e:	8d 2f       	mov	r24, r29
    5030:	41 df       	rcall	.-382    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    5032:	80 e0       	ldi	r24, 0x00	; 0
}
    5034:	df 91       	pop	r29
    5036:	cf 91       	pop	r28
	// set DDRAM address
	twi_mcp23017_fw_setPortA_DirOut(true);
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
	twi_mcp23017_fw_setPortBA(0b0001 | lightBF, ddramAdrCmd);
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
	twi_mcp23017_fw_setPortA_DirOut(false);
    5038:	31 cf       	rjmp	.-414    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>

0000503a <twi_mcp23017_av1624_fw_writeString>:
}

void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
    503a:	af 92       	push	r10
    503c:	bf 92       	push	r11
    503e:	cf 92       	push	r12
    5040:	df 92       	push	r13
    5042:	ef 92       	push	r14
    5044:	ff 92       	push	r15
    5046:	0f 93       	push	r16
    5048:	1f 93       	push	r17
    504a:	cf 93       	push	r28
    504c:	df 93       	push	r29
    504e:	6c 01       	movw	r12, r24
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    5050:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5054:	92 95       	swap	r25
    5056:	96 95       	lsr	r25
    5058:	97 70       	andi	r25, 0x07	; 7
    505a:	91 30       	cpi	r25, 0x01	; 1
    505c:	11 f0       	breq	.+4      	; 0x5062 <twi_mcp23017_av1624_fw_writeString+0x28>
    505e:	c0 e0       	ldi	r28, 0x00	; 0
    5060:	01 c0       	rjmp	.+2      	; 0x5064 <twi_mcp23017_av1624_fw_writeString+0x2a>
    5062:	c8 e0       	ldi	r28, 0x08	; 8

	for (int idx = 0; idx < len; ++idx) {
    5064:	76 01       	movw	r14, r12
    5066:	06 2f       	mov	r16, r22
    5068:	10 e0       	ldi	r17, 0x00	; 0

		twi_mcp23017_av1624_fw_waitUntilReady();

		// write data
		twi_mcp23017_fw_setPortA_DirOut(true);
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    506a:	8c 2f       	mov	r24, r28
    506c:	84 60       	ori	r24, 0x04	; 4
    506e:	b8 2e       	mov	r11, r24
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
    5070:	ec 2f       	mov	r30, r28
    5072:	e5 60       	ori	r30, 0x05	; 5
    5074:	ae 2e       	mov	r10, r30
    5076:	97 01       	movw	r18, r14
    5078:	2c 19       	sub	r18, r12
    507a:	3d 09       	sbc	r19, r13

void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	for (int idx = 0; idx < len; ++idx) {
    507c:	20 17       	cp	r18, r16
    507e:	31 07       	cpc	r19, r17
    5080:	ac f4       	brge	.+42     	; 0x50ac <twi_mcp23017_av1624_fw_writeString+0x72>
		uint8_t c = buffer[idx];
    5082:	f7 01       	movw	r30, r14
    5084:	d1 91       	ld	r29, Z+
    5086:	7f 01       	movw	r14, r30
		c = recodeChar(c);

		twi_mcp23017_av1624_fw_waitUntilReady();
    5088:	21 df       	rcall	.-446    	; 0x4ecc <twi_mcp23017_av1624_fw_waitUntilReady>

		// write data
		twi_mcp23017_fw_setPortA_DirOut(true);
    508a:	81 e0       	ldi	r24, 0x01	; 1
    508c:	07 df       	rcall	.-498    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    508e:	6d 2f       	mov	r22, r29
    5090:	8b 2d       	mov	r24, r11
    5092:	10 df       	rcall	.-480    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
    5094:	6d 2f       	mov	r22, r29
    5096:	8a 2d       	mov	r24, r10
    5098:	0d df       	rcall	.-486    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    509a:	6d 2f       	mov	r22, r29
    509c:	8b 2d       	mov	r24, r11
    509e:	0a df       	rcall	.-492    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortBA(0b0000 | lightBF, c);
    50a0:	6d 2f       	mov	r22, r29
    50a2:	8c 2f       	mov	r24, r28
    50a4:	07 df       	rcall	.-498    	; 0x4eb4 <twi_mcp23017_fw_setPortBA>
		twi_mcp23017_fw_setPortA_DirOut(false);
    50a6:	80 e0       	ldi	r24, 0x00	; 0
    50a8:	f9 de       	rcall	.-526    	; 0x4e9c <twi_mcp23017_fw_setPortA_DirOut>
    50aa:	e5 cf       	rjmp	.-54     	; 0x5076 <twi_mcp23017_av1624_fw_writeString+0x3c>
	}
}
    50ac:	df 91       	pop	r29
    50ae:	cf 91       	pop	r28
    50b0:	1f 91       	pop	r17
    50b2:	0f 91       	pop	r16
    50b4:	ff 90       	pop	r15
    50b6:	ef 90       	pop	r14
    50b8:	df 90       	pop	r13
    50ba:	cf 90       	pop	r12
    50bc:	bf 90       	pop	r11
    50be:	af 90       	pop	r10
    50c0:	08 95       	ret

000050c2 <twi_smart_lcd_fw_get_version>:
}
#endif

uint8_t twi_smart_lcd_fw_get_version(void)
{
	return twi_fw_sendCmdReadData1(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_GETVER);		// within this function the main_bf.mainIsSmartAttached is being set
    50c2:	61 e0       	ldi	r22, 0x01	; 1
    50c4:	82 e2       	ldi	r24, 0x22	; 34
    50c6:	7f cd       	rjmp	.-1282   	; 0x4bc6 <twi_fw_sendCmdReadData1>

000050c8 <twi_smart_lcd_fw_init>:
extern uchar mainPrepareBuffer[MAIN_PREPARE_BUFFER_SIZE];


void twi_smart_lcd_fw_init(void)
{
	uint8_t ver = twi_smart_lcd_fw_get_version();
    50c8:	fc cf       	rjmp	.-8      	; 0x50c2 <twi_smart_lcd_fw_get_version>

000050ca <twi_smart_lcd_fw_set_clkstate_phaseVolt__phaseDeg>:
	return twi_fw_sendCmdReadData1(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_GETVER);		// within this function the main_bf.mainIsSmartAttached is being set
}

void twi_smart_lcd_fw_set_clkstate_phaseVolt__phaseDeg(uint8_t clk_state, uint16_t phaseVolt1000, int16_t phaseDeg100)
{
	mainPrepareBuffer[0] = clk_state;
    50ca:	ed e0       	ldi	r30, 0x0D	; 13
    50cc:	f4 e0       	ldi	r31, 0x04	; 4
    50ce:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (phaseVolt1000 & 0xff);
    50d0:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) (phaseVolt1000 >> 8);
    50d2:	72 83       	std	Z+2, r23	; 0x02
	mainPrepareBuffer[3] = (uint8_t) (phaseDeg100   & 0xff);
    50d4:	43 83       	std	Z+3, r20	; 0x03
	mainPrepareBuffer[4] = (uint8_t) (phaseDeg100   >> 8);
    50d6:	54 83       	std	Z+4, r21	; 0x04
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_CLK_STATE, 5, (uint8_t*) &mainPrepareBuffer);
    50d8:	9f 01       	movw	r18, r30
    50da:	45 e0       	ldi	r20, 0x05	; 5
    50dc:	60 e8       	ldi	r22, 0x80	; 128
    50de:	82 e2       	ldi	r24, 0x22	; 34
    50e0:	05 cd       	rjmp	.-1526   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

000050e2 <twi_smart_lcd_fw_set_date>:
}

void twi_smart_lcd_fw_set_date(uint16_t year, uint8_t month, uint8_t day)
{
	mainPrepareBuffer[0] = (uint8_t) (year & 0xff);
    50e2:	ed e0       	ldi	r30, 0x0D	; 13
    50e4:	f4 e0       	ldi	r31, 0x04	; 4
    50e6:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (year >>  8);
    50e8:	91 83       	std	Z+1, r25	; 0x01
	mainPrepareBuffer[2] = month;
    50ea:	62 83       	std	Z+2, r22	; 0x02
	mainPrepareBuffer[3] = day;
    50ec:	43 83       	std	Z+3, r20	; 0x03
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY, 4, (uint8_t*) &mainPrepareBuffer);
    50ee:	9f 01       	movw	r18, r30
    50f0:	44 e0       	ldi	r20, 0x04	; 4
    50f2:	61 e8       	ldi	r22, 0x81	; 129
    50f4:	82 e2       	ldi	r24, 0x22	; 34
    50f6:	fa cc       	rjmp	.-1548   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

000050f8 <twi_smart_lcd_fw_set_time>:
}

void twi_smart_lcd_fw_set_time(uint8_t hour, uint8_t minute, uint8_t second)
{
	mainPrepareBuffer[0] = hour;
    50f8:	ed e0       	ldi	r30, 0x0D	; 13
    50fa:	f4 e0       	ldi	r31, 0x04	; 4
    50fc:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = minute;
    50fe:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = second;
    5100:	42 83       	std	Z+2, r20	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC, 3, (uint8_t*) &mainPrepareBuffer);
    5102:	9f 01       	movw	r18, r30
    5104:	43 e0       	ldi	r20, 0x03	; 3
    5106:	62 e8       	ldi	r22, 0x82	; 130
    5108:	82 e2       	ldi	r24, 0x22	; 34
    510a:	f0 cc       	rjmp	.-1568   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

0000510c <twi_smart_lcd_fw_set_ppb>:
}

void twi_smart_lcd_fw_set_ppb(int16_t ppb_int, uint16_t ppb_frac1000)
{
	mainPrepareBuffer[0] = (uint8_t) (ppb_int & 0xff);
    510c:	ed e0       	ldi	r30, 0x0D	; 13
    510e:	f4 e0       	ldi	r31, 0x04	; 4
    5110:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (ppb_int >> 8);
    5112:	91 83       	std	Z+1, r25	; 0x01
	mainPrepareBuffer[2] = (uint8_t) (ppb_frac1000 & 0xff);
    5114:	62 83       	std	Z+2, r22	; 0x02
	mainPrepareBuffer[3] = (uint8_t) (ppb_frac1000 >> 8);
    5116:	73 83       	std	Z+3, r23	; 0x03
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_PPB, 4, (uint8_t*) &mainPrepareBuffer);
    5118:	9f 01       	movw	r18, r30
    511a:	44 e0       	ldi	r20, 0x04	; 4
    511c:	63 e8       	ldi	r22, 0x83	; 131
    511e:	82 e2       	ldi	r24, 0x22	; 34
    5120:	e5 cc       	rjmp	.-1590   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

00005122 <twi_smart_lcd_fw_set_pwm>:
}

void twi_smart_lcd_fw_set_pwm(uint8_t pwm_int, uint8_t pwm_frac256)
{
	mainPrepareBuffer[0] = pwm_int;
    5122:	ed e0       	ldi	r30, 0x0D	; 13
    5124:	f4 e0       	ldi	r31, 0x04	; 4
    5126:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = pwm_frac256;
    5128:	61 83       	std	Z+1, r22	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_TCXO_PWM, 2, (uint8_t*) &mainPrepareBuffer);
    512a:	9f 01       	movw	r18, r30
    512c:	42 e0       	ldi	r20, 0x02	; 2
    512e:	64 e8       	ldi	r22, 0x84	; 132
    5130:	82 e2       	ldi	r24, 0x22	; 34
    5132:	dc cc       	rjmp	.-1608   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

00005134 <twi_smart_lcd_fw_set_pv>:
}

void twi_smart_lcd_fw_set_pv(uint8_t pv_int, uint16_t pv_frac)
{
	mainPrepareBuffer[0] = pv_int;
    5134:	ed e0       	ldi	r30, 0x0D	; 13
    5136:	f4 e0       	ldi	r31, 0x04	; 4
    5138:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (pv_frac & 0xff);
    513a:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) (pv_frac >> 8);
    513c:	72 83       	std	Z+2, r23	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_TCXO_VC, 3, (uint8_t*) &mainPrepareBuffer);
    513e:	9f 01       	movw	r18, r30
    5140:	43 e0       	ldi	r20, 0x03	; 3
    5142:	65 e8       	ldi	r22, 0x85	; 133
    5144:	82 e2       	ldi	r24, 0x22	; 34
    5146:	d2 cc       	rjmp	.-1628   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

00005148 <twi_smart_lcd_fw_set_sat_use>:
}

void twi_smart_lcd_fw_set_sat_use(uint8_t sat_west, uint8_t sat_east, uint8_t sat_used)
{
	mainPrepareBuffer[0] = sat_west;
    5148:	ed e0       	ldi	r30, 0x0D	; 13
    514a:	f4 e0       	ldi	r31, 0x04	; 4
    514c:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = sat_east;
    514e:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = sat_used;
    5150:	42 83       	std	Z+2, r20	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_SATS, 3, (uint8_t*) &mainPrepareBuffer);
    5152:	9f 01       	movw	r18, r30
    5154:	43 e0       	ldi	r20, 0x03	; 3
    5156:	68 e8       	ldi	r22, 0x88	; 136
    5158:	82 e2       	ldi	r24, 0x22	; 34
    515a:	c8 cc       	rjmp	.-1648   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

0000515c <twi_smart_lcd_fw_set_sat_dop>:
}

void twi_smart_lcd_fw_set_sat_dop(uint16_t sat_dop100)
{
	mainPrepareBuffer[0] = (uint8_t) (sat_dop100 & 0xff);
    515c:	ed e0       	ldi	r30, 0x0D	; 13
    515e:	f4 e0       	ldi	r31, 0x04	; 4
    5160:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (sat_dop100 >> 8);
    5162:	91 83       	std	Z+1, r25	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_DOP, 2, (uint8_t*) &mainPrepareBuffer);
    5164:	9f 01       	movw	r18, r30
    5166:	42 e0       	ldi	r20, 0x02	; 2
    5168:	69 e8       	ldi	r22, 0x89	; 137
    516a:	82 e2       	ldi	r24, 0x22	; 34
    516c:	bf cc       	rjmp	.-1666   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

0000516e <twi_smart_lcd_fw_set_pos_state>:
}

void twi_smart_lcd_fw_set_pos_state(uint8_t state_fi, uint8_t state_m2)
{
	mainPrepareBuffer[0] = state_fi;
    516e:	ed e0       	ldi	r30, 0x0D	; 13
    5170:	f4 e0       	ldi	r31, 0x04	; 4
    5172:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = state_m2;
    5174:	61 83       	std	Z+1, r22	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_STATE, 2, (uint8_t*) &mainPrepareBuffer);
    5176:	9f 01       	movw	r18, r30
    5178:	42 e0       	ldi	r20, 0x02	; 2
    517a:	6a e8       	ldi	r22, 0x8A	; 138
    517c:	82 e2       	ldi	r24, 0x22	; 34
    517e:	b6 cc       	rjmp	.-1684   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

00005180 <twi_smart_lcd_fw_set_pos_lat>:
}

void twi_smart_lcd_fw_set_pos_lat(uint8_t lat_sgn, uint8_t lat_deg, uint8_t lat_min_int, uint16_t lat_min_frac10000)
{
	mainPrepareBuffer[0] = (uint8_t) lat_sgn;
    5180:	ed e0       	ldi	r30, 0x0D	; 13
    5182:	f4 e0       	ldi	r31, 0x04	; 4
    5184:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) lat_deg;
    5186:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) lat_min_int;
    5188:	42 83       	std	Z+2, r20	; 0x02
	mainPrepareBuffer[3] = (uint8_t) (lat_min_frac10000 & 0xff);
    518a:	23 83       	std	Z+3, r18	; 0x03
	mainPrepareBuffer[4] = (uint8_t) (lat_min_frac10000 >> 8);
    518c:	34 83       	std	Z+4, r19	; 0x04
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_LAT, 5, (uint8_t*) &mainPrepareBuffer);
    518e:	9f 01       	movw	r18, r30
    5190:	45 e0       	ldi	r20, 0x05	; 5
    5192:	6b e8       	ldi	r22, 0x8B	; 139
    5194:	82 e2       	ldi	r24, 0x22	; 34
    5196:	aa cc       	rjmp	.-1708   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

00005198 <twi_smart_lcd_fw_set_pos_lon>:
}

void twi_smart_lcd_fw_set_pos_lon(uint8_t lon_sgn, uint8_t lon_deg, uint8_t lon_min_int, uint16_t lon_min_frac10000)
{
	mainPrepareBuffer[0] = (uint8_t) lon_sgn;
    5198:	ed e0       	ldi	r30, 0x0D	; 13
    519a:	f4 e0       	ldi	r31, 0x04	; 4
    519c:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) lon_deg;
    519e:	61 83       	std	Z+1, r22	; 0x01
	mainPrepareBuffer[2] = (uint8_t) lon_min_int;
    51a0:	42 83       	std	Z+2, r20	; 0x02
	mainPrepareBuffer[3] = (uint8_t) (lon_min_frac10000 & 0xff);
    51a2:	23 83       	std	Z+3, r18	; 0x03
	mainPrepareBuffer[4] = (uint8_t) (lon_min_frac10000 >> 8);
    51a4:	34 83       	std	Z+4, r19	; 0x04
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_LON, 5, (uint8_t*) &mainPrepareBuffer);
    51a6:	9f 01       	movw	r18, r30
    51a8:	45 e0       	ldi	r20, 0x05	; 5
    51aa:	6c e8       	ldi	r22, 0x8C	; 140
    51ac:	82 e2       	ldi	r24, 0x22	; 34
    51ae:	9e cc       	rjmp	.-1732   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

000051b0 <twi_smart_lcd_fw_set_pos_height>:
}

void twi_smart_lcd_fw_set_pos_height(uint16_t height_int, uint8_t height_frac100)
{
	mainPrepareBuffer[0] = (uint8_t) (height_int & 0xff);
    51b0:	ed e0       	ldi	r30, 0x0D	; 13
    51b2:	f4 e0       	ldi	r31, 0x04	; 4
    51b4:	80 83       	st	Z, r24
	mainPrepareBuffer[1] = (uint8_t) (height_int >> 8);
    51b6:	91 83       	std	Z+1, r25	; 0x01
	mainPrepareBuffer[2] = (uint8_t)  height_frac100;
    51b8:	62 83       	std	Z+2, r22	; 0x02
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT, 2, (uint8_t*) &mainPrepareBuffer);
    51ba:	9f 01       	movw	r18, r30
    51bc:	42 e0       	ldi	r20, 0x02	; 2
    51be:	6d e8       	ldi	r22, 0x8D	; 141
    51c0:	82 e2       	ldi	r24, 0x22	; 34
    51c2:	94 cc       	rjmp	.-1752   	; 0x4aec <twi_fw_sendCmdSendData1SendDataVar>

000051c4 <usb_fw_sendInInterrupt>:
 */
void usb_fw_sendInInterrupt(void)
{
	static uchar bufferInt[5] = "<INT>";

	if (usbInterruptIsReady()) {
    51c4:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <usbTxStatus1>
    51c8:	84 ff       	sbrs	r24, 4
    51ca:	04 c0       	rjmp	.+8      	; 0x51d4 <usb_fw_sendInInterrupt+0x10>
		/* send next packet if a new time-slot is ready to send */
		usbSetInterrupt(bufferInt, sizeof(bufferInt));
    51cc:	65 e0       	ldi	r22, 0x05	; 5
    51ce:	8a e0       	ldi	r24, 0x0A	; 10
    51d0:	91 e0       	ldi	r25, 0x01	; 1
    51d2:	1a c1       	rjmp	.+564    	; 0x5408 <usbSetInterrupt>
    51d4:	08 95       	ret

000051d6 <usb_fw_init>:

/*  -- 8< -- */

void usb_fw_init(void)
{
	usbInit();
    51d6:	89 d2       	rcall	.+1298   	; 0x56ea <usbInit>
	USB_INTR_ENABLE &= ~(_BV(USB_INTR_ENABLE_BIT));
    51d8:	e8 98       	cbi	0x1d, 0	; 29
	usbDeviceDisconnect();									// enforce re-enumeration, do this while interrupts are disabled!
    51da:	21 98       	cbi	0x04, 1	; 4
    51dc:	29 98       	cbi	0x05, 1	; 5

    uint8_t i = 250;
    while (--i) {											// fake USB disconnect for > 250 ms
    51de:	8a ef       	ldi	r24, 0xFA	; 250
    51e0:	81 50       	subi	r24, 0x01	; 1
    51e2:	41 f0       	breq	.+16     	; 0x51f4 <usb_fw_init+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    51e4:	e7 e8       	ldi	r30, 0x87	; 135
    51e6:	f3 e1       	ldi	r31, 0x13	; 19
    51e8:	31 97       	sbiw	r30, 0x01	; 1
    51ea:	f1 f7       	brne	.-4      	; 0x51e8 <usb_fw_init+0x12>
    51ec:	00 c0       	rjmp	.+0      	; 0x51ee <usb_fw_init+0x18>
    51ee:	00 00       	nop
        _delay_ms(1);
        wdt_reset();
    51f0:	a8 95       	wdr
    51f2:	f6 cf       	rjmp	.-20     	; 0x51e0 <usb_fw_init+0xa>
    }

    usbDeviceConnect();
    51f4:	21 9a       	sbi	0x04, 1	; 4
    51f6:	29 9a       	sbi	0x05, 1	; 5
	USB_INTR_ENABLE |= _BV(USB_INTR_ENABLE_BIT);
    51f8:	e8 9a       	sbi	0x1d, 0	; 29
    51fa:	08 95       	ret

000051fc <usbFunctionSetup>:

/* usbFunctionSetup() is called when the host does a setup of the USB function. For more
 * information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
    51fc:	fc 01       	movw	r30, r24
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;

    if (((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_VENDOR) &&
    51fe:	80 81       	ld	r24, Z
    5200:	98 2f       	mov	r25, r24
    5202:	90 76       	andi	r25, 0x60	; 96
    5204:	90 34       	cpi	r25, 0x40	; 64
    5206:	59 f5       	brne	.+86     	; 0x525e <usbFunctionSetup+0x62>
    	((rq->bmRequestType & USBRQ_RCPT_MASK) == USBRQ_RCPT_DEVICE)) {
    5208:	8f 71       	andi	r24, 0x1F	; 31
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;

    if (((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_VENDOR) &&
    520a:	49 f5       	brne	.+82     	; 0x525e <usbFunctionSetup+0x62>
    	((rq->bmRequestType & USBRQ_RCPT_MASK) == USBRQ_RCPT_DEVICE)) {
    	//usbSetupCntr++;

    	if (rq->bRequest == USBCUSTOMRQ_ECHO) {				// echo -- used for reliability tests
    520c:	81 81       	ldd	r24, Z+1	; 0x01
    520e:	81 11       	cpse	r24, r1
    5210:	0e c0       	rjmp	.+28     	; 0x522e <usbFunctionSetup+0x32>
    		usbCtxtSetupReplyBuffer[0] = rq->wValue.bytes[0];
    5212:	82 81       	ldd	r24, Z+2	; 0x02
    5214:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <usbCtxtSetupReplyBuffer>
    		usbCtxtSetupReplyBuffer[1] = rq->wValue.bytes[1];
    5218:	83 81       	ldd	r24, Z+3	; 0x03
    521a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <usbCtxtSetupReplyBuffer+0x1>
    		usbCtxtSetupReplyBuffer[2] = rq->wIndex.bytes[0];
    521e:	84 81       	ldd	r24, Z+4	; 0x04
    5220:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <usbCtxtSetupReplyBuffer+0x2>
    		usbCtxtSetupReplyBuffer[3] = rq->wIndex.bytes[1];
    5224:	85 81       	ldd	r24, Z+5	; 0x05
    5226:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <usbCtxtSetupReplyBuffer+0x3>
    		len = 4;
    522a:	84 e0       	ldi	r24, 0x04	; 4
    522c:	19 c0       	rjmp	.+50     	; 0x5260 <usbFunctionSetup+0x64>

    	} else if (rq->bRequest == USBCUSTOMRQ_RECV) {		// receive data from this USB function
    522e:	82 30       	cpi	r24, 0x02	; 2
    5230:	49 f4       	brne	.+18     	; 0x5244 <usbFunctionSetup+0x48>
    		uint8_t sreg = SREG;
    5232:	8f b7       	in	r24, 0x3f	; 63
    		cli();
    5234:	f8 94       	cli
			cntRcv = rq->wLength.word;
    5236:	26 81       	ldd	r18, Z+6	; 0x06
    5238:	37 81       	ldd	r19, Z+7	; 0x07
    523a:	30 93 15 05 	sts	0x0515, r19	; 0x800515 <cntRcv+0x1>
    523e:	20 93 14 05 	sts	0x0514, r18	; 0x800514 <cntRcv>
    5242:	0a c0       	rjmp	.+20     	; 0x5258 <usbFunctionSetup+0x5c>
			len = USB_NO_MSG;								// use usbFunctionRead() to obtain the data
    		SREG = sreg;

    	} else if (rq->bRequest == USBCUSTOMRQ_SEND) {		// send data from host to this USB function
    5244:	81 30       	cpi	r24, 0x01	; 1
    5246:	59 f4       	brne	.+22     	; 0x525e <usbFunctionSetup+0x62>
    		uint8_t sreg = SREG;
    5248:	8f b7       	in	r24, 0x3f	; 63
    		cli();
    524a:	f8 94       	cli
			cntSend = rq->wLength.word;
    524c:	26 81       	ldd	r18, Z+6	; 0x06
    524e:	37 81       	ldd	r19, Z+7	; 0x07
    5250:	30 93 13 05 	sts	0x0513, r19	; 0x800513 <cntSend+0x1>
    5254:	20 93 12 05 	sts	0x0512, r18	; 0x800512 <cntSend>
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    		SREG = sreg;
    5258:	8f bf       	out	0x3f, r24	; 63

    	} else if (rq->bRequest == USBCUSTOMRQ_SEND) {		// send data from host to this USB function
    		uint8_t sreg = SREG;
    		cli();
			cntSend = rq->wLength.word;
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    525a:	8f ef       	ldi	r24, 0xFF	; 255
    525c:	01 c0       	rjmp	.+2      	; 0x5260 <usbFunctionSetup+0x64>
 * information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
	const usbRequest_t* rq = (usbRequest_t*) data;
	usbMsgLen_t len = 0;
    525e:	80 e0       	ldi	r24, 0x00	; 0
			len = USB_NO_MSG;								// use usbFunctionWrite() to receive data from host
    		SREG = sreg;
    	}
    }

	usbMsgPtr = (usbMsgPtr_t) usbCtxtSetupReplyBuffer;
    5260:	2f e3       	ldi	r18, 0x3F	; 63
    5262:	31 e0       	ldi	r19, 0x01	; 1
    5264:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <usbMsgPtr+0x1>
    5268:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <usbMsgPtr>
    return len;
}
    526c:	08 95       	ret

0000526e <usbFunctionRead>:

/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionRead(uchar *data, uchar len)
{
    526e:	cf 92       	push	r12
    5270:	df 92       	push	r13
    5272:	ef 92       	push	r14
    5274:	ff 92       	push	r15
    5276:	1f 93       	push	r17
    5278:	cf 93       	push	r28
    527a:	df 93       	push	r29
    527c:	7c 01       	movw	r14, r24
    527e:	46 2f       	mov	r20, r22
	uint8_t retLen = 0;

	if (main_bf.mainIsUsbCommTest) {
    5280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5284:	84 ff       	sbrs	r24, 4
    5286:	37 c0       	rjmp	.+110    	; 0x52f6 <usbFunctionRead+0x88>
		/* special communication TEST */
		if (cntRcv) {
    5288:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <cntRcv>
    528c:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <cntRcv+0x1>
    5290:	89 2b       	or	r24, r25
    5292:	89 f1       	breq	.+98     	; 0x52f6 <usbFunctionRead+0x88>
#if 1
			data[retLen++] = '0' + ((doTestCntr / 1000) % 10);
    5294:	20 91 d7 05 	lds	r18, 0x05D7	; 0x8005d7 <doTestCntr>
    5298:	30 91 d8 05 	lds	r19, 0x05D8	; 0x8005d8 <doTestCntr+0x1>
    529c:	c9 01       	movw	r24, r18
    529e:	68 ee       	ldi	r22, 0xE8	; 232
    52a0:	73 e0       	ldi	r23, 0x03	; 3
    52a2:	08 d6       	rcall	.+3088   	; 0x5eb4 <__udivmodhi4>
    52a4:	cb 01       	movw	r24, r22
    52a6:	ea e0       	ldi	r30, 0x0A	; 10
    52a8:	f0 e0       	ldi	r31, 0x00	; 0
    52aa:	bf 01       	movw	r22, r30
    52ac:	03 d6       	rcall	.+3078   	; 0x5eb4 <__udivmodhi4>
    52ae:	80 5d       	subi	r24, 0xD0	; 208
    52b0:	d7 01       	movw	r26, r14
    52b2:	8c 93       	st	X, r24
			data[retLen++] = '0' + ((doTestCntr /  100) % 10);
    52b4:	c9 01       	movw	r24, r18
    52b6:	64 e6       	ldi	r22, 0x64	; 100
    52b8:	70 e0       	ldi	r23, 0x00	; 0
    52ba:	fc d5       	rcall	.+3064   	; 0x5eb4 <__udivmodhi4>
    52bc:	cb 01       	movw	r24, r22
    52be:	bf 01       	movw	r22, r30
    52c0:	f9 d5       	rcall	.+3058   	; 0x5eb4 <__udivmodhi4>
    52c2:	80 5d       	subi	r24, 0xD0	; 208
    52c4:	d7 01       	movw	r26, r14
    52c6:	11 96       	adiw	r26, 0x01	; 1
    52c8:	8c 93       	st	X, r24
			data[retLen++] = '0' + ((doTestCntr /   10) % 10);
    52ca:	c9 01       	movw	r24, r18
    52cc:	bf 01       	movw	r22, r30
    52ce:	f2 d5       	rcall	.+3044   	; 0x5eb4 <__udivmodhi4>
    52d0:	c8 2f       	mov	r28, r24
    52d2:	cb 01       	movw	r24, r22
    52d4:	bf 01       	movw	r22, r30
    52d6:	ee d5       	rcall	.+3036   	; 0x5eb4 <__udivmodhi4>
    52d8:	80 5d       	subi	r24, 0xD0	; 208
    52da:	f7 01       	movw	r30, r14
    52dc:	82 83       	std	Z+2, r24	; 0x02
			data[retLen++] = '0' + ( doTestCntr++       % 10);
    52de:	2f 5f       	subi	r18, 0xFF	; 255
    52e0:	3f 4f       	sbci	r19, 0xFF	; 255
    52e2:	30 93 d8 05 	sts	0x05D8, r19	; 0x8005d8 <doTestCntr+0x1>
    52e6:	20 93 d7 05 	sts	0x05D7, r18	; 0x8005d7 <doTestCntr>
    52ea:	c0 5d       	subi	r28, 0xD0	; 208
    52ec:	c3 83       	std	Z+3, r28	; 0x03
#else
			data[retLen++] = '0' +  (    cntRcv /  100)      ;
			data[retLen++] = '0' + ((    cntRcv /   10) % 10);
			data[retLen++] = '0' + (     cntRcv         % 10);
#endif
			data[retLen++] = ':';
    52ee:	8a e3       	ldi	r24, 0x3A	; 58
    52f0:	84 83       	std	Z+4, r24	; 0x04
    52f2:	15 e0       	ldi	r17, 0x05	; 5
    52f4:	01 c0       	rjmp	.+2      	; 0x52f8 <usbFunctionRead+0x8a>
/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionRead(uchar *data, uchar len)
{
	uint8_t retLen = 0;
    52f6:	10 e0       	ldi	r17, 0x00	; 0
#endif
			data[retLen++] = ':';
		}
	}

	signed int readCnt = min(cntRcv, len) - retLen;			// number of characters to be sent - no trailing \0 character counted
    52f8:	c1 2e       	mov	r12, r17
    52fa:	d1 2c       	mov	r13, r1
    52fc:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <cntRcv>
    5300:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <cntRcv+0x1>
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	84 17       	cp	r24, r20
    5308:	95 07       	cpc	r25, r21
    530a:	08 f4       	brcc	.+2      	; 0x530e <usbFunctionRead+0xa0>
    530c:	ac 01       	movw	r20, r24
    530e:	ea 01       	movw	r28, r20
    5310:	cc 19       	sub	r28, r12
    5312:	dd 09       	sbc	r29, r13
	if (readCnt > 0) {
    5314:	1c 16       	cp	r1, r28
    5316:	1d 06       	cpc	r1, r29
    5318:	ec f4       	brge	.+58     	; 0x5354 <usbFunctionRead+0xe6>
		uint8_t hasSemaphore;
		do {
			hasSemaphore = ringbuffer_fw_getSemaphore(false);
    531a:	80 e0       	ldi	r24, 0x00	; 0
    531c:	46 d8       	rcall	.-3956   	; 0x43aa <ringbuffer_fw_getSemaphore>
			if (!hasSemaphore) {
			    wdt_reset();
			    usbPoll();
			}
#endif
		} while(!hasSemaphore);
    531e:	88 23       	and	r24, r24
    5320:	e1 f3       	breq	.-8      	; 0x531a <usbFunctionRead+0xac>

		/* pull next part of the message from the ring buffer and send it to the host IN */
		uint8_t pullLen = ringbuffer_fw_ringBufferPull(false, data + retLen, readCnt + 1);
    5322:	4c 2f       	mov	r20, r28
    5324:	4f 5f       	subi	r20, 0xFF	; 255
    5326:	b7 01       	movw	r22, r14
    5328:	6c 0d       	add	r22, r12
    532a:	7d 1d       	adc	r23, r13
    532c:	80 e0       	ldi	r24, 0x00	; 0
    532e:	f2 d8       	rcall	.-3612   	; 0x4514 <ringbuffer_fw_ringBufferPull>
    5330:	c8 2f       	mov	r28, r24
		ringbuffer_fw_freeSemaphore(false);
    5332:	80 e0       	ldi	r24, 0x00	; 0
    5334:	4b d8       	rcall	.-3946   	; 0x43cc <ringbuffer_fw_freeSemaphore>
		cntRcv -= retLen + pullLen;
    5336:	cc 0e       	add	r12, r28
    5338:	d1 1c       	adc	r13, r1
    533a:	20 91 14 05 	lds	r18, 0x0514	; 0x800514 <cntRcv>
    533e:	30 91 15 05 	lds	r19, 0x0515	; 0x800515 <cntRcv+0x1>
    5342:	2c 19       	sub	r18, r12
    5344:	3d 09       	sbc	r19, r13
    5346:	30 93 15 05 	sts	0x0515, r19	; 0x800515 <cntRcv+0x1>
    534a:	20 93 14 05 	sts	0x0514, r18	; 0x800514 <cntRcv>
		return retLen + pullLen;
    534e:	8c 2f       	mov	r24, r28
    5350:	81 0f       	add	r24, r17
    5352:	01 c0       	rjmp	.+2      	; 0x5356 <usbFunctionRead+0xe8>

	} else {
		return retLen;
    5354:	81 2f       	mov	r24, r17
	}
}
    5356:	df 91       	pop	r29
    5358:	cf 91       	pop	r28
    535a:	1f 91       	pop	r17
    535c:	ff 90       	pop	r15
    535e:	ef 90       	pop	r14
    5360:	df 90       	pop	r13
    5362:	cf 90       	pop	r12
    5364:	08 95       	ret

00005366 <usbFunctionWrite>:

/* usbFunctionWrite() is called when the host sends a chunk of data to the
 * device. For more information see the documentation in usbdrv/usbdrv.h.
 */
USB_PUBLIC uchar usbFunctionWrite(uchar *data, uchar len)
{
    5366:	1f 93       	push	r17
    5368:	cf 93       	push	r28
    536a:	df 93       	push	r29
    536c:	d6 2f       	mov	r29, r22
	if (cntSend > len) {
    536e:	20 91 12 05 	lds	r18, 0x0512	; 0x800512 <cntSend>
    5372:	30 91 13 05 	lds	r19, 0x0513	; 0x800513 <cntSend+0x1>
    5376:	46 2f       	mov	r20, r22
    5378:	50 e0       	ldi	r21, 0x00	; 0
    537a:	42 17       	cp	r20, r18
    537c:	53 07       	cpc	r21, r19
    537e:	c0 f4       	brcc	.+48     	; 0x53b0 <usbFunctionWrite+0x4a>
		/* append first or any substring to the inBuffer */
		cntSend -= len;
    5380:	24 1b       	sub	r18, r20
    5382:	35 0b       	sbc	r19, r21
    5384:	30 93 13 05 	sts	0x0513, r19	; 0x800513 <cntSend+0x1>
    5388:	20 93 12 05 	sts	0x0512, r18	; 0x800512 <cntSend>

		uint8_t sreg = SREG;
    538c:	1f b7       	in	r17, 0x3f	; 63
		cli();
    538e:	f8 94       	cli
		memcpy(&(usbIsrCtxtBuffer[usbIsrCtxtBufferIdx]), data, len);
    5390:	c0 91 11 05 	lds	r28, 0x0511	; 0x800511 <usbIsrCtxtBufferIdx>
    5394:	2c 2f       	mov	r18, r28
    5396:	30 e0       	ldi	r19, 0x00	; 0
    5398:	bc 01       	movw	r22, r24
    539a:	c9 01       	movw	r24, r18
    539c:	89 5b       	subi	r24, 0xB9	; 185
    539e:	9e 4f       	sbci	r25, 0xFE	; 254
    53a0:	0e 94 02 34 	call	0x6804	; 0x6804 <memcpy>
		usbIsrCtxtBufferIdx += len;
    53a4:	cd 0f       	add	r28, r29
    53a6:	c0 93 11 05 	sts	0x0511, r28	; 0x800511 <usbIsrCtxtBufferIdx>
		SREG = sreg;
    53aa:	1f bf       	out	0x3f, r17	; 63
		return 0;											// go ahead with more transfer requests
    53ac:	80 e0       	ldi	r24, 0x00	; 0
    53ae:	28 c0       	rjmp	.+80     	; 0x5400 <usbFunctionWrite+0x9a>

	} else {
		/* append last substring to the inBuffer and push it to the OUT ring buffer (host --> USB function) */
		if (cntSend > 0) {
    53b0:	23 2b       	or	r18, r19
    53b2:	a9 f0       	breq	.+42     	; 0x53de <usbFunctionWrite+0x78>
			uint8_t sreg = SREG;
    53b4:	1f b7       	in	r17, 0x3f	; 63
			cli();
    53b6:	f8 94       	cli
			memcpy(&(usbIsrCtxtBuffer[usbIsrCtxtBufferIdx]), data, cntSend);
    53b8:	c0 91 12 05 	lds	r28, 0x0512	; 0x800512 <cntSend>
    53bc:	50 91 13 05 	lds	r21, 0x0513	; 0x800513 <cntSend+0x1>
    53c0:	d0 91 11 05 	lds	r29, 0x0511	; 0x800511 <usbIsrCtxtBufferIdx>
    53c4:	2d 2f       	mov	r18, r29
    53c6:	30 e0       	ldi	r19, 0x00	; 0
    53c8:	4c 2f       	mov	r20, r28
    53ca:	bc 01       	movw	r22, r24
    53cc:	c9 01       	movw	r24, r18
    53ce:	89 5b       	subi	r24, 0xB9	; 185
    53d0:	9e 4f       	sbci	r25, 0xFE	; 254
    53d2:	0e 94 02 34 	call	0x6804	; 0x6804 <memcpy>
			usbIsrCtxtBufferIdx += cntSend;
    53d6:	cd 0f       	add	r28, r29
    53d8:	c0 93 11 05 	sts	0x0511, r28	; 0x800511 <usbIsrCtxtBufferIdx>
			SREG = sreg;
    53dc:	1f bf       	out	0x3f, r17	; 63
		}

		/* push OUT string (send) from host to the USB function's ring buffer */
		ringbuffer_fw_ringBufferWaitAppend(true, false, usbIsrCtxtBuffer, usbIsrCtxtBufferIdx);
    53de:	20 91 11 05 	lds	r18, 0x0511	; 0x800511 <usbIsrCtxtBufferIdx>
    53e2:	47 e4       	ldi	r20, 0x47	; 71
    53e4:	51 e0       	ldi	r21, 0x01	; 1
    53e6:	60 e0       	ldi	r22, 0x00	; 0
    53e8:	81 e0       	ldi	r24, 0x01	; 1
    53ea:	3f d9       	rcall	.-3458   	; 0x466a <ringbuffer_fw_ringBufferWaitAppend>

		uint8_t sreg = SREG;
    53ec:	8f b7       	in	r24, 0x3f	; 63
		cli();
    53ee:	f8 94       	cli
		usbIsrCtxtBufferIdx = cntSend = 0;
    53f0:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <cntSend+0x1>
    53f4:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <cntSend>
    53f8:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <usbIsrCtxtBufferIdx>
		SREG = sreg;
    53fc:	8f bf       	out	0x3f, r24	; 63
		return 1;											// no more data transfers accepted
    53fe:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    5400:	df 91       	pop	r29
    5402:	cf 91       	pop	r28
    5404:	1f 91       	pop	r17
    5406:	08 95       	ret

00005408 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    5408:	cf 93       	push	r28
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
    540a:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <usbTxStatus1>
    540e:	2e 31       	cpi	r18, 0x1E	; 30
    5410:	f9 f0       	breq	.+62     	; 0x5450 <usbSetInterrupt+0x48>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    5412:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <usbTxStatus1>
    5416:	24 ff       	sbrs	r18, 4
    5418:	07 c0       	rjmp	.+14     	; 0x5428 <usbSetInterrupt+0x20>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    541a:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <usbTxStatus1+0x1>
    541e:	28 e8       	ldi	r18, 0x88	; 136
    5420:	23 27       	eor	r18, r19
    5422:	20 93 8e 05 	sts	0x058E, r18	; 0x80058e <usbTxStatus1+0x1>
    5426:	03 c0       	rjmp	.+6      	; 0x542e <usbSetInterrupt+0x26>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    5428:	2a e5       	ldi	r18, 0x5A	; 90
    542a:	20 93 8d 05 	sts	0x058D, r18	; 0x80058d <usbTxStatus1>
    542e:	dc 01       	movw	r26, r24
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    5430:	ef e8       	ldi	r30, 0x8F	; 143
    5432:	f5 e0       	ldi	r31, 0x05	; 5
    5434:	86 2f       	mov	r24, r22
    5436:	8e 0f       	add	r24, r30
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    5438:	9d 91       	ld	r25, X+
    543a:	91 93       	st	Z+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    543c:	8e 13       	cpse	r24, r30
    543e:	fc cf       	rjmp	.-8      	; 0x5438 <usbSetInterrupt+0x30>
    5440:	c6 2f       	mov	r28, r22
    usbCrc16Append(&txStatus->buffer[1], len);
    5442:	8f e8       	ldi	r24, 0x8F	; 143
    5444:	95 e0       	ldi	r25, 0x05	; 5
    5446:	0e 94 03 07 	call	0xe06	; 0xe06 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    544a:	cc 5f       	subi	r28, 0xFC	; 252
    544c:	c0 93 8d 05 	sts	0x058D, r28	; 0x80058d <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
    5450:	cf 91       	pop	r28
    5452:	08 95       	ret

00005454 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
    5454:	cf 93       	push	r28
    5456:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
    5458:	60 91 0a 08 	lds	r22, 0x080A	; 0x80080a <usbRxLen>
    545c:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
    545e:	67 fd       	sbrc	r22, 7
    5460:	e0 c0       	rjmp	.+448    	; 0x5622 <usbPoll+0x1ce>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    5462:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <usbInputBufOffset>
    5466:	cc e0       	ldi	r28, 0x0C	; 12
    5468:	d0 e0       	ldi	r29, 0x00	; 0
    546a:	c8 1b       	sub	r28, r24
    546c:	d1 09       	sbc	r29, r1
    546e:	c2 5f       	subi	r28, 0xF2	; 242
    5470:	d7 4f       	sbci	r29, 0xF7	; 247
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
    5472:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <usbRxToken>
    5476:	8d 32       	cpi	r24, 0x2D	; 45
    5478:	09 f0       	breq	.+2      	; 0x547c <usbPoll+0x28>
    547a:	c2 c0       	rjmp	.+388    	; 0x5600 <usbPoll+0x1ac>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
    547c:	68 30       	cpi	r22, 0x08	; 8
    547e:	09 f0       	breq	.+2      	; 0x5482 <usbPoll+0x2e>
    5480:	ce c0       	rjmp	.+412    	; 0x561e <usbPoll+0x1ca>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    5482:	83 ec       	ldi	r24, 0xC3	; 195
    5484:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    5488:	8a e5       	ldi	r24, 0x5A	; 90
    548a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <usbTxLen>
        usbMsgFlags = 0;
    548e:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
    5492:	28 81       	ld	r18, Y
    5494:	82 2f       	mov	r24, r18
    5496:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    5498:	39 f0       	breq	.+14     	; 0x54a8 <usbPoll+0x54>
            replyLen = usbFunctionSetup(data);
    549a:	ce 01       	movw	r24, r28
    549c:	af de       	rcall	.-674    	; 0x51fc <usbFunctionSetup>
    549e:	98 2f       	mov	r25, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
    54a0:	8f 3f       	cpi	r24, 0xFF	; 255
    54a2:	09 f4       	brne	.+2      	; 0x54a6 <usbPoll+0x52>
    54a4:	9c c0       	rjmp	.+312    	; 0x55de <usbPoll+0x18a>
    54a6:	a2 c0       	rjmp	.+324    	; 0x55ec <usbPoll+0x198>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    54a8:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
    54aa:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    54ac:	10 92 03 08 	sts	0x0803, r1	; 0x800803 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
    54b0:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    54b2:	81 11       	cpse	r24, r1
    54b4:	13 c0       	rjmp	.+38     	; 0x54dc <usbPoll+0x88>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
    54b6:	2f 71       	andi	r18, 0x1F	; 31
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
    54b8:	22 30       	cpi	r18, 0x02	; 2
    54ba:	51 f4       	brne	.+20     	; 0x54d0 <usbPoll+0x7c>
    54bc:	31 38       	cpi	r19, 0x81	; 129
    54be:	41 f4       	brne	.+16     	; 0x54d0 <usbPoll+0x7c>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
    54c0:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <usbTxStatus1>
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	9e 31       	cpi	r25, 0x1E	; 30
    54c8:	09 f0       	breq	.+2      	; 0x54cc <usbPoll+0x78>
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <usbTxBuf+0x9>
#endif
        dataPtr[1] = 0;
    54d0:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    54d4:	23 e0       	ldi	r18, 0x03	; 3
    54d6:	38 e0       	ldi	r19, 0x08	; 8
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
    54d8:	92 e0       	ldi	r25, 0x02	; 2
    54da:	7c c0       	rjmp	.+248    	; 0x55d4 <usbPoll+0x180>
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
    54dc:	28 2f       	mov	r18, r24
    54de:	2d 7f       	andi	r18, 0xFD	; 253
    54e0:	21 30       	cpi	r18, 0x01	; 1
    54e2:	81 f4       	brne	.+32     	; 0x5504 <usbPoll+0xb0>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
    54e4:	91 11       	cpse	r25, r1
    54e6:	73 c0       	rjmp	.+230    	; 0x55ce <usbPoll+0x17a>
    54e8:	31 38       	cpi	r19, 0x81	; 129
    54ea:	09 f0       	breq	.+2      	; 0x54ee <usbPoll+0x9a>
    54ec:	70 c0       	rjmp	.+224    	; 0x55ce <usbPoll+0x17a>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
    54ee:	81 30       	cpi	r24, 0x01	; 1
    54f0:	11 f0       	breq	.+4      	; 0x54f6 <usbPoll+0xa2>
    54f2:	8e e1       	ldi	r24, 0x1E	; 30
    54f4:	01 c0       	rjmp	.+2      	; 0x54f8 <usbPoll+0xa4>
    54f6:	8a e5       	ldi	r24, 0x5A	; 90
    54f8:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <usbTxStatus1>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    54fc:	8b e4       	ldi	r24, 0x4B	; 75
    54fe:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <usbTxStatus1+0x1>
    5502:	65 c0       	rjmp	.+202    	; 0x55ce <usbPoll+0x17a>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    5504:	85 30       	cpi	r24, 0x05	; 5
    5506:	19 f4       	brne	.+6      	; 0x550e <usbPoll+0xba>
        usbNewDeviceAddr = value;
    5508:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbNewDeviceAddr>
    550c:	60 c0       	rjmp	.+192    	; 0x55ce <usbPoll+0x17a>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    550e:	86 30       	cpi	r24, 0x06	; 6
    5510:	09 f0       	breq	.+2      	; 0x5514 <usbPoll+0xc0>
    5512:	44 c0       	rjmp	.+136    	; 0x559c <usbPoll+0x148>
    5514:	8b 81       	ldd	r24, Y+3	; 0x03
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    5516:	81 30       	cpi	r24, 0x01	; 1
    5518:	41 f4       	brne	.+16     	; 0x552a <usbPoll+0xd6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    551a:	85 ed       	ldi	r24, 0xD5	; 213
    551c:	9c e0       	ldi	r25, 0x0C	; 12
    551e:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    5522:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    5526:	92 e1       	ldi	r25, 0x12	; 18
    5528:	35 c0       	rjmp	.+106    	; 0x5594 <usbPoll+0x140>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    552a:	82 30       	cpi	r24, 0x02	; 2
    552c:	41 f4       	brne	.+16     	; 0x553e <usbPoll+0xea>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    552e:	8c eb       	ldi	r24, 0xBC	; 188
    5530:	9c e0       	ldi	r25, 0x0C	; 12
    5532:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    5536:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    553a:	99 e1       	ldi	r25, 0x19	; 25
    553c:	2b c0       	rjmp	.+86     	; 0x5594 <usbPoll+0x140>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    553e:	83 30       	cpi	r24, 0x03	; 3
    5540:	41 f5       	brne	.+80     	; 0x5592 <usbPoll+0x13e>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
    5542:	91 11       	cpse	r25, r1
    5544:	08 c0       	rjmp	.+16     	; 0x5556 <usbPoll+0x102>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    5546:	8f e2       	ldi	r24, 0x2F	; 47
    5548:	9d e0       	ldi	r25, 0x0D	; 13
    554a:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    554e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    5552:	94 e0       	ldi	r25, 0x04	; 4
    5554:	1f c0       	rjmp	.+62     	; 0x5594 <usbPoll+0x140>
        SWITCH_CASE(1)
    5556:	91 30       	cpi	r25, 0x01	; 1
    5558:	41 f4       	brne	.+16     	; 0x556a <usbPoll+0x116>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    555a:	81 e2       	ldi	r24, 0x21	; 33
    555c:	9d e0       	ldi	r25, 0x0D	; 13
    555e:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    5562:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    5566:	9e e0       	ldi	r25, 0x0E	; 14
    5568:	15 c0       	rjmp	.+42     	; 0x5594 <usbPoll+0x140>
        SWITCH_CASE(2)
    556a:	92 30       	cpi	r25, 0x02	; 2
    556c:	41 f4       	brne	.+16     	; 0x557e <usbPoll+0x12a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    556e:	87 ef       	ldi	r24, 0xF7	; 247
    5570:	9c e0       	ldi	r25, 0x0C	; 12
    5572:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    5576:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    557a:	9a e2       	ldi	r25, 0x2A	; 42
    557c:	0b c0       	rjmp	.+22     	; 0x5594 <usbPoll+0x140>
        SWITCH_CASE(3)
    557e:	93 30       	cpi	r25, 0x03	; 3
    5580:	41 f4       	brne	.+16     	; 0x5592 <usbPoll+0x13e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
    5582:	87 ee       	ldi	r24, 0xE7	; 231
    5584:	9c e0       	ldi	r25, 0x0C	; 12
    5586:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    558a:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    558e:	90 e1       	ldi	r25, 0x10	; 16
    5590:	01 c0       	rjmp	.+2      	; 0x5594 <usbPoll+0x140>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    5592:	90 e0       	ldi	r25, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    5594:	80 e4       	ldi	r24, 0x40	; 64
    5596:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <usbMsgFlags>
    559a:	28 c0       	rjmp	.+80     	; 0x55ec <usbPoll+0x198>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    559c:	88 30       	cpi	r24, 0x08	; 8
    559e:	81 f0       	breq	.+32     	; 0x55c0 <usbPoll+0x16c>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    55a0:	89 30       	cpi	r24, 0x09	; 9
    55a2:	19 f4       	brne	.+6      	; 0x55aa <usbPoll+0x156>
        usbConfiguration = value;
    55a4:	90 93 0d 08 	sts	0x080D, r25	; 0x80080d <usbConfiguration>
    55a8:	07 c0       	rjmp	.+14     	; 0x55b8 <usbPoll+0x164>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    55aa:	8a 30       	cpi	r24, 0x0A	; 10
    55ac:	61 f0       	breq	.+24     	; 0x55c6 <usbPoll+0x172>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    55ae:	8b 30       	cpi	r24, 0x0B	; 11
    55b0:	71 f4       	brne	.+28     	; 0x55ce <usbPoll+0x17a>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    55b2:	8b e4       	ldi	r24, 0x4B	; 75
    55b4:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <usbTxStatus1+0x1>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    55b8:	8a e5       	ldi	r24, 0x5A	; 90
    55ba:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <usbTxStatus1>
    55be:	07 c0       	rjmp	.+14     	; 0x55ce <usbPoll+0x17a>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
    55c0:	2d e0       	ldi	r18, 0x0D	; 13
    55c2:	38 e0       	ldi	r19, 0x08	; 8
    55c4:	02 c0       	rjmp	.+4      	; 0x55ca <usbPoll+0x176>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    55c6:	23 e0       	ldi	r18, 0x03	; 3
    55c8:	38 e0       	ldi	r19, 0x08	; 8
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
    55ca:	91 e0       	ldi	r25, 0x01	; 1
    55cc:	03 c0       	rjmp	.+6      	; 0x55d4 <usbPoll+0x180>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    55ce:	23 e0       	ldi	r18, 0x03	; 3
    55d0:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    55d2:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
    55d4:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <usbMsgPtr+0x1>
    55d8:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <usbMsgPtr>
    55dc:	07 c0       	rjmp	.+14     	; 0x55ec <usbPoll+0x198>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
    55de:	88 81       	ld	r24, Y
    55e0:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
    55e2:	9e 81       	ldd	r25, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
    55e4:	80 e8       	ldi	r24, 0x80	; 128
    55e6:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <usbMsgFlags>
    55ea:	07 c0       	rjmp	.+14     	; 0x55fa <usbPoll+0x1a6>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    55ec:	8f 81       	ldd	r24, Y+7	; 0x07
    55ee:	81 11       	cpse	r24, r1
    55f0:	04 c0       	rjmp	.+8      	; 0x55fa <usbPoll+0x1a6>
    55f2:	8e 81       	ldd	r24, Y+6	; 0x06
    55f4:	89 17       	cp	r24, r25
    55f6:	08 f4       	brcc	.+2      	; 0x55fa <usbPoll+0x1a6>
    55f8:	98 2f       	mov	r25, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    55fa:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <usbMsgLen>
    55fe:	0f c0       	rjmp	.+30     	; 0x561e <usbPoll+0x1ca>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    5600:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <usbMsgFlags>
    5604:	87 ff       	sbrs	r24, 7
    5606:	0b c0       	rjmp	.+22     	; 0x561e <usbPoll+0x1ca>
            uchar rval = usbFunctionWrite(data, len);
    5608:	ce 01       	movw	r24, r28
    560a:	ad de       	rcall	.-678    	; 0x5366 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
    560c:	8f 3f       	cpi	r24, 0xFF	; 255
    560e:	21 f4       	brne	.+8      	; 0x5618 <usbPoll+0x1c4>
                usbTxLen = USBPID_STALL;
    5610:	8e e1       	ldi	r24, 0x1E	; 30
    5612:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <usbTxLen>
    5616:	03 c0       	rjmp	.+6      	; 0x561e <usbPoll+0x1ca>
            }else if(rval != 0){    /* This was the final package */
    5618:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
    561a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    561e:	10 92 0a 08 	sts	0x080A, r1	; 0x80080a <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    5622:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <usbTxLen>
    5626:	84 ff       	sbrs	r24, 4
    5628:	50 c0       	rjmp	.+160    	; 0x56ca <usbPoll+0x276>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    562a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <usbMsgLen>
    562e:	8f 3f       	cpi	r24, 0xFF	; 255
    5630:	09 f4       	brne	.+2      	; 0x5634 <usbPoll+0x1e0>
    5632:	4b c0       	rjmp	.+150    	; 0x56ca <usbPoll+0x276>
    5634:	c8 2f       	mov	r28, r24
    5636:	89 30       	cpi	r24, 0x09	; 9
    5638:	08 f0       	brcs	.+2      	; 0x563c <usbPoll+0x1e8>
    563a:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    563c:	8c 1b       	sub	r24, r28
    563e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    5642:	90 91 fa 07 	lds	r25, 0x07FA	; 0x8007fa <usbTxBuf>
    5646:	88 e8       	ldi	r24, 0x88	; 136
    5648:	89 27       	eor	r24, r25
    564a:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <usbTxBuf>
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    564e:	cc 23       	and	r28, r28
    5650:	51 f1       	breq	.+84     	; 0x56a6 <usbPoll+0x252>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    5652:	30 91 d9 05 	lds	r19, 0x05D9	; 0x8005d9 <usbMsgFlags>
    5656:	37 ff       	sbrs	r19, 7
    5658:	08 c0       	rjmp	.+16     	; 0x566a <usbPoll+0x216>
            len = usbFunctionRead(data, len);
    565a:	6c 2f       	mov	r22, r28
    565c:	8b ef       	ldi	r24, 0xFB	; 251
    565e:	97 e0       	ldi	r25, 0x07	; 7
    5660:	06 de       	rcall	.-1012   	; 0x526e <usbFunctionRead>
    5662:	c8 2f       	mov	r28, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
    5664:	89 30       	cpi	r24, 0x09	; 9
    5666:	58 f5       	brcc	.+86     	; 0x56be <usbPoll+0x26a>
    5668:	1e c0       	rjmp	.+60     	; 0x56a6 <usbPoll+0x252>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
    566a:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <usbMsgPtr>
    566e:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <usbMsgPtr+0x1>
    5672:	2c 2f       	mov	r18, r28
    5674:	28 0f       	add	r18, r24
    5676:	ab ef       	ldi	r26, 0xFB	; 251
    5678:	b7 e0       	ldi	r27, 0x07	; 7
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    567a:	fc 01       	movw	r30, r24
    567c:	36 ff       	sbrs	r19, 6
    567e:	06 c0       	rjmp	.+12     	; 0x568c <usbPoll+0x238>
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    5680:	34 91       	lpm	r19, Z
                    *data++ = c;
    5682:	3d 93       	st	X+, r19
                    r++;
    5684:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
    5686:	2e 13       	cpse	r18, r30
    5688:	fb cf       	rjmp	.-10     	; 0x5680 <usbPoll+0x22c>
    568a:	04 c0       	rjmp	.+8      	; 0x5694 <usbPoll+0x240>
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
    568c:	31 91       	ld	r19, Z+
    568e:	3d 93       	st	X+, r19
                    r++;
                }while(--i);
    5690:	2e 13       	cpse	r18, r30
    5692:	fc cf       	rjmp	.-8      	; 0x568c <usbPoll+0x238>
    5694:	01 96       	adiw	r24, 0x01	; 1
    5696:	2f ef       	ldi	r18, 0xFF	; 255
    5698:	2c 0f       	add	r18, r28
    569a:	82 0f       	add	r24, r18
    569c:	91 1d       	adc	r25, r1
            }
            usbMsgPtr = r;
    569e:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    56a2:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    56a6:	6c 2f       	mov	r22, r28
    56a8:	8b ef       	ldi	r24, 0xFB	; 251
    56aa:	97 e0       	ldi	r25, 0x07	; 7
    56ac:	0e 94 03 07 	call	0xe06	; 0xe06 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    56b0:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    56b2:	cc 30       	cpi	r28, 0x0C	; 12
    56b4:	41 f0       	breq	.+16     	; 0x56c6 <usbPoll+0x272>
            usbMsgLen = USB_NO_MSG;
    56b6:	8f ef       	ldi	r24, 0xFF	; 255
    56b8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <usbMsgLen>
    56bc:	04 c0       	rjmp	.+8      	; 0x56c6 <usbPoll+0x272>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    56be:	8f ef       	ldi	r24, 0xFF	; 255
    56c0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <usbMsgLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
    56c4:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    56c6:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <usbTxLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
    56ca:	84 e1       	ldi	r24, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    56cc:	96 b1       	in	r25, 0x06	; 6
    56ce:	9c 70       	andi	r25, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
    56d0:	49 f4       	brne	.+18     	; 0x56e4 <usbPoll+0x290>
    56d2:	81 50       	subi	r24, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    56d4:	d9 f7       	brne	.-10     	; 0x56cc <usbPoll+0x278>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    56d6:	10 92 0b 08 	sts	0x080B, r1	; 0x80080b <usbNewDeviceAddr>
    usbDeviceAddr = 0;
    56da:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <usbDeviceAddr>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    56de:	8a e5       	ldi	r24, 0x5A	; 90
    56e0:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <usbTxStatus1>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    56e4:	df 91       	pop	r29
    56e6:	cf 91       	pop	r28
    56e8:	08 95       	ret

000056ea <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    56ea:	e9 e6       	ldi	r30, 0x69	; 105
    56ec:	f0 e0       	ldi	r31, 0x00	; 0
    56ee:	80 81       	ld	r24, Z
    56f0:	83 60       	ori	r24, 0x03	; 3
    56f2:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    56f4:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    56f6:	ed e8       	ldi	r30, 0x8D	; 141
    56f8:	f5 e0       	ldi	r31, 0x05	; 5
    56fa:	8b e4       	ldi	r24, 0x4B	; 75
    56fc:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    56fe:	8a e5       	ldi	r24, 0x5A	; 90
    5700:	80 83       	st	Z, r24
    5702:	08 95       	ret

00005704 <putval>:
    5704:	20 fd       	sbrc	r18, 0
    5706:	09 c0       	rjmp	.+18     	; 0x571a <putval+0x16>
    5708:	fc 01       	movw	r30, r24
    570a:	23 fd       	sbrc	r18, 3
    570c:	05 c0       	rjmp	.+10     	; 0x5718 <putval+0x14>
    570e:	22 ff       	sbrs	r18, 2
    5710:	02 c0       	rjmp	.+4      	; 0x5716 <putval+0x12>
    5712:	73 83       	std	Z+3, r23	; 0x03
    5714:	62 83       	std	Z+2, r22	; 0x02
    5716:	51 83       	std	Z+1, r21	; 0x01
    5718:	40 83       	st	Z, r20
    571a:	08 95       	ret

0000571c <mulacc>:
    571c:	44 fd       	sbrc	r20, 4
    571e:	10 c0       	rjmp	.+32     	; 0x5740 <mulacc+0x24>
    5720:	46 fd       	sbrc	r20, 6
    5722:	10 c0       	rjmp	.+32     	; 0x5744 <mulacc+0x28>
    5724:	db 01       	movw	r26, r22
    5726:	fc 01       	movw	r30, r24
    5728:	aa 0f       	add	r26, r26
    572a:	bb 1f       	adc	r27, r27
    572c:	ee 1f       	adc	r30, r30
    572e:	ff 1f       	adc	r31, r31
    5730:	10 94       	com	r1
    5732:	d1 f7       	brne	.-12     	; 0x5728 <mulacc+0xc>
    5734:	6a 0f       	add	r22, r26
    5736:	7b 1f       	adc	r23, r27
    5738:	8e 1f       	adc	r24, r30
    573a:	9f 1f       	adc	r25, r31
    573c:	31 e0       	ldi	r19, 0x01	; 1
    573e:	03 c0       	rjmp	.+6      	; 0x5746 <mulacc+0x2a>
    5740:	33 e0       	ldi	r19, 0x03	; 3
    5742:	01 c0       	rjmp	.+2      	; 0x5746 <mulacc+0x2a>
    5744:	34 e0       	ldi	r19, 0x04	; 4
    5746:	66 0f       	add	r22, r22
    5748:	77 1f       	adc	r23, r23
    574a:	88 1f       	adc	r24, r24
    574c:	99 1f       	adc	r25, r25
    574e:	31 50       	subi	r19, 0x01	; 1
    5750:	d1 f7       	brne	.-12     	; 0x5746 <mulacc+0x2a>
    5752:	62 0f       	add	r22, r18
    5754:	71 1d       	adc	r23, r1
    5756:	81 1d       	adc	r24, r1
    5758:	91 1d       	adc	r25, r1
    575a:	08 95       	ret

0000575c <skip_spaces>:
    575c:	0f 93       	push	r16
    575e:	1f 93       	push	r17
    5760:	cf 93       	push	r28
    5762:	df 93       	push	r29
    5764:	8c 01       	movw	r16, r24
    5766:	c8 01       	movw	r24, r16
    5768:	0e 94 19 34 	call	0x6832	; 0x6832 <fgetc>
    576c:	ec 01       	movw	r28, r24
    576e:	97 fd       	sbrc	r25, 7
    5770:	08 c0       	rjmp	.+16     	; 0x5782 <skip_spaces+0x26>
    5772:	0e 94 da 33 	call	0x67b4	; 0x67b4 <isspace>
    5776:	89 2b       	or	r24, r25
    5778:	b1 f7       	brne	.-20     	; 0x5766 <skip_spaces+0xa>
    577a:	b8 01       	movw	r22, r16
    577c:	ce 01       	movw	r24, r28
    577e:	0e 94 ba 34 	call	0x6974	; 0x6974 <ungetc>
    5782:	ce 01       	movw	r24, r28
    5784:	df 91       	pop	r29
    5786:	cf 91       	pop	r28
    5788:	1f 91       	pop	r17
    578a:	0f 91       	pop	r16
    578c:	08 95       	ret

0000578e <conv_int>:
    578e:	a0 e0       	ldi	r26, 0x00	; 0
    5790:	b0 e0       	ldi	r27, 0x00	; 0
    5792:	ec ec       	ldi	r30, 0xCC	; 204
    5794:	fb e2       	ldi	r31, 0x2B	; 43
    5796:	09 c4       	rjmp	.+2066   	; 0x5faa <__prologue_saves__+0xc>
    5798:	7c 01       	movw	r14, r24
    579a:	8b 01       	movw	r16, r22
    579c:	6a 01       	movw	r12, r20
    579e:	d2 2f       	mov	r29, r18
    57a0:	0e 94 19 34 	call	0x6832	; 0x6832 <fgetc>
    57a4:	9c 01       	movw	r18, r24
    57a6:	33 27       	eor	r19, r19
    57a8:	2b 32       	cpi	r18, 0x2B	; 43
    57aa:	31 05       	cpc	r19, r1
    57ac:	21 f0       	breq	.+8      	; 0x57b6 <conv_int+0x28>
    57ae:	2d 32       	cpi	r18, 0x2D	; 45
    57b0:	31 05       	cpc	r19, r1
    57b2:	59 f4       	brne	.+22     	; 0x57ca <conv_int+0x3c>
    57b4:	d0 68       	ori	r29, 0x80	; 128
    57b6:	01 50       	subi	r16, 0x01	; 1
    57b8:	11 09       	sbc	r17, r1
    57ba:	11 f4       	brne	.+4      	; 0x57c0 <conv_int+0x32>
    57bc:	80 e0       	ldi	r24, 0x00	; 0
    57be:	66 c0       	rjmp	.+204    	; 0x588c <conv_int+0xfe>
    57c0:	c7 01       	movw	r24, r14
    57c2:	0e 94 19 34 	call	0x6832	; 0x6832 <fgetc>
    57c6:	97 fd       	sbrc	r25, 7
    57c8:	f9 cf       	rjmp	.-14     	; 0x57bc <conv_int+0x2e>
    57ca:	cd 2f       	mov	r28, r29
    57cc:	cd 7f       	andi	r28, 0xFD	; 253
    57ce:	2d 2f       	mov	r18, r29
    57d0:	20 73       	andi	r18, 0x30	; 48
    57d2:	09 f5       	brne	.+66     	; 0x5816 <conv_int+0x88>
    57d4:	80 33       	cpi	r24, 0x30	; 48
    57d6:	f9 f4       	brne	.+62     	; 0x5816 <conv_int+0x88>
    57d8:	58 01       	movw	r10, r16
    57da:	81 e0       	ldi	r24, 0x01	; 1
    57dc:	a8 1a       	sub	r10, r24
    57de:	b1 08       	sbc	r11, r1
    57e0:	09 f4       	brne	.+2      	; 0x57e4 <conv_int+0x56>
    57e2:	41 c0       	rjmp	.+130    	; 0x5866 <conv_int+0xd8>
    57e4:	c7 01       	movw	r24, r14
    57e6:	0e 94 19 34 	call	0x6832	; 0x6832 <fgetc>
    57ea:	97 fd       	sbrc	r25, 7
    57ec:	3c c0       	rjmp	.+120    	; 0x5866 <conv_int+0xd8>
    57ee:	28 2f       	mov	r18, r24
    57f0:	2f 7d       	andi	r18, 0xDF	; 223
    57f2:	28 35       	cpi	r18, 0x58	; 88
    57f4:	51 f4       	brne	.+20     	; 0x580a <conv_int+0x7c>
    57f6:	c2 64       	ori	r28, 0x42	; 66
    57f8:	02 50       	subi	r16, 0x02	; 2
    57fa:	11 09       	sbc	r17, r1
    57fc:	a1 f1       	breq	.+104    	; 0x5866 <conv_int+0xd8>
    57fe:	c7 01       	movw	r24, r14
    5800:	0e 94 19 34 	call	0x6832	; 0x6832 <fgetc>
    5804:	97 ff       	sbrs	r25, 7
    5806:	07 c0       	rjmp	.+14     	; 0x5816 <conv_int+0x88>
    5808:	2e c0       	rjmp	.+92     	; 0x5866 <conv_int+0xd8>
    580a:	d6 ff       	sbrs	r29, 6
    580c:	02 c0       	rjmp	.+4      	; 0x5812 <conv_int+0x84>
    580e:	c2 60       	ori	r28, 0x02	; 2
    5810:	01 c0       	rjmp	.+2      	; 0x5814 <conv_int+0x86>
    5812:	c2 61       	ori	r28, 0x12	; 18
    5814:	85 01       	movw	r16, r10
    5816:	81 2c       	mov	r8, r1
    5818:	91 2c       	mov	r9, r1
    581a:	54 01       	movw	r10, r8
    581c:	20 ed       	ldi	r18, 0xD0	; 208
    581e:	28 0f       	add	r18, r24
    5820:	28 30       	cpi	r18, 0x08	; 8
    5822:	80 f0       	brcs	.+32     	; 0x5844 <conv_int+0xb6>
    5824:	c4 ff       	sbrs	r28, 4
    5826:	04 c0       	rjmp	.+8      	; 0x5830 <conv_int+0xa2>
    5828:	b7 01       	movw	r22, r14
    582a:	0e 94 ba 34 	call	0x6974	; 0x6974 <ungetc>
    582e:	18 c0       	rjmp	.+48     	; 0x5860 <conv_int+0xd2>
    5830:	2a 30       	cpi	r18, 0x0A	; 10
    5832:	40 f0       	brcs	.+16     	; 0x5844 <conv_int+0xb6>
    5834:	c6 ff       	sbrs	r28, 6
    5836:	f8 cf       	rjmp	.-16     	; 0x5828 <conv_int+0x9a>
    5838:	2f 7d       	andi	r18, 0xDF	; 223
    583a:	3f ee       	ldi	r19, 0xEF	; 239
    583c:	32 0f       	add	r19, r18
    583e:	36 30       	cpi	r19, 0x06	; 6
    5840:	98 f7       	brcc	.-26     	; 0x5828 <conv_int+0x9a>
    5842:	27 50       	subi	r18, 0x07	; 7
    5844:	4c 2f       	mov	r20, r28
    5846:	c5 01       	movw	r24, r10
    5848:	b4 01       	movw	r22, r8
    584a:	68 df       	rcall	.-304    	; 0x571c <mulacc>
    584c:	4b 01       	movw	r8, r22
    584e:	5c 01       	movw	r10, r24
    5850:	c2 60       	ori	r28, 0x02	; 2
    5852:	01 50       	subi	r16, 0x01	; 1
    5854:	11 09       	sbc	r17, r1
    5856:	51 f0       	breq	.+20     	; 0x586c <conv_int+0xde>
    5858:	c7 01       	movw	r24, r14
    585a:	eb d7       	rcall	.+4054   	; 0x6832 <fgetc>
    585c:	97 ff       	sbrs	r25, 7
    585e:	de cf       	rjmp	.-68     	; 0x581c <conv_int+0x8e>
    5860:	c1 fd       	sbrc	r28, 1
    5862:	04 c0       	rjmp	.+8      	; 0x586c <conv_int+0xde>
    5864:	ab cf       	rjmp	.-170    	; 0x57bc <conv_int+0x2e>
    5866:	81 2c       	mov	r8, r1
    5868:	91 2c       	mov	r9, r1
    586a:	54 01       	movw	r10, r8
    586c:	c7 ff       	sbrs	r28, 7
    586e:	08 c0       	rjmp	.+16     	; 0x5880 <conv_int+0xf2>
    5870:	b0 94       	com	r11
    5872:	a0 94       	com	r10
    5874:	90 94       	com	r9
    5876:	80 94       	com	r8
    5878:	81 1c       	adc	r8, r1
    587a:	91 1c       	adc	r9, r1
    587c:	a1 1c       	adc	r10, r1
    587e:	b1 1c       	adc	r11, r1
    5880:	2c 2f       	mov	r18, r28
    5882:	b5 01       	movw	r22, r10
    5884:	a4 01       	movw	r20, r8
    5886:	c6 01       	movw	r24, r12
    5888:	3d df       	rcall	.-390    	; 0x5704 <putval>
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	cd b7       	in	r28, 0x3d	; 61
    588e:	de b7       	in	r29, 0x3e	; 62
    5890:	ec e0       	ldi	r30, 0x0C	; 12
    5892:	a7 c3       	rjmp	.+1870   	; 0x5fe2 <__epilogue_restores__+0xc>

00005894 <conv_brk>:
    5894:	a0 e2       	ldi	r26, 0x20	; 32
    5896:	b0 e0       	ldi	r27, 0x00	; 0
    5898:	ef e4       	ldi	r30, 0x4F	; 79
    589a:	fc e2       	ldi	r31, 0x2C	; 44
    589c:	82 c3       	rjmp	.+1796   	; 0x5fa2 <__prologue_saves__+0x4>
    589e:	4c 01       	movw	r8, r24
    58a0:	5b 01       	movw	r10, r22
    58a2:	7a 01       	movw	r14, r20
    58a4:	8e 01       	movw	r16, r28
    58a6:	0f 5f       	subi	r16, 0xFF	; 255
    58a8:	1f 4f       	sbci	r17, 0xFF	; 255
    58aa:	68 01       	movw	r12, r16
    58ac:	80 e2       	ldi	r24, 0x20	; 32
    58ae:	f8 01       	movw	r30, r16
    58b0:	11 92       	st	Z+, r1
    58b2:	8a 95       	dec	r24
    58b4:	e9 f7       	brne	.-6      	; 0x58b0 <conv_brk+0x1c>
    58b6:	f4 01       	movw	r30, r8
    58b8:	63 80       	ldd	r6, Z+3	; 0x03
    58ba:	40 e0       	ldi	r20, 0x00	; 0
    58bc:	50 e0       	ldi	r21, 0x00	; 0
    58be:	71 2c       	mov	r7, r1
    58c0:	41 2c       	mov	r4, r1
    58c2:	80 e0       	ldi	r24, 0x00	; 0
    58c4:	a1 e0       	ldi	r26, 0x01	; 1
    58c6:	b0 e0       	ldi	r27, 0x00	; 0
    58c8:	f9 01       	movw	r30, r18
    58ca:	63 fc       	sbrc	r6, 3
    58cc:	55 90       	lpm	r5, Z+
    58ce:	63 fe       	sbrs	r6, 3
    58d0:	51 90       	ld	r5, Z+
    58d2:	8f 01       	movw	r16, r30
    58d4:	95 2d       	mov	r25, r5
    58d6:	9f 01       	movw	r18, r30
    58d8:	51 10       	cpse	r5, r1
    58da:	03 c0       	rjmp	.+6      	; 0x58e2 <conv_brk+0x4e>
    58dc:	80 e0       	ldi	r24, 0x00	; 0
    58de:	90 e0       	ldi	r25, 0x00	; 0
    58e0:	7e c0       	rjmp	.+252    	; 0x59de <conv_brk+0x14a>
    58e2:	fe e5       	ldi	r31, 0x5E	; 94
    58e4:	5f 12       	cpse	r5, r31
    58e6:	03 c0       	rjmp	.+6      	; 0x58ee <conv_brk+0x5a>
    58e8:	41 15       	cp	r20, r1
    58ea:	51 05       	cpc	r21, r1
    58ec:	61 f1       	breq	.+88     	; 0x5946 <conv_brk+0xb2>
    58ee:	68 2f       	mov	r22, r24
    58f0:	70 e0       	ldi	r23, 0x00	; 0
    58f2:	64 17       	cp	r22, r20
    58f4:	75 07       	cpc	r23, r21
    58f6:	4c f4       	brge	.+18     	; 0x590a <conv_brk+0x76>
    58f8:	6d e5       	ldi	r22, 0x5D	; 93
    58fa:	56 16       	cp	r5, r22
    58fc:	69 f1       	breq	.+90     	; 0x5958 <conv_brk+0xc4>
    58fe:	ed e2       	ldi	r30, 0x2D	; 45
    5900:	5e 12       	cpse	r5, r30
    5902:	03 c0       	rjmp	.+6      	; 0x590a <conv_brk+0x76>
    5904:	44 20       	and	r4, r4
    5906:	09 f1       	breq	.+66     	; 0x594a <conv_brk+0xb6>
    5908:	03 c0       	rjmp	.+6      	; 0x5910 <conv_brk+0x7c>
    590a:	41 10       	cpse	r4, r1
    590c:	01 c0       	rjmp	.+2      	; 0x5910 <conv_brk+0x7c>
    590e:	75 2c       	mov	r7, r5
    5910:	69 2f       	mov	r22, r25
    5912:	66 95       	lsr	r22
    5914:	66 95       	lsr	r22
    5916:	66 95       	lsr	r22
    5918:	f6 01       	movw	r30, r12
    591a:	e6 0f       	add	r30, r22
    591c:	f1 1d       	adc	r31, r1
    591e:	69 2f       	mov	r22, r25
    5920:	67 70       	andi	r22, 0x07	; 7
    5922:	8d 01       	movw	r16, r26
    5924:	02 c0       	rjmp	.+4      	; 0x592a <conv_brk+0x96>
    5926:	00 0f       	add	r16, r16
    5928:	11 1f       	adc	r17, r17
    592a:	6a 95       	dec	r22
    592c:	e2 f7       	brpl	.-8      	; 0x5926 <conv_brk+0x92>
    592e:	b8 01       	movw	r22, r16
    5930:	70 81       	ld	r23, Z
    5932:	67 2b       	or	r22, r23
    5934:	60 83       	st	Z, r22
    5936:	97 15       	cp	r25, r7
    5938:	59 f0       	breq	.+22     	; 0x5950 <conv_brk+0xbc>
    593a:	97 15       	cp	r25, r7
    593c:	10 f4       	brcc	.+4      	; 0x5942 <conv_brk+0xae>
    593e:	9f 5f       	subi	r25, 0xFF	; 255
    5940:	e7 cf       	rjmp	.-50     	; 0x5910 <conv_brk+0x7c>
    5942:	91 50       	subi	r25, 0x01	; 1
    5944:	e5 cf       	rjmp	.-54     	; 0x5910 <conv_brk+0x7c>
    5946:	81 e0       	ldi	r24, 0x01	; 1
    5948:	04 c0       	rjmp	.+8      	; 0x5952 <conv_brk+0xbe>
    594a:	44 24       	eor	r4, r4
    594c:	43 94       	inc	r4
    594e:	01 c0       	rjmp	.+2      	; 0x5952 <conv_brk+0xbe>
    5950:	41 2c       	mov	r4, r1
    5952:	4f 5f       	subi	r20, 0xFF	; 255
    5954:	5f 4f       	sbci	r21, 0xFF	; 255
    5956:	b8 cf       	rjmp	.-144    	; 0x58c8 <conv_brk+0x34>
    5958:	44 20       	and	r4, r4
    595a:	19 f0       	breq	.+6      	; 0x5962 <conv_brk+0xce>
    595c:	9e 81       	ldd	r25, Y+6	; 0x06
    595e:	90 62       	ori	r25, 0x20	; 32
    5960:	9e 83       	std	Y+6, r25	; 0x06
    5962:	81 11       	cpse	r24, r1
    5964:	03 c0       	rjmp	.+6      	; 0x596c <conv_brk+0xd8>
    5966:	77 24       	eor	r7, r7
    5968:	73 94       	inc	r7
    596a:	18 c0       	rjmp	.+48     	; 0x599c <conv_brk+0x108>
    596c:	f6 01       	movw	r30, r12
    596e:	9e 01       	movw	r18, r28
    5970:	2f 5d       	subi	r18, 0xDF	; 223
    5972:	3f 4f       	sbci	r19, 0xFF	; 255
    5974:	80 81       	ld	r24, Z
    5976:	80 95       	com	r24
    5978:	81 93       	st	Z+, r24
    597a:	e2 17       	cp	r30, r18
    597c:	f3 07       	cpc	r31, r19
    597e:	d1 f7       	brne	.-12     	; 0x5974 <conv_brk+0xe0>
    5980:	f2 cf       	rjmp	.-28     	; 0x5966 <conv_brk+0xd2>
    5982:	e1 14       	cp	r14, r1
    5984:	f1 04       	cpc	r15, r1
    5986:	29 f0       	breq	.+10     	; 0x5992 <conv_brk+0xfe>
    5988:	f7 01       	movw	r30, r14
    598a:	80 83       	st	Z, r24
    598c:	c7 01       	movw	r24, r14
    598e:	01 96       	adiw	r24, 0x01	; 1
    5990:	7c 01       	movw	r14, r24
    5992:	91 e0       	ldi	r25, 0x01	; 1
    5994:	a9 1a       	sub	r10, r25
    5996:	b1 08       	sbc	r11, r1
    5998:	71 2c       	mov	r7, r1
    599a:	d9 f0       	breq	.+54     	; 0x59d2 <conv_brk+0x13e>
    599c:	c4 01       	movw	r24, r8
    599e:	49 d7       	rcall	.+3730   	; 0x6832 <fgetc>
    59a0:	97 fd       	sbrc	r25, 7
    59a2:	15 c0       	rjmp	.+42     	; 0x59ce <conv_brk+0x13a>
    59a4:	28 2f       	mov	r18, r24
    59a6:	26 95       	lsr	r18
    59a8:	26 95       	lsr	r18
    59aa:	26 95       	lsr	r18
    59ac:	f6 01       	movw	r30, r12
    59ae:	e2 0f       	add	r30, r18
    59b0:	f1 1d       	adc	r31, r1
    59b2:	20 81       	ld	r18, Z
    59b4:	30 e0       	ldi	r19, 0x00	; 0
    59b6:	ac 01       	movw	r20, r24
    59b8:	47 70       	andi	r20, 0x07	; 7
    59ba:	55 27       	eor	r21, r21
    59bc:	02 c0       	rjmp	.+4      	; 0x59c2 <conv_brk+0x12e>
    59be:	35 95       	asr	r19
    59c0:	27 95       	ror	r18
    59c2:	4a 95       	dec	r20
    59c4:	e2 f7       	brpl	.-8      	; 0x59be <conv_brk+0x12a>
    59c6:	20 fd       	sbrc	r18, 0
    59c8:	dc cf       	rjmp	.-72     	; 0x5982 <conv_brk+0xee>
    59ca:	b4 01       	movw	r22, r8
    59cc:	d3 d7       	rcall	.+4006   	; 0x6974 <ungetc>
    59ce:	71 10       	cpse	r7, r1
    59d0:	85 cf       	rjmp	.-246    	; 0x58dc <conv_brk+0x48>
    59d2:	e1 14       	cp	r14, r1
    59d4:	f1 04       	cpc	r15, r1
    59d6:	11 f0       	breq	.+4      	; 0x59dc <conv_brk+0x148>
    59d8:	f7 01       	movw	r30, r14
    59da:	10 82       	st	Z, r1
    59dc:	c8 01       	movw	r24, r16
    59de:	a0 96       	adiw	r28, 0x20	; 32
    59e0:	e0 e1       	ldi	r30, 0x10	; 16
    59e2:	fb c2       	rjmp	.+1526   	; 0x5fda <__epilogue_restores__+0x4>

000059e4 <conv_flt>:
    59e4:	a6 e0       	ldi	r26, 0x06	; 6
    59e6:	b0 e0       	ldi	r27, 0x00	; 0
    59e8:	e7 ef       	ldi	r30, 0xF7	; 247
    59ea:	fc e2       	ldi	r31, 0x2C	; 44
    59ec:	d8 c2       	rjmp	.+1456   	; 0x5f9e <__prologue_saves__>
    59ee:	5c 01       	movw	r10, r24
    59f0:	7b 01       	movw	r14, r22
    59f2:	1a 01       	movw	r2, r20
    59f4:	1e d7       	rcall	.+3644   	; 0x6832 <fgetc>
    59f6:	9e 83       	std	Y+6, r25	; 0x06
    59f8:	8d 83       	std	Y+5, r24	; 0x05
    59fa:	99 27       	eor	r25, r25
    59fc:	8b 32       	cpi	r24, 0x2B	; 43
    59fe:	91 05       	cpc	r25, r1
    5a00:	21 f0       	breq	.+8      	; 0x5a0a <conv_flt+0x26>
    5a02:	8d 97       	sbiw	r24, 0x2d	; 45
    5a04:	81 f4       	brne	.+32     	; 0x5a26 <conv_flt+0x42>
    5a06:	10 e8       	ldi	r17, 0x80	; 128
    5a08:	01 c0       	rjmp	.+2      	; 0x5a0c <conv_flt+0x28>
    5a0a:	10 e0       	ldi	r17, 0x00	; 0
    5a0c:	21 e0       	ldi	r18, 0x01	; 1
    5a0e:	e2 1a       	sub	r14, r18
    5a10:	f1 08       	sbc	r15, r1
    5a12:	11 f4       	brne	.+4      	; 0x5a18 <conv_flt+0x34>
    5a14:	80 e0       	ldi	r24, 0x00	; 0
    5a16:	1e c1       	rjmp	.+572    	; 0x5c54 <conv_flt+0x270>
    5a18:	c5 01       	movw	r24, r10
    5a1a:	0b d7       	rcall	.+3606   	; 0x6832 <fgetc>
    5a1c:	9e 83       	std	Y+6, r25	; 0x06
    5a1e:	8d 83       	std	Y+5, r24	; 0x05
    5a20:	97 ff       	sbrs	r25, 7
    5a22:	02 c0       	rjmp	.+4      	; 0x5a28 <conv_flt+0x44>
    5a24:	f7 cf       	rjmp	.-18     	; 0x5a14 <conv_flt+0x30>
    5a26:	10 e0       	ldi	r17, 0x00	; 0
    5a28:	8d 81       	ldd	r24, Y+5	; 0x05
    5a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    5a2c:	cb d6       	rcall	.+3478   	; 0x67c4 <tolower>
    5a2e:	89 36       	cpi	r24, 0x69	; 105
    5a30:	91 05       	cpc	r25, r1
    5a32:	49 f0       	breq	.+18     	; 0x5a46 <conv_flt+0x62>
    5a34:	8e 36       	cpi	r24, 0x6E	; 110
    5a36:	91 05       	cpc	r25, r1
    5a38:	09 f0       	breq	.+2      	; 0x5a3c <conv_flt+0x58>
    5a3a:	38 c0       	rjmp	.+112    	; 0x5aac <conv_flt+0xc8>
    5a3c:	65 e4       	ldi	r22, 0x45	; 69
    5a3e:	86 2e       	mov	r8, r22
    5a40:	6d e0       	ldi	r22, 0x0D	; 13
    5a42:	96 2e       	mov	r9, r22
    5a44:	04 c0       	rjmp	.+8      	; 0x5a4e <conv_flt+0x6a>
    5a46:	78 e4       	ldi	r23, 0x48	; 72
    5a48:	87 2e       	mov	r8, r23
    5a4a:	7d e0       	ldi	r23, 0x0D	; 13
    5a4c:	97 2e       	mov	r9, r23
    5a4e:	ef ef       	ldi	r30, 0xFF	; 255
    5a50:	8e 1a       	sub	r8, r30
    5a52:	9e 0a       	sbc	r9, r30
    5a54:	f4 01       	movw	r30, r8
    5a56:	31 97       	sbiw	r30, 0x01	; 1
    5a58:	04 91       	lpm	r16, Z
    5a5a:	00 23       	and	r16, r16
    5a5c:	b1 f0       	breq	.+44     	; 0x5a8a <conv_flt+0xa6>
    5a5e:	81 e0       	ldi	r24, 0x01	; 1
    5a60:	e8 1a       	sub	r14, r24
    5a62:	f1 08       	sbc	r15, r1
    5a64:	59 f0       	breq	.+22     	; 0x5a7c <conv_flt+0x98>
    5a66:	c5 01       	movw	r24, r10
    5a68:	e4 d6       	rcall	.+3528   	; 0x6832 <fgetc>
    5a6a:	6c 01       	movw	r12, r24
    5a6c:	97 fd       	sbrc	r25, 7
    5a6e:	06 c0       	rjmp	.+12     	; 0x5a7c <conv_flt+0x98>
    5a70:	a9 d6       	rcall	.+3410   	; 0x67c4 <tolower>
    5a72:	08 17       	cp	r16, r24
    5a74:	61 f3       	breq	.-40     	; 0x5a4e <conv_flt+0x6a>
    5a76:	b5 01       	movw	r22, r10
    5a78:	c6 01       	movw	r24, r12
    5a7a:	7c d7       	rcall	.+3832   	; 0x6974 <ungetc>
    5a7c:	9b e4       	ldi	r25, 0x4B	; 75
    5a7e:	89 16       	cp	r8, r25
    5a80:	9d e0       	ldi	r25, 0x0D	; 13
    5a82:	99 06       	cpc	r9, r25
    5a84:	09 f0       	breq	.+2      	; 0x5a88 <conv_flt+0xa4>
    5a86:	c6 cf       	rjmp	.-116    	; 0x5a14 <conv_flt+0x30>
    5a88:	05 c0       	rjmp	.+10     	; 0x5a94 <conv_flt+0xb0>
    5a8a:	f8 e4       	ldi	r31, 0x48	; 72
    5a8c:	8f 16       	cp	r8, r31
    5a8e:	fd e0       	ldi	r31, 0x0D	; 13
    5a90:	9f 06       	cpc	r9, r31
    5a92:	29 f0       	breq	.+10     	; 0x5a9e <conv_flt+0xba>
    5a94:	80 e0       	ldi	r24, 0x00	; 0
    5a96:	90 e0       	ldi	r25, 0x00	; 0
    5a98:	a0 e8       	ldi	r26, 0x80	; 128
    5a9a:	bf e7       	ldi	r27, 0x7F	; 127
    5a9c:	04 c0       	rjmp	.+8      	; 0x5aa6 <conv_flt+0xc2>
    5a9e:	80 e0       	ldi	r24, 0x00	; 0
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	a0 ec       	ldi	r26, 0xC0	; 192
    5aa4:	bf e7       	ldi	r27, 0x7F	; 127
    5aa6:	bc 01       	movw	r22, r24
    5aa8:	cd 01       	movw	r24, r26
    5aaa:	c4 c0       	rjmp	.+392    	; 0x5c34 <conv_flt+0x250>
    5aac:	41 2c       	mov	r4, r1
    5aae:	51 2c       	mov	r5, r1
    5ab0:	32 01       	movw	r6, r4
    5ab2:	c1 2c       	mov	r12, r1
    5ab4:	d1 2c       	mov	r13, r1
    5ab6:	2d 81       	ldd	r18, Y+5	; 0x05
    5ab8:	20 53       	subi	r18, 0x30	; 48
    5aba:	2a 30       	cpi	r18, 0x0A	; 10
    5abc:	10 f5       	brcc	.+68     	; 0x5b02 <conv_flt+0x11e>
    5abe:	01 2f       	mov	r16, r17
    5ac0:	02 60       	ori	r16, 0x02	; 2
    5ac2:	81 2f       	mov	r24, r17
    5ac4:	88 70       	andi	r24, 0x08	; 8
    5ac6:	12 ff       	sbrs	r17, 2
    5ac8:	06 c0       	rjmp	.+12     	; 0x5ad6 <conv_flt+0xf2>
    5aca:	81 11       	cpse	r24, r1
    5acc:	20 c0       	rjmp	.+64     	; 0x5b0e <conv_flt+0x12a>
    5ace:	2f ef       	ldi	r18, 0xFF	; 255
    5ad0:	c2 1a       	sub	r12, r18
    5ad2:	d2 0a       	sbc	r13, r18
    5ad4:	1c c0       	rjmp	.+56     	; 0x5b0e <conv_flt+0x12a>
    5ad6:	88 23       	and	r24, r24
    5ad8:	19 f0       	breq	.+6      	; 0x5ae0 <conv_flt+0xfc>
    5ada:	81 e0       	ldi	r24, 0x01	; 1
    5adc:	c8 1a       	sub	r12, r24
    5ade:	d1 08       	sbc	r13, r1
    5ae0:	40 e2       	ldi	r20, 0x20	; 32
    5ae2:	c3 01       	movw	r24, r6
    5ae4:	b2 01       	movw	r22, r4
    5ae6:	1a de       	rcall	.-972    	; 0x571c <mulacc>
    5ae8:	2b 01       	movw	r4, r22
    5aea:	3c 01       	movw	r6, r24
    5aec:	98 e9       	ldi	r25, 0x98	; 152
    5aee:	49 16       	cp	r4, r25
    5af0:	99 e9       	ldi	r25, 0x99	; 153
    5af2:	59 06       	cpc	r5, r25
    5af4:	69 06       	cpc	r6, r25
    5af6:	99 e1       	ldi	r25, 0x19	; 25
    5af8:	79 06       	cpc	r7, r25
    5afa:	48 f0       	brcs	.+18     	; 0x5b0e <conv_flt+0x12a>
    5afc:	01 2f       	mov	r16, r17
    5afe:	06 60       	ori	r16, 0x06	; 6
    5b00:	06 c0       	rjmp	.+12     	; 0x5b0e <conv_flt+0x12a>
    5b02:	2e 3f       	cpi	r18, 0xFE	; 254
    5b04:	89 f4       	brne	.+34     	; 0x5b28 <conv_flt+0x144>
    5b06:	13 fd       	sbrc	r17, 3
    5b08:	0f c0       	rjmp	.+30     	; 0x5b28 <conv_flt+0x144>
    5b0a:	01 2f       	mov	r16, r17
    5b0c:	08 60       	ori	r16, 0x08	; 8
    5b0e:	e1 e0       	ldi	r30, 0x01	; 1
    5b10:	ee 1a       	sub	r14, r30
    5b12:	f1 08       	sbc	r15, r1
    5b14:	41 f0       	breq	.+16     	; 0x5b26 <conv_flt+0x142>
    5b16:	c5 01       	movw	r24, r10
    5b18:	8c d6       	rcall	.+3352   	; 0x6832 <fgetc>
    5b1a:	9e 83       	std	Y+6, r25	; 0x06
    5b1c:	8d 83       	std	Y+5, r24	; 0x05
    5b1e:	10 2f       	mov	r17, r16
    5b20:	97 ff       	sbrs	r25, 7
    5b22:	c9 cf       	rjmp	.-110    	; 0x5ab6 <conv_flt+0xd2>
    5b24:	01 c0       	rjmp	.+2      	; 0x5b28 <conv_flt+0x144>
    5b26:	10 2f       	mov	r17, r16
    5b28:	11 ff       	sbrs	r17, 1
    5b2a:	74 cf       	rjmp	.-280    	; 0x5a14 <conv_flt+0x30>
    5b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b2e:	8f 7d       	andi	r24, 0xDF	; 223
    5b30:	85 34       	cpi	r24, 0x45	; 69
    5b32:	09 f0       	breq	.+2      	; 0x5b36 <conv_flt+0x152>
    5b34:	4a c0       	rjmp	.+148    	; 0x5bca <conv_flt+0x1e6>
    5b36:	47 01       	movw	r8, r14
    5b38:	f1 e0       	ldi	r31, 0x01	; 1
    5b3a:	8f 1a       	sub	r8, r31
    5b3c:	91 08       	sbc	r9, r1
    5b3e:	09 f4       	brne	.+2      	; 0x5b42 <conv_flt+0x15e>
    5b40:	69 cf       	rjmp	.-302    	; 0x5a14 <conv_flt+0x30>
    5b42:	c5 01       	movw	r24, r10
    5b44:	76 d6       	rcall	.+3308   	; 0x6832 <fgetc>
    5b46:	9e 83       	std	Y+6, r25	; 0x06
    5b48:	8d 83       	std	Y+5, r24	; 0x05
    5b4a:	97 fd       	sbrc	r25, 7
    5b4c:	63 cf       	rjmp	.-314    	; 0x5a14 <conv_flt+0x30>
    5b4e:	99 27       	eor	r25, r25
    5b50:	8b 32       	cpi	r24, 0x2B	; 43
    5b52:	91 05       	cpc	r25, r1
    5b54:	19 f0       	breq	.+6      	; 0x5b5c <conv_flt+0x178>
    5b56:	8d 97       	sbiw	r24, 0x2d	; 45
    5b58:	59 f4       	brne	.+22     	; 0x5b70 <conv_flt+0x18c>
    5b5a:	10 61       	ori	r17, 0x10	; 16
    5b5c:	47 01       	movw	r8, r14
    5b5e:	22 e0       	ldi	r18, 0x02	; 2
    5b60:	82 1a       	sub	r8, r18
    5b62:	91 08       	sbc	r9, r1
    5b64:	09 f4       	brne	.+2      	; 0x5b68 <conv_flt+0x184>
    5b66:	56 cf       	rjmp	.-340    	; 0x5a14 <conv_flt+0x30>
    5b68:	c5 01       	movw	r24, r10
    5b6a:	63 d6       	rcall	.+3270   	; 0x6832 <fgetc>
    5b6c:	9e 83       	std	Y+6, r25	; 0x06
    5b6e:	8d 83       	std	Y+5, r24	; 0x05
    5b70:	8d 81       	ldd	r24, Y+5	; 0x05
    5b72:	9e 81       	ldd	r25, Y+6	; 0x06
    5b74:	c0 97       	sbiw	r24, 0x30	; 48
    5b76:	0a 97       	sbiw	r24, 0x0a	; 10
    5b78:	08 f0       	brcs	.+2      	; 0x5b7c <conv_flt+0x198>
    5b7a:	4c cf       	rjmp	.-360    	; 0x5a14 <conv_flt+0x30>
    5b7c:	74 01       	movw	r14, r8
    5b7e:	81 2c       	mov	r8, r1
    5b80:	91 2c       	mov	r9, r1
    5b82:	b4 01       	movw	r22, r8
    5b84:	99 0c       	add	r9, r9
    5b86:	88 0b       	sbc	r24, r24
    5b88:	99 0b       	sbc	r25, r25
    5b8a:	2d 81       	ldd	r18, Y+5	; 0x05
    5b8c:	20 53       	subi	r18, 0x30	; 48
    5b8e:	40 e2       	ldi	r20, 0x20	; 32
    5b90:	c5 dd       	rcall	.-1142   	; 0x571c <mulacc>
    5b92:	ab 01       	movw	r20, r22
    5b94:	bc 01       	movw	r22, r24
    5b96:	4a 01       	movw	r8, r20
    5b98:	81 e0       	ldi	r24, 0x01	; 1
    5b9a:	e8 1a       	sub	r14, r24
    5b9c:	f1 08       	sbc	r15, r1
    5b9e:	69 f0       	breq	.+26     	; 0x5bba <conv_flt+0x1d6>
    5ba0:	c5 01       	movw	r24, r10
    5ba2:	49 83       	std	Y+1, r20	; 0x01
    5ba4:	5a 83       	std	Y+2, r21	; 0x02
    5ba6:	6b 83       	std	Y+3, r22	; 0x03
    5ba8:	7c 83       	std	Y+4, r23	; 0x04
    5baa:	43 d6       	rcall	.+3206   	; 0x6832 <fgetc>
    5bac:	9e 83       	std	Y+6, r25	; 0x06
    5bae:	8d 83       	std	Y+5, r24	; 0x05
    5bb0:	c0 97       	sbiw	r24, 0x30	; 48
    5bb2:	49 81       	ldd	r20, Y+1	; 0x01
    5bb4:	5a 81       	ldd	r21, Y+2	; 0x02
    5bb6:	0a 97       	sbiw	r24, 0x0a	; 10
    5bb8:	20 f3       	brcs	.-56     	; 0x5b82 <conv_flt+0x19e>
    5bba:	14 ff       	sbrs	r17, 4
    5bbc:	04 c0       	rjmp	.+8      	; 0x5bc6 <conv_flt+0x1e2>
    5bbe:	88 24       	eor	r8, r8
    5bc0:	99 24       	eor	r9, r9
    5bc2:	84 1a       	sub	r8, r20
    5bc4:	95 0a       	sbc	r9, r21
    5bc6:	c8 0c       	add	r12, r8
    5bc8:	d9 1c       	adc	r13, r9
    5bca:	ef 28       	or	r14, r15
    5bcc:	39 f0       	breq	.+14     	; 0x5bdc <conv_flt+0x1f8>
    5bce:	ed 81       	ldd	r30, Y+5	; 0x05
    5bd0:	fe 81       	ldd	r31, Y+6	; 0x06
    5bd2:	f7 fd       	sbrc	r31, 7
    5bd4:	03 c0       	rjmp	.+6      	; 0x5bdc <conv_flt+0x1f8>
    5bd6:	b5 01       	movw	r22, r10
    5bd8:	cf 01       	movw	r24, r30
    5bda:	cc d6       	rcall	.+3480   	; 0x6974 <ungetc>
    5bdc:	c3 01       	movw	r24, r6
    5bde:	b2 01       	movw	r22, r4
    5be0:	26 d3       	rcall	.+1612   	; 0x622e <__floatunsisf>
    5be2:	d7 fe       	sbrs	r13, 7
    5be4:	08 c0       	rjmp	.+16     	; 0x5bf6 <conv_flt+0x212>
    5be6:	d1 94       	neg	r13
    5be8:	c1 94       	neg	r12
    5bea:	d1 08       	sbc	r13, r1
    5bec:	54 e6       	ldi	r21, 0x64	; 100
    5bee:	85 2e       	mov	r8, r21
    5bf0:	5d e0       	ldi	r21, 0x0D	; 13
    5bf2:	95 2e       	mov	r9, r21
    5bf4:	04 c0       	rjmp	.+8      	; 0x5bfe <conv_flt+0x21a>
    5bf6:	4c e7       	ldi	r20, 0x7C	; 124
    5bf8:	84 2e       	mov	r8, r20
    5bfa:	4d e0       	ldi	r20, 0x0D	; 13
    5bfc:	94 2e       	mov	r9, r20
    5bfe:	54 01       	movw	r10, r8
    5c00:	f8 e1       	ldi	r31, 0x18	; 24
    5c02:	af 1a       	sub	r10, r31
    5c04:	b1 08       	sbc	r11, r1
    5c06:	30 e2       	ldi	r19, 0x20	; 32
    5c08:	e3 2e       	mov	r14, r19
    5c0a:	f1 2c       	mov	r15, r1
    5c0c:	ce 14       	cp	r12, r14
    5c0e:	df 04       	cpc	r13, r15
    5c10:	48 f0       	brcs	.+18     	; 0x5c24 <conv_flt+0x240>
    5c12:	f4 01       	movw	r30, r8
    5c14:	25 91       	lpm	r18, Z+
    5c16:	35 91       	lpm	r19, Z+
    5c18:	45 91       	lpm	r20, Z+
    5c1a:	54 91       	lpm	r21, Z
    5c1c:	11 d4       	rcall	.+2082   	; 0x6440 <__mulsf3>
    5c1e:	ce 18       	sub	r12, r14
    5c20:	df 08       	sbc	r13, r15
    5c22:	f4 cf       	rjmp	.-24     	; 0x5c0c <conv_flt+0x228>
    5c24:	24 e0       	ldi	r18, 0x04	; 4
    5c26:	82 1a       	sub	r8, r18
    5c28:	91 08       	sbc	r9, r1
    5c2a:	f6 94       	lsr	r15
    5c2c:	e7 94       	ror	r14
    5c2e:	8a 14       	cp	r8, r10
    5c30:	9b 04       	cpc	r9, r11
    5c32:	61 f7       	brne	.-40     	; 0x5c0c <conv_flt+0x228>
    5c34:	17 ff       	sbrs	r17, 7
    5c36:	05 c0       	rjmp	.+10     	; 0x5c42 <conv_flt+0x25e>
    5c38:	dc 01       	movw	r26, r24
    5c3a:	cb 01       	movw	r24, r22
    5c3c:	b0 58       	subi	r27, 0x80	; 128
    5c3e:	bc 01       	movw	r22, r24
    5c40:	cd 01       	movw	r24, r26
    5c42:	21 14       	cp	r2, r1
    5c44:	31 04       	cpc	r3, r1
    5c46:	29 f0       	breq	.+10     	; 0x5c52 <conv_flt+0x26e>
    5c48:	f1 01       	movw	r30, r2
    5c4a:	60 83       	st	Z, r22
    5c4c:	71 83       	std	Z+1, r23	; 0x01
    5c4e:	82 83       	std	Z+2, r24	; 0x02
    5c50:	93 83       	std	Z+3, r25	; 0x03
    5c52:	81 e0       	ldi	r24, 0x01	; 1
    5c54:	26 96       	adiw	r28, 0x06	; 6
    5c56:	e2 e1       	ldi	r30, 0x12	; 18
    5c58:	be c1       	rjmp	.+892    	; 0x5fd6 <__epilogue_restores__>

00005c5a <vfscanf>:
    5c5a:	a1 e0       	ldi	r26, 0x01	; 1
    5c5c:	b0 e0       	ldi	r27, 0x00	; 0
    5c5e:	e2 e3       	ldi	r30, 0x32	; 50
    5c60:	fe e2       	ldi	r31, 0x2E	; 46
    5c62:	9f c1       	rjmp	.+830    	; 0x5fa2 <__prologue_saves__+0x4>
    5c64:	6c 01       	movw	r12, r24
    5c66:	2b 01       	movw	r4, r22
    5c68:	4a 01       	movw	r8, r20
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	17 82       	std	Z+7, r1	; 0x07
    5c6e:	16 82       	std	Z+6, r1	; 0x06
    5c70:	a1 2c       	mov	r10, r1
    5c72:	f6 01       	movw	r30, r12
    5c74:	f3 80       	ldd	r15, Z+3	; 0x03
    5c76:	f2 01       	movw	r30, r4
    5c78:	f3 fc       	sbrc	r15, 3
    5c7a:	85 91       	lpm	r24, Z+
    5c7c:	f3 fe       	sbrs	r15, 3
    5c7e:	81 91       	ld	r24, Z+
    5c80:	48 2f       	mov	r20, r24
    5c82:	2f 01       	movw	r4, r30
    5c84:	88 23       	and	r24, r24
    5c86:	09 f4       	brne	.+2      	; 0x5c8a <vfscanf+0x30>
    5c88:	01 c1       	rjmp	.+514    	; 0x5e8c <vfscanf+0x232>
    5c8a:	90 e0       	ldi	r25, 0x00	; 0
    5c8c:	49 83       	std	Y+1, r20	; 0x01
    5c8e:	92 d5       	rcall	.+2852   	; 0x67b4 <isspace>
    5c90:	49 81       	ldd	r20, Y+1	; 0x01
    5c92:	89 2b       	or	r24, r25
    5c94:	19 f0       	breq	.+6      	; 0x5c9c <vfscanf+0x42>
    5c96:	c6 01       	movw	r24, r12
    5c98:	61 dd       	rcall	.-1342   	; 0x575c <skip_spaces>
    5c9a:	eb cf       	rjmp	.-42     	; 0x5c72 <vfscanf+0x18>
    5c9c:	45 32       	cpi	r20, 0x25	; 37
    5c9e:	41 f4       	brne	.+16     	; 0x5cb0 <vfscanf+0x56>
    5ca0:	f2 01       	movw	r30, r4
    5ca2:	f3 fc       	sbrc	r15, 3
    5ca4:	45 91       	lpm	r20, Z+
    5ca6:	f3 fe       	sbrs	r15, 3
    5ca8:	41 91       	ld	r20, Z+
    5caa:	2f 01       	movw	r4, r30
    5cac:	45 32       	cpi	r20, 0x25	; 37
    5cae:	59 f4       	brne	.+22     	; 0x5cc6 <vfscanf+0x6c>
    5cb0:	c6 01       	movw	r24, r12
    5cb2:	49 83       	std	Y+1, r20	; 0x01
    5cb4:	be d5       	rcall	.+2940   	; 0x6832 <fgetc>
    5cb6:	49 81       	ldd	r20, Y+1	; 0x01
    5cb8:	97 fd       	sbrc	r25, 7
    5cba:	e6 c0       	rjmp	.+460    	; 0x5e88 <vfscanf+0x22e>
    5cbc:	48 17       	cp	r20, r24
    5cbe:	c9 f2       	breq	.-78     	; 0x5c72 <vfscanf+0x18>
    5cc0:	b6 01       	movw	r22, r12
    5cc2:	58 d6       	rcall	.+3248   	; 0x6974 <ungetc>
    5cc4:	e3 c0       	rjmp	.+454    	; 0x5e8c <vfscanf+0x232>
    5cc6:	4a 32       	cpi	r20, 0x2A	; 42
    5cc8:	39 f4       	brne	.+14     	; 0x5cd8 <vfscanf+0x7e>
    5cca:	f3 fc       	sbrc	r15, 3
    5ccc:	45 91       	lpm	r20, Z+
    5cce:	f3 fe       	sbrs	r15, 3
    5cd0:	41 91       	ld	r20, Z+
    5cd2:	2f 01       	movw	r4, r30
    5cd4:	51 e0       	ldi	r21, 0x01	; 1
    5cd6:	01 c0       	rjmp	.+2      	; 0x5cda <vfscanf+0x80>
    5cd8:	50 e0       	ldi	r21, 0x00	; 0
    5cda:	32 01       	movw	r6, r4
    5cdc:	00 e0       	ldi	r16, 0x00	; 0
    5cde:	10 e0       	ldi	r17, 0x00	; 0
    5ce0:	20 ed       	ldi	r18, 0xD0	; 208
    5ce2:	24 0f       	add	r18, r20
    5ce4:	2a 30       	cpi	r18, 0x0A	; 10
    5ce6:	80 f4       	brcc	.+32     	; 0x5d08 <vfscanf+0xae>
    5ce8:	52 60       	ori	r21, 0x02	; 2
    5cea:	b8 01       	movw	r22, r16
    5cec:	80 e0       	ldi	r24, 0x00	; 0
    5cee:	90 e0       	ldi	r25, 0x00	; 0
    5cf0:	40 e2       	ldi	r20, 0x20	; 32
    5cf2:	59 83       	std	Y+1, r21	; 0x01
    5cf4:	13 dd       	rcall	.-1498   	; 0x571c <mulacc>
    5cf6:	8b 01       	movw	r16, r22
    5cf8:	f3 01       	movw	r30, r6
    5cfa:	f3 fc       	sbrc	r15, 3
    5cfc:	45 91       	lpm	r20, Z+
    5cfe:	f3 fe       	sbrs	r15, 3
    5d00:	41 91       	ld	r20, Z+
    5d02:	3f 01       	movw	r6, r30
    5d04:	59 81       	ldd	r21, Y+1	; 0x01
    5d06:	ec cf       	rjmp	.-40     	; 0x5ce0 <vfscanf+0x86>
    5d08:	b5 2e       	mov	r11, r21
    5d0a:	34 2f       	mov	r19, r20
    5d0c:	23 01       	movw	r4, r6
    5d0e:	51 ff       	sbrs	r21, 1
    5d10:	04 c0       	rjmp	.+8      	; 0x5d1a <vfscanf+0xc0>
    5d12:	01 15       	cp	r16, r1
    5d14:	11 05       	cpc	r17, r1
    5d16:	19 f4       	brne	.+6      	; 0x5d1e <vfscanf+0xc4>
    5d18:	b9 c0       	rjmp	.+370    	; 0x5e8c <vfscanf+0x232>
    5d1a:	0f ef       	ldi	r16, 0xFF	; 255
    5d1c:	1f ef       	ldi	r17, 0xFF	; 255
    5d1e:	48 36       	cpi	r20, 0x68	; 104
    5d20:	19 f0       	breq	.+6      	; 0x5d28 <vfscanf+0xce>
    5d22:	4c 36       	cpi	r20, 0x6C	; 108
    5d24:	59 f0       	breq	.+22     	; 0x5d3c <vfscanf+0xe2>
    5d26:	13 c0       	rjmp	.+38     	; 0x5d4e <vfscanf+0xf4>
    5d28:	f3 01       	movw	r30, r6
    5d2a:	f3 fc       	sbrc	r15, 3
    5d2c:	35 91       	lpm	r19, Z+
    5d2e:	f3 fe       	sbrs	r15, 3
    5d30:	31 91       	ld	r19, Z+
    5d32:	2f 01       	movw	r4, r30
    5d34:	38 36       	cpi	r19, 0x68	; 104
    5d36:	59 f4       	brne	.+22     	; 0x5d4e <vfscanf+0xf4>
    5d38:	58 60       	ori	r21, 0x08	; 8
    5d3a:	b5 2e       	mov	r11, r21
    5d3c:	fb 2d       	mov	r31, r11
    5d3e:	f4 60       	ori	r31, 0x04	; 4
    5d40:	bf 2e       	mov	r11, r31
    5d42:	f2 01       	movw	r30, r4
    5d44:	f3 fc       	sbrc	r15, 3
    5d46:	35 91       	lpm	r19, Z+
    5d48:	f3 fe       	sbrs	r15, 3
    5d4a:	31 91       	ld	r19, Z+
    5d4c:	2f 01       	movw	r4, r30
    5d4e:	33 23       	and	r19, r19
    5d50:	09 f4       	brne	.+2      	; 0x5d54 <vfscanf+0xfa>
    5d52:	9c c0       	rjmp	.+312    	; 0x5e8c <vfscanf+0x232>
    5d54:	63 2f       	mov	r22, r19
    5d56:	70 e0       	ldi	r23, 0x00	; 0
    5d58:	83 e3       	ldi	r24, 0x33	; 51
    5d5a:	9d e0       	ldi	r25, 0x0D	; 13
    5d5c:	39 83       	std	Y+1, r19	; 0x01
    5d5e:	3a d5       	rcall	.+2676   	; 0x67d4 <strchr_P>
    5d60:	39 81       	ldd	r19, Y+1	; 0x01
    5d62:	89 2b       	or	r24, r25
    5d64:	09 f4       	brne	.+2      	; 0x5d68 <vfscanf+0x10e>
    5d66:	92 c0       	rjmp	.+292    	; 0x5e8c <vfscanf+0x232>
    5d68:	b0 fc       	sbrc	r11, 0
    5d6a:	07 c0       	rjmp	.+14     	; 0x5d7a <vfscanf+0x120>
    5d6c:	f4 01       	movw	r30, r8
    5d6e:	e0 80       	ld	r14, Z
    5d70:	f1 80       	ldd	r15, Z+1	; 0x01
    5d72:	c4 01       	movw	r24, r8
    5d74:	02 96       	adiw	r24, 0x02	; 2
    5d76:	4c 01       	movw	r8, r24
    5d78:	02 c0       	rjmp	.+4      	; 0x5d7e <vfscanf+0x124>
    5d7a:	e1 2c       	mov	r14, r1
    5d7c:	f1 2c       	mov	r15, r1
    5d7e:	3e 36       	cpi	r19, 0x6E	; 110
    5d80:	49 f4       	brne	.+18     	; 0x5d94 <vfscanf+0x13a>
    5d82:	f6 01       	movw	r30, r12
    5d84:	46 81       	ldd	r20, Z+6	; 0x06
    5d86:	57 81       	ldd	r21, Z+7	; 0x07
    5d88:	60 e0       	ldi	r22, 0x00	; 0
    5d8a:	70 e0       	ldi	r23, 0x00	; 0
    5d8c:	2b 2d       	mov	r18, r11
    5d8e:	c7 01       	movw	r24, r14
    5d90:	b9 dc       	rcall	.-1678   	; 0x5704 <putval>
    5d92:	6f cf       	rjmp	.-290    	; 0x5c72 <vfscanf+0x18>
    5d94:	33 36       	cpi	r19, 0x63	; 99
    5d96:	a1 f4       	brne	.+40     	; 0x5dc0 <vfscanf+0x166>
    5d98:	b1 fc       	sbrc	r11, 1
    5d9a:	02 c0       	rjmp	.+4      	; 0x5da0 <vfscanf+0x146>
    5d9c:	01 e0       	ldi	r16, 0x01	; 1
    5d9e:	10 e0       	ldi	r17, 0x00	; 0
    5da0:	c6 01       	movw	r24, r12
    5da2:	47 d5       	rcall	.+2702   	; 0x6832 <fgetc>
    5da4:	97 fd       	sbrc	r25, 7
    5da6:	70 c0       	rjmp	.+224    	; 0x5e88 <vfscanf+0x22e>
    5da8:	e1 14       	cp	r14, r1
    5daa:	f1 04       	cpc	r15, r1
    5dac:	29 f0       	breq	.+10     	; 0x5db8 <vfscanf+0x15e>
    5dae:	f7 01       	movw	r30, r14
    5db0:	80 83       	st	Z, r24
    5db2:	c7 01       	movw	r24, r14
    5db4:	01 96       	adiw	r24, 0x01	; 1
    5db6:	7c 01       	movw	r14, r24
    5db8:	01 50       	subi	r16, 0x01	; 1
    5dba:	11 09       	sbc	r17, r1
    5dbc:	89 f7       	brne	.-30     	; 0x5da0 <vfscanf+0x146>
    5dbe:	60 c0       	rjmp	.+192    	; 0x5e80 <vfscanf+0x226>
    5dc0:	3b 35       	cpi	r19, 0x5B	; 91
    5dc2:	51 f4       	brne	.+20     	; 0x5dd8 <vfscanf+0x17e>
    5dc4:	92 01       	movw	r18, r4
    5dc6:	a7 01       	movw	r20, r14
    5dc8:	b8 01       	movw	r22, r16
    5dca:	c6 01       	movw	r24, r12
    5dcc:	63 dd       	rcall	.-1338   	; 0x5894 <conv_brk>
    5dce:	2c 01       	movw	r4, r24
    5dd0:	89 2b       	or	r24, r25
    5dd2:	09 f0       	breq	.+2      	; 0x5dd6 <vfscanf+0x17c>
    5dd4:	55 c0       	rjmp	.+170    	; 0x5e80 <vfscanf+0x226>
    5dd6:	4f c0       	rjmp	.+158    	; 0x5e76 <vfscanf+0x21c>
    5dd8:	c6 01       	movw	r24, r12
    5dda:	39 83       	std	Y+1, r19	; 0x01
    5ddc:	bf dc       	rcall	.-1666   	; 0x575c <skip_spaces>
    5dde:	39 81       	ldd	r19, Y+1	; 0x01
    5de0:	97 fd       	sbrc	r25, 7
    5de2:	52 c0       	rjmp	.+164    	; 0x5e88 <vfscanf+0x22e>
    5de4:	3f 36       	cpi	r19, 0x6F	; 111
    5de6:	c1 f1       	breq	.+112    	; 0x5e58 <vfscanf+0x1fe>
    5de8:	40 f4       	brcc	.+16     	; 0x5dfa <vfscanf+0x1a0>
    5dea:	34 36       	cpi	r19, 0x64	; 100
    5dec:	89 f1       	breq	.+98     	; 0x5e50 <vfscanf+0x1f6>
    5dee:	39 36       	cpi	r19, 0x69	; 105
    5df0:	b1 f1       	breq	.+108    	; 0x5e5e <vfscanf+0x204>
    5df2:	38 35       	cpi	r19, 0x58	; 88
    5df4:	09 f0       	breq	.+2      	; 0x5df8 <vfscanf+0x19e>
    5df6:	39 c0       	rjmp	.+114    	; 0x5e6a <vfscanf+0x210>
    5df8:	27 c0       	rjmp	.+78     	; 0x5e48 <vfscanf+0x1ee>
    5dfa:	33 37       	cpi	r19, 0x73	; 115
    5dfc:	a1 f0       	breq	.+40     	; 0x5e26 <vfscanf+0x1cc>
    5dfe:	18 f4       	brcc	.+6      	; 0x5e06 <vfscanf+0x1ac>
    5e00:	30 37       	cpi	r19, 0x70	; 112
    5e02:	11 f1       	breq	.+68     	; 0x5e48 <vfscanf+0x1ee>
    5e04:	32 c0       	rjmp	.+100    	; 0x5e6a <vfscanf+0x210>
    5e06:	35 37       	cpi	r19, 0x75	; 117
    5e08:	19 f1       	breq	.+70     	; 0x5e50 <vfscanf+0x1f6>
    5e0a:	38 37       	cpi	r19, 0x78	; 120
    5e0c:	e9 f0       	breq	.+58     	; 0x5e48 <vfscanf+0x1ee>
    5e0e:	2d c0       	rjmp	.+90     	; 0x5e6a <vfscanf+0x210>
    5e10:	e1 14       	cp	r14, r1
    5e12:	f1 04       	cpc	r15, r1
    5e14:	29 f0       	breq	.+10     	; 0x5e20 <vfscanf+0x1c6>
    5e16:	f7 01       	movw	r30, r14
    5e18:	60 82       	st	Z, r6
    5e1a:	c7 01       	movw	r24, r14
    5e1c:	01 96       	adiw	r24, 0x01	; 1
    5e1e:	7c 01       	movw	r14, r24
    5e20:	01 50       	subi	r16, 0x01	; 1
    5e22:	11 09       	sbc	r17, r1
    5e24:	59 f0       	breq	.+22     	; 0x5e3c <vfscanf+0x1e2>
    5e26:	c6 01       	movw	r24, r12
    5e28:	04 d5       	rcall	.+2568   	; 0x6832 <fgetc>
    5e2a:	3c 01       	movw	r6, r24
    5e2c:	97 fd       	sbrc	r25, 7
    5e2e:	06 c0       	rjmp	.+12     	; 0x5e3c <vfscanf+0x1e2>
    5e30:	c1 d4       	rcall	.+2434   	; 0x67b4 <isspace>
    5e32:	89 2b       	or	r24, r25
    5e34:	69 f3       	breq	.-38     	; 0x5e10 <vfscanf+0x1b6>
    5e36:	b6 01       	movw	r22, r12
    5e38:	c3 01       	movw	r24, r6
    5e3a:	9c d5       	rcall	.+2872   	; 0x6974 <ungetc>
    5e3c:	e1 14       	cp	r14, r1
    5e3e:	f1 04       	cpc	r15, r1
    5e40:	f9 f0       	breq	.+62     	; 0x5e80 <vfscanf+0x226>
    5e42:	f7 01       	movw	r30, r14
    5e44:	10 82       	st	Z, r1
    5e46:	1c c0       	rjmp	.+56     	; 0x5e80 <vfscanf+0x226>
    5e48:	fb 2d       	mov	r31, r11
    5e4a:	f0 64       	ori	r31, 0x40	; 64
    5e4c:	bf 2e       	mov	r11, r31
    5e4e:	07 c0       	rjmp	.+14     	; 0x5e5e <vfscanf+0x204>
    5e50:	8b 2d       	mov	r24, r11
    5e52:	80 62       	ori	r24, 0x20	; 32
    5e54:	b8 2e       	mov	r11, r24
    5e56:	03 c0       	rjmp	.+6      	; 0x5e5e <vfscanf+0x204>
    5e58:	9b 2d       	mov	r25, r11
    5e5a:	90 61       	ori	r25, 0x10	; 16
    5e5c:	b9 2e       	mov	r11, r25
    5e5e:	2b 2d       	mov	r18, r11
    5e60:	a7 01       	movw	r20, r14
    5e62:	b8 01       	movw	r22, r16
    5e64:	c6 01       	movw	r24, r12
    5e66:	93 dc       	rcall	.-1754   	; 0x578e <conv_int>
    5e68:	04 c0       	rjmp	.+8      	; 0x5e72 <vfscanf+0x218>
    5e6a:	a7 01       	movw	r20, r14
    5e6c:	b8 01       	movw	r22, r16
    5e6e:	c6 01       	movw	r24, r12
    5e70:	b9 dd       	rcall	.-1166   	; 0x59e4 <conv_flt>
    5e72:	81 11       	cpse	r24, r1
    5e74:	05 c0       	rjmp	.+10     	; 0x5e80 <vfscanf+0x226>
    5e76:	f6 01       	movw	r30, r12
    5e78:	83 81       	ldd	r24, Z+3	; 0x03
    5e7a:	80 73       	andi	r24, 0x30	; 48
    5e7c:	29 f4       	brne	.+10     	; 0x5e88 <vfscanf+0x22e>
    5e7e:	06 c0       	rjmp	.+12     	; 0x5e8c <vfscanf+0x232>
    5e80:	b0 fc       	sbrc	r11, 0
    5e82:	f7 ce       	rjmp	.-530    	; 0x5c72 <vfscanf+0x18>
    5e84:	a3 94       	inc	r10
    5e86:	f5 ce       	rjmp	.-534    	; 0x5c72 <vfscanf+0x18>
    5e88:	aa 20       	and	r10, r10
    5e8a:	19 f0       	breq	.+6      	; 0x5e92 <vfscanf+0x238>
    5e8c:	8a 2d       	mov	r24, r10
    5e8e:	90 e0       	ldi	r25, 0x00	; 0
    5e90:	02 c0       	rjmp	.+4      	; 0x5e96 <vfscanf+0x23c>
    5e92:	8f ef       	ldi	r24, 0xFF	; 255
    5e94:	9f ef       	ldi	r25, 0xFF	; 255
    5e96:	21 96       	adiw	r28, 0x01	; 1
    5e98:	e0 e1       	ldi	r30, 0x10	; 16
    5e9a:	9f c0       	rjmp	.+318    	; 0x5fda <__epilogue_restores__+0x4>

00005e9c <__udivmodqi4>:
    5e9c:	99 1b       	sub	r25, r25
    5e9e:	79 e0       	ldi	r23, 0x09	; 9
    5ea0:	04 c0       	rjmp	.+8      	; 0x5eaa <__udivmodqi4_ep>

00005ea2 <__udivmodqi4_loop>:
    5ea2:	99 1f       	adc	r25, r25
    5ea4:	96 17       	cp	r25, r22
    5ea6:	08 f0       	brcs	.+2      	; 0x5eaa <__udivmodqi4_ep>
    5ea8:	96 1b       	sub	r25, r22

00005eaa <__udivmodqi4_ep>:
    5eaa:	88 1f       	adc	r24, r24
    5eac:	7a 95       	dec	r23
    5eae:	c9 f7       	brne	.-14     	; 0x5ea2 <__udivmodqi4_loop>
    5eb0:	80 95       	com	r24
    5eb2:	08 95       	ret

00005eb4 <__udivmodhi4>:
    5eb4:	aa 1b       	sub	r26, r26
    5eb6:	bb 1b       	sub	r27, r27
    5eb8:	51 e1       	ldi	r21, 0x11	; 17
    5eba:	07 c0       	rjmp	.+14     	; 0x5eca <__udivmodhi4_ep>

00005ebc <__udivmodhi4_loop>:
    5ebc:	aa 1f       	adc	r26, r26
    5ebe:	bb 1f       	adc	r27, r27
    5ec0:	a6 17       	cp	r26, r22
    5ec2:	b7 07       	cpc	r27, r23
    5ec4:	10 f0       	brcs	.+4      	; 0x5eca <__udivmodhi4_ep>
    5ec6:	a6 1b       	sub	r26, r22
    5ec8:	b7 0b       	sbc	r27, r23

00005eca <__udivmodhi4_ep>:
    5eca:	88 1f       	adc	r24, r24
    5ecc:	99 1f       	adc	r25, r25
    5ece:	5a 95       	dec	r21
    5ed0:	a9 f7       	brne	.-22     	; 0x5ebc <__udivmodhi4_loop>
    5ed2:	80 95       	com	r24
    5ed4:	90 95       	com	r25
    5ed6:	bc 01       	movw	r22, r24
    5ed8:	cd 01       	movw	r24, r26
    5eda:	08 95       	ret

00005edc <__divmodhi4>:
    5edc:	97 fb       	bst	r25, 7
    5ede:	07 2e       	mov	r0, r23
    5ee0:	16 f4       	brtc	.+4      	; 0x5ee6 <__divmodhi4+0xa>
    5ee2:	00 94       	com	r0
    5ee4:	06 d0       	rcall	.+12     	; 0x5ef2 <__divmodhi4_neg1>
    5ee6:	77 fd       	sbrc	r23, 7
    5ee8:	08 d0       	rcall	.+16     	; 0x5efa <__divmodhi4_neg2>
    5eea:	e4 df       	rcall	.-56     	; 0x5eb4 <__udivmodhi4>
    5eec:	07 fc       	sbrc	r0, 7
    5eee:	05 d0       	rcall	.+10     	; 0x5efa <__divmodhi4_neg2>
    5ef0:	3e f4       	brtc	.+14     	; 0x5f00 <__divmodhi4_exit>

00005ef2 <__divmodhi4_neg1>:
    5ef2:	90 95       	com	r25
    5ef4:	81 95       	neg	r24
    5ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ef8:	08 95       	ret

00005efa <__divmodhi4_neg2>:
    5efa:	70 95       	com	r23
    5efc:	61 95       	neg	r22
    5efe:	7f 4f       	sbci	r23, 0xFF	; 255

00005f00 <__divmodhi4_exit>:
    5f00:	08 95       	ret

00005f02 <__udivmodsi4>:
    5f02:	a1 e2       	ldi	r26, 0x21	; 33
    5f04:	1a 2e       	mov	r1, r26
    5f06:	aa 1b       	sub	r26, r26
    5f08:	bb 1b       	sub	r27, r27
    5f0a:	fd 01       	movw	r30, r26
    5f0c:	0d c0       	rjmp	.+26     	; 0x5f28 <__udivmodsi4_ep>

00005f0e <__udivmodsi4_loop>:
    5f0e:	aa 1f       	adc	r26, r26
    5f10:	bb 1f       	adc	r27, r27
    5f12:	ee 1f       	adc	r30, r30
    5f14:	ff 1f       	adc	r31, r31
    5f16:	a2 17       	cp	r26, r18
    5f18:	b3 07       	cpc	r27, r19
    5f1a:	e4 07       	cpc	r30, r20
    5f1c:	f5 07       	cpc	r31, r21
    5f1e:	20 f0       	brcs	.+8      	; 0x5f28 <__udivmodsi4_ep>
    5f20:	a2 1b       	sub	r26, r18
    5f22:	b3 0b       	sbc	r27, r19
    5f24:	e4 0b       	sbc	r30, r20
    5f26:	f5 0b       	sbc	r31, r21

00005f28 <__udivmodsi4_ep>:
    5f28:	66 1f       	adc	r22, r22
    5f2a:	77 1f       	adc	r23, r23
    5f2c:	88 1f       	adc	r24, r24
    5f2e:	99 1f       	adc	r25, r25
    5f30:	1a 94       	dec	r1
    5f32:	69 f7       	brne	.-38     	; 0x5f0e <__udivmodsi4_loop>
    5f34:	60 95       	com	r22
    5f36:	70 95       	com	r23
    5f38:	80 95       	com	r24
    5f3a:	90 95       	com	r25
    5f3c:	9b 01       	movw	r18, r22
    5f3e:	ac 01       	movw	r20, r24
    5f40:	bd 01       	movw	r22, r26
    5f42:	cf 01       	movw	r24, r30
    5f44:	08 95       	ret

00005f46 <__divmodsi4>:
    5f46:	05 2e       	mov	r0, r21
    5f48:	97 fb       	bst	r25, 7
    5f4a:	16 f4       	brtc	.+4      	; 0x5f50 <__divmodsi4+0xa>
    5f4c:	00 94       	com	r0
    5f4e:	0f d0       	rcall	.+30     	; 0x5f6e <__negsi2>
    5f50:	57 fd       	sbrc	r21, 7
    5f52:	05 d0       	rcall	.+10     	; 0x5f5e <__divmodsi4_neg2>
    5f54:	d6 df       	rcall	.-84     	; 0x5f02 <__udivmodsi4>
    5f56:	07 fc       	sbrc	r0, 7
    5f58:	02 d0       	rcall	.+4      	; 0x5f5e <__divmodsi4_neg2>
    5f5a:	46 f4       	brtc	.+16     	; 0x5f6c <__divmodsi4_exit>
    5f5c:	08 c0       	rjmp	.+16     	; 0x5f6e <__negsi2>

00005f5e <__divmodsi4_neg2>:
    5f5e:	50 95       	com	r21
    5f60:	40 95       	com	r20
    5f62:	30 95       	com	r19
    5f64:	21 95       	neg	r18
    5f66:	3f 4f       	sbci	r19, 0xFF	; 255
    5f68:	4f 4f       	sbci	r20, 0xFF	; 255
    5f6a:	5f 4f       	sbci	r21, 0xFF	; 255

00005f6c <__divmodsi4_exit>:
    5f6c:	08 95       	ret

00005f6e <__negsi2>:
    5f6e:	90 95       	com	r25
    5f70:	80 95       	com	r24
    5f72:	70 95       	com	r23
    5f74:	61 95       	neg	r22
    5f76:	7f 4f       	sbci	r23, 0xFF	; 255
    5f78:	8f 4f       	sbci	r24, 0xFF	; 255
    5f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f7c:	08 95       	ret

00005f7e <__tablejump2__>:
    5f7e:	ee 0f       	add	r30, r30
    5f80:	ff 1f       	adc	r31, r31
    5f82:	05 90       	lpm	r0, Z+
    5f84:	f4 91       	lpm	r31, Z
    5f86:	e0 2d       	mov	r30, r0
    5f88:	09 94       	ijmp

00005f8a <__muluhisi3>:
    5f8a:	40 d0       	rcall	.+128    	; 0x600c <__umulhisi3>
    5f8c:	a5 9f       	mul	r26, r21
    5f8e:	90 0d       	add	r25, r0
    5f90:	b4 9f       	mul	r27, r20
    5f92:	90 0d       	add	r25, r0
    5f94:	a4 9f       	mul	r26, r20
    5f96:	80 0d       	add	r24, r0
    5f98:	91 1d       	adc	r25, r1
    5f9a:	11 24       	eor	r1, r1
    5f9c:	08 95       	ret

00005f9e <__prologue_saves__>:
    5f9e:	2f 92       	push	r2
    5fa0:	3f 92       	push	r3
    5fa2:	4f 92       	push	r4
    5fa4:	5f 92       	push	r5
    5fa6:	6f 92       	push	r6
    5fa8:	7f 92       	push	r7
    5faa:	8f 92       	push	r8
    5fac:	9f 92       	push	r9
    5fae:	af 92       	push	r10
    5fb0:	bf 92       	push	r11
    5fb2:	cf 92       	push	r12
    5fb4:	df 92       	push	r13
    5fb6:	ef 92       	push	r14
    5fb8:	ff 92       	push	r15
    5fba:	0f 93       	push	r16
    5fbc:	1f 93       	push	r17
    5fbe:	cf 93       	push	r28
    5fc0:	df 93       	push	r29
    5fc2:	cd b7       	in	r28, 0x3d	; 61
    5fc4:	de b7       	in	r29, 0x3e	; 62
    5fc6:	ca 1b       	sub	r28, r26
    5fc8:	db 0b       	sbc	r29, r27
    5fca:	0f b6       	in	r0, 0x3f	; 63
    5fcc:	f8 94       	cli
    5fce:	de bf       	out	0x3e, r29	; 62
    5fd0:	0f be       	out	0x3f, r0	; 63
    5fd2:	cd bf       	out	0x3d, r28	; 61
    5fd4:	09 94       	ijmp

00005fd6 <__epilogue_restores__>:
    5fd6:	2a 88       	ldd	r2, Y+18	; 0x12
    5fd8:	39 88       	ldd	r3, Y+17	; 0x11
    5fda:	48 88       	ldd	r4, Y+16	; 0x10
    5fdc:	5f 84       	ldd	r5, Y+15	; 0x0f
    5fde:	6e 84       	ldd	r6, Y+14	; 0x0e
    5fe0:	7d 84       	ldd	r7, Y+13	; 0x0d
    5fe2:	8c 84       	ldd	r8, Y+12	; 0x0c
    5fe4:	9b 84       	ldd	r9, Y+11	; 0x0b
    5fe6:	aa 84       	ldd	r10, Y+10	; 0x0a
    5fe8:	b9 84       	ldd	r11, Y+9	; 0x09
    5fea:	c8 84       	ldd	r12, Y+8	; 0x08
    5fec:	df 80       	ldd	r13, Y+7	; 0x07
    5fee:	ee 80       	ldd	r14, Y+6	; 0x06
    5ff0:	fd 80       	ldd	r15, Y+5	; 0x05
    5ff2:	0c 81       	ldd	r16, Y+4	; 0x04
    5ff4:	1b 81       	ldd	r17, Y+3	; 0x03
    5ff6:	aa 81       	ldd	r26, Y+2	; 0x02
    5ff8:	b9 81       	ldd	r27, Y+1	; 0x01
    5ffa:	ce 0f       	add	r28, r30
    5ffc:	d1 1d       	adc	r29, r1
    5ffe:	0f b6       	in	r0, 0x3f	; 63
    6000:	f8 94       	cli
    6002:	de bf       	out	0x3e, r29	; 62
    6004:	0f be       	out	0x3f, r0	; 63
    6006:	cd bf       	out	0x3d, r28	; 61
    6008:	ed 01       	movw	r28, r26
    600a:	08 95       	ret

0000600c <__umulhisi3>:
    600c:	a2 9f       	mul	r26, r18
    600e:	b0 01       	movw	r22, r0
    6010:	b3 9f       	mul	r27, r19
    6012:	c0 01       	movw	r24, r0
    6014:	a3 9f       	mul	r26, r19
    6016:	70 0d       	add	r23, r0
    6018:	81 1d       	adc	r24, r1
    601a:	11 24       	eor	r1, r1
    601c:	91 1d       	adc	r25, r1
    601e:	b2 9f       	mul	r27, r18
    6020:	70 0d       	add	r23, r0
    6022:	81 1d       	adc	r24, r1
    6024:	11 24       	eor	r1, r1
    6026:	91 1d       	adc	r25, r1
    6028:	08 95       	ret

0000602a <__subsf3>:
    602a:	50 58       	subi	r21, 0x80	; 128

0000602c <__addsf3>:
    602c:	bb 27       	eor	r27, r27
    602e:	aa 27       	eor	r26, r26
    6030:	0e d0       	rcall	.+28     	; 0x604e <__addsf3x>
    6032:	b1 c1       	rjmp	.+866    	; 0x6396 <__fp_round>
    6034:	a2 d1       	rcall	.+836    	; 0x637a <__fp_pscA>
    6036:	30 f0       	brcs	.+12     	; 0x6044 <__addsf3+0x18>
    6038:	a7 d1       	rcall	.+846    	; 0x6388 <__fp_pscB>
    603a:	20 f0       	brcs	.+8      	; 0x6044 <__addsf3+0x18>
    603c:	31 f4       	brne	.+12     	; 0x604a <__addsf3+0x1e>
    603e:	9f 3f       	cpi	r25, 0xFF	; 255
    6040:	11 f4       	brne	.+4      	; 0x6046 <__addsf3+0x1a>
    6042:	1e f4       	brtc	.+6      	; 0x604a <__addsf3+0x1e>
    6044:	97 c1       	rjmp	.+814    	; 0x6374 <__fp_nan>
    6046:	0e f4       	brtc	.+2      	; 0x604a <__addsf3+0x1e>
    6048:	e0 95       	com	r30
    604a:	e7 fb       	bst	r30, 7
    604c:	64 c1       	rjmp	.+712    	; 0x6316 <__fp_inf>

0000604e <__addsf3x>:
    604e:	e9 2f       	mov	r30, r25
    6050:	b3 d1       	rcall	.+870    	; 0x63b8 <__fp_split3>
    6052:	80 f3       	brcs	.-32     	; 0x6034 <__addsf3+0x8>
    6054:	ba 17       	cp	r27, r26
    6056:	62 07       	cpc	r22, r18
    6058:	73 07       	cpc	r23, r19
    605a:	84 07       	cpc	r24, r20
    605c:	95 07       	cpc	r25, r21
    605e:	18 f0       	brcs	.+6      	; 0x6066 <__addsf3x+0x18>
    6060:	71 f4       	brne	.+28     	; 0x607e <__addsf3x+0x30>
    6062:	9e f5       	brtc	.+102    	; 0x60ca <__addsf3x+0x7c>
    6064:	e2 c1       	rjmp	.+964    	; 0x642a <__fp_zero>
    6066:	0e f4       	brtc	.+2      	; 0x606a <__addsf3x+0x1c>
    6068:	e0 95       	com	r30
    606a:	0b 2e       	mov	r0, r27
    606c:	ba 2f       	mov	r27, r26
    606e:	a0 2d       	mov	r26, r0
    6070:	0b 01       	movw	r0, r22
    6072:	b9 01       	movw	r22, r18
    6074:	90 01       	movw	r18, r0
    6076:	0c 01       	movw	r0, r24
    6078:	ca 01       	movw	r24, r20
    607a:	a0 01       	movw	r20, r0
    607c:	11 24       	eor	r1, r1
    607e:	ff 27       	eor	r31, r31
    6080:	59 1b       	sub	r21, r25
    6082:	99 f0       	breq	.+38     	; 0x60aa <__addsf3x+0x5c>
    6084:	59 3f       	cpi	r21, 0xF9	; 249
    6086:	50 f4       	brcc	.+20     	; 0x609c <__addsf3x+0x4e>
    6088:	50 3e       	cpi	r21, 0xE0	; 224
    608a:	68 f1       	brcs	.+90     	; 0x60e6 <__addsf3x+0x98>
    608c:	1a 16       	cp	r1, r26
    608e:	f0 40       	sbci	r31, 0x00	; 0
    6090:	a2 2f       	mov	r26, r18
    6092:	23 2f       	mov	r18, r19
    6094:	34 2f       	mov	r19, r20
    6096:	44 27       	eor	r20, r20
    6098:	58 5f       	subi	r21, 0xF8	; 248
    609a:	f3 cf       	rjmp	.-26     	; 0x6082 <__addsf3x+0x34>
    609c:	46 95       	lsr	r20
    609e:	37 95       	ror	r19
    60a0:	27 95       	ror	r18
    60a2:	a7 95       	ror	r26
    60a4:	f0 40       	sbci	r31, 0x00	; 0
    60a6:	53 95       	inc	r21
    60a8:	c9 f7       	brne	.-14     	; 0x609c <__addsf3x+0x4e>
    60aa:	7e f4       	brtc	.+30     	; 0x60ca <__addsf3x+0x7c>
    60ac:	1f 16       	cp	r1, r31
    60ae:	ba 0b       	sbc	r27, r26
    60b0:	62 0b       	sbc	r22, r18
    60b2:	73 0b       	sbc	r23, r19
    60b4:	84 0b       	sbc	r24, r20
    60b6:	ba f0       	brmi	.+46     	; 0x60e6 <__addsf3x+0x98>
    60b8:	91 50       	subi	r25, 0x01	; 1
    60ba:	a1 f0       	breq	.+40     	; 0x60e4 <__addsf3x+0x96>
    60bc:	ff 0f       	add	r31, r31
    60be:	bb 1f       	adc	r27, r27
    60c0:	66 1f       	adc	r22, r22
    60c2:	77 1f       	adc	r23, r23
    60c4:	88 1f       	adc	r24, r24
    60c6:	c2 f7       	brpl	.-16     	; 0x60b8 <__addsf3x+0x6a>
    60c8:	0e c0       	rjmp	.+28     	; 0x60e6 <__addsf3x+0x98>
    60ca:	ba 0f       	add	r27, r26
    60cc:	62 1f       	adc	r22, r18
    60ce:	73 1f       	adc	r23, r19
    60d0:	84 1f       	adc	r24, r20
    60d2:	48 f4       	brcc	.+18     	; 0x60e6 <__addsf3x+0x98>
    60d4:	87 95       	ror	r24
    60d6:	77 95       	ror	r23
    60d8:	67 95       	ror	r22
    60da:	b7 95       	ror	r27
    60dc:	f7 95       	ror	r31
    60de:	9e 3f       	cpi	r25, 0xFE	; 254
    60e0:	08 f0       	brcs	.+2      	; 0x60e4 <__addsf3x+0x96>
    60e2:	b3 cf       	rjmp	.-154    	; 0x604a <__addsf3+0x1e>
    60e4:	93 95       	inc	r25
    60e6:	88 0f       	add	r24, r24
    60e8:	08 f0       	brcs	.+2      	; 0x60ec <__addsf3x+0x9e>
    60ea:	99 27       	eor	r25, r25
    60ec:	ee 0f       	add	r30, r30
    60ee:	97 95       	ror	r25
    60f0:	87 95       	ror	r24
    60f2:	08 95       	ret

000060f4 <__cmpsf2>:
    60f4:	ec d0       	rcall	.+472    	; 0x62ce <__fp_cmp>
    60f6:	08 f4       	brcc	.+2      	; 0x60fa <__cmpsf2+0x6>
    60f8:	81 e0       	ldi	r24, 0x01	; 1
    60fa:	08 95       	ret

000060fc <__divsf3>:
    60fc:	0c d0       	rcall	.+24     	; 0x6116 <__divsf3x>
    60fe:	4b c1       	rjmp	.+662    	; 0x6396 <__fp_round>
    6100:	43 d1       	rcall	.+646    	; 0x6388 <__fp_pscB>
    6102:	40 f0       	brcs	.+16     	; 0x6114 <__divsf3+0x18>
    6104:	3a d1       	rcall	.+628    	; 0x637a <__fp_pscA>
    6106:	30 f0       	brcs	.+12     	; 0x6114 <__divsf3+0x18>
    6108:	21 f4       	brne	.+8      	; 0x6112 <__divsf3+0x16>
    610a:	5f 3f       	cpi	r21, 0xFF	; 255
    610c:	19 f0       	breq	.+6      	; 0x6114 <__divsf3+0x18>
    610e:	03 c1       	rjmp	.+518    	; 0x6316 <__fp_inf>
    6110:	51 11       	cpse	r21, r1
    6112:	8c c1       	rjmp	.+792    	; 0x642c <__fp_szero>
    6114:	2f c1       	rjmp	.+606    	; 0x6374 <__fp_nan>

00006116 <__divsf3x>:
    6116:	50 d1       	rcall	.+672    	; 0x63b8 <__fp_split3>
    6118:	98 f3       	brcs	.-26     	; 0x6100 <__divsf3+0x4>

0000611a <__divsf3_pse>:
    611a:	99 23       	and	r25, r25
    611c:	c9 f3       	breq	.-14     	; 0x6110 <__divsf3+0x14>
    611e:	55 23       	and	r21, r21
    6120:	b1 f3       	breq	.-20     	; 0x610e <__divsf3+0x12>
    6122:	95 1b       	sub	r25, r21
    6124:	55 0b       	sbc	r21, r21
    6126:	bb 27       	eor	r27, r27
    6128:	aa 27       	eor	r26, r26
    612a:	62 17       	cp	r22, r18
    612c:	73 07       	cpc	r23, r19
    612e:	84 07       	cpc	r24, r20
    6130:	38 f0       	brcs	.+14     	; 0x6140 <__divsf3_pse+0x26>
    6132:	9f 5f       	subi	r25, 0xFF	; 255
    6134:	5f 4f       	sbci	r21, 0xFF	; 255
    6136:	22 0f       	add	r18, r18
    6138:	33 1f       	adc	r19, r19
    613a:	44 1f       	adc	r20, r20
    613c:	aa 1f       	adc	r26, r26
    613e:	a9 f3       	breq	.-22     	; 0x612a <__divsf3_pse+0x10>
    6140:	33 d0       	rcall	.+102    	; 0x61a8 <__divsf3_pse+0x8e>
    6142:	0e 2e       	mov	r0, r30
    6144:	3a f0       	brmi	.+14     	; 0x6154 <__divsf3_pse+0x3a>
    6146:	e0 e8       	ldi	r30, 0x80	; 128
    6148:	30 d0       	rcall	.+96     	; 0x61aa <__divsf3_pse+0x90>
    614a:	91 50       	subi	r25, 0x01	; 1
    614c:	50 40       	sbci	r21, 0x00	; 0
    614e:	e6 95       	lsr	r30
    6150:	00 1c       	adc	r0, r0
    6152:	ca f7       	brpl	.-14     	; 0x6146 <__divsf3_pse+0x2c>
    6154:	29 d0       	rcall	.+82     	; 0x61a8 <__divsf3_pse+0x8e>
    6156:	fe 2f       	mov	r31, r30
    6158:	27 d0       	rcall	.+78     	; 0x61a8 <__divsf3_pse+0x8e>
    615a:	66 0f       	add	r22, r22
    615c:	77 1f       	adc	r23, r23
    615e:	88 1f       	adc	r24, r24
    6160:	bb 1f       	adc	r27, r27
    6162:	26 17       	cp	r18, r22
    6164:	37 07       	cpc	r19, r23
    6166:	48 07       	cpc	r20, r24
    6168:	ab 07       	cpc	r26, r27
    616a:	b0 e8       	ldi	r27, 0x80	; 128
    616c:	09 f0       	breq	.+2      	; 0x6170 <__divsf3_pse+0x56>
    616e:	bb 0b       	sbc	r27, r27
    6170:	80 2d       	mov	r24, r0
    6172:	bf 01       	movw	r22, r30
    6174:	ff 27       	eor	r31, r31
    6176:	93 58       	subi	r25, 0x83	; 131
    6178:	5f 4f       	sbci	r21, 0xFF	; 255
    617a:	2a f0       	brmi	.+10     	; 0x6186 <__divsf3_pse+0x6c>
    617c:	9e 3f       	cpi	r25, 0xFE	; 254
    617e:	51 05       	cpc	r21, r1
    6180:	68 f0       	brcs	.+26     	; 0x619c <__divsf3_pse+0x82>
    6182:	c9 c0       	rjmp	.+402    	; 0x6316 <__fp_inf>
    6184:	53 c1       	rjmp	.+678    	; 0x642c <__fp_szero>
    6186:	5f 3f       	cpi	r21, 0xFF	; 255
    6188:	ec f3       	brlt	.-6      	; 0x6184 <__divsf3_pse+0x6a>
    618a:	98 3e       	cpi	r25, 0xE8	; 232
    618c:	dc f3       	brlt	.-10     	; 0x6184 <__divsf3_pse+0x6a>
    618e:	86 95       	lsr	r24
    6190:	77 95       	ror	r23
    6192:	67 95       	ror	r22
    6194:	b7 95       	ror	r27
    6196:	f7 95       	ror	r31
    6198:	9f 5f       	subi	r25, 0xFF	; 255
    619a:	c9 f7       	brne	.-14     	; 0x618e <__divsf3_pse+0x74>
    619c:	88 0f       	add	r24, r24
    619e:	91 1d       	adc	r25, r1
    61a0:	96 95       	lsr	r25
    61a2:	87 95       	ror	r24
    61a4:	97 f9       	bld	r25, 7
    61a6:	08 95       	ret
    61a8:	e1 e0       	ldi	r30, 0x01	; 1
    61aa:	66 0f       	add	r22, r22
    61ac:	77 1f       	adc	r23, r23
    61ae:	88 1f       	adc	r24, r24
    61b0:	bb 1f       	adc	r27, r27
    61b2:	62 17       	cp	r22, r18
    61b4:	73 07       	cpc	r23, r19
    61b6:	84 07       	cpc	r24, r20
    61b8:	ba 07       	cpc	r27, r26
    61ba:	20 f0       	brcs	.+8      	; 0x61c4 <__divsf3_pse+0xaa>
    61bc:	62 1b       	sub	r22, r18
    61be:	73 0b       	sbc	r23, r19
    61c0:	84 0b       	sbc	r24, r20
    61c2:	ba 0b       	sbc	r27, r26
    61c4:	ee 1f       	adc	r30, r30
    61c6:	88 f7       	brcc	.-30     	; 0x61aa <__divsf3_pse+0x90>
    61c8:	e0 95       	com	r30
    61ca:	08 95       	ret

000061cc <__fixsfsi>:
    61cc:	04 d0       	rcall	.+8      	; 0x61d6 <__fixunssfsi>
    61ce:	68 94       	set
    61d0:	b1 11       	cpse	r27, r1
    61d2:	2c c1       	rjmp	.+600    	; 0x642c <__fp_szero>
    61d4:	08 95       	ret

000061d6 <__fixunssfsi>:
    61d6:	f8 d0       	rcall	.+496    	; 0x63c8 <__fp_splitA>
    61d8:	88 f0       	brcs	.+34     	; 0x61fc <__fixunssfsi+0x26>
    61da:	9f 57       	subi	r25, 0x7F	; 127
    61dc:	90 f0       	brcs	.+36     	; 0x6202 <__fixunssfsi+0x2c>
    61de:	b9 2f       	mov	r27, r25
    61e0:	99 27       	eor	r25, r25
    61e2:	b7 51       	subi	r27, 0x17	; 23
    61e4:	a0 f0       	brcs	.+40     	; 0x620e <__fixunssfsi+0x38>
    61e6:	d1 f0       	breq	.+52     	; 0x621c <__fixunssfsi+0x46>
    61e8:	66 0f       	add	r22, r22
    61ea:	77 1f       	adc	r23, r23
    61ec:	88 1f       	adc	r24, r24
    61ee:	99 1f       	adc	r25, r25
    61f0:	1a f0       	brmi	.+6      	; 0x61f8 <__fixunssfsi+0x22>
    61f2:	ba 95       	dec	r27
    61f4:	c9 f7       	brne	.-14     	; 0x61e8 <__fixunssfsi+0x12>
    61f6:	12 c0       	rjmp	.+36     	; 0x621c <__fixunssfsi+0x46>
    61f8:	b1 30       	cpi	r27, 0x01	; 1
    61fa:	81 f0       	breq	.+32     	; 0x621c <__fixunssfsi+0x46>
    61fc:	16 d1       	rcall	.+556    	; 0x642a <__fp_zero>
    61fe:	b1 e0       	ldi	r27, 0x01	; 1
    6200:	08 95       	ret
    6202:	13 c1       	rjmp	.+550    	; 0x642a <__fp_zero>
    6204:	67 2f       	mov	r22, r23
    6206:	78 2f       	mov	r23, r24
    6208:	88 27       	eor	r24, r24
    620a:	b8 5f       	subi	r27, 0xF8	; 248
    620c:	39 f0       	breq	.+14     	; 0x621c <__fixunssfsi+0x46>
    620e:	b9 3f       	cpi	r27, 0xF9	; 249
    6210:	cc f3       	brlt	.-14     	; 0x6204 <__fixunssfsi+0x2e>
    6212:	86 95       	lsr	r24
    6214:	77 95       	ror	r23
    6216:	67 95       	ror	r22
    6218:	b3 95       	inc	r27
    621a:	d9 f7       	brne	.-10     	; 0x6212 <__fixunssfsi+0x3c>
    621c:	3e f4       	brtc	.+14     	; 0x622c <__fixunssfsi+0x56>
    621e:	90 95       	com	r25
    6220:	80 95       	com	r24
    6222:	70 95       	com	r23
    6224:	61 95       	neg	r22
    6226:	7f 4f       	sbci	r23, 0xFF	; 255
    6228:	8f 4f       	sbci	r24, 0xFF	; 255
    622a:	9f 4f       	sbci	r25, 0xFF	; 255
    622c:	08 95       	ret

0000622e <__floatunsisf>:
    622e:	e8 94       	clt
    6230:	09 c0       	rjmp	.+18     	; 0x6244 <__floatsisf+0x12>

00006232 <__floatsisf>:
    6232:	97 fb       	bst	r25, 7
    6234:	3e f4       	brtc	.+14     	; 0x6244 <__floatsisf+0x12>
    6236:	90 95       	com	r25
    6238:	80 95       	com	r24
    623a:	70 95       	com	r23
    623c:	61 95       	neg	r22
    623e:	7f 4f       	sbci	r23, 0xFF	; 255
    6240:	8f 4f       	sbci	r24, 0xFF	; 255
    6242:	9f 4f       	sbci	r25, 0xFF	; 255
    6244:	99 23       	and	r25, r25
    6246:	a9 f0       	breq	.+42     	; 0x6272 <__floatsisf+0x40>
    6248:	f9 2f       	mov	r31, r25
    624a:	96 e9       	ldi	r25, 0x96	; 150
    624c:	bb 27       	eor	r27, r27
    624e:	93 95       	inc	r25
    6250:	f6 95       	lsr	r31
    6252:	87 95       	ror	r24
    6254:	77 95       	ror	r23
    6256:	67 95       	ror	r22
    6258:	b7 95       	ror	r27
    625a:	f1 11       	cpse	r31, r1
    625c:	f8 cf       	rjmp	.-16     	; 0x624e <__floatsisf+0x1c>
    625e:	fa f4       	brpl	.+62     	; 0x629e <__floatsisf+0x6c>
    6260:	bb 0f       	add	r27, r27
    6262:	11 f4       	brne	.+4      	; 0x6268 <__floatsisf+0x36>
    6264:	60 ff       	sbrs	r22, 0
    6266:	1b c0       	rjmp	.+54     	; 0x629e <__floatsisf+0x6c>
    6268:	6f 5f       	subi	r22, 0xFF	; 255
    626a:	7f 4f       	sbci	r23, 0xFF	; 255
    626c:	8f 4f       	sbci	r24, 0xFF	; 255
    626e:	9f 4f       	sbci	r25, 0xFF	; 255
    6270:	16 c0       	rjmp	.+44     	; 0x629e <__floatsisf+0x6c>
    6272:	88 23       	and	r24, r24
    6274:	11 f0       	breq	.+4      	; 0x627a <__floatsisf+0x48>
    6276:	96 e9       	ldi	r25, 0x96	; 150
    6278:	11 c0       	rjmp	.+34     	; 0x629c <__floatsisf+0x6a>
    627a:	77 23       	and	r23, r23
    627c:	21 f0       	breq	.+8      	; 0x6286 <__floatsisf+0x54>
    627e:	9e e8       	ldi	r25, 0x8E	; 142
    6280:	87 2f       	mov	r24, r23
    6282:	76 2f       	mov	r23, r22
    6284:	05 c0       	rjmp	.+10     	; 0x6290 <__floatsisf+0x5e>
    6286:	66 23       	and	r22, r22
    6288:	71 f0       	breq	.+28     	; 0x62a6 <__floatsisf+0x74>
    628a:	96 e8       	ldi	r25, 0x86	; 134
    628c:	86 2f       	mov	r24, r22
    628e:	70 e0       	ldi	r23, 0x00	; 0
    6290:	60 e0       	ldi	r22, 0x00	; 0
    6292:	2a f0       	brmi	.+10     	; 0x629e <__floatsisf+0x6c>
    6294:	9a 95       	dec	r25
    6296:	66 0f       	add	r22, r22
    6298:	77 1f       	adc	r23, r23
    629a:	88 1f       	adc	r24, r24
    629c:	da f7       	brpl	.-10     	; 0x6294 <__floatsisf+0x62>
    629e:	88 0f       	add	r24, r24
    62a0:	96 95       	lsr	r25
    62a2:	87 95       	ror	r24
    62a4:	97 f9       	bld	r25, 7
    62a6:	08 95       	ret

000062a8 <floor>:
    62a8:	a9 d0       	rcall	.+338    	; 0x63fc <__fp_trunc>
    62aa:	80 f0       	brcs	.+32     	; 0x62cc <floor+0x24>
    62ac:	9f 37       	cpi	r25, 0x7F	; 127
    62ae:	40 f4       	brcc	.+16     	; 0x62c0 <floor+0x18>
    62b0:	91 11       	cpse	r25, r1
    62b2:	0e f0       	brts	.+2      	; 0x62b6 <floor+0xe>
    62b4:	bb c0       	rjmp	.+374    	; 0x642c <__fp_szero>
    62b6:	60 e0       	ldi	r22, 0x00	; 0
    62b8:	70 e0       	ldi	r23, 0x00	; 0
    62ba:	80 e8       	ldi	r24, 0x80	; 128
    62bc:	9f eb       	ldi	r25, 0xBF	; 191
    62be:	08 95       	ret
    62c0:	26 f4       	brtc	.+8      	; 0x62ca <floor+0x22>
    62c2:	1b 16       	cp	r1, r27
    62c4:	61 1d       	adc	r22, r1
    62c6:	71 1d       	adc	r23, r1
    62c8:	81 1d       	adc	r24, r1
    62ca:	2b c0       	rjmp	.+86     	; 0x6322 <__fp_mintl>
    62cc:	45 c0       	rjmp	.+138    	; 0x6358 <__fp_mpack>

000062ce <__fp_cmp>:
    62ce:	99 0f       	add	r25, r25
    62d0:	00 08       	sbc	r0, r0
    62d2:	55 0f       	add	r21, r21
    62d4:	aa 0b       	sbc	r26, r26
    62d6:	e0 e8       	ldi	r30, 0x80	; 128
    62d8:	fe ef       	ldi	r31, 0xFE	; 254
    62da:	16 16       	cp	r1, r22
    62dc:	17 06       	cpc	r1, r23
    62de:	e8 07       	cpc	r30, r24
    62e0:	f9 07       	cpc	r31, r25
    62e2:	c0 f0       	brcs	.+48     	; 0x6314 <__fp_cmp+0x46>
    62e4:	12 16       	cp	r1, r18
    62e6:	13 06       	cpc	r1, r19
    62e8:	e4 07       	cpc	r30, r20
    62ea:	f5 07       	cpc	r31, r21
    62ec:	98 f0       	brcs	.+38     	; 0x6314 <__fp_cmp+0x46>
    62ee:	62 1b       	sub	r22, r18
    62f0:	73 0b       	sbc	r23, r19
    62f2:	84 0b       	sbc	r24, r20
    62f4:	95 0b       	sbc	r25, r21
    62f6:	39 f4       	brne	.+14     	; 0x6306 <__fp_cmp+0x38>
    62f8:	0a 26       	eor	r0, r26
    62fa:	61 f0       	breq	.+24     	; 0x6314 <__fp_cmp+0x46>
    62fc:	23 2b       	or	r18, r19
    62fe:	24 2b       	or	r18, r20
    6300:	25 2b       	or	r18, r21
    6302:	21 f4       	brne	.+8      	; 0x630c <__fp_cmp+0x3e>
    6304:	08 95       	ret
    6306:	0a 26       	eor	r0, r26
    6308:	09 f4       	brne	.+2      	; 0x630c <__fp_cmp+0x3e>
    630a:	a1 40       	sbci	r26, 0x01	; 1
    630c:	a6 95       	lsr	r26
    630e:	8f ef       	ldi	r24, 0xFF	; 255
    6310:	81 1d       	adc	r24, r1
    6312:	81 1d       	adc	r24, r1
    6314:	08 95       	ret

00006316 <__fp_inf>:
    6316:	97 f9       	bld	r25, 7
    6318:	9f 67       	ori	r25, 0x7F	; 127
    631a:	80 e8       	ldi	r24, 0x80	; 128
    631c:	70 e0       	ldi	r23, 0x00	; 0
    631e:	60 e0       	ldi	r22, 0x00	; 0
    6320:	08 95       	ret

00006322 <__fp_mintl>:
    6322:	88 23       	and	r24, r24
    6324:	71 f4       	brne	.+28     	; 0x6342 <__fp_mintl+0x20>
    6326:	77 23       	and	r23, r23
    6328:	21 f0       	breq	.+8      	; 0x6332 <__fp_mintl+0x10>
    632a:	98 50       	subi	r25, 0x08	; 8
    632c:	87 2b       	or	r24, r23
    632e:	76 2f       	mov	r23, r22
    6330:	07 c0       	rjmp	.+14     	; 0x6340 <__fp_mintl+0x1e>
    6332:	66 23       	and	r22, r22
    6334:	11 f4       	brne	.+4      	; 0x633a <__fp_mintl+0x18>
    6336:	99 27       	eor	r25, r25
    6338:	0d c0       	rjmp	.+26     	; 0x6354 <__fp_mintl+0x32>
    633a:	90 51       	subi	r25, 0x10	; 16
    633c:	86 2b       	or	r24, r22
    633e:	70 e0       	ldi	r23, 0x00	; 0
    6340:	60 e0       	ldi	r22, 0x00	; 0
    6342:	2a f0       	brmi	.+10     	; 0x634e <__fp_mintl+0x2c>
    6344:	9a 95       	dec	r25
    6346:	66 0f       	add	r22, r22
    6348:	77 1f       	adc	r23, r23
    634a:	88 1f       	adc	r24, r24
    634c:	da f7       	brpl	.-10     	; 0x6344 <__fp_mintl+0x22>
    634e:	88 0f       	add	r24, r24
    6350:	96 95       	lsr	r25
    6352:	87 95       	ror	r24
    6354:	97 f9       	bld	r25, 7
    6356:	08 95       	ret

00006358 <__fp_mpack>:
    6358:	9f 3f       	cpi	r25, 0xFF	; 255
    635a:	31 f0       	breq	.+12     	; 0x6368 <__fp_mpack_finite+0xc>

0000635c <__fp_mpack_finite>:
    635c:	91 50       	subi	r25, 0x01	; 1
    635e:	20 f4       	brcc	.+8      	; 0x6368 <__fp_mpack_finite+0xc>
    6360:	87 95       	ror	r24
    6362:	77 95       	ror	r23
    6364:	67 95       	ror	r22
    6366:	b7 95       	ror	r27
    6368:	88 0f       	add	r24, r24
    636a:	91 1d       	adc	r25, r1
    636c:	96 95       	lsr	r25
    636e:	87 95       	ror	r24
    6370:	97 f9       	bld	r25, 7
    6372:	08 95       	ret

00006374 <__fp_nan>:
    6374:	9f ef       	ldi	r25, 0xFF	; 255
    6376:	80 ec       	ldi	r24, 0xC0	; 192
    6378:	08 95       	ret

0000637a <__fp_pscA>:
    637a:	00 24       	eor	r0, r0
    637c:	0a 94       	dec	r0
    637e:	16 16       	cp	r1, r22
    6380:	17 06       	cpc	r1, r23
    6382:	18 06       	cpc	r1, r24
    6384:	09 06       	cpc	r0, r25
    6386:	08 95       	ret

00006388 <__fp_pscB>:
    6388:	00 24       	eor	r0, r0
    638a:	0a 94       	dec	r0
    638c:	12 16       	cp	r1, r18
    638e:	13 06       	cpc	r1, r19
    6390:	14 06       	cpc	r1, r20
    6392:	05 06       	cpc	r0, r21
    6394:	08 95       	ret

00006396 <__fp_round>:
    6396:	09 2e       	mov	r0, r25
    6398:	03 94       	inc	r0
    639a:	00 0c       	add	r0, r0
    639c:	11 f4       	brne	.+4      	; 0x63a2 <__fp_round+0xc>
    639e:	88 23       	and	r24, r24
    63a0:	52 f0       	brmi	.+20     	; 0x63b6 <__fp_round+0x20>
    63a2:	bb 0f       	add	r27, r27
    63a4:	40 f4       	brcc	.+16     	; 0x63b6 <__fp_round+0x20>
    63a6:	bf 2b       	or	r27, r31
    63a8:	11 f4       	brne	.+4      	; 0x63ae <__fp_round+0x18>
    63aa:	60 ff       	sbrs	r22, 0
    63ac:	04 c0       	rjmp	.+8      	; 0x63b6 <__fp_round+0x20>
    63ae:	6f 5f       	subi	r22, 0xFF	; 255
    63b0:	7f 4f       	sbci	r23, 0xFF	; 255
    63b2:	8f 4f       	sbci	r24, 0xFF	; 255
    63b4:	9f 4f       	sbci	r25, 0xFF	; 255
    63b6:	08 95       	ret

000063b8 <__fp_split3>:
    63b8:	57 fd       	sbrc	r21, 7
    63ba:	90 58       	subi	r25, 0x80	; 128
    63bc:	44 0f       	add	r20, r20
    63be:	55 1f       	adc	r21, r21
    63c0:	59 f0       	breq	.+22     	; 0x63d8 <__fp_splitA+0x10>
    63c2:	5f 3f       	cpi	r21, 0xFF	; 255
    63c4:	71 f0       	breq	.+28     	; 0x63e2 <__fp_splitA+0x1a>
    63c6:	47 95       	ror	r20

000063c8 <__fp_splitA>:
    63c8:	88 0f       	add	r24, r24
    63ca:	97 fb       	bst	r25, 7
    63cc:	99 1f       	adc	r25, r25
    63ce:	61 f0       	breq	.+24     	; 0x63e8 <__fp_splitA+0x20>
    63d0:	9f 3f       	cpi	r25, 0xFF	; 255
    63d2:	79 f0       	breq	.+30     	; 0x63f2 <__fp_splitA+0x2a>
    63d4:	87 95       	ror	r24
    63d6:	08 95       	ret
    63d8:	12 16       	cp	r1, r18
    63da:	13 06       	cpc	r1, r19
    63dc:	14 06       	cpc	r1, r20
    63de:	55 1f       	adc	r21, r21
    63e0:	f2 cf       	rjmp	.-28     	; 0x63c6 <__fp_split3+0xe>
    63e2:	46 95       	lsr	r20
    63e4:	f1 df       	rcall	.-30     	; 0x63c8 <__fp_splitA>
    63e6:	08 c0       	rjmp	.+16     	; 0x63f8 <__fp_splitA+0x30>
    63e8:	16 16       	cp	r1, r22
    63ea:	17 06       	cpc	r1, r23
    63ec:	18 06       	cpc	r1, r24
    63ee:	99 1f       	adc	r25, r25
    63f0:	f1 cf       	rjmp	.-30     	; 0x63d4 <__fp_splitA+0xc>
    63f2:	86 95       	lsr	r24
    63f4:	71 05       	cpc	r23, r1
    63f6:	61 05       	cpc	r22, r1
    63f8:	08 94       	sec
    63fa:	08 95       	ret

000063fc <__fp_trunc>:
    63fc:	e5 df       	rcall	.-54     	; 0x63c8 <__fp_splitA>
    63fe:	a0 f0       	brcs	.+40     	; 0x6428 <__fp_trunc+0x2c>
    6400:	be e7       	ldi	r27, 0x7E	; 126
    6402:	b9 17       	cp	r27, r25
    6404:	88 f4       	brcc	.+34     	; 0x6428 <__fp_trunc+0x2c>
    6406:	bb 27       	eor	r27, r27
    6408:	9f 38       	cpi	r25, 0x8F	; 143
    640a:	60 f4       	brcc	.+24     	; 0x6424 <__fp_trunc+0x28>
    640c:	16 16       	cp	r1, r22
    640e:	b1 1d       	adc	r27, r1
    6410:	67 2f       	mov	r22, r23
    6412:	78 2f       	mov	r23, r24
    6414:	88 27       	eor	r24, r24
    6416:	98 5f       	subi	r25, 0xF8	; 248
    6418:	f7 cf       	rjmp	.-18     	; 0x6408 <__fp_trunc+0xc>
    641a:	86 95       	lsr	r24
    641c:	77 95       	ror	r23
    641e:	67 95       	ror	r22
    6420:	b1 1d       	adc	r27, r1
    6422:	93 95       	inc	r25
    6424:	96 39       	cpi	r25, 0x96	; 150
    6426:	c8 f3       	brcs	.-14     	; 0x641a <__fp_trunc+0x1e>
    6428:	08 95       	ret

0000642a <__fp_zero>:
    642a:	e8 94       	clt

0000642c <__fp_szero>:
    642c:	bb 27       	eor	r27, r27
    642e:	66 27       	eor	r22, r22
    6430:	77 27       	eor	r23, r23
    6432:	cb 01       	movw	r24, r22
    6434:	97 f9       	bld	r25, 7
    6436:	08 95       	ret

00006438 <__gesf2>:
    6438:	4a df       	rcall	.-364    	; 0x62ce <__fp_cmp>
    643a:	08 f4       	brcc	.+2      	; 0x643e <__gesf2+0x6>
    643c:	8f ef       	ldi	r24, 0xFF	; 255
    643e:	08 95       	ret

00006440 <__mulsf3>:
    6440:	0b d0       	rcall	.+22     	; 0x6458 <__mulsf3x>
    6442:	a9 cf       	rjmp	.-174    	; 0x6396 <__fp_round>
    6444:	9a df       	rcall	.-204    	; 0x637a <__fp_pscA>
    6446:	28 f0       	brcs	.+10     	; 0x6452 <__mulsf3+0x12>
    6448:	9f df       	rcall	.-194    	; 0x6388 <__fp_pscB>
    644a:	18 f0       	brcs	.+6      	; 0x6452 <__mulsf3+0x12>
    644c:	95 23       	and	r25, r21
    644e:	09 f0       	breq	.+2      	; 0x6452 <__mulsf3+0x12>
    6450:	62 cf       	rjmp	.-316    	; 0x6316 <__fp_inf>
    6452:	90 cf       	rjmp	.-224    	; 0x6374 <__fp_nan>
    6454:	11 24       	eor	r1, r1
    6456:	ea cf       	rjmp	.-44     	; 0x642c <__fp_szero>

00006458 <__mulsf3x>:
    6458:	af df       	rcall	.-162    	; 0x63b8 <__fp_split3>
    645a:	a0 f3       	brcs	.-24     	; 0x6444 <__mulsf3+0x4>

0000645c <__mulsf3_pse>:
    645c:	95 9f       	mul	r25, r21
    645e:	d1 f3       	breq	.-12     	; 0x6454 <__mulsf3+0x14>
    6460:	95 0f       	add	r25, r21
    6462:	50 e0       	ldi	r21, 0x00	; 0
    6464:	55 1f       	adc	r21, r21
    6466:	62 9f       	mul	r22, r18
    6468:	f0 01       	movw	r30, r0
    646a:	72 9f       	mul	r23, r18
    646c:	bb 27       	eor	r27, r27
    646e:	f0 0d       	add	r31, r0
    6470:	b1 1d       	adc	r27, r1
    6472:	63 9f       	mul	r22, r19
    6474:	aa 27       	eor	r26, r26
    6476:	f0 0d       	add	r31, r0
    6478:	b1 1d       	adc	r27, r1
    647a:	aa 1f       	adc	r26, r26
    647c:	64 9f       	mul	r22, r20
    647e:	66 27       	eor	r22, r22
    6480:	b0 0d       	add	r27, r0
    6482:	a1 1d       	adc	r26, r1
    6484:	66 1f       	adc	r22, r22
    6486:	82 9f       	mul	r24, r18
    6488:	22 27       	eor	r18, r18
    648a:	b0 0d       	add	r27, r0
    648c:	a1 1d       	adc	r26, r1
    648e:	62 1f       	adc	r22, r18
    6490:	73 9f       	mul	r23, r19
    6492:	b0 0d       	add	r27, r0
    6494:	a1 1d       	adc	r26, r1
    6496:	62 1f       	adc	r22, r18
    6498:	83 9f       	mul	r24, r19
    649a:	a0 0d       	add	r26, r0
    649c:	61 1d       	adc	r22, r1
    649e:	22 1f       	adc	r18, r18
    64a0:	74 9f       	mul	r23, r20
    64a2:	33 27       	eor	r19, r19
    64a4:	a0 0d       	add	r26, r0
    64a6:	61 1d       	adc	r22, r1
    64a8:	23 1f       	adc	r18, r19
    64aa:	84 9f       	mul	r24, r20
    64ac:	60 0d       	add	r22, r0
    64ae:	21 1d       	adc	r18, r1
    64b0:	82 2f       	mov	r24, r18
    64b2:	76 2f       	mov	r23, r22
    64b4:	6a 2f       	mov	r22, r26
    64b6:	11 24       	eor	r1, r1
    64b8:	9f 57       	subi	r25, 0x7F	; 127
    64ba:	50 40       	sbci	r21, 0x00	; 0
    64bc:	8a f0       	brmi	.+34     	; 0x64e0 <__mulsf3_pse+0x84>
    64be:	e1 f0       	breq	.+56     	; 0x64f8 <__mulsf3_pse+0x9c>
    64c0:	88 23       	and	r24, r24
    64c2:	4a f0       	brmi	.+18     	; 0x64d6 <__mulsf3_pse+0x7a>
    64c4:	ee 0f       	add	r30, r30
    64c6:	ff 1f       	adc	r31, r31
    64c8:	bb 1f       	adc	r27, r27
    64ca:	66 1f       	adc	r22, r22
    64cc:	77 1f       	adc	r23, r23
    64ce:	88 1f       	adc	r24, r24
    64d0:	91 50       	subi	r25, 0x01	; 1
    64d2:	50 40       	sbci	r21, 0x00	; 0
    64d4:	a9 f7       	brne	.-22     	; 0x64c0 <__mulsf3_pse+0x64>
    64d6:	9e 3f       	cpi	r25, 0xFE	; 254
    64d8:	51 05       	cpc	r21, r1
    64da:	70 f0       	brcs	.+28     	; 0x64f8 <__mulsf3_pse+0x9c>
    64dc:	1c cf       	rjmp	.-456    	; 0x6316 <__fp_inf>
    64de:	a6 cf       	rjmp	.-180    	; 0x642c <__fp_szero>
    64e0:	5f 3f       	cpi	r21, 0xFF	; 255
    64e2:	ec f3       	brlt	.-6      	; 0x64de <__mulsf3_pse+0x82>
    64e4:	98 3e       	cpi	r25, 0xE8	; 232
    64e6:	dc f3       	brlt	.-10     	; 0x64de <__mulsf3_pse+0x82>
    64e8:	86 95       	lsr	r24
    64ea:	77 95       	ror	r23
    64ec:	67 95       	ror	r22
    64ee:	b7 95       	ror	r27
    64f0:	f7 95       	ror	r31
    64f2:	e7 95       	ror	r30
    64f4:	9f 5f       	subi	r25, 0xFF	; 255
    64f6:	c1 f7       	brne	.-16     	; 0x64e8 <__mulsf3_pse+0x8c>
    64f8:	fe 2b       	or	r31, r30
    64fa:	88 0f       	add	r24, r24
    64fc:	91 1d       	adc	r25, r1
    64fe:	96 95       	lsr	r25
    6500:	87 95       	ror	r24
    6502:	97 f9       	bld	r25, 7
    6504:	08 95       	ret

00006506 <pow>:
    6506:	fa 01       	movw	r30, r20
    6508:	ee 0f       	add	r30, r30
    650a:	ff 1f       	adc	r31, r31
    650c:	30 96       	adiw	r30, 0x00	; 0
    650e:	21 05       	cpc	r18, r1
    6510:	31 05       	cpc	r19, r1
    6512:	99 f1       	breq	.+102    	; 0x657a <pow+0x74>
    6514:	61 15       	cp	r22, r1
    6516:	71 05       	cpc	r23, r1
    6518:	61 f4       	brne	.+24     	; 0x6532 <pow+0x2c>
    651a:	80 38       	cpi	r24, 0x80	; 128
    651c:	bf e3       	ldi	r27, 0x3F	; 63
    651e:	9b 07       	cpc	r25, r27
    6520:	49 f1       	breq	.+82     	; 0x6574 <pow+0x6e>
    6522:	68 94       	set
    6524:	90 38       	cpi	r25, 0x80	; 128
    6526:	81 05       	cpc	r24, r1
    6528:	61 f0       	breq	.+24     	; 0x6542 <pow+0x3c>
    652a:	80 38       	cpi	r24, 0x80	; 128
    652c:	bf ef       	ldi	r27, 0xFF	; 255
    652e:	9b 07       	cpc	r25, r27
    6530:	41 f0       	breq	.+16     	; 0x6542 <pow+0x3c>
    6532:	99 23       	and	r25, r25
    6534:	42 f5       	brpl	.+80     	; 0x6586 <pow+0x80>
    6536:	ff 3f       	cpi	r31, 0xFF	; 255
    6538:	e1 05       	cpc	r30, r1
    653a:	31 05       	cpc	r19, r1
    653c:	21 05       	cpc	r18, r1
    653e:	11 f1       	breq	.+68     	; 0x6584 <pow+0x7e>
    6540:	e8 94       	clt
    6542:	08 94       	sec
    6544:	e7 95       	ror	r30
    6546:	d9 01       	movw	r26, r18
    6548:	aa 23       	and	r26, r26
    654a:	29 f4       	brne	.+10     	; 0x6556 <pow+0x50>
    654c:	ab 2f       	mov	r26, r27
    654e:	be 2f       	mov	r27, r30
    6550:	f8 5f       	subi	r31, 0xF8	; 248
    6552:	d0 f3       	brcs	.-12     	; 0x6548 <pow+0x42>
    6554:	10 c0       	rjmp	.+32     	; 0x6576 <pow+0x70>
    6556:	ff 5f       	subi	r31, 0xFF	; 255
    6558:	70 f4       	brcc	.+28     	; 0x6576 <pow+0x70>
    655a:	a6 95       	lsr	r26
    655c:	e0 f7       	brcc	.-8      	; 0x6556 <pow+0x50>
    655e:	f7 39       	cpi	r31, 0x97	; 151
    6560:	50 f0       	brcs	.+20     	; 0x6576 <pow+0x70>
    6562:	19 f0       	breq	.+6      	; 0x656a <pow+0x64>
    6564:	ff 3a       	cpi	r31, 0xAF	; 175
    6566:	38 f4       	brcc	.+14     	; 0x6576 <pow+0x70>
    6568:	9f 77       	andi	r25, 0x7F	; 127
    656a:	9f 93       	push	r25
    656c:	0c d0       	rcall	.+24     	; 0x6586 <pow+0x80>
    656e:	0f 90       	pop	r0
    6570:	07 fc       	sbrc	r0, 7
    6572:	90 58       	subi	r25, 0x80	; 128
    6574:	08 95       	ret
    6576:	3e f0       	brts	.+14     	; 0x6586 <pow+0x80>
    6578:	fd ce       	rjmp	.-518    	; 0x6374 <__fp_nan>
    657a:	60 e0       	ldi	r22, 0x00	; 0
    657c:	70 e0       	ldi	r23, 0x00	; 0
    657e:	80 e8       	ldi	r24, 0x80	; 128
    6580:	9f e3       	ldi	r25, 0x3F	; 63
    6582:	08 95       	ret
    6584:	4f e7       	ldi	r20, 0x7F	; 127
    6586:	9f 77       	andi	r25, 0x7F	; 127
    6588:	5f 93       	push	r21
    658a:	4f 93       	push	r20
    658c:	3f 93       	push	r19
    658e:	2f 93       	push	r18
    6590:	9e d0       	rcall	.+316    	; 0x66ce <log>
    6592:	2f 91       	pop	r18
    6594:	3f 91       	pop	r19
    6596:	4f 91       	pop	r20
    6598:	5f 91       	pop	r21
    659a:	52 df       	rcall	.-348    	; 0x6440 <__mulsf3>
    659c:	05 c0       	rjmp	.+10     	; 0x65a8 <exp>
    659e:	19 f4       	brne	.+6      	; 0x65a6 <pow+0xa0>
    65a0:	0e f0       	brts	.+2      	; 0x65a4 <pow+0x9e>
    65a2:	b9 ce       	rjmp	.-654    	; 0x6316 <__fp_inf>
    65a4:	42 cf       	rjmp	.-380    	; 0x642a <__fp_zero>
    65a6:	e6 ce       	rjmp	.-564    	; 0x6374 <__fp_nan>

000065a8 <exp>:
    65a8:	0f df       	rcall	.-482    	; 0x63c8 <__fp_splitA>
    65aa:	c8 f3       	brcs	.-14     	; 0x659e <pow+0x98>
    65ac:	96 38       	cpi	r25, 0x86	; 134
    65ae:	c0 f7       	brcc	.-16     	; 0x65a0 <pow+0x9a>
    65b0:	07 f8       	bld	r0, 7
    65b2:	0f 92       	push	r0
    65b4:	e8 94       	clt
    65b6:	2b e3       	ldi	r18, 0x3B	; 59
    65b8:	3a ea       	ldi	r19, 0xAA	; 170
    65ba:	48 eb       	ldi	r20, 0xB8	; 184
    65bc:	5f e7       	ldi	r21, 0x7F	; 127
    65be:	4e df       	rcall	.-356    	; 0x645c <__mulsf3_pse>
    65c0:	0f 92       	push	r0
    65c2:	0f 92       	push	r0
    65c4:	0f 92       	push	r0
    65c6:	4d b7       	in	r20, 0x3d	; 61
    65c8:	5e b7       	in	r21, 0x3e	; 62
    65ca:	0f 92       	push	r0
    65cc:	c0 d0       	rcall	.+384    	; 0x674e <modf>
    65ce:	e2 e8       	ldi	r30, 0x82	; 130
    65d0:	f0 e0       	ldi	r31, 0x00	; 0
    65d2:	16 d0       	rcall	.+44     	; 0x6600 <__fp_powser>
    65d4:	4f 91       	pop	r20
    65d6:	5f 91       	pop	r21
    65d8:	ef 91       	pop	r30
    65da:	ff 91       	pop	r31
    65dc:	e5 95       	asr	r30
    65de:	ee 1f       	adc	r30, r30
    65e0:	ff 1f       	adc	r31, r31
    65e2:	49 f0       	breq	.+18     	; 0x65f6 <exp+0x4e>
    65e4:	fe 57       	subi	r31, 0x7E	; 126
    65e6:	e0 68       	ori	r30, 0x80	; 128
    65e8:	44 27       	eor	r20, r20
    65ea:	ee 0f       	add	r30, r30
    65ec:	44 1f       	adc	r20, r20
    65ee:	fa 95       	dec	r31
    65f0:	e1 f7       	brne	.-8      	; 0x65ea <exp+0x42>
    65f2:	41 95       	neg	r20
    65f4:	55 0b       	sbc	r21, r21
    65f6:	32 d0       	rcall	.+100    	; 0x665c <ldexp>
    65f8:	0f 90       	pop	r0
    65fa:	07 fe       	sbrs	r0, 7
    65fc:	26 c0       	rjmp	.+76     	; 0x664a <inverse>
    65fe:	08 95       	ret

00006600 <__fp_powser>:
    6600:	df 93       	push	r29
    6602:	cf 93       	push	r28
    6604:	1f 93       	push	r17
    6606:	0f 93       	push	r16
    6608:	ff 92       	push	r15
    660a:	ef 92       	push	r14
    660c:	df 92       	push	r13
    660e:	7b 01       	movw	r14, r22
    6610:	8c 01       	movw	r16, r24
    6612:	68 94       	set
    6614:	05 c0       	rjmp	.+10     	; 0x6620 <__fp_powser+0x20>
    6616:	da 2e       	mov	r13, r26
    6618:	ef 01       	movw	r28, r30
    661a:	1e df       	rcall	.-452    	; 0x6458 <__mulsf3x>
    661c:	fe 01       	movw	r30, r28
    661e:	e8 94       	clt
    6620:	a5 91       	lpm	r26, Z+
    6622:	25 91       	lpm	r18, Z+
    6624:	35 91       	lpm	r19, Z+
    6626:	45 91       	lpm	r20, Z+
    6628:	55 91       	lpm	r21, Z+
    662a:	ae f3       	brts	.-22     	; 0x6616 <__fp_powser+0x16>
    662c:	ef 01       	movw	r28, r30
    662e:	0f dd       	rcall	.-1506   	; 0x604e <__addsf3x>
    6630:	fe 01       	movw	r30, r28
    6632:	97 01       	movw	r18, r14
    6634:	a8 01       	movw	r20, r16
    6636:	da 94       	dec	r13
    6638:	79 f7       	brne	.-34     	; 0x6618 <__fp_powser+0x18>
    663a:	df 90       	pop	r13
    663c:	ef 90       	pop	r14
    663e:	ff 90       	pop	r15
    6640:	0f 91       	pop	r16
    6642:	1f 91       	pop	r17
    6644:	cf 91       	pop	r28
    6646:	df 91       	pop	r29
    6648:	08 95       	ret

0000664a <inverse>:
    664a:	9b 01       	movw	r18, r22
    664c:	ac 01       	movw	r20, r24
    664e:	60 e0       	ldi	r22, 0x00	; 0
    6650:	70 e0       	ldi	r23, 0x00	; 0
    6652:	80 e8       	ldi	r24, 0x80	; 128
    6654:	9f e3       	ldi	r25, 0x3F	; 63
    6656:	52 cd       	rjmp	.-1372   	; 0x60fc <__divsf3>
    6658:	5e ce       	rjmp	.-836    	; 0x6316 <__fp_inf>
    665a:	7e ce       	rjmp	.-772    	; 0x6358 <__fp_mpack>

0000665c <ldexp>:
    665c:	b5 de       	rcall	.-662    	; 0x63c8 <__fp_splitA>
    665e:	e8 f3       	brcs	.-6      	; 0x665a <inverse+0x10>
    6660:	99 23       	and	r25, r25
    6662:	d9 f3       	breq	.-10     	; 0x665a <inverse+0x10>
    6664:	94 0f       	add	r25, r20
    6666:	51 1d       	adc	r21, r1
    6668:	bb f3       	brvs	.-18     	; 0x6658 <inverse+0xe>
    666a:	91 50       	subi	r25, 0x01	; 1
    666c:	50 40       	sbci	r21, 0x00	; 0
    666e:	94 f0       	brlt	.+36     	; 0x6694 <ldexp+0x38>
    6670:	59 f0       	breq	.+22     	; 0x6688 <ldexp+0x2c>
    6672:	88 23       	and	r24, r24
    6674:	32 f0       	brmi	.+12     	; 0x6682 <ldexp+0x26>
    6676:	66 0f       	add	r22, r22
    6678:	77 1f       	adc	r23, r23
    667a:	88 1f       	adc	r24, r24
    667c:	91 50       	subi	r25, 0x01	; 1
    667e:	50 40       	sbci	r21, 0x00	; 0
    6680:	c1 f7       	brne	.-16     	; 0x6672 <ldexp+0x16>
    6682:	9e 3f       	cpi	r25, 0xFE	; 254
    6684:	51 05       	cpc	r21, r1
    6686:	44 f7       	brge	.-48     	; 0x6658 <inverse+0xe>
    6688:	88 0f       	add	r24, r24
    668a:	91 1d       	adc	r25, r1
    668c:	96 95       	lsr	r25
    668e:	87 95       	ror	r24
    6690:	97 f9       	bld	r25, 7
    6692:	08 95       	ret
    6694:	5f 3f       	cpi	r21, 0xFF	; 255
    6696:	ac f0       	brlt	.+42     	; 0x66c2 <ldexp+0x66>
    6698:	98 3e       	cpi	r25, 0xE8	; 232
    669a:	9c f0       	brlt	.+38     	; 0x66c2 <ldexp+0x66>
    669c:	bb 27       	eor	r27, r27
    669e:	86 95       	lsr	r24
    66a0:	77 95       	ror	r23
    66a2:	67 95       	ror	r22
    66a4:	b7 95       	ror	r27
    66a6:	08 f4       	brcc	.+2      	; 0x66aa <ldexp+0x4e>
    66a8:	b1 60       	ori	r27, 0x01	; 1
    66aa:	93 95       	inc	r25
    66ac:	c1 f7       	brne	.-16     	; 0x669e <ldexp+0x42>
    66ae:	bb 0f       	add	r27, r27
    66b0:	58 f7       	brcc	.-42     	; 0x6688 <ldexp+0x2c>
    66b2:	11 f4       	brne	.+4      	; 0x66b8 <ldexp+0x5c>
    66b4:	60 ff       	sbrs	r22, 0
    66b6:	e8 cf       	rjmp	.-48     	; 0x6688 <ldexp+0x2c>
    66b8:	6f 5f       	subi	r22, 0xFF	; 255
    66ba:	7f 4f       	sbci	r23, 0xFF	; 255
    66bc:	8f 4f       	sbci	r24, 0xFF	; 255
    66be:	9f 4f       	sbci	r25, 0xFF	; 255
    66c0:	e3 cf       	rjmp	.-58     	; 0x6688 <ldexp+0x2c>
    66c2:	b4 ce       	rjmp	.-664    	; 0x642c <__fp_szero>
    66c4:	0e f0       	brts	.+2      	; 0x66c8 <ldexp+0x6c>
    66c6:	48 ce       	rjmp	.-880    	; 0x6358 <__fp_mpack>
    66c8:	55 ce       	rjmp	.-854    	; 0x6374 <__fp_nan>
    66ca:	68 94       	set
    66cc:	24 ce       	rjmp	.-952    	; 0x6316 <__fp_inf>

000066ce <log>:
    66ce:	7c de       	rcall	.-776    	; 0x63c8 <__fp_splitA>
    66d0:	c8 f3       	brcs	.-14     	; 0x66c4 <ldexp+0x68>
    66d2:	99 23       	and	r25, r25
    66d4:	d1 f3       	breq	.-12     	; 0x66ca <ldexp+0x6e>
    66d6:	c6 f3       	brts	.-16     	; 0x66c8 <ldexp+0x6c>
    66d8:	df 93       	push	r29
    66da:	cf 93       	push	r28
    66dc:	1f 93       	push	r17
    66de:	0f 93       	push	r16
    66e0:	ff 92       	push	r15
    66e2:	c9 2f       	mov	r28, r25
    66e4:	dd 27       	eor	r29, r29
    66e6:	88 23       	and	r24, r24
    66e8:	2a f0       	brmi	.+10     	; 0x66f4 <log+0x26>
    66ea:	21 97       	sbiw	r28, 0x01	; 1
    66ec:	66 0f       	add	r22, r22
    66ee:	77 1f       	adc	r23, r23
    66f0:	88 1f       	adc	r24, r24
    66f2:	da f7       	brpl	.-10     	; 0x66ea <log+0x1c>
    66f4:	20 e0       	ldi	r18, 0x00	; 0
    66f6:	30 e0       	ldi	r19, 0x00	; 0
    66f8:	40 e8       	ldi	r20, 0x80	; 128
    66fa:	5f eb       	ldi	r21, 0xBF	; 191
    66fc:	9f e3       	ldi	r25, 0x3F	; 63
    66fe:	88 39       	cpi	r24, 0x98	; 152
    6700:	20 f0       	brcs	.+8      	; 0x670a <log+0x3c>
    6702:	80 3e       	cpi	r24, 0xE0	; 224
    6704:	30 f0       	brcs	.+12     	; 0x6712 <log+0x44>
    6706:	21 96       	adiw	r28, 0x01	; 1
    6708:	8f 77       	andi	r24, 0x7F	; 127
    670a:	90 dc       	rcall	.-1760   	; 0x602c <__addsf3>
    670c:	ea ea       	ldi	r30, 0xAA	; 170
    670e:	f0 e0       	ldi	r31, 0x00	; 0
    6710:	03 c0       	rjmp	.+6      	; 0x6718 <log+0x4a>
    6712:	8c dc       	rcall	.-1768   	; 0x602c <__addsf3>
    6714:	e7 ed       	ldi	r30, 0xD7	; 215
    6716:	f0 e0       	ldi	r31, 0x00	; 0
    6718:	73 df       	rcall	.-282    	; 0x6600 <__fp_powser>
    671a:	8b 01       	movw	r16, r22
    671c:	be 01       	movw	r22, r28
    671e:	ec 01       	movw	r28, r24
    6720:	fb 2e       	mov	r15, r27
    6722:	6f 57       	subi	r22, 0x7F	; 127
    6724:	71 09       	sbc	r23, r1
    6726:	75 95       	asr	r23
    6728:	77 1f       	adc	r23, r23
    672a:	88 0b       	sbc	r24, r24
    672c:	99 0b       	sbc	r25, r25
    672e:	81 dd       	rcall	.-1278   	; 0x6232 <__floatsisf>
    6730:	28 e1       	ldi	r18, 0x18	; 24
    6732:	32 e7       	ldi	r19, 0x72	; 114
    6734:	41 e3       	ldi	r20, 0x31	; 49
    6736:	5f e3       	ldi	r21, 0x3F	; 63
    6738:	8f de       	rcall	.-738    	; 0x6458 <__mulsf3x>
    673a:	af 2d       	mov	r26, r15
    673c:	98 01       	movw	r18, r16
    673e:	ae 01       	movw	r20, r28
    6740:	ff 90       	pop	r15
    6742:	0f 91       	pop	r16
    6744:	1f 91       	pop	r17
    6746:	cf 91       	pop	r28
    6748:	df 91       	pop	r29
    674a:	81 dc       	rcall	.-1790   	; 0x604e <__addsf3x>
    674c:	24 ce       	rjmp	.-952    	; 0x6396 <__fp_round>

0000674e <modf>:
    674e:	fa 01       	movw	r30, r20
    6750:	dc 01       	movw	r26, r24
    6752:	aa 0f       	add	r26, r26
    6754:	bb 1f       	adc	r27, r27
    6756:	9b 01       	movw	r18, r22
    6758:	ac 01       	movw	r20, r24
    675a:	bf 57       	subi	r27, 0x7F	; 127
    675c:	28 f4       	brcc	.+10     	; 0x6768 <modf+0x1a>
    675e:	22 27       	eor	r18, r18
    6760:	33 27       	eor	r19, r19
    6762:	44 27       	eor	r20, r20
    6764:	50 78       	andi	r21, 0x80	; 128
    6766:	1f c0       	rjmp	.+62     	; 0x67a6 <modf+0x58>
    6768:	b7 51       	subi	r27, 0x17	; 23
    676a:	88 f4       	brcc	.+34     	; 0x678e <modf+0x40>
    676c:	ab 2f       	mov	r26, r27
    676e:	00 24       	eor	r0, r0
    6770:	46 95       	lsr	r20
    6772:	37 95       	ror	r19
    6774:	27 95       	ror	r18
    6776:	01 1c       	adc	r0, r1
    6778:	a3 95       	inc	r26
    677a:	d2 f3       	brmi	.-12     	; 0x6770 <modf+0x22>
    677c:	00 20       	and	r0, r0
    677e:	69 f0       	breq	.+26     	; 0x679a <modf+0x4c>
    6780:	22 0f       	add	r18, r18
    6782:	33 1f       	adc	r19, r19
    6784:	44 1f       	adc	r20, r20
    6786:	b3 95       	inc	r27
    6788:	da f3       	brmi	.-10     	; 0x6780 <modf+0x32>
    678a:	0d d0       	rcall	.+26     	; 0x67a6 <modf+0x58>
    678c:	4e cc       	rjmp	.-1892   	; 0x602a <__subsf3>
    678e:	61 30       	cpi	r22, 0x01	; 1
    6790:	71 05       	cpc	r23, r1
    6792:	a0 e8       	ldi	r26, 0x80	; 128
    6794:	8a 07       	cpc	r24, r26
    6796:	b9 46       	sbci	r27, 0x69	; 105
    6798:	30 f4       	brcc	.+12     	; 0x67a6 <modf+0x58>
    679a:	9b 01       	movw	r18, r22
    679c:	ac 01       	movw	r20, r24
    679e:	66 27       	eor	r22, r22
    67a0:	77 27       	eor	r23, r23
    67a2:	88 27       	eor	r24, r24
    67a4:	90 78       	andi	r25, 0x80	; 128
    67a6:	30 96       	adiw	r30, 0x00	; 0
    67a8:	21 f0       	breq	.+8      	; 0x67b2 <modf+0x64>
    67aa:	20 83       	st	Z, r18
    67ac:	31 83       	std	Z+1, r19	; 0x01
    67ae:	42 83       	std	Z+2, r20	; 0x02
    67b0:	53 83       	std	Z+3, r21	; 0x03
    67b2:	08 95       	ret

000067b4 <isspace>:
    67b4:	91 11       	cpse	r25, r1
    67b6:	ba c2       	rjmp	.+1396   	; 0x6d2c <__ctype_isfalse>
    67b8:	80 32       	cpi	r24, 0x20	; 32
    67ba:	19 f0       	breq	.+6      	; 0x67c2 <isspace+0xe>
    67bc:	89 50       	subi	r24, 0x09	; 9
    67be:	85 50       	subi	r24, 0x05	; 5
    67c0:	d0 f7       	brcc	.-12     	; 0x67b6 <isspace+0x2>
    67c2:	08 95       	ret

000067c4 <tolower>:
    67c4:	91 11       	cpse	r25, r1
    67c6:	08 95       	ret
    67c8:	81 54       	subi	r24, 0x41	; 65
    67ca:	8a 51       	subi	r24, 0x1A	; 26
    67cc:	08 f4       	brcc	.+2      	; 0x67d0 <tolower+0xc>
    67ce:	80 5e       	subi	r24, 0xE0	; 224
    67d0:	85 5a       	subi	r24, 0xA5	; 165
    67d2:	08 95       	ret

000067d4 <strchr_P>:
    67d4:	fc 01       	movw	r30, r24
    67d6:	05 90       	lpm	r0, Z+
    67d8:	06 16       	cp	r0, r22
    67da:	21 f0       	breq	.+8      	; 0x67e4 <strchr_P+0x10>
    67dc:	00 20       	and	r0, r0
    67de:	d9 f7       	brne	.-10     	; 0x67d6 <strchr_P+0x2>
    67e0:	c0 01       	movw	r24, r0
    67e2:	08 95       	ret
    67e4:	31 97       	sbiw	r30, 0x01	; 1
    67e6:	cf 01       	movw	r24, r30
    67e8:	08 95       	ret

000067ea <memcmp>:
    67ea:	fb 01       	movw	r30, r22
    67ec:	dc 01       	movw	r26, r24
    67ee:	04 c0       	rjmp	.+8      	; 0x67f8 <memcmp+0xe>
    67f0:	8d 91       	ld	r24, X+
    67f2:	01 90       	ld	r0, Z+
    67f4:	80 19       	sub	r24, r0
    67f6:	21 f4       	brne	.+8      	; 0x6800 <memcmp+0x16>
    67f8:	41 50       	subi	r20, 0x01	; 1
    67fa:	50 40       	sbci	r21, 0x00	; 0
    67fc:	c8 f7       	brcc	.-14     	; 0x67f0 <memcmp+0x6>
    67fe:	88 1b       	sub	r24, r24
    6800:	99 0b       	sbc	r25, r25
    6802:	08 95       	ret

00006804 <memcpy>:
    6804:	fb 01       	movw	r30, r22
    6806:	dc 01       	movw	r26, r24
    6808:	02 c0       	rjmp	.+4      	; 0x680e <memcpy+0xa>
    680a:	01 90       	ld	r0, Z+
    680c:	0d 92       	st	X+, r0
    680e:	41 50       	subi	r20, 0x01	; 1
    6810:	50 40       	sbci	r21, 0x00	; 0
    6812:	d8 f7       	brcc	.-10     	; 0x680a <memcpy+0x6>
    6814:	08 95       	ret

00006816 <strncmp>:
    6816:	fb 01       	movw	r30, r22
    6818:	dc 01       	movw	r26, r24
    681a:	41 50       	subi	r20, 0x01	; 1
    681c:	50 40       	sbci	r21, 0x00	; 0
    681e:	30 f0       	brcs	.+12     	; 0x682c <strncmp+0x16>
    6820:	8d 91       	ld	r24, X+
    6822:	01 90       	ld	r0, Z+
    6824:	80 19       	sub	r24, r0
    6826:	19 f4       	brne	.+6      	; 0x682e <strncmp+0x18>
    6828:	00 20       	and	r0, r0
    682a:	b9 f7       	brne	.-18     	; 0x681a <strncmp+0x4>
    682c:	88 1b       	sub	r24, r24
    682e:	99 0b       	sbc	r25, r25
    6830:	08 95       	ret

00006832 <fgetc>:
    6832:	cf 93       	push	r28
    6834:	df 93       	push	r29
    6836:	ec 01       	movw	r28, r24
    6838:	2b 81       	ldd	r18, Y+3	; 0x03
    683a:	20 ff       	sbrs	r18, 0
    683c:	33 c0       	rjmp	.+102    	; 0x68a4 <fgetc+0x72>
    683e:	26 ff       	sbrs	r18, 6
    6840:	0a c0       	rjmp	.+20     	; 0x6856 <fgetc+0x24>
    6842:	2f 7b       	andi	r18, 0xBF	; 191
    6844:	2b 83       	std	Y+3, r18	; 0x03
    6846:	8e 81       	ldd	r24, Y+6	; 0x06
    6848:	9f 81       	ldd	r25, Y+7	; 0x07
    684a:	01 96       	adiw	r24, 0x01	; 1
    684c:	9f 83       	std	Y+7, r25	; 0x07
    684e:	8e 83       	std	Y+6, r24	; 0x06
    6850:	8a 81       	ldd	r24, Y+2	; 0x02
    6852:	90 e0       	ldi	r25, 0x00	; 0
    6854:	29 c0       	rjmp	.+82     	; 0x68a8 <fgetc+0x76>
    6856:	22 ff       	sbrs	r18, 2
    6858:	0f c0       	rjmp	.+30     	; 0x6878 <fgetc+0x46>
    685a:	e8 81       	ld	r30, Y
    685c:	f9 81       	ldd	r31, Y+1	; 0x01
    685e:	80 81       	ld	r24, Z
    6860:	08 2e       	mov	r0, r24
    6862:	00 0c       	add	r0, r0
    6864:	99 0b       	sbc	r25, r25
    6866:	00 97       	sbiw	r24, 0x00	; 0
    6868:	19 f4       	brne	.+6      	; 0x6870 <fgetc+0x3e>
    686a:	20 62       	ori	r18, 0x20	; 32
    686c:	2b 83       	std	Y+3, r18	; 0x03
    686e:	1a c0       	rjmp	.+52     	; 0x68a4 <fgetc+0x72>
    6870:	31 96       	adiw	r30, 0x01	; 1
    6872:	f9 83       	std	Y+1, r31	; 0x01
    6874:	e8 83       	st	Y, r30
    6876:	0e c0       	rjmp	.+28     	; 0x6894 <fgetc+0x62>
    6878:	ea 85       	ldd	r30, Y+10	; 0x0a
    687a:	fb 85       	ldd	r31, Y+11	; 0x0b
    687c:	09 95       	icall
    687e:	97 ff       	sbrs	r25, 7
    6880:	09 c0       	rjmp	.+18     	; 0x6894 <fgetc+0x62>
    6882:	2b 81       	ldd	r18, Y+3	; 0x03
    6884:	01 96       	adiw	r24, 0x01	; 1
    6886:	11 f0       	breq	.+4      	; 0x688c <fgetc+0x5a>
    6888:	80 e2       	ldi	r24, 0x20	; 32
    688a:	01 c0       	rjmp	.+2      	; 0x688e <fgetc+0x5c>
    688c:	80 e1       	ldi	r24, 0x10	; 16
    688e:	82 2b       	or	r24, r18
    6890:	8b 83       	std	Y+3, r24	; 0x03
    6892:	08 c0       	rjmp	.+16     	; 0x68a4 <fgetc+0x72>
    6894:	2e 81       	ldd	r18, Y+6	; 0x06
    6896:	3f 81       	ldd	r19, Y+7	; 0x07
    6898:	2f 5f       	subi	r18, 0xFF	; 255
    689a:	3f 4f       	sbci	r19, 0xFF	; 255
    689c:	3f 83       	std	Y+7, r19	; 0x07
    689e:	2e 83       	std	Y+6, r18	; 0x06
    68a0:	99 27       	eor	r25, r25
    68a2:	02 c0       	rjmp	.+4      	; 0x68a8 <fgetc+0x76>
    68a4:	8f ef       	ldi	r24, 0xFF	; 255
    68a6:	9f ef       	ldi	r25, 0xFF	; 255
    68a8:	df 91       	pop	r29
    68aa:	cf 91       	pop	r28
    68ac:	08 95       	ret

000068ae <snprintf>:
    68ae:	ae e0       	ldi	r26, 0x0E	; 14
    68b0:	b0 e0       	ldi	r27, 0x00	; 0
    68b2:	ec e5       	ldi	r30, 0x5C	; 92
    68b4:	f4 e3       	ldi	r31, 0x34	; 52
    68b6:	81 cb       	rjmp	.-2302   	; 0x5fba <__prologue_saves__+0x1c>
    68b8:	0d 89       	ldd	r16, Y+21	; 0x15
    68ba:	1e 89       	ldd	r17, Y+22	; 0x16
    68bc:	8f 89       	ldd	r24, Y+23	; 0x17
    68be:	98 8d       	ldd	r25, Y+24	; 0x18
    68c0:	26 e0       	ldi	r18, 0x06	; 6
    68c2:	2c 83       	std	Y+4, r18	; 0x04
    68c4:	1a 83       	std	Y+2, r17	; 0x02
    68c6:	09 83       	std	Y+1, r16	; 0x01
    68c8:	97 ff       	sbrs	r25, 7
    68ca:	02 c0       	rjmp	.+4      	; 0x68d0 <snprintf+0x22>
    68cc:	80 e0       	ldi	r24, 0x00	; 0
    68ce:	90 e8       	ldi	r25, 0x80	; 128
    68d0:	01 97       	sbiw	r24, 0x01	; 1
    68d2:	9e 83       	std	Y+6, r25	; 0x06
    68d4:	8d 83       	std	Y+5, r24	; 0x05
    68d6:	ae 01       	movw	r20, r28
    68d8:	45 5e       	subi	r20, 0xE5	; 229
    68da:	5f 4f       	sbci	r21, 0xFF	; 255
    68dc:	69 8d       	ldd	r22, Y+25	; 0x19
    68de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    68e0:	ce 01       	movw	r24, r28
    68e2:	01 96       	adiw	r24, 0x01	; 1
    68e4:	60 d0       	rcall	.+192    	; 0x69a6 <vfprintf>
    68e6:	4d 81       	ldd	r20, Y+5	; 0x05
    68e8:	5e 81       	ldd	r21, Y+6	; 0x06
    68ea:	57 fd       	sbrc	r21, 7
    68ec:	0a c0       	rjmp	.+20     	; 0x6902 <snprintf+0x54>
    68ee:	2f 81       	ldd	r18, Y+7	; 0x07
    68f0:	38 85       	ldd	r19, Y+8	; 0x08
    68f2:	42 17       	cp	r20, r18
    68f4:	53 07       	cpc	r21, r19
    68f6:	0c f4       	brge	.+2      	; 0x68fa <snprintf+0x4c>
    68f8:	9a 01       	movw	r18, r20
    68fa:	f8 01       	movw	r30, r16
    68fc:	e2 0f       	add	r30, r18
    68fe:	f3 1f       	adc	r31, r19
    6900:	10 82       	st	Z, r1
    6902:	2e 96       	adiw	r28, 0x0e	; 14
    6904:	e4 e0       	ldi	r30, 0x04	; 4
    6906:	75 cb       	rjmp	.-2326   	; 0x5ff2 <__epilogue_restores__+0x1c>

00006908 <sprintf>:
    6908:	ae e0       	ldi	r26, 0x0E	; 14
    690a:	b0 e0       	ldi	r27, 0x00	; 0
    690c:	e9 e8       	ldi	r30, 0x89	; 137
    690e:	f4 e3       	ldi	r31, 0x34	; 52
    6910:	54 cb       	rjmp	.-2392   	; 0x5fba <__prologue_saves__+0x1c>
    6912:	0d 89       	ldd	r16, Y+21	; 0x15
    6914:	1e 89       	ldd	r17, Y+22	; 0x16
    6916:	86 e0       	ldi	r24, 0x06	; 6
    6918:	8c 83       	std	Y+4, r24	; 0x04
    691a:	1a 83       	std	Y+2, r17	; 0x02
    691c:	09 83       	std	Y+1, r16	; 0x01
    691e:	8f ef       	ldi	r24, 0xFF	; 255
    6920:	9f e7       	ldi	r25, 0x7F	; 127
    6922:	9e 83       	std	Y+6, r25	; 0x06
    6924:	8d 83       	std	Y+5, r24	; 0x05
    6926:	ae 01       	movw	r20, r28
    6928:	47 5e       	subi	r20, 0xE7	; 231
    692a:	5f 4f       	sbci	r21, 0xFF	; 255
    692c:	6f 89       	ldd	r22, Y+23	; 0x17
    692e:	78 8d       	ldd	r23, Y+24	; 0x18
    6930:	ce 01       	movw	r24, r28
    6932:	01 96       	adiw	r24, 0x01	; 1
    6934:	38 d0       	rcall	.+112    	; 0x69a6 <vfprintf>
    6936:	2f 81       	ldd	r18, Y+7	; 0x07
    6938:	38 85       	ldd	r19, Y+8	; 0x08
    693a:	f8 01       	movw	r30, r16
    693c:	e2 0f       	add	r30, r18
    693e:	f3 1f       	adc	r31, r19
    6940:	10 82       	st	Z, r1
    6942:	2e 96       	adiw	r28, 0x0e	; 14
    6944:	e4 e0       	ldi	r30, 0x04	; 4
    6946:	55 cb       	rjmp	.-2390   	; 0x5ff2 <__epilogue_restores__+0x1c>

00006948 <sscanf>:
    6948:	ae e0       	ldi	r26, 0x0E	; 14
    694a:	b0 e0       	ldi	r27, 0x00	; 0
    694c:	e9 ea       	ldi	r30, 0xA9	; 169
    694e:	f4 e3       	ldi	r31, 0x34	; 52
    6950:	36 cb       	rjmp	.-2452   	; 0x5fbe <__prologue_saves__+0x20>
    6952:	85 e0       	ldi	r24, 0x05	; 5
    6954:	8c 83       	std	Y+4, r24	; 0x04
    6956:	8b 89       	ldd	r24, Y+19	; 0x13
    6958:	9c 89       	ldd	r25, Y+20	; 0x14
    695a:	9a 83       	std	Y+2, r25	; 0x02
    695c:	89 83       	std	Y+1, r24	; 0x01
    695e:	ae 01       	movw	r20, r28
    6960:	49 5e       	subi	r20, 0xE9	; 233
    6962:	5f 4f       	sbci	r21, 0xFF	; 255
    6964:	6d 89       	ldd	r22, Y+21	; 0x15
    6966:	7e 89       	ldd	r23, Y+22	; 0x16
    6968:	ce 01       	movw	r24, r28
    696a:	01 96       	adiw	r24, 0x01	; 1
    696c:	76 d9       	rcall	.-3348   	; 0x5c5a <vfscanf>
    696e:	2e 96       	adiw	r28, 0x0e	; 14
    6970:	e2 e0       	ldi	r30, 0x02	; 2
    6972:	41 cb       	rjmp	.-2430   	; 0x5ff6 <__epilogue_restores__+0x20>

00006974 <ungetc>:
    6974:	fb 01       	movw	r30, r22
    6976:	23 81       	ldd	r18, Z+3	; 0x03
    6978:	20 ff       	sbrs	r18, 0
    697a:	12 c0       	rjmp	.+36     	; 0x69a0 <ungetc+0x2c>
    697c:	26 fd       	sbrc	r18, 6
    697e:	10 c0       	rjmp	.+32     	; 0x69a0 <ungetc+0x2c>
    6980:	8f 3f       	cpi	r24, 0xFF	; 255
    6982:	3f ef       	ldi	r19, 0xFF	; 255
    6984:	93 07       	cpc	r25, r19
    6986:	61 f0       	breq	.+24     	; 0x69a0 <ungetc+0x2c>
    6988:	82 83       	std	Z+2, r24	; 0x02
    698a:	2f 7d       	andi	r18, 0xDF	; 223
    698c:	20 64       	ori	r18, 0x40	; 64
    698e:	23 83       	std	Z+3, r18	; 0x03
    6990:	26 81       	ldd	r18, Z+6	; 0x06
    6992:	37 81       	ldd	r19, Z+7	; 0x07
    6994:	21 50       	subi	r18, 0x01	; 1
    6996:	31 09       	sbc	r19, r1
    6998:	37 83       	std	Z+7, r19	; 0x07
    699a:	26 83       	std	Z+6, r18	; 0x06
    699c:	99 27       	eor	r25, r25
    699e:	08 95       	ret
    69a0:	8f ef       	ldi	r24, 0xFF	; 255
    69a2:	9f ef       	ldi	r25, 0xFF	; 255
    69a4:	08 95       	ret

000069a6 <vfprintf>:
    69a6:	ac e0       	ldi	r26, 0x0C	; 12
    69a8:	b0 e0       	ldi	r27, 0x00	; 0
    69aa:	e8 ed       	ldi	r30, 0xD8	; 216
    69ac:	f4 e3       	ldi	r31, 0x34	; 52
    69ae:	f7 ca       	rjmp	.-2578   	; 0x5f9e <__prologue_saves__>
    69b0:	7c 01       	movw	r14, r24
    69b2:	6b 01       	movw	r12, r22
    69b4:	8a 01       	movw	r16, r20
    69b6:	fc 01       	movw	r30, r24
    69b8:	17 82       	std	Z+7, r1	; 0x07
    69ba:	16 82       	std	Z+6, r1	; 0x06
    69bc:	83 81       	ldd	r24, Z+3	; 0x03
    69be:	81 ff       	sbrs	r24, 1
    69c0:	b0 c1       	rjmp	.+864    	; 0x6d22 <vfprintf+0x37c>
    69c2:	ce 01       	movw	r24, r28
    69c4:	01 96       	adiw	r24, 0x01	; 1
    69c6:	4c 01       	movw	r8, r24
    69c8:	f7 01       	movw	r30, r14
    69ca:	93 81       	ldd	r25, Z+3	; 0x03
    69cc:	f6 01       	movw	r30, r12
    69ce:	93 fd       	sbrc	r25, 3
    69d0:	85 91       	lpm	r24, Z+
    69d2:	93 ff       	sbrs	r25, 3
    69d4:	81 91       	ld	r24, Z+
    69d6:	6f 01       	movw	r12, r30
    69d8:	88 23       	and	r24, r24
    69da:	09 f4       	brne	.+2      	; 0x69de <vfprintf+0x38>
    69dc:	9e c1       	rjmp	.+828    	; 0x6d1a <vfprintf+0x374>
    69de:	85 32       	cpi	r24, 0x25	; 37
    69e0:	39 f4       	brne	.+14     	; 0x69f0 <vfprintf+0x4a>
    69e2:	93 fd       	sbrc	r25, 3
    69e4:	85 91       	lpm	r24, Z+
    69e6:	93 ff       	sbrs	r25, 3
    69e8:	81 91       	ld	r24, Z+
    69ea:	6f 01       	movw	r12, r30
    69ec:	85 32       	cpi	r24, 0x25	; 37
    69ee:	21 f4       	brne	.+8      	; 0x69f8 <vfprintf+0x52>
    69f0:	b7 01       	movw	r22, r14
    69f2:	90 e0       	ldi	r25, 0x00	; 0
    69f4:	b4 d1       	rcall	.+872    	; 0x6d5e <fputc>
    69f6:	e8 cf       	rjmp	.-48     	; 0x69c8 <vfprintf+0x22>
    69f8:	51 2c       	mov	r5, r1
    69fa:	31 2c       	mov	r3, r1
    69fc:	20 e0       	ldi	r18, 0x00	; 0
    69fe:	20 32       	cpi	r18, 0x20	; 32
    6a00:	a0 f4       	brcc	.+40     	; 0x6a2a <vfprintf+0x84>
    6a02:	8b 32       	cpi	r24, 0x2B	; 43
    6a04:	69 f0       	breq	.+26     	; 0x6a20 <vfprintf+0x7a>
    6a06:	30 f4       	brcc	.+12     	; 0x6a14 <vfprintf+0x6e>
    6a08:	80 32       	cpi	r24, 0x20	; 32
    6a0a:	59 f0       	breq	.+22     	; 0x6a22 <vfprintf+0x7c>
    6a0c:	83 32       	cpi	r24, 0x23	; 35
    6a0e:	69 f4       	brne	.+26     	; 0x6a2a <vfprintf+0x84>
    6a10:	20 61       	ori	r18, 0x10	; 16
    6a12:	2c c0       	rjmp	.+88     	; 0x6a6c <vfprintf+0xc6>
    6a14:	8d 32       	cpi	r24, 0x2D	; 45
    6a16:	39 f0       	breq	.+14     	; 0x6a26 <vfprintf+0x80>
    6a18:	80 33       	cpi	r24, 0x30	; 48
    6a1a:	39 f4       	brne	.+14     	; 0x6a2a <vfprintf+0x84>
    6a1c:	21 60       	ori	r18, 0x01	; 1
    6a1e:	26 c0       	rjmp	.+76     	; 0x6a6c <vfprintf+0xc6>
    6a20:	22 60       	ori	r18, 0x02	; 2
    6a22:	24 60       	ori	r18, 0x04	; 4
    6a24:	23 c0       	rjmp	.+70     	; 0x6a6c <vfprintf+0xc6>
    6a26:	28 60       	ori	r18, 0x08	; 8
    6a28:	21 c0       	rjmp	.+66     	; 0x6a6c <vfprintf+0xc6>
    6a2a:	27 fd       	sbrc	r18, 7
    6a2c:	27 c0       	rjmp	.+78     	; 0x6a7c <vfprintf+0xd6>
    6a2e:	30 ed       	ldi	r19, 0xD0	; 208
    6a30:	38 0f       	add	r19, r24
    6a32:	3a 30       	cpi	r19, 0x0A	; 10
    6a34:	78 f4       	brcc	.+30     	; 0x6a54 <vfprintf+0xae>
    6a36:	26 ff       	sbrs	r18, 6
    6a38:	06 c0       	rjmp	.+12     	; 0x6a46 <vfprintf+0xa0>
    6a3a:	fa e0       	ldi	r31, 0x0A	; 10
    6a3c:	5f 9e       	mul	r5, r31
    6a3e:	30 0d       	add	r19, r0
    6a40:	11 24       	eor	r1, r1
    6a42:	53 2e       	mov	r5, r19
    6a44:	13 c0       	rjmp	.+38     	; 0x6a6c <vfprintf+0xc6>
    6a46:	8a e0       	ldi	r24, 0x0A	; 10
    6a48:	38 9e       	mul	r3, r24
    6a4a:	30 0d       	add	r19, r0
    6a4c:	11 24       	eor	r1, r1
    6a4e:	33 2e       	mov	r3, r19
    6a50:	20 62       	ori	r18, 0x20	; 32
    6a52:	0c c0       	rjmp	.+24     	; 0x6a6c <vfprintf+0xc6>
    6a54:	8e 32       	cpi	r24, 0x2E	; 46
    6a56:	21 f4       	brne	.+8      	; 0x6a60 <vfprintf+0xba>
    6a58:	26 fd       	sbrc	r18, 6
    6a5a:	5f c1       	rjmp	.+702    	; 0x6d1a <vfprintf+0x374>
    6a5c:	20 64       	ori	r18, 0x40	; 64
    6a5e:	06 c0       	rjmp	.+12     	; 0x6a6c <vfprintf+0xc6>
    6a60:	8c 36       	cpi	r24, 0x6C	; 108
    6a62:	11 f4       	brne	.+4      	; 0x6a68 <vfprintf+0xc2>
    6a64:	20 68       	ori	r18, 0x80	; 128
    6a66:	02 c0       	rjmp	.+4      	; 0x6a6c <vfprintf+0xc6>
    6a68:	88 36       	cpi	r24, 0x68	; 104
    6a6a:	41 f4       	brne	.+16     	; 0x6a7c <vfprintf+0xd6>
    6a6c:	f6 01       	movw	r30, r12
    6a6e:	93 fd       	sbrc	r25, 3
    6a70:	85 91       	lpm	r24, Z+
    6a72:	93 ff       	sbrs	r25, 3
    6a74:	81 91       	ld	r24, Z+
    6a76:	6f 01       	movw	r12, r30
    6a78:	81 11       	cpse	r24, r1
    6a7a:	c1 cf       	rjmp	.-126    	; 0x69fe <vfprintf+0x58>
    6a7c:	98 2f       	mov	r25, r24
    6a7e:	9f 7d       	andi	r25, 0xDF	; 223
    6a80:	95 54       	subi	r25, 0x45	; 69
    6a82:	93 30       	cpi	r25, 0x03	; 3
    6a84:	28 f4       	brcc	.+10     	; 0x6a90 <vfprintf+0xea>
    6a86:	0c 5f       	subi	r16, 0xFC	; 252
    6a88:	1f 4f       	sbci	r17, 0xFF	; 255
    6a8a:	ff e3       	ldi	r31, 0x3F	; 63
    6a8c:	f9 83       	std	Y+1, r31	; 0x01
    6a8e:	0d c0       	rjmp	.+26     	; 0x6aaa <vfprintf+0x104>
    6a90:	83 36       	cpi	r24, 0x63	; 99
    6a92:	31 f0       	breq	.+12     	; 0x6aa0 <vfprintf+0xfa>
    6a94:	83 37       	cpi	r24, 0x73	; 115
    6a96:	71 f0       	breq	.+28     	; 0x6ab4 <vfprintf+0x10e>
    6a98:	83 35       	cpi	r24, 0x53	; 83
    6a9a:	09 f0       	breq	.+2      	; 0x6a9e <vfprintf+0xf8>
    6a9c:	57 c0       	rjmp	.+174    	; 0x6b4c <vfprintf+0x1a6>
    6a9e:	21 c0       	rjmp	.+66     	; 0x6ae2 <vfprintf+0x13c>
    6aa0:	f8 01       	movw	r30, r16
    6aa2:	80 81       	ld	r24, Z
    6aa4:	89 83       	std	Y+1, r24	; 0x01
    6aa6:	0e 5f       	subi	r16, 0xFE	; 254
    6aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    6aaa:	44 24       	eor	r4, r4
    6aac:	43 94       	inc	r4
    6aae:	51 2c       	mov	r5, r1
    6ab0:	54 01       	movw	r10, r8
    6ab2:	14 c0       	rjmp	.+40     	; 0x6adc <vfprintf+0x136>
    6ab4:	38 01       	movw	r6, r16
    6ab6:	f2 e0       	ldi	r31, 0x02	; 2
    6ab8:	6f 0e       	add	r6, r31
    6aba:	71 1c       	adc	r7, r1
    6abc:	f8 01       	movw	r30, r16
    6abe:	a0 80       	ld	r10, Z
    6ac0:	b1 80       	ldd	r11, Z+1	; 0x01
    6ac2:	26 ff       	sbrs	r18, 6
    6ac4:	03 c0       	rjmp	.+6      	; 0x6acc <vfprintf+0x126>
    6ac6:	65 2d       	mov	r22, r5
    6ac8:	70 e0       	ldi	r23, 0x00	; 0
    6aca:	02 c0       	rjmp	.+4      	; 0x6ad0 <vfprintf+0x12a>
    6acc:	6f ef       	ldi	r22, 0xFF	; 255
    6ace:	7f ef       	ldi	r23, 0xFF	; 255
    6ad0:	c5 01       	movw	r24, r10
    6ad2:	2c 87       	std	Y+12, r18	; 0x0c
    6ad4:	39 d1       	rcall	.+626    	; 0x6d48 <strnlen>
    6ad6:	2c 01       	movw	r4, r24
    6ad8:	83 01       	movw	r16, r6
    6ada:	2c 85       	ldd	r18, Y+12	; 0x0c
    6adc:	2f 77       	andi	r18, 0x7F	; 127
    6ade:	22 2e       	mov	r2, r18
    6ae0:	16 c0       	rjmp	.+44     	; 0x6b0e <vfprintf+0x168>
    6ae2:	38 01       	movw	r6, r16
    6ae4:	f2 e0       	ldi	r31, 0x02	; 2
    6ae6:	6f 0e       	add	r6, r31
    6ae8:	71 1c       	adc	r7, r1
    6aea:	f8 01       	movw	r30, r16
    6aec:	a0 80       	ld	r10, Z
    6aee:	b1 80       	ldd	r11, Z+1	; 0x01
    6af0:	26 ff       	sbrs	r18, 6
    6af2:	03 c0       	rjmp	.+6      	; 0x6afa <vfprintf+0x154>
    6af4:	65 2d       	mov	r22, r5
    6af6:	70 e0       	ldi	r23, 0x00	; 0
    6af8:	02 c0       	rjmp	.+4      	; 0x6afe <vfprintf+0x158>
    6afa:	6f ef       	ldi	r22, 0xFF	; 255
    6afc:	7f ef       	ldi	r23, 0xFF	; 255
    6afe:	c5 01       	movw	r24, r10
    6b00:	2c 87       	std	Y+12, r18	; 0x0c
    6b02:	17 d1       	rcall	.+558    	; 0x6d32 <strnlen_P>
    6b04:	2c 01       	movw	r4, r24
    6b06:	2c 85       	ldd	r18, Y+12	; 0x0c
    6b08:	20 68       	ori	r18, 0x80	; 128
    6b0a:	22 2e       	mov	r2, r18
    6b0c:	83 01       	movw	r16, r6
    6b0e:	23 fc       	sbrc	r2, 3
    6b10:	19 c0       	rjmp	.+50     	; 0x6b44 <vfprintf+0x19e>
    6b12:	83 2d       	mov	r24, r3
    6b14:	90 e0       	ldi	r25, 0x00	; 0
    6b16:	48 16       	cp	r4, r24
    6b18:	59 06       	cpc	r5, r25
    6b1a:	a0 f4       	brcc	.+40     	; 0x6b44 <vfprintf+0x19e>
    6b1c:	b7 01       	movw	r22, r14
    6b1e:	80 e2       	ldi	r24, 0x20	; 32
    6b20:	90 e0       	ldi	r25, 0x00	; 0
    6b22:	1d d1       	rcall	.+570    	; 0x6d5e <fputc>
    6b24:	3a 94       	dec	r3
    6b26:	f5 cf       	rjmp	.-22     	; 0x6b12 <vfprintf+0x16c>
    6b28:	f5 01       	movw	r30, r10
    6b2a:	27 fc       	sbrc	r2, 7
    6b2c:	85 91       	lpm	r24, Z+
    6b2e:	27 fe       	sbrs	r2, 7
    6b30:	81 91       	ld	r24, Z+
    6b32:	5f 01       	movw	r10, r30
    6b34:	b7 01       	movw	r22, r14
    6b36:	90 e0       	ldi	r25, 0x00	; 0
    6b38:	12 d1       	rcall	.+548    	; 0x6d5e <fputc>
    6b3a:	31 10       	cpse	r3, r1
    6b3c:	3a 94       	dec	r3
    6b3e:	f1 e0       	ldi	r31, 0x01	; 1
    6b40:	4f 1a       	sub	r4, r31
    6b42:	51 08       	sbc	r5, r1
    6b44:	41 14       	cp	r4, r1
    6b46:	51 04       	cpc	r5, r1
    6b48:	79 f7       	brne	.-34     	; 0x6b28 <vfprintf+0x182>
    6b4a:	de c0       	rjmp	.+444    	; 0x6d08 <vfprintf+0x362>
    6b4c:	84 36       	cpi	r24, 0x64	; 100
    6b4e:	11 f0       	breq	.+4      	; 0x6b54 <vfprintf+0x1ae>
    6b50:	89 36       	cpi	r24, 0x69	; 105
    6b52:	31 f5       	brne	.+76     	; 0x6ba0 <vfprintf+0x1fa>
    6b54:	f8 01       	movw	r30, r16
    6b56:	27 ff       	sbrs	r18, 7
    6b58:	07 c0       	rjmp	.+14     	; 0x6b68 <vfprintf+0x1c2>
    6b5a:	60 81       	ld	r22, Z
    6b5c:	71 81       	ldd	r23, Z+1	; 0x01
    6b5e:	82 81       	ldd	r24, Z+2	; 0x02
    6b60:	93 81       	ldd	r25, Z+3	; 0x03
    6b62:	0c 5f       	subi	r16, 0xFC	; 252
    6b64:	1f 4f       	sbci	r17, 0xFF	; 255
    6b66:	08 c0       	rjmp	.+16     	; 0x6b78 <vfprintf+0x1d2>
    6b68:	60 81       	ld	r22, Z
    6b6a:	71 81       	ldd	r23, Z+1	; 0x01
    6b6c:	07 2e       	mov	r0, r23
    6b6e:	00 0c       	add	r0, r0
    6b70:	88 0b       	sbc	r24, r24
    6b72:	99 0b       	sbc	r25, r25
    6b74:	0e 5f       	subi	r16, 0xFE	; 254
    6b76:	1f 4f       	sbci	r17, 0xFF	; 255
    6b78:	2f 76       	andi	r18, 0x6F	; 111
    6b7a:	72 2e       	mov	r7, r18
    6b7c:	97 ff       	sbrs	r25, 7
    6b7e:	09 c0       	rjmp	.+18     	; 0x6b92 <vfprintf+0x1ec>
    6b80:	90 95       	com	r25
    6b82:	80 95       	com	r24
    6b84:	70 95       	com	r23
    6b86:	61 95       	neg	r22
    6b88:	7f 4f       	sbci	r23, 0xFF	; 255
    6b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    6b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b8e:	20 68       	ori	r18, 0x80	; 128
    6b90:	72 2e       	mov	r7, r18
    6b92:	2a e0       	ldi	r18, 0x0A	; 10
    6b94:	30 e0       	ldi	r19, 0x00	; 0
    6b96:	a4 01       	movw	r20, r8
    6b98:	1a d1       	rcall	.+564    	; 0x6dce <__ultoa_invert>
    6b9a:	a8 2e       	mov	r10, r24
    6b9c:	a8 18       	sub	r10, r8
    6b9e:	43 c0       	rjmp	.+134    	; 0x6c26 <vfprintf+0x280>
    6ba0:	85 37       	cpi	r24, 0x75	; 117
    6ba2:	29 f4       	brne	.+10     	; 0x6bae <vfprintf+0x208>
    6ba4:	2f 7e       	andi	r18, 0xEF	; 239
    6ba6:	b2 2e       	mov	r11, r18
    6ba8:	2a e0       	ldi	r18, 0x0A	; 10
    6baa:	30 e0       	ldi	r19, 0x00	; 0
    6bac:	25 c0       	rjmp	.+74     	; 0x6bf8 <vfprintf+0x252>
    6bae:	f2 2f       	mov	r31, r18
    6bb0:	f9 7f       	andi	r31, 0xF9	; 249
    6bb2:	bf 2e       	mov	r11, r31
    6bb4:	8f 36       	cpi	r24, 0x6F	; 111
    6bb6:	c1 f0       	breq	.+48     	; 0x6be8 <vfprintf+0x242>
    6bb8:	18 f4       	brcc	.+6      	; 0x6bc0 <vfprintf+0x21a>
    6bba:	88 35       	cpi	r24, 0x58	; 88
    6bbc:	79 f0       	breq	.+30     	; 0x6bdc <vfprintf+0x236>
    6bbe:	ad c0       	rjmp	.+346    	; 0x6d1a <vfprintf+0x374>
    6bc0:	80 37       	cpi	r24, 0x70	; 112
    6bc2:	19 f0       	breq	.+6      	; 0x6bca <vfprintf+0x224>
    6bc4:	88 37       	cpi	r24, 0x78	; 120
    6bc6:	21 f0       	breq	.+8      	; 0x6bd0 <vfprintf+0x22a>
    6bc8:	a8 c0       	rjmp	.+336    	; 0x6d1a <vfprintf+0x374>
    6bca:	2f 2f       	mov	r18, r31
    6bcc:	20 61       	ori	r18, 0x10	; 16
    6bce:	b2 2e       	mov	r11, r18
    6bd0:	b4 fe       	sbrs	r11, 4
    6bd2:	0d c0       	rjmp	.+26     	; 0x6bee <vfprintf+0x248>
    6bd4:	8b 2d       	mov	r24, r11
    6bd6:	84 60       	ori	r24, 0x04	; 4
    6bd8:	b8 2e       	mov	r11, r24
    6bda:	09 c0       	rjmp	.+18     	; 0x6bee <vfprintf+0x248>
    6bdc:	24 ff       	sbrs	r18, 4
    6bde:	0a c0       	rjmp	.+20     	; 0x6bf4 <vfprintf+0x24e>
    6be0:	9f 2f       	mov	r25, r31
    6be2:	96 60       	ori	r25, 0x06	; 6
    6be4:	b9 2e       	mov	r11, r25
    6be6:	06 c0       	rjmp	.+12     	; 0x6bf4 <vfprintf+0x24e>
    6be8:	28 e0       	ldi	r18, 0x08	; 8
    6bea:	30 e0       	ldi	r19, 0x00	; 0
    6bec:	05 c0       	rjmp	.+10     	; 0x6bf8 <vfprintf+0x252>
    6bee:	20 e1       	ldi	r18, 0x10	; 16
    6bf0:	30 e0       	ldi	r19, 0x00	; 0
    6bf2:	02 c0       	rjmp	.+4      	; 0x6bf8 <vfprintf+0x252>
    6bf4:	20 e1       	ldi	r18, 0x10	; 16
    6bf6:	32 e0       	ldi	r19, 0x02	; 2
    6bf8:	f8 01       	movw	r30, r16
    6bfa:	b7 fe       	sbrs	r11, 7
    6bfc:	07 c0       	rjmp	.+14     	; 0x6c0c <vfprintf+0x266>
    6bfe:	60 81       	ld	r22, Z
    6c00:	71 81       	ldd	r23, Z+1	; 0x01
    6c02:	82 81       	ldd	r24, Z+2	; 0x02
    6c04:	93 81       	ldd	r25, Z+3	; 0x03
    6c06:	0c 5f       	subi	r16, 0xFC	; 252
    6c08:	1f 4f       	sbci	r17, 0xFF	; 255
    6c0a:	06 c0       	rjmp	.+12     	; 0x6c18 <vfprintf+0x272>
    6c0c:	60 81       	ld	r22, Z
    6c0e:	71 81       	ldd	r23, Z+1	; 0x01
    6c10:	80 e0       	ldi	r24, 0x00	; 0
    6c12:	90 e0       	ldi	r25, 0x00	; 0
    6c14:	0e 5f       	subi	r16, 0xFE	; 254
    6c16:	1f 4f       	sbci	r17, 0xFF	; 255
    6c18:	a4 01       	movw	r20, r8
    6c1a:	d9 d0       	rcall	.+434    	; 0x6dce <__ultoa_invert>
    6c1c:	a8 2e       	mov	r10, r24
    6c1e:	a8 18       	sub	r10, r8
    6c20:	fb 2d       	mov	r31, r11
    6c22:	ff 77       	andi	r31, 0x7F	; 127
    6c24:	7f 2e       	mov	r7, r31
    6c26:	76 fe       	sbrs	r7, 6
    6c28:	0b c0       	rjmp	.+22     	; 0x6c40 <vfprintf+0x29a>
    6c2a:	37 2d       	mov	r19, r7
    6c2c:	3e 7f       	andi	r19, 0xFE	; 254
    6c2e:	a5 14       	cp	r10, r5
    6c30:	50 f4       	brcc	.+20     	; 0x6c46 <vfprintf+0x2a0>
    6c32:	74 fe       	sbrs	r7, 4
    6c34:	0a c0       	rjmp	.+20     	; 0x6c4a <vfprintf+0x2a4>
    6c36:	72 fc       	sbrc	r7, 2
    6c38:	08 c0       	rjmp	.+16     	; 0x6c4a <vfprintf+0x2a4>
    6c3a:	37 2d       	mov	r19, r7
    6c3c:	3e 7e       	andi	r19, 0xEE	; 238
    6c3e:	05 c0       	rjmp	.+10     	; 0x6c4a <vfprintf+0x2a4>
    6c40:	ba 2c       	mov	r11, r10
    6c42:	37 2d       	mov	r19, r7
    6c44:	03 c0       	rjmp	.+6      	; 0x6c4c <vfprintf+0x2a6>
    6c46:	ba 2c       	mov	r11, r10
    6c48:	01 c0       	rjmp	.+2      	; 0x6c4c <vfprintf+0x2a6>
    6c4a:	b5 2c       	mov	r11, r5
    6c4c:	34 ff       	sbrs	r19, 4
    6c4e:	0d c0       	rjmp	.+26     	; 0x6c6a <vfprintf+0x2c4>
    6c50:	fe 01       	movw	r30, r28
    6c52:	ea 0d       	add	r30, r10
    6c54:	f1 1d       	adc	r31, r1
    6c56:	80 81       	ld	r24, Z
    6c58:	80 33       	cpi	r24, 0x30	; 48
    6c5a:	11 f4       	brne	.+4      	; 0x6c60 <vfprintf+0x2ba>
    6c5c:	39 7e       	andi	r19, 0xE9	; 233
    6c5e:	09 c0       	rjmp	.+18     	; 0x6c72 <vfprintf+0x2cc>
    6c60:	32 ff       	sbrs	r19, 2
    6c62:	06 c0       	rjmp	.+12     	; 0x6c70 <vfprintf+0x2ca>
    6c64:	b3 94       	inc	r11
    6c66:	b3 94       	inc	r11
    6c68:	04 c0       	rjmp	.+8      	; 0x6c72 <vfprintf+0x2cc>
    6c6a:	83 2f       	mov	r24, r19
    6c6c:	86 78       	andi	r24, 0x86	; 134
    6c6e:	09 f0       	breq	.+2      	; 0x6c72 <vfprintf+0x2cc>
    6c70:	b3 94       	inc	r11
    6c72:	33 fd       	sbrc	r19, 3
    6c74:	12 c0       	rjmp	.+36     	; 0x6c9a <vfprintf+0x2f4>
    6c76:	30 ff       	sbrs	r19, 0
    6c78:	06 c0       	rjmp	.+12     	; 0x6c86 <vfprintf+0x2e0>
    6c7a:	5a 2c       	mov	r5, r10
    6c7c:	b3 14       	cp	r11, r3
    6c7e:	18 f4       	brcc	.+6      	; 0x6c86 <vfprintf+0x2e0>
    6c80:	53 0c       	add	r5, r3
    6c82:	5b 18       	sub	r5, r11
    6c84:	b3 2c       	mov	r11, r3
    6c86:	b3 14       	cp	r11, r3
    6c88:	60 f4       	brcc	.+24     	; 0x6ca2 <vfprintf+0x2fc>
    6c8a:	b7 01       	movw	r22, r14
    6c8c:	80 e2       	ldi	r24, 0x20	; 32
    6c8e:	90 e0       	ldi	r25, 0x00	; 0
    6c90:	3c 87       	std	Y+12, r19	; 0x0c
    6c92:	65 d0       	rcall	.+202    	; 0x6d5e <fputc>
    6c94:	b3 94       	inc	r11
    6c96:	3c 85       	ldd	r19, Y+12	; 0x0c
    6c98:	f6 cf       	rjmp	.-20     	; 0x6c86 <vfprintf+0x2e0>
    6c9a:	b3 14       	cp	r11, r3
    6c9c:	10 f4       	brcc	.+4      	; 0x6ca2 <vfprintf+0x2fc>
    6c9e:	3b 18       	sub	r3, r11
    6ca0:	01 c0       	rjmp	.+2      	; 0x6ca4 <vfprintf+0x2fe>
    6ca2:	31 2c       	mov	r3, r1
    6ca4:	34 ff       	sbrs	r19, 4
    6ca6:	11 c0       	rjmp	.+34     	; 0x6cca <vfprintf+0x324>
    6ca8:	b7 01       	movw	r22, r14
    6caa:	80 e3       	ldi	r24, 0x30	; 48
    6cac:	90 e0       	ldi	r25, 0x00	; 0
    6cae:	3c 87       	std	Y+12, r19	; 0x0c
    6cb0:	56 d0       	rcall	.+172    	; 0x6d5e <fputc>
    6cb2:	3c 85       	ldd	r19, Y+12	; 0x0c
    6cb4:	32 ff       	sbrs	r19, 2
    6cb6:	16 c0       	rjmp	.+44     	; 0x6ce4 <vfprintf+0x33e>
    6cb8:	31 fd       	sbrc	r19, 1
    6cba:	03 c0       	rjmp	.+6      	; 0x6cc2 <vfprintf+0x31c>
    6cbc:	88 e7       	ldi	r24, 0x78	; 120
    6cbe:	90 e0       	ldi	r25, 0x00	; 0
    6cc0:	02 c0       	rjmp	.+4      	; 0x6cc6 <vfprintf+0x320>
    6cc2:	88 e5       	ldi	r24, 0x58	; 88
    6cc4:	90 e0       	ldi	r25, 0x00	; 0
    6cc6:	b7 01       	movw	r22, r14
    6cc8:	0c c0       	rjmp	.+24     	; 0x6ce2 <vfprintf+0x33c>
    6cca:	83 2f       	mov	r24, r19
    6ccc:	86 78       	andi	r24, 0x86	; 134
    6cce:	51 f0       	breq	.+20     	; 0x6ce4 <vfprintf+0x33e>
    6cd0:	31 ff       	sbrs	r19, 1
    6cd2:	02 c0       	rjmp	.+4      	; 0x6cd8 <vfprintf+0x332>
    6cd4:	8b e2       	ldi	r24, 0x2B	; 43
    6cd6:	01 c0       	rjmp	.+2      	; 0x6cda <vfprintf+0x334>
    6cd8:	80 e2       	ldi	r24, 0x20	; 32
    6cda:	37 fd       	sbrc	r19, 7
    6cdc:	8d e2       	ldi	r24, 0x2D	; 45
    6cde:	b7 01       	movw	r22, r14
    6ce0:	90 e0       	ldi	r25, 0x00	; 0
    6ce2:	3d d0       	rcall	.+122    	; 0x6d5e <fputc>
    6ce4:	a5 14       	cp	r10, r5
    6ce6:	30 f4       	brcc	.+12     	; 0x6cf4 <vfprintf+0x34e>
    6ce8:	b7 01       	movw	r22, r14
    6cea:	80 e3       	ldi	r24, 0x30	; 48
    6cec:	90 e0       	ldi	r25, 0x00	; 0
    6cee:	37 d0       	rcall	.+110    	; 0x6d5e <fputc>
    6cf0:	5a 94       	dec	r5
    6cf2:	f8 cf       	rjmp	.-16     	; 0x6ce4 <vfprintf+0x33e>
    6cf4:	aa 94       	dec	r10
    6cf6:	f4 01       	movw	r30, r8
    6cf8:	ea 0d       	add	r30, r10
    6cfa:	f1 1d       	adc	r31, r1
    6cfc:	80 81       	ld	r24, Z
    6cfe:	b7 01       	movw	r22, r14
    6d00:	90 e0       	ldi	r25, 0x00	; 0
    6d02:	2d d0       	rcall	.+90     	; 0x6d5e <fputc>
    6d04:	a1 10       	cpse	r10, r1
    6d06:	f6 cf       	rjmp	.-20     	; 0x6cf4 <vfprintf+0x34e>
    6d08:	33 20       	and	r3, r3
    6d0a:	09 f4       	brne	.+2      	; 0x6d0e <vfprintf+0x368>
    6d0c:	5d ce       	rjmp	.-838    	; 0x69c8 <vfprintf+0x22>
    6d0e:	b7 01       	movw	r22, r14
    6d10:	80 e2       	ldi	r24, 0x20	; 32
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	24 d0       	rcall	.+72     	; 0x6d5e <fputc>
    6d16:	3a 94       	dec	r3
    6d18:	f7 cf       	rjmp	.-18     	; 0x6d08 <vfprintf+0x362>
    6d1a:	f7 01       	movw	r30, r14
    6d1c:	86 81       	ldd	r24, Z+6	; 0x06
    6d1e:	97 81       	ldd	r25, Z+7	; 0x07
    6d20:	02 c0       	rjmp	.+4      	; 0x6d26 <vfprintf+0x380>
    6d22:	8f ef       	ldi	r24, 0xFF	; 255
    6d24:	9f ef       	ldi	r25, 0xFF	; 255
    6d26:	2c 96       	adiw	r28, 0x0c	; 12
    6d28:	e2 e1       	ldi	r30, 0x12	; 18
    6d2a:	55 c9       	rjmp	.-3414   	; 0x5fd6 <__epilogue_restores__>

00006d2c <__ctype_isfalse>:
    6d2c:	99 27       	eor	r25, r25
    6d2e:	88 27       	eor	r24, r24

00006d30 <__ctype_istrue>:
    6d30:	08 95       	ret

00006d32 <strnlen_P>:
    6d32:	fc 01       	movw	r30, r24
    6d34:	05 90       	lpm	r0, Z+
    6d36:	61 50       	subi	r22, 0x01	; 1
    6d38:	70 40       	sbci	r23, 0x00	; 0
    6d3a:	01 10       	cpse	r0, r1
    6d3c:	d8 f7       	brcc	.-10     	; 0x6d34 <strnlen_P+0x2>
    6d3e:	80 95       	com	r24
    6d40:	90 95       	com	r25
    6d42:	8e 0f       	add	r24, r30
    6d44:	9f 1f       	adc	r25, r31
    6d46:	08 95       	ret

00006d48 <strnlen>:
    6d48:	fc 01       	movw	r30, r24
    6d4a:	61 50       	subi	r22, 0x01	; 1
    6d4c:	70 40       	sbci	r23, 0x00	; 0
    6d4e:	01 90       	ld	r0, Z+
    6d50:	01 10       	cpse	r0, r1
    6d52:	d8 f7       	brcc	.-10     	; 0x6d4a <strnlen+0x2>
    6d54:	80 95       	com	r24
    6d56:	90 95       	com	r25
    6d58:	8e 0f       	add	r24, r30
    6d5a:	9f 1f       	adc	r25, r31
    6d5c:	08 95       	ret

00006d5e <fputc>:
    6d5e:	0f 93       	push	r16
    6d60:	1f 93       	push	r17
    6d62:	cf 93       	push	r28
    6d64:	df 93       	push	r29
    6d66:	fb 01       	movw	r30, r22
    6d68:	23 81       	ldd	r18, Z+3	; 0x03
    6d6a:	21 fd       	sbrc	r18, 1
    6d6c:	03 c0       	rjmp	.+6      	; 0x6d74 <fputc+0x16>
    6d6e:	8f ef       	ldi	r24, 0xFF	; 255
    6d70:	9f ef       	ldi	r25, 0xFF	; 255
    6d72:	28 c0       	rjmp	.+80     	; 0x6dc4 <fputc+0x66>
    6d74:	22 ff       	sbrs	r18, 2
    6d76:	16 c0       	rjmp	.+44     	; 0x6da4 <fputc+0x46>
    6d78:	46 81       	ldd	r20, Z+6	; 0x06
    6d7a:	57 81       	ldd	r21, Z+7	; 0x07
    6d7c:	24 81       	ldd	r18, Z+4	; 0x04
    6d7e:	35 81       	ldd	r19, Z+5	; 0x05
    6d80:	42 17       	cp	r20, r18
    6d82:	53 07       	cpc	r21, r19
    6d84:	44 f4       	brge	.+16     	; 0x6d96 <fputc+0x38>
    6d86:	a0 81       	ld	r26, Z
    6d88:	b1 81       	ldd	r27, Z+1	; 0x01
    6d8a:	9d 01       	movw	r18, r26
    6d8c:	2f 5f       	subi	r18, 0xFF	; 255
    6d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    6d90:	31 83       	std	Z+1, r19	; 0x01
    6d92:	20 83       	st	Z, r18
    6d94:	8c 93       	st	X, r24
    6d96:	26 81       	ldd	r18, Z+6	; 0x06
    6d98:	37 81       	ldd	r19, Z+7	; 0x07
    6d9a:	2f 5f       	subi	r18, 0xFF	; 255
    6d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d9e:	37 83       	std	Z+7, r19	; 0x07
    6da0:	26 83       	std	Z+6, r18	; 0x06
    6da2:	10 c0       	rjmp	.+32     	; 0x6dc4 <fputc+0x66>
    6da4:	eb 01       	movw	r28, r22
    6da6:	09 2f       	mov	r16, r25
    6da8:	18 2f       	mov	r17, r24
    6daa:	00 84       	ldd	r0, Z+8	; 0x08
    6dac:	f1 85       	ldd	r31, Z+9	; 0x09
    6dae:	e0 2d       	mov	r30, r0
    6db0:	09 95       	icall
    6db2:	89 2b       	or	r24, r25
    6db4:	e1 f6       	brne	.-72     	; 0x6d6e <fputc+0x10>
    6db6:	8e 81       	ldd	r24, Y+6	; 0x06
    6db8:	9f 81       	ldd	r25, Y+7	; 0x07
    6dba:	01 96       	adiw	r24, 0x01	; 1
    6dbc:	9f 83       	std	Y+7, r25	; 0x07
    6dbe:	8e 83       	std	Y+6, r24	; 0x06
    6dc0:	81 2f       	mov	r24, r17
    6dc2:	90 2f       	mov	r25, r16
    6dc4:	df 91       	pop	r29
    6dc6:	cf 91       	pop	r28
    6dc8:	1f 91       	pop	r17
    6dca:	0f 91       	pop	r16
    6dcc:	08 95       	ret

00006dce <__ultoa_invert>:
    6dce:	fa 01       	movw	r30, r20
    6dd0:	aa 27       	eor	r26, r26
    6dd2:	28 30       	cpi	r18, 0x08	; 8
    6dd4:	51 f1       	breq	.+84     	; 0x6e2a <__ultoa_invert+0x5c>
    6dd6:	20 31       	cpi	r18, 0x10	; 16
    6dd8:	81 f1       	breq	.+96     	; 0x6e3a <__ultoa_invert+0x6c>
    6dda:	e8 94       	clt
    6ddc:	6f 93       	push	r22
    6dde:	6e 7f       	andi	r22, 0xFE	; 254
    6de0:	6e 5f       	subi	r22, 0xFE	; 254
    6de2:	7f 4f       	sbci	r23, 0xFF	; 255
    6de4:	8f 4f       	sbci	r24, 0xFF	; 255
    6de6:	9f 4f       	sbci	r25, 0xFF	; 255
    6de8:	af 4f       	sbci	r26, 0xFF	; 255
    6dea:	b1 e0       	ldi	r27, 0x01	; 1
    6dec:	3e d0       	rcall	.+124    	; 0x6e6a <__ultoa_invert+0x9c>
    6dee:	b4 e0       	ldi	r27, 0x04	; 4
    6df0:	3c d0       	rcall	.+120    	; 0x6e6a <__ultoa_invert+0x9c>
    6df2:	67 0f       	add	r22, r23
    6df4:	78 1f       	adc	r23, r24
    6df6:	89 1f       	adc	r24, r25
    6df8:	9a 1f       	adc	r25, r26
    6dfa:	a1 1d       	adc	r26, r1
    6dfc:	68 0f       	add	r22, r24
    6dfe:	79 1f       	adc	r23, r25
    6e00:	8a 1f       	adc	r24, r26
    6e02:	91 1d       	adc	r25, r1
    6e04:	a1 1d       	adc	r26, r1
    6e06:	6a 0f       	add	r22, r26
    6e08:	71 1d       	adc	r23, r1
    6e0a:	81 1d       	adc	r24, r1
    6e0c:	91 1d       	adc	r25, r1
    6e0e:	a1 1d       	adc	r26, r1
    6e10:	20 d0       	rcall	.+64     	; 0x6e52 <__ultoa_invert+0x84>
    6e12:	09 f4       	brne	.+2      	; 0x6e16 <__ultoa_invert+0x48>
    6e14:	68 94       	set
    6e16:	3f 91       	pop	r19
    6e18:	2a e0       	ldi	r18, 0x0A	; 10
    6e1a:	26 9f       	mul	r18, r22
    6e1c:	11 24       	eor	r1, r1
    6e1e:	30 19       	sub	r19, r0
    6e20:	30 5d       	subi	r19, 0xD0	; 208
    6e22:	31 93       	st	Z+, r19
    6e24:	de f6       	brtc	.-74     	; 0x6ddc <__ultoa_invert+0xe>
    6e26:	cf 01       	movw	r24, r30
    6e28:	08 95       	ret
    6e2a:	46 2f       	mov	r20, r22
    6e2c:	47 70       	andi	r20, 0x07	; 7
    6e2e:	40 5d       	subi	r20, 0xD0	; 208
    6e30:	41 93       	st	Z+, r20
    6e32:	b3 e0       	ldi	r27, 0x03	; 3
    6e34:	0f d0       	rcall	.+30     	; 0x6e54 <__ultoa_invert+0x86>
    6e36:	c9 f7       	brne	.-14     	; 0x6e2a <__ultoa_invert+0x5c>
    6e38:	f6 cf       	rjmp	.-20     	; 0x6e26 <__ultoa_invert+0x58>
    6e3a:	46 2f       	mov	r20, r22
    6e3c:	4f 70       	andi	r20, 0x0F	; 15
    6e3e:	40 5d       	subi	r20, 0xD0	; 208
    6e40:	4a 33       	cpi	r20, 0x3A	; 58
    6e42:	18 f0       	brcs	.+6      	; 0x6e4a <__ultoa_invert+0x7c>
    6e44:	49 5d       	subi	r20, 0xD9	; 217
    6e46:	31 fd       	sbrc	r19, 1
    6e48:	40 52       	subi	r20, 0x20	; 32
    6e4a:	41 93       	st	Z+, r20
    6e4c:	02 d0       	rcall	.+4      	; 0x6e52 <__ultoa_invert+0x84>
    6e4e:	a9 f7       	brne	.-22     	; 0x6e3a <__ultoa_invert+0x6c>
    6e50:	ea cf       	rjmp	.-44     	; 0x6e26 <__ultoa_invert+0x58>
    6e52:	b4 e0       	ldi	r27, 0x04	; 4
    6e54:	a6 95       	lsr	r26
    6e56:	97 95       	ror	r25
    6e58:	87 95       	ror	r24
    6e5a:	77 95       	ror	r23
    6e5c:	67 95       	ror	r22
    6e5e:	ba 95       	dec	r27
    6e60:	c9 f7       	brne	.-14     	; 0x6e54 <__ultoa_invert+0x86>
    6e62:	00 97       	sbiw	r24, 0x00	; 0
    6e64:	61 05       	cpc	r22, r1
    6e66:	71 05       	cpc	r23, r1
    6e68:	08 95       	ret
    6e6a:	9b 01       	movw	r18, r22
    6e6c:	ac 01       	movw	r20, r24
    6e6e:	0a 2e       	mov	r0, r26
    6e70:	06 94       	lsr	r0
    6e72:	57 95       	ror	r21
    6e74:	47 95       	ror	r20
    6e76:	37 95       	ror	r19
    6e78:	27 95       	ror	r18
    6e7a:	ba 95       	dec	r27
    6e7c:	c9 f7       	brne	.-14     	; 0x6e70 <__ultoa_invert+0xa2>
    6e7e:	62 0f       	add	r22, r18
    6e80:	73 1f       	adc	r23, r19
    6e82:	84 1f       	adc	r24, r20
    6e84:	95 1f       	adc	r25, r21
    6e86:	a0 1d       	adc	r26, r0
    6e88:	08 95       	ret

00006e8a <eeprom_read_byte>:
    6e8a:	f9 99       	sbic	0x1f, 1	; 31
    6e8c:	fe cf       	rjmp	.-4      	; 0x6e8a <eeprom_read_byte>
    6e8e:	92 bd       	out	0x22, r25	; 34
    6e90:	81 bd       	out	0x21, r24	; 33
    6e92:	f8 9a       	sbi	0x1f, 0	; 31
    6e94:	99 27       	eor	r25, r25
    6e96:	80 b5       	in	r24, 0x20	; 32
    6e98:	08 95       	ret

00006e9a <eeprom_write_byte>:
    6e9a:	26 2f       	mov	r18, r22

00006e9c <eeprom_write_r18>:
    6e9c:	f9 99       	sbic	0x1f, 1	; 31
    6e9e:	fe cf       	rjmp	.-4      	; 0x6e9c <eeprom_write_r18>
    6ea0:	1f ba       	out	0x1f, r1	; 31
    6ea2:	92 bd       	out	0x22, r25	; 34
    6ea4:	81 bd       	out	0x21, r24	; 33
    6ea6:	20 bd       	out	0x20, r18	; 32
    6ea8:	0f b6       	in	r0, 0x3f	; 63
    6eaa:	f8 94       	cli
    6eac:	fa 9a       	sbi	0x1f, 2	; 31
    6eae:	f9 9a       	sbi	0x1f, 1	; 31
    6eb0:	0f be       	out	0x3f, r0	; 63
    6eb2:	01 96       	adiw	r24, 0x01	; 1
    6eb4:	08 95       	ret

00006eb6 <_exit>:
    6eb6:	f8 94       	cli

00006eb8 <__stop_program>:
    6eb8:	ff cf       	rjmp	.-2      	; 0x6eb8 <__stop_program>
