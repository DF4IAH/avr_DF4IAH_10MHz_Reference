
DF4IAH_10MHz_Reference_Appl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00006f4c  00007000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006f4c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000070c  00800118  00800118  00007018  2**0
                  ALLOC
  3 .eeprom       00000400  00810000  00810000  00007018  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00007418  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007474  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000468  00000000  00000000  000074b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b6ac  00000000  00000000  00007920  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021c0  00000000  00000000  00012fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004462  00000000  00000000  0001518c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bb0  00000000  00000000  000195f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002f21  00000000  00000000  0001a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005522  00000000  00000000  0001d0c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004a8  00000000  00000000  000225e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ca c6       	rjmp	.+3476   	; 0xd96 <__ctors_end>
       2:	00 00       	nop
       4:	0f c7       	rjmp	.+3614   	; 0xe24 <__vector_1>
       6:	00 00       	nop
       8:	e3 c6       	rjmp	.+3526   	; 0xdd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	e1 c6       	rjmp	.+3522   	; 0xdd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	df c6       	rjmp	.+3518   	; 0xdd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	dd c6       	rjmp	.+3514   	; 0xdd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__vector_6>
      1c:	d9 c6       	rjmp	.+3506   	; 0xdd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d7 c6       	rjmp	.+3502   	; 0xdd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	d5 c6       	rjmp	.+3498   	; 0xdd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_10>
      2c:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_11>
      30:	cf c6       	rjmp	.+3486   	; 0xdd0 <__bad_interrupt>
      32:	00 00       	nop
      34:	cd c6       	rjmp	.+3482   	; 0xdd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	cb c6       	rjmp	.+3478   	; 0xdd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c9 c6       	rjmp	.+3474   	; 0xdd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_16>
      44:	c5 c6       	rjmp	.+3466   	; 0xdd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 4f 24 	jmp	0x489e	; 0x489e <__vector_18>
      4c:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <__vector_19>
      50:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__vector_20>
      54:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__vector_21>
      58:	bb c6       	rjmp	.+3446   	; 0xdd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b9 c6       	rjmp	.+3442   	; 0xdd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 2d 26 	jmp	0x4c5a	; 0x4c5a <__vector_24>
      64:	b5 c6       	rjmp	.+3434   	; 0xdd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	06 0e       	add	r0, r22
      6a:	12 0e       	add	r1, r18
      6c:	91 0e       	add	r9, r17
      6e:	1e 0e       	add	r1, r30
      70:	2a 0e       	add	r2, r26
      72:	36 0e       	add	r3, r22
      74:	42 0e       	add	r4, r18
      76:	4e 0e       	add	r4, r30
      78:	5a 0e       	add	r5, r26
      7a:	66 0e       	add	r6, r22
      7c:	72 0e       	add	r7, r18
      7e:	7e 0e       	add	r7, r30
      80:	8a 0e       	add	r8, r26
      82:	07 63       	ori	r16, 0x37	; 55
      84:	42 36       	cpi	r20, 0x62	; 98
      86:	b7 9b       	sbis	0x16, 7	; 22
      88:	d8 a7       	std	Y+40, r29	; 0x28
      8a:	1a 39       	cpi	r17, 0x9A	; 154
      8c:	68 56       	subi	r22, 0x68	; 104
      8e:	18 ae       	std	Y+56, r1	; 0x38
      90:	ba ab       	std	Y+50, r27	; 0x32
      92:	55 8c       	ldd	r5, Z+29	; 0x1d
      94:	1d 3c       	cpi	r17, 0xCD	; 205
      96:	b7 cc       	rjmp	.-1682   	; 0xfffffa06 <__eeprom_end+0xff7ef606>
      98:	57 63       	ori	r21, 0x37	; 55
      9a:	bd 6d       	ori	r27, 0xDD	; 221
      9c:	ed fd       	.word	0xfded	; ????
      9e:	75 3e       	cpi	r23, 0xE5	; 229
      a0:	f6 17       	cp	r31, r22
      a2:	72 31       	cpi	r23, 0x12	; 18
      a4:	bf 00       	.word	0x00bf	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240
      aa:	08 00       	.word	0x0008	; ????
      ac:	00 00       	nop
      ae:	be 92       	st	-X, r11
      b0:	24 49       	sbci	r18, 0x94	; 148
      b2:	12 3e       	cpi	r17, 0xE2	; 226
      b4:	ab aa       	std	Y+51, r10	; 0x33
      b6:	aa 2a       	or	r10, r26
      b8:	be cd       	rjmp	.-1156   	; 0xfffffc36 <__eeprom_end+0xff7ef836>
      ba:	cc cc       	rjmp	.-1640   	; 0xfffffa54 <__eeprom_end+0xff7ef654>
      bc:	4c 3e       	cpi	r20, 0xEC	; 236
      be:	00 00       	nop
      c0:	00 80       	ld	r0, Z
      c2:	be ab       	std	Y+54, r27	; 0x36
      c4:	aa aa       	std	Y+50, r10	; 0x32
      c6:	aa 3e       	cpi	r26, 0xEA	; 234
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	00 08       	sbc	r0, r0
      d8:	41 78       	andi	r20, 0x81	; 129
      da:	d3 bb       	out	0x13, r29	; 19
      dc:	43 87       	std	Z+11, r20	; 0x0b
      de:	d1 13       	cpse	r29, r17
      e0:	3d 19       	sub	r19, r13
      e2:	0e 3c       	cpi	r16, 0xCE	; 206
      e4:	c3 bd       	out	0x23, r28	; 35
      e6:	42 82       	std	Z+2, r4	; 0x02
      e8:	ad 2b       	or	r26, r29
      ea:	3e 68       	ori	r19, 0x8E	; 142
      ec:	ec 82       	std	Y+4, r14	; 0x04
      ee:	76 be       	out	0x36, r7	; 54
      f0:	d9 8f       	std	Y+25, r29	; 0x19
      f2:	e1 a9       	ldd	r30, Z+49	; 0x31
      f4:	3e 4c       	sbci	r19, 0xCE	; 206
      f6:	80 ef       	ldi	r24, 0xF0	; 240
      f8:	ff be       	out	0x3f, r15	; 63
      fa:	01 c4       	rjmp	.+2050   	; 0x8fe <PM_INTERPRETER_HELP12+0xc>
      fc:	ff 7f       	andi	r31, 0xFF	; 255
      fe:	3f 00       	.word	0x003f	; ????
     100:	00 00       	nop
	...

00000104 <PM_PARSE_NMEA_MSG41>:
     104:	24 47 4c 47 53 56 2c 25 2a 64 2c 31 2c 25 64 2c     $GLGSV,%*d,1,%d,
	...

00000115 <PM_PARSE_NMEA_MSG31>:
     115:	24 47 50 47 53 56 2c 25 2a 64 2c 31 2c 25 64 2c     $GPGSV,%*d,1,%d,
	...

00000126 <PM_PARSE_NMEA_MSG21>:
     126:	24 47 50 52 4d 43 2c 25 6c 64 2e 25 64 2c 25 2a     $GPRMC,%ld.%d,%*
     136:	63 2c 25 66 2c 25 63 2c 25 66 2c 25 63 2c 25 2a     c,%f,%c,%f,%c,%*
     146:	66 2c 25 2a 66 2c 25 6c 64 2c 2c 2c 25 2a 63 2a     f,%*f,%ld,,,%*c*
     156:	25 64 00                                            %d.

00000159 <PM_PARSE_NMEA_MSG12>:
     159:	25 66 2c 25 66 2c 25 66 2a 25 64 00                 %f,%f,%f*%d.

00000165 <PM_PARSE_NMEA_MSG11>:
     165:	24 47 50 47 53 41 2c 25 2a 63 2c 25 64 2c 00        $GPGSA,%*c,%d,.

00000174 <PM_PARSE_NMEA_MSG01>:
     174:	24 47 50 47 47 41 2c 25 6c 64 2e 25 64 2c 25 66     $GPGGA,%ld.%d,%f
     184:	2c 25 63 2c 25 66 2c 25 63 2c 25 64 2c 25 64 2c     ,%c,%f,%c,%d,%d,
     194:	25 66 2c 25 66 2c 25 2a 63 2c 25 2a 66 2c 25 2a     %f,%f,%*c,%*f,%*
     1a4:	63 2c 25 2a 64 2c 25 2a 64 2a 25 64 00              c,%*d,%*d*%d.

000001b1 <PM_FORMAT_SET_BAUD>:
     1b1:	43 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e 20 62 61     Communication ba
     1c1:	75 64 20 72 61 74 65 20 73 65 74 20 74 6f 20 25     ud rate set to %
     1d1:	35 75 20 62 61 75 64 2e 0a 00                       5u baud...

000001db <PM_FORMAT_GPIB_SCM_IDN>:
     1db:	44 46 34 49 41 48 2c 25 73 2c 25 30 35 75 2c 56     DF4IAH,%s,%05u,V
     1eb:	32 30 25 30 33 75 25 30 33 75 2e 00                 20%03u%03u..

000001f7 <PM_FORMAT_SC02>:
     1f7:	23 53 43 30 32 3a 20 73 3d 30 78 25 30 32 78 2c     #SC02: s=0x%02x,
     207:	64 53 3d 25 75 2c 69 50 3d 25 75 0a 00              dS=%u,iP=%u..

00000214 <PM_FORMAT_SC01>:
     214:	23 53 43 30 31 3a 20 53 74 61 63 6b 2d 43 68 65     #SC01: Stack-Che
     224:	63 6b 3a 20 6d 75 6e 67 2d 77 61 6c 6c 20 61 64     ck: mung-wall ad
     234:	64 72 65 73 73 3a 20 30 78 25 30 34 78 2c 20 6c     dress: 0x%04x, l
     244:	6f 77 65 73 74 2d 73 74 61 63 6b 3a 20 30 78 25     owest-stack: 0x%
     254:	30 34 78 0a 00                                      04x..

00000259 <PM_FORMAT_LC23>:
     259:	25 63 25 30 33 64 2e 25 30 33 64 20 25 63 25 31     %c%03d.%03d %c%1
     269:	64 2e 25 30 33 64 56 20 00                          d.%03dV .

00000272 <PM_FORMAT_LC22>:
     272:	25 63 25 31 75 20 25 63 25 31 75 20 25 31 64 2e     %c%1u %c%1u %1d.
     282:	25 31 64 20 25 63 25 30 32 75 25 63 25 30 32 75     %1d %c%02u%c%02u
     292:	20 00                                                .

00000294 <PM_FORMAT_LC21>:
     294:	25 30 34 75 25 30 32 75 25 30 32 75 20 55 25 30     %04u%02u%02u U%0
     2a4:	32 75 25 30 32 75 25 30 32 75 20 00                 2u%02u%02u .

000002b0 <PM_FORMAT_LC12>:
     2b0:	62 20 2d 2d 2d 2e 2d 2d 2d 20 25 63 25 31 58 20     b ---.--- %c%1X 
     2c0:	25 63 25 30 32 75 20 00                             %c%02u .

000002c8 <PM_FORMAT_LC11>:
     2c8:	25 63 20 25 30 33 64 2e 25 30 33 64 20 25 63 25     %c %03d.%03d %c%
     2d8:	31 58 20 25 63 25 30 32 75 20 00                    1X %c%02u .

000002e3 <PM_FORMAT_LC02>:
     2e3:	31 30 4d 48 7a 52 65 66 4f 73 63 20 56 32 78 31     10MHzRefOsc V2x1
	...

000002f4 <PM_FORMAT_LC01>:
     2f4:	2b 3d 3d 3d 20 44 46 34 49 41 48 20 3d 3d 3d 2b     +=== DF4IAH ===+
	...

00000305 <PM_FORMAT_IA12>:
     305:	23 49 41 31 32 3a 20 50 48 41 53 45 20 66 61 73     #IA12: PHASE fas
     315:	74 50 77 6d 53 69 6e 67 6c 65 44 69 66 66 5f 73     tPwmSingleDiff_s
     325:	74 65 70 73 20 3d 20 25 63 25 30 33 64 2e 25 30     teps = %c%03d.%0
     335:	33 64 0a 00                                         3d..

00000339 <PM_FORMAT_IA11>:
     339:	23 49 41 31 31 3a 20 50 48 41 53 45 20 70 68 61     #IA11: PHASE pha
     349:	73 65 45 72 72 20 20 3d 20 25 30 33 64 2e 25 30     seErr  = %03d.%0
     359:	33 64 c2 b0 2c 20 09 20 70 68 61 73 65 53 74 65     3d.., . phaseSte
     369:	70 73 46 72 65 71 75 65 6e 63 79 20 3d 20 25 63     psFrequency = %c
     379:	25 30 33 64 2e 25 30 33 64 2c 20 09 70 68 61 73     %03d.%03d, .phas
     389:	65 53 74 65 70 73 50 68 61 73 65 20 3d 20 25 63     eStepsPhase = %c
     399:	25 30 33 64 2e 25 30 33 64 0a 00                    %03d.%03d..

000003a4 <PM_FORMAT_IA03>:
     3a4:	23 49 41 30 33 3a 20 51 52 47 20 20 20 6e 65 77     #IA03: QRG   new
     3b4:	50 77 6d 56 61 6c 20 3d 20 25 30 33 64 2e 25 30     PwmVal = %03d.%0
     3c4:	33 64 2c 20 09 70 77 6d 43 6f 72 53 74 65 70 73     3d, .pwmCorSteps
     3d4:	20 20 20 20 20 20 20 20 20 3d 20 25 2b 30 34 64              = %+04d
     3e4:	2e 25 30 33 64 0a 00                                .%03d..

000003eb <PM_FORMAT_IA02>:
     3eb:	23 49 41 30 32 3a 20 43 6c 6f 63 6b 20 6c 6f 63     #IA02: Clock loc
     3fb:	61 6c 4d 65 61 6e 46 6c 6f 61 74 43 6c 6f 63 6b     alMeanFloatClock
     40b:	44 69 66 66 20 3d 20 25 63 25 30 33 64 2e 25 30     Diff = %c%03d.%0
     41b:	33 64 48 7a 20 40 32 30 4d 48 7a 2c 20 09 71 72     3dHz @20MHz, .qr
     42b:	67 44 65 76 5f 48 7a 20 3d 20 25 63 25 30 33 64     gDev_Hz = %c%03d
     43b:	2e 25 30 33 64 48 7a 20 40 31 30 4d 48 7a 2c 20     .%03dHz @10MHz, 
     44b:	09 70 70 6d 20 3d 20 25 63 25 30 32 64 2e 25 30     .ppm = %c%02d.%0
     45b:	36 64 0a 00                                         6d..

0000045f <PM_FORMAT_IA01>:
     45f:	23 49 41 30 31 3a 20 43 6c 6f 63 6b 20 69 6e 74     #IA01: Clock int
     46f:	32 30 4d 48 7a 43 6c 6f 63 6b 44 69 66 66 20 20     20MHzClockDiff  
     47f:	20 20 20 20 20 3d 20 25 2b 30 34 6c 69 20 20 48          = %+04li  H
     48f:	7a 20 40 32 30 4d 48 7a 0a 00                       z @20MHz..

00000499 <PM_FORMAT_ID02>:
     499:	23 49 44 30 32 3a 20 2b 2f 2d 20 4b 45 59 20 09     #ID02: +/- KEY .
     4a9:	6d 61 69 6e 50 77 6d 54 65 72 6d 69 6e 61 6c 41     mainPwmTerminalA
     4b9:	64 6a 20 3d 20 25 64 2e 25 30 37 64 2c 20 09 6c     dj = %d.%07d, .l
     4c9:	6f 63 61 6c 46 61 73 74 50 77 6d 56 61 6c 4e 65     ocalFastPwmValNe
     4d9:	78 74 20 3d 20 25 30 33 75 20 2b 20 6c 6f 63 61     xt = %03u + loca
     4e9:	6c 46 61 73 74 50 77 6d 53 75 62 43 6d 70 4e 65     lFastPwmSubCmpNe
     4f9:	78 74 20 3d 20 25 30 33 75 0a 00                    xt = %03u..

00000504 <PM_FORMAT_ID01>:
     504:	23 49 44 30 31 3a 20 2b 2f 2d 20 4b 45 59 20 09     #ID01: +/- KEY .
     514:	6d 61 69 6e 50 77 6d 54 65 72 6d 69 6e 61 6c 41     mainPwmTerminalA
     524:	64 6a 20 3d 20 25 64 2e 25 30 37 64 2c 20 09 70     dj = %d.%07d, .p
     534:	75 6c 6c 50 77 6d 56 61 6c 42 65 66 6f 72 65 20     ullPwmValBefore 
     544:	20 20 20 3d 20 25 30 33 75 20 2b 20 66 61 73 74        = %03u + fast
     554:	50 77 6d 53 75 62 43 6d 70 42 65 66 6f 72 65 20     PwmSubCmpBefore 
     564:	20 20 20 3d 20 25 30 33 75 0a 00                       = %03u..

0000056f <PM_FORMAT_TA14>:
     56f:	23 54 41 31 34 3a 20 6d 61 69 6e 52 65 66 43 6c     #TA14: mainRefCl
     57f:	6b 53 74 61 74 65 20 3d 20 30 78 25 31 58 0a 00     kState = 0x%1X..

0000058f <PM_FORMAT_TA13>:
     58f:	23 54 41 31 33 3a 20 50 57 4d 20 3d 20 25 30 33     #TA13: PWM = %03
     59f:	75 2c 20 09 53 75 62 2d 50 57 4d 20 3d 20 25 30     u, .Sub-PWM = %0
     5af:	33 75 0a 00                                         3u..

000005b3 <PM_FORMAT_TA12>:
     5b3:	23 54 41 31 32 3a 20 70 70 73 53 74 61 6d 70 43     #TA12: ppsStampC
     5c3:	74 72 31 6d 73 20 20 3d 20 25 30 39 6c 75 2c 20     tr1ms  = %09lu, 
     5d3:	09 70 70 73 53 74 61 6d 70 49 43 52 31 20 20 20     .ppsStampICR1   
     5e3:	3d 20 25 30 35 75 2c 20 09 70 70 73 53 74 61 6d     = %05u, .ppsStam
     5f3:	70 43 74 72 31 6d 73 5f 6c 61 73 74 20 20 3d 20     pCtr1ms_last  = 
     603:	25 30 39 6c 75 2c 20 09 70 70 73 53 74 61 6d 70     %09lu, .ppsStamp
     613:	49 43 52 31 5f 6c 61 73 74 20 20 20 3d 20 25 30     ICR1_last   = %0
     623:	35 75 0a 00                                         5u..

00000627 <PM_FORMAT_TA11>:
     627:	23 54 41 31 31 3a 20 6c 6f 63 61 6c 46 61 73 74     #TA11: localFast
     637:	43 74 72 31 6d 73 20 3d 20 25 30 39 6c 75 2c 20     Ctr1ms = %09lu, 
     647:	09 6c 6f 63 61 6c 46 61 73 74 54 43 4e 54 31 20     .localFastTCNT1 
     657:	3d 20 25 30 35 75 0a 00                             = %05u..

0000065f <PM_FORMAT_TA03>:
     65f:	23 54 41 30 33 3a 20 54 65 6d 70 20 3d 20 25 30     #TA03: Temp = %0
     66f:	34 75 20 28 25 64 2e 25 31 64 43 29 0a 00           4u (%d.%1dC)..

0000067d <PM_FORMAT_TA02>:
     67d:	23 54 41 30 32 3a 20 41 44 43 31 20 3d 20 25 30     #TA02: ADC1 = %0
     68d:	34 75 20 28 25 64 2e 25 30 33 64 56 29 0a 00        4u (%d.%03dV)..

0000069c <PM_FORMAT_TA01>:
     69c:	23 54 41 30 31 3a 20 41 44 43 30 20 3d 20 25 30     #TA01: ADC0 = %0
     6ac:	34 75 20 28 25 64 2e 25 30 33 64 56 29 0a 00        4u (%d.%03dV)..

000006bb <PM_FORMAT_GP05>:
     6bb:	23 47 50 30 35 3a 20 4c 61 74 20 3d 20 25 63 20     #GP05: Lat = %c 
     6cb:	25 30 34 64 2e 25 30 34 64 2c 20 4c 6f 6e 20 3d     %04d.%04d, Lon =
     6db:	20 25 63 20 25 30 35 64 2e 25 30 34 64 2c 20 48      %c %05d.%04d, H
     6eb:	65 69 67 68 74 20 3d 20 25 64 2e 25 30 32 64 20     eight = %d.%02d 
     6fb:	6d 0a 00                                            m..

000006fe <PM_FORMAT_GP04>:
     6fe:	23 47 50 30 34 3a 20 50 44 4f 50 20 3d 20 25 64     #GP04: PDOP = %d
     70e:	2e 25 30 32 64 2c 20 48 44 4f 50 20 3d 20 25 64     .%02d, HDOP = %d
     71e:	2e 25 30 32 64 2c 20 56 44 4f 50 20 3d 20 25 64     .%02d, VDOP = %d
     72e:	2e 25 30 32 64 2c 0a 00                             .%02d,..

00000736 <PM_FORMAT_GP03>:
     736:	23 47 50 30 33 3a 20 53 61 74 73 55 73 65 64 20     #GP03: SatsUsed 
     746:	3d 20 25 30 32 64 2c 20 53 61 74 73 45 70 68 69     = %02d, SatsEphi
     756:	6d 5f 47 70 73 47 61 6c 69 6c 65 6f 51 7a 73 73     m_GpsGalileoQzss
     766:	20 3d 20 25 30 32 64 2c 20 53 61 74 73 45 70 68      = %02d, SatsEph
     776:	69 6d 5f 47 6c 6f 6e 61 73 73 20 3d 20 25 30 32     im_Glonass = %02
     786:	64 0a 00                                            d..

00000789 <PM_FORMAT_GP02>:
     789:	23 47 50 30 32 3a 20 4d 6f 64 65 32 20 3d 20 25     #GP02: Mode2 = %
     799:	31 64 2c 20 50 6f 73 46 69 78 49 6e 64 20 3d 20     1d, PosFixInd = 
     7a9:	25 31 64 0a 00                                      %1d..

000007ae <PM_FORMAT_GP01>:
     7ae:	23 47 50 30 31 3a 20 44 61 74 65 20 3d 20 25 30     #GP01: Date = %0
     7be:	38 6c 64 2c 20 54 69 6d 65 20 3d 20 25 30 36 6c     8ld, Time = %06l
     7ce:	64 2e 25 30 33 64 0a 00                             d.%03d..

000007d6 <PM_FORMAT_GP00>:
     7d6:	0a 23 47 50 30 30 3a 20 3d 3d 3d 3d 3d 3d 3d 00     .#GP00: =======.

000007e6 <PM_FORMAT_GPS_WEST1_EAST1>:
     7e6:	24 50 4d 54 4b 33 35 33 2c 31 2c 31 2a 33 37 0d     $PMTK353,1,1*37.
     7f6:	0a 00                                               ..

000007f8 <PM_FORMAT_GPS_WEST1_EAST0>:
     7f8:	24 50 4d 54 4b 33 35 33 2c 31 2c 30 2a 33 36 0d     $PMTK353,1,0*36.
     808:	0a 00                                               ..

0000080a <PM_FORMAT_GPS_WEST0_EAST0>:
     80a:	24 50 4d 54 4b 33 35 33 2c 30 2c 30 2a 33 37 0d     $PMTK353,0,0*37.
     81a:	0a 00                                               ..

0000081c <PM_FORMAT_GPS_WARM_RESTART>:
     81c:	24 50 4d 54 4b 31 30 32 2a 33 31 0d 0a 00           $PMTK102*31...

0000082a <PM_FORMAT_GPS_BAUDRATE>:
     82a:	24 50 4d 54 4b 32 35 31 2c 39 36 30 30 2a 31 37     $PMTK251,9600*17
     83a:	0d 0a 00                                            ...

0000083d <PM_FORMAT_GPS_CR_LF>:
     83d:	0d 0a 00                                            ...

00000840 <PM_FORMAT_VERSION>:
     840:	0a 3d 3d 3d 20 44 46 34 49 41 48 20 2d 20 31 30     .=== DF4IAH - 10
     850:	20 4d 48 7a 20 52 65 66 65 72 65 6e 63 65 20 4f      MHz Reference O
     860:	73 63 69 6c 6c 61 74 6f 72 20 3d 3d 3d 0a 3d 3d     scillator ===.==
     870:	3d 20 56 65 72 3a 20 32 30 25 30 33 64 25 30 33     = Ver: 20%03d%03
     880:	64 00                                               d.

00000882 <PM_INTERPRETER_UNKNOWN>:
     882:	0a 2a 3f 2a 20 20 75 6e 6b 6e 6f 77 6e 20 63 6f     .*?*  unknown co
     892:	6d 6d 61 6e 64 20 27 25 73 27 20 72 65 63 65 69     mmand '%s' recei
     8a2:	76 65 64 2c 20 74 72 79 20 48 45 4c 50 2e 0a 3e     ved, try HELP..>
	...

000008b3 <PM_INTERPRETER_HELP14>:
     8b3:	0a 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 3e 00        .===========.>.

000008c2 <PM_INTERPRETER_HELP13>:
     8c2:	0a 2b 2f 2d 20 3c 50 57 4d 20 76 61 6c 75 65 3e     .+/- <PWM value>
     8d2:	09 09 63 6f 72 72 65 63 74 69 6f 6e 20 76 61 6c     ..correction val
     8e2:	75 65 20 74 6f 20 62 65 20 61 64 64 65 64 2e 00     ue to be added..

000008f2 <PM_INTERPRETER_HELP12>:
     8f2:	0a 57 52 49 54 45 50 57 4d 09 09 09 73 74 6f 72     .WRITEPWM...stor
     902:	65 20 63 75 72 72 65 6e 74 20 50 57 4d 20 61 73     e current PWM as
     912:	20 64 65 66 61 75 6c 74 20 76 61 6c 75 65 2e 0a      default value..
     922:	57 52 49 54 45 54 45 4d 50 20 3c 54 45 4d 50 20     WRITETEMP <TEMP 
     932:	76 61 6c 75 65 3e 09 09 77 72 69 74 65 20 63 75     value>..write cu
     942:	72 72 65 6e 74 20 74 65 6d 70 65 72 61 74 75 72     rrent temperatur
     952:	65 20 61 73 20 64 65 66 61 75 6c 74 20 76 61 6c     e as default val
     962:	75 65 2e 00                                         ue..

00000966 <PM_INTERPRETER_HELP11>:
     966:	0a 54 45 53 54 09 09 09 09 74 6f 67 67 6c 65 73     .TEST....toggles
     976:	20 63 6f 75 6e 74 65 72 20 74 65 73 74 2e 00         counter test..

00000985 <PM_INTERPRETER_HELP10>:
     985:	0a 53 54 41 43 4b 09 09 09 09 74 6f 67 67 6c 65     .STACK....toggle
     995:	73 20 73 74 61 63 6b 20 6d 75 6e 67 2d 77 61 6c     s stack mung-wal
     9a5:	6c 20 74 65 73 74 2e 00                             l test..

000009ad <PM_INTERPRETER_HELP09>:
     9ad:	0a 53 45 52 4f 46 46 09 09 09 09 73 77 69 74 63     .SEROFF....switc
     9bd:	68 20 73 65 72 69 61 6c 20 63 6f 6d 6d 75 6e 69     h serial communi
     9cd:	63 61 74 69 6f 6e 20 4f 46 46 2e 0a 53 45 52 4f     cation OFF..SERO
     9dd:	4e 09 09 09 09 73 77 69 74 63 68 20 73 65 72 69     N....switch seri
     9ed:	61 6c 20 63 6f 6d 6d 75 6e 69 63 61 74 69 6f 6e     al communication
     9fd:	20 4f 4e 2e 00                                       ON..

00000a02 <PM_INTERPRETER_HELP08>:
     a02:	0a 53 45 52 42 41 55 44 20 3c 62 61 75 64 3e 09     .SERBAUD <baud>.
     a12:	09 09 73 65 74 74 69 6e 67 20 73 65 72 69 61 6c     ..setting serial
     a22:	20 62 61 75 64 20 72 61 74 65 2e 00                  baud rate..

00000a2e <PM_INTERPRETER_HELP07>:
     a2e:	0a 4c 45 44 4f 46 46 09 09 09 09 73 77 69 74 63     .LEDOFF....switc
     a3e:	68 20 62 61 63 6b 6c 69 67 68 74 20 4f 46 46 2e     h backlight OFF.
     a4e:	0a 4c 45 44 4f 4e 09 09 09 09 73 77 69 74 63 68     .LEDON....switch
     a5e:	20 62 61 63 6b 6c 69 67 68 74 20 4f 4e 2e 00         backlight ON..

00000a6d <PM_INTERPRETER_HELP06>:
     a6d:	0a 49 4e 46 4f 09 09 09 09 74 6f 67 67 6c 65 73     .INFO....toggles
     a7d:	20 61 64 64 69 74 69 6f 6e 61 6c 20 70 72 69 6e      additional prin
     a8d:	74 65 64 20 69 6e 66 6f 73 2e 00                    ted infos..

00000a98 <PM_INTERPRETER_HELP05>:
     a98:	0a 48 45 4c 50 09 09 09 09 74 68 69 73 20 6d 65     .HELP....this me
     aa8:	73 73 61 67 65 2e 00                                ssage..

00000aaf <PM_INTERPRETER_HELP03>:
     aaf:	0a 41 50 43 4f 46 46 09 09 09 09 73 77 69 74 63     .APCOFF....switc
     abf:	68 20 41 50 43 20 28 61 75 74 6f 6d 61 74 69 63     h APC (automatic
     acf:	20 70 68 61 73 65 20 63 6f 6e 74 72 6f 6c 29 20      phase control) 
     adf:	6f 66 66 2e 0a 41 50 43 4f 4e 09 09 09 09 73 77     off..APCON....sw
     aef:	69 74 63 68 20 41 50 43 20 28 61 75 74 6f 6d 61     itch APC (automa
     aff:	74 69 63 20 70 68 61 73 65 20 63 6f 6e 74 72 6f     tic phase contro
     b0f:	6c 29 20 6f 6e 2e 00                                l) on..

00000b16 <PM_INTERPRETER_HELP02>:
     b16:	0a 41 46 43 4f 46 46 09 09 09 09 73 77 69 74 63     .AFCOFF....switc
     b26:	68 20 41 46 43 20 28 61 75 74 6f 6d 61 74 69 63     h AFC (automatic
     b36:	20 66 72 65 71 75 65 6e 63 79 20 63 6f 6e 74 72      frequency contr
     b46:	6f 6c 29 20 6f 66 66 2e 0a 41 46 43 4f 4e 09 09     ol) off..AFCON..
     b56:	09 09 73 77 69 74 63 68 20 41 46 43 20 28 61 75     ..switch AFC (au
     b66:	74 6f 6d 61 74 69 63 20 66 72 65 71 75 65 6e 63     tomatic frequenc
     b76:	79 20 63 6f 6e 74 72 6f 6c 29 20 6f 6e 2e 00        y control) on..

00000b85 <PM_INTERPRETER_HELP01>:
     b85:	0a 3d 3d 3d 20 48 45 4c 50 20 3d 3d 3d 0a 0a 24     .=== HELP ===..$
     b95:	20 3c 4e 4d 45 41 2d 4d 65 73 73 61 67 65 3e 09      <NMEA-Message>.
     ba5:	09 73 65 6e 64 73 20 6d 65 73 73 61 67 65 20 74     .sends message t
     bb5:	6f 20 74 68 65 20 47 50 53 20 6d 6f 64 75 6c 65     o the GPS module
     bc5:	2e 00                                               ..

00000bc7 <PM_GPIB_SCM_IDN>:
     bc7:	2a 49 44 4e 3f 00                                   *IDN?.

00000bcd <PM_COMMAND_WRITETEMP>:
     bcd:	57 52 49 54 45 54 45 4d 50 00                       WRITETEMP.

00000bd7 <PM_COMMAND_WRITEPWM>:
     bd7:	57 52 49 54 45 50 57 4d 00                          WRITEPWM.

00000be0 <PM_COMMAND_TEST>:
     be0:	54 45 53 54 00                                      TEST.

00000be5 <PM_COMMAND_STACK>:
     be5:	53 54 41 43 4b 00                                   STACK.

00000beb <PM_COMMAND_SERON>:
     beb:	53 45 52 4f 4e 00                                   SERON.

00000bf1 <PM_COMMAND_SEROFF>:
     bf1:	53 45 52 4f 46 46 00                                SEROFF.

00000bf8 <PM_COMMAND_SERBAUD>:
     bf8:	53 45 52 42 41 55 44 00                             SERBAUD.

00000c00 <PM_COMMAND_LEDON>:
     c00:	4c 45 44 4f 4e 00                                   LEDON.

00000c06 <PM_COMMAND_LEDOFF>:
     c06:	4c 45 44 4f 46 46 00                                LEDOFF.

00000c0d <PM_COMMAND_INFO>:
     c0d:	49 4e 46 4f 00                                      INFO.

00000c12 <PM_COMMAND_HELP>:
     c12:	48 45 4c 50 00                                      HELP.

00000c17 <PM_COMMAND_APCON>:
     c17:	41 50 43 4f 4e 00                                   APCON.

00000c1d <PM_COMMAND_APCOFF>:
     c1d:	41 50 43 4f 46 46 00                                APCOFF.

00000c24 <PM_COMMAND_AFCON>:
     c24:	41 46 43 4f 4e 00                                   AFCON.

00000c2a <PM_COMMAND_AFCOFF>:
     c2a:	41 46 43 4f 46 46 00                                AFCOFF.

00000c31 <eeprom_defaultValues_content>:
     c31:	44 46 34 49 41 48 20 31 30 4d 68 7a 2d 52 65 66     DF4IAH 10Mhz-Ref
     c41:	a0 ab 00 00 01 ff ff ff ff ff ff ff 00 00 0c b0     ................
     c51:	a5 2c 8f 40 48 e1 8a 3f 00 80 af 43 00 a0 87 3f     .,.@H..?...C...?
     c61:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 1c b0     ................
     c71:	cd cc 94 c0 5c 8f c2 3f b8 1e 05 3d ff ff ff ff     ....\..?...=....
     c81:	ff ff 71 3d 8a 3f 33 33 13 40 78 00 00 00 2c b0     ..q=.?33.@x...,.
     c91:	80 25 08 01 00 00 00 00 ff ff ff ff ff ff ff ff     .%..............
     ca1:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 3c b0     ..............<.
     cb1:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
     cc1:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 4c b0     ..............L.

00000cd1 <usbDescriptorConfiguration>:
     cd1:	09 02 19 00 01 01 00 80 69 09 04 00 00 01 ff 00     ........i.......
     ce1:	00 00 07 05 81 03 08 00 0a                          .........

00000cea <usbDescriptorDevice>:
     cea:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
     cfa:	03 01                                               ..

00000cfc <usbDescriptorStringSerialNumber>:
     cfc:	10 03 50 00 72 00 6f 00 74 00 6f 00 2d 00 31 00     ..P.r.o.t.o.-.1.

00000d0c <usbDescriptorStringDevice>:
     d0c:	2a 03 44 00 46 00 34 00 49 00 41 00 48 00 2d 00     *.D.F.4.I.A.H.-.
     d1c:	31 00 30 00 4d 00 48 00 7a 00 2d 00 52 00 65 00     1.0.M.H.z.-.R.e.
     d2c:	66 00 2d 00 4f 00 73 00 63 00                       f.-.O.s.c.

00000d36 <usbDescriptorStringVendor>:
     d36:	0e 03 44 00 46 00 34 00 49 00 41 00 48 00           ..D.F.4.I.A.H.

00000d44 <usbDescriptorString0>:
     d44:	04 03 09 04                                         ....

00000d48 <__c.2529>:
     d48:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     d58:	47 00                                               G.

00000d5a <pstr_an>:
     d5a:	61 6e 00                                            an.

00000d5d <pstr_nfinity>:
     d5d:	6e 66 69 6e 69 74 79 00                             nfinity.

00000d65 <pwr_m10>:
     d65:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     d75:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000d7d <pwr_p10>:
     d7d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     d8d:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000d96 <__ctors_end>:
     d96:	11 24       	eor	r1, r1
     d98:	1f be       	out	0x3f, r1	; 63
     d9a:	cf ef       	ldi	r28, 0xFF	; 255
     d9c:	d8 e0       	ldi	r29, 0x08	; 8
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	cd bf       	out	0x3d, r28	; 61

00000da2 <__do_copy_data>:
     da2:	11 e0       	ldi	r17, 0x01	; 1
     da4:	a0 e0       	ldi	r26, 0x00	; 0
     da6:	b1 e0       	ldi	r27, 0x01	; 1
     da8:	ec e4       	ldi	r30, 0x4C	; 76
     daa:	ff e6       	ldi	r31, 0x6F	; 111
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <__do_copy_data+0x10>
     dae:	05 90       	lpm	r0, Z+
     db0:	0d 92       	st	X+, r0
     db2:	a8 31       	cpi	r26, 0x18	; 24
     db4:	b1 07       	cpc	r27, r17
     db6:	d9 f7       	brne	.-10     	; 0xdae <__do_copy_data+0xc>

00000db8 <__do_clear_bss>:
     db8:	28 e0       	ldi	r18, 0x08	; 8
     dba:	a8 e1       	ldi	r26, 0x18	; 24
     dbc:	b1 e0       	ldi	r27, 0x01	; 1
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <.do_clear_bss_start>

00000dc0 <.do_clear_bss_loop>:
     dc0:	1d 92       	st	X+, r1

00000dc2 <.do_clear_bss_start>:
     dc2:	a4 32       	cpi	r26, 0x24	; 36
     dc4:	b2 07       	cpc	r27, r18
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <.do_clear_bss_loop>
     dc8:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <main>
     dcc:	0c 94 a4 37 	jmp	0x6f48	; 0x6f48 <_exit>

00000dd0 <__bad_interrupt>:
     dd0:	17 c9       	rjmp	.-3538   	; 0x0 <__vectors>

00000dd2 <usbCrc16>:
;   byte    r18 / r22
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     dd2:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     dd4:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xFF
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xFF
     dd8:	9f ef       	ldi	r25, 0xFF	; 255
    rjmp    usbCrc16LoopTest
     dda:	1b c0       	rjmp	.+54     	; 0xe12 <usbCrc16LoopTest>

00000ddc <usbCrc16ByteLoop>:
usbCrc16ByteLoop:
    ld      byte, ptr+
     ddc:	2d 91       	ld	r18, X+
    eor     resCrcL, byte   ; resCrcL is now 'x' in table()
     dde:	82 27       	eor	r24, r18
    mov     byte, resCrcL   ; compute parity of 'x'
     de0:	28 2f       	mov	r18, r24
    swap    byte
     de2:	22 95       	swap	r18
    eor     byte, resCrcL
     de4:	28 27       	eor	r18, r24
    mov     scratch, byte
     de6:	72 2f       	mov	r23, r18
    lsr     byte
     de8:	26 95       	lsr	r18
    lsr     byte
     dea:	26 95       	lsr	r18
    eor     byte, scratch
     dec:	27 27       	eor	r18, r23
    inc     byte
     dee:	23 95       	inc	r18
    lsr     byte
     df0:	26 95       	lsr	r18
    andi    byte, 1         ; byte is now parity(x)
     df2:	21 70       	andi	r18, 0x01	; 1
    mov     scratch, resCrcL
     df4:	78 2f       	mov	r23, r24
    mov     resCrcL, resCrcH
     df6:	89 2f       	mov	r24, r25
    eor     resCrcL, byte   ; low byte of if(parity(x)) value ^= 0xc001;
     df8:	82 27       	eor	r24, r18
    neg     byte
     dfa:	21 95       	neg	r18
    andi    byte, 0xc0
     dfc:	20 7c       	andi	r18, 0xC0	; 192
    mov     resCrcH, byte   ; high byte of if(parity(x)) value ^= 0xc001;
     dfe:	92 2f       	mov	r25, r18
    clr     byte
     e00:	22 27       	eor	r18, r18
    lsr     scratch
     e02:	76 95       	lsr	r23
    ror     byte
     e04:	27 95       	ror	r18
    eor     resCrcH, scratch
     e06:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     e08:	82 27       	eor	r24, r18
    lsr     scratch
     e0a:	76 95       	lsr	r23
    ror     byte
     e0c:	27 95       	ror	r18
    eor     resCrcH, scratch
     e0e:	97 27       	eor	r25, r23
    eor     resCrcL, byte
     e10:	82 27       	eor	r24, r18

00000e12 <usbCrc16LoopTest>:
usbCrc16LoopTest:
    subi    argLen, 1
     e12:	61 50       	subi	r22, 0x01	; 1
    brsh    usbCrc16ByteLoop
     e14:	18 f7       	brcc	.-58     	; 0xddc <usbCrc16ByteLoop>
    com     resCrcL
     e16:	80 95       	com	r24
    com     resCrcH
     e18:	90 95       	com	r25
    ret
     e1a:	08 95       	ret

00000e1c <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     e1c:	da df       	rcall	.-76     	; 0xdd2 <usbCrc16>
    st      ptr+, resCrcL
     e1e:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     e20:	9d 93       	st	X+, r25
    ret
     e22:	08 95       	ret

00000e24 <__vector_1>:
; bitcnt is used to determine when a stuff bit is due
; cnt holds the number of bytes left in the receive buffer

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-28] push only what is necessary to sync with edge ASAP
     e24:	cf 93       	push	r28
    in      YL, SREG            ;[-26]
     e26:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-25]
     e28:	cf 93       	push	r28
    push    YH                  ;[-23]
     e2a:	df 93       	push	r29

00000e2c <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     e2c:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     e2e:	33 9b       	sbis	0x06, 3	; 6
    brne    waitForJ        ; just make sure we have ANY timeout
     e30:	e9 f7       	brne	.-6      	; 0xe2c <waitForJ>

00000e32 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-19]
     e32:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK              ;[-18]
     e34:	11 c0       	rjmp	.+34     	; 0xe58 <foundK>
    sbis    USBIN, USBMINUS
     e36:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <foundK>
    sbis    USBIN, USBMINUS
     e3a:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e3c:	0d c0       	rjmp	.+26     	; 0xe58 <foundK>
    sbis    USBIN, USBMINUS
     e3e:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e40:	0b c0       	rjmp	.+22     	; 0xe58 <foundK>
    sbis    USBIN, USBMINUS
     e42:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e44:	09 c0       	rjmp	.+18     	; 0xe58 <foundK>
    sbis    USBIN, USBMINUS
     e46:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e48:	07 c0       	rjmp	.+14     	; 0xe58 <foundK>
    sbis    USBIN, USBMINUS
     e4a:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e4c:	05 c0       	rjmp	.+10     	; 0xe58 <foundK>
    sbis    USBIN, USBMINUS
     e4e:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e50:	03 c0       	rjmp	.+6      	; 0xe58 <foundK>
    sbis    USBIN, USBMINUS
     e52:	33 9b       	sbis	0x06, 3	; 6
    rjmp    foundK
     e54:	01 c0       	rjmp	.+2      	; 0xe58 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     e56:	83 c0       	rjmp	.+262    	; 0xf5e <sofError>

00000e58 <foundK>:
foundK:                         ;[-16]
;{3, 5} after falling D- edge, average delay: 4 cycles
;bit0 should be at 34 for center sampling. Currently at 4 so 30 cylces till bit 0 sample
;use 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-16]
     e58:	6f 93       	push	r22
;   [---]                       ;[-15]
    lds     YL, usbInputBufOffset;[-14]
     e5a:	c0 91 07 08 	lds	r28, 0x0807	; 0x800807 <usbInputBufOffset>
;   [---]                       ;[-13]
    clr     YH                  ;[-12]
     e5e:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-11] [rx loop init]
     e60:	c2 5f       	subi	r28, 0xF2	; 242
    sbci    YH, hi8(-(usbRxBuf));[-10] [rx loop init]
     e62:	d7 4f       	sbci	r29, 0xF7	; 247
    push    shift               ;[-9]
     e64:	2f 93       	push	r18
;   [---]                       ;[-8]
    ldi     shift,0x40          ;[-7] set msb to "1" so processing bit7 can be detected
     e66:	20 e4       	ldi	r18, 0x40	; 64
    nop2                        ;[-6]
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <foundK+0x12>
;   [---]                       ;[-5]
    ldi     bitcnt, 5           ;[-4] [rx loop init]
     e6a:	65 e0       	ldi	r22, 0x05	; 5
    sbis    USBIN, USBMINUS     ;[-3] we want two bits K (sample 3 cycles too early)
     e6c:	33 9b       	sbis	0x06, 3	; 6
    rjmp    haveTwoBitsK        ;[-2]
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <haveTwoBitsK>
    pop     shift               ;[-1] undo the push from before
     e70:	2f 91       	pop	r18
    pop     bitcnt              ;[1] 
     e72:	6f 91       	pop	r22
    rjmp    waitForK            ;[3] this was not the end of sync, retry
     e74:	de cf       	rjmp	.-68     	; 0xe32 <waitForK>

00000e76 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1                  ;[0]
     e76:	0f 93       	push	r16
    push    x2                  ;[2]
     e78:	1f 93       	push	r17
    push    x3                  ;[4] (leap2)
     e7a:	4f 93       	push	r20
    ldi     leap2, 0x55         ;[6] add leap cycle on 2nd,5th,8th,... stuff bit
     e7c:	45 e5       	ldi	r20, 0x55	; 85
    push    x4                  ;[7] == leap
     e7e:	5f 93       	push	r21
    ldi     leap, 0x55          ;[9] skip leap cycle on 2nd,5th,8th,... byte received
     e80:	55 e5       	ldi	r21, 0x55	; 85
    push    cnt                 ;[10]
     e82:	3f 93       	push	r19
    ldi     cnt, USB_BUFSIZE    ;[12] [rx loop init]
     e84:	3b e0       	ldi	r19, 0x0B	; 11
    ldi     x2, 1<<USBPLUS      ;[13] current line state is K state. D+=="1", D-=="0"
     e86:	14 e0       	ldi	r17, 0x04	; 4

00000e88 <bit0>:
bit0:       
    in      x1, USBIN           ;[0] sample line state
     e88:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     e8a:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;[2] make bit0 14 cycles long
     e8c:	2e c0       	rjmp	.+92     	; 0xeea <handleBit>

00000e8e <b6checkUnstuff>:
;----------------------------------------------------------------------------
; Process bit7. However, bit 6 still may need unstuffing.
;----------------------------------------------------------------------------

b6checkUnstuff:
    dec     bitcnt              ;[9]
     e8e:	6a 95       	dec	r22
    breq    unstuff6            ;[10]
     e90:	c9 f0       	breq	.+50     	; 0xec4 <unstuff6>

00000e92 <bit7>:
bit7:
    subi    cnt, 1              ;[11] cannot use dec becaus it does not affect the carry flag
     e92:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow            ;[12] Too many bytes received. Ignore packet
     e94:	d8 f1       	brcs	.+118    	; 0xf0c <overflow>
    in      x1, USBIN           ;[0] sample line state
     e96:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     e98:	0c 70       	andi	r16, 0x0C	; 12
    cpse    x1, x2              ;[2] when previous line state equals current line state, handle "1"
     e9a:	01 13       	cpse	r16, r17
    rjmp    b7handle0           ;[3] when line state differs, handle "0"
     e9c:	0b c0       	rjmp	.+22     	; 0xeb4 <b7handle0>
    sec                         ;[4]
     e9e:	08 94       	sec
    ror     shift               ;[5] shift "1" into the data
     ea0:	27 95       	ror	r18
    st      y+, shift           ;[6] store the data into the buffer
     ea2:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[7] reset data for receiving the next byte
     ea4:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[9] trick to introduce a leap cycle every 3 bytes
     ea6:	55 55       	subi	r21, 0x55	; 85
    brcc    nextInst            ;[10 or 11] it will fail after 85 bytes. However low speed can only receive 11
     ea8:	00 f4       	brcc	.+0      	; 0xeaa <bit7+0x18>
    dec     bitcnt              ;[11 or 12]
     eaa:	6a 95       	dec	r22
    brne    bit0                ;[12 or 13]
     eac:	69 f7       	brne	.-38     	; 0xe88 <bit0>
    ldi     x1, 1               ;[13 or 14] unstuffing bit 7
     eae:	01 e0       	ldi	r16, 0x01	; 1
    in      bitcnt, USBIN       ;[0] sample stuff bit
     eb0:	66 b1       	in	r22, 0x06	; 6
    rjmp    unstuff             ;[1]
     eb2:	0b c0       	rjmp	.+22     	; 0xeca <unstuff>

00000eb4 <b7handle0>:

b7handle0:
    mov     x2,x1               ;[5] Set x2 to current line state
     eb4:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[6]
     eb6:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[7] shift "0" into the data
     eb8:	26 95       	lsr	r18
    st      y+, shift           ;[8] store data into the buffer
     eba:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[10] reset data for receiving the next byte
     ebc:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[11] trick to introduce a leap cycle every 3 bytes
     ebe:	55 55       	subi	r21, 0x55	; 85
    brcs    bit0                ;[12] it will fail after 85 bytes. However low speed can only receive 11
     ec0:	18 f3       	brcs	.-58     	; 0xe88 <bit0>
    rjmp    bit0                ;[13]
     ec2:	e2 cf       	rjmp	.-60     	; 0xe88 <bit0>

00000ec4 <unstuff6>:
; Handle unstuff
; x1==0xFF indicate unstuffing bit6
;----------------------------------------------------------------------------

unstuff6:
    ldi     x1,0xFF             ;[12] indicate unstuffing bit 6
     ec4:	0f ef       	ldi	r16, 0xFF	; 255
    in      bitcnt, USBIN       ;[0]  sample stuff bit
     ec6:	66 b1       	in	r22, 0x06	; 6
	...

00000eca <unstuff>:
    nop                         ;[1]  fix timing
unstuff:                        ;b0-5  b6   b7
    mov     x2,bitcnt           ;[3]  [2]  [3]  Set x2 to match line state
     eca:	16 2f       	mov	r17, r22
    subi    leap2, 0x55         ;[4]  [3]  [4]  delay loop
     ecc:	45 55       	subi	r20, 0x55	; 85
    brcs    nextInst            ;[5]  [4]  [5]  add one cycle every three stuff bits
     ece:	00 f0       	brcs	.+0      	; 0xed0 <unstuff+0x6>
    sbci    leap2,0             ;[6]  [5]  [6]
     ed0:	40 40       	sbci	r20, 0x00	; 0
    ldi     bitcnt,6            ;[7]  [6]  [7]  reset bit stuff counter
     ed2:	66 e0       	ldi	r22, 0x06	; 6
    andi    x2, USBMASK         ;[8]  [7]  [8] only keep D+ and D-
     ed4:	1c 70       	andi	r17, 0x0C	; 12
    cpi     x1,0                ;[9]  [8]  [9]
     ed6:	00 30       	cpi	r16, 0x00	; 0
    brmi    bit7                ;[10] [9]  [10] finished unstuffing bit6 When x1<0
     ed8:	e2 f2       	brmi	.-72     	; 0xe92 <bit7>
    breq    bitloop             ;[11] ---  [11] finished unstuffing bit0-5 when x1=0
     eda:	21 f0       	breq	.+8      	; 0xee4 <bitloop>
    nop                         ;---  ---  [12]
     edc:	00 00       	nop
    in      x1, USBIN           ;---  ---  [0] sample line state for bit0
     ede:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;---  ---  [1] filter only D+ and D- bits
     ee0:	0c 70       	andi	r16, 0x0C	; 12
    rjmp    handleBit           ;---  ---  [2] make bit0 14 cycles long
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <handleBit>

00000ee4 <bitloop>:

;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------
bitloop:
    in      x1, USBIN           ;[0] sample line state
     ee4:	06 b1       	in	r16, 0x06	; 6
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     ee6:	0c 70       	andi	r16, 0x0C	; 12
    breq    se0                 ;[2] both lines are low so handle se0
     ee8:	a9 f0       	breq	.+42     	; 0xf14 <se0>

00000eea <handleBit>:
handleBit:
    cpse    x1, x2              ;[3] when previous line state equals current line state, handle "1"
     eea:	01 13       	cpse	r16, r17
    rjmp    handle0             ;[4] when line state differs, handle "0"
     eec:	09 c0       	rjmp	.+18     	; 0xf00 <handle0>
    sec                         ;[5]
     eee:	08 94       	sec
    ror     shift               ;[6] shift "1" into the data
     ef0:	27 95       	ror	r18
    brcs    b6checkUnstuff      ;[7] When after shift C is set, next bit is bit7
     ef2:	68 f2       	brcs	.-102    	; 0xe8e <b6checkUnstuff>
    nop2                        ;[8]
     ef4:	00 c0       	rjmp	.+0      	; 0xef6 <handleBit+0xc>
    dec     bitcnt              ;[10]
     ef6:	6a 95       	dec	r22
    brne    bitloop             ;[11]
     ef8:	a9 f7       	brne	.-22     	; 0xee4 <bitloop>
    ldi     x1,0                ;[12] indicate unstuff for bit other than bit6 or bit7
     efa:	00 e0       	ldi	r16, 0x00	; 0
    in      bitcnt, USBIN       ;[0] sample stuff bit
     efc:	66 b1       	in	r22, 0x06	; 6
    rjmp    unstuff             ;[1]
     efe:	e5 cf       	rjmp	.-54     	; 0xeca <unstuff>

00000f00 <handle0>:

handle0:
    mov     x2, x1              ;[6] Set x2 to current line state
     f00:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[7] reset unstuff counter. 
     f02:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[8] shift "0" into the data
     f04:	26 95       	lsr	r18
    brcs    bit7                ;[9] When after shift C is set, next bit is bit7
     f06:	28 f2       	brcs	.-118    	; 0xe92 <bit7>
    nop                         ;[10]
     f08:	00 00       	nop
    rjmp    bitloop             ;[11] 
     f0a:	ec cf       	rjmp	.-40     	; 0xee4 <bitloop>

00000f0c <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     f0c:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     f0e:	1c bb       	out	0x1c, r17	; 28

00000f10 <ignorePacket>:
ignorePacket:
    clr     token
     f10:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     f12:	19 c0       	rjmp	.+50     	; 0xf46 <handleSetupOrOut>

00000f14 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     f14:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     f16:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     f18:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     f1a:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     f1c:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     f1e:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
     f20:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     f22:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     f24:	09 f1       	breq	.+66     	; 0xf68 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     f26:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     f28:	f9 f0       	breq	.+62     	; 0xf68 <handleData>
    lds     shift, usbDeviceAddr;[17]
     f2a:	20 91 05 08 	lds	r18, 0x0805	; 0x800805 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     f2e:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     f30:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     f32:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     f34:	ed cf       	rjmp	.-38     	; 0xf10 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     f36:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     f38:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     f3a:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     f3c:	51 f1       	breq	.+84     	; 0xf92 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     f3e:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     f40:	11 f0       	breq	.+4      	; 0xf46 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     f42:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     f44:	29 f7       	brne	.-54     	; 0xf10 <ignorePacket>

00000f46 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     f46:	00 93 0c 08 	sts	0x080C, r16	; 0x80080c <usbCurrentTok>

00000f4a <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     f4a:	3f 91       	pop	r19
     f4c:	5f 91       	pop	r21
     f4e:	4f 91       	pop	r20
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	2f 91       	pop	r18
     f56:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
     f58:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     f5a:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     f5c:	67 cf       	rjmp	.-306    	; 0xe2c <waitForJ>

00000f5e <sofError>:
sofError:
    POP_RETI                    ;macro call
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	cf bf       	out	0x3f, r28	; 63
     f64:	cf 91       	pop	r28
    reti
     f66:	18 95       	reti

00000f68 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     f68:	20 91 0c 08 	lds	r18, 0x080C	; 0x80080c <usbCurrentTok>
    tst     shift               ;[20]
     f6c:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     f6e:	69 f3       	breq	.-38     	; 0xf4a <doReturn>
    lds     x2, usbRxLen        ;[22]
     f70:	10 91 0a 08 	lds	r17, 0x080A	; 0x80080a <usbRxLen>
    tst     x2                  ;[24]
     f74:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     f76:	81 f5       	brne	.+96     	; 0xfd8 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     f78:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     f7a:	82 f1       	brmi	.+96     	; 0xfdc <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     f7c:	30 93 0a 08 	sts	0x080A, r19	; 0x80080a <usbRxLen>
    sts     usbRxToken, shift   ;[30]
     f80:	20 93 06 08 	sts	0x0806, r18	; 0x800806 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
     f84:	10 91 07 08 	lds	r17, 0x0807	; 0x800807 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
     f88:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     f8a:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     f8c:	30 93 07 08 	sts	0x0807, r19	; 0x800807 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     f90:	25 c0       	rjmp	.+74     	; 0xfdc <sendAckAndReti>

00000f92 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     f92:	00 91 0a 08 	lds	r16, 0x080A	; 0x80080a <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     f96:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     f98:	fc f4       	brge	.+62     	; 0xfd8 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     f9a:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     f9c:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     f9e:	49 f4       	brne	.+18     	; 0xfb2 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     fa0:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     fa4:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     fa6:	1b c0       	rjmp	.+54     	; 0xfde <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     fa8:	00 93 10 01 	sts	0x0110, r16	; 0x800110 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
     fac:	ca ef       	ldi	r28, 0xFA	; 250
    ldi     YH, hi8(usbTxBuf)   ;[44]
     fae:	d7 e0       	ldi	r29, 0x07	; 7
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     fb0:	1a c0       	rjmp	.+52     	; 0xfe6 <usbSendAndReti>

00000fb2 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     fb2:	30 91 8d 05 	lds	r19, 0x058D	; 0x80058d <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     fb6:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     fb8:	12 c0       	rjmp	.+36     	; 0xfde <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     fba:	00 93 8d 05 	sts	0x058D, r16	; 0x80058d <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     fbe:	ce e8       	ldi	r28, 0x8E	; 142
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     fc0:	d5 e0       	ldi	r29, 0x05	; 5
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     fc2:	11 c0       	rjmp	.+34     	; 0xfe6 <usbSendAndReti>

00000fc4 <bitstuffN>:
; Spec allows 7.5 bit times from EOP to SOP for replies
; 7.5 bit times is 100 cycles. This implementation arrives a bit later at se0
; then specified in the include file but there is plenty of time

bitstuffN:
    eor     x1, x4          ;[8]
     fc4:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[9]
     fc6:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[10]
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <bitstuffN+0x6>
    out     USBOUT, x1      ;[12] <-- out
     fca:	08 b9       	out	0x08, r16	; 8
    rjmp    didStuffN       ;[0]
     fcc:	19 c0       	rjmp	.+50     	; 0x1000 <didStuffN>

00000fce <bitstuff7>:
    
bitstuff7:
    eor     x1, x4          ;[6]
     fce:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[7] Carry is zero due to brcc
     fd0:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[8] compensate for ror shift at branch destination
     fd2:	22 1f       	adc	r18, r18
    nop2                    ;[9]
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <bitstuff7+0x8>
    rjmp    didStuff7       ;[11]
     fd6:	1d c0       	rjmp	.+58     	; 0x1012 <didStuff7>

00000fd8 <sendNakAndReti>:

sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
     fd8:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <sendX3AndReti>

00000fdc <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     fdc:	32 ed       	ldi	r19, 0xD2	; 210

00000fde <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
     fde:	43 2f       	mov	r20, r19

00000fe0 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
     fe0:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
     fe2:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     fe4:	32 e0       	ldi	r19, 0x02	; 2

00000fe6 <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     fe6:	17 b1       	in	r17, 0x07	; 7
    ori     x2, USBMASK     ;[-11]
     fe8:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     fea:	43 9a       	sbi	0x08, 3	; 8
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     fec:	08 b1       	in	r16, 0x08	; 8
    out     USBDDR, x2      ;[-7] <- acquire bus
     fee:	17 b9       	out	0x07, r17	; 7
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     ff0:	5c e0       	ldi	r21, 0x0C	; 12
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     ff2:	20 e8       	ldi	r18, 0x80	; 128

00000ff4 <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x49    ;[-4]        [10] binary 01001001
     ff4:	69 e4       	ldi	r22, 0x49	; 73

00000ff6 <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [10]   [11]
     ff6:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [11]   [12]
     ff8:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [12]   [13]   <-- out N
     ffa:	08 b9       	out	0x08, r16	; 8
    ror     shift           ;[0]  [13]   [14]
     ffc:	27 95       	ror	r18
    ror     x2              ;[1]
     ffe:	17 95       	ror	r17

00001000 <didStuffN>:
didStuffN:
    nop2                    ;[2]
    1000:	00 c0       	rjmp	.+0      	; 0x1002 <didStuffN+0x2>
    nop                     ;[4]
    1002:	00 00       	nop
    cpi     x2, 0xfc        ;[5]
    1004:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[6]
    1006:	f0 f6       	brcc	.-68     	; 0xfc4 <bitstuffN>
    lsr     bitcnt          ;[7]
    1008:	66 95       	lsr	r22
    brcc    txBitLoop       ;[8]
    100a:	a8 f7       	brcc	.-22     	; 0xff6 <txBitLoop>
    brne    txBitLoop       ;[9]
    100c:	a1 f7       	brne	.-24     	; 0xff6 <txBitLoop>

    sbrs    shift, 0        ;[10]
    100e:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[11]
    1010:	05 27       	eor	r16, r21

00001012 <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[-1] [13] <-- out 7
    1012:	08 b9       	out	0x08, r16	; 8
    ror     shift           ;[0] [14]
    1014:	27 95       	ror	r18
    ror     x2              ;[1]
    1016:	17 95       	ror	r17
    nop                     ;[2]
    1018:	00 00       	nop
    cpi     x2, 0xfc        ;[3]
    101a:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[4]
    101c:	c0 f6       	brcc	.-80     	; 0xfce <bitstuff7>
    ld      shift, y+       ;[5]
    101e:	29 91       	ld	r18, Y+
    dec     cnt             ;[7]
    1020:	3a 95       	dec	r19
    brne    txByteLoop      ;[8]
    1022:	41 f7       	brne	.-48     	; 0xff4 <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[9] prepare SE0 [spec says EOP may be 25 to 30 cycles]
    1024:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[10]
    1026:	10 91 0b 08 	lds	r17, 0x080B	; 0x80080b <usbNewDeviceAddr>
    lsl     x2              ;[12] we compare with left shifted address
    102a:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[13] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
    102c:	08 b9       	out	0x08, r16	; 8
    subi    YL, 20 + 2      ;[0] Only assign address on data packets, not ACK/NAK in x3
    102e:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[1]
    1030:	d0 40       	sbci	r29, 0x00	; 0
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[2]
    1032:	11 f0       	breq	.+4      	; 0x1038 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
    1034:	10 93 05 08 	sts	0x0805, r17	; 0x800805 <usbDeviceAddr>

00001038 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
    1038:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)   ;[5]
    103a:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     ;[6]
    103c:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR      ;[7]
    103e:	17 b1       	in	r17, 0x07	; 7
    cbr     x2, USBMASK     ;[8] set both pins to input
    1040:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1          ;[9]
    1042:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
    1044:	43 7f       	andi	r20, 0xF3	; 243
    ldi     x4, 5           ;[11]
    1046:	55 e0       	ldi	r21, 0x05	; 5

00001048 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21] [24]
    1048:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22] [25]
    104a:	f1 f7       	brne	.-4      	; 0x1048 <se0Delay>
    out     USBOUT, x1      ;[26] <-- out J (idle) -- end of SE0 (EOP signal)
    104c:	08 b9       	out	0x08, r16	; 8
    out     USBDDR, x2      ;[27] <-- release bus now
    104e:	17 b9       	out	0x07, r17	; 7
    out     USBOUT, x3      ;[28] <-- ensure no pull-up resistors are active
    1050:	48 b9       	out	0x08, r20	; 8
    rjmp    doReturn
    1052:	7b cf       	rjmp	.-266    	; 0xf4a <doReturn>

00001054 <anlgComp_fw_init>:


void anlgComp_fw_init(void)
{
	/* enable power for ADC, reference voltage and analog comparator */
	PRR &= ~(_BV(PRADC));
    1054:	e4 e6       	ldi	r30, 0x64	; 100
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8e 7f       	andi	r24, 0xFE	; 254
    105c:	80 83       	st	Z, r24

	/* init the ADC counter */
	acAdcConvertNowCntr = 0;
    105e:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <acAdcConvertNowCntr>

	/* disable digital input buffers on AIN0, AIN1, ADC0 and ADC1 */
	DIDR1 |= (0b11 << AIN0D);
    1062:	ef e7       	ldi	r30, 0x7F	; 127
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	83 60       	ori	r24, 0x03	; 3
    106a:	80 83       	st	Z, r24
	DIDR0  = (0b000011 << ADC0D);
    106c:	83 e0       	ldi	r24, 0x03	; 3
    106e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	/* enable comparator AIN1 pin */
	ADCSRB &= ~(_BV(ACME));									// disable Analog Comparator Multiplex Enable
    1072:	eb e7       	ldi	r30, 0x7B	; 123
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8f 7b       	andi	r24, 0xBF	; 191
    107a:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN) | (0b111 << ADPS0);					// AD enable, use 128/1 prescaler for ADC clock = 156250 Hz
    107c:	ea e7       	ldi	r30, 0x7A	; 122
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	87 68       	ori	r24, 0x87	; 135
    1084:	80 83       	st	Z, r24

	/* enable comparator AIN0 pin */
	ACSR  = (ACSR &  ~(_BV(ACBG) | _BV(ACD)	|	 		  	// disable bandgap reference voltage, switch off Analog Comparator Disable
    1086:	80 b7       	in	r24, 0x30	; 48
    1088:	87 e1       	ldi	r24, 0x17	; 23
    108a:	80 bf       	out	0x30, r24	; 48
			_BV(ACI)						|				// clear any pending interrupt
			(0b11 << ACIS0);								// disable ACIE for interrupt as long interrupt source is changed, interrupt on Rising Edge
	// ACSR |= _BV(ACIE);									// now set ACIE for interrupt (disabled --> done within Timer1)

	/* ADC reference set to AREF */
	acAdcConvertNowState = 0x11;							// set FSM address to "discard next conversion"
    108c:	81 e1       	ldi	r24, 0x11	; 17
    108e:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>
	ADMUX = (0b01 << REFS0) | 0x1;							// use AVcc as Vref, keep ADLAR off, switch to channel ADC1 (phase input)
    1092:	81 e4       	ldi	r24, 0x41	; 65
    1094:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	/* start the initial conversion */
	ADCSRA |= _BV(ADSC) | _BV(ADIF);						// start first conversion of the conversion train and clear pending interrupt flag
    1098:	80 81       	ld	r24, Z
    109a:	80 65       	ori	r24, 0x50	; 80
    109c:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);									// enable ADC interrupt
    109e:	80 81       	ld	r24, Z
    10a0:	88 60       	ori	r24, 0x08	; 8
    10a2:	80 83       	st	Z, r24
    10a4:	08 95       	ret

000010a6 <anlgComp_fw_startAdcConvertion>:
#if 0
	set_sleep_mode(SLEEP_MODE_ADC);							// do not use SLEEP_MODE_ADC due to the fact that the timers are stopped
	sleep_enable();
	sleep_cpu();
#else
	ADCSRA |= _BV(ADSC);									// start conversion
    10a6:	ea e7       	ldi	r30, 0x7A	; 122
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 64       	ori	r24, 0x40	; 64
    10ae:	80 83       	st	Z, r24
    10b0:	08 95       	ret

000010b2 <__vector_21>:
}
#endif

//void anlgComp_fw_ISR_ADC() - __vector_21
ISR(ADC_vect, ISR_BLOCK)
{
    10b2:	1f 92       	push	r1
    10b4:	0f 92       	push	r0
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	0f 92       	push	r0
    10ba:	11 24       	eor	r1, r1
    10bc:	2f 93       	push	r18
    10be:	3f 93       	push	r19
    10c0:	4f 93       	push	r20
    10c2:	5f 93       	push	r21
    10c4:	6f 93       	push	r22
    10c6:	7f 93       	push	r23
    10c8:	8f 93       	push	r24
    10ca:	9f 93       	push	r25
    10cc:	af 93       	push	r26
    10ce:	bf 93       	push	r27
    10d0:	ef 93       	push	r30
    10d2:	ff 93       	push	r31
	//sleep_disable();

	/* read the ADC value */
	uint8_t localADCL = ADCL;								// read LSB first
    10d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint8_t localADCH = ADCH;
    10d8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	sei();
    10dc:	78 94       	sei

	uint16_t adVal  =  localADCL | (localADCH << 8);
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	92 2b       	or	r25, r18

	switch (acAdcConvertNowState)
    10e2:	20 91 29 05 	lds	r18, 0x0529	; 0x800529 <acAdcConvertNowState>
    10e6:	28 30       	cpi	r18, 0x08	; 8
    10e8:	21 f1       	breq	.+72     	; 0x1132 <__vector_21+0x80>
    10ea:	68 f4       	brcc	.+26     	; 0x1106 <__vector_21+0x54>
    10ec:	22 23       	and	r18, r18
    10ee:	a1 f0       	breq	.+40     	; 0x1118 <__vector_21+0x66>
    10f0:	21 30       	cpi	r18, 0x01	; 1
    10f2:	19 f5       	brne	.+70     	; 0x113a <__vector_21+0x88>
	{
	case 0x01:
		/* store PHASE value */
		acAdcCh[1] = adVal;
    10f4:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <acAdcCh+0x3>
    10f8:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <acAdcCh+0x2>

		/* switch to ADC input channel 0 - PWM analog value */
		acAdcConvertNowState = 0x10;
    10fc:	80 e1       	ldi	r24, 0x10	; 16
    10fe:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>
		ADMUX = 0b01000000;  								// = (0b01 << REFS0) | ((ac_adc_convertNowCh & 0x07) << MUX0);
    1102:	80 e4       	ldi	r24, 0x40	; 64
    1104:	1e c0       	rjmp	.+60     	; 0x1142 <__vector_21+0x90>

	sei();

	uint16_t adVal  =  localADCL | (localADCH << 8);

	switch (acAdcConvertNowState)
    1106:	21 31       	cpi	r18, 0x11	; 17
    1108:	01 f1       	breq	.+64     	; 0x114a <__vector_21+0x98>
    110a:	28 31       	cpi	r18, 0x18	; 24
    110c:	71 f0       	breq	.+28     	; 0x112a <__vector_21+0x78>
    110e:	20 31       	cpi	r18, 0x10	; 16
    1110:	a1 f4       	brne	.+40     	; 0x113a <__vector_21+0x88>
		anlgComp_fw_startAdcConvertion();
		break;

	case 0x10:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x00;
    1112:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <acAdcConvertNowState>
    1116:	17 c0       	rjmp	.+46     	; 0x1146 <__vector_21+0x94>
		anlgComp_fw_startAdcConvertion();
		break;

	case 0x00:
		/* store PWM analog value */
		acAdcCh[0] = adVal;
    1118:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <acAdcCh+0x1>
    111c:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <acAdcCh>

		/* switch to ADC input channel for temperature */
		acAdcConvertNowState = 0x18;
    1120:	88 e1       	ldi	r24, 0x18	; 24
    1122:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>

		/* switch over to temperature conversion */
		ADMUX = 0b11001000;  								// = (0b11 << REFS0) | (0x08 << MUX0);
    1126:	88 ec       	ldi	r24, 0xC8	; 200
    1128:	0c c0       	rjmp	.+24     	; 0x1142 <__vector_21+0x90>
		anlgComp_fw_startAdcConvertion();
		break;

	case 0x18:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x08;
    112a:	88 e0       	ldi	r24, 0x08	; 8
    112c:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>
    1130:	0a c0       	rjmp	.+20     	; 0x1146 <__vector_21+0x94>
		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
		break;

	case 0x08:
		acAdcCh[2] = adVal;
    1132:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <acAdcCh+0x5>
    1136:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <acAdcCh+0x4>
		// no break
	default:
		/* switch to ADC input channel 1 - PHASE value */
		acAdcConvertNowState = 0x11;
    113a:	81 e1       	ldi	r24, 0x11	; 17
    113c:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>
		ADMUX = 0b01000000 | 1;  							// = (0b01 << REFS0) | ((ac_adc_convertNowCh & 0x07) << MUX0);
    1140:	81 e4       	ldi	r24, 0x41	; 65
    1142:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		/* start next ADC conversion and reset ADIF flag */
		anlgComp_fw_startAdcConvertion();
		break;
    1146:	af df       	rcall	.-162    	; 0x10a6 <anlgComp_fw_startAdcConvertion>

	case 0x11:
		/* sample after switching MUX to be discarded */
		acAdcConvertNowState = 0x01;
    1148:	08 c0       	rjmp	.+16     	; 0x115a <__vector_21+0xa8>
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <acAdcConvertNowState>

		/* update ADC counter to inform about a new conversion train is ready to be read */
		acAdcConvertNowCntr++;
    1150:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <acAdcConvertNowCntr>
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <acAdcConvertNowCntr>

		/* end of conversion train - no more ADSC. Woken up by the next rising edge of PPS in ISR(ANALOG_COMP_vect, ISR_BLOCK) */
		break;
	}
}
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	bf 91       	pop	r27
    1160:	af 91       	pop	r26
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	7f 91       	pop	r23
    1168:	6f 91       	pop	r22
    116a:	5f 91       	pop	r21
    116c:	4f 91       	pop	r20
    116e:	3f 91       	pop	r19
    1170:	2f 91       	pop	r18
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	0f 90       	pop	r0
    1178:	1f 90       	pop	r1
    117a:	18 95       	reti

0000117c <clkFastCtr_fw_init>:


void clkFastCtr_fw_init(void)
{
	/* power up this module */
	PRR &= ~(_BV(PRTIM1));
    117c:	e4 e6       	ldi	r30, 0x64	; 100
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	87 7f       	andi	r24, 0xF7	; 247
    1184:	80 83       	st	Z, r24

	/* clear the timer */
	TCNT1H = 0;												// write high byte first
    1186:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
    118a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	/* set the timer top value for 20.000 clocks @ 20MHz --> 1ms */
	OCR1AH = (OCR1_TOP_VALUE >> 8);							// write high byte first
    118e:	8e e4       	ldi	r24, 0x4E	; 78
    1190:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = (OCR1_TOP_VALUE & 0xff);
    1194:	8f e1       	ldi	r24, 0x1F	; 31
    1196:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	/* set the timer-1 mode of operation: 0x4 = CTC, counting up, TOP := OCR1A [. . WGM01 WGM00] */
	TCCR1A = (0b00<<WGM10);
    119a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	/* set the timer-1 mode of operation: 0x4 = CTC, counting up, TOP := OCR1A [WGM03 WGM02 . .] */
	/* no ICNC1 input filtering */
	/* ICES is set to trigger on the rising edge of the Comparator output --> rising edge of AIN0 */
	/* set the timer-1 clock source to 20 MHz XTAL */
	TCCR1B = _BV(ICES1)						|				// select rising edge of the ICP1/AIN0 input to trigger
    119e:	89 e4       	ldi	r24, 0x49	; 73
    11a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			 (0b01<<WGM12)					|				// WGM03 WGM02
			 (0b001<<CS10);									// since now the timer runs

	/* ICF1 and OCF1A interrupt enable */
	TIMSK1 = _BV(ICIE1) 					|				// ICF1   - GPS PPS rising edge event
    11a4:	82 e2       	ldi	r24, 0x22	; 34
    11a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    11aa:	08 95       	ret

000011ac <__vector_11>:
}
#endif

//void clkFastCtr_fw_ISR_T1_CompA() - __vector_11
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	2f 93       	push	r18
    11b8:	3f 93       	push	r19
    11ba:	8f 93       	push	r24
    11bc:	9f 93       	push	r25
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
	/* this ISR is called every 20.000 clocks - repeating each ms again */

	/* the 32 bit timer overflows every 3 1/4 year */
	fastCtr1ms++;
    11c2:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <fastCtr1ms>
    11c6:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <fastCtr1ms+0x1>
    11ca:	a0 91 37 05 	lds	r26, 0x0537	; 0x800537 <fastCtr1ms+0x2>
    11ce:	b0 91 38 05 	lds	r27, 0x0538	; 0x800538 <fastCtr1ms+0x3>
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	a1 1d       	adc	r26, r1
    11d6:	b1 1d       	adc	r27, r1
    11d8:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <fastCtr1ms>
    11dc:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <fastCtr1ms+0x1>
    11e0:	a0 93 37 05 	sts	0x0537, r26	; 0x800537 <fastCtr1ms+0x2>
    11e4:	b0 93 38 05 	sts	0x0538, r27	; 0x800538 <fastCtr1ms+0x3>

	sei();													// since here we can accept interruptions
    11e8:	78 94       	sei

	if (main_bf.mainStackCheck) {
    11ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    11ee:	86 ff       	sbrs	r24, 6
    11f0:	11 c0       	rjmp	.+34     	; 0x1214 <__vector_11+0x68>
		cli();
    11f2:	f8 94       	cli
		uint8_t localStackLo = SPL;
    11f4:	8d b7       	in	r24, 0x3d	; 61
		uint8_t localStackHi = SPH;
    11f6:	2e b7       	in	r18, 0x3e	; 62
		sei();
    11f8:	78 94       	sei

		uint16_t localStackAddr = (localStackHi << 8) | localStackLo;
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	92 2b       	or	r25, r18
		if (mainSCStackAddr > localStackAddr) {
    11fe:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <mainSCStackAddr>
    1202:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <mainSCStackAddr+0x1>
    1206:	82 17       	cp	r24, r18
    1208:	93 07       	cpc	r25, r19
    120a:	20 f4       	brcc	.+8      	; 0x1214 <__vector_11+0x68>
			mainSCStackAddr = localStackAddr;
    120c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <mainSCStackAddr+0x1>
    1210:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <mainSCStackAddr>
		}
	}
}
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	3f 91       	pop	r19
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <__vector_10>:


//void clkFastCtr_fw_ISR_T1_Capt() - __vector_10
ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	11 24       	eor	r1, r1
    1234:	2f 93       	push	r18
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	ef 93       	push	r30
    1244:	ff 93       	push	r31
	/* rising edge of the PPS signal from df4iah_fw_anlgComp.c detected */

	/* take the current timestamp of the free floating 20 MHz timer */
	register uint8_t  localICR1L = ICR1L;					// capture timer value - low byte first
    1246:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	register uint8_t  localICR1H = ICR1H;
    124a:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
	register uint32_t localFastCtr1ms = fastCtr1ms;
    124e:	40 91 35 05 	lds	r20, 0x0535	; 0x800535 <fastCtr1ms>
    1252:	50 91 36 05 	lds	r21, 0x0536	; 0x800536 <fastCtr1ms+0x1>
    1256:	60 91 37 05 	lds	r22, 0x0537	; 0x800537 <fastCtr1ms+0x2>
    125a:	70 91 38 05 	lds	r23, 0x0538	; 0x800538 <fastCtr1ms+0x3>

	sei();
    125e:	78 94       	sei

	//anlgComp_fw_startAdcConvertion();
	ADCSRA |= _BV(ADSC);									// start conversion
    1260:	ea e7       	ldi	r30, 0x7A	; 122
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	90 81       	ld	r25, Z
    1266:	90 64       	ori	r25, 0x40	; 64
    1268:	90 83       	st	Z, r25

	cli();
    126a:	f8 94       	cli
	fastStampTCNT1  = localICR1L | (localICR1H << 8);
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	92 2b       	or	r25, r18
    1270:	90 93 3e 05 	sts	0x053E, r25	; 0x80053e <fastStampTCNT1+0x1>
    1274:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <fastStampTCNT1>
	fastStampCtr1ms = localFastCtr1ms;
    1278:	40 93 39 05 	sts	0x0539, r20	; 0x800539 <fastStampCtr1ms>
    127c:	50 93 3a 05 	sts	0x053A, r21	; 0x80053a <fastStampCtr1ms+0x1>
    1280:	60 93 3b 05 	sts	0x053B, r22	; 0x80053b <fastStampCtr1ms+0x2>
    1284:	70 93 3c 05 	sts	0x053C, r23	; 0x80053c <fastStampCtr1ms+0x3>
	sei();
    1288:	78 94       	sei
}
    128a:	ff 91       	pop	r31
    128c:	ef 91       	pop	r30
    128e:	9f 91       	pop	r25
    1290:	8f 91       	pop	r24
    1292:	7f 91       	pop	r23
    1294:	6f 91       	pop	r22
    1296:	5f 91       	pop	r21
    1298:	4f 91       	pop	r20
    129a:	2f 91       	pop	r18
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	0f 90       	pop	r0
    12a2:	1f 90       	pop	r1
    12a4:	18 95       	reti

000012a6 <clkPullPwm_fw_init>:


void clkPullPwm_fw_init(void)
{
	// power up this module
	PRR &= ~(_BV(PRTIM0));
    12a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    12aa:	8f 7d       	andi	r24, 0xDF	; 223
    12ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

	// set the timer-0 counter to zero.
	TCNT0 = 0x00;
    12b0:	16 bc       	out	0x26, r1	; 38

	// set the timer-0 PWM-B compare register
	OCR0B = DEFAULT_PWM_COUNT;
    12b2:	8a e5       	ldi	r24, 0x5A	; 90
    12b4:	88 bd       	out	0x28, r24	; 40

	// set the timer-0 mode of operation: 0x3 = Fast PWM, counting up, TOP := MAX [. . WGM01 WGM00]
	// set the timer-0 compare-B waveform generator to: PWM, 1 at >= match, 0 else
	TCCR0A = (0b10<<COM0B0) | (0b11<<WGM00);
    12b6:	83 e2       	ldi	r24, 0x23	; 35
    12b8:	84 bd       	out	0x24, r24	; 36

	// set the timer-0 mode of operation: 0x3 = Fast PWM, counting up, TOP := MAX [WGM02 . .]
	// set the timer-0 clock source to 20 MHz XTAL.
	TCCR0B = (0b0<<WGM02) | (0b001<<CS00);
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	85 bd       	out	0x25, r24	; 37

	// set the timer-0 PWM-B compare output: setting data port for output
	DDR_OC0B_REG |= _BV(DDR_OC0B);
    12be:	55 9a       	sbi	0x0a, 5	; 10


	/* single memory access */
	if (memory_fw_isEepromBlockValid(BLOCK_REFOSC_NR)) {
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	0e 94 11 21 	call	0x4222	; 0x4222 <memory_fw_isEepromBlockValid>
    12c6:	88 23       	and	r24, r24
    12c8:	c9 f0       	breq	.+50     	; 0x12fc <clkPullPwm_fw_init+0x56>
		memory_fw_readEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial));
    12ca:	4a e5       	ldi	r20, 0x5A	; 90
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	80 e4       	ldi	r24, 0x40	; 64
    12d2:	95 e0       	ldi	r25, 0x05	; 5
    12d4:	0e 94 f7 20 	call	0x41ee	; 0x41ee <memory_fw_readEEpromPage>
		memory_fw_readEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial_sub, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial_sub));
    12d8:	4b e5       	ldi	r20, 0x5B	; 91
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	8f e3       	ldi	r24, 0x3F	; 63
    12e0:	95 e0       	ldi	r25, 0x05	; 5
    12e2:	0e 94 f7 20 	call	0x41ee	; 0x41ee <memory_fw_readEEpromPage>

		uint8_t sreg = SREG;
    12e6:	8f b7       	in	r24, 0x3f	; 63
		cli();
    12e8:	f8 94       	cli
		fastPwmLoopVal		= pullCoef_b02_pwm_initial;
    12ea:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <pullCoef_b02_pwm_initial>
    12ee:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <fastPwmLoopVal>
		fastPwmSubLoopVal	= pullCoef_b02_pwm_initial_sub;
    12f2:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <pullCoef_b02_pwm_initial_sub>
    12f6:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <fastPwmSubLoopVal>
		SREG = sreg;
    12fa:	8f bf       	out	0x3f, r24	; 63
	}

	/* init interrupt */
	TIFR0  |= _BV(TOV0);
    12fc:	a8 9a       	sbi	0x15, 0	; 21
	TIMSK0 |= _BV(TOIE0);
    12fe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1302:	81 60       	ori	r24, 0x01	; 1
    1304:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1308:	08 95       	ret

0000130a <__vector_16>:
#endif


//void clkPullPwm_fw_ISR_T0_OVF() - __vector_16
ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	8f 93       	push	r24
    1316:	9f 93       	push	r25
	sei();
    1318:	78 94       	sei

	/* minimal Sub-PWM value for its FAST_PWM_SUB_BITCNT */
	const uint8_t localSubPwmInc = (1 << (8 - FAST_PWM_SUB_BITCNT));

	if (fastPwmSingleLoad) {
    131a:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <fastPwmSingleLoad>
    131e:	88 23       	and	r24, r24
    1320:	61 f0       	breq	.+24     	; 0x133a <__vector_16+0x30>
		cli();
    1322:	f8 94       	cli
		OCR0B			= fastPwmSingleVal;
    1324:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <fastPwmSingleVal>
    1328:	88 bd       	out	0x28, r24	; 40
		fastPwmSubCmp	= fastPwmSubSingleVal;
    132a:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <fastPwmSubSingleVal>
    132e:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <fastPwmSubCmp>
		sei();
    1332:	78 94       	sei

		/* single value loaded */
		fastPwmSingleLoad = 0;
    1334:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <fastPwmSingleLoad>
    1338:	09 c0       	rjmp	.+18     	; 0x134c <__vector_16+0x42>

	} else {
		/* set the T0 compare B register with the current setting of the integer PWM value */
		cli();
    133a:	f8 94       	cli
		OCR0B			= fastPwmLoopVal;
    133c:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <fastPwmLoopVal>
    1340:	88 bd       	out	0x28, r24	; 40
		fastPwmSubCmp	= fastPwmSubLoopVal;
    1342:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <fastPwmSubLoopVal>
    1346:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <fastPwmSubCmp>
		sei();
    134a:	78 94       	sei
	}

	/* increment if counter is lower than the sub-compare value to get a Sub-PWM (fractional part) */
	cli();
    134c:	f8 94       	cli
	if (fastPwmSubCnt < fastPwmSubCmp) {
    134e:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <fastPwmSubCnt>
    1352:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <fastPwmSubCmp>
    1356:	98 17       	cp	r25, r24
    1358:	18 f4       	brcc	.+6      	; 0x1360 <__vector_16+0x56>
		OCR0B++;
    135a:	88 b5       	in	r24, 0x28	; 40
    135c:	8f 5f       	subi	r24, 0xFF	; 255
    135e:	88 bd       	out	0x28, r24	; 40
	}
	sei();
    1360:	78 94       	sei

	/* sub-counter increment */
	fastPwmSubCnt += localSubPwmInc;						// overflowing is intended
    1362:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <fastPwmSubCnt>
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <fastPwmSubCnt>
}
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	0f 90       	pop	r0
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	0f 90       	pop	r0
    1376:	1f 90       	pop	r1
    1378:	18 95       	reti

0000137a <main_fw_nmeaUtcPlusOneSec>:
		height_frac10 = (int8_t) ((height_f - floorf(height_f)) * 10.0f);
		twi_smart_lcd_fw_set_pos_height(height_int, height_frac10);
	}
}

static void main_fw_nmeaUtcPlusOneSec(void) {
    137a:	cf 92       	push	r12
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
	++main_nmeaTimeUtcInt;
    1382:	c0 90 53 05 	lds	r12, 0x0553	; 0x800553 <main_nmeaTimeUtcInt>
    1386:	d0 90 54 05 	lds	r13, 0x0554	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    138a:	e0 90 55 05 	lds	r14, 0x0555	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    138e:	f0 90 56 05 	lds	r15, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x3>
    1392:	2f ef       	ldi	r18, 0xFF	; 255
    1394:	c2 1a       	sub	r12, r18
    1396:	d2 0a       	sbc	r13, r18
    1398:	e2 0a       	sbc	r14, r18
    139a:	f2 0a       	sbc	r15, r18

	if ((main_nmeaTimeUtcInt % 100) > 59) {
    139c:	c7 01       	movw	r24, r14
    139e:	b6 01       	movw	r22, r12
    13a0:	24 e6       	ldi	r18, 0x64	; 100
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    13ac:	6c 33       	cpi	r22, 0x3C	; 60
    13ae:	71 05       	cpc	r23, r1
    13b0:	81 05       	cpc	r24, r1
    13b2:	91 05       	cpc	r25, r1
    13b4:	4c f0       	brlt	.+18     	; 0x13c8 <main_fw_nmeaUtcPlusOneSec+0x4e>
		main_nmeaTimeUtcInt -= main_nmeaTimeUtcInt % 100;
		main_nmeaTimeUtcInt += 100;
    13b6:	c6 1a       	sub	r12, r22
    13b8:	d7 0a       	sbc	r13, r23
    13ba:	e8 0a       	sbc	r14, r24
    13bc:	f9 0a       	sbc	r15, r25
    13be:	84 e6       	ldi	r24, 0x64	; 100
    13c0:	c8 0e       	add	r12, r24
    13c2:	d1 1c       	adc	r13, r1
    13c4:	e1 1c       	adc	r14, r1
    13c6:	f1 1c       	adc	r15, r1
    13c8:	c0 92 53 05 	sts	0x0553, r12	; 0x800553 <main_nmeaTimeUtcInt>
    13cc:	d0 92 54 05 	sts	0x0554, r13	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    13d0:	e0 92 55 05 	sts	0x0555, r14	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    13d4:	f0 92 56 05 	sts	0x0556, r15	; 0x800556 <main_nmeaTimeUtcInt+0x3>
	}

	if ((main_nmeaTimeUtcInt % 10000) > 5959) {
    13d8:	c0 90 53 05 	lds	r12, 0x0553	; 0x800553 <main_nmeaTimeUtcInt>
    13dc:	d0 90 54 05 	lds	r13, 0x0554	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    13e0:	e0 90 55 05 	lds	r14, 0x0555	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    13e4:	f0 90 56 05 	lds	r15, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x3>
    13e8:	c7 01       	movw	r24, r14
    13ea:	b6 01       	movw	r22, r12
    13ec:	20 e1       	ldi	r18, 0x10	; 16
    13ee:	37 e2       	ldi	r19, 0x27	; 39
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    13f8:	68 34       	cpi	r22, 0x48	; 72
    13fa:	27 e1       	ldi	r18, 0x17	; 23
    13fc:	72 07       	cpc	r23, r18
    13fe:	81 05       	cpc	r24, r1
    1400:	91 05       	cpc	r25, r1
    1402:	94 f0       	brlt	.+36     	; 0x1428 <main_fw_nmeaUtcPlusOneSec+0xae>
		main_nmeaTimeUtcInt -= (main_nmeaTimeUtcInt % 10000)  /* - (main_nmeaTimeUtcSec % 100) */ ;  // with +1 this can be cut out
		main_nmeaTimeUtcInt +=  10000;
    1404:	c6 1a       	sub	r12, r22
    1406:	d7 0a       	sbc	r13, r23
    1408:	e8 0a       	sbc	r14, r24
    140a:	f9 0a       	sbc	r15, r25
    140c:	80 e1       	ldi	r24, 0x10	; 16
    140e:	c8 0e       	add	r12, r24
    1410:	87 e2       	ldi	r24, 0x27	; 39
    1412:	d8 1e       	adc	r13, r24
    1414:	e1 1c       	adc	r14, r1
    1416:	f1 1c       	adc	r15, r1
    1418:	c0 92 53 05 	sts	0x0553, r12	; 0x800553 <main_nmeaTimeUtcInt>
    141c:	d0 92 54 05 	sts	0x0554, r13	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    1420:	e0 92 55 05 	sts	0x0555, r14	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    1424:	f0 92 56 05 	sts	0x0556, r15	; 0x800556 <main_nmeaTimeUtcInt+0x3>
	}
}
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	cf 90       	pop	r12
    1430:	08 95       	ret

00001432 <recalcEepromCrc>:
	val *= pow(10, digits);			// shift digits count left of decimal format
	return (int) floorf(val);		// return integer part
}

static void recalcEepromCrc(enum BLOCK_NR_t block, uint16_t crcOffset)
{
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	00 d0       	rcall	.+0      	; 0x143e <recalcEepromCrc+0xc>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	18 2f       	mov	r17, r24
    1444:	7b 01       	movw	r14, r22
	/* for any modified block add the corresponding CRC seal marker and do a  memory_fw_manageBlock() */
	uint16_t newCrc = memory_fw_getSealMarker(block);
    1446:	0e 94 b7 20 	call	0x416e	; 0x416e <memory_fw_getSealMarker>
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	89 83       	std	Y+1, r24	; 0x01
	memory_fw_writeEEpromPage((uint8_t*) &newCrc, sizeof(uint16_t), crcOffset);
    144e:	a7 01       	movw	r20, r14
    1450:	62 e0       	ldi	r22, 0x02	; 2
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	0e 94 4a 21 	call	0x4294	; 0x4294 <memory_fw_writeEEpromPage>
	memory_fw_manageBlock(block);
    145a:	81 2f       	mov	r24, r17
    145c:	0e 94 8b 21 	call	0x4316	; 0x4316 <memory_fw_manageBlock>
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	08 95       	ret

00001470 <main_fw_calcTimerAdj>:
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
}

static float main_fw_calcTimerAdj(float pwmAdjust, uint8_t* intVal, uint8_t* intSubVal)
{
    1470:	4f 92       	push	r4
    1472:	5f 92       	push	r5
    1474:	6f 92       	push	r6
    1476:	7f 92       	push	r7
    1478:	8f 92       	push	r8
    147a:	9f 92       	push	r9
    147c:	af 92       	push	r10
    147e:	bf 92       	push	r11
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	4b 01       	movw	r8, r22
    1492:	5c 01       	movw	r10, r24
    1494:	6a 01       	movw	r12, r20
    1496:	79 01       	movw	r14, r18
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
	const float maxLimit = 255.0f - (1.0f / (1 << FAST_PWM_SUB_BITCNT));	// NOT 256.0f due to the compare unit that catches not around the overflow value

	/* add the time offset to the current PWM settings */
	fltTime += pwmAdjust;
    1498:	f9 01       	movw	r30, r18
    149a:	60 81       	ld	r22, Z
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e8       	ldi	r20, 0x80	; 128
    14ac:	5b e3       	ldi	r21, 0x3B	; 59
    14ae:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    14b2:	2b 01       	movw	r4, r22
    14b4:	3c 01       	movw	r6, r24
    14b6:	f6 01       	movw	r30, r12
    14b8:	60 81       	ld	r22, Z
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    14c4:	9b 01       	movw	r18, r22
    14c6:	ac 01       	movw	r20, r24
    14c8:	c3 01       	movw	r24, r6
    14ca:	b2 01       	movw	r22, r4
    14cc:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    14d0:	a5 01       	movw	r20, r10
    14d2:	94 01       	movw	r18, r8
    14d4:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    14d8:	8b 01       	movw	r16, r22
    14da:	d8 2f       	mov	r29, r24
    14dc:	c9 2f       	mov	r28, r25

	/* windowing the next value into the 8-Bit range */
	if (fltTime < 0.0f) {
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	a9 01       	movw	r20, r18
    14e4:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
    14e8:	87 fd       	sbrc	r24, 7
    14ea:	1c c0       	rjmp	.+56     	; 0x1524 <main_fw_calcTimerAdj+0xb4>
		residue = fltTime;
		fltTime = 0.0f;

	} else if (fltTime > maxLimit) {
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	3f ef       	ldi	r19, 0xFF	; 255
    14f0:	4e e7       	ldi	r20, 0x7E	; 126
    14f2:	53 e4       	ldi	r21, 0x43	; 67
    14f4:	b8 01       	movw	r22, r16
    14f6:	8d 2f       	mov	r24, r29
    14f8:	9c 2f       	mov	r25, r28
    14fa:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    14fe:	18 16       	cp	r1, r24
    1500:	b4 f4       	brge	.+44     	; 0x152e <main_fw_calcTimerAdj+0xbe>
		residue = fltTime - maxLimit;
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	4e e7       	ldi	r20, 0x7E	; 126
    1508:	53 e4       	ldi	r21, 0x43	; 67
    150a:	b8 01       	movw	r22, r16
    150c:	8d 2f       	mov	r24, r29
    150e:	9c 2f       	mov	r25, r28
    1510:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    1514:	8b 01       	movw	r16, r22
    1516:	d8 2f       	mov	r29, r24
    1518:	c9 2f       	mov	r28, r25
		fltTime = maxLimit;
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	af ef       	ldi	r26, 0xFF	; 255
    151e:	fe e7       	ldi	r31, 0x7E	; 126
    1520:	e3 e4       	ldi	r30, 0x43	; 67
    1522:	0c c0       	rjmp	.+24     	; 0x153c <main_fw_calcTimerAdj+0xcc>
	fltTime += pwmAdjust;

	/* windowing the next value into the 8-Bit range */
	if (fltTime < 0.0f) {
		residue = fltTime;
		fltTime = 0.0f;
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	e0 e0       	ldi	r30, 0x00	; 0
    152c:	07 c0       	rjmp	.+14     	; 0x153c <main_fw_calcTimerAdj+0xcc>
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
	const float maxLimit = 255.0f - (1.0f / (1 << FAST_PWM_SUB_BITCNT));	// NOT 256.0f due to the compare unit that catches not around the overflow value

	/* add the time offset to the current PWM settings */
	fltTime += pwmAdjust;
    152e:	b0 2f       	mov	r27, r16
    1530:	a1 2f       	mov	r26, r17
    1532:	fe 01       	movw	r30, r28
}

static float main_fw_calcTimerAdj(float pwmAdjust, uint8_t* intVal, uint8_t* intSubVal)
{
	float fltTime = main_fw_calcTimerToFloat(*intVal, *intSubVal);
	float residue = 0.0f;
    1534:	00 e0       	ldi	r16, 0x00	; 0
    1536:	10 e0       	ldi	r17, 0x00	; 0
    1538:	d0 e0       	ldi	r29, 0x00	; 0
    153a:	c0 e0       	ldi	r28, 0x00	; 0
		residue = fltTime - maxLimit;
		fltTime = maxLimit;
	}

	/* add rounding value */
	fltTime += 1.0f / 512.0f;
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	5b e3       	ldi	r21, 0x3B	; 59
    1544:	6b 2f       	mov	r22, r27
    1546:	7a 2f       	mov	r23, r26
    1548:	8f 2f       	mov	r24, r31
    154a:	9e 2f       	mov	r25, r30
    154c:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    1550:	4b 01       	movw	r8, r22
    1552:	5c 01       	movw	r10, r24

	/* break up into integer and fractional parts */
	*intVal		= (uint8_t) fltTime;
    1554:	0e 94 22 31 	call	0x6244	; 0x6244 <__fixunssfsi>
    1558:	f6 01       	movw	r30, r12
    155a:	60 83       	st	Z, r22
	*intSubVal	= (uint8_t) ((fltTime - floorf(fltTime)) * 256.0f);
    155c:	c5 01       	movw	r24, r10
    155e:	b4 01       	movw	r22, r8
    1560:	0e 94 8b 31 	call	0x6316	; 0x6316 <floor>
    1564:	9b 01       	movw	r18, r22
    1566:	ac 01       	movw	r20, r24
    1568:	c5 01       	movw	r24, r10
    156a:	b4 01       	movw	r22, r8
    156c:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e8       	ldi	r20, 0x80	; 128
    1576:	53 e4       	ldi	r21, 0x43	; 67
    1578:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    157c:	0e 94 22 31 	call	0x6244	; 0x6244 <__fixunssfsi>
    1580:	f7 01       	movw	r30, r14
    1582:	60 83       	st	Z, r22
	return residue;
}
    1584:	b8 01       	movw	r22, r16
    1586:	8d 2f       	mov	r24, r29
    1588:	9c 2f       	mov	r25, r28
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	ff 90       	pop	r15
    1594:	ef 90       	pop	r14
    1596:	df 90       	pop	r13
    1598:	cf 90       	pop	r12
    159a:	bf 90       	pop	r11
    159c:	af 90       	pop	r10
    159e:	9f 90       	pop	r9
    15a0:	8f 90       	pop	r8
    15a2:	7f 90       	pop	r7
    15a4:	6f 90       	pop	r6
    15a6:	5f 90       	pop	r5
    15a8:	4f 90       	pop	r4
    15aa:	08 95       	ret

000015ac <s_flt_frac>:
{
	return val >= 0.0f ?  '+' : '-';
}

static int s_flt_frac(float val, uint8_t digits)
{
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	cf 93       	push	r28
    15b6:	6b 01       	movw	r12, r22
    15b8:	7c 01       	movw	r14, r24
    15ba:	c4 2f       	mov	r28, r20
	val -= floorf(val);				// drop integer part
    15bc:	0e 94 8b 31 	call	0x6316	; 0x6316 <floor>
    15c0:	9b 01       	movw	r18, r22
    15c2:	ac 01       	movw	r20, r24
    15c4:	c7 01       	movw	r24, r14
    15c6:	b6 01       	movw	r22, r12
    15c8:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    15cc:	6b 01       	movw	r12, r22
    15ce:	7c 01       	movw	r14, r24
	val *= pow(10, digits);			// shift digits count left of decimal format
    15d0:	6c 2f       	mov	r22, r28
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 4e 31 	call	0x629c	; 0x629c <__floatunsisf>
    15dc:	9b 01       	movw	r18, r22
    15de:	ac 01       	movw	r20, r24
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	80 e2       	ldi	r24, 0x20	; 32
    15e6:	91 e4       	ldi	r25, 0x41	; 65
    15e8:	0e 94 ba 32 	call	0x6574	; 0x6574 <pow>
    15ec:	9b 01       	movw	r18, r22
    15ee:	ac 01       	movw	r20, r24
	return (int) floorf(val);		// return integer part
    15f0:	c7 01       	movw	r24, r14
    15f2:	b6 01       	movw	r22, r12
    15f4:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    15f8:	0e 94 8b 31 	call	0x6316	; 0x6316 <floor>
    15fc:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
}
    1600:	cb 01       	movw	r24, r22
    1602:	cf 91       	pop	r28
    1604:	ff 90       	pop	r15
    1606:	ef 90       	pop	r14
    1608:	df 90       	pop	r13
    160a:	cf 90       	pop	r12
    160c:	08 95       	ret

0000160e <__vector_6>:

/* assign interrupt routines to vectors */
/* due to optimizations the ISRs are set at the function block directly */

ISR(WDT_vect, ISR_NAKED) {  // vector_6 - nothing to do, resets WDIF bit
	__asm__ __volatile__ ("reti" ::: "memory");
    160e:	18 95       	reti

00001610 <main_fw_strncmp>:
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
	}
}

int main_fw_strncmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	8c 01       	movw	r16, r24
    161a:	ea 01       	movw	r28, r20
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
    161c:	9a 01       	movw	r18, r20
    161e:	ab 01       	movw	r20, r22
    1620:	6d e8       	ldi	r22, 0x8D	; 141
    1622:	73 e0       	ldi	r23, 0x03	; 3
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
	return strncmp((const char*) msg, (const char*) mainFormatBuffer, size);
    162a:	ae 01       	movw	r20, r28
    162c:	6d e8       	ldi	r22, 0x8D	; 141
    162e:	73 e0       	ldi	r23, 0x03	; 3
    1630:	c8 01       	movw	r24, r16
}
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
}

int main_fw_strncmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
	return strncmp((const char*) msg, (const char*) mainFormatBuffer, size);
    163a:	0c 94 42 34 	jmp	0x6884	; 0x6884 <strncmp>

0000163e <main_fw_memcmp>:
}

int main_fw_memcmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	8c 01       	movw	r16, r24
    1648:	ea 01       	movw	r28, r20
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
    164a:	9a 01       	movw	r18, r20
    164c:	ab 01       	movw	r20, r22
    164e:	6d e8       	ldi	r22, 0x8D	; 141
    1650:	73 e0       	ldi	r23, 0x03	; 3
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
	return memcmp((const char*) msg, (const char*) mainFormatBuffer, size);
    1658:	ae 01       	movw	r20, r28
    165a:	6d e8       	ldi	r22, 0x8D	; 141
    165c:	73 e0       	ldi	r23, 0x03	; 3
    165e:	c8 01       	movw	r24, r16
}
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
}

int main_fw_memcmp(const unsigned char* msg, const unsigned char* cmpProg, size_t size)
{
	memory_fw_copyBuffer(true, mainFormatBuffer, cmpProg, size);
	return memcmp((const char*) msg, (const char*) mainFormatBuffer, size);
    1668:	0c 94 2c 34 	jmp	0x6858	; 0x6858 <memcmp>

0000166c <workInQueue>:
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
	}
}

void workInQueue(void)
{
    166c:	8f 92       	push	r8
    166e:	9f 92       	push	r9
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	00 d0       	rcall	.+0      	; 0x1686 <workInQueue+0x1a>
    1686:	00 d0       	rcall	.+0      	; 0x1688 <workInQueue+0x1c>
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
	if (ringbuffer_fw_getSemaphore(true)) {
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	0e 94 d5 21 	call	0x43aa	; 0x43aa <ringbuffer_fw_getSemaphore>
    1692:	88 23       	and	r24, r24
    1694:	09 f4       	brne	.+2      	; 0x1698 <workInQueue+0x2c>
    1696:	4e c3       	rjmp	.+1692   	; 0x1d34 <workInQueue+0x6c8>
		uint8_t isLocked = true;
		enum RINGBUFFER_MSG_STATUS_t statusSend = ringbuffer_fw_getStatusNextMsg(true);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	0e 94 16 23 	call	0x462c	; 0x462c <ringbuffer_fw_getStatusNextMsg>
    169e:	18 2f       	mov	r17, r24
		enum RINGBUFFER_MSG_STATUS_t statusRcv  = ringbuffer_fw_getStatusNextMsg(false);
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	0e 94 16 23 	call	0x462c	; 0x462c <ringbuffer_fw_getStatusNextMsg>

		if (!(main_bf.mainHelpConcatNr) && (statusSend & RINGBUFFER_MSG_STATUS_AVAIL)) {		// if any message is available and not during help printing
    16a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    16aa:	96 95       	lsr	r25
    16ac:	9f 70       	andi	r25, 0x0F	; 15
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <workInQueue+0x46>
    16b0:	91 c2       	rjmp	.+1314   	; 0x1bd4 <workInQueue+0x568>
    16b2:	10 ff       	sbrs	r17, 0
    16b4:	8f c2       	rjmp	.+1310   	; 0x1bd4 <workInQueue+0x568>
			if (statusSend & RINGBUFFER_MSG_STATUS_IS_NMEA) {
    16b6:	14 ff       	sbrs	r17, 4
    16b8:	04 c0       	rjmp	.+8      	; 0x16c2 <workInQueue+0x56>
				serial_fw_pullAndSendNmea_havingSemaphore(true); isLocked = false;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	0e 94 0c 24 	call	0x4818	; 0x4818 <serial_fw_pullAndSendNmea_havingSemaphore>
    16c0:	39 c3       	rjmp	.+1650   	; 0x1d34 <workInQueue+0x6c8>

			} else if ((statusSend & RINGBUFFER_MSG_STATUS_IS_MASK) == 0) {						// message from firmware state machine
    16c2:	10 7f       	andi	r17, 0xF0	; 240
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <workInQueue+0x5c>
    16c6:	33 c3       	rjmp	.+1638   	; 0x1d2e <workInQueue+0x6c2>
				uint8_t localMsgLen = ringbuffer_fw_ringBufferPull(true, mainInterpreterBuffer, (uint8_t) (sizeof(mainInterpreterBuffer) - 1));
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	6d e8       	ldi	r22, 0x8D	; 141
    16cc:	74 e0       	ldi	r23, 0x04	; 4
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	0e 94 89 22 	call	0x4512	; 0x4512 <ringbuffer_fw_ringBufferPull>
				ringbuffer_fw_freeSemaphore(true); isLocked = false;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ringbuffer_fw_freeSemaphore>
			&main_nmeaSatsEphemerisGlonass);
}

static void doInterpret(uchar msg[], uint8_t len)
{
	if (!main_fw_strncmp(msg, PM_GPIB_SCM_IDN, sizeof(PM_GPIB_SCM_IDN))) {
    16da:	46 e0       	ldi	r20, 0x06	; 6
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	67 ec       	ldi	r22, 0xC7	; 199
    16e0:	7b e0       	ldi	r23, 0x0B	; 11
    16e2:	8d e8       	ldi	r24, 0x8D	; 141
    16e4:	94 e0       	ldi	r25, 0x04	; 4
    16e6:	94 df       	rcall	.-216    	; 0x1610 <main_fw_strncmp>
    16e8:	89 2b       	or	r24, r25
    16ea:	41 f5       	brne	.+80     	; 0x173c <workInQueue+0xd0>
		/* GPIB commands - SCPI/SCM - *IDN? */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GPIB_SCM_IDN, sizeof(PM_FORMAT_GPIB_SCM_IDN));
    16ec:	2c e1       	ldi	r18, 0x1C	; 28
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	4b ed       	ldi	r20, 0xDB	; 219
    16f2:	51 e0       	ldi	r21, 0x01	; 1
    16f4:	6d e8       	ldi	r22, 0x8D	; 141
    16f6:	73 e0       	ldi	r23, 0x03	; 3
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    16fe:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <mainCoef_b00_dev_version>
    1702:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <mainCoef_b00_dev_version+0x1>
    1706:	9c 01       	movw	r18, r24
    1708:	33 27       	eor	r19, r19
    170a:	3f 93       	push	r19
    170c:	2f 93       	push	r18
    170e:	1f 92       	push	r1
    1710:	9f 93       	push	r25
    1712:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <mainCoef_b00_dev_serial+0x1>
    1716:	8f 93       	push	r24
    1718:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <mainCoef_b00_dev_serial>
    171c:	8f 93       	push	r24
    171e:	86 ec       	ldi	r24, 0xC6	; 198
    1720:	95 e0       	ldi	r25, 0x05	; 5
    1722:	9f 93       	push	r25
    1724:	8f 93       	push	r24
    1726:	8d e8       	ldi	r24, 0x8D	; 141
    1728:	93 e0       	ldi	r25, 0x03	; 3
    172a:	9f 93       	push	r25
    172c:	8f 93       	push	r24
    172e:	8d e0       	ldi	r24, 0x0D	; 13
    1730:	94 e0       	ldi	r25, 0x04	; 4
    1732:	9f 93       	push	r25
    1734:	8f 93       	push	r24
    1736:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
    173a:	29 c1       	rjmp	.+594    	; 0x198e <workInQueue+0x322>
				mainCoef_b00_dev_serial,
				mainCoef_b00_dev_version >> 8,
				mainCoef_b00_dev_version & 0xff);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

	} else if (!main_fw_strncmp(msg, PM_COMMAND_AFCOFF, sizeof(PM_COMMAND_AFCOFF))) {
    173c:	47 e0       	ldi	r20, 0x07	; 7
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	6a e2       	ldi	r22, 0x2A	; 42
    1742:	7c e0       	ldi	r23, 0x0C	; 12
    1744:	8d e8       	ldi	r24, 0x8D	; 141
    1746:	94 e0       	ldi	r25, 0x04	; 4
    1748:	63 df       	rcall	.-314    	; 0x1610 <main_fw_strncmp>
    174a:	89 2b       	or	r24, r25
    174c:	21 f4       	brne	.+8      	; 0x1756 <workInQueue+0xea>
		/* automatic frequency control OFF */
		main_bf.mainIsAFC = false;
    174e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1752:	8e 7f       	andi	r24, 0xFE	; 254
    1754:	0c c0       	rjmp	.+24     	; 0x176e <workInQueue+0x102>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_AFCON, sizeof(PM_COMMAND_AFCON))) {
    1756:	46 e0       	ldi	r20, 0x06	; 6
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	64 e2       	ldi	r22, 0x24	; 36
    175c:	7c e0       	ldi	r23, 0x0C	; 12
    175e:	8d e8       	ldi	r24, 0x8D	; 141
    1760:	94 e0       	ldi	r25, 0x04	; 4
    1762:	56 df       	rcall	.-340    	; 0x1610 <main_fw_strncmp>
    1764:	89 2b       	or	r24, r25
    1766:	31 f4       	brne	.+12     	; 0x1774 <workInQueue+0x108>
		/* automatic frequency control ON */
		main_bf.mainIsAFC = true;
    1768:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    176c:	81 60       	ori	r24, 0x01	; 1
    176e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1772:	e0 c2       	rjmp	.+1472   	; 0x1d34 <workInQueue+0x6c8>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_APCOFF, sizeof(PM_COMMAND_APCOFF))) {
    1774:	47 e0       	ldi	r20, 0x07	; 7
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	6d e1       	ldi	r22, 0x1D	; 29
    177a:	7c e0       	ldi	r23, 0x0C	; 12
    177c:	8d e8       	ldi	r24, 0x8D	; 141
    177e:	94 e0       	ldi	r25, 0x04	; 4
    1780:	47 df       	rcall	.-370    	; 0x1610 <main_fw_strncmp>
    1782:	89 2b       	or	r24, r25
    1784:	21 f4       	brne	.+8      	; 0x178e <workInQueue+0x122>
		/* automatic phase control OFF */
		main_bf.mainIsAPC = false;
    1786:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    178a:	8d 7f       	andi	r24, 0xFD	; 253
    178c:	f0 cf       	rjmp	.-32     	; 0x176e <workInQueue+0x102>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_APCON, sizeof(PM_COMMAND_APCON))) {
    178e:	46 e0       	ldi	r20, 0x06	; 6
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	67 e1       	ldi	r22, 0x17	; 23
    1794:	7c e0       	ldi	r23, 0x0C	; 12
    1796:	8d e8       	ldi	r24, 0x8D	; 141
    1798:	94 e0       	ldi	r25, 0x04	; 4
    179a:	3a df       	rcall	.-396    	; 0x1610 <main_fw_strncmp>
    179c:	89 2b       	or	r24, r25
    179e:	21 f4       	brne	.+8      	; 0x17a8 <workInQueue+0x13c>
		/* automatic phase control ON */
		main_bf.mainIsAPC = true;
    17a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    17a4:	82 60       	ori	r24, 0x02	; 2
    17a6:	e3 cf       	rjmp	.-58     	; 0x176e <workInQueue+0x102>

		main_bf.mainIsSerComm = false;
		main_bf.mainStopAvr = true;
#endif

	} else if (!main_fw_strncmp(msg, PM_COMMAND_HELP, sizeof(PM_COMMAND_HELP))) {
    17a8:	45 e0       	ldi	r20, 0x05	; 5
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	62 e1       	ldi	r22, 0x12	; 18
    17ae:	7c e0       	ldi	r23, 0x0C	; 12
    17b0:	8d e8       	ldi	r24, 0x8D	; 141
    17b2:	94 e0       	ldi	r25, 0x04	; 4
    17b4:	2d df       	rcall	.-422    	; 0x1610 <main_fw_strncmp>
    17b6:	89 2b       	or	r24, r25
    17b8:	e1 f5       	brne	.+120    	; 0x1832 <workInQueue+0x1c6>
		/* help information */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_VERSION, sizeof(PM_FORMAT_VERSION));
    17ba:	22 e4       	ldi	r18, 0x42	; 66
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e4       	ldi	r20, 0x40	; 64
    17c0:	58 e0       	ldi	r21, 0x08	; 8
    17c2:	6d e8       	ldi	r22, 0x8D	; 141
    17c4:	73 e0       	ldi	r23, 0x03	; 3
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		int len = snprintf((char*) mainPrepareBuffer, sizeof(mainPrepareBuffer) - 1, (char*) mainFormatBuffer, VERSION_HIGH, VERSION_LOW);
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	8f 93       	push	r24
    17d0:	80 ea       	ldi	r24, 0xA0	; 160
    17d2:	8f 93       	push	r24
    17d4:	1f 92       	push	r1
    17d6:	8a ea       	ldi	r24, 0xAA	; 170
    17d8:	8f 93       	push	r24
    17da:	8d e8       	ldi	r24, 0x8D	; 141
    17dc:	93 e0       	ldi	r25, 0x03	; 3
    17de:	9f 93       	push	r25
    17e0:	8f 93       	push	r24
    17e2:	1f 92       	push	r1
    17e4:	8f e7       	ldi	r24, 0x7F	; 127
    17e6:	8f 93       	push	r24
    17e8:	8d e0       	ldi	r24, 0x0D	; 13
    17ea:	94 e0       	ldi	r25, 0x04	; 4
    17ec:	9f 93       	push	r25
    17ee:	8f 93       	push	r24
    17f0:	0e 94 8e 34 	call	0x691c	; 0x691c <snprintf>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    17f4:	28 2f       	mov	r18, r24
    17f6:	4d e0       	ldi	r20, 0x0D	; 13
    17f8:	54 e0       	ldi	r21, 0x04	; 4
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
		ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP01, sizeof(PM_INTERPRETER_HELP01));
    1802:	22 e4       	ldi	r18, 0x42	; 66
    1804:	45 e8       	ldi	r20, 0x85	; 133
    1806:	5b e0       	ldi	r21, 0x0B	; 11
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
		main_bf.mainHelpConcatNr = 1;
    1810:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1814:	81 7e       	andi	r24, 0xE1	; 225
    1816:	82 60       	ori	r24, 0x02	; 2
    1818:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
		main_bf.mainIsUsbCommTest = false;
    181c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1820:	8f 7e       	andi	r24, 0xEF	; 239
    1822:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61

	} else if (!main_fw_strncmp(msg, PM_COMMAND_INFO, sizeof(PM_COMMAND_INFO))) {
    1830:	81 c2       	rjmp	.+1282   	; 0x1d34 <workInQueue+0x6c8>
    1832:	45 e0       	ldi	r20, 0x05	; 5
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	6d e0       	ldi	r22, 0x0D	; 13
    1838:	7c e0       	ldi	r23, 0x0C	; 12
    183a:	8d e8       	ldi	r24, 0x8D	; 141
    183c:	94 e0       	ldi	r25, 0x04	; 4
    183e:	e8 de       	rcall	.-560    	; 0x1610 <main_fw_strncmp>
    1840:	89 2b       	or	r24, r25
		/* timer 2 overflow counter TEST */
		main_bf.mainIsTimerTest = !(main_bf.mainIsTimerTest);
    1842:	a9 f4       	brne	.+42     	; 0x186e <workInQueue+0x202>
    1844:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1848:	82 fb       	bst	r24, 2
    184a:	99 27       	eor	r25, r25
    184c:	90 f9       	bld	r25, 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	89 27       	eor	r24, r25
    1852:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    1856:	80 fb       	bst	r24, 0
    1858:	92 f9       	bld	r25, 2
    185a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		if (main_bf.mainIsTimerTest) {
    185e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1862:	82 ff       	sbrs	r24, 2
			main_bf.mainIsSerComm = false;
    1864:	67 c2       	rjmp	.+1230   	; 0x1d34 <workInQueue+0x6c8>
    1866:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			main_bf.mainIsUsbCommTest = false;
		}

	} else if (!main_fw_strncmp(msg, PM_COMMAND_LEDOFF, sizeof(PM_COMMAND_LEDOFF))) {
    186a:	87 7f       	andi	r24, 0xF7	; 247
    186c:	48 c0       	rjmp	.+144    	; 0x18fe <workInQueue+0x292>
    186e:	47 e0       	ldi	r20, 0x07	; 7
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	66 e0       	ldi	r22, 0x06	; 6
    1874:	7c e0       	ldi	r23, 0x0C	; 12
    1876:	8d e8       	ldi	r24, 0x8D	; 141
    1878:	94 e0       	ldi	r25, 0x04	; 4
    187a:	ca de       	rcall	.-620    	; 0x1610 <main_fw_strncmp>
    187c:	89 2b       	or	r24, r25
		/* backlight of the LCD module OFF */
		const uint8_t lcdLedMode = LCD_LED_MODE_OFF;
    187e:	29 f4       	brne	.+10     	; 0x188a <workInQueue+0x21e>
		main_bf.mainLcdLedMode = lcdLedMode;
    1880:	19 82       	std	Y+1, r1	; 0x01
    1882:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>

		memory_fw_writeEEpromPage((uint8_t*) &lcdLedMode, sizeof(uint8_t), offsetof(eeprom_layout_t, b00.b00_lcdLedMode));
		recalcEepromCrc(BLOCK_HEADER_NR, offsetof(eeprom_layout_t, b00.b00_crc));

	} else if (!main_fw_strncmp(msg, PM_COMMAND_LEDON, sizeof(PM_COMMAND_LEDON))) {
    1886:	8f 71       	andi	r24, 0x1F	; 31
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <workInQueue+0x23c>
    188a:	46 e0       	ldi	r20, 0x06	; 6
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	7c e0       	ldi	r23, 0x0C	; 12
    1892:	8d e8       	ldi	r24, 0x8D	; 141
    1894:	94 e0       	ldi	r25, 0x04	; 4
    1896:	bc de       	rcall	.-648    	; 0x1610 <main_fw_strncmp>
    1898:	89 2b       	or	r24, r25
		/* backlight of the LCD module ON */
		const uint8_t lcdLedMode = LCD_LED_MODE_ON;
    189a:	99 f4       	brne	.+38     	; 0x18c2 <workInQueue+0x256>
    189c:	81 e0       	ldi	r24, 0x01	; 1
		main_bf.mainLcdLedMode = lcdLedMode;
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    18a4:	8f 71       	andi	r24, 0x1F	; 31
    18a6:	80 62       	ori	r24, 0x20	; 32
    18a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>

		memory_fw_writeEEpromPage((uint8_t*) &lcdLedMode, sizeof(uint8_t), offsetof(eeprom_layout_t, b00.b00_lcdLedMode));
    18ac:	44 e1       	ldi	r20, 0x14	; 20
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	0e 94 4a 21 	call	0x4294	; 0x4294 <memory_fw_writeEEpromPage>
		recalcEepromCrc(BLOCK_HEADER_NR, offsetof(eeprom_layout_t, b00.b00_crc));
    18ba:	6e e1       	ldi	r22, 0x1E	; 30
    18bc:	70 e0       	ldi	r23, 0x00	; 0

	} else if (!main_fw_strncmp(msg, PM_COMMAND_SEROFF, sizeof(PM_COMMAND_SEROFF))) {
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	31 c1       	rjmp	.+610    	; 0x1b24 <workInQueue+0x4b8>
    18c2:	47 e0       	ldi	r20, 0x07	; 7
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	61 ef       	ldi	r22, 0xF1	; 241
    18c8:	7b e0       	ldi	r23, 0x0B	; 11
    18ca:	8d e8       	ldi	r24, 0x8D	; 141
    18cc:	94 e0       	ldi	r25, 0x04	; 4
    18ce:	a0 de       	rcall	.-704    	; 0x1610 <main_fw_strncmp>
		/* serial communication OFF */
		main_bf.mainIsSerComm = false;
    18d0:	89 2b       	or	r24, r25
    18d2:	21 f4       	brne	.+8      	; 0x18dc <workInQueue+0x270>
    18d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>

	} else if (!main_fw_strncmp(msg, PM_COMMAND_SERON, sizeof(PM_COMMAND_SERON))) {
    18d8:	87 7f       	andi	r24, 0xF7	; 247
    18da:	49 cf       	rjmp	.-366    	; 0x176e <workInQueue+0x102>
    18dc:	46 e0       	ldi	r20, 0x06	; 6
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	6b ee       	ldi	r22, 0xEB	; 235
    18e2:	7b e0       	ldi	r23, 0x0B	; 11
    18e4:	8d e8       	ldi	r24, 0x8D	; 141
    18e6:	94 e0       	ldi	r25, 0x04	; 4
    18e8:	93 de       	rcall	.-730    	; 0x1610 <main_fw_strncmp>
		/* serial communication ON */
		main_bf.mainIsSerComm = true;
    18ea:	89 2b       	or	r24, r25
    18ec:	71 f4       	brne	.+28     	; 0x190a <workInQueue+0x29e>
    18ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    18f2:	88 60       	ori	r24, 0x08	; 8
		main_bf.mainIsTimerTest = false;
    18f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    18f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		main_bf.mainIsUsbCommTest = false;
    18fc:	8b 7f       	andi	r24, 0xFB	; 251
    18fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1902:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>

	} else if (!main_fw_memcmp(msg, PM_COMMAND_SERBAUD, sizeof(PM_COMMAND_SERBAUD) - 1)) {
    1906:	8f 7e       	andi	r24, 0xEF	; 239
    1908:	32 cf       	rjmp	.-412    	; 0x176e <workInQueue+0x102>
    190a:	47 e0       	ldi	r20, 0x07	; 7
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	68 ef       	ldi	r22, 0xF8	; 248
    1910:	7b e0       	ldi	r23, 0x0B	; 11
    1912:	8d e8       	ldi	r24, 0x8D	; 141
    1914:	94 e0       	ldi	r25, 0x04	; 4
    1916:	93 de       	rcall	.-730    	; 0x163e <main_fw_memcmp>
    1918:	89 2b       	or	r24, r25
		/* serial communication baud parameter */
		sscanf((char*) msg + sizeof(PM_COMMAND_SERBAUD) - 1, "%d", &serialCoef_b03_serial_baud);
    191a:	09 f0       	breq	.+2      	; 0x191e <workInQueue+0x2b2>
    191c:	40 c0       	rjmp	.+128    	; 0x199e <workInQueue+0x332>
    191e:	80 e2       	ldi	r24, 0x20	; 32
    1920:	95 e0       	ldi	r25, 0x05	; 5
    1922:	9f 93       	push	r25
    1924:	8f 93       	push	r24
    1926:	81 e1       	ldi	r24, 0x11	; 17
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	9f 93       	push	r25
    192c:	8f 93       	push	r24
    192e:	84 e9       	ldi	r24, 0x94	; 148
    1930:	94 e0       	ldi	r25, 0x04	; 4
    1932:	9f 93       	push	r25
    1934:	8f 93       	push	r24
		serial_fw_setCommBaud(serialCoef_b03_serial_baud);
    1936:	0e 94 da 34 	call	0x69b4	; 0x69b4 <sscanf>
    193a:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <serialCoef_b03_serial_baud>
    193e:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <serialCoef_b03_serial_baud+0x1>

		/* write current baud rate as the default/startup value to the EEPROM */
		memory_fw_writeEEpromPage((uint8_t*) &serialCoef_b03_serial_baud, sizeof(uint16_t), offsetof(eeprom_layout_t, b03.b03_serial_baud));
    1942:	0e 94 90 23 	call	0x4720	; 0x4720 <serial_fw_setCommBaud>
    1946:	40 e6       	ldi	r20, 0x60	; 96
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	62 e0       	ldi	r22, 0x02	; 2
    194c:	80 e2       	ldi	r24, 0x20	; 32
		recalcEepromCrc(BLOCK_GPS_NR, offsetof(eeprom_layout_t, b03.b03_crc));
    194e:	95 e0       	ldi	r25, 0x05	; 5
    1950:	0e 94 4a 21 	call	0x4294	; 0x4294 <memory_fw_writeEEpromPage>
    1954:	6e e7       	ldi	r22, 0x7E	; 126
    1956:	70 e0       	ldi	r23, 0x00	; 0

		/* user information */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SET_BAUD, sizeof(PM_FORMAT_SET_BAUD));
    1958:	83 e0       	ldi	r24, 0x03	; 3
    195a:	6b dd       	rcall	.-1322   	; 0x1432 <recalcEepromCrc>
    195c:	2a e2       	ldi	r18, 0x2A	; 42
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	41 eb       	ldi	r20, 0xB1	; 177
    1962:	51 e0       	ldi	r21, 0x01	; 1
    1964:	6d e8       	ldi	r22, 0x8D	; 141
    1966:	73 e0       	ldi	r23, 0x03	; 3
    1968:	81 e0       	ldi	r24, 0x01	; 1
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    196a:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
    196e:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <serialCoef_b03_serial_baud+0x1>
    1972:	8f 93       	push	r24
    1974:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <serialCoef_b03_serial_baud>
    1978:	8f 93       	push	r24
    197a:	8d e8       	ldi	r24, 0x8D	; 141
    197c:	93 e0       	ldi	r25, 0x03	; 3
    197e:	9f 93       	push	r25
    1980:	8f 93       	push	r24
    1982:	8d e0       	ldi	r24, 0x0D	; 13
    1984:	94 e0       	ldi	r25, 0x04	; 4
    1986:	9f 93       	push	r25
    1988:	8f 93       	push	r24
				serialCoef_b03_serial_baud);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    198a:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
    198e:	28 2f       	mov	r18, r24
    1990:	4d e0       	ldi	r20, 0x0D	; 13
    1992:	54 e0       	ldi	r21, 0x04	; 4
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	80 e0       	ldi	r24, 0x00	; 0

	} else if (!main_fw_strncmp(msg, PM_COMMAND_STACK, sizeof(PM_COMMAND_STACK))) {
    1998:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    199c:	44 cf       	rjmp	.-376    	; 0x1826 <workInQueue+0x1ba>
    199e:	46 e0       	ldi	r20, 0x06	; 6
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	65 ee       	ldi	r22, 0xE5	; 229
    19a4:	7b e0       	ldi	r23, 0x0B	; 11
    19a6:	8d e8       	ldi	r24, 0x8D	; 141
    19a8:	94 e0       	ldi	r25, 0x04	; 4
    19aa:	32 de       	rcall	.-924    	; 0x1610 <main_fw_strncmp>
		/* Stack Check facility */
		main_bf.mainStackCheck = !(main_bf.mainStackCheck);
    19ac:	89 2b       	or	r24, r25
    19ae:	71 f4       	brne	.+28     	; 0x19cc <workInQueue+0x360>
    19b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    19b4:	86 fb       	bst	r24, 6
    19b6:	99 27       	eor	r25, r25
    19b8:	90 f9       	bld	r25, 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	89 27       	eor	r24, r25
    19be:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    19c2:	80 fb       	bst	r24, 0
    19c4:	96 f9       	bld	r25, 6

	} else if (!main_fw_strncmp(msg, PM_COMMAND_TEST, sizeof(PM_COMMAND_TEST))) {
    19c6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
    19ca:	b4 c1       	rjmp	.+872    	; 0x1d34 <workInQueue+0x6c8>
    19cc:	45 e0       	ldi	r20, 0x05	; 5
    19ce:	50 e0       	ldi	r21, 0x00	; 0
    19d0:	60 ee       	ldi	r22, 0xE0	; 224
    19d2:	7b e0       	ldi	r23, 0x0B	; 11
    19d4:	8d e8       	ldi	r24, 0x8D	; 141
    19d6:	94 e0       	ldi	r25, 0x04	; 4
    19d8:	1b de       	rcall	.-970    	; 0x1610 <main_fw_strncmp>
		/* special communication TEST */
		main_bf.mainIsUsbCommTest = !(main_bf.mainIsUsbCommTest);
    19da:	89 2b       	or	r24, r25
    19dc:	c9 f4       	brne	.+50     	; 0x1a10 <workInQueue+0x3a4>
    19de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    19e2:	82 95       	swap	r24
    19e4:	81 70       	andi	r24, 0x01	; 1
    19e6:	91 e0       	ldi	r25, 0x01	; 1
    19e8:	89 27       	eor	r24, r25
    19ea:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    19ee:	80 fb       	bst	r24, 0
    19f0:	94 f9       	bld	r25, 4
		if (main_bf.mainIsUsbCommTest) {
    19f2:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
    19f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			main_bf.mainIsSerComm = false;
    19fa:	84 ff       	sbrs	r24, 4
    19fc:	9b c1       	rjmp	.+822    	; 0x1d34 <workInQueue+0x6c8>
    19fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			main_bf.mainIsTimerTest = false;
    1a02:	87 7f       	andi	r24, 0xF7	; 247
    1a04:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}

	} else if (!main_fw_strncmp(msg, PM_COMMAND_WRITEPWM, sizeof(PM_COMMAND_WRITEPWM))) {
    1a08:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a0c:	8b 7f       	andi	r24, 0xFB	; 251
    1a0e:	af ce       	rjmp	.-674    	; 0x176e <workInQueue+0x102>
    1a10:	49 e0       	ldi	r20, 0x09	; 9
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	67 ed       	ldi	r22, 0xD7	; 215
    1a16:	7b e0       	ldi	r23, 0x0B	; 11
    1a18:	8d e8       	ldi	r24, 0x8D	; 141
    1a1a:	94 e0       	ldi	r25, 0x04	; 4
		/* write current PWM value as the default/startup value to the EEPROM */
		uint8_t sreg = SREG;
    1a1c:	f9 dd       	rcall	.-1038   	; 0x1610 <main_fw_strncmp>
		cli();
    1a1e:	89 2b       	or	r24, r25
		pullCoef_b02_pwm_initial		= fastPwmLoopVal;
    1a20:	e9 f4       	brne	.+58     	; 0x1a5c <workInQueue+0x3f0>
    1a22:	8f b7       	in	r24, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <fastPwmLoopVal>
		pullCoef_b02_pwm_initial_sub	= fastPwmSubLoopVal;
    1a2a:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <pullCoef_b02_pwm_initial>
    1a2e:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <fastPwmSubLoopVal>
		SREG = sreg;

		memory_fw_writeEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial));
    1a32:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <pullCoef_b02_pwm_initial_sub>
    1a36:	8f bf       	out	0x3f, r24	; 63
    1a38:	4a e5       	ldi	r20, 0x5A	; 90
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	61 e0       	ldi	r22, 0x01	; 1
    1a3e:	80 e4       	ldi	r24, 0x40	; 64
		memory_fw_writeEEpromPage((uint8_t*) &pullCoef_b02_pwm_initial_sub, sizeof(uint8_t), offsetof(eeprom_layout_t, b02.b02_pwm_initial_sub));
    1a40:	95 e0       	ldi	r25, 0x05	; 5
    1a42:	0e 94 4a 21 	call	0x4294	; 0x4294 <memory_fw_writeEEpromPage>
    1a46:	4b e5       	ldi	r20, 0x5B	; 91
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
		recalcEepromCrc(BLOCK_REFOSC_NR, offsetof(eeprom_layout_t, b02.b02_crc));
    1a4c:	8f e3       	ldi	r24, 0x3F	; 63
    1a4e:	95 e0       	ldi	r25, 0x05	; 5
    1a50:	0e 94 4a 21 	call	0x4294	; 0x4294 <memory_fw_writeEEpromPage>

	} else if (!main_fw_memcmp(msg, PM_COMMAND_WRITETEMP, sizeof(PM_COMMAND_WRITETEMP) - 1)) {
    1a54:	6e e5       	ldi	r22, 0x5E	; 94
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	64 c0       	rjmp	.+200    	; 0x1b24 <workInQueue+0x4b8>
    1a5c:	49 e0       	ldi	r20, 0x09	; 9
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	6d ec       	ldi	r22, 0xCD	; 205
    1a62:	7b e0       	ldi	r23, 0x0B	; 11
    1a64:	8d e8       	ldi	r24, 0x8D	; 141
    1a66:	94 e0       	ldi	r25, 0x04	; 4
    1a68:	ea dd       	rcall	.-1068   	; 0x163e <main_fw_memcmp>
		float localTemp = 0.0f;
    1a6a:	89 2b       	or	r24, r25
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <workInQueue+0x404>
    1a6e:	5c c0       	rjmp	.+184    	; 0x1b28 <workInQueue+0x4bc>
    1a70:	19 82       	std	Y+1, r1	; 0x01
		/* take current temperature value to correct the displayed values */
		sscanf(((char*) msg) + sizeof(PM_COMMAND_WRITETEMP) - 1, "%f", &localTemp);
    1a72:	1a 82       	std	Y+2, r1	; 0x02
    1a74:	1b 82       	std	Y+3, r1	; 0x03
    1a76:	1c 82       	std	Y+4, r1	; 0x04
    1a78:	ce 01       	movw	r24, r28
    1a7a:	01 96       	adiw	r24, 0x01	; 1
    1a7c:	9f 93       	push	r25
    1a7e:	8f 93       	push	r24
    1a80:	84 e1       	ldi	r24, 0x14	; 20
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	9f 93       	push	r25
    1a86:	8f 93       	push	r24
    1a88:	86 e9       	ldi	r24, 0x96	; 150
    1a8a:	94 e0       	ldi	r25, 0x04	; 4
    1a8c:	9f 93       	push	r25
		if (localTemp) {
    1a8e:	8f 93       	push	r24
    1a90:	0e 94 da 34 	call	0x69b4	; 0x69b4 <sscanf>
    1a94:	c9 80       	ldd	r12, Y+1	; 0x01
    1a96:	da 80       	ldd	r13, Y+2	; 0x02
    1a98:	eb 80       	ldd	r14, Y+3	; 0x03
    1a9a:	fc 80       	ldd	r15, Y+4	; 0x04
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	a9 01       	movw	r20, r18
    1aae:	c7 01       	movw	r24, r14
    1ab0:	b6 01       	movw	r22, r12
    1ab2:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
			/* calculate the new correction value */
			mainCoef_b01_temp_ofs_adc_25C_steps = (acAdcCh[ADC_CH_TEMP] - ((localTemp - 25.0f) / mainCoef_b01_temp_k_p1step_adc_K));
    1ab6:	88 23       	and	r24, r24
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <workInQueue+0x450>
    1aba:	3c c1       	rjmp	.+632    	; 0x1d34 <workInQueue+0x6c8>
    1abc:	60 91 8b 03 	lds	r22, 0x038B	; 0x80038b <acAdcCh+0x4>
    1ac0:	70 91 8c 03 	lds	r23, 0x038C	; 0x80038c <acAdcCh+0x5>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 4e 31 	call	0x629c	; 0x629c <__floatunsisf>
    1acc:	4b 01       	movw	r8, r22
    1ace:	5c 01       	movw	r10, r24
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	48 ec       	ldi	r20, 0xC8	; 200
    1ad6:	51 e4       	ldi	r21, 0x41	; 65
    1ad8:	c7 01       	movw	r24, r14
    1ada:	b6 01       	movw	r22, r12
    1adc:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    1ae0:	20 91 b2 05 	lds	r18, 0x05B2	; 0x8005b2 <mainCoef_b01_temp_k_p1step_adc_K>
    1ae4:	30 91 b3 05 	lds	r19, 0x05B3	; 0x8005b3 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    1ae8:	40 91 b4 05 	lds	r20, 0x05B4	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    1aec:	50 91 b5 05 	lds	r21, 0x05B5	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
    1af0:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    1af4:	9b 01       	movw	r18, r22
    1af6:	ac 01       	movw	r20, r24
    1af8:	c5 01       	movw	r24, r10
    1afa:	b4 01       	movw	r22, r8
    1afc:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    1b00:	60 93 b6 05 	sts	0x05B6, r22	; 0x8005b6 <mainCoef_b01_temp_ofs_adc_25C_steps>
    1b04:	70 93 b7 05 	sts	0x05B7, r23	; 0x8005b7 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>

			/* write the correction value to the EEPROM */
			memory_fw_writeEEpromPage((uint8_t*) &mainCoef_b01_temp_ofs_adc_25C_steps, sizeof(float), offsetof(eeprom_layout_t, b01.b01_temp_ofs_adc_25C_steps));
    1b08:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    1b0c:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>
    1b10:	48 e2       	ldi	r20, 0x28	; 40
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	64 e0       	ldi	r22, 0x04	; 4
			recalcEepromCrc(BLOCK_MEASURING_NR, offsetof(eeprom_layout_t, b01.b01_crc));
    1b16:	86 eb       	ldi	r24, 0xB6	; 182
    1b18:	95 e0       	ldi	r25, 0x05	; 5
    1b1a:	0e 94 4a 21 	call	0x4294	; 0x4294 <memory_fw_writeEEpromPage>
    1b1e:	6e e3       	ldi	r22, 0x3E	; 62
    1b20:	70 e0       	ldi	r23, 0x00	; 0
		}
	} else if (msg[0] == PM_COMMAND_PLUSSIGN[0]) {
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	86 dc       	rcall	.-1780   	; 0x1432 <recalcEepromCrc>
    1b26:	06 c1       	rjmp	.+524    	; 0x1d34 <workInQueue+0x6c8>
    1b28:	0d e8       	ldi	r16, 0x8D	; 141
    1b2a:	14 e0       	ldi	r17, 0x04	; 4
    1b2c:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <mainInterpreterBuffer>
		/* correct the PWM value up */
		sscanf(((char*) msg) + 1, "%f", &mainPwmTerminalAdj);
    1b30:	8b 32       	cpi	r24, 0x2B	; 43
    1b32:	79 f4       	brne	.+30     	; 0x1b52 <workInQueue+0x4e6>
    1b34:	89 e9       	ldi	r24, 0x99	; 153
    1b36:	95 e0       	ldi	r25, 0x05	; 5
    1b38:	9f 93       	push	r25
    1b3a:	8f 93       	push	r24
    1b3c:	84 e1       	ldi	r24, 0x14	; 20
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	9f 93       	push	r25
    1b42:	8f 93       	push	r24
    1b44:	8e e8       	ldi	r24, 0x8E	; 142
    1b46:	94 e0       	ldi	r25, 0x04	; 4
    1b48:	9f 93       	push	r25
    1b4a:	8f 93       	push	r24

	} else if (msg[0] == PM_COMMAND_MINUSSIGN[0]) {
    1b4c:	0e 94 da 34 	call	0x69b4	; 0x69b4 <sscanf>
		/* correct the PWM value down */
		sscanf(((char*) msg) + 1, "%f", &mainPwmTerminalAdj);
    1b50:	21 c0       	rjmp	.+66     	; 0x1b94 <workInQueue+0x528>
    1b52:	8d 32       	cpi	r24, 0x2D	; 45
    1b54:	31 f5       	brne	.+76     	; 0x1ba2 <workInQueue+0x536>
    1b56:	89 e9       	ldi	r24, 0x99	; 153
    1b58:	95 e0       	ldi	r25, 0x05	; 5
    1b5a:	9f 93       	push	r25
    1b5c:	8f 93       	push	r24
    1b5e:	84 e1       	ldi	r24, 0x14	; 20
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	9f 93       	push	r25
    1b64:	8f 93       	push	r24
    1b66:	8e e8       	ldi	r24, 0x8E	; 142
    1b68:	94 e0       	ldi	r25, 0x04	; 4
    1b6a:	9f 93       	push	r25
		mainPwmTerminalAdj = -mainPwmTerminalAdj;
    1b6c:	8f 93       	push	r24
    1b6e:	0e 94 da 34 	call	0x69b4	; 0x69b4 <sscanf>
    1b72:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <mainPwmTerminalAdj>
    1b76:	90 91 9a 05 	lds	r25, 0x059A	; 0x80059a <mainPwmTerminalAdj+0x1>
    1b7a:	a0 91 9b 05 	lds	r26, 0x059B	; 0x80059b <mainPwmTerminalAdj+0x2>
    1b7e:	b0 91 9c 05 	lds	r27, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x3>
    1b82:	b0 58       	subi	r27, 0x80	; 128
    1b84:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <mainPwmTerminalAdj>
    1b88:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <mainPwmTerminalAdj+0x1>
    1b8c:	a0 93 9b 05 	sts	0x059B, r26	; 0x80059b <mainPwmTerminalAdj+0x2>
    1b90:	b0 93 9c 05 	sts	0x059C, r27	; 0x80059c <mainPwmTerminalAdj+0x3>
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0

	} else {
		/* unknown command */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_INTERPRETER_UNKNOWN, sizeof(PM_INTERPRETER_UNKNOWN));
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	c9 c0       	rjmp	.+402    	; 0x1d34 <workInQueue+0x6c8>
    1ba2:	21 e3       	ldi	r18, 0x31	; 49
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	42 e8       	ldi	r20, 0x82	; 130
    1ba8:	58 e0       	ldi	r21, 0x08	; 8
    1baa:	6d e8       	ldi	r22, 0x8D	; 141
    1bac:	73 e0       	ldi	r23, 0x03	; 3
		int len = snprintf((char*) mainPrepareBuffer, sizeof(mainPrepareBuffer) - 1, (char*) mainFormatBuffer, msg);
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
    1bb4:	1f 93       	push	r17
    1bb6:	0f 93       	push	r16
    1bb8:	8d e8       	ldi	r24, 0x8D	; 141
    1bba:	93 e0       	ldi	r25, 0x03	; 3
    1bbc:	9f 93       	push	r25
    1bbe:	8f 93       	push	r24
    1bc0:	1f 92       	push	r1
    1bc2:	8f e7       	ldi	r24, 0x7F	; 127
    1bc4:	8f 93       	push	r24
    1bc6:	8d e0       	ldi	r24, 0x0D	; 13
    1bc8:	94 e0       	ldi	r25, 0x04	; 4
    1bca:	9f 93       	push	r25
    1bcc:	8f 93       	push	r24
#endif

				doInterpret(mainInterpreterBuffer, localMsgLen);								// message is clean to process
			}

		} else if (main_bf.mainHelpConcatNr && !(statusRcv & RINGBUFFER_MSG_STATUS_AVAIL)) {	// during help printing, go ahead when receive buffer is empty again
    1bce:	0e 94 8e 34 	call	0x691c	; 0x691c <snprintf>
    1bd2:	dd ce       	rjmp	.-582    	; 0x198e <workInQueue+0x322>
    1bd4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1bd8:	96 95       	lsr	r25
    1bda:	9f 70       	andi	r25, 0x0F	; 15
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <workInQueue+0x574>
			ringbuffer_fw_freeSemaphore(true); isLocked = false;
    1bde:	a7 c0       	rjmp	.+334    	; 0x1d2e <workInQueue+0x6c2>
    1be0:	80 fd       	sbrc	r24, 0
    1be2:	a5 c0       	rjmp	.+330    	; 0x1d2e <workInQueue+0x6c2>

			switch (main_bf.mainHelpConcatNr) {
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ringbuffer_fw_freeSemaphore>
    1bea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1bee:	e8 2f       	mov	r30, r24
    1bf0:	e6 95       	lsr	r30
    1bf2:	ef 70       	andi	r30, 0x0F	; 15
    1bf4:	8e 2f       	mov	r24, r30
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	31 97       	sbiw	r30, 0x01	; 1
    1bfc:	ed 30       	cpi	r30, 0x0D	; 13
    1bfe:	f1 05       	cpc	r31, r1
    1c00:	08 f0       	brcs	.+2      	; 0x1c04 <workInQueue+0x598>
    1c02:	8f c0       	rjmp	.+286    	; 0x1d22 <workInQueue+0x6b6>
    1c04:	ec 5c       	subi	r30, 0xCC	; 204
			case 1:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP02, sizeof(PM_INTERPRETER_HELP02));
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	0c 94 f6 2f 	jmp	0x5fec	; 0x5fec <__tablejump2__>
    1c0c:	2f e6       	ldi	r18, 0x6F	; 111
    1c0e:	46 e1       	ldi	r20, 0x16	; 22
    1c10:	5b e0       	ldi	r21, 0x0B	; 11
    1c12:	61 e0       	ldi	r22, 0x01	; 1
				main_bf.mainHelpConcatNr = 2;
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1c1a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
				break;

			case 2:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP03, sizeof(PM_INTERPRETER_HELP03));
    1c1e:	81 7e       	andi	r24, 0xE1	; 225
    1c20:	84 60       	ori	r24, 0x04	; 4
    1c22:	82 c0       	rjmp	.+260    	; 0x1d28 <workInQueue+0x6bc>
    1c24:	27 e6       	ldi	r18, 0x67	; 103
    1c26:	4f ea       	ldi	r20, 0xAF	; 175
    1c28:	5a e0       	ldi	r21, 0x0A	; 10
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
				break;

			case 3:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP04, sizeof(PM_INTERPRETER_HELP04));
#endif
				main_bf.mainHelpConcatNr = 4;
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1c32:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
				break;

			case 4:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP05, sizeof(PM_INTERPRETER_HELP05));
    1c36:	81 7e       	andi	r24, 0xE1	; 225
    1c38:	88 60       	ori	r24, 0x08	; 8
    1c3a:	76 c0       	rjmp	.+236    	; 0x1d28 <workInQueue+0x6bc>
    1c3c:	27 e1       	ldi	r18, 0x17	; 23
    1c3e:	48 e9       	ldi	r20, 0x98	; 152
    1c40:	5a e0       	ldi	r21, 0x0A	; 10
    1c42:	61 e0       	ldi	r22, 0x01	; 1
				main_bf.mainHelpConcatNr = 5;
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1c4a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
				break;

			case 5:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP06, sizeof(PM_INTERPRETER_HELP06));
    1c4e:	81 7e       	andi	r24, 0xE1	; 225
    1c50:	8a 60       	ori	r24, 0x0A	; 10
    1c52:	6a c0       	rjmp	.+212    	; 0x1d28 <workInQueue+0x6bc>
    1c54:	2b e2       	ldi	r18, 0x2B	; 43
    1c56:	4d e6       	ldi	r20, 0x6D	; 109
    1c58:	5a e0       	ldi	r21, 0x0A	; 10
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
				main_bf.mainHelpConcatNr = 6;
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1c62:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
				break;

			case 6:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP07, sizeof(PM_INTERPRETER_HELP07));
    1c66:	81 7e       	andi	r24, 0xE1	; 225
    1c68:	8c 60       	ori	r24, 0x0C	; 12
    1c6a:	5e c0       	rjmp	.+188    	; 0x1d28 <workInQueue+0x6bc>
    1c6c:	2f e3       	ldi	r18, 0x3F	; 63
    1c6e:	4e e2       	ldi	r20, 0x2E	; 46
    1c70:	5a e0       	ldi	r21, 0x0A	; 10
    1c72:	61 e0       	ldi	r22, 0x01	; 1
				main_bf.mainHelpConcatNr = 7;
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1c7a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
				break;

			case 7:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP08, sizeof(PM_INTERPRETER_HELP08));
    1c7e:	81 7e       	andi	r24, 0xE1	; 225
    1c80:	8e 60       	ori	r24, 0x0E	; 14
    1c82:	52 c0       	rjmp	.+164    	; 0x1d28 <workInQueue+0x6bc>
    1c84:	2c e2       	ldi	r18, 0x2C	; 44
    1c86:	42 e0       	ldi	r20, 0x02	; 2
    1c88:	5a e0       	ldi	r21, 0x0A	; 10
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
				main_bf.mainHelpConcatNr = 8;
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1c92:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
				break;

			case 8:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP09, sizeof(PM_INTERPRETER_HELP09));
    1c96:	81 7e       	andi	r24, 0xE1	; 225
    1c98:	80 61       	ori	r24, 0x10	; 16
    1c9a:	46 c0       	rjmp	.+140    	; 0x1d28 <workInQueue+0x6bc>
    1c9c:	25 e5       	ldi	r18, 0x55	; 85
    1c9e:	4d ea       	ldi	r20, 0xAD	; 173
    1ca0:	59 e0       	ldi	r21, 0x09	; 9
    1ca2:	61 e0       	ldi	r22, 0x01	; 1
				main_bf.mainHelpConcatNr = 9;
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1caa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
				break;

			case 9:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP10, sizeof(PM_INTERPRETER_HELP10));
    1cae:	81 7e       	andi	r24, 0xE1	; 225
    1cb0:	82 61       	ori	r24, 0x12	; 18
    1cb2:	3a c0       	rjmp	.+116    	; 0x1d28 <workInQueue+0x6bc>
    1cb4:	28 e2       	ldi	r18, 0x28	; 40
    1cb6:	45 e8       	ldi	r20, 0x85	; 133
    1cb8:	59 e0       	ldi	r21, 0x09	; 9
    1cba:	61 e0       	ldi	r22, 0x01	; 1
				main_bf.mainHelpConcatNr = 10;
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1cc2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
				break;

			case 10:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP11, sizeof(PM_INTERPRETER_HELP11));
    1cc6:	81 7e       	andi	r24, 0xE1	; 225
    1cc8:	84 61       	ori	r24, 0x14	; 20
    1cca:	2e c0       	rjmp	.+92     	; 0x1d28 <workInQueue+0x6bc>
    1ccc:	2f e1       	ldi	r18, 0x1F	; 31
    1cce:	46 e6       	ldi	r20, 0x66	; 102
    1cd0:	59 e0       	ldi	r21, 0x09	; 9
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
				main_bf.mainHelpConcatNr = 11;
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1cda:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
				break;

			case 11:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP12, sizeof(PM_INTERPRETER_HELP12));
    1cde:	81 7e       	andi	r24, 0xE1	; 225
    1ce0:	86 61       	ori	r24, 0x16	; 22
    1ce2:	22 c0       	rjmp	.+68     	; 0x1d28 <workInQueue+0x6bc>
    1ce4:	24 e7       	ldi	r18, 0x74	; 116
    1ce6:	42 ef       	ldi	r20, 0xF2	; 242
    1ce8:	58 e0       	ldi	r21, 0x08	; 8
    1cea:	61 e0       	ldi	r22, 0x01	; 1
				main_bf.mainHelpConcatNr = 12;
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1cf2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
				break;

			case 12:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP13, sizeof(PM_INTERPRETER_HELP13));
    1cf6:	81 7e       	andi	r24, 0xE1	; 225
    1cf8:	88 61       	ori	r24, 0x18	; 24
    1cfa:	16 c0       	rjmp	.+44     	; 0x1d28 <workInQueue+0x6bc>
    1cfc:	20 e3       	ldi	r18, 0x30	; 48
    1cfe:	42 ec       	ldi	r20, 0xC2	; 194
    1d00:	58 e0       	ldi	r21, 0x08	; 8
    1d02:	61 e0       	ldi	r22, 0x01	; 1
				main_bf.mainHelpConcatNr = 13;
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1d0a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
				break;

			case 13:
				ringbuffer_fw_ringBufferWaitAppend(false, true, PM_INTERPRETER_HELP14, sizeof(PM_INTERPRETER_HELP14));
    1d0e:	81 7e       	andi	r24, 0xE1	; 225
    1d10:	8a 61       	ori	r24, 0x1A	; 26
    1d12:	0a c0       	rjmp	.+20     	; 0x1d28 <workInQueue+0x6bc>
    1d14:	2f e0       	ldi	r18, 0x0F	; 15
    1d16:	43 eb       	ldi	r20, 0xB3	; 179
    1d18:	58 e0       	ldi	r21, 0x08	; 8
    1d1a:	61 e0       	ldi	r22, 0x01	; 1
				// no break
			default:
				main_bf.mainHelpConcatNr = 0;
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    1d22:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1d26:	81 7e       	andi	r24, 0xE1	; 225
				break;
			}
		}

		if (isLocked) {
			ringbuffer_fw_freeSemaphore(true);
    1d28:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <workInQueue+0x6c8>
		}
	}
}
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ringbuffer_fw_freeSemaphore>
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	ff 90       	pop	r15
    1d46:	ef 90       	pop	r14
    1d48:	df 90       	pop	r13
    1d4a:	cf 90       	pop	r12
    1d4c:	bf 90       	pop	r11
    1d4e:	af 90       	pop	r10
    1d50:	9f 90       	pop	r9
    1d52:	8f 90       	pop	r8
    1d54:	08 95       	ret

00001d56 <main_fw_giveAway>:
		mainPwmTerminalAdj = 0.0f;
	}
}

void main_fw_giveAway(void)
{
    1d56:	2f 92       	push	r2
    1d58:	3f 92       	push	r3
    1d5a:	4f 92       	push	r4
    1d5c:	5f 92       	push	r5
    1d5e:	6f 92       	push	r6
    1d60:	7f 92       	push	r7
    1d62:	8f 92       	push	r8
    1d64:	9f 92       	push	r9
    1d66:	af 92       	push	r10
    1d68:	bf 92       	push	r11
    1d6a:	cf 92       	push	r12
    1d6c:	df 92       	push	r13
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	65 97       	sbiw	r28, 0x15	; 21
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    wdt_reset();
    1d8a:	a8 95       	wdr
	usbPoll();
    1d8c:	0e 94 35 2a 	call	0x546a	; 0x546a <usbPoll>

	usb_fw_sendInInterrupt();
    1d90:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <usb_fw_sendInInterrupt>
	uint16_t localStampICR1;
	uint8_t len = 0;

	{
		/* get the timers */
		uint8_t sreg = SREG;
    1d94:	6b dc       	rcall	.-1834   	; 0x166c <workInQueue>
		cli();
    1d96:	9f b7       	in	r25, 0x3f	; 63

		/* get the current ms and ticks timer */
		uint8_t localTCNT1L = TCNT1L;						// low byte first
    1d98:	f8 94       	cli
    1d9a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		uint8_t localTCNT1H = TCNT1H;
    1d9e:	2b 87       	std	Y+11, r18	; 0x0b
    1da0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		localFastCtr1ms = fastCtr1ms;						// make a copy of the running clock
    1da4:	3f 83       	std	Y+7, r19	; 0x07
    1da6:	40 90 35 05 	lds	r4, 0x0535	; 0x800535 <fastCtr1ms>
    1daa:	50 90 36 05 	lds	r5, 0x0536	; 0x800536 <fastCtr1ms+0x1>
    1dae:	60 90 37 05 	lds	r6, 0x0537	; 0x800537 <fastCtr1ms+0x2>
    1db2:	70 90 38 05 	lds	r7, 0x0538	; 0x800538 <fastCtr1ms+0x3>

		/* get the last stamped time as ms and ticks */
		uint8_t localICR1L = ICR1L;							// low byte first
    1db6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		uint8_t localICR1H = ICR1H;
    1dba:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
		localStampCtr1ms = fastStampCtr1ms;					// make a copy of the captured / timestamped clock
    1dbe:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <fastStampCtr1ms>
    1dc2:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <fastStampCtr1ms+0x1>
    1dc6:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <fastStampCtr1ms+0x2>
    1dca:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <fastStampCtr1ms+0x3>

		localFastTCNT1	= localTCNT1L | (localTCNT1H << 8);
		localStampICR1	= localICR1L  | (localICR1H  << 8);
	}

	if (localAdcConvertNowCntrLast != acAdcConvertNowCntr) {  // a new PPS impulse has arrived
    1dce:	9f bf       	out	0x3f, r25	; 63
    1dd0:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <acAdcConvertNowCntr>
    1dd4:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <localAdcConvertNowCntrLast.3124>
    1dd8:	39 17       	cp	r19, r25
		localAdcConvertNowCntrLast = acAdcConvertNowCntr;
    1dda:	69 f1       	breq	.+90     	; 0x1e36 <main_fw_giveAway+0xe0>
    1ddc:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <localAdcConvertNowCntrLast.3124>
		localNoPpsCnt = 0;
    1de0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <localNoPpsCnt.3126>

		ppsStampCtr1ms_last = ppsStampCtr1ms;
    1de4:	c0 90 89 05 	lds	r12, 0x0589	; 0x800589 <ppsStampCtr1ms>
    1de8:	d0 90 8a 05 	lds	r13, 0x058A	; 0x80058a <ppsStampCtr1ms+0x1>
    1dec:	e0 90 8b 05 	lds	r14, 0x058B	; 0x80058b <ppsStampCtr1ms+0x2>
    1df0:	f0 90 8c 05 	lds	r15, 0x058C	; 0x80058c <ppsStampCtr1ms+0x3>
    1df4:	c0 92 83 05 	sts	0x0583, r12	; 0x800583 <ppsStampCtr1ms_last>
    1df8:	d0 92 84 05 	sts	0x0584, r13	; 0x800584 <ppsStampCtr1ms_last+0x1>
    1dfc:	e0 92 85 05 	sts	0x0585, r14	; 0x800585 <ppsStampCtr1ms_last+0x2>
    1e00:	f0 92 86 05 	sts	0x0586, r15	; 0x800586 <ppsStampCtr1ms_last+0x3>
		ppsStampICR1_last   = ppsStampICR1;
    1e04:	e0 91 87 05 	lds	r30, 0x0587	; 0x800587 <ppsStampICR1>
    1e08:	f0 91 88 05 	lds	r31, 0x0588	; 0x800588 <ppsStampICR1+0x1>
    1e0c:	f0 93 82 05 	sts	0x0582, r31	; 0x800582 <ppsStampICR1_last+0x1>
    1e10:	e0 93 81 05 	sts	0x0581, r30	; 0x800581 <ppsStampICR1_last>

		ppsStampCtr1ms = localStampCtr1ms;
    1e14:	66 27       	eor	r22, r22
    1e16:	77 27       	eor	r23, r23
    1e18:	40 93 89 05 	sts	0x0589, r20	; 0x800589 <ppsStampCtr1ms>
    1e1c:	50 93 8a 05 	sts	0x058A, r21	; 0x80058a <ppsStampCtr1ms+0x1>
    1e20:	60 93 8b 05 	sts	0x058B, r22	; 0x80058b <ppsStampCtr1ms+0x2>
    1e24:	70 93 8c 05 	sts	0x058C, r23	; 0x80058c <ppsStampCtr1ms+0x3>
		ppsStampICR1   = localStampICR1;
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	92 2b       	or	r25, r18
    1e2c:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <ppsStampICR1+0x1>
    1e30:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <ppsStampICR1>

		/* reload timer */
		localFastCtr1ms_next = localFastCtr1ms + LocalCtr1sSpanMs + LocalCtr250msBorderMs;

	} else if (localFastCtr1ms >= localFastCtr1ms_next) {  	// the timer has elapsed without a PPS impulse
    1e34:	2c c0       	rjmp	.+88     	; 0x1e8e <main_fw_giveAway+0x138>
    1e36:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <localFastCtr1ms_next.3125>
    1e3a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <localFastCtr1ms_next.3125+0x1>
    1e3e:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <localFastCtr1ms_next.3125+0x2>
    1e42:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <localFastCtr1ms_next.3125+0x3>
    1e46:	48 16       	cp	r4, r24
    1e48:	59 06       	cpc	r5, r25
    1e4a:	6a 06       	cpc	r6, r26
    1e4c:	7b 06       	cpc	r7, r27
		if (++localNoPpsCnt > 180) {
    1e4e:	98 f1       	brcs	.+102    	; 0x1eb6 <main_fw_giveAway+0x160>
    1e50:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <localNoPpsCnt.3126>
    1e54:	2f 5f       	subi	r18, 0xFF	; 255
    1e56:	25 3b       	cpi	r18, 0xB5	; 181
			localNoPpsCnt = 180;							// clamp to 3 minutes
    1e58:	08 f0       	brcs	.+2      	; 0x1e5c <main_fw_giveAway+0x106>
    1e5a:	24 eb       	ldi	r18, 0xB4	; 180
    1e5c:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <localNoPpsCnt.3126>
		}
		if (localNoPpsCnt >= 5) {
    1e60:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <localNoPpsCnt.3126>
    1e64:	25 30       	cpi	r18, 0x05	; 5
			mainRefClkState = REFCLK_STATE_NOSYNC;			// reset clock state when at least 5 seconds without a reference signal
    1e66:	50 f0       	brcs	.+20     	; 0x1e7c <main_fw_giveAway+0x126>
    1e68:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <mainRefClkState>
			mainPpm = 0.0f;
    1e6c:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <mainPpm>
    1e70:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <mainPpm+0x1>
    1e74:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <mainPpm+0x2>
    1e78:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <mainPpm+0x3>
		}

		if ((localFastCtr1ms_next + LocalCtr1sSpanMs) > localFastCtr1ms) {
    1e7c:	88 51       	subi	r24, 0x18	; 24
    1e7e:	9c 4f       	sbci	r25, 0xFC	; 252
    1e80:	af 4f       	sbci	r26, 0xFF	; 255
    1e82:	bf 4f       	sbci	r27, 0xFF	; 255
    1e84:	48 16       	cp	r4, r24
    1e86:	59 06       	cpc	r5, r25
    1e88:	6a 06       	cpc	r6, r26
    1e8a:	7b 06       	cpc	r7, r27
			/* adjust */
			localFastCtr1ms_next += LocalCtr1sSpanMs;		// +1 second

		} else {
			/* reload / initial timer */
			localFastCtr1ms_next = localFastCtr1ms + LocalCtr1sSpanMs + LocalCtr250msBorderMs;
    1e8c:	30 f0       	brcs	.+12     	; 0x1e9a <main_fw_giveAway+0x144>
    1e8e:	d3 01       	movw	r26, r6
    1e90:	c2 01       	movw	r24, r4
    1e92:	8e 51       	subi	r24, 0x1E	; 30
    1e94:	9b 4f       	sbci	r25, 0xFB	; 251
    1e96:	af 4f       	sbci	r26, 0xFF	; 255
    1e98:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <localFastCtr1ms_next.3125>
    1e9e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <localFastCtr1ms_next.3125+0x1>
    1ea2:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <localFastCtr1ms_next.3125+0x2>
    1ea6:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <localFastCtr1ms_next.3125+0x3>
	 *
	 * ATTENTION: This version of the application does drop the vprintf() floating point facilities.
	 *            vscanf() floating point is still in use.
	 */

	if (mainGpsInitVal) {
    1eaa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <mainGpsInitVal>
    1eae:	88 23       	and	r24, r24
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <main_fw_giveAway+0x15e>
    1eb2:	fd c1       	rjmp	.+1018   	; 0x22ae <main_fw_giveAway+0x558>
		}

	} else {
		/* nothing has happened - do some bulk data if a job is ready to be done */

		if (serialCtxtBufferState == SERIAL_CTXT_BUFFER_STATE_SEND) {
    1eb4:	c7 c1       	rjmp	.+910    	; 0x2244 <main_fw_giveAway+0x4ee>
    1eb6:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <serialCtxtBufferState>
    1eba:	82 30       	cpi	r24, 0x02	; 2
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <main_fw_giveAway+0x16a>
		main_nmeaTimeUtcInt +=  10000;
	}
}

static void main_fw_parseNmeaLineData(void) {
	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG01, sizeof(PM_PARSE_NMEA_MSG01));
    1ebe:	80 c1       	rjmp	.+768    	; 0x21c0 <main_fw_giveAway+0x46a>
    1ec0:	2d e3       	ldi	r18, 0x3D	; 61
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	44 e7       	ldi	r20, 0x74	; 116
    1ec6:	51 e0       	ldi	r21, 0x01	; 1
    1ec8:	6d e8       	ldi	r22, 0x8D	; 141
    1eca:	73 e0       	ldi	r23, 0x03	; 3
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
	int len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1ed2:	81 e4       	ldi	r24, 0x41	; 65
    1ed4:	95 e0       	ldi	r25, 0x05	; 5
    1ed6:	9f 93       	push	r25
    1ed8:	8f 93       	push	r24
    1eda:	83 e4       	ldi	r24, 0x43	; 67
    1edc:	95 e0       	ldi	r25, 0x05	; 5
    1ede:	9f 93       	push	r25
    1ee0:	8f 93       	push	r24
    1ee2:	8f e5       	ldi	r24, 0x5F	; 95
    1ee4:	95 e0       	ldi	r25, 0x05	; 5
    1ee6:	9f 93       	push	r25
    1ee8:	8f 93       	push	r24
    1eea:	87 e6       	ldi	r24, 0x67	; 103
    1eec:	95 e0       	ldi	r25, 0x05	; 5
    1eee:	9f 93       	push	r25
    1ef0:	8f 93       	push	r24
    1ef2:	8d e6       	ldi	r24, 0x6D	; 109
    1ef4:	95 e0       	ldi	r25, 0x05	; 5
    1ef6:	9f 93       	push	r25
    1ef8:	8f 93       	push	r24
    1efa:	87 e4       	ldi	r24, 0x47	; 71
    1efc:	95 e0       	ldi	r25, 0x05	; 5
    1efe:	9f 93       	push	r25
    1f00:	8f 93       	push	r24
    1f02:	88 e4       	ldi	r24, 0x48	; 72
    1f04:	95 e0       	ldi	r25, 0x05	; 5
    1f06:	9f 93       	push	r25
    1f08:	8f 93       	push	r24
    1f0a:	8c e4       	ldi	r24, 0x4C	; 76
    1f0c:	95 e0       	ldi	r25, 0x05	; 5
    1f0e:	9f 93       	push	r25
    1f10:	8f 93       	push	r24
    1f12:	8d e4       	ldi	r24, 0x4D	; 77
    1f14:	95 e0       	ldi	r25, 0x05	; 5
    1f16:	9f 93       	push	r25
    1f18:	8f 93       	push	r24
    1f1a:	81 e5       	ldi	r24, 0x51	; 81
    1f1c:	95 e0       	ldi	r25, 0x05	; 5
    1f1e:	9f 93       	push	r25
    1f20:	8f 93       	push	r24
    1f22:	83 e5       	ldi	r24, 0x53	; 83
    1f24:	95 e0       	ldi	r25, 0x05	; 5
    1f26:	9f 93       	push	r25
    1f28:	8f 93       	push	r24
    1f2a:	2d e8       	ldi	r18, 0x8D	; 141
    1f2c:	e2 2e       	mov	r14, r18
    1f2e:	23 e0       	ldi	r18, 0x03	; 3
    1f30:	f2 2e       	mov	r15, r18
    1f32:	ff 92       	push	r15
    1f34:	ef 92       	push	r14
    1f36:	0f e0       	ldi	r16, 0x0F	; 15
    1f38:	12 e0       	ldi	r17, 0x02	; 2
    1f3a:	1f 93       	push	r17
    1f3c:	0f 93       	push	r16
    1f3e:	0e 94 da 34 	call	0x69b4	; 0x69b4 <sscanf>
			&main_nmeaSatsUsed,
			&main_nmeaHdop,
			&main_nmeaAltitudeM,
			&main_checksum);

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG11, sizeof(PM_PARSE_NMEA_MSG11));
    1f42:	2f e0       	ldi	r18, 0x0F	; 15
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	45 e6       	ldi	r20, 0x65	; 101
    1f48:	51 e0       	ldi	r21, 0x01	; 1
    1f4a:	b7 01       	movw	r22, r14
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    1f52:	8f e6       	ldi	r24, 0x6F	; 111
    1f54:	95 e0       	ldi	r25, 0x05	; 5
    1f56:	9f 93       	push	r25
    1f58:	8f 93       	push	r24
    1f5a:	ff 92       	push	r15
    1f5c:	ef 92       	push	r14
    1f5e:	1f 93       	push	r17
    1f60:	0f 93       	push	r16
    1f62:	0e 94 da 34 	call	0x69b4	; 0x69b4 <sscanf>
			&main_nmeaMode2);
	if (len > 0) {
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	18 16       	cp	r1, r24
    1f72:	19 06       	cpc	r1, r25
		main_fw_nmeaUtcPlusOneSec();
    1f74:	0c f0       	brlt	.+2      	; 0x1f78 <main_fw_giveAway+0x222>
    1f76:	57 c0       	rjmp	.+174    	; 0x2026 <main_fw_giveAway+0x2d0>

		if ((main_nmeaMode2 < 2) || (3 < main_nmeaMode2)) {
    1f78:	00 da       	rcall	.-3072   	; 0x137a <main_fw_nmeaUtcPlusOneSec>
    1f7a:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaMode2>
    1f7e:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <main_nmeaMode2+0x1>
    1f82:	02 97       	sbiw	r24, 0x02	; 2
    1f84:	02 97       	sbiw	r24, 0x02	; 2
			main_nmeaMode2 = 0;
    1f86:	20 f0       	brcs	.+8      	; 0x1f90 <main_fw_giveAway+0x23a>
    1f88:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <main_nmeaMode2+0x1>
    1f8c:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <main_nmeaMode2>
		}

		int ofs = 0, commaCnt = 0;
		for (int idx = serialCtxtRxBufferLen - 1; idx; --idx) {
    1f90:	00 91 1b 05 	lds	r16, 0x051B	; 0x80051b <serialCtxtRxBufferLen>
    1f94:	10 e0       	ldi	r17, 0x00	; 0
    1f96:	01 50       	subi	r16, 0x01	; 1
    1f98:	11 09       	sbc	r17, r1
			if (serialCtxtRxBuffer[idx] == '*') {
    1f9a:	e9 f0       	breq	.+58     	; 0x1fd6 <main_fw_giveAway+0x280>
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	e1 5f       	subi	r30, 0xF1	; 241
    1fa0:	fd 4f       	sbci	r31, 0xFD	; 253
    1fa2:	80 81       	ld	r24, Z
    1fa4:	8a 32       	cpi	r24, 0x2A	; 42
    1fa6:	b9 f7       	brne	.-18     	; 0x1f96 <main_fw_giveAway+0x240>
    1fa8:	c8 01       	movw	r24, r16
    1faa:	20 e0       	ldi	r18, 0x00	; 0
				ofs = idx;
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	18 16       	cp	r1, r24
    1fb0:	19 06       	cpc	r1, r25
			if (serialCtxtRxBuffer[idx] == ',') {
    1fb2:	8c f4       	brge	.+34     	; 0x1fd6 <main_fw_giveAway+0x280>
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	e1 5f       	subi	r30, 0xF1	; 241
    1fb8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fba:	40 81       	ld	r20, Z
    1fbc:	4c 32       	cpi	r20, 0x2C	; 44
				if (++commaCnt == 3) {
    1fbe:	49 f4       	brne	.+18     	; 0x1fd2 <main_fw_giveAway+0x27c>
    1fc0:	2f 5f       	subi	r18, 0xFF	; 255
    1fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc4:	23 30       	cpi	r18, 0x03	; 3
    1fc6:	31 05       	cpc	r19, r1
					ofs = ++idx;
    1fc8:	21 f4       	brne	.+8      	; 0x1fd2 <main_fw_giveAway+0x27c>
    1fca:	8c 01       	movw	r16, r24
    1fcc:	0f 5f       	subi	r16, 0xFF	; 255
    1fce:	1f 4f       	sbci	r17, 0xFF	; 255
			if (serialCtxtRxBuffer[idx] == '*') {
				ofs = idx;
				break;
			}
		}
		for (int idx = ofs; idx > 0; --idx) {
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <main_fw_giveAway+0x280>
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
					ofs = ++idx;
					break;
				}
			}
		}
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG12, sizeof(PM_PARSE_NMEA_MSG12));
    1fd4:	ec cf       	rjmp	.-40     	; 0x1fae <main_fw_giveAway+0x258>
    1fd6:	2c e0       	ldi	r18, 0x0C	; 12
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	49 e5       	ldi	r20, 0x59	; 89
    1fdc:	51 e0       	ldi	r21, 0x01	; 1
    1fde:	6d e8       	ldi	r22, 0x8D	; 141
    1fe0:	73 e0       	ldi	r23, 0x03	; 3
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		sscanf((char*) serialCtxtRxBuffer + ofs, (char*) mainFormatBuffer,
    1fe8:	81 e4       	ldi	r24, 0x41	; 65
    1fea:	95 e0       	ldi	r25, 0x05	; 5
    1fec:	9f 93       	push	r25
    1fee:	8f 93       	push	r24
    1ff0:	8b e5       	ldi	r24, 0x5B	; 91
    1ff2:	95 e0       	ldi	r25, 0x05	; 5
    1ff4:	9f 93       	push	r25
    1ff6:	8f 93       	push	r24
    1ff8:	8f e5       	ldi	r24, 0x5F	; 95
    1ffa:	95 e0       	ldi	r25, 0x05	; 5
    1ffc:	9f 93       	push	r25
    1ffe:	8f 93       	push	r24
    2000:	83 e6       	ldi	r24, 0x63	; 99
    2002:	95 e0       	ldi	r25, 0x05	; 5
    2004:	9f 93       	push	r25
    2006:	8f 93       	push	r24
    2008:	8d e8       	ldi	r24, 0x8D	; 141
    200a:	93 e0       	ldi	r25, 0x03	; 3
    200c:	9f 93       	push	r25
    200e:	8f 93       	push	r24
    2010:	01 5f       	subi	r16, 0xF1	; 241
    2012:	1d 4f       	sbci	r17, 0xFD	; 253
    2014:	1f 93       	push	r17
    2016:	0f 93       	push	r16
    2018:	0e 94 da 34 	call	0x69b4	; 0x69b4 <sscanf>
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
				&main_nmeaHdop,
				&main_nmeaVdop,
				&main_checksum);
	}

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG21, sizeof(PM_PARSE_NMEA_MSG21));
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	23 e3       	ldi	r18, 0x33	; 51
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	46 e2       	ldi	r20, 0x26	; 38
    202c:	51 e0       	ldi	r21, 0x01	; 1
    202e:	6d e8       	ldi	r22, 0x8D	; 141
    2030:	73 e0       	ldi	r23, 0x03	; 3
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    2038:	81 e4       	ldi	r24, 0x41	; 65
    203a:	95 e0       	ldi	r25, 0x05	; 5
    203c:	9f 93       	push	r25
    203e:	8f 93       	push	r24
    2040:	87 e5       	ldi	r24, 0x57	; 87
    2042:	95 e0       	ldi	r25, 0x05	; 5
    2044:	9f 93       	push	r25
    2046:	8f 93       	push	r24
    2048:	87 e4       	ldi	r24, 0x47	; 71
    204a:	95 e0       	ldi	r25, 0x05	; 5
    204c:	9f 93       	push	r25
    204e:	8f 93       	push	r24
    2050:	88 e4       	ldi	r24, 0x48	; 72
    2052:	95 e0       	ldi	r25, 0x05	; 5
    2054:	9f 93       	push	r25
    2056:	8f 93       	push	r24
    2058:	8c e4       	ldi	r24, 0x4C	; 76
    205a:	95 e0       	ldi	r25, 0x05	; 5
    205c:	9f 93       	push	r25
    205e:	8f 93       	push	r24
    2060:	8d e4       	ldi	r24, 0x4D	; 77
    2062:	95 e0       	ldi	r25, 0x05	; 5
    2064:	9f 93       	push	r25
    2066:	8f 93       	push	r24
    2068:	81 e5       	ldi	r24, 0x51	; 81
    206a:	95 e0       	ldi	r25, 0x05	; 5
    206c:	9f 93       	push	r25
    206e:	8f 93       	push	r24
    2070:	83 e5       	ldi	r24, 0x53	; 83
    2072:	95 e0       	ldi	r25, 0x05	; 5
    2074:	9f 93       	push	r25
    2076:	8f 93       	push	r24
    2078:	8d e8       	ldi	r24, 0x8D	; 141
    207a:	93 e0       	ldi	r25, 0x03	; 3
    207c:	9f 93       	push	r25
    207e:	8f 93       	push	r24
    2080:	8f e0       	ldi	r24, 0x0F	; 15
    2082:	92 e0       	ldi	r25, 0x02	; 2
    2084:	9f 93       	push	r25
    2086:	8f 93       	push	r24
    2088:	0e 94 da 34 	call	0x69b4	; 0x69b4 <sscanf>
			&main_nmeaPosLatSign,
			&main_nmeaPosLon,
			&main_nmeaPosLonSign,
			&main_nmeaDate,
			&main_checksum);
	if (len > 0) {
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	18 16       	cp	r1, r24
    2098:	19 06       	cpc	r1, r25
		main_fw_nmeaUtcPlusOneSec();
    209a:	0c f0       	brlt	.+2      	; 0x209e <main_fw_giveAway+0x348>
    209c:	52 c0       	rjmp	.+164    	; 0x2142 <main_fw_giveAway+0x3ec>
		if ((main_nmeaDate >= 010100) && (main_nmeaDate < 311299)) {
    209e:	6d d9       	rcall	.-3366   	; 0x137a <main_fw_nmeaUtcPlusOneSec>
    20a0:	80 90 57 05 	lds	r8, 0x0557	; 0x800557 <main_nmeaDate>
    20a4:	90 90 58 05 	lds	r9, 0x0558	; 0x800558 <main_nmeaDate+0x1>
    20a8:	a0 90 59 05 	lds	r10, 0x0559	; 0x800559 <main_nmeaDate+0x2>
    20ac:	b0 90 5a 05 	lds	r11, 0x055A	; 0x80055a <main_nmeaDate+0x3>
    20b0:	d5 01       	movw	r26, r10
    20b2:	c4 01       	movw	r24, r8
    20b4:	80 54       	subi	r24, 0x40	; 64
    20b6:	90 41       	sbci	r25, 0x10	; 16
    20b8:	a1 09       	sbc	r26, r1
    20ba:	b1 09       	sbc	r27, r1
    20bc:	83 3c       	cpi	r24, 0xC3	; 195
    20be:	9f 4a       	sbci	r25, 0xAF	; 175
    20c0:	a4 40       	sbci	r26, 0x04	; 4
    20c2:	b1 05       	cpc	r27, r1
			main_nmeaDate = ((main_nmeaDate - (main_nmeaDate % 100)) * 100) + 2000 + (main_nmeaDate % 100);
    20c4:	b0 f5       	brcc	.+108    	; 0x2132 <main_fw_giveAway+0x3dc>
    20c6:	c5 01       	movw	r24, r10
    20c8:	b4 01       	movw	r22, r8
    20ca:	24 e6       	ldi	r18, 0x64	; 100
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    20d6:	6b 01       	movw	r12, r22
    20d8:	7c 01       	movw	r14, r24
    20da:	a5 01       	movw	r20, r10
    20dc:	94 01       	movw	r18, r8
    20de:	26 1b       	sub	r18, r22
    20e0:	37 0b       	sbc	r19, r23
    20e2:	48 0b       	sbc	r20, r24
    20e4:	59 0b       	sbc	r21, r25
    20e6:	a4 e6       	ldi	r26, 0x64	; 100
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__muluhisi3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	80 53       	subi	r24, 0x30	; 48
    20f4:	98 4f       	sbci	r25, 0xF8	; 248
    20f6:	af 4f       	sbci	r26, 0xFF	; 255
    20f8:	bf 4f       	sbci	r27, 0xFF	; 255
    20fa:	c8 0e       	add	r12, r24
    20fc:	d9 1e       	adc	r13, r25
    20fe:	ea 1e       	adc	r14, r26
    2100:	fb 1e       	adc	r15, r27
    2102:	c0 92 57 05 	sts	0x0557, r12	; 0x800557 <main_nmeaDate>
    2106:	d0 92 58 05 	sts	0x0558, r13	; 0x800558 <main_nmeaDate+0x1>
    210a:	e0 92 59 05 	sts	0x0559, r14	; 0x800559 <main_nmeaDate+0x2>
    210e:	f0 92 5a 05 	sts	0x055A, r15	; 0x80055a <main_nmeaDate+0x3>
			if ((main_nmeaDate <  1012000) || (main_nmeaDate > 31122099)) {
    2112:	30 e2       	ldi	r19, 0x20	; 32
    2114:	c3 1a       	sub	r12, r19
    2116:	31 e7       	ldi	r19, 0x71	; 113
    2118:	d3 0a       	sbc	r13, r19
    211a:	3f e0       	ldi	r19, 0x0F	; 15
    211c:	e3 0a       	sbc	r14, r19
    211e:	f1 08       	sbc	r15, r1
    2120:	84 e9       	ldi	r24, 0x94	; 148
    2122:	c8 16       	cp	r12, r24
    2124:	81 e7       	ldi	r24, 0x71	; 113
    2126:	d8 06       	cpc	r13, r24
    2128:	8b ec       	ldi	r24, 0xCB	; 203
    212a:	e8 06       	cpc	r14, r24
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	f8 06       	cpc	r15, r24
				main_nmeaDate = 0;
    2130:	40 f0       	brcs	.+16     	; 0x2142 <main_fw_giveAway+0x3ec>
    2132:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <main_nmeaDate>
    2136:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <main_nmeaDate+0x1>
    213a:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <main_nmeaDate+0x2>
    213e:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <main_nmeaDate+0x3>
		} else {
			main_nmeaDate = 0;
		}
	}

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG31, sizeof(PM_PARSE_NMEA_MSG31));
    2142:	21 e1       	ldi	r18, 0x11	; 17
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	45 e1       	ldi	r20, 0x15	; 21
    2148:	51 e0       	ldi	r21, 0x01	; 1
    214a:	6d e8       	ldi	r22, 0x8D	; 141
    214c:	73 e0       	ldi	r23, 0x03	; 3
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    2154:	8b e6       	ldi	r24, 0x6B	; 107
    2156:	95 e0       	ldi	r25, 0x05	; 5
    2158:	9f 93       	push	r25
    215a:	8f 93       	push	r24
    215c:	9d e8       	ldi	r25, 0x8D	; 141
    215e:	e9 2e       	mov	r14, r25
    2160:	93 e0       	ldi	r25, 0x03	; 3
    2162:	f9 2e       	mov	r15, r25
    2164:	ff 92       	push	r15
    2166:	ef 92       	push	r14
    2168:	0f e0       	ldi	r16, 0x0F	; 15
    216a:	12 e0       	ldi	r17, 0x02	; 2
    216c:	1f 93       	push	r17
    216e:	0f 93       	push	r16
    2170:	0e 94 da 34 	call	0x69b4	; 0x69b4 <sscanf>
			&main_nmeaSatsEphemerisGpsGalileoQzss);

	memory_fw_copyBuffer(true, mainFormatBuffer, PM_PARSE_NMEA_MSG41, sizeof(PM_PARSE_NMEA_MSG41));
    2174:	21 e1       	ldi	r18, 0x11	; 17
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	44 e0       	ldi	r20, 0x04	; 4
    217a:	51 e0       	ldi	r21, 0x01	; 1
    217c:	b7 01       	movw	r22, r14
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
	len = sscanf((char*) serialCtxtRxBuffer, (char*) mainFormatBuffer,
    2184:	89 e6       	ldi	r24, 0x69	; 105
    2186:	95 e0       	ldi	r25, 0x05	; 5
    2188:	9f 93       	push	r25
    218a:	8f 93       	push	r24
    218c:	ff 92       	push	r15
    218e:	ef 92       	push	r14
    2190:	1f 93       	push	r17
    2192:	0f 93       	push	r16
    2194:	0e 94 da 34 	call	0x69b4	; 0x69b4 <sscanf>

		if (serialCtxtBufferState == SERIAL_CTXT_BUFFER_STATE_SEND) {
			main_fw_parseNmeaLineData();

			/* if serial data from the GPS module is required, send it to USB in-port */
			if (main_bf.mainIsSerComm) {
    2198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	83 ff       	sbrs	r24, 3
				ringbuffer_fw_ringBufferWaitAppend(false, false, serialCtxtRxBuffer, serialCtxtRxBufferLen);
    21a8:	07 c0       	rjmp	.+14     	; 0x21b8 <main_fw_giveAway+0x462>
    21aa:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <serialCtxtRxBufferLen>
    21ae:	a8 01       	movw	r20, r16
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
			}

			/* mark the serial buffer as to be ready again for receiving GPS data */
			serialCtxtRxBufferLen = 0;
    21b8:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <serialCtxtRxBufferLen>
			serialCtxtBufferState = 0;
    21bc:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <serialCtxtBufferState>
static void calcPhaseResidue(void)
{
	uint8_t localFastPwmSingleLoad;

	uint8_t sreg = SREG;
	cli();
    21c0:	8f b7       	in	r24, 0x3f	; 63
	localFastPwmSingleLoad = fastPwmSingleLoad;
    21c2:	f8 94       	cli
    21c4:	10 91 32 05 	lds	r17, 0x0532	; 0x800532 <fastPwmSingleLoad>
	SREG = sreg;

	if (fastPwmSingleDiffSum && (!localFastPwmSingleLoad)) {  // enter only if an offset is accumulated and the last phase correction is loaded
    21c8:	8f bf       	out	0x3f, r24	; 63
    21ca:	c0 90 2a 05 	lds	r12, 0x052A	; 0x80052a <fastPwmSingleDiffSum>
    21ce:	d0 90 2b 05 	lds	r13, 0x052B	; 0x80052b <fastPwmSingleDiffSum+0x1>
    21d2:	e0 90 2c 05 	lds	r14, 0x052C	; 0x80052c <fastPwmSingleDiffSum+0x2>
    21d6:	f0 90 2d 05 	lds	r15, 0x052D	; 0x80052d <fastPwmSingleDiffSum+0x3>
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	a9 01       	movw	r20, r18
    21e0:	c7 01       	movw	r24, r14
    21e2:	b6 01       	movw	r22, r12
    21e4:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
    21e8:	88 23       	and	r24, r24
    21ea:	11 f4       	brne	.+4      	; 0x21f0 <main_fw_giveAway+0x49a>
    21ec:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <main_fw_giveAway+0x2176>
    21f0:	11 11       	cpse	r17, r1
    21f2:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <main_fw_giveAway+0x2176>
	if (correction) {
		uint8_t localFastPwmXXXVal;
		uint8_t localFastPwmSubXXXVal;

		uint8_t sreg = SREG;
		cli();
    21f6:	1f b7       	in	r17, 0x3f	; 63
		localFastPwmXXXVal		= fastPwmLoopVal;
    21f8:	f8 94       	cli
    21fa:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <fastPwmLoopVal>
		localFastPwmSubXXXVal	= fastPwmSubLoopVal;
    21fe:	8a 83       	std	Y+2, r24	; 0x02
    2200:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <fastPwmSubLoopVal>
		SREG = sreg;
    2204:	89 83       	std	Y+1, r24	; 0x01

		ret =  main_fw_calcTimerAdj(correction, &localFastPwmXXXVal, &localFastPwmSubXXXVal);
    2206:	1f bf       	out	0x3f, r17	; 63
    2208:	9e 01       	movw	r18, r28
    220a:	2f 5f       	subi	r18, 0xFF	; 255
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	ae 01       	movw	r20, r28
    2210:	4e 5f       	subi	r20, 0xFE	; 254
    2212:	5f 4f       	sbci	r21, 0xFF	; 255
    2214:	c7 01       	movw	r24, r14
    2216:	b6 01       	movw	r22, r12

		cli();
    2218:	2b d9       	rcall	.-3498   	; 0x1470 <main_fw_calcTimerAdj>
		if (!doSingleLoad) {
			fastPwmLoopVal		= localFastPwmXXXVal;			// single frequency correction
			fastPwmSubLoopVal	= localFastPwmSubXXXVal;

		} else {
			fastPwmSingleVal	= localFastPwmXXXVal;			// phase hammering correction
    221a:	f8 94       	cli
    221c:	2a 81       	ldd	r18, Y+2	; 0x02
    221e:	20 93 31 05 	sts	0x0531, r18	; 0x800531 <fastPwmSingleVal>
			fastPwmSubSingleVal	= localFastPwmSubXXXVal;
    2222:	29 81       	ldd	r18, Y+1	; 0x01
    2224:	20 93 30 05 	sts	0x0530, r18	; 0x800530 <fastPwmSubSingleVal>
			fastPwmSingleLoad	= true;
    2228:	21 e0       	ldi	r18, 0x01	; 1
    222a:	20 93 32 05 	sts	0x0532, r18	; 0x800532 <fastPwmSingleLoad>
	localFastPwmSingleLoad = fastPwmSingleLoad;
	SREG = sreg;

	if (fastPwmSingleDiffSum && (!localFastPwmSingleLoad)) {  // enter only if an offset is accumulated and the last phase correction is loaded
		/* Calculate and execute phase correction */
		fastPwmSingleDiffSum = pwmTimerCorrection(fastPwmSingleDiffSum, true);
    222e:	1f bf       	out	0x3f, r17	; 63
    2230:	60 93 2a 05 	sts	0x052A, r22	; 0x80052a <fastPwmSingleDiffSum>
    2234:	70 93 2b 05 	sts	0x052B, r23	; 0x80052b <fastPwmSingleDiffSum+0x1>
    2238:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <fastPwmSingleDiffSum+0x2>
    223c:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <fastPwmSingleDiffSum+0x3>
    2240:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <main_fw_giveAway+0x2176>
	 */

	if (mainGpsInitVal) {
		/* activate GPS module for GPS / GALILEO / QZSS as well as GLONASS reception */

		mainGpsInitVal++;
    2244:	8f 5f       	subi	r24, 0xFF	; 255
    2246:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <mainGpsInitVal>
		if (3 == mainGpsInitVal) {  // talking the first time with this baud rate
    224a:	83 30       	cpi	r24, 0x03	; 3
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_CR_LF, sizeof(PM_FORMAT_GPS_CR_LF));
    224c:	21 f4       	brne	.+8      	; 0x2256 <main_fw_giveAway+0x500>
    224e:	43 e0       	ldi	r20, 0x03	; 3
    2250:	6d e3       	ldi	r22, 0x3D	; 61
    2252:	78 e0       	ldi	r23, 0x08	; 8

		} else if ( 4 == mainGpsInitVal) {
    2254:	05 c0       	rjmp	.+10     	; 0x2260 <main_fw_giveAway+0x50a>
    2256:	84 30       	cpi	r24, 0x04	; 4
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_BAUDRATE, sizeof(PM_FORMAT_GPS_BAUDRATE));  // setting the baud rate
    2258:	39 f4       	brne	.+14     	; 0x2268 <main_fw_giveAway+0x512>
    225a:	43 e1       	ldi	r20, 0x13	; 19
    225c:	6a e2       	ldi	r22, 0x2A	; 42
    225e:	78 e0       	ldi	r23, 0x08	; 8
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <serial_fw_copyAndSendNmea>

		} else if ( 5 == mainGpsInitVal) {
    2266:	23 c0       	rjmp	.+70     	; 0x22ae <main_fw_giveAway+0x558>
    2268:	85 30       	cpi	r24, 0x05	; 5
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WARM_RESTART, sizeof(PM_FORMAT_GPS_WARM_RESTART));  // XXX init of GPS-Module is here
    226a:	21 f4       	brne	.+8      	; 0x2274 <main_fw_giveAway+0x51e>
    226c:	4e e0       	ldi	r20, 0x0E	; 14
    226e:	6c e1       	ldi	r22, 0x1C	; 28
    2270:	78 e0       	ldi	r23, 0x08	; 8

		} else if (10 == mainGpsInitVal) {
    2272:	f6 cf       	rjmp	.-20     	; 0x2260 <main_fw_giveAway+0x50a>
    2274:	8a 30       	cpi	r24, 0x0A	; 10
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST0_EAST0, sizeof(PM_FORMAT_GPS_WEST0_EAST0));    // disable all GNSS systems
    2276:	21 f4       	brne	.+8      	; 0x2280 <main_fw_giveAway+0x52a>
    2278:	42 e1       	ldi	r20, 0x12	; 18
    227a:	6a e0       	ldi	r22, 0x0A	; 10
    227c:	78 e0       	ldi	r23, 0x08	; 8

		} else if (11 == mainGpsInitVal) {
    227e:	f0 cf       	rjmp	.-32     	; 0x2260 <main_fw_giveAway+0x50a>
    2280:	8b 30       	cpi	r24, 0x0B	; 11
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST0, sizeof(PM_FORMAT_GPS_WEST1_EAST0));    // activate GPS, QZSS & Galileo
    2282:	21 f4       	brne	.+8      	; 0x228c <main_fw_giveAway+0x536>
    2284:	42 e1       	ldi	r20, 0x12	; 18
    2286:	68 ef       	ldi	r22, 0xF8	; 248
    2288:	77 e0       	ldi	r23, 0x07	; 7

		} else if (12 == mainGpsInitVal) {
    228a:	ea cf       	rjmp	.-44     	; 0x2260 <main_fw_giveAway+0x50a>
    228c:	8c 30       	cpi	r24, 0x0C	; 12
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST1, sizeof(PM_FORMAT_GPS_WEST1_EAST1));    // activate GLONASS also
    228e:	21 f4       	brne	.+8      	; 0x2298 <main_fw_giveAway+0x542>
    2290:	42 e1       	ldi	r20, 0x12	; 18
    2292:	66 ee       	ldi	r22, 0xE6	; 230
    2294:	77 e0       	ldi	r23, 0x07	; 7

		} else if (70 == mainGpsInitVal) {
    2296:	e4 cf       	rjmp	.-56     	; 0x2260 <main_fw_giveAway+0x50a>
    2298:	86 34       	cpi	r24, 0x46	; 70
			serial_fw_copyAndSendNmea(true, PM_FORMAT_GPS_WEST1_EAST1, sizeof(PM_FORMAT_GPS_WEST1_EAST1));    // activate GLONASS also (sent every minute)
    229a:	49 f4       	brne	.+18     	; 0x22ae <main_fw_giveAway+0x558>
    229c:	42 e1       	ldi	r20, 0x12	; 18
    229e:	66 ee       	ldi	r22, 0xE6	; 230
    22a0:	77 e0       	ldi	r23, 0x07	; 7
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <serial_fw_copyAndSendNmea>
			mainGpsInitVal = 10;
    22a8:	8a e0       	ldi	r24, 0x0A	; 10
    22aa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <mainGpsInitVal>
		}
	}

	mainAdcPullVolts	= ( acAdcCh[ADC_CH_PWMPULL] / ADC_STEPS_1V) + ADC_OFS_0ADC_V;
    22ae:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <acAdcCh>
    22b2:	70 91 88 03 	lds	r23, 0x0388	; 0x800388 <acAdcCh+0x1>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 4e 31 	call	0x629c	; 0x629c <__floatunsisf>
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	45 e5       	ldi	r20, 0x55	; 85
    22c4:	53 e4       	ldi	r21, 0x43	; 67
    22c6:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    22ca:	29 e6       	ldi	r18, 0x69	; 105
    22cc:	39 e3       	ldi	r19, 0x39	; 57
    22ce:	40 e1       	ldi	r20, 0x10	; 16
    22d0:	5d e3       	ldi	r21, 0x3D	; 61
    22d2:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    22d6:	60 93 79 05 	sts	0x0579, r22	; 0x800579 <mainAdcPullVolts>
    22da:	70 93 7a 05 	sts	0x057A, r23	; 0x80057a <mainAdcPullVolts+0x1>
    22de:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <mainAdcPullVolts+0x2>
    22e2:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <mainAdcPullVolts+0x3>
	mainAdcPhaseVolts	= ( acAdcCh[ADC_CH_PHASE]	/ ADC_STEPS_1V) + ADC_OFS_0ADC_V;
    22e6:	60 91 89 03 	lds	r22, 0x0389	; 0x800389 <acAdcCh+0x2>
    22ea:	70 91 8a 03 	lds	r23, 0x038A	; 0x80038a <acAdcCh+0x3>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0e 94 4e 31 	call	0x629c	; 0x629c <__floatunsisf>
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	45 e5       	ldi	r20, 0x55	; 85
    22fc:	53 e4       	ldi	r21, 0x43	; 67
    22fe:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    2302:	29 e6       	ldi	r18, 0x69	; 105
    2304:	39 e3       	ldi	r19, 0x39	; 57
    2306:	40 e1       	ldi	r20, 0x10	; 16
    2308:	5d e3       	ldi	r21, 0x3D	; 61
    230a:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    230e:	60 93 75 05 	sts	0x0575, r22	; 0x800575 <mainAdcPhaseVolts>
    2312:	70 93 76 05 	sts	0x0576, r23	; 0x800576 <mainAdcPhaseVolts+0x1>
    2316:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <mainAdcPhaseVolts+0x2>
    231a:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <mainAdcPhaseVolts+0x3>
	mainAdcTemp			= ((acAdcCh[ADC_CH_TEMP]	- mainCoef_b01_temp_ofs_adc_25C_steps) * mainCoef_b01_temp_k_p1step_adc_K) + 25.0f;
    231e:	60 91 8b 03 	lds	r22, 0x038B	; 0x80038b <acAdcCh+0x4>
    2322:	70 91 8c 03 	lds	r23, 0x038C	; 0x80038c <acAdcCh+0x5>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	0e 94 4e 31 	call	0x629c	; 0x629c <__floatunsisf>
    232e:	20 91 b6 05 	lds	r18, 0x05B6	; 0x8005b6 <mainCoef_b01_temp_ofs_adc_25C_steps>
    2332:	30 91 b7 05 	lds	r19, 0x05B7	; 0x8005b7 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    2336:	40 91 b8 05 	lds	r20, 0x05B8	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
    233a:	50 91 b9 05 	lds	r21, 0x05B9	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>
    233e:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    2342:	20 91 b2 05 	lds	r18, 0x05B2	; 0x8005b2 <mainCoef_b01_temp_k_p1step_adc_K>
    2346:	30 91 b3 05 	lds	r19, 0x05B3	; 0x8005b3 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    234a:	40 91 b4 05 	lds	r20, 0x05B4	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
    234e:	50 91 b5 05 	lds	r21, 0x05B5	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
    2352:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	48 ec       	ldi	r20, 0xC8	; 200
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    2362:	60 93 71 05 	sts	0x0571, r22	; 0x800571 <mainAdcTemp>
    2366:	70 93 72 05 	sts	0x0572, r23	; 0x800572 <mainAdcTemp+0x1>
    236a:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <mainAdcTemp+0x2>
    236e:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <mainAdcTemp+0x3>

	if (main_bf.mainIsTimerTest) {
    2372:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2376:	82 ff       	sbrs	r24, 2
		/* print NMEA data */
		memory_fw_copyBuffer(true, mainPrepareBuffer, PM_FORMAT_GP00, sizeof(PM_FORMAT_GP00) + 1);
    2378:	ac c2       	rjmp	.+1368   	; 0x28d2 <main_fw_giveAway+0xb7c>
    237a:	21 e1       	ldi	r18, 0x11	; 17
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	46 ed       	ldi	r20, 0xD6	; 214
    2380:	57 e0       	ldi	r21, 0x07	; 7
    2382:	6d e0       	ldi	r22, 0x0D	; 13
    2384:	74 e0       	ldi	r23, 0x04	; 4
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, sizeof(PM_FORMAT_GP00) + 1);
    238c:	21 e1       	ldi	r18, 0x11	; 17
    238e:	4d e0       	ldi	r20, 0x0D	; 13
    2390:	54 e0       	ldi	r21, 0x04	; 4
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP01, sizeof(PM_FORMAT_GP01));
    239a:	28 e2       	ldi	r18, 0x28	; 40
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4e ea       	ldi	r20, 0xAE	; 174
    23a0:	57 e0       	ldi	r21, 0x07	; 7
    23a2:	6d e8       	ldi	r22, 0x8D	; 141
    23a4:	73 e0       	ldi	r23, 0x03	; 3
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    23ac:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <main_nmeaTimeUtcMilsec+0x1>
    23b0:	8f 93       	push	r24
    23b2:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <main_nmeaTimeUtcMilsec>
    23b6:	8f 93       	push	r24
    23b8:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x3>
    23bc:	8f 93       	push	r24
    23be:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    23c2:	8f 93       	push	r24
    23c4:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    23c8:	8f 93       	push	r24
    23ca:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <main_nmeaTimeUtcInt>
    23ce:	8f 93       	push	r24
    23d0:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <main_nmeaDate+0x3>
    23d4:	8f 93       	push	r24
    23d6:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <main_nmeaDate+0x2>
    23da:	8f 93       	push	r24
    23dc:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <main_nmeaDate+0x1>
    23e0:	8f 93       	push	r24
    23e2:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <main_nmeaDate>
    23e6:	8f 93       	push	r24
    23e8:	8d e8       	ldi	r24, 0x8D	; 141
    23ea:	28 2e       	mov	r2, r24
    23ec:	83 e0       	ldi	r24, 0x03	; 3
    23ee:	38 2e       	mov	r3, r24
    23f0:	3f 92       	push	r3
    23f2:	2f 92       	push	r2
    23f4:	0d e0       	ldi	r16, 0x0D	; 13
    23f6:	14 e0       	ldi	r17, 0x04	; 4
    23f8:	1f 93       	push	r17
    23fa:	0f 93       	push	r16
    23fc:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
				main_nmeaDate,
				main_nmeaTimeUtcInt,
				main_nmeaTimeUtcMilsec);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2400:	28 2f       	mov	r18, r24
    2402:	a8 01       	movw	r20, r16
    2404:	60 e0       	ldi	r22, 0x00	; 0
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP02, sizeof(PM_FORMAT_GP02));
    240c:	25 e2       	ldi	r18, 0x25	; 37
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	49 e8       	ldi	r20, 0x89	; 137
    2412:	57 e0       	ldi	r21, 0x07	; 7
    2414:	b1 01       	movw	r22, r2
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    241c:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <main_nmeaPosFixIndicator+0x1>
    2420:	8f 93       	push	r24
    2422:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaPosFixIndicator>
    2426:	8f 93       	push	r24
    2428:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <main_nmeaMode2+0x1>
    242c:	8f 93       	push	r24
    242e:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaMode2>
    2432:	8f 93       	push	r24
    2434:	3f 92       	push	r3
    2436:	2f 92       	push	r2
    2438:	1f 93       	push	r17
    243a:	0f 93       	push	r16
    243c:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
				main_nmeaMode2,
				main_nmeaPosFixIndicator);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2440:	28 2f       	mov	r18, r24
    2442:	a8 01       	movw	r20, r16
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP03, sizeof(PM_FORMAT_GP03));
    244c:	23 e5       	ldi	r18, 0x53	; 83
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	46 e3       	ldi	r20, 0x36	; 54
    2452:	57 e0       	ldi	r21, 0x07	; 7
    2454:	b1 01       	movw	r22, r2
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    245c:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <main_nmeaSatsEphemerisGlonass+0x1>
    2460:	8f 93       	push	r24
    2462:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <main_nmeaSatsEphemerisGlonass>
    2466:	8f 93       	push	r24
    2468:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <main_nmeaSatsEphemerisGpsGalileoQzss+0x1>
    246c:	8f 93       	push	r24
    246e:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGpsGalileoQzss>
    2472:	8f 93       	push	r24
    2474:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <main_nmeaSatsUsed+0x1>
    2478:	8f 93       	push	r24
    247a:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <main_nmeaSatsUsed>
    247e:	8f 93       	push	r24
    2480:	3f 92       	push	r3
    2482:	2f 92       	push	r2
    2484:	1f 93       	push	r17
    2486:	0f 93       	push	r16
    2488:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
				main_nmeaSatsUsed,
				main_nmeaSatsEphemerisGpsGalileoQzss,
				main_nmeaSatsEphemerisGlonass);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	28 2f       	mov	r18, r24
    2498:	a8 01       	movw	r20, r16
    249a:	60 e0       	ldi	r22, 0x00	; 0
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP04, sizeof(PM_FORMAT_GP04));
    24a2:	28 e3       	ldi	r18, 0x38	; 56
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	4e ef       	ldi	r20, 0xFE	; 254
    24a8:	56 e0       	ldi	r21, 0x06	; 6
    24aa:	b1 01       	movw	r22, r2
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    24b2:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <main_nmeaVdop>
    24b6:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <main_nmeaVdop+0x1>
    24ba:	a0 91 5d 05 	lds	r26, 0x055D	; 0x80055d <main_nmeaVdop+0x2>
    24be:	b0 91 5e 05 	lds	r27, 0x055E	; 0x80055e <main_nmeaVdop+0x3>
    24c2:	8b 83       	std	Y+3, r24	; 0x03
    24c4:	9c 83       	std	Y+4, r25	; 0x04
    24c6:	ad 83       	std	Y+5, r26	; 0x05
    24c8:	be 83       	std	Y+6, r27	; 0x06
    24ca:	42 e0       	ldi	r20, 0x02	; 2
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	6d d8       	rcall	.-3878   	; 0x15ac <s_flt_frac>
    24d2:	8f 87       	std	Y+15, r24	; 0x0f
    24d4:	99 8b       	std	Y+17, r25	; 0x11
    24d6:	80 90 5f 05 	lds	r8, 0x055F	; 0x80055f <main_nmeaHdop>
    24da:	90 90 60 05 	lds	r9, 0x0560	; 0x800560 <main_nmeaHdop+0x1>
    24de:	a0 90 61 05 	lds	r10, 0x0561	; 0x800561 <main_nmeaHdop+0x2>
    24e2:	b0 90 62 05 	lds	r11, 0x0562	; 0x800562 <main_nmeaHdop+0x3>
    24e6:	42 e0       	ldi	r20, 0x02	; 2
    24e8:	c5 01       	movw	r24, r10
    24ea:	b4 01       	movw	r22, r8
    24ec:	5f d8       	rcall	.-3906   	; 0x15ac <s_flt_frac>
    24ee:	8a 8b       	std	Y+18, r24	; 0x12
    24f0:	9b 8b       	std	Y+19, r25	; 0x13
    24f2:	c0 90 63 05 	lds	r12, 0x0563	; 0x800563 <main_nmeaPdop>
    24f6:	d0 90 64 05 	lds	r13, 0x0564	; 0x800564 <main_nmeaPdop+0x1>
    24fa:	e0 90 65 05 	lds	r14, 0x0565	; 0x800565 <main_nmeaPdop+0x2>
    24fe:	f0 90 66 05 	lds	r15, 0x0566	; 0x800566 <main_nmeaPdop+0x3>
    2502:	42 e0       	ldi	r20, 0x02	; 2
    2504:	c7 01       	movw	r24, r14
    2506:	b6 01       	movw	r22, r12
    2508:	51 d8       	rcall	.-3934   	; 0x15ac <s_flt_frac>
    250a:	8c 8b       	std	Y+20, r24	; 0x14
    250c:	9d 8b       	std	Y+21, r25	; 0x15
    250e:	99 89       	ldd	r25, Y+17	; 0x11
    2510:	9f 93       	push	r25
    2512:	af 85       	ldd	r26, Y+15	; 0x0f
    2514:	af 93       	push	r26
    2516:	6b 81       	ldd	r22, Y+3	; 0x03
    2518:	7c 81       	ldd	r23, Y+4	; 0x04
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	9e 81       	ldd	r25, Y+6	; 0x06
    251e:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    2522:	7f 93       	push	r23
    2524:	6f 93       	push	r22
    2526:	bb 89       	ldd	r27, Y+19	; 0x13
    2528:	bf 93       	push	r27
    252a:	2a 89       	ldd	r18, Y+18	; 0x12
    252c:	2f 93       	push	r18
    252e:	c5 01       	movw	r24, r10
    2530:	b4 01       	movw	r22, r8
    2532:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    2536:	7f 93       	push	r23
    2538:	6f 93       	push	r22
    253a:	3d 89       	ldd	r19, Y+21	; 0x15
    253c:	3f 93       	push	r19
    253e:	8c 89       	ldd	r24, Y+20	; 0x14
    2540:	8f 93       	push	r24
    2542:	c7 01       	movw	r24, r14
    2544:	b6 01       	movw	r22, r12
    2546:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    254a:	7f 93       	push	r23
    254c:	6f 93       	push	r22
    254e:	3f 92       	push	r3
    2550:	2f 92       	push	r2
    2552:	1f 93       	push	r17
    2554:	0f 93       	push	r16
    2556:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
				(int) main_nmeaPdop, s_flt_frac(main_nmeaPdop, 2),
				(int) main_nmeaHdop, s_flt_frac(main_nmeaHdop, 2),
				(int) main_nmeaVdop, s_flt_frac(main_nmeaVdop, 2));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    255a:	28 2f       	mov	r18, r24
    255c:	a8 01       	movw	r20, r16
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
    2566:	23 e4       	ldi	r18, 0x43	; 67
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4b eb       	ldi	r20, 0xBB	; 187
    256c:	56 e0       	ldi	r21, 0x06	; 6
    256e:	b1 01       	movw	r22, r2
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2576:	c0 90 43 05 	lds	r12, 0x0543	; 0x800543 <main_nmeaAltitudeM>
    257a:	d0 90 44 05 	lds	r13, 0x0544	; 0x800544 <main_nmeaAltitudeM+0x1>
    257e:	e0 90 45 05 	lds	r14, 0x0545	; 0x800545 <main_nmeaAltitudeM+0x2>
    2582:	f0 90 46 05 	lds	r15, 0x0546	; 0x800546 <main_nmeaAltitudeM+0x3>
    2586:	42 e0       	ldi	r20, 0x02	; 2
    2588:	c7 01       	movw	r24, r14
    258a:	b6 01       	movw	r22, r12
    258c:	0f d8       	rcall	.-4066   	; 0x15ac <s_flt_frac>
    258e:	38 2e       	mov	r3, r24
    2590:	29 2e       	mov	r2, r25
    2592:	c7 01       	movw	r24, r14
    2594:	b6 01       	movw	r22, r12
    2596:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    259a:	69 8b       	std	Y+17, r22	; 0x11
    259c:	7a 8b       	std	Y+18, r23	; 0x12
    259e:	c0 90 48 05 	lds	r12, 0x0548	; 0x800548 <main_nmeaPosLon>
    25a2:	d0 90 49 05 	lds	r13, 0x0549	; 0x800549 <main_nmeaPosLon+0x1>
    25a6:	e0 90 4a 05 	lds	r14, 0x054A	; 0x80054a <main_nmeaPosLon+0x2>
    25aa:	f0 90 4b 05 	lds	r15, 0x054B	; 0x80054b <main_nmeaPosLon+0x3>
    25ae:	44 e0       	ldi	r20, 0x04	; 4
    25b0:	c7 01       	movw	r24, r14
    25b2:	b6 01       	movw	r22, r12
    25b4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    25b8:	8b 83       	std	Y+3, r24	; 0x03
    25ba:	9f 87       	std	Y+15, r25	; 0x0f
    25bc:	c7 01       	movw	r24, r14
    25be:	b6 01       	movw	r22, r12
    25c0:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    25c4:	96 2e       	mov	r9, r22
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
				(int) main_nmeaPosLat, s_flt_frac(main_nmeaPosLat, 4),
				(main_nmeaPosLonSign > 0 ?  main_nmeaPosLonSign : '-'),
    25c6:	87 2e       	mov	r8, r23
    25c8:	00 91 47 05 	lds	r16, 0x0547	; 0x800547 <main_nmeaPosLonSign>
				(int) main_nmeaHdop, s_flt_frac(main_nmeaHdop, 2),
				(int) main_nmeaVdop, s_flt_frac(main_nmeaVdop, 2));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	00 23       	and	r16, r16
    25d8:	11 f0       	breq	.+4      	; 0x25de <main_fw_giveAway+0x888>
    25da:	10 e0       	ldi	r17, 0x00	; 0
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <main_fw_giveAway+0x88c>
    25de:	0d e2       	ldi	r16, 0x2D	; 45
    25e0:	10 e0       	ldi	r17, 0x00	; 0
    25e2:	c0 90 4d 05 	lds	r12, 0x054D	; 0x80054d <main_nmeaPosLat>
    25e6:	d0 90 4e 05 	lds	r13, 0x054E	; 0x80054e <main_nmeaPosLat+0x1>
    25ea:	e0 90 4f 05 	lds	r14, 0x054F	; 0x80054f <main_nmeaPosLat+0x2>
    25ee:	f0 90 50 05 	lds	r15, 0x0550	; 0x800550 <main_nmeaPosLat+0x3>
    25f2:	44 e0       	ldi	r20, 0x04	; 4
    25f4:	c7 01       	movw	r24, r14
    25f6:	b6 01       	movw	r22, r12
    25f8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    25fc:	b8 2e       	mov	r11, r24
    25fe:	a9 2e       	mov	r10, r25
    2600:	c7 01       	movw	r24, r14
    2602:	b6 01       	movw	r22, r12
    2604:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
    2608:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <main_nmeaPosLatSign>
				(int) main_nmeaHdop, s_flt_frac(main_nmeaHdop, 2),
				(int) main_nmeaVdop, s_flt_frac(main_nmeaVdop, 2));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_GP05, sizeof(PM_FORMAT_GP05));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    260c:	88 23       	and	r24, r24
    260e:	11 f0       	breq	.+4      	; 0x2614 <main_fw_giveAway+0x8be>
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <main_fw_giveAway+0x8c2>
    2614:	8d e2       	ldi	r24, 0x2D	; 45
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	2f 92       	push	r2
    261a:	3f 92       	push	r3
    261c:	ba 89       	ldd	r27, Y+18	; 0x12
    261e:	bf 93       	push	r27
    2620:	29 89       	ldd	r18, Y+17	; 0x11
    2622:	2f 93       	push	r18
    2624:	3f 85       	ldd	r19, Y+15	; 0x0f
    2626:	3f 93       	push	r19
    2628:	ab 81       	ldd	r26, Y+3	; 0x03
    262a:	af 93       	push	r26
    262c:	8f 92       	push	r8
    262e:	9f 92       	push	r9
    2630:	1f 93       	push	r17
    2632:	0f 93       	push	r16
    2634:	af 92       	push	r10
    2636:	bf 92       	push	r11
    2638:	7f 93       	push	r23
    263a:	6f 93       	push	r22
    263c:	9f 93       	push	r25
    263e:	8f 93       	push	r24
    2640:	0d e8       	ldi	r16, 0x8D	; 141
    2642:	e0 2e       	mov	r14, r16
    2644:	03 e0       	ldi	r16, 0x03	; 3
    2646:	f0 2e       	mov	r15, r16
    2648:	ff 92       	push	r15
    264a:	ef 92       	push	r14
    264c:	0d e0       	ldi	r16, 0x0D	; 13
    264e:	14 e0       	ldi	r17, 0x04	; 4
    2650:	1f 93       	push	r17
    2652:	0f 93       	push	r16
    2654:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
				(main_nmeaPosLatSign > 0 ?  main_nmeaPosLatSign : '-'),
				(int) main_nmeaPosLat, s_flt_frac(main_nmeaPosLat, 4),
				(main_nmeaPosLonSign > 0 ?  main_nmeaPosLonSign : '-'),
				(int) main_nmeaPosLon, s_flt_frac(main_nmeaPosLon, 4),
				(int) main_nmeaAltitudeM, s_flt_frac(main_nmeaAltitudeM, 2));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2658:	28 2f       	mov	r18, r24
    265a:	a8 01       	movw	r20, r16
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

		if (!localNoPpsCnt) {
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <localNoPpsCnt.3126>
    2672:	81 11       	cpse	r24, r1
			/* print ADC values - only valid when a PPS has arrived */
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA01, sizeof(PM_FORMAT_TA01));
    2674:	92 c0       	rjmp	.+292    	; 0x279a <main_fw_giveAway+0xa44>
    2676:	2f e1       	ldi	r18, 0x1F	; 31
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	4c e9       	ldi	r20, 0x9C	; 156
    267c:	56 e0       	ldi	r21, 0x06	; 6
    267e:	b7 01       	movw	r22, r14
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2686:	80 90 79 05 	lds	r8, 0x0579	; 0x800579 <mainAdcPullVolts>
    268a:	90 90 7a 05 	lds	r9, 0x057A	; 0x80057a <mainAdcPullVolts+0x1>
    268e:	a0 90 7b 05 	lds	r10, 0x057B	; 0x80057b <mainAdcPullVolts+0x2>
    2692:	b0 90 7c 05 	lds	r11, 0x057C	; 0x80057c <mainAdcPullVolts+0x3>
    2696:	43 e0       	ldi	r20, 0x03	; 3
    2698:	c5 01       	movw	r24, r10
    269a:	b4 01       	movw	r22, r8
    269c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    26a0:	c0 90 87 03 	lds	r12, 0x0387	; 0x800387 <acAdcCh>
    26a4:	d0 90 88 03 	lds	r13, 0x0388	; 0x800388 <acAdcCh+0x1>
    26a8:	9f 93       	push	r25
    26aa:	8f 93       	push	r24
    26ac:	c5 01       	movw	r24, r10
    26ae:	b4 01       	movw	r22, r8
    26b0:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    26b4:	7f 93       	push	r23
    26b6:	6f 93       	push	r22
    26b8:	df 92       	push	r13
    26ba:	cf 92       	push	r12
    26bc:	ff 92       	push	r15
    26be:	ef 92       	push	r14
    26c0:	1f 93       	push	r17
    26c2:	0f 93       	push	r16
    26c4:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
					acAdcCh[ADC_CH_PWMPULL],
					(int) mainAdcPullVolts, s_flt_frac(mainAdcPullVolts, 3));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    26c8:	28 2f       	mov	r18, r24
    26ca:	a8 01       	movw	r20, r16
    26cc:	60 e0       	ldi	r22, 0x00	; 0
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA02, sizeof(PM_FORMAT_TA02));
    26d4:	2f e1       	ldi	r18, 0x1F	; 31
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	4d e7       	ldi	r20, 0x7D	; 125
    26da:	56 e0       	ldi	r21, 0x06	; 6
    26dc:	b7 01       	movw	r22, r14
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    26e4:	80 90 75 05 	lds	r8, 0x0575	; 0x800575 <mainAdcPhaseVolts>
    26e8:	90 90 76 05 	lds	r9, 0x0576	; 0x800576 <mainAdcPhaseVolts+0x1>
    26ec:	a0 90 77 05 	lds	r10, 0x0577	; 0x800577 <mainAdcPhaseVolts+0x2>
    26f0:	b0 90 78 05 	lds	r11, 0x0578	; 0x800578 <mainAdcPhaseVolts+0x3>
    26f4:	43 e0       	ldi	r20, 0x03	; 3
    26f6:	c5 01       	movw	r24, r10
    26f8:	b4 01       	movw	r22, r8
    26fa:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    26fe:	c0 90 89 03 	lds	r12, 0x0389	; 0x800389 <acAdcCh+0x2>
    2702:	d0 90 8a 03 	lds	r13, 0x038A	; 0x80038a <acAdcCh+0x3>
    2706:	9f 93       	push	r25
    2708:	8f 93       	push	r24
    270a:	c5 01       	movw	r24, r10
    270c:	b4 01       	movw	r22, r8
    270e:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    2712:	7f 93       	push	r23
    2714:	6f 93       	push	r22
    2716:	df 92       	push	r13
    2718:	cf 92       	push	r12
    271a:	ff 92       	push	r15
    271c:	ef 92       	push	r14
    271e:	1f 93       	push	r17
    2720:	0f 93       	push	r16
    2722:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
					acAdcCh[ADC_CH_PHASE],
					(int) mainAdcPhaseVolts, s_flt_frac(mainAdcPhaseVolts, 3));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2726:	28 2f       	mov	r18, r24
    2728:	a8 01       	movw	r20, r16
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA03, sizeof(PM_FORMAT_TA03));
    2732:	2e e1       	ldi	r18, 0x1E	; 30
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4f e5       	ldi	r20, 0x5F	; 95
    2738:	56 e0       	ldi	r21, 0x06	; 6
    273a:	b7 01       	movw	r22, r14
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2742:	80 90 71 05 	lds	r8, 0x0571	; 0x800571 <mainAdcTemp>
    2746:	90 90 72 05 	lds	r9, 0x0572	; 0x800572 <mainAdcTemp+0x1>
    274a:	a0 90 73 05 	lds	r10, 0x0573	; 0x800573 <mainAdcTemp+0x2>
    274e:	b0 90 74 05 	lds	r11, 0x0574	; 0x800574 <mainAdcTemp+0x3>
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	c5 01       	movw	r24, r10
    2756:	b4 01       	movw	r22, r8
    2758:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    275c:	c0 90 8b 03 	lds	r12, 0x038B	; 0x80038b <acAdcCh+0x4>
    2760:	d0 90 8c 03 	lds	r13, 0x038C	; 0x80038c <acAdcCh+0x5>
    2764:	9f 93       	push	r25
    2766:	8f 93       	push	r24
    2768:	c5 01       	movw	r24, r10
    276a:	b4 01       	movw	r22, r8
    276c:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    2770:	7f 93       	push	r23
    2772:	6f 93       	push	r22
    2774:	df 92       	push	r13
    2776:	cf 92       	push	r12
    2778:	ff 92       	push	r15
    277a:	ef 92       	push	r14
    277c:	1f 93       	push	r17
    277e:	0f 93       	push	r16
    2780:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
					acAdcCh[ADC_CH_TEMP],
					(int) mainAdcTemp, s_flt_frac(mainAdcTemp, 1));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2784:	28 2f       	mov	r18, r24
    2786:	a8 01       	movw	r20, r16
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA11, sizeof(PM_FORMAT_TA11));
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	28 e3       	ldi	r18, 0x38	; 56
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	47 e2       	ldi	r20, 0x27	; 39
    27a0:	56 e0       	ldi	r21, 0x06	; 6
    27a2:	6d e8       	ldi	r22, 0x8D	; 141
    27a4:	73 e0       	ldi	r23, 0x03	; 3
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    27ac:	ab 85       	ldd	r26, Y+11	; 0x0b
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	bf 81       	ldd	r27, Y+7	; 0x07
    27b2:	9b 2b       	or	r25, r27
    27b4:	9f 93       	push	r25
    27b6:	af 93       	push	r26
    27b8:	7f 92       	push	r7
    27ba:	6f 92       	push	r6
    27bc:	5f 92       	push	r5
    27be:	4f 92       	push	r4
    27c0:	1d e8       	ldi	r17, 0x8D	; 141
    27c2:	e1 2e       	mov	r14, r17
    27c4:	13 e0       	ldi	r17, 0x03	; 3
    27c6:	f1 2e       	mov	r15, r17
    27c8:	ff 92       	push	r15
    27ca:	ef 92       	push	r14
    27cc:	0d e0       	ldi	r16, 0x0D	; 13
    27ce:	14 e0       	ldi	r17, 0x04	; 4
    27d0:	1f 93       	push	r17
    27d2:	0f 93       	push	r16
    27d4:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
				localFastCtr1ms,
				localFastTCNT1);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    27d8:	28 2f       	mov	r18, r24
    27da:	a8 01       	movw	r20, r16
    27dc:	60 e0       	ldi	r22, 0x00	; 0
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA12, sizeof(PM_FORMAT_TA12));
    27e4:	24 e7       	ldi	r18, 0x74	; 116
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	43 eb       	ldi	r20, 0xB3	; 179
    27ea:	55 e0       	ldi	r21, 0x05	; 5
    27ec:	b7 01       	movw	r22, r14
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    27f4:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <ppsStampICR1_last+0x1>
    27f8:	8f 93       	push	r24
    27fa:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <ppsStampICR1_last>
    27fe:	8f 93       	push	r24
    2800:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <ppsStampCtr1ms_last+0x3>
    2804:	8f 93       	push	r24
    2806:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <ppsStampCtr1ms_last+0x2>
    280a:	8f 93       	push	r24
    280c:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <ppsStampCtr1ms_last+0x1>
    2810:	8f 93       	push	r24
    2812:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <ppsStampCtr1ms_last>
    2816:	8f 93       	push	r24
    2818:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <ppsStampICR1+0x1>
    281c:	8f 93       	push	r24
    281e:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <ppsStampICR1>
    2822:	8f 93       	push	r24
    2824:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <ppsStampCtr1ms+0x3>
    2828:	8f 93       	push	r24
    282a:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <ppsStampCtr1ms+0x2>
    282e:	8f 93       	push	r24
    2830:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <ppsStampCtr1ms+0x1>
    2834:	8f 93       	push	r24
    2836:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <ppsStampCtr1ms>
    283a:	8f 93       	push	r24
    283c:	ff 92       	push	r15
    283e:	ef 92       	push	r14
    2840:	1f 93       	push	r17
    2842:	0f 93       	push	r16
    2844:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
				ppsStampCtr1ms,
				ppsStampICR1,
				ppsStampCtr1ms_last,
				ppsStampICR1_last);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2848:	28 2f       	mov	r18, r24
    284a:	a8 01       	movw	r20, r16
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA13, sizeof(PM_FORMAT_TA13));
    2854:	24 e2       	ldi	r18, 0x24	; 36
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	4f e8       	ldi	r20, 0x8F	; 143
    285a:	55 e0       	ldi	r21, 0x05	; 5
    285c:	b7 01       	movw	r22, r14
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2864:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <fastPwmSubLoopVal>
    2868:	1f 92       	push	r1
    286a:	8f 93       	push	r24
    286c:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <fastPwmLoopVal>
    2870:	1f 92       	push	r1
    2872:	8f 93       	push	r24
    2874:	ff 92       	push	r15
    2876:	ef 92       	push	r14
    2878:	1f 93       	push	r17
    287a:	0f 93       	push	r16
    287c:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
				fastPwmLoopVal,
				fastPwmSubLoopVal);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	cd bf       	out	0x3d, r28	; 61
    288a:	28 2f       	mov	r18, r24
    288c:	a8 01       	movw	r20, r16
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_TA14, sizeof(PM_FORMAT_TA14));
    2896:	20 e2       	ldi	r18, 0x20	; 32
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	4f e6       	ldi	r20, 0x6F	; 111
    289c:	55 e0       	ldi	r21, 0x05	; 5
    289e:	b7 01       	movw	r22, r14
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    28a6:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    28aa:	1f 92       	push	r1
    28ac:	8f 93       	push	r24
    28ae:	ff 92       	push	r15
    28b0:	ef 92       	push	r14
    28b2:	1f 93       	push	r17
    28b4:	0f 93       	push	r16
    28b6:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
				mainRefClkState);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    28ba:	28 2f       	mov	r18, r24
    28bc:	a8 01       	movw	r20, r16
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
	}

	if (!localNoPpsCnt) {
    28d0:	0f 90       	pop	r0
    28d2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <localNoPpsCnt.3126>
    28d6:	81 11       	cpse	r24, r1
		/* PPS - 1 Hz Ref.-Clk. - State Machine */

		/* central calculations */
		static float localMeanClockDiffSum = 0.0f;
		float qrgDev_Hz;
		int32_t local20MHzClockDiff =   (20000L * (((int32_t) ppsStampCtr1ms) - ((int32_t) ppsStampCtr1ms_last)))
    28d8:	44 c5       	rjmp	.+2696   	; 0x3362 <main_fw_giveAway+0x160c>
    28da:	40 91 89 05 	lds	r20, 0x0589	; 0x800589 <ppsStampCtr1ms>
    28de:	50 91 8a 05 	lds	r21, 0x058A	; 0x80058a <ppsStampCtr1ms+0x1>
    28e2:	60 91 8b 05 	lds	r22, 0x058B	; 0x80058b <ppsStampCtr1ms+0x2>
    28e6:	70 91 8c 05 	lds	r23, 0x058C	; 0x80058c <ppsStampCtr1ms+0x3>
    28ea:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <ppsStampCtr1ms_last>
    28ee:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <ppsStampCtr1ms_last+0x1>
    28f2:	a0 91 85 05 	lds	r26, 0x0585	; 0x800585 <ppsStampCtr1ms_last+0x2>
    28f6:	b0 91 86 05 	lds	r27, 0x0586	; 0x800586 <ppsStampCtr1ms_last+0x3>
    28fa:	9a 01       	movw	r18, r20
    28fc:	ab 01       	movw	r20, r22
    28fe:	28 1b       	sub	r18, r24
    2900:	39 0b       	sbc	r19, r25
    2902:	4a 0b       	sbc	r20, r26
    2904:	5b 0b       	sbc	r21, r27
    2906:	a0 e2       	ldi	r26, 0x20	; 32
    2908:	be e4       	ldi	r27, 0x4E	; 78
    290a:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__muluhisi3>
    290e:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <ppsStampICR1>
    2912:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <ppsStampICR1+0x1>
    2916:	49 01       	movw	r8, r18
    2918:	a1 2c       	mov	r10, r1
    291a:	b1 2c       	mov	r11, r1
    291c:	20 91 81 05 	lds	r18, 0x0581	; 0x800581 <ppsStampICR1_last>
    2920:	30 91 82 05 	lds	r19, 0x0582	; 0x800582 <ppsStampICR1_last+0x1>
    2924:	82 1a       	sub	r8, r18
    2926:	93 0a       	sbc	r9, r19
    2928:	a1 08       	sbc	r10, r1
    292a:	b1 08       	sbc	r11, r1
    292c:	86 0e       	add	r8, r22
    292e:	97 1e       	adc	r9, r23
    2930:	a8 1e       	adc	r10, r24
    2932:	b9 1e       	adc	r11, r25
    2934:	d5 01       	movw	r26, r10
    2936:	c4 01       	movw	r24, r8
    2938:	9d 52       	subi	r25, 0x2D	; 45
    293a:	a1 43       	sbci	r26, 0x31	; 49
    293c:	b1 40       	sbci	r27, 0x01	; 1
    293e:	8b 83       	std	Y+3, r24	; 0x03
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	ad 83       	std	Y+5, r26	; 0x05
							    	  +           (((int32_t) ppsStampICR1)   - ((int32_t) ppsStampICR1_last))
							    	  -  20000000L;

		float localMeanFloatClockDiff = localMeanClockDiffSum / MEAN_QRG_CLOCK_STAGES_F;
    2944:	be 83       	std	Y+6, r27	; 0x06
    2946:	40 90 23 01 	lds	r4, 0x0123	; 0x800123 <localMeanClockDiffSum.3137>
    294a:	50 90 24 01 	lds	r5, 0x0124	; 0x800124 <localMeanClockDiffSum.3137+0x1>
    294e:	60 90 25 01 	lds	r6, 0x0125	; 0x800125 <localMeanClockDiffSum.3137+0x2>
    2952:	70 90 26 01 	lds	r7, 0x0126	; 0x800126 <localMeanClockDiffSum.3137+0x3>
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 ea       	ldi	r20, 0xA0	; 160
    295c:	50 e4       	ldi	r21, 0x40	; 64
    295e:	c3 01       	movw	r24, r6
    2960:	b2 01       	movw	r22, r4
    2962:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    2966:	6b 01       	movw	r12, r22
		float localPpm = 0.0f;
		if ((local20MHzClockDiff < -CLOCK_DIFF_OUT) || (CLOCK_DIFF_OUT < local20MHzClockDiff)) {
    2968:	7c 01       	movw	r14, r24
    296a:	9c e9       	ldi	r25, 0x9C	; 156
    296c:	89 1a       	sub	r8, r25
    296e:	9c e2       	ldi	r25, 0x2C	; 44
    2970:	99 0a       	sbc	r9, r25
    2972:	91 e3       	ldi	r25, 0x31	; 49
    2974:	a9 0a       	sbc	r10, r25
    2976:	91 e0       	ldi	r25, 0x01	; 1
    2978:	b9 0a       	sbc	r11, r25
    297a:	a9 ec       	ldi	r26, 0xC9	; 201
    297c:	8a 16       	cp	r8, r26
    297e:	91 04       	cpc	r9, r1
    2980:	a1 04       	cpc	r10, r1
    2982:	b1 04       	cpc	r11, r1
			/* bad value - ignore */
			local20MHzClockDiff = 0;
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
    2984:	d8 f0       	brcs	.+54     	; 0x29bc <main_fw_giveAway+0xc66>
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	c7 01       	movw	r24, r14
    2990:	b6 01       	movw	r22, r12
    2992:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    2996:	2b 01       	movw	r4, r22
			localPpm = (localMeanFloatClockDiff / 20.0f);
    2998:	3c 01       	movw	r6, r24
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 ea       	ldi	r20, 0xA0	; 160
    29a0:	51 e4       	ldi	r21, 0x41	; 65
    29a2:	c7 01       	movw	r24, r14
    29a4:	b6 01       	movw	r22, r12
    29a6:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    29aa:	6b 87       	std	Y+11, r22	; 0x0b
    29ac:	7c 87       	std	Y+12, r23	; 0x0c
    29ae:	8d 87       	std	Y+13, r24	; 0x0d

		float localMeanFloatClockDiff = localMeanClockDiffSum / MEAN_QRG_CLOCK_STAGES_F;
		float localPpm = 0.0f;
		if ((local20MHzClockDiff < -CLOCK_DIFF_OUT) || (CLOCK_DIFF_OUT < local20MHzClockDiff)) {
			/* bad value - ignore */
			local20MHzClockDiff = 0;
    29b0:	9e 87       	std	Y+14, r25	; 0x0e
    29b2:	1b 82       	std	Y+3, r1	; 0x03
    29b4:	1c 82       	std	Y+4, r1	; 0x04
    29b6:	1d 82       	std	Y+5, r1	; 0x05
    29b8:	1e 82       	std	Y+6, r1	; 0x06
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
			localPpm = (localMeanFloatClockDiff / 20.0f);

		} else if ((-CLOCK_DIFF_COARSE_FINE < local20MHzClockDiff) && (local20MHzClockDiff < CLOCK_DIFF_COARSE_FINE)) {
    29ba:	56 c0       	rjmp	.+172    	; 0x2a68 <main_fw_giveAway+0xd12>
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	ad 81       	ldd	r26, Y+5	; 0x05
    29c2:	be 81       	ldd	r27, Y+6	; 0x06
    29c4:	43 96       	adiw	r24, 0x13	; 19
    29c6:	a1 1d       	adc	r26, r1
    29c8:	b1 1d       	adc	r27, r1
    29ca:	87 97       	sbiw	r24, 0x27	; 39
    29cc:	a1 05       	cpc	r26, r1
    29ce:	b1 05       	cpc	r27, r1
			/* fine mode */
			localMeanClockDiffSum += (((float) local20MHzClockDiff) - localMeanFloatClockDiff);
    29d0:	38 f5       	brcc	.+78     	; 0x2a20 <main_fw_giveAway+0xcca>
    29d2:	6b 81       	ldd	r22, Y+3	; 0x03
    29d4:	7c 81       	ldd	r23, Y+4	; 0x04
    29d6:	8d 81       	ldd	r24, Y+5	; 0x05
    29d8:	9e 81       	ldd	r25, Y+6	; 0x06
    29da:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    29de:	a7 01       	movw	r20, r14
    29e0:	96 01       	movw	r18, r12
    29e2:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    29e6:	a3 01       	movw	r20, r6
    29e8:	92 01       	movw	r18, r4
    29ea:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    29ee:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <localMeanClockDiffSum.3137>
    29f2:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <localMeanClockDiffSum.3137+0x1>
    29f6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <localMeanClockDiffSum.3137+0x2>
    29fa:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <localMeanClockDiffSum.3137+0x3>
			qrgDev_Hz = (localMeanFloatClockDiff / 2.0f);
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	5f e3       	ldi	r21, 0x3F	; 63
    2a06:	c7 01       	movw	r24, r14
    2a08:	b6 01       	movw	r22, r12
    2a0a:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    2a0e:	2b 01       	movw	r4, r22
			localPpm = (localMeanFloatClockDiff / 20.0f);
    2a10:	3c 01       	movw	r6, r24
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 ea       	ldi	r20, 0xA0	; 160
    2a18:	51 e4       	ldi	r21, 0x41	; 65
    2a1a:	c7 01       	movw	r24, r14
    2a1c:	b6 01       	movw	r22, r12

		} else {
			/* re-init the mean value sum when being in coarse mode */
			localMeanClockDiffSum = 0.0f;
    2a1e:	1e c0       	rjmp	.+60     	; 0x2a5c <main_fw_giveAway+0xd06>
    2a20:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <localMeanClockDiffSum.3137>
    2a24:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <localMeanClockDiffSum.3137+0x1>
    2a28:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <localMeanClockDiffSum.3137+0x2>
    2a2c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <localMeanClockDiffSum.3137+0x3>
			qrgDev_Hz = (local20MHzClockDiff / 2.0f);
    2a30:	6b 81       	ldd	r22, Y+3	; 0x03
    2a32:	7c 81       	ldd	r23, Y+4	; 0x04
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    2a3c:	4b 01       	movw	r8, r22
    2a3e:	5c 01       	movw	r10, r24
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e0       	ldi	r20, 0x00	; 0
    2a46:	5f e3       	ldi	r21, 0x3F	; 63
    2a48:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    2a4c:	2b 01       	movw	r4, r22
			localPpm = (local20MHzClockDiff / 20.0f);
    2a4e:	3c 01       	movw	r6, r24
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 ea       	ldi	r20, 0xA0	; 160
    2a56:	51 e4       	ldi	r21, 0x41	; 65
    2a58:	c5 01       	movw	r24, r10
    2a5a:	b4 01       	movw	r22, r8
    2a5c:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    2a60:	6b 87       	std	Y+11, r22	; 0x0b
    2a62:	7c 87       	std	Y+12, r23	; 0x0c
    2a64:	8d 87       	std	Y+13, r24	; 0x0d
		}

		if (main_bf.mainIsTimerTest && (!main_bf.mainIsAFC)) {
    2a66:	9e 87       	std	Y+14, r25	; 0x0e
    2a68:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2a6c:	82 ff       	sbrs	r24, 2
    2a6e:	c3 c0       	rjmp	.+390    	; 0x2bf6 <main_fw_giveAway+0xea0>
    2a70:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2a74:	80 fd       	sbrc	r24, 0
			/* monitoring frequency even when AFC is switched off */
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA01, sizeof(PM_FORMAT_IA01));
    2a76:	bf c0       	rjmp	.+382    	; 0x2bf6 <main_fw_giveAway+0xea0>
    2a78:	2a e3       	ldi	r18, 0x3A	; 58
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	4f e5       	ldi	r20, 0x5F	; 95
    2a7e:	54 e0       	ldi	r21, 0x04	; 4
    2a80:	6d e8       	ldi	r22, 0x8D	; 141
    2a82:	73 e0       	ldi	r23, 0x03	; 3
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
			int len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2a8a:	be 81       	ldd	r27, Y+6	; 0x06
    2a8c:	bf 93       	push	r27
    2a8e:	2d 81       	ldd	r18, Y+5	; 0x05
    2a90:	2f 93       	push	r18
    2a92:	3c 81       	ldd	r19, Y+4	; 0x04
    2a94:	3f 93       	push	r19
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	8f 93       	push	r24
    2a9a:	8d e8       	ldi	r24, 0x8D	; 141
    2a9c:	93 e0       	ldi	r25, 0x03	; 3
    2a9e:	9f 93       	push	r25
    2aa0:	8f 93       	push	r24
    2aa2:	8d e0       	ldi	r24, 0x0D	; 13
    2aa4:	94 e0       	ldi	r25, 0x04	; 4
    2aa6:	9f 93       	push	r25
    2aa8:	8f 93       	push	r24
    2aaa:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2aae:	28 2f       	mov	r18, r24
    2ab0:	4d e0       	ldi	r20, 0x0D	; 13
    2ab2:	54 e0       	ldi	r21, 0x04	; 4
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

			float l_mainPpm = mainPpm + 2.5f;
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	50 e4       	ldi	r21, 0x40	; 64
    2ac4:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <mainPpm>
    2ac8:	70 91 7e 05 	lds	r23, 0x057E	; 0x80057e <mainPpm+0x1>
    2acc:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <mainPpm+0x2>
    2ad0:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <mainPpm+0x3>
    2ad4:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    2ad8:	4b 01       	movw	r8, r22
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
    2ada:	5c 01       	movw	r10, r24
    2adc:	24 e7       	ldi	r18, 0x74	; 116
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4b ee       	ldi	r20, 0xEB	; 235
    2ae2:	53 e0       	ldi	r21, 0x03	; 3
    2ae4:	6d e8       	ldi	r22, 0x8D	; 141
    2ae6:	73 e0       	ldi	r23, 0x03	; 3
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2aee:	46 e0       	ldi	r20, 0x06	; 6
    2af0:	c5 01       	movw	r24, r10
    2af2:	b4 01       	movw	r22, r8
    2af4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    2af8:	8f 87       	std	Y+15, r24	; 0x0f
    2afa:	99 8b       	std	Y+17, r25	; 0x11
    2afc:	c5 01       	movw	r24, r10
    2afe:	b4 01       	movw	r22, r8
    2b00:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    2b04:	6a 8b       	std	Y+18, r22	; 0x12
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2b06:	7b 8b       	std	Y+19, r23	; 0x13
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	a9 01       	movw	r20, r18
    2b18:	c5 01       	movw	r24, r10
    2b1a:	b4 01       	movw	r22, r8
    2b1c:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    2b20:	87 ff       	sbrs	r24, 7
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <main_fw_giveAway+0xdd2>
    2b24:	8d e2       	ldi	r24, 0x2D	; 45
    2b26:	01 c0       	rjmp	.+2      	; 0x2b2a <main_fw_giveAway+0xdd4>
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			float l_mainPpm = mainPpm + 2.5f;
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2b28:	8b e2       	ldi	r24, 0x2B	; 43
    2b2a:	28 2f       	mov	r18, r24
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	38 87       	std	Y+8, r19	; 0x08
    2b30:	2f 83       	std	Y+7, r18	; 0x07
    2b32:	43 e0       	ldi	r20, 0x03	; 3
    2b34:	c3 01       	movw	r24, r6
    2b36:	b2 01       	movw	r22, r4
    2b38:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    2b3c:	1c 01       	movw	r2, r24
    2b3e:	c3 01       	movw	r24, r6
    2b40:	b2 01       	movw	r22, r4
    2b42:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    2b46:	6c 8b       	std	Y+20, r22	; 0x14
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2b48:	7d 8b       	std	Y+21, r23	; 0x15
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	a9 01       	movw	r20, r18
    2b50:	c3 01       	movw	r24, r6
    2b52:	b2 01       	movw	r22, r4
    2b54:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    2b58:	87 ff       	sbrs	r24, 7
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <main_fw_giveAway+0xe0a>
    2b5c:	0d e2       	ldi	r16, 0x2D	; 45
    2b5e:	01 c0       	rjmp	.+2      	; 0x2b62 <main_fw_giveAway+0xe0c>
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			float l_mainPpm = mainPpm + 2.5f;
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2b60:	0b e2       	ldi	r16, 0x2B	; 43
    2b62:	10 e0       	ldi	r17, 0x00	; 0
    2b64:	43 e0       	ldi	r20, 0x03	; 3
    2b66:	c7 01       	movw	r24, r14
    2b68:	b6 01       	movw	r22, r12
    2b6a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    2b6e:	98 2e       	mov	r9, r24
    2b70:	89 2e       	mov	r8, r25
    2b72:	c7 01       	movw	r24, r14
    2b74:	b6 01       	movw	r22, r12
    2b76:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    2b7a:	b6 2e       	mov	r11, r22
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2b7c:	a7 2e       	mov	r10, r23
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	a9 01       	movw	r20, r18
    2b84:	c7 01       	movw	r24, r14
    2b86:	b6 01       	movw	r22, r12
    2b88:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    2b8c:	87 ff       	sbrs	r24, 7
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <main_fw_giveAway+0xe3e>
    2b90:	8d e2       	ldi	r24, 0x2D	; 45
    2b92:	01 c0       	rjmp	.+2      	; 0x2b96 <main_fw_giveAway+0xe40>
					local20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			float l_mainPpm = mainPpm + 2.5f;
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2b94:	8b e2       	ldi	r24, 0x2B	; 43
    2b96:	39 89       	ldd	r19, Y+17	; 0x11
    2b98:	3f 93       	push	r19
    2b9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b9c:	9f 93       	push	r25
    2b9e:	ab 89       	ldd	r26, Y+19	; 0x13
    2ba0:	af 93       	push	r26
    2ba2:	ba 89       	ldd	r27, Y+18	; 0x12
    2ba4:	bf 93       	push	r27
    2ba6:	28 85       	ldd	r18, Y+8	; 0x08
    2ba8:	2f 93       	push	r18
    2baa:	3f 81       	ldd	r19, Y+7	; 0x07
    2bac:	3f 93       	push	r19
    2bae:	3f 92       	push	r3
    2bb0:	2f 92       	push	r2
    2bb2:	9d 89       	ldd	r25, Y+21	; 0x15
    2bb4:	9f 93       	push	r25
    2bb6:	ac 89       	ldd	r26, Y+20	; 0x14
    2bb8:	af 93       	push	r26
    2bba:	1f 93       	push	r17
    2bbc:	0f 93       	push	r16
    2bbe:	8f 92       	push	r8
    2bc0:	9f 92       	push	r9
    2bc2:	af 92       	push	r10
    2bc4:	bf 92       	push	r11
    2bc6:	1f 92       	push	r1
    2bc8:	8f 93       	push	r24
    2bca:	8d e8       	ldi	r24, 0x8D	; 141
    2bcc:	93 e0       	ldi	r25, 0x03	; 3
    2bce:	9f 93       	push	r25
    2bd0:	8f 93       	push	r24
    2bd2:	8d e0       	ldi	r24, 0x0D	; 13
    2bd4:	94 e0       	ldi	r25, 0x04	; 4
    2bd6:	9f 93       	push	r25
    2bd8:	8f 93       	push	r24
    2bda:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
					s_flt_sign(localMeanFloatClockDiff), (int) localMeanFloatClockDiff, s_flt_frac(localMeanFloatClockDiff, 3),
					s_flt_sign(qrgDev_Hz), (int) qrgDev_Hz, s_flt_frac(qrgDev_Hz, 3),
					s_flt_sign(l_mainPpm), (int) l_mainPpm, s_flt_frac(l_mainPpm, 6));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2bde:	28 2f       	mov	r18, r24
    2be0:	4d e0       	ldi	r20, 0x0D	; 13
    2be2:	54 e0       	ldi	r21, 0x04	; 4
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
	const  uint8_t holdOffTimeStart = 20;
	static uint8_t holdOffTime = 0;

	uint8_t localIsOffset = false;

	if ((mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) && main_bf.mainIsAPC) {
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2bfa:	84 30       	cpi	r24, 0x04	; 4
    2bfc:	80 f4       	brcc	.+32     	; 0x2c1e <main_fw_giveAway+0xec8>
    2bfe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2c02:	81 ff       	sbrs	r24, 1
		/* Help APC to find its phase - when found, stop offset */
		meanFloatClockDiff += 0.1f;							// 0.1 Hz @ 20 MHz below center frequency to let the phase wander and
    2c04:	0c c0       	rjmp	.+24     	; 0x2c1e <main_fw_giveAway+0xec8>
    2c06:	2d ec       	ldi	r18, 0xCD	; 205
    2c08:	3c ec       	ldi	r19, 0xCC	; 204
    2c0a:	4c ec       	ldi	r20, 0xCC	; 204
    2c0c:	5d e3       	ldi	r21, 0x3D	; 61
    2c0e:	c7 01       	movw	r24, r14
    2c10:	b6 01       	movw	r22, r12
    2c12:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    2c16:	6b 01       	movw	r12, r22
															// the phase locker find its position to lock in
		localIsOffset = true;
    2c18:	7c 01       	movw	r14, r24
    2c1a:	11 e0       	ldi	r17, 0x01	; 1
	/* frequency shift calculation */

	const  uint8_t holdOffTimeStart = 20;
	static uint8_t holdOffTime = 0;

	uint8_t localIsOffset = false;
    2c1c:	01 c0       	rjmp	.+2      	; 0x2c20 <main_fw_giveAway+0xeca>
		meanFloatClockDiff += 0.1f;							// 0.1 Hz @ 20 MHz below center frequency to let the phase wander and
															// the phase locker find its position to lock in
		localIsOffset = true;
	}

	if ((-1000.0f < meanFloatClockDiff) &&
    2c1e:	10 e0       	ldi	r17, 0x00	; 0
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	4a e7       	ldi	r20, 0x7A	; 122
    2c26:	54 ec       	ldi	r21, 0xC4	; 196
    2c28:	c7 01       	movw	r24, r14
    2c2a:	b6 01       	movw	r22, r12
    2c2c:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    2c30:	18 16       	cp	r1, r24
    2c32:	0c f0       	brlt	.+2      	; 0x2c36 <main_fw_giveAway+0xee0>
    2c34:	18 c2       	rjmp	.+1072   	; 0x3066 <main_fw_giveAway+0x1310>
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	4a e7       	ldi	r20, 0x7A	; 122
    2c3c:	54 e4       	ldi	r21, 0x44	; 68
    2c3e:	c7 01       	movw	r24, r14
    2c40:	b6 01       	movw	r22, r12
    2c42:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
    2c46:	87 ff       	sbrs	r24, 7
		( 1000.0f > meanFloatClockDiff)) {
		/* keep measuring window between +/-50ppm */
		ppm -=  (localIsOffset ?  0.005f : 0.0f);			// correct the clock offset
    2c48:	0e c2       	rjmp	.+1052   	; 0x3066 <main_fw_giveAway+0x1310>
    2c4a:	11 11       	cpse	r17, r1
    2c4c:	04 c0       	rjmp	.+8      	; 0x2c56 <main_fw_giveAway+0xf00>
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	a9 01       	movw	r20, r18
    2c54:	04 c0       	rjmp	.+8      	; 0x2c5e <main_fw_giveAway+0xf08>
    2c56:	2a e0       	ldi	r18, 0x0A	; 10
    2c58:	37 ed       	ldi	r19, 0xD7	; 215
    2c5a:	43 ea       	ldi	r20, 0xA3	; 163
    2c5c:	5b e3       	ldi	r21, 0x3B	; 59
    2c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c66:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    2c6a:	4b 01       	movw	r8, r22

		float pwmCorSteps;
		if ((-CLOCK_DIFF_FAST_FRAME <= int20MHzClockDiff) && (int20MHzClockDiff <= CLOCK_DIFF_FAST_FRAME)) {
    2c6c:	5c 01       	movw	r10, r24
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	9c 81       	ldd	r25, Y+4	; 0x04
    2c72:	ad 81       	ldd	r26, Y+5	; 0x05
    2c74:	be 81       	ldd	r27, Y+6	; 0x06
    2c76:	03 96       	adiw	r24, 0x03	; 3
    2c78:	a1 1d       	adc	r26, r1
    2c7a:	b1 1d       	adc	r27, r1
    2c7c:	07 97       	sbiw	r24, 0x07	; 7
    2c7e:	a1 05       	cpc	r26, r1
    2c80:	b1 05       	cpc	r27, r1
			/* fine pitching */
			pwmCorSteps = ((-meanFloatClockDiff / 20.0f) / mainCoef_b02_qrg_k_pPwmStep_25C_ppm) / PWM_COR_STEPS_FINE_DIV_F;
    2c82:	f0 f4       	brcc	.+60     	; 0x2cc0 <main_fw_giveAway+0xf6a>
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 ea       	ldi	r20, 0xA0	; 160
    2c8a:	51 e4       	ldi	r21, 0x41	; 65
    2c8c:	c7 01       	movw	r24, r14
    2c8e:	b6 01       	movw	r22, r12
    2c90:	90 58       	subi	r25, 0x80	; 128
    2c92:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    2c96:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    2c9a:	30 91 a7 05 	lds	r19, 0x05A7	; 0x8005a7 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    2c9e:	40 91 a8 05 	lds	r20, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    2ca2:	50 91 a9 05 	lds	r21, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    2ca6:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e2       	ldi	r20, 0x20	; 32
    2cb0:	51 e4       	ldi	r21, 0x41	; 65
    2cb2:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    2cb6:	6f 83       	std	Y+7, r22	; 0x07
    2cb8:	78 87       	std	Y+8, r23	; 0x08
    2cba:	89 87       	std	Y+9, r24	; 0x09
    2cbc:	9a 87       	std	Y+10, r25	; 0x0a

		} else {
			/* coarse pitching */
			pwmCorSteps = ((((float) -int20MHzClockDiff) / 20.0f) / mainCoef_b02_qrg_k_pPwmStep_25C_ppm) / PWM_COR_STEPS_COARSE_DIV_F;  // used also in main_fw_calcPhase()
    2cbe:	29 c0       	rjmp	.+82     	; 0x2d12 <main_fw_giveAway+0xfbc>
    2cc0:	6b 81       	ldd	r22, Y+3	; 0x03
    2cc2:	7c 81       	ldd	r23, Y+4	; 0x04
    2cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc8:	90 95       	com	r25
    2cca:	80 95       	com	r24
    2ccc:	70 95       	com	r23
    2cce:	61 95       	neg	r22
    2cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd6:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	40 ea       	ldi	r20, 0xA0	; 160
    2ce0:	51 e4       	ldi	r21, 0x41	; 65
    2ce2:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    2ce6:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    2cea:	30 91 a7 05 	lds	r19, 0x05A7	; 0x8005a7 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    2cee:	40 91 a8 05 	lds	r20, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    2cf2:	50 91 a9 05 	lds	r21, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    2cf6:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    2cfa:	2d ec       	ldi	r18, 0xCD	; 205
    2cfc:	3c ec       	ldi	r19, 0xCC	; 204
    2cfe:	4c e8       	ldi	r20, 0x8C	; 140
    2d00:	5f e3       	ldi	r21, 0x3F	; 63
    2d02:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    2d06:	6f 83       	std	Y+7, r22	; 0x07
    2d08:	78 87       	std	Y+8, r23	; 0x08
    2d0a:	89 87       	std	Y+9, r24	; 0x09
			mainRefClkState = REFCLK_STATE_NOSYNC;
    2d0c:	9a 87       	std	Y+10, r25	; 0x0a
    2d0e:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <mainRefClkState>
		}

		/* determine the new state of the FSM */
		if ((-0.015f <= ppm) && (ppm <= 0.015f) && (mainRefClkState == REFCLK_STATE_SEARCH_PHASE)) {  // single step tuning with counter stabilizer
    2d12:	2f e8       	ldi	r18, 0x8F	; 143
    2d14:	32 ec       	ldi	r19, 0xC2	; 194
    2d16:	45 e7       	ldi	r20, 0x75	; 117
    2d18:	5c eb       	ldi	r21, 0xBC	; 188
    2d1a:	c5 01       	movw	r24, r10
    2d1c:	b4 01       	movw	r22, r8
    2d1e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    2d22:	87 fd       	sbrc	r24, 7
    2d24:	16 c0       	rjmp	.+44     	; 0x2d52 <main_fw_giveAway+0xffc>
    2d26:	2f e8       	ldi	r18, 0x8F	; 143
    2d28:	32 ec       	ldi	r19, 0xC2	; 194
    2d2a:	45 e7       	ldi	r20, 0x75	; 117
    2d2c:	5c e3       	ldi	r21, 0x3C	; 60
    2d2e:	c5 01       	movw	r24, r10
    2d30:	b4 01       	movw	r22, r8
    2d32:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
    2d36:	18 16       	cp	r1, r24
    2d38:	64 f0       	brlt	.+24     	; 0x2d52 <main_fw_giveAway+0xffc>
    2d3a:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2d3e:	82 30       	cpi	r24, 0x02	; 2
			/* Upgrading: switch on the frequency mean value counter */
			if (!holdOffTime) {
    2d40:	41 f4       	brne	.+16     	; 0x2d52 <main_fw_giveAway+0xffc>
    2d42:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2937>
    2d46:	81 11       	cpse	r24, r1
				mainRefClkState = REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED;
    2d48:	62 c0       	rjmp	.+196    	; 0x2e0e <main_fw_giveAway+0x10b8>
    2d4a:	83 e0       	ldi	r24, 0x03	; 3
    2d4c:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>
			}

		} else if ((-0.045f <= ppm) && (ppm <= 0.045f) && (mainRefClkState == REFCLK_STATE_SEARCH_QRG)) {	 // entering phase window (deviation less than 1 Hz @ 20 MHz)
    2d50:	5e c0       	rjmp	.+188    	; 0x2e0e <main_fw_giveAway+0x10b8>
    2d52:	2c ee       	ldi	r18, 0xEC	; 236
    2d54:	31 e5       	ldi	r19, 0x51	; 81
    2d56:	48 e3       	ldi	r20, 0x38	; 56
    2d58:	5d eb       	ldi	r21, 0xBD	; 189
    2d5a:	c5 01       	movw	r24, r10
    2d5c:	b4 01       	movw	r22, r8
    2d5e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    2d62:	87 fd       	sbrc	r24, 7
    2d64:	14 c0       	rjmp	.+40     	; 0x2d8e <main_fw_giveAway+0x1038>
    2d66:	2c ee       	ldi	r18, 0xEC	; 236
    2d68:	31 e5       	ldi	r19, 0x51	; 81
    2d6a:	48 e3       	ldi	r20, 0x38	; 56
    2d6c:	5d e3       	ldi	r21, 0x3D	; 61
    2d6e:	c5 01       	movw	r24, r10
    2d70:	b4 01       	movw	r22, r8
    2d72:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
    2d76:	18 16       	cp	r1, r24
    2d78:	54 f0       	brlt	.+20     	; 0x2d8e <main_fw_giveAway+0x1038>
    2d7a:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2d7e:	81 30       	cpi	r24, 0x01	; 1
			/* Upgrading: search phase window */
			if (!holdOffTime) {
    2d80:	31 f4       	brne	.+12     	; 0x2d8e <main_fw_giveAway+0x1038>
    2d82:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2937>
    2d86:	81 11       	cpse	r24, r1
				mainRefClkState = REFCLK_STATE_SEARCH_PHASE;
    2d88:	42 c0       	rjmp	.+132    	; 0x2e0e <main_fw_giveAway+0x10b8>
    2d8a:	82 e0       	ldi	r24, 0x02	; 2
				holdOffTime = holdOffTimeStart;
			}

		} else if ((-0.095f <= ppm) && (ppm <= 0.095f) && (mainRefClkState > REFCLK_STATE_SEARCH_QRG)) {  // do not fall out of phase window
    2d8c:	31 c0       	rjmp	.+98     	; 0x2df0 <main_fw_giveAway+0x109a>
    2d8e:	2c e5       	ldi	r18, 0x5C	; 92
    2d90:	3f e8       	ldi	r19, 0x8F	; 143
    2d92:	42 ec       	ldi	r20, 0xC2	; 194
    2d94:	5d eb       	ldi	r21, 0xBD	; 189
    2d96:	c5 01       	movw	r24, r10
    2d98:	b4 01       	movw	r22, r8
    2d9a:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    2d9e:	87 fd       	sbrc	r24, 7
    2da0:	0e c0       	rjmp	.+28     	; 0x2dbe <main_fw_giveAway+0x1068>
    2da2:	2c e5       	ldi	r18, 0x5C	; 92
    2da4:	3f e8       	ldi	r19, 0x8F	; 143
    2da6:	42 ec       	ldi	r20, 0xC2	; 194
    2da8:	5d e3       	ldi	r21, 0x3D	; 61
    2daa:	c5 01       	movw	r24, r10
    2dac:	b4 01       	movw	r22, r8
    2dae:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
    2db2:	18 16       	cp	r1, r24
    2db4:	24 f0       	brlt	.+8      	; 0x2dbe <main_fw_giveAway+0x1068>
    2db6:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2dba:	82 30       	cpi	r24, 0x02	; 2
			/* hysteresis: keep state a bit longer */

		} else if ((-25.0 <= ppm) && (ppm <= 25.0f)) {  // searching QRG until 1 Hz resolution is established
    2dbc:	40 f5       	brcc	.+80     	; 0x2e0e <main_fw_giveAway+0x10b8>
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	48 ec       	ldi	r20, 0xC8	; 200
    2dc4:	51 ec       	ldi	r21, 0xC1	; 193
    2dc6:	c5 01       	movw	r24, r10
    2dc8:	b4 01       	movw	r22, r8
    2dca:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    2dce:	87 fd       	sbrc	r24, 7
    2dd0:	19 c0       	rjmp	.+50     	; 0x2e04 <main_fw_giveAway+0x10ae>
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	48 ec       	ldi	r20, 0xC8	; 200
    2dd8:	51 e4       	ldi	r21, 0x41	; 65
    2dda:	c5 01       	movw	r24, r10
    2ddc:	b4 01       	movw	r22, r8
    2dde:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
    2de2:	18 16       	cp	r1, r24
			if (mainRefClkState > REFCLK_STATE_SEARCH_QRG) {
    2de4:	7c f0       	brlt	.+30     	; 0x2e04 <main_fw_giveAway+0x10ae>
    2de6:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2dea:	82 30       	cpi	r24, 0x02	; 2
				/* Downgrading */
				mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    2dec:	20 f0       	brcs	.+8      	; 0x2df6 <main_fw_giveAway+0x10a0>
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>
				holdOffTime = holdOffTimeStart;

			} else if (mainRefClkState < REFCLK_STATE_SEARCH_QRG) {
    2df4:	09 c0       	rjmp	.+18     	; 0x2e08 <main_fw_giveAway+0x10b2>
    2df6:	81 11       	cpse	r24, r1
				/* Upgrading */
				if (!holdOffTime) {
    2df8:	0a c0       	rjmp	.+20     	; 0x2e0e <main_fw_giveAway+0x10b8>
    2dfa:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2937>
    2dfe:	88 23       	and	r24, r24
    2e00:	b1 f3       	breq	.-20     	; 0x2dee <main_fw_giveAway+0x1098>
				}
			}

		} else {
			/* no valid frequency detected */
			mainRefClkState = REFCLK_STATE_NOSYNC;
    2e02:	05 c0       	rjmp	.+10     	; 0x2e0e <main_fw_giveAway+0x10b8>
    2e04:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <mainRefClkState>
			holdOffTime = holdOffTimeStart;
    2e08:	84 e1       	ldi	r24, 0x14	; 20
    2e0a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2937>
		}

		if (!main_bf.mainIsAFC) {
    2e0e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2e12:	80 ff       	sbrs	r24, 0
		}


		/* windowing and adding of the new PWM value */

		uint8_t sreg = SREG;
    2e14:	31 c1       	rjmp	.+610    	; 0x3078 <main_fw_giveAway+0x1322>
		cli();
    2e16:	8f b7       	in	r24, 0x3f	; 63
		uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
    2e18:	f8 94       	cli
    2e1a:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <fastPwmLoopVal>
		uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <fastPwmSubLoopVal>
		SREG = sreg;
    2e24:	99 83       	std	Y+1, r25	; 0x01

		if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    2e26:	8f bf       	out	0x3f, r24	; 63
    2e28:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    2e2c:	84 30       	cpi	r24, 0x04	; 4
			/* adjusting the PWM registers and make the new value public - only when hand-over to Phase Correction is not made */
			(void) main_fw_calcTimerAdj(pwmCorSteps, &localFastPwmLoopVal, &localFastPwmSubLoopVal);
    2e2e:	a8 f4       	brcc	.+42     	; 0x2e5a <main_fw_giveAway+0x1104>
    2e30:	9e 01       	movw	r18, r28
    2e32:	2f 5f       	subi	r18, 0xFF	; 255
    2e34:	3f 4f       	sbci	r19, 0xFF	; 255
    2e36:	ae 01       	movw	r20, r28
    2e38:	4e 5f       	subi	r20, 0xFE	; 254
    2e3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3e:	78 85       	ldd	r23, Y+8	; 0x08
    2e40:	89 85       	ldd	r24, Y+9	; 0x09
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	0e 94 38 0a 	call	0x1470	; 0x1470 <main_fw_calcTimerAdj>

			uint8_t sreg = SREG;
			cli();
    2e48:	8f b7       	in	r24, 0x3f	; 63
			fastPwmLoopVal		= localFastPwmLoopVal;
    2e4a:	f8 94       	cli
    2e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4e:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <fastPwmLoopVal>
			fastPwmSubLoopVal	= localFastPwmSubLoopVal;
    2e52:	99 81       	ldd	r25, Y+1	; 0x01
    2e54:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <fastPwmSubLoopVal>
			SREG = sreg;
		}

		if (main_bf.mainIsTimerTest) {
    2e58:	8f bf       	out	0x3f, r24	; 63
    2e5a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2e5e:	82 ff       	sbrs	r24, 2
			/* monitoring */
			int len;
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA01, sizeof(PM_FORMAT_IA01));
    2e60:	02 c1       	rjmp	.+516    	; 0x3066 <main_fw_giveAway+0x1310>
    2e62:	2a e3       	ldi	r18, 0x3A	; 58
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	4f e5       	ldi	r20, 0x5F	; 95
    2e68:	54 e0       	ldi	r21, 0x04	; 4
    2e6a:	6d e8       	ldi	r22, 0x8D	; 141
    2e6c:	73 e0       	ldi	r23, 0x03	; 3
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2e74:	3e 81       	ldd	r19, Y+6	; 0x06
    2e76:	3f 93       	push	r19
    2e78:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7a:	8f 93       	push	r24
    2e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7e:	9f 93       	push	r25
    2e80:	ab 81       	ldd	r26, Y+3	; 0x03
    2e82:	af 93       	push	r26
    2e84:	8d e8       	ldi	r24, 0x8D	; 141
    2e86:	93 e0       	ldi	r25, 0x03	; 3
    2e88:	9f 93       	push	r25
    2e8a:	8f 93       	push	r24
    2e8c:	8d e0       	ldi	r24, 0x0D	; 13
    2e8e:	94 e0       	ldi	r25, 0x04	; 4
    2e90:	9f 93       	push	r25
    2e92:	8f 93       	push	r24
    2e94:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
					int20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2e98:	28 2f       	mov	r18, r24
    2e9a:	4d e0       	ldi	r20, 0x0D	; 13
    2e9c:	54 e0       	ldi	r21, 0x04	; 4
    2e9e:	60 e0       	ldi	r22, 0x00	; 0
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
    2ea6:	24 e7       	ldi	r18, 0x74	; 116
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	4b ee       	ldi	r20, 0xEB	; 235
    2eac:	53 e0       	ldi	r21, 0x03	; 3
    2eae:	6d e8       	ldi	r22, 0x8D	; 141
    2eb0:	73 e0       	ldi	r23, 0x03	; 3
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2eb8:	46 e0       	ldi	r20, 0x06	; 6
    2eba:	c5 01       	movw	r24, r10
    2ebc:	b4 01       	movw	r22, r8
    2ebe:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    2ec2:	8c 01       	movw	r16, r24
    2ec4:	c5 01       	movw	r24, r10
    2ec6:	b4 01       	movw	r22, r8
    2ec8:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2ecc:	1b 01       	movw	r2, r22
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	a9 01       	movw	r20, r18
    2ede:	c5 01       	movw	r24, r10
    2ee0:	b4 01       	movw	r22, r8
    2ee2:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    2ee6:	87 ff       	sbrs	r24, 7
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <main_fw_giveAway+0x1198>
    2eea:	8d e2       	ldi	r24, 0x2D	; 45
    2eec:	01 c0       	rjmp	.+2      	; 0x2ef0 <main_fw_giveAway+0x119a>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
					int20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2eee:	8b e2       	ldi	r24, 0x2B	; 43
    2ef0:	a8 2f       	mov	r26, r24
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	bc 83       	std	Y+4, r27	; 0x04
    2ef6:	ab 83       	std	Y+3, r26	; 0x03
    2ef8:	43 e0       	ldi	r20, 0x03	; 3
    2efa:	c3 01       	movw	r24, r6
    2efc:	b2 01       	movw	r22, r4
    2efe:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    2f02:	5c 01       	movw	r10, r24
    2f04:	c3 01       	movw	r24, r6
    2f06:	b2 01       	movw	r22, r4
    2f08:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2f0c:	4b 01       	movw	r8, r22
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	a9 01       	movw	r20, r18
    2f14:	c3 01       	movw	r24, r6
    2f16:	b2 01       	movw	r22, r4
    2f18:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    2f1c:	87 ff       	sbrs	r24, 7
    2f1e:	02 c0       	rjmp	.+4      	; 0x2f24 <main_fw_giveAway+0x11ce>
    2f20:	8d e2       	ldi	r24, 0x2D	; 45
    2f22:	01 c0       	rjmp	.+2      	; 0x2f26 <main_fw_giveAway+0x11d0>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
					int20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2f24:	8b e2       	ldi	r24, 0x2B	; 43
    2f26:	28 2f       	mov	r18, r24
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	38 8b       	std	Y+16, r19	; 0x10
    2f2c:	2f 87       	std	Y+15, r18	; 0x0f
    2f2e:	43 e0       	ldi	r20, 0x03	; 3
    2f30:	c7 01       	movw	r24, r14
    2f32:	b6 01       	movw	r22, r12
    2f34:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    2f38:	89 8b       	std	Y+17, r24	; 0x11
    2f3a:	9a 8b       	std	Y+18, r25	; 0x12
    2f3c:	c7 01       	movw	r24, r14
    2f3e:	b6 01       	movw	r22, r12
    2f40:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    2f44:	6b 8b       	std	Y+19, r22	; 0x13
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    2f46:	7c 8b       	std	Y+20, r23	; 0x14
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	a9 01       	movw	r20, r18
    2f4e:	c7 01       	movw	r24, r14
    2f50:	b6 01       	movw	r22, r12
    2f52:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    2f56:	87 ff       	sbrs	r24, 7
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <main_fw_giveAway+0x1208>
    2f5a:	8d e2       	ldi	r24, 0x2D	; 45
    2f5c:	01 c0       	rjmp	.+2      	; 0x2f60 <main_fw_giveAway+0x120a>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
					int20MHzClockDiff);
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA02, sizeof(PM_FORMAT_IA02));
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    2f5e:	8b e2       	ldi	r24, 0x2B	; 43
    2f60:	1f 93       	push	r17
    2f62:	0f 93       	push	r16
    2f64:	3f 92       	push	r3
    2f66:	2f 92       	push	r2
    2f68:	3c 81       	ldd	r19, Y+4	; 0x04
    2f6a:	3f 93       	push	r19
    2f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6e:	9f 93       	push	r25
    2f70:	bf 92       	push	r11
    2f72:	af 92       	push	r10
    2f74:	9f 92       	push	r9
    2f76:	8f 92       	push	r8
    2f78:	a8 89       	ldd	r26, Y+16	; 0x10
    2f7a:	af 93       	push	r26
    2f7c:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f7e:	bf 93       	push	r27
    2f80:	2a 89       	ldd	r18, Y+18	; 0x12
    2f82:	2f 93       	push	r18
    2f84:	39 89       	ldd	r19, Y+17	; 0x11
    2f86:	3f 93       	push	r19
    2f88:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8a:	9f 93       	push	r25
    2f8c:	ab 89       	ldd	r26, Y+19	; 0x13
    2f8e:	af 93       	push	r26
    2f90:	1f 92       	push	r1
    2f92:	8f 93       	push	r24
    2f94:	bd e8       	ldi	r27, 0x8D	; 141
    2f96:	eb 2e       	mov	r14, r27
    2f98:	b3 e0       	ldi	r27, 0x03	; 3
    2f9a:	fb 2e       	mov	r15, r27
    2f9c:	ff 92       	push	r15
    2f9e:	ef 92       	push	r14
    2fa0:	0d e0       	ldi	r16, 0x0D	; 13
    2fa2:	14 e0       	ldi	r17, 0x04	; 4
    2fa4:	1f 93       	push	r17
    2fa6:	0f 93       	push	r16
    2fa8:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
					s_flt_sign(meanFloatClockDiff), (int) meanFloatClockDiff, s_flt_frac(meanFloatClockDiff, 3),
					s_flt_sign(qrgDev_Hz), (int) qrgDev_Hz, s_flt_frac(qrgDev_Hz, 3),
					s_flt_sign(ppm), (int) ppm, s_flt_frac(ppm, 6));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    2fac:	28 2f       	mov	r18, r24
    2fae:	a8 01       	movw	r20, r16
    2fb0:	60 e0       	ldi	r22, 0x00	; 0
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
}

static float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    2fb8:	69 81       	ldd	r22, Y+1	; 0x01
    2fba:	70 e0       	ldi	r23, 0x00	; 0
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e8       	ldi	r20, 0x80	; 128
    2fca:	5b e3       	ldi	r21, 0x3B	; 59
    2fcc:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    2fd0:	4b 01       	movw	r8, r22
    2fd2:	5c 01       	movw	r10, r24
    2fd4:	6a 81       	ldd	r22, Y+2	; 0x02
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    2fe0:	9b 01       	movw	r18, r22
    2fe2:	ac 01       	movw	r20, r24
    2fe4:	c5 01       	movw	r24, r10
    2fe6:	b4 01       	movw	r22, r8
    2fe8:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    2fec:	4b 01       	movw	r8, r22
					s_flt_sign(qrgDev_Hz), (int) qrgDev_Hz, s_flt_frac(qrgDev_Hz, 3),
					s_flt_sign(ppm), (int) ppm, s_flt_frac(ppm, 6));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

			float l_timer = main_fw_calcTimerToFloat(localFastPwmLoopVal, localFastPwmSubLoopVal);
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA03, sizeof(PM_FORMAT_IA03));
    2fee:	5c 01       	movw	r10, r24
    2ff0:	27 e4       	ldi	r18, 0x47	; 71
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	44 ea       	ldi	r20, 0xA4	; 164
    2ff6:	53 e0       	ldi	r21, 0x03	; 3
    2ff8:	b7 01       	movw	r22, r14
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	0e 94 95 20 	call	0x412a	; 0x412a <memory_fw_copyBuffer>
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3000:	43 e0       	ldi	r20, 0x03	; 3
    3002:	6f 81       	ldd	r22, Y+7	; 0x07
    3004:	78 85       	ldd	r23, Y+8	; 0x08
    3006:	89 85       	ldd	r24, Y+9	; 0x09
    3008:	9a 85       	ldd	r25, Y+10	; 0x0a
    300a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    300e:	38 2e       	mov	r3, r24
    3010:	29 2e       	mov	r2, r25
    3012:	43 e0       	ldi	r20, 0x03	; 3
    3014:	c5 01       	movw	r24, r10
    3016:	b4 01       	movw	r22, r8
    3018:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    301c:	d8 2e       	mov	r13, r24
    301e:	c9 2e       	mov	r12, r25
    3020:	2f 92       	push	r2
    3022:	3f 92       	push	r3
    3024:	6f 81       	ldd	r22, Y+7	; 0x07
    3026:	78 85       	ldd	r23, Y+8	; 0x08
    3028:	89 85       	ldd	r24, Y+9	; 0x09
    302a:	9a 85       	ldd	r25, Y+10	; 0x0a
    302c:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    3030:	7f 93       	push	r23
    3032:	6f 93       	push	r22
    3034:	cf 92       	push	r12
    3036:	df 92       	push	r13
    3038:	c5 01       	movw	r24, r10
    303a:	b4 01       	movw	r22, r8
    303c:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    3040:	7f 93       	push	r23
    3042:	6f 93       	push	r22
    3044:	ff 92       	push	r15
    3046:	ef 92       	push	r14
    3048:	1f 93       	push	r17
    304a:	0f 93       	push	r16
    304c:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
					(int) l_timer, s_flt_frac(l_timer, 3),
					(int) pwmCorSteps, s_flt_frac(pwmCorSteps, 3));
			ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	28 2f       	mov	r18, r24
    305c:	a8 01       	movw	r20, r16
    305e:	60 e0       	ldi	r22, 0x00	; 0
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
	} else {
		/* frequency search and lock loop - out if sync */
		// mainRefClkState = REFCLK_STATE_NOSYNC;  // single spike should not destroy time base - deactivated
	}

	if (--holdOffTime == 255) {
    3066:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <holdOffTime.2937>
    306a:	81 50       	subi	r24, 0x01	; 1
    306c:	18 f0       	brcs	.+6      	; 0x3074 <main_fw_giveAway+0x131e>
    306e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <holdOffTime.2937>
		holdOffTime = 0;
    3072:	02 c0       	rjmp	.+4      	; 0x3078 <main_fw_giveAway+0x1322>
    3074:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <holdOffTime.2937>
		/* frequency & phase correction modules */

		/* AFC = automatic frequency calculation */
		calcQrg(local20MHzClockDiff, localMeanFloatClockDiff, qrgDev_Hz, localPpm);  // corrections are done when  main_bf.mainIsAFC == true

		if (mainRefClkState <= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    3078:	10 91 9d 05 	lds	r17, 0x059D	; 0x80059d <mainRefClkState>
    307c:	14 30       	cpi	r17, 0x04	; 4
			/* phase corrections are done by the AFC unit */
			mainPpm = localPpm;
    307e:	60 f4       	brcc	.+24     	; 0x3098 <main_fw_giveAway+0x1342>
    3080:	8b 85       	ldd	r24, Y+11	; 0x0b
    3082:	9c 85       	ldd	r25, Y+12	; 0x0c
    3084:	ad 85       	ldd	r26, Y+13	; 0x0d
    3086:	be 85       	ldd	r27, Y+14	; 0x0e
    3088:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <mainPpm>
    308c:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <mainPpm+0x1>
    3090:	a0 93 7f 05 	sts	0x057F, r26	; 0x80057f <mainPpm+0x2>
    3094:	b0 93 80 05 	sts	0x0580, r27	; 0x800580 <mainPpm+0x3>
		}

		if (main_bf.mainIsAPC) {
    3098:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    309c:	81 ff       	sbrs	r24, 1
{
	/* APC = automatic phase control */

	static float phaseStepsErrorSum		= 0.0f;

	uint16_t adcPhaseAdc			= acAdcCh[ADC_CH_PHASE];
    309e:	61 c1       	rjmp	.+706    	; 0x3362 <main_fw_giveAway+0x160c>
    30a0:	60 91 89 03 	lds	r22, 0x0389	; 0x800389 <acAdcCh+0x2>
    30a4:	70 91 8a 03 	lds	r23, 0x038A	; 0x80038a <acAdcCh+0x3>
	int16_t  adcPhaseCenteredAdc	= adcPhaseAdc - ADC_PHASE_ADC_CENTER;
	float    adcPhaseCenteredVolt	= ((float) adcPhaseCenteredAdc) / ADC_STEPS_1V;
	float    adcPhaseCentered		= adcPhaseCenteredVolt / ADC_PHASE_DELTAVOLTS_90DEG;
	float    adcPhase				= adcPhaseCentered * 90.0f;
    30a8:	6d 50       	subi	r22, 0x0D	; 13
    30aa:	71 40       	sbci	r23, 0x01	; 1
    30ac:	07 2e       	mov	r0, r23
    30ae:	00 0c       	add	r0, r0
    30b0:	88 0b       	sbc	r24, r24
    30b2:	99 0b       	sbc	r25, r25
    30b4:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	45 e5       	ldi	r20, 0x55	; 85
    30be:	53 e4       	ldi	r21, 0x43	; 67
    30c0:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    30c4:	23 e3       	ldi	r18, 0x33	; 51
    30c6:	33 e3       	ldi	r19, 0x33	; 51
    30c8:	43 eb       	ldi	r20, 0xB3	; 179
    30ca:	5f e3       	ldi	r21, 0x3F	; 63
    30cc:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	44 eb       	ldi	r20, 0xB4	; 180
    30d6:	52 e4       	ldi	r21, 0x42	; 66
    30d8:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    30dc:	4b 01       	movw	r8, r22

	/* Handling of new mainRefClkState value */
	if (mainRefClkState >= REFCLK_STATE_SEARCH_PHASE_CNTR_STABLIZED) {
    30de:	5c 01       	movw	r10, r24
    30e0:	13 30       	cpi	r17, 0x03	; 3
    30e2:	08 f4       	brcc	.+2      	; 0x30e6 <main_fw_giveAway+0x1390>
		if ((-ADC_PHASE_LOCKING_DEG <= adcPhase) && (adcPhase <= ADC_PHASE_LOCKING_DEG)) {
    30e4:	5e c0       	rjmp	.+188    	; 0x31a2 <main_fw_giveAway+0x144c>
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	42 e8       	ldi	r20, 0x82	; 130
    30ec:	52 ec       	ldi	r21, 0xC2	; 194
    30ee:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    30f2:	87 fd       	sbrc	r24, 7
    30f4:	46 c0       	rjmp	.+140    	; 0x3182 <main_fw_giveAway+0x142c>
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	42 e8       	ldi	r20, 0x82	; 130
    30fc:	52 e4       	ldi	r21, 0x42	; 66
    30fe:	c5 01       	movw	r24, r10
    3100:	b4 01       	movw	r22, r8
    3102:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
    3106:	18 16       	cp	r1, r24
			if (mainRefClkState < REFCLK_STATE_LOCKING_PHASE) {
    3108:	e4 f1       	brlt	.+120    	; 0x3182 <main_fw_giveAway+0x142c>
    310a:	17 30       	cpi	r17, 0x07	; 7
				/* up-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
    310c:	c8 f4       	brcc	.+50     	; 0x3140 <main_fw_giveAway+0x13ea>
    310e:	87 e0       	ldi	r24, 0x07	; 7
    3110:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>

				uint8_t sreg = SREG;
				cli();
    3114:	8f b7       	in	r24, 0x3f	; 63
				fastPwmSingleDiffSum = 0.0f;
    3116:	f8 94       	cli
    3118:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <fastPwmSingleDiffSum>
    311c:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <fastPwmSingleDiffSum+0x1>
    3120:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <fastPwmSingleDiffSum+0x2>
    3124:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <fastPwmSingleDiffSum+0x3>
			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
			}

			if ((-ADC_PHASE_INSYNC_DEG <= adcPhase) && (adcPhase <= ADC_PHASE_INSYNC_DEG)) {
    3128:	8f bf       	out	0x3f, r24	; 63
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	4c e0       	ldi	r20, 0x0C	; 12
    3130:	52 ec       	ldi	r21, 0xC2	; 194
    3132:	c5 01       	movw	r24, r10
    3134:	b4 01       	movw	r22, r8
    3136:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    313a:	87 ff       	sbrs	r24, 7
    313c:	10 c0       	rjmp	.+32     	; 0x315e <main_fw_giveAway+0x1408>
				uint8_t sreg = SREG;
				cli();
				fastPwmSingleDiffSum = 0.0f;
				SREG = sreg;

			} else if (mainRefClkState > REFCLK_STATE_LOCKING_PHASE) {
    313e:	31 c0       	rjmp	.+98     	; 0x31a2 <main_fw_giveAway+0x144c>
    3140:	17 30       	cpi	r17, 0x07	; 7
				/* down-grading */
				mainRefClkState = REFCLK_STATE_LOCKING_PHASE;
    3142:	19 f0       	breq	.+6      	; 0x314a <main_fw_giveAway+0x13f4>
    3144:	87 e0       	ldi	r24, 0x07	; 7
    3146:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>
			}

			if ((-ADC_PHASE_INSYNC_DEG <= adcPhase) && (adcPhase <= ADC_PHASE_INSYNC_DEG)) {
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	4c e0       	ldi	r20, 0x0C	; 12
    3150:	52 ec       	ldi	r21, 0xC2	; 194
    3152:	c5 01       	movw	r24, r10
    3154:	b4 01       	movw	r22, r8
    3156:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    315a:	87 fd       	sbrc	r24, 7
    315c:	26 c0       	rjmp	.+76     	; 0x31aa <main_fw_giveAway+0x1454>
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	4c e0       	ldi	r20, 0x0C	; 12
    3164:	52 e4       	ldi	r21, 0x42	; 66
    3166:	c5 01       	movw	r24, r10
    3168:	b4 01       	movw	r22, r8
    316a:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
    316e:	18 16       	cp	r1, r24
				if (mainRefClkState < REFCLK_STATE_IN_SYNC) {
    3170:	c4 f0       	brlt	.+48     	; 0x31a2 <main_fw_giveAway+0x144c>
    3172:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    3176:	8f 30       	cpi	r24, 0x0F	; 15
					mainRefClkState = REFCLK_STATE_IN_SYNC;
    3178:	a0 f4       	brcc	.+40     	; 0x31a2 <main_fw_giveAway+0x144c>
    317a:	8f e0       	ldi	r24, 0x0F	; 15
    317c:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>
				}
			}

		} else {
			/* lost phase: hand-over to AFC */
			if (mainRefClkState >= REFCLK_STATE_LOCKING_PHASE) {
    3180:	10 c0       	rjmp	.+32     	; 0x31a2 <main_fw_giveAway+0x144c>
    3182:	17 30       	cpi	r17, 0x07	; 7
				mainRefClkState = REFCLK_STATE_SEARCH_QRG;
    3184:	70 f0       	brcs	.+28     	; 0x31a2 <main_fw_giveAway+0x144c>
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <mainRefClkState>

				uint8_t sreg = SREG;
				cli();
    318c:	8f b7       	in	r24, 0x3f	; 63
				fastPwmSingleDiffSum = 0.0f;
    318e:	f8 94       	cli
    3190:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <fastPwmSingleDiffSum>
    3194:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <fastPwmSingleDiffSum+0x1>
    3198:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <fastPwmSingleDiffSum+0x2>
    319c:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <fastPwmSingleDiffSum+0x3>
	}

	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
    31a0:	8f bf       	out	0x3f, r24	; 63
    31a2:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    31a6:	87 30       	cpi	r24, 0x07	; 7
		/* phase correction */
		phaseStepsPhase = (float) ((pow(fabs(adcPhase), 1.15f)) * 150.f);		// magic values  XXX PHASE: trimming is done here
    31a8:	f8 f0       	brcs	.+62     	; 0x31e8 <main_fw_giveAway+0x1492>
    31aa:	23 e3       	ldi	r18, 0x33	; 51
    31ac:	33 e3       	ldi	r19, 0x33	; 51
    31ae:	43 e9       	ldi	r20, 0x93	; 147
    31b0:	5f e3       	ldi	r21, 0x3F	; 63
    31b2:	c5 01       	movw	r24, r10
    31b4:	b4 01       	movw	r22, r8
    31b6:	9f 77       	andi	r25, 0x7F	; 127
    31b8:	0e 94 ba 32 	call	0x6574	; 0x6574 <pow>
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	46 e1       	ldi	r20, 0x16	; 22
    31c2:	53 e4       	ldi	r21, 0x43	; 67
    31c4:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    31c8:	6b 01       	movw	r12, r22
		if (adcPhase < 0.0f) {
    31ca:	7c 01       	movw	r14, r24
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	a9 01       	movw	r20, r18
    31d2:	c5 01       	movw	r24, r10
    31d4:	b4 01       	movw	r22, r8
    31d6:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
    31da:	87 ff       	sbrs	r24, 7
			phaseStepsPhase = -phaseStepsPhase;
    31dc:	ad c5       	rjmp	.+2906   	; 0x3d38 <main_fw_giveAway+0x1fe2>
    31de:	f7 fa       	bst	r15, 7
    31e0:	f0 94       	com	r15
    31e2:	f7 f8       	bld	r15, 7
    31e4:	f0 94       	com	r15
			}
		}
	}

	float phaseStepsFrequency	= 0.0f;
	float phaseStepsPhase		= 0.0f;
    31e6:	a8 c5       	rjmp	.+2896   	; 0x3d38 <main_fw_giveAway+0x1fe2>
    31e8:	c1 2c       	mov	r12, r1
    31ea:	d1 2c       	mov	r13, r1
				SREG = sreg;
			}
		}
	}

	float phaseStepsFrequency	= 0.0f;
    31ec:	76 01       	movw	r14, r12
    31ee:	26 01       	movw	r4, r12

		/* Execute frequency correction */
		(void) pwmTimerCorrection(phaseStepsFrequency, false);
	}

	if (main_bf.mainIsTimerTest) {
    31f0:	37 01       	movw	r6, r14
    31f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		/* monitoring */
		int len;
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA11, sizeof(PM_FORMAT_IA11));
    31f6:	82 ff       	sbrs	r24, 2
    31f8:	b4 c0       	rjmp	.+360    	; 0x3362 <main_fw_giveAway+0x160c>
    31fa:	2b e6       	ldi	r18, 0x6B	; 107
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	49 e3       	ldi	r20, 0x39	; 57
    3200:	53 e0       	ldi	r21, 0x03	; 3
    3202:	6d e8       	ldi	r22, 0x8D	; 141
    3204:	73 e0       	ldi	r23, 0x03	; 3
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	90 d7       	rcall	.+3872   	; 0x412a <memory_fw_copyBuffer>
    320a:	43 e0       	ldi	r20, 0x03	; 3
    320c:	c7 01       	movw	r24, r14
    320e:	b6 01       	movw	r22, r12
    3210:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    3214:	38 2e       	mov	r3, r24
    3216:	29 2e       	mov	r2, r25
    3218:	c7 01       	movw	r24, r14
    321a:	b6 01       	movw	r22, r12
    321c:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    3220:	16 2f       	mov	r17, r22
    3222:	07 2f       	mov	r16, r23
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	a9 01       	movw	r20, r18
    322a:	c7 01       	movw	r24, r14
    322c:	b6 01       	movw	r22, r12
    322e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    3232:	87 ff       	sbrs	r24, 7
    3234:	02 c0       	rjmp	.+4      	; 0x323a <main_fw_giveAway+0x14e4>
    3236:	8d e2       	ldi	r24, 0x2D	; 45

	if (main_bf.mainIsTimerTest) {
		/* monitoring */
		int len;
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA11, sizeof(PM_FORMAT_IA11));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3238:	01 c0       	rjmp	.+2      	; 0x323c <main_fw_giveAway+0x14e6>
    323a:	8b e2       	ldi	r24, 0x2B	; 43
    323c:	e8 2e       	mov	r14, r24
    323e:	f1 2c       	mov	r15, r1
    3240:	43 e0       	ldi	r20, 0x03	; 3
    3242:	c3 01       	movw	r24, r6
    3244:	b2 01       	movw	r22, r4
    3246:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    324a:	d8 2e       	mov	r13, r24
    324c:	c9 2e       	mov	r12, r25
    324e:	c3 01       	movw	r24, r6
    3250:	b2 01       	movw	r22, r4
    3252:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    3256:	6b 83       	std	Y+3, r22	; 0x03
    3258:	7b 87       	std	Y+11, r23	; 0x0b
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	a9 01       	movw	r20, r18
    3260:	c3 01       	movw	r24, r6
    3262:	b2 01       	movw	r22, r4
    3264:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    3268:	87 ff       	sbrs	r24, 7
    326a:	03 c0       	rjmp	.+6      	; 0x3272 <main_fw_giveAway+0x151c>
    326c:	ad e2       	ldi	r26, 0x2D	; 45
    326e:	7a 2e       	mov	r7, r26
    3270:	02 c0       	rjmp	.+4      	; 0x3276 <main_fw_giveAway+0x1520>

	if (main_bf.mainIsTimerTest) {
		/* monitoring */
		int len;
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA11, sizeof(PM_FORMAT_IA11));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3272:	fb e2       	ldi	r31, 0x2B	; 43
    3274:	7f 2e       	mov	r7, r31
    3276:	43 e0       	ldi	r20, 0x03	; 3
    3278:	c5 01       	movw	r24, r10
    327a:	b4 01       	movw	r22, r8
    327c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    3280:	2f 92       	push	r2
    3282:	3f 92       	push	r3
    3284:	0f 93       	push	r16
    3286:	1f 93       	push	r17
    3288:	ff 92       	push	r15
    328a:	ef 92       	push	r14
    328c:	cf 92       	push	r12
    328e:	df 92       	push	r13
    3290:	ab 85       	ldd	r26, Y+11	; 0x0b
    3292:	af 93       	push	r26
    3294:	bb 81       	ldd	r27, Y+3	; 0x03
    3296:	bf 93       	push	r27
    3298:	1f 92       	push	r1
    329a:	7f 92       	push	r7
    329c:	9f 93       	push	r25
    329e:	8f 93       	push	r24
    32a0:	c5 01       	movw	r24, r10
    32a2:	b4 01       	movw	r22, r8
    32a4:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    32a8:	7f 93       	push	r23
    32aa:	6f 93       	push	r22
    32ac:	8d e8       	ldi	r24, 0x8D	; 141
    32ae:	93 e0       	ldi	r25, 0x03	; 3
    32b0:	9f 93       	push	r25
    32b2:	8f 93       	push	r24
    32b4:	8d e0       	ldi	r24, 0x0D	; 13
    32b6:	94 e0       	ldi	r25, 0x04	; 4
    32b8:	9f 93       	push	r25
    32ba:	8f 93       	push	r24
				(int) adcPhase, s_flt_frac(adcPhase, 3),
				s_flt_sign(phaseStepsFrequency), (int) phaseStepsFrequency, s_flt_frac(phaseStepsFrequency, 3),
				s_flt_sign(phaseStepsPhase), (int) phaseStepsPhase, s_flt_frac(phaseStepsPhase, 3));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    32bc:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
    32c0:	28 2f       	mov	r18, r24
    32c2:	4d e0       	ldi	r20, 0x0D	; 13
    32c4:	54 e0       	ldi	r21, 0x04	; 4
    32c6:	60 e0       	ldi	r22, 0x00	; 0

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA12, sizeof(PM_FORMAT_IA12));
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    32ce:	24 e3       	ldi	r18, 0x34	; 52
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	45 e0       	ldi	r20, 0x05	; 5
    32d4:	53 e0       	ldi	r21, 0x03	; 3
    32d6:	6d e8       	ldi	r22, 0x8D	; 141
    32d8:	73 e0       	ldi	r23, 0x03	; 3
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	26 d7       	rcall	.+3660   	; 0x412a <memory_fw_copyBuffer>
    32de:	c0 90 2a 05 	lds	r12, 0x052A	; 0x80052a <fastPwmSingleDiffSum>
    32e2:	d0 90 2b 05 	lds	r13, 0x052B	; 0x80052b <fastPwmSingleDiffSum+0x1>
    32e6:	e0 90 2c 05 	lds	r14, 0x052C	; 0x80052c <fastPwmSingleDiffSum+0x2>
    32ea:	f0 90 2d 05 	lds	r15, 0x052D	; 0x80052d <fastPwmSingleDiffSum+0x3>
    32ee:	43 e0       	ldi	r20, 0x03	; 3
    32f0:	c7 01       	movw	r24, r14
    32f2:	b6 01       	movw	r22, r12
    32f4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    32f8:	b8 2e       	mov	r11, r24
    32fa:	a9 2e       	mov	r10, r25
    32fc:	c7 01       	movw	r24, r14
    32fe:	b6 01       	movw	r22, r12
    3300:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
}
#endif

static char s_flt_sign(float val)
{
	return val >= 0.0f ?  '+' : '-';
    3304:	16 2f       	mov	r17, r22
    3306:	07 2f       	mov	r16, r23
    3308:	0f b6       	in	r0, 0x3f	; 63
    330a:	f8 94       	cli
    330c:	de bf       	out	0x3e, r29	; 62
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	cd bf       	out	0x3d, r28	; 61
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	a9 01       	movw	r20, r18
    3318:	c7 01       	movw	r24, r14
    331a:	b6 01       	movw	r22, r12
    331c:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    3320:	87 ff       	sbrs	r24, 7
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <main_fw_giveAway+0x15d2>
    3324:	8d e2       	ldi	r24, 0x2D	; 45
				s_flt_sign(phaseStepsFrequency), (int) phaseStepsFrequency, s_flt_frac(phaseStepsFrequency, 3),
				s_flt_sign(phaseStepsPhase), (int) phaseStepsPhase, s_flt_frac(phaseStepsPhase, 3));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_IA12, sizeof(PM_FORMAT_IA12));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3326:	01 c0       	rjmp	.+2      	; 0x332a <main_fw_giveAway+0x15d4>
    3328:	8b e2       	ldi	r24, 0x2B	; 43
    332a:	af 92       	push	r10
    332c:	bf 92       	push	r11
    332e:	0f 93       	push	r16
    3330:	1f 93       	push	r17
    3332:	1f 92       	push	r1
    3334:	8f 93       	push	r24
    3336:	8d e8       	ldi	r24, 0x8D	; 141
    3338:	93 e0       	ldi	r25, 0x03	; 3
    333a:	9f 93       	push	r25
    333c:	8f 93       	push	r24
    333e:	8d e0       	ldi	r24, 0x0D	; 13
    3340:	94 e0       	ldi	r25, 0x04	; 4
    3342:	9f 93       	push	r25
    3344:	8f 93       	push	r24
				s_flt_sign(fastPwmSingleDiffSum), (int) fastPwmSingleDiffSum, s_flt_frac(fastPwmSingleDiffSum, 3));
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3346:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
    334a:	28 2f       	mov	r18, r24
    334c:	4d e0       	ldi	r20, 0x0D	; 13
    334e:	54 e0       	ldi	r21, 0x04	; 4
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	f8 94       	cli
    335c:	de bf       	out	0x3e, r29	; 62
			/* APC = automatic phase control */
			calcPhase();
		}
	}

	if (main_bf.mainStackCheck) {
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	cd bf       	out	0x3d, r28	; 61
    3362:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3366:	86 ff       	sbrs	r24, 6
    3368:	67 c0       	rjmp	.+206    	; 0x3438 <main_fw_giveAway+0x16e2>
    336a:	ea ed       	ldi	r30, 0xDA	; 218
    336c:	f5 e0       	ldi	r31, 0x05	; 5
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
			if (stackCheckMungWall[idx] != 0x5a) {
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	21 91       	ld	r18, Z+
				uint16_t localCheckAddr = (uint16_t) (&(stackCheckMungWall[idx]));
    3374:	2a 35       	cpi	r18, 0x5A	; 90
    3376:	71 f0       	breq	.+28     	; 0x3394 <main_fw_giveAway+0x163e>
				if (mainSCMungwallAddr > localCheckAddr) {
    3378:	86 52       	subi	r24, 0x26	; 38
    337a:	9a 4f       	sbci	r25, 0xFA	; 250
    337c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <mainSCMungwallAddr>
    3380:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <mainSCMungwallAddr+0x1>
    3384:	82 17       	cp	r24, r18
					mainSCMungwallAddr = localCheckAddr;
    3386:	93 07       	cpc	r25, r19
    3388:	50 f4       	brcc	.+20     	; 0x339e <main_fw_giveAway+0x1648>
    338a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <mainSCMungwallAddr+0x1>
    338e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mainSCMungwallAddr>
	}

	if (main_bf.mainStackCheck) {
		/* do a Stack Check when active */

		for (int idx = 0; idx < MAIN_STACK_CHECK_SIZE; ++idx) {
    3392:	05 c0       	rjmp	.+10     	; 0x339e <main_fw_giveAway+0x1648>
    3394:	01 96       	adiw	r24, 0x01	; 1
    3396:	80 32       	cpi	r24, 0x20	; 32
				/* leave loop body */
				break;
			}
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC01, sizeof(PM_FORMAT_SC01));
    3398:	a2 e0       	ldi	r26, 0x02	; 2
    339a:	9a 07       	cpc	r25, r26
    339c:	51 f7       	brne	.-44     	; 0x3372 <main_fw_giveAway+0x161c>
    339e:	25 e4       	ldi	r18, 0x45	; 69
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	44 e1       	ldi	r20, 0x14	; 20
    33a4:	52 e0       	ldi	r21, 0x02	; 2
    33a6:	6d e8       	ldi	r22, 0x8D	; 141
    33a8:	73 e0       	ldi	r23, 0x03	; 3
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	be d6       	rcall	.+3452   	; 0x412a <memory_fw_copyBuffer>
    33ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mainSCStackAddr+0x1>
    33b2:	8f 93       	push	r24
    33b4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mainSCStackAddr>
    33b8:	8f 93       	push	r24
    33ba:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <mainSCMungwallAddr+0x1>
    33be:	8f 93       	push	r24
    33c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mainSCMungwallAddr>
    33c4:	8f 93       	push	r24
    33c6:	ed e8       	ldi	r30, 0x8D	; 141
    33c8:	ee 2e       	mov	r14, r30
    33ca:	e3 e0       	ldi	r30, 0x03	; 3
    33cc:	fe 2e       	mov	r15, r30
    33ce:	ff 92       	push	r15
    33d0:	ef 92       	push	r14
    33d2:	0d e0       	ldi	r16, 0x0D	; 13
    33d4:	14 e0       	ldi	r17, 0x04	; 4
    33d6:	1f 93       	push	r17
    33d8:	0f 93       	push	r16
				mainSCMungwallAddr,
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    33da:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
    33de:	28 2f       	mov	r18, r24
    33e0:	a8 01       	movw	r20, r16
    33e2:	60 e0       	ldi	r22, 0x00	; 0

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    33ea:	2d e1       	ldi	r18, 0x1D	; 29
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	47 ef       	ldi	r20, 0xF7	; 247
    33f0:	51 e0       	ldi	r21, 0x01	; 1
    33f2:	b7 01       	movw	r22, r14
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
				twiState.isProcessing);
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	99 d6       	rcall	.+3378   	; 0x412a <memory_fw_copyBuffer>
    33f8:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
				twiState.doStart,
    33fc:	96 95       	lsr	r25
    33fe:	91 70       	andi	r25, 0x01	; 1
    3400:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
				twiState.state,
    3404:	81 70       	andi	r24, 0x01	; 1
				mainSCMungwallAddr,
				mainSCStackAddr);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_SC02, sizeof(PM_FORMAT_SC02));
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3406:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <twiState>
    340a:	1f 92       	push	r1
    340c:	9f 93       	push	r25
    340e:	1f 92       	push	r1
    3410:	8f 93       	push	r24
    3412:	1f 92       	push	r1
    3414:	2f 93       	push	r18
    3416:	ff 92       	push	r15
    3418:	ef 92       	push	r14
    341a:	1f 93       	push	r17
    341c:	0f 93       	push	r16
				twiState.state,
				twiState.doStart,
				twiState.isProcessing);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    341e:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
    3422:	28 2f       	mov	r18, r24
    3424:	a8 01       	movw	r20, r16
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	0e 94 39 23 	call	0x4672	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	de bf       	out	0x3e, r29	; 62
}

static void twi_mcp23017_av1624_fw_showStatus(void)
{
	/* Init device when later attached */
	if (!main_bf.mainIsLcdAttached) {
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	cd bf       	out	0x3d, r28	; 61
    3438:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			return;
		}
	}

	/* I2C LCD-Module via MCP23017 16 bit port expander */  // XXX I2C LCD-Module displayed fields are here
	uint8_t sreg = SREG;
    343c:	87 ff       	sbrs	r24, 7
	cli();
    343e:	37 c0       	rjmp	.+110    	; 0x34ae <main_fw_giveAway+0x1758>
	uint32_t localFastCtr1ms = fastCtr1ms;
    3440:	2f b7       	in	r18, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <fastCtr1ms>
    3448:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <fastCtr1ms+0x1>
    344c:	a0 91 37 05 	lds	r26, 0x0537	; 0x800537 <fastCtr1ms+0x2>
	SREG = sreg;
    3450:	b0 91 38 05 	lds	r27, 0x0538	; 0x800538 <fastCtr1ms+0x3>

	if (localFastCtr1ms <= 5000) {
    3454:	2f bf       	out	0x3f, r18	; 63
    3456:	89 38       	cpi	r24, 0x89	; 137
    3458:	93 41       	sbci	r25, 0x13	; 19
		/* welcome message */
		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC01, sizeof(PM_FORMAT_LC01));
    345a:	a1 05       	cpc	r26, r1
    345c:	b1 05       	cpc	r27, r1
    345e:	80 f5       	brcc	.+96     	; 0x34c0 <main_fw_giveAway+0x176a>
    3460:	21 e1       	ldi	r18, 0x11	; 17
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	44 ef       	ldi	r20, 0xF4	; 244
    3466:	52 e0       	ldi	r21, 0x02	; 2
    3468:	6d e8       	ldi	r22, 0x8D	; 141
    346a:	73 e0       	ldi	r23, 0x03	; 3
		twi_mcp23017_av1624_fw_gotoPosition(0, 0);
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	5d d6       	rcall	.+3258   	; 0x412a <memory_fw_copyBuffer>
    3470:	60 e0       	ldi	r22, 0x00	; 0
    3472:	80 e0       	ldi	r24, 0x00	; 0
		twi_mcp23017_av1624_fw_writeString(mainFormatBuffer, 16);
    3474:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <twi_mcp23017_av1624_fw_gotoPosition>
    3478:	60 e1       	ldi	r22, 0x10	; 16
    347a:	8d e8       	ldi	r24, 0x8D	; 141
		usbPoll();
    347c:	93 e0       	ldi	r25, 0x03	; 3
    347e:	0e 94 1a 28 	call	0x5034	; 0x5034 <twi_mcp23017_av1624_fw_writeString>

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC02, sizeof(PM_FORMAT_LC02));
    3482:	0e 94 35 2a 	call	0x546a	; 0x546a <usbPoll>
    3486:	21 e1       	ldi	r18, 0x11	; 17
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	43 ee       	ldi	r20, 0xE3	; 227
    348c:	52 e0       	ldi	r21, 0x02	; 2
    348e:	6d e8       	ldi	r22, 0x8D	; 141
    3490:	73 e0       	ldi	r23, 0x03	; 3
		twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	4a d6       	rcall	.+3220   	; 0x412a <memory_fw_copyBuffer>
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	81 e0       	ldi	r24, 0x01	; 1
		twi_mcp23017_av1624_fw_writeString(mainFormatBuffer, 16);
    349a:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <twi_mcp23017_av1624_fw_gotoPosition>
    349e:	60 e1       	ldi	r22, 0x10	; 16
    34a0:	8d e8       	ldi	r24, 0x8D	; 141
    34a2:	93 e0       	ldi	r25, 0x03	; 3
		usbPoll();
    34a4:	0e 94 1a 28 	call	0x5034	; 0x5034 <twi_mcp23017_av1624_fw_writeString>
    34a8:	0e 94 35 2a 	call	0x546a	; 0x546a <usbPoll>

static void twi_mcp23017_av1624_fw_showStatus(void)
{
	/* Init device when later attached */
	if (!main_bf.mainIsLcdAttached) {
		twi_mcp23017_fw_init();
    34ac:	b1 c1       	rjmp	.+866    	; 0x3810 <main_fw_giveAway+0x1aba>
		twi_mcp23017_av1624_fw_init();
    34ae:	0e 94 18 27 	call	0x4e30	; 0x4e30 <twi_mcp23017_fw_init>
		if (!main_bf.mainIsLcdAttached) {
    34b2:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <twi_mcp23017_av1624_fw_init>
    34b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    34ba:	87 fd       	sbrc	r24, 7
		static uint8_t displaySubNr	= 0;
		int len = 0;

		/* the status-line */
		float l_ppb = mainPpm * 1000.0f;
		if (mainRefClkState > REFCLK_STATE_NOSYNC) {
    34bc:	c1 cf       	rjmp	.-126    	; 0x3440 <main_fw_giveAway+0x16ea>
    34be:	a8 c1       	rjmp	.+848    	; 0x3810 <main_fw_giveAway+0x1aba>
    34c0:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    34c4:	88 23       	and	r24, r24
		static uint8_t displayNr	= 0;
		static uint8_t displaySubNr	= 0;
		int len = 0;

		/* the status-line */
		float l_ppb = mainPpm * 1000.0f;
    34c6:	09 f4       	brne	.+2      	; 0x34ca <main_fw_giveAway+0x1774>
    34c8:	43 c0       	rjmp	.+134    	; 0x3550 <main_fw_giveAway+0x17fa>
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	4a e7       	ldi	r20, 0x7A	; 122
    34d0:	54 e4       	ldi	r21, 0x44	; 68
    34d2:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <mainPpm>
    34d6:	70 91 7e 05 	lds	r23, 0x057E	; 0x80057e <mainPpm+0x1>
    34da:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <mainPpm+0x2>
    34de:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <mainPpm+0x3>
    34e2:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
		if (mainRefClkState > REFCLK_STATE_NOSYNC) {
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC11, sizeof(PM_FORMAT_LC11));
    34e6:	6b 01       	movw	r12, r22
    34e8:	7c 01       	movw	r14, r24
    34ea:	2b e1       	ldi	r18, 0x1B	; 27
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	48 ec       	ldi	r20, 0xC8	; 200
    34f0:	52 e0       	ldi	r21, 0x02	; 2
    34f2:	6d e8       	ldi	r22, 0x8D	; 141
    34f4:	73 e0       	ldi	r23, 0x03	; 3
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	18 d6       	rcall	.+3120   	; 0x412a <memory_fw_copyBuffer>
    34fa:	10 91 67 05 	lds	r17, 0x0567	; 0x800567 <main_nmeaSatsUsed>
    34fe:	00 91 68 05 	lds	r16, 0x0568	; 0x800568 <main_nmeaSatsUsed+0x1>
    3502:	43 e0       	ldi	r20, 0x03	; 3
    3504:	c7 01       	movw	r24, r14
    3506:	b6 01       	movw	r22, r12
    3508:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    350c:	0f 93       	push	r16
    350e:	1f 93       	push	r17
    3510:	1f 92       	push	r1
    3512:	23 ef       	ldi	r18, 0xF3	; 243
    3514:	2f 93       	push	r18
    3516:	20 91 9d 05 	lds	r18, 0x059D	; 0x80059d <mainRefClkState>
    351a:	1f 92       	push	r1
    351c:	2f 93       	push	r18
    351e:	1f 92       	push	r1
    3520:	20 ee       	ldi	r18, 0xE0	; 224
    3522:	2f 93       	push	r18
    3524:	9f 93       	push	r25
    3526:	8f 93       	push	r24
    3528:	c7 01       	movw	r24, r14
    352a:	b6 01       	movw	r22, r12
    352c:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    3530:	7f 93       	push	r23
    3532:	6f 93       	push	r22
    3534:	1f 92       	push	r1
    3536:	82 e6       	ldi	r24, 0x62	; 98
    3538:	8f 93       	push	r24
    353a:	8d e8       	ldi	r24, 0x8D	; 141
    353c:	93 e0       	ldi	r25, 0x03	; 3
    353e:	9f 93       	push	r25
    3540:	8f 93       	push	r24
    3542:	8d e0       	ldi	r24, 0x0D	; 13
    3544:	94 e0       	ldi	r25, 0x04	; 4
    3546:	9f 93       	push	r25
    3548:	8f 93       	push	r24
			mainRefClkState,
			0xf3,
			main_nmeaSatsUsed);

			} else {
			memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC12, sizeof(PM_FORMAT_LC12));
    354a:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
    354e:	22 c0       	rjmp	.+68     	; 0x3594 <main_fw_giveAway+0x183e>
    3550:	28 e1       	ldi	r18, 0x18	; 24
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 eb       	ldi	r20, 0xB0	; 176
    3556:	52 e0       	ldi	r21, 0x02	; 2
    3558:	6d e8       	ldi	r22, 0x8D	; 141
    355a:	73 e0       	ldi	r23, 0x03	; 3
			len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	e5 d5       	rcall	.+3018   	; 0x412a <memory_fw_copyBuffer>
    3560:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <main_nmeaSatsUsed+0x1>
    3564:	8f 93       	push	r24
    3566:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <main_nmeaSatsUsed>
    356a:	8f 93       	push	r24
    356c:	1f 92       	push	r1
    356e:	83 ef       	ldi	r24, 0xF3	; 243
    3570:	8f 93       	push	r24
    3572:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <mainRefClkState>
    3576:	1f 92       	push	r1
    3578:	8f 93       	push	r24
    357a:	1f 92       	push	r1
    357c:	80 ee       	ldi	r24, 0xE0	; 224
    357e:	8f 93       	push	r24
    3580:	8d e8       	ldi	r24, 0x8D	; 141
    3582:	93 e0       	ldi	r25, 0x03	; 3
    3584:	9f 93       	push	r25
    3586:	8f 93       	push	r24
    3588:	8d e0       	ldi	r24, 0x0D	; 13
    358a:	94 e0       	ldi	r25, 0x04	; 4
    358c:	9f 93       	push	r25
    358e:	8f 93       	push	r24
    3590:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
    3594:	18 2f       	mov	r17, r24
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
			0xe0,
			mainRefClkState,
			0xf3,
			main_nmeaSatsUsed);
		}
		twi_mcp23017_av1624_fw_gotoPosition(0, 0);
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	80 e0       	ldi	r24, 0x00	; 0
		twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    35a4:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <twi_mcp23017_av1624_fw_gotoPosition>
    35a8:	61 2f       	mov	r22, r17
    35aa:	8d e0       	ldi	r24, 0x0D	; 13
    35ac:	94 e0       	ldi	r25, 0x04	; 4
		usbPoll();
    35ae:	0e 94 1a 28 	call	0x5034	; 0x5034 <twi_mcp23017_av1624_fw_writeString>

		switch (displayNr) {
    35b2:	0e 94 35 2a 	call	0x546a	; 0x546a <usbPoll>
    35b6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <displayNr.2995>
    35ba:	81 30       	cpi	r24, 0x01	; 1
    35bc:	09 f4       	brne	.+2      	; 0x35c0 <main_fw_giveAway+0x186a>
    35be:	59 c0       	rjmp	.+178    	; 0x3672 <main_fw_giveAway+0x191c>
    35c0:	82 30       	cpi	r24, 0x02	; 2
			default:
			case 0:
			{
				/* the timestamp */
				uint16_t year	=  main_nmeaDate					% 10000;
    35c2:	09 f4       	brne	.+2      	; 0x35c6 <main_fw_giveAway+0x1870>
    35c4:	a2 c0       	rjmp	.+324    	; 0x370a <main_fw_giveAway+0x19b4>
    35c6:	80 90 57 05 	lds	r8, 0x0557	; 0x800557 <main_nmeaDate>
    35ca:	90 90 58 05 	lds	r9, 0x0558	; 0x800558 <main_nmeaDate+0x1>
    35ce:	a0 90 59 05 	lds	r10, 0x0559	; 0x800559 <main_nmeaDate+0x2>
				uint8_t month	= (main_nmeaDate		/ 10000)	% 100;
				uint8_t day		=  main_nmeaDate		/ 1000000;
				uint8_t hour	=  main_nmeaTimeUtcInt	/ 10000;
    35d2:	b0 90 5a 05 	lds	r11, 0x055A	; 0x80055a <main_nmeaDate+0x3>
    35d6:	40 90 53 05 	lds	r4, 0x0553	; 0x800553 <main_nmeaTimeUtcInt>
    35da:	50 90 54 05 	lds	r5, 0x0554	; 0x800554 <main_nmeaTimeUtcInt+0x1>
				uint8_t minutes	= (main_nmeaTimeUtcInt	/ 100)		% 100;
				uint8_t seconds	=  main_nmeaTimeUtcInt				% 100;
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC21, sizeof(PM_FORMAT_LC21));
    35de:	60 90 55 05 	lds	r6, 0x0555	; 0x800555 <main_nmeaTimeUtcInt+0x2>
    35e2:	70 90 56 05 	lds	r7, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x3>
    35e6:	2c e1       	ldi	r18, 0x1C	; 28
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	44 e9       	ldi	r20, 0x94	; 148
    35ec:	52 e0       	ldi	r21, 0x02	; 2
    35ee:	6d e8       	ldi	r22, 0x8D	; 141
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    35f0:	73 e0       	ldi	r23, 0x03	; 3
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	9a d5       	rcall	.+2868   	; 0x412a <memory_fw_copyBuffer>
    35f6:	74 e6       	ldi	r23, 0x64	; 100
    35f8:	c7 2e       	mov	r12, r23
    35fa:	d1 2c       	mov	r13, r1
    35fc:	e1 2c       	mov	r14, r1
    35fe:	f1 2c       	mov	r15, r1
    3600:	c3 01       	movw	r24, r6
    3602:	b2 01       	movw	r22, r4
    3604:	a7 01       	movw	r20, r14
    3606:	96 01       	movw	r18, r12
    3608:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    360c:	1f 92       	push	r1
    360e:	6f 93       	push	r22
    3610:	ca 01       	movw	r24, r20
    3612:	b9 01       	movw	r22, r18
    3614:	a7 01       	movw	r20, r14
    3616:	96 01       	movw	r18, r12
    3618:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    361c:	1f 92       	push	r1
    361e:	6f 93       	push	r22
    3620:	c3 01       	movw	r24, r6
    3622:	b2 01       	movw	r22, r4
    3624:	20 e1       	ldi	r18, 0x10	; 16
    3626:	37 e2       	ldi	r19, 0x27	; 39
    3628:	40 e0       	ldi	r20, 0x00	; 0
    362a:	50 e0       	ldi	r21, 0x00	; 0
    362c:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    3630:	1f 92       	push	r1
    3632:	2f 93       	push	r18
    3634:	c5 01       	movw	r24, r10
    3636:	b4 01       	movw	r22, r8
    3638:	20 e4       	ldi	r18, 0x40	; 64
    363a:	32 e4       	ldi	r19, 0x42	; 66
    363c:	4f e0       	ldi	r20, 0x0F	; 15
    363e:	50 e0       	ldi	r21, 0x00	; 0
    3640:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    3644:	1f 92       	push	r1
    3646:	2f 93       	push	r18
    3648:	c5 01       	movw	r24, r10
    364a:	b4 01       	movw	r22, r8
    364c:	20 e1       	ldi	r18, 0x10	; 16
    364e:	37 e2       	ldi	r19, 0x27	; 39
    3650:	40 e0       	ldi	r20, 0x00	; 0
    3652:	50 e0       	ldi	r21, 0x00	; 0
    3654:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    3658:	16 2f       	mov	r17, r22
    365a:	07 2f       	mov	r16, r23
    365c:	ca 01       	movw	r24, r20
    365e:	b9 01       	movw	r22, r18
    3660:	a7 01       	movw	r20, r14
    3662:	96 01       	movw	r18, r12
    3664:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    3668:	1f 92       	push	r1
			break;

			case 1:
			{
				/* SAT data */
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC22, sizeof(PM_FORMAT_LC22));
    366a:	6f 93       	push	r22
    366c:	0f 93       	push	r16
    366e:	1f 93       	push	r17
    3670:	a2 c0       	rjmp	.+324    	; 0x37b6 <main_fw_giveAway+0x1a60>
    3672:	22 e2       	ldi	r18, 0x22	; 34
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	42 e7       	ldi	r20, 0x72	; 114
    3678:	52 e0       	ldi	r21, 0x02	; 2
    367a:	6d e8       	ldi	r22, 0x8D	; 141
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    367c:	73 e0       	ldi	r23, 0x03	; 3
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	54 d5       	rcall	.+2728   	; 0x412a <memory_fw_copyBuffer>
    3682:	b0 90 69 05 	lds	r11, 0x0569	; 0x800569 <main_nmeaSatsEphemerisGlonass>
    3686:	a0 90 6a 05 	lds	r10, 0x056A	; 0x80056a <main_nmeaSatsEphemerisGlonass+0x1>
    368a:	10 91 6b 05 	lds	r17, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGpsGalileoQzss>
    368e:	00 91 6c 05 	lds	r16, 0x056C	; 0x80056c <main_nmeaSatsEphemerisGpsGalileoQzss+0x1>
    3692:	c0 90 63 05 	lds	r12, 0x0563	; 0x800563 <main_nmeaPdop>
    3696:	d0 90 64 05 	lds	r13, 0x0564	; 0x800564 <main_nmeaPdop+0x1>
    369a:	e0 90 65 05 	lds	r14, 0x0565	; 0x800565 <main_nmeaPdop+0x2>
    369e:	f0 90 66 05 	lds	r15, 0x0566	; 0x800566 <main_nmeaPdop+0x3>
    36a2:	41 e0       	ldi	r20, 0x01	; 1
    36a4:	c7 01       	movw	r24, r14
    36a6:	b6 01       	movw	r22, r12
    36a8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    36ac:	af 92       	push	r10
    36ae:	bf 92       	push	r11
    36b0:	1f 92       	push	r1
    36b2:	2b ee       	ldi	r18, 0xEB	; 235
    36b4:	2f 93       	push	r18
    36b6:	0f 93       	push	r16
    36b8:	1f 93       	push	r17
    36ba:	1f 92       	push	r1
    36bc:	2f ed       	ldi	r18, 0xDF	; 223
    36be:	2f 93       	push	r18
    36c0:	9f 93       	push	r25
    36c2:	8f 93       	push	r24
    36c4:	c7 01       	movw	r24, r14
    36c6:	b6 01       	movw	r22, r12
    36c8:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    36cc:	7f 93       	push	r23
    36ce:	6f 93       	push	r22
    36d0:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <main_nmeaPosFixIndicator+0x1>
    36d4:	8f 93       	push	r24
    36d6:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaPosFixIndicator>
    36da:	8f 93       	push	r24
    36dc:	1f 92       	push	r1
    36de:	86 e4       	ldi	r24, 0x46	; 70
    36e0:	8f 93       	push	r24
    36e2:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <main_nmeaMode2+0x1>
    36e6:	8f 93       	push	r24
    36e8:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <main_nmeaMode2>
    36ec:	8f 93       	push	r24
    36ee:	1f 92       	push	r1
    36f0:	8d e4       	ldi	r24, 0x4D	; 77
    36f2:	8f 93       	push	r24
    36f4:	8d e8       	ldi	r24, 0x8D	; 141
    36f6:	93 e0       	ldi	r25, 0x03	; 3
    36f8:	9f 93       	push	r25
    36fa:	8f 93       	push	r24
    36fc:	8d e0       	ldi	r24, 0x0D	; 13
    36fe:	94 e0       	ldi	r25, 0x04	; 4
    3700:	9f 93       	push	r25
    3702:	8f 93       	push	r24
			break;

			case 2:
			{
				/* PWM data */
				uint8_t sreg = SREG;
    3704:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
				cli();
				uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
    3708:	60 c0       	rjmp	.+192    	; 0x37ca <main_fw_giveAway+0x1a74>
    370a:	8f b7       	in	r24, 0x3f	; 63
				uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
    370c:	f8 94       	cli
    370e:	10 91 34 05 	lds	r17, 0x0534	; 0x800534 <fastPwmLoopVal>
}

static float main_fw_calcTimerToFloat(uint8_t intVal, uint8_t intSubVal)
{
	/* the fractional part depends on the bit count used for the sub-PWM */
	return intVal + (intSubVal / 256.0f);
    3712:	60 91 33 05 	lds	r22, 0x0533	; 0x800533 <fastPwmSubLoopVal>
    3716:	8f bf       	out	0x3f, r24	; 63
    3718:	70 e0       	ldi	r23, 0x00	; 0
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e8       	ldi	r20, 0x80	; 128
    3728:	5b e3       	ldi	r21, 0x3B	; 59
    372a:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    372e:	6b 01       	movw	r12, r22
    3730:	7c 01       	movw	r14, r24
    3732:	61 2f       	mov	r22, r17
    3734:	70 e0       	ldi	r23, 0x00	; 0
    3736:	80 e0       	ldi	r24, 0x00	; 0
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    373e:	9b 01       	movw	r18, r22
    3740:	ac 01       	movw	r20, r24
    3742:	c7 01       	movw	r24, r14
    3744:	b6 01       	movw	r22, r12
				uint8_t localFastPwmLoopVal		= fastPwmLoopVal;
				uint8_t localFastPwmSubLoopVal	= fastPwmSubLoopVal;
				SREG = sreg;

				float l_timer = main_fw_calcTimerToFloat(localFastPwmLoopVal, localFastPwmSubLoopVal);
				memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_LC23, sizeof(PM_FORMAT_LC23));
    3746:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    374a:	6b 01       	movw	r12, r22
    374c:	7c 01       	movw	r14, r24
    374e:	29 e1       	ldi	r18, 0x19	; 25
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	49 e5       	ldi	r20, 0x59	; 89
    3754:	52 e0       	ldi	r21, 0x02	; 2
    3756:	6d e8       	ldi	r22, 0x8D	; 141
				len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3758:	73 e0       	ldi	r23, 0x03	; 3
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	e6 d4       	rcall	.+2508   	; 0x412a <memory_fw_copyBuffer>
    375e:	80 90 79 05 	lds	r8, 0x0579	; 0x800579 <mainAdcPullVolts>
    3762:	90 90 7a 05 	lds	r9, 0x057A	; 0x80057a <mainAdcPullVolts+0x1>
    3766:	a0 90 7b 05 	lds	r10, 0x057B	; 0x80057b <mainAdcPullVolts+0x2>
    376a:	b0 90 7c 05 	lds	r11, 0x057C	; 0x80057c <mainAdcPullVolts+0x3>
    376e:	43 e0       	ldi	r20, 0x03	; 3
    3770:	c5 01       	movw	r24, r10
    3772:	b4 01       	movw	r22, r8
    3774:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    3778:	78 2e       	mov	r7, r24
    377a:	69 2e       	mov	r6, r25
    377c:	43 e0       	ldi	r20, 0x03	; 3
    377e:	c7 01       	movw	r24, r14
    3780:	b6 01       	movw	r22, r12
    3782:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    3786:	18 2f       	mov	r17, r24
    3788:	09 2f       	mov	r16, r25
    378a:	6f 92       	push	r6
    378c:	7f 92       	push	r7
    378e:	c5 01       	movw	r24, r10
    3790:	b4 01       	movw	r22, r8
    3792:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    3796:	7f 93       	push	r23
    3798:	6f 93       	push	r22
    379a:	1f 92       	push	r1
    379c:	8b ea       	ldi	r24, 0xAB	; 171
    379e:	8f 93       	push	r24
    37a0:	0f 93       	push	r16
    37a2:	1f 93       	push	r17
    37a4:	c7 01       	movw	r24, r14
    37a6:	b6 01       	movw	r22, r12
    37a8:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    37ac:	7f 93       	push	r23
    37ae:	6f 93       	push	r22
    37b0:	1f 92       	push	r1
    37b2:	80 e5       	ldi	r24, 0x50	; 80
    37b4:	8f 93       	push	r24
    37b6:	8d e8       	ldi	r24, 0x8D	; 141
    37b8:	93 e0       	ldi	r25, 0x03	; 3
    37ba:	9f 93       	push	r25
    37bc:	8f 93       	push	r24
    37be:	8d e0       	ldi	r24, 0x0D	; 13
    37c0:	94 e0       	ldi	r25, 0x04	; 4
    37c2:	9f 93       	push	r25
    37c4:	8f 93       	push	r24
				'P',
				(int) l_timer, s_flt_frac(l_timer, 3),
				0xab,
				(int) mainAdcPullVolts, s_flt_frac(mainAdcPullVolts, 3));
				twi_mcp23017_av1624_fw_gotoPosition(1, 0);
    37c6:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
    37ca:	18 2f       	mov	r17, r24
    37cc:	60 e0       	ldi	r22, 0x00	; 0
				twi_mcp23017_av1624_fw_writeString(mainPrepareBuffer, len);
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <twi_mcp23017_av1624_fw_gotoPosition>
    37d4:	61 2f       	mov	r22, r17
    37d6:	8d e0       	ldi	r24, 0x0D	; 13
    37d8:	94 e0       	ldi	r25, 0x04	; 4
    37da:	0e 94 1a 28 	call	0x5034	; 0x5034 <twi_mcp23017_av1624_fw_writeString>
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	f8 94       	cli
			}
			break;
		}
		usbPoll();
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	0f be       	out	0x3f, r0	; 63

		if (++displaySubNr >= 3) {
    37e6:	cd bf       	out	0x3d, r28	; 61
    37e8:	0e 94 35 2a 	call	0x546a	; 0x546a <usbPoll>
    37ec:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
    37f0:	8f 5f       	subi	r24, 0xFF	; 255
    37f2:	83 30       	cpi	r24, 0x03	; 3
    37f4:	18 f4       	brcc	.+6      	; 0x37fc <main_fw_giveAway+0x1aa6>
			displaySubNr = 0;
    37f6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
			++displayNr;
			displayNr %= 3;
    37fa:	0a c0       	rjmp	.+20     	; 0x3810 <main_fw_giveAway+0x1aba>
    37fc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
    3800:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <displayNr.2995>
    3804:	8f 5f       	subi	r24, 0xFF	; 255
    3806:	63 e0       	ldi	r22, 0x03	; 3
    3808:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__udivmodqi4>
}

static void twi_smart_lcd_fw_showStatus(void)
{
	/* Init device when later attached */
	if (!main_bf.mainIsSmartAttached) {
    380c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <displayNr.2995>
    3810:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
		twi_smart_lcd_fw_init();
    3814:	80 fd       	sbrc	r24, 0
		if (!main_bf.mainIsSmartAttached) {
    3816:	0f c0       	rjmp	.+30     	; 0x3836 <main_fw_giveAway+0x1ae0>
    3818:	0e 94 69 28 	call	0x50d2	; 0x50d2 <twi_smart_lcd_fw_init>
    381c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3820:	80 ff       	sbrs	r24, 0
    3822:	ec c1       	rjmp	.+984    	; 0x3bfc <main_fw_giveAway+0x1ea6>
    3824:	bf e3       	ldi	r27, 0x3F	; 63
    3826:	22 e4       	ldi	r18, 0x42	; 66
    3828:	3f e0       	ldi	r19, 0x0F	; 15
    382a:	b1 50       	subi	r27, 0x01	; 1
    382c:	20 40       	sbci	r18, 0x00	; 0
    382e:	30 40       	sbci	r19, 0x00	; 0
	}

	{
		uint8_t clk_state;
		float phaseVolts;
		uint8_t sreg = SREG;
    3830:	e1 f7       	brne	.-8      	; 0x382a <main_fw_giveAway+0x1ad4>
		cli();
    3832:	00 c0       	rjmp	.+0      	; 0x3834 <main_fw_giveAway+0x1ade>
		clk_state = (uint8_t) mainRefClkState;
    3834:	00 00       	nop
    3836:	8f b7       	in	r24, 0x3f	; 63
		phaseVolts = mainAdcPhaseVolts;
    3838:	f8 94       	cli
    383a:	10 91 9d 05 	lds	r17, 0x059D	; 0x80059d <mainRefClkState>
    383e:	c0 90 75 05 	lds	r12, 0x0575	; 0x800575 <mainAdcPhaseVolts>
    3842:	d0 90 76 05 	lds	r13, 0x0576	; 0x800576 <mainAdcPhaseVolts+0x1>
    3846:	e0 90 77 05 	lds	r14, 0x0577	; 0x800577 <mainAdcPhaseVolts+0x2>
		SREG = sreg;

		uint16_t phaseVolt1000 = (uint16_t) (phaseVolts * 1000.0f);
		int16_t  phaseDeg100   = (int16_t)  (100.0f * (((ADC_PHASE_VOLTS_CENTER - phaseVolts) / ADC_PHASE_DELTAVOLTS_90DEG) * 90.0f));
		twi_smart_lcd_fw_set_clkstate_phaseVolt__phaseDeg(clk_state, phaseVolt1000, phaseDeg100);
    384a:	f0 90 78 05 	lds	r15, 0x0578	; 0x800578 <mainAdcPhaseVolts+0x3>
    384e:	8f bf       	out	0x3f, r24	; 63
    3850:	a7 01       	movw	r20, r14
    3852:	96 01       	movw	r18, r12
    3854:	66 e6       	ldi	r22, 0x66	; 102
    3856:	76 e6       	ldi	r23, 0x66	; 102
    3858:	86 ea       	ldi	r24, 0xA6	; 166
    385a:	9f e3       	ldi	r25, 0x3F	; 63
    385c:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    3860:	23 e3       	ldi	r18, 0x33	; 51
    3862:	33 e3       	ldi	r19, 0x33	; 51
    3864:	43 eb       	ldi	r20, 0xB3	; 179
    3866:	5f e3       	ldi	r21, 0x3F	; 63
    3868:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	44 eb       	ldi	r20, 0xB4	; 180
    3872:	52 e4       	ldi	r21, 0x42	; 66
    3874:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	48 ec       	ldi	r20, 0xC8	; 200
    387e:	52 e4       	ldi	r21, 0x42	; 66
    3880:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    3884:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    3888:	4b 01       	movw	r8, r22
    388a:	5c 01       	movw	r10, r24
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	4a e7       	ldi	r20, 0x7A	; 122
    3892:	54 e4       	ldi	r21, 0x44	; 68
    3894:	c7 01       	movw	r24, r14
    3896:	b6 01       	movw	r22, r12
    3898:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    389c:	0e 94 22 31 	call	0x6244	; 0x6244 <__fixunssfsi>
    38a0:	a4 01       	movw	r20, r8
	}

	{
		long date;
		uint8_t sreg = SREG;
    38a2:	81 2f       	mov	r24, r17
		cli();
    38a4:	0e 94 6f 28 	call	0x50de	; 0x50de <twi_smart_lcd_fw_set_clkstate_phaseVolt__phaseDeg>
		date = main_nmeaDate;
    38a8:	8f b7       	in	r24, 0x3f	; 63
    38aa:	f8 94       	cli
    38ac:	c0 90 57 05 	lds	r12, 0x0557	; 0x800557 <main_nmeaDate>
    38b0:	d0 90 58 05 	lds	r13, 0x0558	; 0x800558 <main_nmeaDate+0x1>
    38b4:	e0 90 59 05 	lds	r14, 0x0559	; 0x800559 <main_nmeaDate+0x2>
		SREG = sreg;

		uint16_t year  = (uint16_t) (date % 10000);
		uint8_t  month = (uint8_t) ((date / 10000) % 100);
		uint8_t  day   = (uint8_t)  (date / 1000000);
		twi_smart_lcd_fw_set_date(year, month, day);
    38b8:	f0 90 5a 05 	lds	r15, 0x055A	; 0x80055a <main_nmeaDate+0x3>
    38bc:	8f bf       	out	0x3f, r24	; 63
    38be:	c7 01       	movw	r24, r14
    38c0:	b6 01       	movw	r22, r12
    38c2:	20 e4       	ldi	r18, 0x40	; 64
    38c4:	32 e4       	ldi	r19, 0x42	; 66
    38c6:	4f e0       	ldi	r20, 0x0F	; 15
    38c8:	50 e0       	ldi	r21, 0x00	; 0
    38ca:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    38ce:	12 2f       	mov	r17, r18
    38d0:	90 e1       	ldi	r25, 0x10	; 16
    38d2:	89 2e       	mov	r8, r25
    38d4:	97 e2       	ldi	r25, 0x27	; 39
    38d6:	99 2e       	mov	r9, r25
    38d8:	a1 2c       	mov	r10, r1
    38da:	b1 2c       	mov	r11, r1
    38dc:	c7 01       	movw	r24, r14
    38de:	b6 01       	movw	r22, r12
    38e0:	a5 01       	movw	r20, r10
    38e2:	94 01       	movw	r18, r8
    38e4:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    38e8:	2b 01       	movw	r4, r22
    38ea:	3c 01       	movw	r6, r24
    38ec:	64 e6       	ldi	r22, 0x64	; 100
    38ee:	c6 2e       	mov	r12, r22
    38f0:	d1 2c       	mov	r13, r1
    38f2:	e1 2c       	mov	r14, r1
    38f4:	f1 2c       	mov	r15, r1
    38f6:	ca 01       	movw	r24, r20
    38f8:	b9 01       	movw	r22, r18
    38fa:	a7 01       	movw	r20, r14
    38fc:	96 01       	movw	r18, r12
    38fe:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    3902:	41 2f       	mov	r20, r17
	}

	{
		long utc;
		uint8_t sreg = SREG;
    3904:	c2 01       	movw	r24, r4
		cli();
    3906:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <twi_smart_lcd_fw_set_date>
		utc = main_nmeaTimeUtcInt;
    390a:	8f b7       	in	r24, 0x3f	; 63
    390c:	f8 94       	cli
    390e:	40 90 53 05 	lds	r4, 0x0553	; 0x800553 <main_nmeaTimeUtcInt>
    3912:	50 90 54 05 	lds	r5, 0x0554	; 0x800554 <main_nmeaTimeUtcInt+0x1>
    3916:	60 90 55 05 	lds	r6, 0x0555	; 0x800555 <main_nmeaTimeUtcInt+0x2>
		SREG = sreg;

		uint8_t  hour   = (uint8_t)  (utc / 10000);
		uint8_t  minute = (uint8_t) ((utc / 100) % 100);
		uint8_t  second = (uint8_t)  (utc % 100);
		twi_smart_lcd_fw_set_time(hour, minute, second);
    391a:	70 90 56 05 	lds	r7, 0x0556	; 0x800556 <main_nmeaTimeUtcInt+0x3>
    391e:	8f bf       	out	0x3f, r24	; 63
    3920:	c3 01       	movw	r24, r6
    3922:	b2 01       	movw	r22, r4
    3924:	a7 01       	movw	r20, r14
    3926:	96 01       	movw	r18, r12
    3928:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    392c:	06 2f       	mov	r16, r22
    392e:	ca 01       	movw	r24, r20
    3930:	b9 01       	movw	r22, r18
    3932:	a7 01       	movw	r20, r14
    3934:	96 01       	movw	r18, r12
    3936:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    393a:	16 2f       	mov	r17, r22
    393c:	c3 01       	movw	r24, r6
    393e:	b2 01       	movw	r22, r4
    3940:	a5 01       	movw	r20, r10
    3942:	94 01       	movw	r18, r8
    3944:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__divmodsi4>
    3948:	82 2f       	mov	r24, r18
    394a:	40 2f       	mov	r20, r16
	}

	{
		float ppm;
		uint8_t sreg = SREG;
    394c:	61 2f       	mov	r22, r17
		cli();
    394e:	0e 94 86 28 	call	0x510c	; 0x510c <twi_smart_lcd_fw_set_time>
		ppm = mainPpm;
    3952:	8f b7       	in	r24, 0x3f	; 63
    3954:	f8 94       	cli
    3956:	c0 90 7d 05 	lds	r12, 0x057D	; 0x80057d <mainPpm>
    395a:	d0 90 7e 05 	lds	r13, 0x057E	; 0x80057e <mainPpm+0x1>
    395e:	e0 90 7f 05 	lds	r14, 0x057F	; 0x80057f <mainPpm+0x2>
		SREG = sreg;

		float localPpb = ppm > 0 ?  ppm * 1000.0f : ppm * -1000.0f;
    3962:	f0 90 80 05 	lds	r15, 0x0580	; 0x800580 <mainPpm+0x3>
    3966:	8f bf       	out	0x3f, r24	; 63
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	a9 01       	movw	r20, r18
    396e:	c7 01       	movw	r24, r14
    3970:	b6 01       	movw	r22, r12
    3972:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    3976:	18 16       	cp	r1, r24
    3978:	2c f4       	brge	.+10     	; 0x3984 <main_fw_giveAway+0x1c2e>
    397a:	20 e0       	ldi	r18, 0x00	; 0
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	4a e7       	ldi	r20, 0x7A	; 122
    3980:	54 e4       	ldi	r21, 0x44	; 68
    3982:	04 c0       	rjmp	.+8      	; 0x398c <main_fw_giveAway+0x1c36>
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	4a e7       	ldi	r20, 0x7A	; 122
    398a:	54 ec       	ldi	r21, 0xC4	; 196
    398c:	c7 01       	movw	r24, r14
    398e:	b6 01       	movw	r22, r12
    3990:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
		int16_t ppb_int  = (int16_t) localPpb;
    3994:	2b 01       	movw	r4, r22
    3996:	3c 01       	movw	r6, r24
    3998:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
		uint16_t ppb_frac1000 = (uint16_t) ((localPpb - ppb_int) * 1000.0f);
    399c:	4b 01       	movw	r8, r22
    399e:	5c 01       	movw	r10, r24
    39a0:	8b 01       	movw	r16, r22
    39a2:	07 2e       	mov	r0, r23
    39a4:	00 0c       	add	r0, r0
    39a6:	88 0b       	sbc	r24, r24
    39a8:	99 0b       	sbc	r25, r25
    39aa:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    39ae:	9b 01       	movw	r18, r22
    39b0:	ac 01       	movw	r20, r24
    39b2:	c3 01       	movw	r24, r6
    39b4:	b2 01       	movw	r22, r4
    39b6:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	4a e7       	ldi	r20, 0x7A	; 122
    39c0:	54 e4       	ldi	r21, 0x44	; 68
    39c2:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    39c6:	0e 94 22 31 	call	0x6244	; 0x6244 <__fixunssfsi>
		if (ppm < 0) {
    39ca:	2b 01       	movw	r4, r22
    39cc:	3c 01       	movw	r6, r24
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	a9 01       	movw	r20, r18
    39d4:	c7 01       	movw	r24, r14
    39d6:	b6 01       	movw	r22, r12
    39d8:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
			ppb_int = -ppb_int;
    39dc:	87 ff       	sbrs	r24, 7
    39de:	04 c0       	rjmp	.+8      	; 0x39e8 <main_fw_giveAway+0x1c92>
    39e0:	00 27       	eor	r16, r16
		}
		twi_smart_lcd_fw_set_ppb(ppb_int, ppb_frac1000);
    39e2:	11 27       	eor	r17, r17
    39e4:	08 19       	sub	r16, r8
    39e6:	19 09       	sbc	r17, r9
    39e8:	b2 01       	movw	r22, r4
	}

	{
		uint8_t pwm_int;
		uint8_t pwm_frac256;
		uint8_t sreg = SREG;
    39ea:	c8 01       	movw	r24, r16
		cli();
    39ec:	0e 94 90 28 	call	0x5120	; 0x5120 <twi_smart_lcd_fw_set_ppb>
		pwm_int = fastPwmLoopVal;
    39f0:	9f b7       	in	r25, 0x3f	; 63
		pwm_frac256 = fastPwmSubLoopVal;
    39f2:	f8 94       	cli
    39f4:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <fastPwmLoopVal>
		SREG = sreg;

		twi_smart_lcd_fw_set_pwm(pwm_int, pwm_frac256);
    39f8:	60 91 33 05 	lds	r22, 0x0533	; 0x800533 <fastPwmSubLoopVal>
	}

	{
		float pv;
		uint8_t sreg = SREG;
    39fc:	9f bf       	out	0x3f, r25	; 63
		cli();
    39fe:	0e 94 9b 28 	call	0x5136	; 0x5136 <twi_smart_lcd_fw_set_pwm>
		pv = mainAdcPullVolts;
    3a02:	8f b7       	in	r24, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	c0 90 79 05 	lds	r12, 0x0579	; 0x800579 <mainAdcPullVolts>
    3a0a:	d0 90 7a 05 	lds	r13, 0x057A	; 0x80057a <mainAdcPullVolts+0x1>
    3a0e:	e0 90 7b 05 	lds	r14, 0x057B	; 0x80057b <mainAdcPullVolts+0x2>
		SREG = sreg;

		uint8_t pv_int   = (uint8_t) pv;
    3a12:	f0 90 7c 05 	lds	r15, 0x057C	; 0x80057c <mainAdcPullVolts+0x3>
    3a16:	8f bf       	out	0x3f, r24	; 63
    3a18:	c7 01       	movw	r24, r14
    3a1a:	b6 01       	movw	r22, r12
		uint16_t pv_frac1000 = (uint16_t) ((pv - pv_int) * 1000.0f);
		twi_smart_lcd_fw_set_pv(pv_int, pv_frac1000);
    3a1c:	0e 94 22 31 	call	0x6244	; 0x6244 <__fixunssfsi>
    3a20:	16 2f       	mov	r17, r22
    3a22:	70 e0       	ldi	r23, 0x00	; 0
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    3a2c:	9b 01       	movw	r18, r22
    3a2e:	ac 01       	movw	r20, r24
    3a30:	c7 01       	movw	r24, r14
    3a32:	b6 01       	movw	r22, r12
    3a34:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	4a e7       	ldi	r20, 0x7A	; 122
    3a3e:	54 e4       	ldi	r21, 0x44	; 68
    3a40:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    3a44:	0e 94 22 31 	call	0x6244	; 0x6244 <__fixunssfsi>

	{
		uint8_t sat_west;
		uint8_t sat_east;
		uint8_t sat_used;
		uint8_t sreg = SREG;
    3a48:	81 2f       	mov	r24, r17
		cli();
    3a4a:	0e 94 a4 28 	call	0x5148	; 0x5148 <twi_smart_lcd_fw_set_pv>
		sat_west = (uint8_t) main_nmeaSatsEphemerisGpsGalileoQzss;
    3a4e:	9f b7       	in	r25, 0x3f	; 63
		sat_east = (uint8_t) main_nmeaSatsEphemerisGlonass;
    3a50:	f8 94       	cli
    3a52:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <main_nmeaSatsEphemerisGpsGalileoQzss>
		sat_used = (uint8_t) main_nmeaSatsUsed;
    3a56:	60 91 69 05 	lds	r22, 0x0569	; 0x800569 <main_nmeaSatsEphemerisGlonass>
		SREG = sreg;

		twi_smart_lcd_fw_set_sat_use(sat_west, sat_east, sat_used);
    3a5a:	40 91 67 05 	lds	r20, 0x0567	; 0x800567 <main_nmeaSatsUsed>
	}

	{
		float sat_dop;
		uint8_t sreg = SREG;
    3a5e:	9f bf       	out	0x3f, r25	; 63
		cli();
    3a60:	0e 94 ae 28 	call	0x515c	; 0x515c <twi_smart_lcd_fw_set_sat_use>
		sat_dop = main_nmeaPdop;
    3a64:	2f b7       	in	r18, 0x3f	; 63
    3a66:	f8 94       	cli
    3a68:	60 91 63 05 	lds	r22, 0x0563	; 0x800563 <main_nmeaPdop>
    3a6c:	70 91 64 05 	lds	r23, 0x0564	; 0x800564 <main_nmeaPdop+0x1>
    3a70:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <main_nmeaPdop+0x2>
		SREG = sreg;

		uint16_t sat_dop100 = (uint16_t) (sat_dop * 100.0f);
		twi_smart_lcd_fw_set_sat_dop(sat_dop100);
    3a74:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <main_nmeaPdop+0x3>
    3a78:	2f bf       	out	0x3f, r18	; 63
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	48 ec       	ldi	r20, 0xC8	; 200
    3a80:	52 e4       	ldi	r21, 0x42	; 66
    3a82:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    3a86:	0e 94 22 31 	call	0x6244	; 0x6244 <__fixunssfsi>
	}

	{
		uint8_t pos_fi;
		uint8_t pos_m2;
		uint8_t sreg = SREG;
    3a8a:	cb 01       	movw	r24, r22
		cli();
    3a8c:	0e 94 b8 28 	call	0x5170	; 0x5170 <twi_smart_lcd_fw_set_sat_dop>
		pos_fi = (uint8_t) main_nmeaPosFixIndicator;
    3a90:	9f b7       	in	r25, 0x3f	; 63
		pos_m2 = (uint8_t) main_nmeaMode2;
    3a92:	f8 94       	cli
    3a94:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <main_nmeaPosFixIndicator>
		SREG = sreg;

		twi_smart_lcd_fw_set_pos_state(pos_fi, pos_m2);
    3a98:	60 91 6f 05 	lds	r22, 0x056F	; 0x80056f <main_nmeaMode2>
	}

	{
		uint8_t lat_sgn;
		float lat;
		uint8_t sreg = SREG;
    3a9c:	9f bf       	out	0x3f, r25	; 63
		cli();
    3a9e:	0e 94 c1 28 	call	0x5182	; 0x5182 <twi_smart_lcd_fw_set_pos_state>
		lat_sgn = (uint8_t) main_nmeaPosLatSign;
    3aa2:	8f b7       	in	r24, 0x3f	; 63
		lat = main_nmeaPosLat;
    3aa4:	f8 94       	cli
    3aa6:	c0 90 4c 05 	lds	r12, 0x054C	; 0x80054c <main_nmeaPosLatSign>
    3aaa:	80 90 4d 05 	lds	r8, 0x054D	; 0x80054d <main_nmeaPosLat>
    3aae:	90 90 4e 05 	lds	r9, 0x054E	; 0x80054e <main_nmeaPosLat+0x1>
    3ab2:	a0 90 4f 05 	lds	r10, 0x054F	; 0x80054f <main_nmeaPosLat+0x2>
		SREG = sreg;

		uint8_t  lat_deg = (uint8_t) (lat / 100.0f);
    3ab6:	b0 90 50 05 	lds	r11, 0x0550	; 0x800550 <main_nmeaPosLat+0x3>
    3aba:	8f bf       	out	0x3f, r24	; 63
    3abc:	20 e0       	ldi	r18, 0x00	; 0
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	48 ec       	ldi	r20, 0xC8	; 200
    3ac2:	52 e4       	ldi	r21, 0x42	; 66
    3ac4:	c5 01       	movw	r24, r10
    3ac6:	b4 01       	movw	r22, r8
    3ac8:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
		uint8_t  lat_min_int = (uint8_t) ((int) lat % 100);
    3acc:	0e 94 22 31 	call	0x6244	; 0x6244 <__fixunssfsi>
    3ad0:	d6 2e       	mov	r13, r22
    3ad2:	c5 01       	movw	r24, r10
    3ad4:	b4 01       	movw	r22, r8
    3ad6:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    3ada:	04 e6       	ldi	r16, 0x64	; 100
    3adc:	10 e0       	ldi	r17, 0x00	; 0
    3ade:	cb 01       	movw	r24, r22
    3ae0:	b8 01       	movw	r22, r16
		uint16_t lat_min_frac10000 = (uint16_t) ((lat - (lat_deg * 100 + lat_min_int)) * 10000.0f);
		twi_smart_lcd_fw_set_pos_lat(lat_sgn, lat_deg, lat_min_int, lat_min_frac10000);
    3ae2:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__divmodhi4>
    3ae6:	7c 01       	movw	r14, r24
    3ae8:	bc 01       	movw	r22, r24
    3aea:	77 27       	eor	r23, r23
    3aec:	84 e6       	ldi	r24, 0x64	; 100
    3aee:	d8 9e       	mul	r13, r24
    3af0:	60 0d       	add	r22, r0
    3af2:	71 1d       	adc	r23, r1
    3af4:	11 24       	eor	r1, r1
    3af6:	07 2e       	mov	r0, r23
    3af8:	00 0c       	add	r0, r0
    3afa:	88 0b       	sbc	r24, r24
    3afc:	99 0b       	sbc	r25, r25
    3afe:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__floatsisf>
    3b02:	9b 01       	movw	r18, r22
    3b04:	ac 01       	movw	r20, r24
    3b06:	c5 01       	movw	r24, r10
    3b08:	b4 01       	movw	r22, r8
    3b0a:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e4       	ldi	r19, 0x40	; 64
    3b12:	4c e1       	ldi	r20, 0x1C	; 28
    3b14:	56 e4       	ldi	r21, 0x46	; 70
    3b16:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    3b1a:	0e 94 22 31 	call	0x6244	; 0x6244 <__fixunssfsi>
    3b1e:	9b 01       	movw	r18, r22
    3b20:	4e 2d       	mov	r20, r14
    3b22:	6d 2d       	mov	r22, r13
	}

	{
		uint8_t lon_sgn;
		float lon;
		uint8_t sreg = SREG;
    3b24:	8c 2d       	mov	r24, r12
		cli();
    3b26:	0e 94 ca 28 	call	0x5194	; 0x5194 <twi_smart_lcd_fw_set_pos_lat>
		lon_sgn = main_nmeaPosLonSign;
    3b2a:	8f b7       	in	r24, 0x3f	; 63
		lon = main_nmeaPosLon;
    3b2c:	f8 94       	cli
    3b2e:	70 90 47 05 	lds	r7, 0x0547	; 0x800547 <main_nmeaPosLonSign>
    3b32:	c0 90 48 05 	lds	r12, 0x0548	; 0x800548 <main_nmeaPosLon>
    3b36:	d0 90 49 05 	lds	r13, 0x0549	; 0x800549 <main_nmeaPosLon+0x1>
    3b3a:	e0 90 4a 05 	lds	r14, 0x054A	; 0x80054a <main_nmeaPosLon+0x2>
		SREG = sreg;

		uint16_t lon_deg = (uint16_t) (lon / 100.0f);
    3b3e:	f0 90 4b 05 	lds	r15, 0x054B	; 0x80054b <main_nmeaPosLon+0x3>
    3b42:	8f bf       	out	0x3f, r24	; 63
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	48 ec       	ldi	r20, 0xC8	; 200
    3b4a:	52 e4       	ldi	r21, 0x42	; 66
    3b4c:	c7 01       	movw	r24, r14
    3b4e:	b6 01       	movw	r22, r12
    3b50:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    3b54:	0e 94 22 31 	call	0x6244	; 0x6244 <__fixunssfsi>
		uint8_t  lon_min_int = (uint16_t) ((int) lon % 100);
    3b58:	4b 01       	movw	r8, r22
    3b5a:	5c 01       	movw	r10, r24
    3b5c:	c7 01       	movw	r24, r14
    3b5e:	b6 01       	movw	r22, r12
    3b60:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    3b64:	cb 01       	movw	r24, r22
    3b66:	b8 01       	movw	r22, r16
		uint16_t lon_min_frac10000 = (uint16_t) ((lon - (lon_deg * 100 + lon_min_int)) * 10000.0f);
		twi_smart_lcd_fw_set_pos_lon(lon_sgn, lon_deg, lon_min_int, lon_min_frac10000);
    3b68:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__divmodhi4>
    3b6c:	18 2f       	mov	r17, r24
    3b6e:	84 e6       	ldi	r24, 0x64	; 100
    3b70:	88 9d       	mul	r24, r8
    3b72:	b0 01       	movw	r22, r0
    3b74:	89 9d       	mul	r24, r9
    3b76:	70 0d       	add	r23, r0
    3b78:	11 24       	eor	r1, r1
    3b7a:	61 0f       	add	r22, r17
    3b7c:	71 1d       	adc	r23, r1
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	0e 94 4e 31 	call	0x629c	; 0x629c <__floatunsisf>
    3b86:	9b 01       	movw	r18, r22
    3b88:	ac 01       	movw	r20, r24
    3b8a:	c7 01       	movw	r24, r14
    3b8c:	b6 01       	movw	r22, r12
    3b8e:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e4       	ldi	r19, 0x40	; 64
    3b96:	4c e1       	ldi	r20, 0x1C	; 28
    3b98:	56 e4       	ldi	r21, 0x46	; 70
    3b9a:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    3b9e:	0e 94 22 31 	call	0x6244	; 0x6244 <__fixunssfsi>
    3ba2:	9b 01       	movw	r18, r22
    3ba4:	41 2f       	mov	r20, r17
    3ba6:	68 2d       	mov	r22, r8

	{
		float height_f;
		uint16_t height_int;
		uint8_t height_frac10;
		uint8_t sreg = SREG;
    3ba8:	87 2d       	mov	r24, r7
		cli();
    3baa:	0e 94 d6 28 	call	0x51ac	; 0x51ac <twi_smart_lcd_fw_set_pos_lon>
		height_f = main_nmeaAltitudeM;
    3bae:	8f b7       	in	r24, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	c0 90 43 05 	lds	r12, 0x0543	; 0x800543 <main_nmeaAltitudeM>
    3bb6:	d0 90 44 05 	lds	r13, 0x0544	; 0x800544 <main_nmeaAltitudeM+0x1>
    3bba:	e0 90 45 05 	lds	r14, 0x0545	; 0x800545 <main_nmeaAltitudeM+0x2>
		SREG = sreg;

		height_int    = (int16_t) height_f;
		height_frac10 = (int8_t) ((height_f - floorf(height_f)) * 10.0f);
    3bbe:	f0 90 46 05 	lds	r15, 0x0546	; 0x800546 <main_nmeaAltitudeM+0x3>
    3bc2:	8f bf       	out	0x3f, r24	; 63
    3bc4:	c7 01       	movw	r24, r14
    3bc6:	b6 01       	movw	r22, r12
    3bc8:	0e 94 8b 31 	call	0x6316	; 0x6316 <floor>
		twi_smart_lcd_fw_set_pos_height(height_int, height_frac10);
    3bcc:	9b 01       	movw	r18, r22
    3bce:	ac 01       	movw	r20, r24
    3bd0:	c7 01       	movw	r24, r14
    3bd2:	b6 01       	movw	r22, r12
    3bd4:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	40 e2       	ldi	r20, 0x20	; 32
    3bde:	51 e4       	ldi	r21, 0x41	; 65
    3be0:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    3be4:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    3be8:	16 2f       	mov	r17, r22
    3bea:	c7 01       	movw	r24, r14
    3bec:	b6 01       	movw	r22, r12
    3bee:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	cb 01       	movw	r24, r22

	/* Show status at connected LCD devices */
	twi_mcp23017_av1624_fw_showStatus();
	twi_smart_lcd_fw_showStatus();

	if (mainPwmTerminalAdj) {
    3bf6:	61 2f       	mov	r22, r17
    3bf8:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <twi_smart_lcd_fw_set_pos_height>
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	a9 01       	movw	r20, r18
    3c02:	60 91 99 05 	lds	r22, 0x0599	; 0x800599 <mainPwmTerminalAdj>
    3c06:	70 91 9a 05 	lds	r23, 0x059A	; 0x80059a <mainPwmTerminalAdj+0x1>
    3c0a:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <mainPwmTerminalAdj+0x2>
    3c0e:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x3>
    3c12:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
		uint8_t localFastPwmSubLoopValNext;
		uint8_t localFastPwmLoopValNext;

		{
			/* correct PWM with  +/- <value> */
			uint8_t sreg = SREG;
    3c16:	88 23       	and	r24, r24
			cli();
    3c18:	09 f4       	brne	.+2      	; 0x3c1c <main_fw_giveAway+0x1ec6>
			localFastPwmLoopValBefore		= fastPwmLoopVal;
    3c1a:	58 c1       	rjmp	.+688    	; 0x3ecc <main_fw_giveAway+0x2176>
    3c1c:	ff b6       	in	r15, 0x3f	; 63
			localFastPwmSubLoopValBefore	= fastPwmSubLoopVal;
    3c1e:	f8 94       	cli
    3c20:	10 91 34 05 	lds	r17, 0x0534	; 0x800534 <fastPwmLoopVal>
			SREG = sreg;

			/* calculate next value */
			localFastPwmLoopValNext		= localFastPwmLoopValBefore;
    3c24:	00 91 33 05 	lds	r16, 0x0533	; 0x800533 <fastPwmSubLoopVal>
			localFastPwmSubLoopValNext	= localFastPwmSubLoopValBefore;
			(void) main_fw_calcTimerAdj(mainPwmTerminalAdj, &localFastPwmLoopValNext, &localFastPwmSubLoopValNext);
    3c28:	ff be       	out	0x3f, r15	; 63
    3c2a:	19 83       	std	Y+1, r17	; 0x01
    3c2c:	0a 83       	std	Y+2, r16	; 0x02
    3c2e:	60 91 99 05 	lds	r22, 0x0599	; 0x800599 <mainPwmTerminalAdj>
    3c32:	70 91 9a 05 	lds	r23, 0x059A	; 0x80059a <mainPwmTerminalAdj+0x1>
    3c36:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <mainPwmTerminalAdj+0x2>
    3c3a:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x3>
    3c3e:	9e 01       	movw	r18, r28
    3c40:	2e 5f       	subi	r18, 0xFE	; 254
    3c42:	3f 4f       	sbci	r19, 0xFF	; 255
    3c44:	ae 01       	movw	r20, r28

			/* write back the global variables for PWM and sub-PWM */
			cli();
    3c46:	4f 5f       	subi	r20, 0xFF	; 255
			fastPwmLoopVal		= localFastPwmLoopValNext;
    3c48:	5f 4f       	sbci	r21, 0xFF	; 255
    3c4a:	0e 94 38 0a 	call	0x1470	; 0x1470 <main_fw_calcTimerAdj>
			fastPwmSubLoopVal	= localFastPwmSubLoopValNext;
    3c4e:	f8 94       	cli
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <fastPwmLoopVal>
			SREG = sreg;
		}

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_ID01, sizeof(PM_FORMAT_ID01));
    3c56:	8a 81       	ldd	r24, Y+2	; 0x02
    3c58:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <fastPwmSubLoopVal>
    3c5c:	ff be       	out	0x3f, r15	; 63
    3c5e:	2b e6       	ldi	r18, 0x6B	; 107
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	44 e0       	ldi	r20, 0x04	; 4
    3c64:	55 e0       	ldi	r21, 0x05	; 5
    3c66:	6d e8       	ldi	r22, 0x8D	; 141
		uint8_t len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3c68:	73 e0       	ldi	r23, 0x03	; 3
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	5e d2       	rcall	.+1212   	; 0x412a <memory_fw_copyBuffer>
    3c6e:	c0 90 99 05 	lds	r12, 0x0599	; 0x800599 <mainPwmTerminalAdj>
    3c72:	d0 90 9a 05 	lds	r13, 0x059A	; 0x80059a <mainPwmTerminalAdj+0x1>
    3c76:	e0 90 9b 05 	lds	r14, 0x059B	; 0x80059b <mainPwmTerminalAdj+0x2>
    3c7a:	f0 90 9c 05 	lds	r15, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x3>
    3c7e:	47 e0       	ldi	r20, 0x07	; 7
    3c80:	c7 01       	movw	r24, r14
    3c82:	b6 01       	movw	r22, r12
    3c84:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    3c88:	1f 92       	push	r1
    3c8a:	0f 93       	push	r16
    3c8c:	1f 92       	push	r1
    3c8e:	1f 93       	push	r17
    3c90:	9f 93       	push	r25
    3c92:	8f 93       	push	r24
    3c94:	c7 01       	movw	r24, r14
    3c96:	b6 01       	movw	r22, r12
    3c98:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    3c9c:	7f 93       	push	r23
    3c9e:	6f 93       	push	r22
    3ca0:	8d e8       	ldi	r24, 0x8D	; 141
    3ca2:	e8 2e       	mov	r14, r24
    3ca4:	83 e0       	ldi	r24, 0x03	; 3
    3ca6:	f8 2e       	mov	r15, r24
    3ca8:	ff 92       	push	r15
    3caa:	ef 92       	push	r14
    3cac:	0d e0       	ldi	r16, 0x0D	; 13
				(int) mainPwmTerminalAdj, s_flt_frac(mainPwmTerminalAdj, 7),
				localFastPwmLoopValBefore,
				localFastPwmSubLoopValBefore);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3cae:	14 e0       	ldi	r17, 0x04	; 4
    3cb0:	1f 93       	push	r17
    3cb2:	0f 93       	push	r16
    3cb4:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
    3cb8:	28 2f       	mov	r18, r24

		memory_fw_copyBuffer(true, mainFormatBuffer, PM_FORMAT_ID02, sizeof(PM_FORMAT_ID02));
    3cba:	a8 01       	movw	r20, r16
    3cbc:	60 e0       	ldi	r22, 0x00	; 0
    3cbe:	80 e0       	ldi	r24, 0x00	; 0
    3cc0:	d8 d4       	rcall	.+2480   	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    3cc2:	2b e6       	ldi	r18, 0x6B	; 107
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	49 e9       	ldi	r20, 0x99	; 153
    3cc8:	54 e0       	ldi	r21, 0x04	; 4
		len = sprintf((char*) mainPrepareBuffer, (char*) mainFormatBuffer,
    3cca:	b7 01       	movw	r22, r14
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	2d d2       	rcall	.+1114   	; 0x412a <memory_fw_copyBuffer>
    3cd0:	80 90 99 05 	lds	r8, 0x0599	; 0x800599 <mainPwmTerminalAdj>
    3cd4:	90 90 9a 05 	lds	r9, 0x059A	; 0x80059a <mainPwmTerminalAdj+0x1>
    3cd8:	a0 90 9b 05 	lds	r10, 0x059B	; 0x80059b <mainPwmTerminalAdj+0x2>
    3cdc:	b0 90 9c 05 	lds	r11, 0x059C	; 0x80059c <mainPwmTerminalAdj+0x3>
    3ce0:	47 e0       	ldi	r20, 0x07	; 7
    3ce2:	c5 01       	movw	r24, r10
    3ce4:	b4 01       	movw	r22, r8
    3ce6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <s_flt_frac>
    3cea:	2a 81       	ldd	r18, Y+2	; 0x02
    3cec:	1f 92       	push	r1
    3cee:	2f 93       	push	r18
    3cf0:	29 81       	ldd	r18, Y+1	; 0x01
    3cf2:	1f 92       	push	r1
    3cf4:	2f 93       	push	r18
    3cf6:	9f 93       	push	r25
    3cf8:	8f 93       	push	r24
    3cfa:	c5 01       	movw	r24, r10
    3cfc:	b4 01       	movw	r22, r8
    3cfe:	0e 94 1d 31 	call	0x623a	; 0x623a <__fixsfsi>
    3d02:	7f 93       	push	r23
    3d04:	6f 93       	push	r22
    3d06:	ff 92       	push	r15
    3d08:	ef 92       	push	r14
				(int) mainPwmTerminalAdj, s_flt_frac(mainPwmTerminalAdj, 7),
				localFastPwmLoopValNext,
				localFastPwmSubLoopValNext);
		ringbuffer_fw_ringBufferWaitAppend(false, false, mainPrepareBuffer, len);
    3d0a:	1f 93       	push	r17
    3d0c:	0f 93       	push	r16
    3d0e:	0e 94 bb 34 	call	0x6976	; 0x6976 <sprintf>
    3d12:	28 2f       	mov	r18, r24
    3d14:	a8 01       	movw	r20, r16

		// reset data entry
		mainPwmTerminalAdj = 0.0f;
    3d16:	60 e0       	ldi	r22, 0x00	; 0
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	ab d4       	rcall	.+2390   	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    3d1c:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <mainPwmTerminalAdj>
    3d20:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <mainPwmTerminalAdj+0x1>
    3d24:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <mainPwmTerminalAdj+0x2>
    3d28:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <mainPwmTerminalAdj+0x3>
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	f8 94       	cli
		clkPullPwm_fw_setPin(true);								// for debugging purposes only
	}
#else
	/* due to the fact that the clkFastCtr interrupts every 12.8 µs there is no chance to power down */
#endif
}
    3d30:	de bf       	out	0x3e, r29	; 62
		}
	}

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
		static float lastPhaseStepsPhase = 0.0f;
		float diffPhaseStepsPhase = phaseStepsPhase - lastPhaseStepsPhase;
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	cd bf       	out	0x3d, r28	; 61
    3d36:	ca c0       	rjmp	.+404    	; 0x3ecc <main_fw_giveAway+0x2176>
    3d38:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <lastPhaseStepsPhase.2972>
    3d3c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <lastPhaseStepsPhase.2972+0x1>
    3d40:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <lastPhaseStepsPhase.2972+0x2>
    3d44:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <lastPhaseStepsPhase.2972+0x3>
    3d48:	c7 01       	movw	r24, r14
    3d4a:	b6 01       	movw	r22, r12
    3d4c:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
		uint8_t isAfterSignRev = false;

		/* Find out direction to or from optimum point */
		if (((phaseStepsPhase > 0) && (diffPhaseStepsPhase > 0)) ||
    3d50:	2b 01       	movw	r4, r22
    3d52:	3c 01       	movw	r6, r24
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	a9 01       	movw	r20, r18
    3d5a:	c7 01       	movw	r24, r14
    3d5c:	b6 01       	movw	r22, r12
    3d5e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    3d62:	18 16       	cp	r1, r24
    3d64:	4c f4       	brge	.+18     	; 0x3d78 <main_fw_giveAway+0x2022>
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	a9 01       	movw	r20, r18
    3d6c:	c3 01       	movw	r24, r6
    3d6e:	b2 01       	movw	r22, r4
    3d70:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    3d74:	18 16       	cp	r1, r24
    3d76:	a4 f0       	brlt	.+40     	; 0x3da0 <main_fw_giveAway+0x204a>
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	a9 01       	movw	r20, r18
    3d7e:	c7 01       	movw	r24, r14
    3d80:	b6 01       	movw	r22, r12
    3d82:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
	}

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
		static float lastPhaseStepsPhase = 0.0f;
		float diffPhaseStepsPhase = phaseStepsPhase - lastPhaseStepsPhase;
		uint8_t isAfterSignRev = false;
    3d86:	87 ff       	sbrs	r24, 7
    3d88:	0d c0       	rjmp	.+26     	; 0x3da4 <main_fw_giveAway+0x204e>
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	a9 01       	movw	r20, r18
    3d90:	c3 01       	movw	r24, r6
    3d92:	b2 01       	movw	r22, r4
    3d94:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
    3d98:	88 1f       	adc	r24, r24

		/* Find out direction to or from optimum point */
		if (((phaseStepsPhase > 0) && (diffPhaseStepsPhase > 0)) ||
		    ((phaseStepsPhase < 0) && (diffPhaseStepsPhase < 0))) {
			isAfterSignRev = true;
    3d9a:	88 27       	eor	r24, r24
    3d9c:	88 1f       	adc	r24, r24
	}

	if (REFCLK_STATE_LOCKING_PHASE <= mainRefClkState) {
		static float lastPhaseStepsPhase = 0.0f;
		float diffPhaseStepsPhase = phaseStepsPhase - lastPhaseStepsPhase;
		uint8_t isAfterSignRev = false;
    3d9e:	03 c0       	rjmp	.+6      	; 0x3da6 <main_fw_giveAway+0x2050>
		/* Find out direction to or from optimum point */
		if (((phaseStepsPhase > 0) && (diffPhaseStepsPhase > 0)) ||
		    ((phaseStepsPhase < 0) && (diffPhaseStepsPhase < 0))) {
			isAfterSignRev = true;
		}
		lastPhaseStepsPhase = phaseStepsPhase;
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	01 c0       	rjmp	.+2      	; 0x3da6 <main_fw_giveAway+0x2050>
    3da4:	80 e0       	ldi	r24, 0x00	; 0
    3da6:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <lastPhaseStepsPhase.2972>
    3daa:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <lastPhaseStepsPhase.2972+0x1>
    3dae:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <lastPhaseStepsPhase.2972+0x2>

		/* frequency drift correction */
		phaseStepsFrequency += phaseStepsPhase * (isAfterSignRev ?  0.00001500f
																 : -0.00000300f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here
    3db2:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <lastPhaseStepsPhase.2972+0x3>
    3db6:	81 11       	cpse	r24, r1
    3db8:	05 c0       	rjmp	.+10     	; 0x3dc4 <main_fw_giveAway+0x206e>
    3dba:	6c e9       	ldi	r22, 0x9C	; 156
    3dbc:	73 e5       	ldi	r23, 0x53	; 83
    3dbe:	89 e4       	ldi	r24, 0x49	; 73
    3dc0:	96 eb       	ldi	r25, 0xB6	; 182
    3dc2:	04 c0       	rjmp	.+8      	; 0x3dcc <main_fw_giveAway+0x2076>
    3dc4:	62 e8       	ldi	r22, 0x82	; 130
			isAfterSignRev = true;
		}
		lastPhaseStepsPhase = phaseStepsPhase;

		/* frequency drift correction */
		phaseStepsFrequency += phaseStepsPhase * (isAfterSignRev ?  0.00001500f
    3dc6:	78 ea       	ldi	r23, 0xA8	; 168
    3dc8:	8b e7       	ldi	r24, 0x7B	; 123
    3dca:	97 e3       	ldi	r25, 0x37	; 55
    3dcc:	a7 01       	movw	r20, r14
    3dce:	96 01       	movw	r18, r12
    3dd0:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	a9 01       	movw	r20, r18
    3dda:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
																 : -0.00000300f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here

		/* mainPpm calculations */
		float phaseStepsErrorDiff = phaseStepsErrorSum / MEAN_PHASE_PPM_STAGES_F;
    3dde:	2b 01       	movw	r4, r22
    3de0:	3c 01       	movw	r6, r24
    3de2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <phaseStepsErrorSum.2962>
    3de6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <phaseStepsErrorSum.2962+0x1>
    3dea:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <phaseStepsErrorSum.2962+0x2>
    3dee:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <phaseStepsErrorSum.2962+0x3>
    3df2:	8b 83       	std	Y+3, r24	; 0x03
    3df4:	9c 83       	std	Y+4, r25	; 0x04
    3df6:	ad 83       	std	Y+5, r26	; 0x05
    3df8:	be 83       	std	Y+6, r27	; 0x06
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	40 ee       	ldi	r20, 0xE0	; 224
    3e00:	50 e4       	ldi	r21, 0x40	; 64
    3e02:	bc 01       	movw	r22, r24
    3e04:	cd 01       	movw	r24, r26
    3e06:	0e 94 b5 30 	call	0x616a	; 0x616a <__divsf3>
    3e0a:	6b 87       	std	Y+11, r22	; 0x0b
		mainPpm = mainCoef_b02_qrg_k_pPwmStep_25C_ppm * phaseStepsErrorDiff;
    3e0c:	7c 87       	std	Y+12, r23	; 0x0c
    3e0e:	8d 87       	std	Y+13, r24	; 0x0d
    3e10:	9e 87       	std	Y+14, r25	; 0x0e
    3e12:	9b 01       	movw	r18, r22
    3e14:	ac 01       	movw	r20, r24
    3e16:	60 91 a6 05 	lds	r22, 0x05A6	; 0x8005a6 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    3e1a:	70 91 a7 05 	lds	r23, 0x05A7	; 0x8005a7 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    3e1e:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
    3e22:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    3e26:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    3e2a:	60 93 7d 05 	sts	0x057D, r22	; 0x80057d <mainPpm>
    3e2e:	70 93 7e 05 	sts	0x057E, r23	; 0x80057e <mainPpm+0x1>
    3e32:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <mainPpm+0x2>
		if (phaseStepsFrequency >= 0.0f) {
    3e36:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <mainPpm+0x3>
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	a9 01       	movw	r20, r18
    3e40:	c3 01       	movw	r24, r6
			phaseStepsErrorSum += (phaseStepsFrequency - phaseStepsErrorDiff);
    3e42:	b2 01       	movw	r22, r4
    3e44:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__gesf2>
    3e48:	2b 85       	ldd	r18, Y+11	; 0x0b
																 : -0.00000300f) ;	// magic values XXX DRIFTING FREQUENCY trimming is done here

		/* mainPpm calculations */
		float phaseStepsErrorDiff = phaseStepsErrorSum / MEAN_PHASE_PPM_STAGES_F;
		mainPpm = mainCoef_b02_qrg_k_pPwmStep_25C_ppm * phaseStepsErrorDiff;
		if (phaseStepsFrequency >= 0.0f) {
    3e4a:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e4c:	4d 85       	ldd	r20, Y+13	; 0x0d
			phaseStepsErrorSum += (phaseStepsFrequency - phaseStepsErrorDiff);
    3e4e:	5e 85       	ldd	r21, Y+14	; 0x0e
    3e50:	87 fd       	sbrc	r24, 7
    3e52:	03 c0       	rjmp	.+6      	; 0x3e5a <main_fw_giveAway+0x2104>
		} else {
			phaseStepsErrorSum += (-phaseStepsFrequency - phaseStepsErrorDiff);
    3e54:	c3 01       	movw	r24, r6
    3e56:	b2 01       	movw	r22, r4
    3e58:	03 c0       	rjmp	.+6      	; 0x3e60 <main_fw_giveAway+0x210a>
    3e5a:	c3 01       	movw	r24, r6
    3e5c:	b2 01       	movw	r22, r4
    3e5e:	90 58       	subi	r25, 0x80	; 128
    3e60:	0e 94 4c 30 	call	0x6098	; 0x6098 <__subsf3>
    3e64:	2b 81       	ldd	r18, Y+3	; 0x03
    3e66:	3c 81       	ldd	r19, Y+4	; 0x04
    3e68:	4d 81       	ldd	r20, Y+5	; 0x05
    3e6a:	5e 81       	ldd	r21, Y+6	; 0x06
    3e6c:	0e 94 4d 30 	call	0x609a	; 0x609a <__addsf3>
    3e70:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <phaseStepsErrorSum.2962>
    3e74:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <phaseStepsErrorSum.2962+0x1>
    3e78:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <phaseStepsErrorSum.2962+0x2>

static float pwmTimerCorrection(float correction, uint8_t doSingleLoad)
{
	float ret = 0.0f;

	if (correction) {
    3e7c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <phaseStepsErrorSum.2962+0x3>
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	a9 01       	movw	r20, r18
    3e86:	c3 01       	movw	r24, r6
    3e88:	b2 01       	movw	r22, r4
    3e8a:	0e 94 b1 30 	call	0x6162	; 0x6162 <__cmpsf2>
		uint8_t localFastPwmXXXVal;
		uint8_t localFastPwmSubXXXVal;

		uint8_t sreg = SREG;
    3e8e:	88 23       	and	r24, r24
		cli();
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <main_fw_giveAway+0x213e>
		localFastPwmXXXVal		= fastPwmLoopVal;
    3e92:	af c9       	rjmp	.-3234   	; 0x31f2 <main_fw_giveAway+0x149c>
    3e94:	1f b7       	in	r17, 0x3f	; 63
    3e96:	f8 94       	cli
		localFastPwmSubXXXVal	= fastPwmSubLoopVal;
    3e98:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <fastPwmLoopVal>
    3e9c:	8a 83       	std	Y+2, r24	; 0x02
		SREG = sreg;
    3e9e:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <fastPwmSubLoopVal>

		ret =  main_fw_calcTimerAdj(correction, &localFastPwmXXXVal, &localFastPwmSubXXXVal);
    3ea2:	89 83       	std	Y+1, r24	; 0x01
    3ea4:	1f bf       	out	0x3f, r17	; 63
    3ea6:	9e 01       	movw	r18, r28
    3ea8:	2f 5f       	subi	r18, 0xFF	; 255
    3eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    3eac:	ae 01       	movw	r20, r28
    3eae:	4e 5f       	subi	r20, 0xFE	; 254
    3eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    3eb2:	c3 01       	movw	r24, r6

		cli();
    3eb4:	b2 01       	movw	r22, r4
		if (!doSingleLoad) {
			fastPwmLoopVal		= localFastPwmXXXVal;			// single frequency correction
    3eb6:	0e 94 38 0a 	call	0x1470	; 0x1470 <main_fw_calcTimerAdj>
    3eba:	f8 94       	cli
			fastPwmSubLoopVal	= localFastPwmSubXXXVal;
    3ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebe:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <fastPwmLoopVal>
		} else {
			fastPwmSingleVal	= localFastPwmXXXVal;			// phase hammering correction
			fastPwmSubSingleVal	= localFastPwmSubXXXVal;
			fastPwmSingleLoad	= true;
		}
		SREG = sreg;
    3ec2:	89 81       	ldd	r24, Y+1	; 0x01
    3ec4:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <fastPwmSubLoopVal>
		clkPullPwm_fw_setPin(true);								// for debugging purposes only
	}
#else
	/* due to the fact that the clkFastCtr interrupts every 12.8 µs there is no chance to power down */
#endif
}
    3ec8:	1f bf       	out	0x3f, r17	; 63
    3eca:	93 c9       	rjmp	.-3290   	; 0x31f2 <main_fw_giveAway+0x149c>
    3ecc:	65 96       	adiw	r28, 0x15	; 21
    3ece:	0f b6       	in	r0, 0x3f	; 63
    3ed0:	f8 94       	cli
    3ed2:	de bf       	out	0x3e, r29	; 62
    3ed4:	0f be       	out	0x3f, r0	; 63
    3ed6:	cd bf       	out	0x3d, r28	; 61
    3ed8:	df 91       	pop	r29
    3eda:	cf 91       	pop	r28
    3edc:	1f 91       	pop	r17
    3ede:	0f 91       	pop	r16
    3ee0:	ff 90       	pop	r15
    3ee2:	ef 90       	pop	r14
    3ee4:	df 90       	pop	r13
    3ee6:	cf 90       	pop	r12
    3ee8:	bf 90       	pop	r11
    3eea:	af 90       	pop	r10
    3eec:	9f 90       	pop	r9
    3eee:	8f 90       	pop	r8
    3ef0:	7f 90       	pop	r7
    3ef2:	6f 90       	pop	r6
    3ef4:	5f 90       	pop	r5
    3ef6:	4f 90       	pop	r4
    3ef8:	3f 90       	pop	r3
    3efa:	2f 90       	pop	r2
    3efc:	08 95       	ret

00003efe <main>:
int main(void)
{
	/* init AVR */
	{
		/* initial interrupt set-up */
		cli();
    3efe:	f8 94       	cli
	__asm__ __volatile__ ("reti" ::: "memory");
}


static inline void vectortable_to_firmware(void) {
	cli();
    3f00:	f8 94       	cli
	asm volatile											// set active vector table into the application section
    3f02:	81 e0       	ldi	r24, 0x01	; 1
    3f04:	85 bf       	out	0x35, r24	; 53
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	85 bf       	out	0x35, r24	; 53
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	a8 95       	wdr
    3f10:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3f14:	88 61       	ori	r24, 0x18	; 24
    3f16:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3f1a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3f1e:	0f be       	out	0x3f, r0	; 63
		cli();
		vectortable_to_firmware();
		wdt_init();

		/* activate hardware for this configuration */
		PRR    = 0xEF;										// disable all modules within the Power Reduction Register
    3f20:	8f ee       	ldi	r24, 0xEF	; 239
    3f22:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		ACSR  |= _BV(ACD);									// switch on Analog Comparator Disable
    3f26:	80 b7       	in	r24, 0x30	; 48
    3f28:	80 68       	ori	r24, 0x80	; 128
    3f2a:	80 bf       	out	0x30, r24	; 48
		DIDR1 |= (0b11 << AIN0D);							// disable digital input buffers on AIN0 and AIN1
    3f2c:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
    3f30:	83 60       	ori	r24, 0x03	; 3
    3f32:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
		MCUCR &= ~(_BV(PUD));								// switch off Pull-Up Disable
    3f36:	85 b7       	in	r24, 0x35	; 53
    3f38:	8f 7e       	andi	r24, 0xEF	; 239
    3f3a:	85 bf       	out	0x35, r24	; 53

		/* PWM & debugging first */
		clkPullPwm_fw_init();
    3f3c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <clkPullPwm_fw_init>
    3f40:	ea ef       	ldi	r30, 0xFA	; 250
    3f42:	f7 e0       	ldi	r31, 0x07	; 7

		/* Stack-Check init before the modules */
		for (int idx = MAIN_STACK_CHECK_SIZE; idx;) {		// DEBUG
			stackCheckMungWall[--idx] = 0x5a;
    3f44:	8a e5       	ldi	r24, 0x5A	; 90
    3f46:	82 93       	st	-Z, r24

		/* PWM & debugging first */
		clkPullPwm_fw_init();

		/* Stack-Check init before the modules */
		for (int idx = MAIN_STACK_CHECK_SIZE; idx;) {		// DEBUG
    3f48:	95 e0       	ldi	r25, 0x05	; 5
    3f4a:	ea 3d       	cpi	r30, 0xDA	; 218
    3f4c:	f9 07       	cpc	r31, r25
    3f4e:	d9 f7       	brne	.-10     	; 0x3f46 <main+0x48>
			stackCheckMungWall[--idx] = 0x5a;
		}

		/* init the other modules */
		clkFastCtr_fw_init();
    3f50:	0e 94 be 08 	call	0x117c	; 0x117c <clkFastCtr_fw_init>
		anlgComp_fw_init();
    3f54:	0e 94 2a 08 	call	0x1054	; 0x1054 <anlgComp_fw_init>
		serial_fw_init();

		usb_fw_init();
    3f58:	03 d4       	rcall	.+2054   	; 0x4760 <serial_fw_init>
    3f5a:	0e 94 f5 28 	call	0x51ea	; 0x51ea <usb_fw_init>
		sei();
		usbIsUp = true;
    3f5e:	78 94       	sei

		/* init TWI submodule, clock and ports */
		twi_fw_init();
		twi_mcp23017_fw_init();
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <usbIsUp>
		twi_mcp23017_av1624_fw_init();
		twi_smart_lcd_fw_init();
    3f66:	68 d5       	rcall	.+2768   	; 0x4a38 <twi_fw_init>
    3f68:	63 d7       	rcall	.+3782   	; 0x4e30 <twi_mcp23017_fw_init>

		/* check CRC of all blocks and update with default values if the data is non-valid */
		memory_fw_manageNonVolatileData();
    3f6a:	d4 d7       	rcall	.+4008   	; 0x4f14 <twi_mcp23017_av1624_fw_init>

		/* read MEASURING coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_HEADER_NR)) {
    3f6c:	0e 94 69 28 	call	0x50d2	; 0x50d2 <twi_smart_lcd_fw_init>
    3f70:	0d d2       	rcall	.+1050   	; 0x438c <memory_fw_manageNonVolatileData>
    3f72:	60 e0       	ldi	r22, 0x00	; 0
    3f74:	8d e8       	ldi	r24, 0x8D	; 141
    3f76:	93 e0       	ldi	r25, 0x03	; 3
    3f78:	70 d1       	rcall	.+736    	; 0x425a <memory_fw_readEepromValidBlock>
			eeprom_b00_t* b00 = (eeprom_b00_t*) &mainFormatBuffer;
			memcpy(mainCoef_b00_dev_header, b00->b00_header, sizeof(mainCoef_b00_dev_header) - 1);
    3f7a:	88 23       	and	r24, r24
    3f7c:	39 f1       	breq	.+78     	; 0x3fcc <main+0xce>
    3f7e:	80 e1       	ldi	r24, 0x10	; 16
    3f80:	ed e8       	ldi	r30, 0x8D	; 141
    3f82:	f3 e0       	ldi	r31, 0x03	; 3
    3f84:	a6 ec       	ldi	r26, 0xC6	; 198
    3f86:	b5 e0       	ldi	r27, 0x05	; 5
    3f88:	01 90       	ld	r0, Z+
    3f8a:	0d 92       	st	X+, r0
			mainCoef_b00_dev_header[sizeof(mainCoef_b00_dev_header) - 1] = 0;
    3f8c:	8a 95       	dec	r24
    3f8e:	e1 f7       	brne	.-8      	; 0x3f88 <main+0x8a>

			mainCoef_b00_dev_serial					= b00->b00_device_serial;
    3f90:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <mainCoef_b00_dev_header+0x10>
    3f94:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <mainFormatBuffer+0x12>
    3f98:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <mainFormatBuffer+0x13>
    3f9c:	90 93 c5 05 	sts	0x05C5, r25	; 0x8005c5 <mainCoef_b00_dev_serial+0x1>
			mainCoef_b00_dev_version				= b00->b00_version;
    3fa0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <mainCoef_b00_dev_serial>
    3fa4:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <mainFormatBuffer+0x10>
    3fa8:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <mainFormatBuffer+0x11>
    3fac:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <mainCoef_b00_dev_version+0x1>
			main_bf.mainLcdLedMode					= b00->b00_lcdLedMode;
    3fb0:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <mainCoef_b00_dev_version>
    3fb4:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <mainFormatBuffer+0x14>
    3fb8:	98 2f       	mov	r25, r24
    3fba:	92 95       	swap	r25
    3fbc:	99 0f       	add	r25, r25
    3fbe:	90 7e       	andi	r25, 0xE0	; 224
    3fc0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    3fc4:	8f 71       	andi	r24, 0x1F	; 31
		}

		/* read MEASURING coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_MEASURING_NR)) {
    3fc6:	89 2b       	or	r24, r25
    3fc8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
    3fcc:	61 e0       	ldi	r22, 0x01	; 1
    3fce:	8d e8       	ldi	r24, 0x8D	; 141
    3fd0:	93 e0       	ldi	r25, 0x03	; 3
    3fd2:	43 d1       	rcall	.+646    	; 0x425a <memory_fw_readEepromValidBlock>
    3fd4:	88 23       	and	r24, r24
			eeprom_b01_t* b01 = (eeprom_b01_t*) &mainFormatBuffer;
			mainCoef_b01_ref_AREF_V					= b01->b01_ref_AREF_V;
    3fd6:	09 f4       	brne	.+2      	; 0x3fda <main+0xdc>
    3fd8:	40 c0       	rjmp	.+128    	; 0x405a <main+0x15c>
    3fda:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <mainFormatBuffer>
    3fde:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <mainFormatBuffer+0x1>
    3fe2:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <mainFormatBuffer+0x2>
    3fe6:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <mainFormatBuffer+0x3>
    3fea:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <mainCoef_b01_ref_AREF_V>
    3fee:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <mainCoef_b01_ref_AREF_V+0x1>
    3ff2:	a0 93 c0 05 	sts	0x05C0, r26	; 0x8005c0 <mainCoef_b01_ref_AREF_V+0x2>
			mainCoef_b01_ref_1V1_V					= b01->b01_ref_1V1_V;
    3ff6:	b0 93 c1 05 	sts	0x05C1, r27	; 0x8005c1 <mainCoef_b01_ref_AREF_V+0x3>
    3ffa:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <mainFormatBuffer+0x4>
    3ffe:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <mainFormatBuffer+0x5>
    4002:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <mainFormatBuffer+0x6>
    4006:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <mainFormatBuffer+0x7>
    400a:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <mainCoef_b01_ref_1V1_V>
    400e:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <mainCoef_b01_ref_1V1_V+0x1>
    4012:	a0 93 bc 05 	sts	0x05BC, r26	; 0x8005bc <mainCoef_b01_ref_1V1_V+0x2>
			mainCoef_b01_temp_ofs_adc_25C_steps		= b01->b01_temp_ofs_adc_25C_steps;
    4016:	b0 93 bd 05 	sts	0x05BD, r27	; 0x8005bd <mainCoef_b01_ref_1V1_V+0x3>
    401a:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <mainFormatBuffer+0x8>
    401e:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <mainFormatBuffer+0x9>
    4022:	a0 91 97 03 	lds	r26, 0x0397	; 0x800397 <mainFormatBuffer+0xa>
    4026:	b0 91 98 03 	lds	r27, 0x0398	; 0x800398 <mainFormatBuffer+0xb>
    402a:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <mainCoef_b01_temp_ofs_adc_25C_steps>
    402e:	90 93 b7 05 	sts	0x05B7, r25	; 0x8005b7 <mainCoef_b01_temp_ofs_adc_25C_steps+0x1>
    4032:	a0 93 b8 05 	sts	0x05B8, r26	; 0x8005b8 <mainCoef_b01_temp_ofs_adc_25C_steps+0x2>
			mainCoef_b01_temp_k_p1step_adc_K		= b01->b01_temp_k_p1step_adc_K;
    4036:	b0 93 b9 05 	sts	0x05B9, r27	; 0x8005b9 <mainCoef_b01_temp_ofs_adc_25C_steps+0x3>
    403a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <mainFormatBuffer+0xc>
    403e:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <mainFormatBuffer+0xd>
    4042:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <mainFormatBuffer+0xe>
    4046:	b0 91 9c 03 	lds	r27, 0x039C	; 0x80039c <mainFormatBuffer+0xf>
    404a:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <mainCoef_b01_temp_k_p1step_adc_K>
    404e:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <mainCoef_b01_temp_k_p1step_adc_K+0x1>
    4052:	a0 93 b4 05 	sts	0x05B4, r26	; 0x8005b4 <mainCoef_b01_temp_k_p1step_adc_K+0x2>
		}

		/* read REFERENCE OSCILLATOR (REFOSC) coefficients */
		if (memory_fw_readEepromValidBlock(mainFormatBuffer, BLOCK_REFOSC_NR)) {
    4056:	b0 93 b5 05 	sts	0x05B5, r27	; 0x8005b5 <mainCoef_b01_temp_k_p1step_adc_K+0x3>
    405a:	62 e0       	ldi	r22, 0x02	; 2
    405c:	8d e8       	ldi	r24, 0x8D	; 141
    405e:	93 e0       	ldi	r25, 0x03	; 3
    4060:	fc d0       	rcall	.+504    	; 0x425a <memory_fw_readEepromValidBlock>
    4062:	88 23       	and	r24, r24
			eeprom_b02_t* b02 = (eeprom_b02_t*) &mainFormatBuffer;
			mainCoef_b02_qrg_ofs_minV_25C_ppm		= b02->b02_qrg_ofs_minV_25C_ppm;
    4064:	09 f4       	brne	.+2      	; 0x4068 <main+0x16a>
    4066:	50 c0       	rjmp	.+160    	; 0x4108 <main+0x20a>
    4068:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <mainFormatBuffer>
    406c:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <mainFormatBuffer+0x1>
    4070:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <mainFormatBuffer+0x2>
    4074:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <mainFormatBuffer+0x3>
    4078:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <mainCoef_b02_qrg_ofs_minV_25C_ppm>
    407c:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x1>
    4080:	a0 93 b0 05 	sts	0x05B0, r26	; 0x8005b0 <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x2>
			mainCoef_b02_qrg_ofs_maxV_25C_ppm		= b02->b02_qrg_ofs_maxV_25C_ppm;
    4084:	b0 93 b1 05 	sts	0x05B1, r27	; 0x8005b1 <mainCoef_b02_qrg_ofs_minV_25C_ppm+0x3>
    4088:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <mainFormatBuffer+0x4>
    408c:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <mainFormatBuffer+0x5>
    4090:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <mainFormatBuffer+0x6>
    4094:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <mainFormatBuffer+0x7>
    4098:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <mainCoef_b02_qrg_ofs_maxV_25C_ppm>
    409c:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x1>
    40a0:	a0 93 ac 05 	sts	0x05AC, r26	; 0x8005ac <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x2>
			mainCoef_b02_qrg_k_pPwmStep_25C_ppm		= b02->b02_qrg_k_pPwmStep_25C_ppm;
    40a4:	b0 93 ad 05 	sts	0x05AD, r27	; 0x8005ad <mainCoef_b02_qrg_ofs_maxV_25C_ppm+0x3>
    40a8:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <mainFormatBuffer+0x8>
    40ac:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <mainFormatBuffer+0x9>
    40b0:	a0 91 97 03 	lds	r26, 0x0397	; 0x800397 <mainFormatBuffer+0xa>
    40b4:	b0 91 98 03 	lds	r27, 0x0398	; 0x800398 <mainFormatBuffer+0xb>
    40b8:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm>
    40bc:	90 93 a7 05 	sts	0x05A7, r25	; 0x8005a7 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x1>
    40c0:	a0 93 a8 05 	sts	0x05A8, r26	; 0x8005a8 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x2>
			mainCoef_b02_pwm_minV_V					= b02->b02_pwm_minV_V;
    40c4:	b0 93 a9 05 	sts	0x05A9, r27	; 0x8005a9 <mainCoef_b02_qrg_k_pPwmStep_25C_ppm+0x3>
    40c8:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <mainFormatBuffer+0x12>
    40cc:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <mainFormatBuffer+0x13>
    40d0:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <mainFormatBuffer+0x14>
    40d4:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <mainFormatBuffer+0x15>
    40d8:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <mainCoef_b02_pwm_minV_V>
    40dc:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <mainCoef_b02_pwm_minV_V+0x1>
    40e0:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <mainCoef_b02_pwm_minV_V+0x2>
			mainCoef_b02_pwm_maxV_V					= b02->b02_pwm_maxV_V;
    40e4:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <mainCoef_b02_pwm_minV_V+0x3>
    40e8:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <mainFormatBuffer+0x16>
    40ec:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <mainFormatBuffer+0x17>
    40f0:	a0 91 a5 03 	lds	r26, 0x03A5	; 0x8003a5 <mainFormatBuffer+0x18>
    40f4:	b0 91 a6 03 	lds	r27, 0x03A6	; 0x8003a6 <mainFormatBuffer+0x19>
    40f8:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <mainCoef_b02_pwm_maxV_V>
    40fc:	90 93 9f 05 	sts	0x059F, r25	; 0x80059f <mainCoef_b02_pwm_maxV_V+0x1>
    4100:	a0 93 a0 05 	sts	0x05A0, r26	; 0x8005a0 <mainCoef_b02_pwm_maxV_V+0x2>

			/*	b02_pwm_initial			treated by df4iah_fw_clkPullPwm */
			/* 	b02_pwm_initial_sub		treated by df4iah_fw_clkPullPwm */
		}

		if (!(main_bf.mainIsLcdAttached) && !(main_bf.mainIsSmartAttached)) {
    4104:	b0 93 a1 05 	sts	0x05A1, r27	; 0x8005a1 <mainCoef_b02_pwm_maxV_V+0x3>
    4108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    410c:	87 fd       	sbrc	r24, 7
    410e:	0a c0       	rjmp	.+20     	; 0x4124 <main+0x226>
    4110:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
}

static void main_fw_sendInitialHelp(void)
{
#if 1
	ringbuffer_fw_ringBufferWaitAppend(true, true, PM_COMMAND_HELP, sizeof(PM_COMMAND_HELP));
    4114:	80 fd       	sbrc	r24, 0
    4116:	06 c0       	rjmp	.+12     	; 0x4124 <main+0x226>
    4118:	25 e0       	ldi	r18, 0x05	; 5
    411a:	42 e1       	ldi	r20, 0x12	; 18
    411c:	5c e0       	ldi	r21, 0x0C	; 12
    411e:	61 e0       	ldi	r22, 0x01	; 1
#if 1
    while (true) {
#else
    while (!(main_bf.mainStopAvr)) {
#endif
    	main_fw_giveAway();
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	a7 d2       	rcall	.+1358   	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    4124:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <main_fw_giveAway>
    4128:	fd cf       	rjmp	.-6      	; 0x4124 <main+0x226>

0000412a <memory_fw_copyBuffer>:
	}
}

void memory_fw_writeFlashPage(uint8_t source[], pagebuf_t size, uint32_t baddr)
{
	memory_bl_writeFlashPage(source, size, baddr);
    412a:	cf 93       	push	r28
    412c:	df 93       	push	r29
    412e:	d6 2f       	mov	r29, r22
    4130:	c7 2f       	mov	r28, r23
    4132:	ba 01       	movw	r22, r20
    4134:	88 23       	and	r24, r24
    4136:	29 f0       	breq	.+10     	; 0x4142 <memory_fw_copyBuffer+0x18>
    4138:	ad 2f       	mov	r26, r29
    413a:	bc 2f       	mov	r27, r28
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	07 c0       	rjmp	.+14     	; 0x4150 <memory_fw_copyBuffer+0x26>
    4142:	a9 01       	movw	r20, r18
    4144:	8d 2f       	mov	r24, r29
    4146:	9c 2f       	mov	r25, r28
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	0c 94 39 34 	jmp	0x6872	; 0x6872 <memcpy>
    4150:	82 17       	cp	r24, r18
    4152:	93 07       	cpc	r25, r19
    4154:	39 f0       	breq	.+14     	; 0x4164 <memory_fw_copyBuffer+0x3a>
    4156:	fb 01       	movw	r30, r22
    4158:	e8 0f       	add	r30, r24
    415a:	f9 1f       	adc	r31, r25
    415c:	e4 91       	lpm	r30, Z
    415e:	ed 93       	st	X+, r30
    4160:	01 96       	adiw	r24, 0x01	; 1
    4162:	f6 cf       	rjmp	.-20     	; 0x4150 <memory_fw_copyBuffer+0x26>
    4164:	8d 2f       	mov	r24, r29
    4166:	9c 2f       	mov	r25, r28
    4168:	df 91       	pop	r29
    416a:	cf 91       	pop	r28
    416c:	08 95       	ret

0000416e <memory_fw_getSealMarker>:
    416e:	20 e1       	ldi	r18, 0x10	; 16
    4170:	82 9f       	mul	r24, r18
    4172:	c0 01       	movw	r24, r0
    4174:	11 24       	eor	r1, r1
    4176:	8c 60       	ori	r24, 0x0C	; 12
    4178:	90 6b       	ori	r25, 0xB0	; 176
    417a:	08 95       	ret

0000417c <memory_fw_calcBlockCrc>:
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	fc 01       	movw	r30, r24
    4182:	dc 01       	movw	r26, r24
    4184:	5e 96       	adiw	r26, 0x1e	; 30
    4186:	25 ea       	ldi	r18, 0xA5	; 165
    4188:	35 ea       	ldi	r19, 0xA5	; 165
    418a:	60 e1       	ldi	r22, 0x10	; 16
    418c:	e9 01       	movw	r28, r18
    418e:	cc 0f       	add	r28, r28
    4190:	dd 1f       	adc	r29, r29
    4192:	83 2f       	mov	r24, r19
    4194:	88 1f       	adc	r24, r24
    4196:	88 27       	eor	r24, r24
    4198:	88 1f       	adc	r24, r24
    419a:	92 2f       	mov	r25, r18
    419c:	91 70       	andi	r25, 0x01	; 1
    419e:	98 27       	eor	r25, r24
    41a0:	a9 01       	movw	r20, r18
    41a2:	45 2f       	mov	r20, r21
    41a4:	55 27       	eor	r21, r21
    41a6:	42 95       	swap	r20
    41a8:	46 95       	lsr	r20
    41aa:	47 70       	andi	r20, 0x07	; 7
    41ac:	41 70       	andi	r20, 0x01	; 1
    41ae:	94 27       	eor	r25, r20
    41b0:	33 fb       	bst	r19, 3
    41b2:	33 27       	eor	r19, r19
    41b4:	30 f9       	bld	r19, 0
    41b6:	93 27       	eor	r25, r19
    41b8:	27 fb       	bst	r18, 7
    41ba:	88 27       	eor	r24, r24
    41bc:	80 f9       	bld	r24, 0
    41be:	98 27       	eor	r25, r24
    41c0:	22 fb       	bst	r18, 2
    41c2:	22 27       	eor	r18, r18
    41c4:	20 f9       	bld	r18, 0
    41c6:	29 27       	eor	r18, r25
    41c8:	ce 01       	movw	r24, r28
    41ca:	82 2b       	or	r24, r18
    41cc:	9c 01       	movw	r18, r24
    41ce:	61 50       	subi	r22, 0x01	; 1
    41d0:	e9 f6       	brne	.-70     	; 0x418c <memory_fw_calcBlockCrc+0x10>
    41d2:	81 91       	ld	r24, Z+
    41d4:	28 27       	eor	r18, r24
    41d6:	ea 17       	cp	r30, r26
    41d8:	fb 07       	cpc	r31, r27
    41da:	b9 f6       	brne	.-82     	; 0x418a <memory_fw_calcBlockCrc+0xe>
    41dc:	c9 01       	movw	r24, r18
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	08 95       	ret

000041e4 <memory_fw_readFlashPage>:
    41e4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <memory_bl_readFlashPage>
    41e8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <memory_bl_readFlashPage+0x1>
    41ec:	09 94       	ijmp

000041ee <memory_fw_readEEpromPage>:
    41ee:	ef 92       	push	r14
    41f0:	ff 92       	push	r15
    41f2:	1f 93       	push	r17
    41f4:	cf 93       	push	r28
    41f6:	df 93       	push	r29
    41f8:	16 2f       	mov	r17, r22
    41fa:	ec 01       	movw	r28, r24
    41fc:	7a 01       	movw	r14, r20
    41fe:	e8 1a       	sub	r14, r24
    4200:	f9 0a       	sbc	r15, r25
    4202:	11 23       	and	r17, r17
    4204:	41 f0       	breq	.+16     	; 0x4216 <memory_fw_readEEpromPage+0x28>
    4206:	c7 01       	movw	r24, r14
    4208:	8c 0f       	add	r24, r28
    420a:	9d 1f       	adc	r25, r29
    420c:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <eeprom_read_byte>
    4210:	89 93       	st	Y+, r24
    4212:	11 50       	subi	r17, 0x01	; 1
    4214:	f6 cf       	rjmp	.-20     	; 0x4202 <memory_fw_readEEpromPage+0x14>
    4216:	df 91       	pop	r29
    4218:	cf 91       	pop	r28
    421a:	1f 91       	pop	r17
    421c:	ff 90       	pop	r15
    421e:	ef 90       	pop	r14
    4220:	08 95       	ret

00004222 <memory_fw_isEepromBlockValid>:
    4222:	cf 93       	push	r28
    4224:	df 93       	push	r29
    4226:	88 30       	cpi	r24, 0x08	; 8
    4228:	98 f4       	brcc	.+38     	; 0x4250 <memory_fw_isEepromBlockValid+0x2e>
    422a:	90 e2       	ldi	r25, 0x20	; 32
    422c:	89 9f       	mul	r24, r25
    422e:	a0 01       	movw	r20, r0
    4230:	11 24       	eor	r1, r1
    4232:	60 e2       	ldi	r22, 0x20	; 32
    4234:	8d e8       	ldi	r24, 0x8D	; 141
    4236:	93 e0       	ldi	r25, 0x03	; 3
    4238:	da df       	rcall	.-76     	; 0x41ee <memory_fw_readEEpromPage>
    423a:	c0 91 ab 03 	lds	r28, 0x03AB	; 0x8003ab <mainFormatBuffer+0x1e>
    423e:	d0 91 ac 03 	lds	r29, 0x03AC	; 0x8003ac <mainFormatBuffer+0x1f>
    4242:	8d e8       	ldi	r24, 0x8D	; 141
    4244:	93 e0       	ldi	r25, 0x03	; 3
    4246:	9a df       	rcall	.-204    	; 0x417c <memory_fw_calcBlockCrc>
    4248:	21 e0       	ldi	r18, 0x01	; 1
    424a:	8c 17       	cp	r24, r28
    424c:	9d 07       	cpc	r25, r29
    424e:	09 f0       	breq	.+2      	; 0x4252 <memory_fw_isEepromBlockValid+0x30>
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	82 2f       	mov	r24, r18
    4254:	df 91       	pop	r29
    4256:	cf 91       	pop	r28
    4258:	08 95       	ret

0000425a <memory_fw_readEepromValidBlock>:
    425a:	0f 93       	push	r16
    425c:	1f 93       	push	r17
    425e:	cf 93       	push	r28
    4260:	68 30       	cpi	r22, 0x08	; 8
    4262:	10 f0       	brcs	.+4      	; 0x4268 <memory_fw_readEepromValidBlock+0xe>
    4264:	80 e0       	ldi	r24, 0x00	; 0
    4266:	12 c0       	rjmp	.+36     	; 0x428c <memory_fw_readEepromValidBlock+0x32>
    4268:	c6 2f       	mov	r28, r22
    426a:	8c 01       	movw	r16, r24
    426c:	86 2f       	mov	r24, r22
    426e:	d9 df       	rcall	.-78     	; 0x4222 <memory_fw_isEepromBlockValid>
    4270:	88 23       	and	r24, r24
    4272:	c1 f3       	breq	.-16     	; 0x4264 <memory_fw_readEepromValidBlock+0xa>
    4274:	83 e0       	ldi	r24, 0x03	; 3
    4276:	0d 38       	cpi	r16, 0x8D	; 141
    4278:	18 07       	cpc	r17, r24
    427a:	39 f0       	breq	.+14     	; 0x428a <memory_fw_readEepromValidBlock+0x30>
    427c:	80 e2       	ldi	r24, 0x20	; 32
    427e:	c8 9f       	mul	r28, r24
    4280:	a0 01       	movw	r20, r0
    4282:	11 24       	eor	r1, r1
    4284:	60 e2       	ldi	r22, 0x20	; 32
    4286:	c8 01       	movw	r24, r16
    4288:	b2 df       	rcall	.-156    	; 0x41ee <memory_fw_readEEpromPage>
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	cf 91       	pop	r28
    428e:	1f 91       	pop	r17
    4290:	0f 91       	pop	r16
    4292:	08 95       	ret

00004294 <memory_fw_writeEEpromPage>:
}

void memory_fw_writeEEpromPage(uint8_t source[], pagebuf_t size, uint16_t baddr)
{
    4294:	ef 92       	push	r14
    4296:	ff 92       	push	r15
    4298:	0f 93       	push	r16
    429a:	1f 93       	push	r17
    429c:	cf 93       	push	r28
    429e:	8a 01       	movw	r16, r20
    42a0:	7c 01       	movw	r14, r24
	uint8_t idx = 0;

	while (size--) {								// decrease number of bytes to write
    42a2:	c6 2f       	mov	r28, r22
    42a4:	cc 23       	and	r28, r28
    42a6:	51 f0       	breq	.+20     	; 0x42bc <memory_fw_writeEEpromPage+0x28>
		eeprom_write_byte((uint8_t*) baddr, source[idx++]);
    42a8:	f7 01       	movw	r30, r14
    42aa:	61 91       	ld	r22, Z+
    42ac:	7f 01       	movw	r14, r30
    42ae:	c8 01       	movw	r24, r16
    42b0:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <eeprom_write_byte>
		baddr++;									// select next byte
    42b4:	0f 5f       	subi	r16, 0xFF	; 255
    42b6:	1f 4f       	sbci	r17, 0xFF	; 255
    42b8:	c1 50       	subi	r28, 0x01	; 1
    42ba:	f4 cf       	rjmp	.-24     	; 0x42a4 <memory_fw_writeEEpromPage+0x10>
	}												// loop until all bytes written

	// eeprom_busy_wait();
}
    42bc:	cf 91       	pop	r28
    42be:	1f 91       	pop	r17
    42c0:	0f 91       	pop	r16
    42c2:	ff 90       	pop	r15
    42c4:	ef 90       	pop	r14
    42c6:	08 95       	ret

000042c8 <memory_fw_writeEepromBlockMakeValid>:
	// bad usage
	return false;
}

uint8_t memory_fw_writeEepromBlockMakeValid(uint8_t* source, uint8_t blockNr)
{
    42c8:	1f 93       	push	r17
    42ca:	cf 93       	push	r28
    42cc:	df 93       	push	r29
	if (blockNr < BLOCK_COUNT) {
    42ce:	68 30       	cpi	r22, 0x08	; 8
    42d0:	d8 f4       	brcc	.+54     	; 0x4308 <memory_fw_writeEepromBlockMakeValid+0x40>
    42d2:	16 2f       	mov	r17, r22
		uint16_t oldCrcBlock = source[30] | (source[31] << 8);
		uint16_t oldCrcCalc  = memory_fw_calcBlockCrc(source);
    42d4:	ec 01       	movw	r28, r24

		if (oldCrcBlock != oldCrcCalc) {
    42d6:	52 df       	rcall	.-348    	; 0x417c <memory_fw_calcBlockCrc>
    42d8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    42da:	3f 8d       	ldd	r19, Y+31	; 0x1f
    42dc:	28 17       	cp	r18, r24
    42de:	39 07       	cpc	r19, r25
			/* initial CRC calc marker found, seal the content */
			source[30] = (oldCrcCalc & 0xff);
    42e0:	a9 f0       	breq	.+42     	; 0x430c <memory_fw_writeEepromBlockMakeValid+0x44>
			source[31] = (oldCrcCalc >> 8);
    42e2:	8e 8f       	std	Y+30, r24	; 0x1e

			/* any recalculation of the CRC is counted */
			uint16_t counter = source[28] | (source[29] << 8);

			counter++;
    42e4:	9f 8f       	std	Y+31, r25	; 0x1f
    42e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    42e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
			source[28] = (counter & 0xff);
    42ea:	01 96       	adiw	r24, 0x01	; 1
			source[29] = (counter >> 8);

			/* re-calc the CRC */
			uint16_t newCrcCalc = memory_fw_calcBlockCrc(source);
    42ec:	8c 8f       	std	Y+28, r24	; 0x1c
    42ee:	9d 8f       	std	Y+29, r25	; 0x1d

			source[30] = (newCrcCalc & 0xff);
    42f0:	ce 01       	movw	r24, r28
			source[31] = (newCrcCalc >> 8);
    42f2:	44 df       	rcall	.-376    	; 0x417c <memory_fw_calcBlockCrc>

			memory_fw_writeEEpromPage(source, 1 << 5, blockNr << 5);
    42f4:	8e 8f       	std	Y+30, r24	; 0x1e
    42f6:	9f 8f       	std	Y+31, r25	; 0x1f
    42f8:	80 e2       	ldi	r24, 0x20	; 32
    42fa:	18 9f       	mul	r17, r24
    42fc:	a0 01       	movw	r20, r0
    42fe:	11 24       	eor	r1, r1
    4300:	60 e2       	ldi	r22, 0x20	; 32
    4302:	ce 01       	movw	r24, r28
		// block valid
		return true;
	}

	// bad usage
	return false;
    4304:	c7 df       	rcall	.-114    	; 0x4294 <memory_fw_writeEEpromPage>
    4306:	02 c0       	rjmp	.+4      	; 0x430c <memory_fw_writeEepromBlockMakeValid+0x44>
{
	if (blockNr < BLOCK_COUNT) {
		uint16_t oldCrcBlock = source[30] | (source[31] << 8);
		uint16_t oldCrcCalc  = memory_fw_calcBlockCrc(source);

		if (oldCrcBlock != oldCrcCalc) {
    4308:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	}

	// bad usage
	return false;
}
    430a:	01 c0       	rjmp	.+2      	; 0x430e <memory_fw_writeEepromBlockMakeValid+0x46>
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	df 91       	pop	r29
    4310:	cf 91       	pop	r28
    4312:	1f 91       	pop	r17
    4314:	08 95       	ret

00004316 <memory_fw_manageBlock>:
	// bad usage or not valid block
	return false;
}

uint8_t memory_fw_manageBlock(uint8_t blockNr)
{
    4316:	1f 93       	push	r17
    4318:	cf 93       	push	r28
    431a:	df 93       	push	r29
	if (blockNr < BLOCK_COUNT) {
    431c:	88 30       	cpi	r24, 0x08	; 8
    431e:	10 f0       	brcs	.+4      	; 0x4324 <memory_fw_manageBlock+0xe>
			return 0;
		}
	}

	// bad usage or not a valid block
	return 0;
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	30 c0       	rjmp	.+96     	; 0x4384 <memory_fw_manageBlock+0x6e>
}

uint8_t memory_fw_manageBlock(uint8_t blockNr)
{
	if (blockNr < BLOCK_COUNT) {
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
    4324:	18 2f       	mov	r17, r24
    4326:	7d df       	rcall	.-262    	; 0x4222 <memory_fw_isEepromBlockValid>
    4328:	81 11       	cpse	r24, r1
	}
}

uint16_t memory_fw_getSealMarker(uint8_t blockNr)
{
	return (0xb00c | (blockNr << 4));
    432a:	fa cf       	rjmp	.-12     	; 0x4320 <memory_fw_manageBlock+0xa>
    432c:	21 2f       	mov	r18, r17
	if (blockNr < BLOCK_COUNT) {
		if (!memory_fw_isEepromBlockValid(blockNr)) {  // HINT: memory_fw_isEepromBlockValid() preloads eepromBlockCopy
			/* the block is non-valid, reload the EEPROM block with the default data */
			uint16_t oldCrcBlock = mainFormatBuffer[30] | (mainFormatBuffer[31] << 8);

			if (oldCrcBlock != memory_fw_getSealMarker(blockNr)) {
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	c9 01       	movw	r24, r18
    4332:	44 e0       	ldi	r20, 0x04	; 4
    4334:	88 0f       	add	r24, r24
    4336:	99 1f       	adc	r25, r25
    4338:	4a 95       	dec	r20
    433a:	e1 f7       	brne	.-8      	; 0x4334 <memory_fw_manageBlock+0x1e>
    433c:	8c 60       	ori	r24, 0x0C	; 12
    433e:	90 6b       	ori	r25, 0xB0	; 176
    4340:	40 91 ab 03 	lds	r20, 0x03AB	; 0x8003ab <mainFormatBuffer+0x1e>
    4344:	50 91 ac 03 	lds	r21, 0x03AC	; 0x8003ac <mainFormatBuffer+0x1f>
    4348:	48 17       	cp	r20, r24
    434a:	59 07       	cpc	r21, r25
    434c:	b1 f0       	breq	.+44     	; 0x437a <memory_fw_manageBlock+0x64>
    434e:	c0 91 a9 03 	lds	r28, 0x03A9	; 0x8003a9 <mainFormatBuffer+0x1c>
    4352:	d0 91 aa 03 	lds	r29, 0x03AA	; 0x8003aa <mainFormatBuffer+0x1d>
				uint16_t counter = mainFormatBuffer[28] | (mainFormatBuffer[29] << 8);

				/* reading default values if not CRC calc marker for sealing is found */
				memory_fw_readFlashPage(mainFormatBuffer,
    4356:	85 e0       	ldi	r24, 0x05	; 5
    4358:	22 0f       	add	r18, r18
    435a:	33 1f       	adc	r19, r19
    435c:	8a 95       	dec	r24
    435e:	e1 f7       	brne	.-8      	; 0x4358 <memory_fw_manageBlock+0x42>
    4360:	2f 5c       	subi	r18, 0xCF	; 207
    4362:	33 4f       	sbci	r19, 0xF3	; 243
    4364:	40 e0       	ldi	r20, 0x00	; 0
    4366:	50 e0       	ldi	r21, 0x00	; 0
    4368:	6c e1       	ldi	r22, 0x1C	; 28
    436a:	8d e8       	ldi	r24, 0x8D	; 141
    436c:	93 e0       	ldi	r25, 0x03	; 3
						(1 << 5) - 4,								// load default data, without counter and special marked CRC value
						(((uint16_t) ((void*) &eeprom_defaultValues_content)) + (blockNr << 5)));

				counter++;
    436e:	3a df       	rcall	.-396    	; 0x41e4 <memory_fw_readFlashPage>
				mainFormatBuffer[28] = (counter & 0xff);
    4370:	21 96       	adiw	r28, 0x01	; 1
    4372:	c0 93 a9 03 	sts	0x03A9, r28	; 0x8003a9 <mainFormatBuffer+0x1c>
				mainFormatBuffer[29] = (counter >> 8);
    4376:	d0 93 aa 03 	sts	0x03AA, r29	; 0x8003aa <mainFormatBuffer+0x1d>
			}

			/* update CRC and write to EEPROM */
			memory_fw_writeEepromBlockMakeValid(mainFormatBuffer, blockNr);
    437a:	61 2f       	mov	r22, r17
    437c:	8d e8       	ldi	r24, 0x8D	; 141
    437e:	93 e0       	ldi	r25, 0x03	; 3
    4380:	a3 df       	rcall	.-186    	; 0x42c8 <memory_fw_writeEepromBlockMakeValid>
		}
	}

	// bad usage or not a valid block
	return 0;
}
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	df 91       	pop	r29
    4386:	cf 91       	pop	r28
    4388:	1f 91       	pop	r17
    438a:	08 95       	ret

0000438c <memory_fw_manageNonVolatileData>:

uint8_t memory_fw_manageNonVolatileData()
{
    438c:	cf 93       	push	r28
    438e:	df 93       	push	r29
    4390:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t ret = 0;
    4392:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t status;

	for (int blockIdx = 0; blockIdx < BLOCK_COUNT; ++blockIdx) {
		status = memory_fw_manageBlock(blockIdx);
    4394:	8c 2f       	mov	r24, r28
    4396:	bf df       	rcall	.-130    	; 0x4316 <memory_fw_manageBlock>
		if (status) {
    4398:	81 11       	cpse	r24, r1
			++ret;
    439a:	df 5f       	subi	r29, 0xFF	; 255
    439c:	cf 5f       	subi	r28, 0xFF	; 255
uint8_t memory_fw_manageNonVolatileData()
{
	uint8_t ret = 0;
	uint8_t status;

	for (int blockIdx = 0; blockIdx < BLOCK_COUNT; ++blockIdx) {
    439e:	c8 30       	cpi	r28, 0x08	; 8
    43a0:	c9 f7       	brne	.-14     	; 0x4394 <memory_fw_manageNonVolatileData+0x8>
		}
	}

	// count of block that needed reloading of default values
	return ret;
}
    43a2:	8d 2f       	mov	r24, r29
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	08 95       	ret

000043aa <ringbuffer_fw_getSemaphore>:


uint8_t ringbuffer_fw_getSemaphore(uint8_t isSend)
{
	uint8_t isLocked;
	uint8_t* semPtr = (isSend ?  &usbRingBufferSendSemaphore : &usbRingBufferRcvSemaphore);
    43aa:	81 11       	cpse	r24, r1
    43ac:	03 c0       	rjmp	.+6      	; 0x43b4 <ringbuffer_fw_getSemaphore+0xa>
    43ae:	e2 e2       	ldi	r30, 0x22	; 34
    43b0:	f5 e0       	ldi	r31, 0x05	; 5
    43b2:	02 c0       	rjmp	.+4      	; 0x43b8 <ringbuffer_fw_getSemaphore+0xe>
    43b4:	e3 e2       	ldi	r30, 0x23	; 35
    43b6:	f5 e0       	ldi	r31, 0x05	; 5
		  "=r" (sreg)
		: "p" (semPtr)
		: "r19"
	);
#else
	uint8_t sreg = SREG;
    43b8:	8f b7       	in	r24, 0x3f	; 63
	cli();
    43ba:	f8 94       	cli
	isLocked = *semPtr;
    43bc:	90 81       	ld	r25, Z
	*semPtr = true;
    43be:	21 e0       	ldi	r18, 0x01	; 1
    43c0:	20 83       	st	Z, r18
	SREG = sreg;
    43c2:	8f bf       	out	0x3f, r24	; 63
#endif
	return !isLocked;
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	91 11       	cpse	r25, r1
    43c8:	80 e0       	ldi	r24, 0x00	; 0
}
    43ca:	08 95       	ret

000043cc <ringbuffer_fw_freeSemaphore>:

void ringbuffer_fw_freeSemaphore(uint8_t isSend)
{
	/* free semaphore */
	{
		uint8_t* semPtr = (isSend ?  &usbRingBufferSendSemaphore : &usbRingBufferRcvSemaphore);
    43cc:	81 11       	cpse	r24, r1
    43ce:	03 c0       	rjmp	.+6      	; 0x43d6 <ringbuffer_fw_freeSemaphore+0xa>
    43d0:	e2 e2       	ldi	r30, 0x22	; 34
    43d2:	f5 e0       	ldi	r31, 0x05	; 5
    43d4:	02 c0       	rjmp	.+4      	; 0x43da <ringbuffer_fw_freeSemaphore+0xe>
    43d6:	e3 e2       	ldi	r30, 0x23	; 35
    43d8:	f5 e0       	ldi	r31, 0x05	; 5
		uint8_t sreg = SREG;
    43da:	8f b7       	in	r24, 0x3f	; 63
		cli();
    43dc:	f8 94       	cli
		*semPtr = false;
    43de:	10 82       	st	Z, r1
		SREG = sreg;
    43e0:	8f bf       	out	0x3f, r24	; 63
    43e2:	08 95       	ret

000043e4 <ringbuffer_fw_ringBufferPush>:
	}
}

uint8_t ringbuffer_fw_ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
    43e4:	8f 92       	push	r8
    43e6:	9f 92       	push	r9
    43e8:	af 92       	push	r10
    43ea:	bf 92       	push	r11
    43ec:	cf 92       	push	r12
    43ee:	df 92       	push	r13
    43f0:	ef 92       	push	r14
    43f2:	ff 92       	push	r15
    43f4:	0f 93       	push	r16
    43f6:	1f 93       	push	r17
    43f8:	cf 93       	push	r28
    43fa:	df 93       	push	r29
	uint8_t retLen = 0;
	uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);

	uint8_t sreg = SREG;
    43fc:	3f b7       	in	r19, 0x3f	; 63
	cli();
    43fe:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4400:	88 23       	and	r24, r24
    4402:	29 f0       	breq	.+10     	; 0x440e <ringbuffer_fw_ringBufferPush+0x2a>
    4404:	70 91 27 05 	lds	r23, 0x0527	; 0x800527 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4408:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <usbRingBufferSendPullIdx>
    440c:	04 c0       	rjmp	.+8      	; 0x4416 <ringbuffer_fw_ringBufferPush+0x32>
	uint8_t retLen = 0;
	uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    440e:	70 91 25 05 	lds	r23, 0x0525	; 0x800525 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4412:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    4416:	3f bf       	out	0x3f, r19	; 63

	if (!(((pushIdx + 1) == pullIdx) || (((pushIdx + 1) == bufferSize) && !pullIdx))) {
    4418:	a7 2f       	mov	r26, r23
    441a:	b0 e0       	ldi	r27, 0x00	; 0
    441c:	c9 2f       	mov	r28, r25
    441e:	d0 e0       	ldi	r29, 0x00	; 0
    4420:	fd 01       	movw	r30, r26
    4422:	31 96       	adiw	r30, 0x01	; 1
    4424:	ec 17       	cp	r30, r28
    4426:	fd 07       	cpc	r31, r29
    4428:	09 f4       	brne	.+2      	; 0x442c <ringbuffer_fw_ringBufferPush+0x48>
    442a:	64 c0       	rjmp	.+200    	; 0x44f4 <ringbuffer_fw_ringBufferPush+0x110>
    442c:	7f 37       	cpi	r23, 0x7F	; 127
    442e:	19 f4       	brne	.+6      	; 0x4436 <ringbuffer_fw_ringBufferPush+0x52>
    4430:	99 23       	and	r25, r25
    4432:	09 f4       	brne	.+2      	; 0x4436 <ringbuffer_fw_ringBufferPush+0x52>
    4434:	5f c0       	rjmp	.+190    	; 0x44f4 <ringbuffer_fw_ringBufferPush+0x110>
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    4436:	81 11       	cpse	r24, r1
    4438:	05 c0       	rjmp	.+10     	; 0x4444 <ringbuffer_fw_ringBufferPush+0x60>
    443a:	e7 e8       	ldi	r30, 0x87	; 135
    443c:	ee 2e       	mov	r14, r30
    443e:	e2 e0       	ldi	r30, 0x02	; 2
    4440:	fe 2e       	mov	r15, r30
    4442:	04 c0       	rjmp	.+8      	; 0x444c <ringbuffer_fw_ringBufferPush+0x68>
    4444:	37 e0       	ldi	r19, 0x07	; 7
    4446:	e3 2e       	mov	r14, r19
    4448:	33 e0       	ldi	r19, 0x03	; 3
    444a:	f3 2e       	mov	r15, r19
		uint8_t lenTop = min((pullIdx > pushIdx ?  (pullIdx - pushIdx - 1) : bufferSize - pushIdx - (!pullIdx ?  1 : 0)), len);
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	79 17       	cp	r23, r25
    4450:	28 f4       	brcc	.+10     	; 0x445c <ringbuffer_fw_ringBufferPush+0x78>
    4452:	fe 01       	movw	r30, r28
    4454:	ea 1b       	sub	r30, r26
    4456:	fb 0b       	sbc	r31, r27
    4458:	31 97       	sbiw	r30, 0x01	; 1
    445a:	0c c0       	rjmp	.+24     	; 0x4474 <ringbuffer_fw_ringBufferPush+0x90>
    445c:	e0 e8       	ldi	r30, 0x80	; 128
    445e:	f0 e0       	ldi	r31, 0x00	; 0
    4460:	ea 1b       	sub	r30, r26
    4462:	fb 0b       	sbc	r31, r27
    4464:	01 e0       	ldi	r16, 0x01	; 1
    4466:	10 e0       	ldi	r17, 0x00	; 0
    4468:	99 23       	and	r25, r25
    446a:	11 f0       	breq	.+4      	; 0x4470 <ringbuffer_fw_ringBufferPush+0x8c>
    446c:	00 e0       	ldi	r16, 0x00	; 0
    446e:	10 e0       	ldi	r17, 0x00	; 0
    4470:	e0 1b       	sub	r30, r16
    4472:	f1 0b       	sbc	r31, r17
    4474:	2e 17       	cp	r18, r30
    4476:	3f 07       	cpc	r19, r31
    4478:	0c f4       	brge	.+2      	; 0x447c <ringbuffer_fw_ringBufferPush+0x98>
    447a:	f9 01       	movw	r30, r18
    447c:	de 2e       	mov	r13, r30
    447e:	8f 01       	movw	r16, r30
    4480:	11 27       	eor	r17, r17
		uint8_t lenBot = min((((pullIdx > pushIdx) || !pullIdx) ?  0 : pullIdx - 1), len - lenTop);
    4482:	20 1b       	sub	r18, r16
    4484:	31 0b       	sbc	r19, r17
    4486:	79 17       	cp	r23, r25
    4488:	20 f0       	brcs	.+8      	; 0x4492 <ringbuffer_fw_ringBufferPush+0xae>
    448a:	99 23       	and	r25, r25
    448c:	11 f0       	breq	.+4      	; 0x4492 <ringbuffer_fw_ringBufferPush+0xae>
    448e:	21 97       	sbiw	r28, 0x01	; 1
    4490:	02 c0       	rjmp	.+4      	; 0x4496 <ringbuffer_fw_ringBufferPush+0xb2>
    4492:	c0 e0       	ldi	r28, 0x00	; 0
    4494:	d0 e0       	ldi	r29, 0x00	; 0
    4496:	2c 17       	cp	r18, r28
    4498:	3d 07       	cpc	r19, r29
    449a:	0c f4       	brge	.+2      	; 0x449e <ringbuffer_fw_ringBufferPush+0xba>
    449c:	e9 01       	movw	r28, r18
    449e:	5a 01       	movw	r10, r20
    44a0:	96 2e       	mov	r9, r22
    44a2:	88 2e       	mov	r8, r24
    44a4:	cc 2e       	mov	r12, r28

		if (lenTop) {
    44a6:	dd 20       	and	r13, r13
    44a8:	31 f0       	breq	.+12     	; 0x44b6 <ringbuffer_fw_ringBufferPush+0xd2>
			memory_fw_copyBuffer(isPgm, &(ringBuffer[pushIdx]), inData, lenTop);
    44aa:	b7 01       	movw	r22, r14
    44ac:	6a 0f       	add	r22, r26
    44ae:	7b 1f       	adc	r23, r27
    44b0:	98 01       	movw	r18, r16
    44b2:	89 2d       	mov	r24, r9
    44b4:	3a de       	rcall	.-908    	; 0x412a <memory_fw_copyBuffer>
			retLen += lenTop;
		}

		if (lenBot) {
    44b6:	cc 20       	and	r12, r12
    44b8:	49 f0       	breq	.+18     	; 0x44cc <ringbuffer_fw_ringBufferPush+0xe8>
			memory_fw_copyBuffer(isPgm, &(ringBuffer[0]), &(inData[lenTop]), lenBot);
    44ba:	9e 01       	movw	r18, r28
    44bc:	33 27       	eor	r19, r19
    44be:	a5 01       	movw	r20, r10
    44c0:	40 0f       	add	r20, r16
    44c2:	51 1f       	adc	r21, r17
    44c4:	b7 01       	movw	r22, r14
    44c6:	89 2d       	mov	r24, r9
    44c8:	30 de       	rcall	.-928    	; 0x412a <memory_fw_copyBuffer>
			retLen += lenBot;
    44ca:	dc 0c       	add	r13, r12
		}

		// advance the index
		if (isSend) {
			uint8_t sreg = SREG;
    44cc:	9f b7       	in	r25, 0x3f	; 63
			memory_fw_copyBuffer(isPgm, &(ringBuffer[0]), &(inData[lenTop]), lenBot);
			retLen += lenBot;
		}

		// advance the index
		if (isSend) {
    44ce:	88 20       	and	r8, r8
    44d0:	41 f0       	breq	.+16     	; 0x44e2 <ringbuffer_fw_ringBufferPush+0xfe>
			uint8_t sreg = SREG;
			cli();
    44d2:	f8 94       	cli
			usbRingBufferSendPushIdx += retLen;
			usbRingBufferSendPushIdx %= bufferSize;
    44d4:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <usbRingBufferSendPushIdx>
    44d8:	8d 0d       	add	r24, r13
    44da:	8f 77       	andi	r24, 0x7F	; 127
    44dc:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <usbRingBufferSendPushIdx>
    44e0:	07 c0       	rjmp	.+14     	; 0x44f0 <ringbuffer_fw_ringBufferPush+0x10c>
			SREG = sreg;

		} else {
			uint8_t sreg = SREG;
			cli();
    44e2:	f8 94       	cli
			usbRingBufferRcvPushIdx += retLen;
			usbRingBufferRcvPushIdx %= bufferSize;
    44e4:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <usbRingBufferRcvPushIdx>
    44e8:	8d 0d       	add	r24, r13
    44ea:	8f 77       	andi	r24, 0x7F	; 127
    44ec:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <usbRingBufferRcvPushIdx>
			SREG = sreg;
    44f0:	9f bf       	out	0x3f, r25	; 63
    44f2:	01 c0       	rjmp	.+2      	; 0x44f6 <ringbuffer_fw_ringBufferPush+0x112>
	}
}

uint8_t ringbuffer_fw_ringBufferPush(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
	uint8_t retLen = 0;
    44f4:	d1 2c       	mov	r13, r1
			usbRingBufferRcvPushIdx %= bufferSize;
			SREG = sreg;
		}
	}
	return retLen;
}
    44f6:	8d 2d       	mov	r24, r13
    44f8:	df 91       	pop	r29
    44fa:	cf 91       	pop	r28
    44fc:	1f 91       	pop	r17
    44fe:	0f 91       	pop	r16
    4500:	ff 90       	pop	r15
    4502:	ef 90       	pop	r14
    4504:	df 90       	pop	r13
    4506:	cf 90       	pop	r12
    4508:	bf 90       	pop	r11
    450a:	af 90       	pop	r10
    450c:	9f 90       	pop	r9
    450e:	8f 90       	pop	r8
    4510:	08 95       	ret

00004512 <ringbuffer_fw_ringBufferPull>:

uint8_t ringbuffer_fw_ringBufferPull(uint8_t isSend, uchar outData[], uint8_t size)
{
    4512:	9f 92       	push	r9
    4514:	af 92       	push	r10
    4516:	bf 92       	push	r11
    4518:	cf 92       	push	r12
    451a:	df 92       	push	r13
    451c:	ef 92       	push	r14
    451e:	ff 92       	push	r15
    4520:	0f 93       	push	r16
    4522:	1f 93       	push	r17
    4524:	cf 93       	push	r28
    4526:	df 93       	push	r29
	uint8_t len = 0;

	uint8_t sreg = SREG;
    4528:	2f b7       	in	r18, 0x3f	; 63
	cli();
    452a:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    452c:	88 23       	and	r24, r24
    452e:	29 f0       	breq	.+10     	; 0x453a <ringbuffer_fw_ringBufferPull+0x28>
    4530:	c0 91 27 05 	lds	r28, 0x0527	; 0x800527 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4534:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <usbRingBufferSendPullIdx>
    4538:	04 c0       	rjmp	.+8      	; 0x4542 <ringbuffer_fw_ringBufferPull+0x30>
{
	uint8_t len = 0;

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    453a:	c0 91 25 05 	lds	r28, 0x0525	; 0x800525 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    453e:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    4542:	2f bf       	out	0x3f, r18	; 63

	if ((pushIdx != pullIdx) && (size > 1)) {
    4544:	9c 17       	cp	r25, r28
    4546:	09 f4       	brne	.+2      	; 0x454a <ringbuffer_fw_ringBufferPull+0x38>
    4548:	5f c0       	rjmp	.+190    	; 0x4608 <ringbuffer_fw_ringBufferPull+0xf6>
    454a:	42 30       	cpi	r20, 0x02	; 2
    454c:	08 f4       	brcc	.+2      	; 0x4550 <ringbuffer_fw_ringBufferPull+0x3e>
    454e:	5c c0       	rjmp	.+184    	; 0x4608 <ringbuffer_fw_ringBufferPull+0xf6>
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    4550:	81 11       	cpse	r24, r1
    4552:	05 c0       	rjmp	.+10     	; 0x455e <ringbuffer_fw_ringBufferPull+0x4c>
    4554:	37 e8       	ldi	r19, 0x87	; 135
    4556:	e3 2e       	mov	r14, r19
    4558:	32 e0       	ldi	r19, 0x02	; 2
    455a:	f3 2e       	mov	r15, r19
    455c:	04 c0       	rjmp	.+8      	; 0x4566 <ringbuffer_fw_ringBufferPull+0x54>
    455e:	27 e0       	ldi	r18, 0x07	; 7
    4560:	e2 2e       	mov	r14, r18
    4562:	23 e0       	ldi	r18, 0x03	; 3
    4564:	f2 2e       	mov	r15, r18
		uint8_t bufferSize = (isSend ?  RINGBUFFER_SEND_SIZE : RINGBUFFER_RCV_SIZE);
		uint8_t lenTop = min((pushIdx > pullIdx ?  (pushIdx - pullIdx) : bufferSize - pullIdx), size - 1);
    4566:	24 2f       	mov	r18, r20
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	21 50       	subi	r18, 0x01	; 1
    456c:	31 09       	sbc	r19, r1
    456e:	e9 2f       	mov	r30, r25
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	9c 17       	cp	r25, r28
    4574:	18 f4       	brcc	.+6      	; 0x457c <ringbuffer_fw_ringBufferPull+0x6a>
    4576:	4c 2f       	mov	r20, r28
    4578:	50 e0       	ldi	r21, 0x00	; 0
    457a:	02 c0       	rjmp	.+4      	; 0x4580 <ringbuffer_fw_ringBufferPull+0x6e>
    457c:	40 e8       	ldi	r20, 0x80	; 128
    457e:	50 e0       	ldi	r21, 0x00	; 0
    4580:	4e 1b       	sub	r20, r30
    4582:	5f 0b       	sbc	r21, r31
    4584:	24 17       	cp	r18, r20
    4586:	35 07       	cpc	r19, r21
    4588:	0c f4       	brge	.+2      	; 0x458c <ringbuffer_fw_ringBufferPull+0x7a>
    458a:	a9 01       	movw	r20, r18
    458c:	d4 2e       	mov	r13, r20
    458e:	8a 01       	movw	r16, r20
    4590:	11 27       	eor	r17, r17
		uint8_t lenBot = min((pushIdx > pullIdx ?  0 : pushIdx), size - 1 - lenTop);
    4592:	20 1b       	sub	r18, r16
    4594:	31 0b       	sbc	r19, r17
    4596:	9c 17       	cp	r25, r28
    4598:	10 f0       	brcs	.+4      	; 0x459e <ringbuffer_fw_ringBufferPull+0x8c>
    459a:	d0 e0       	ldi	r29, 0x00	; 0
    459c:	02 c0       	rjmp	.+4      	; 0x45a2 <ringbuffer_fw_ringBufferPull+0x90>
    459e:	c0 e0       	ldi	r28, 0x00	; 0
    45a0:	d0 e0       	ldi	r29, 0x00	; 0
    45a2:	2c 17       	cp	r18, r28
    45a4:	3d 07       	cpc	r19, r29
    45a6:	0c f4       	brge	.+2      	; 0x45aa <ringbuffer_fw_ringBufferPull+0x98>
    45a8:	e9 01       	movw	r28, r18
    45aa:	5b 01       	movw	r10, r22
    45ac:	c8 2e       	mov	r12, r24
    45ae:	9c 2e       	mov	r9, r28

		if (lenTop) {
    45b0:	dd 20       	and	r13, r13
    45b2:	39 f0       	breq	.+14     	; 0x45c2 <ringbuffer_fw_ringBufferPull+0xb0>
			memcpy(outData, &(ringBuffer[pullIdx]), lenTop);
    45b4:	b7 01       	movw	r22, r14
    45b6:	6e 0f       	add	r22, r30
    45b8:	7f 1f       	adc	r23, r31
    45ba:	a8 01       	movw	r20, r16
    45bc:	c5 01       	movw	r24, r10
    45be:	0e 94 39 34 	call	0x6872	; 0x6872 <memcpy>
			len += lenTop;
		}

		if (lenBot) {
    45c2:	99 20       	and	r9, r9
    45c4:	49 f0       	breq	.+18     	; 0x45d8 <ringbuffer_fw_ringBufferPull+0xc6>
			memcpy(&(outData[lenTop]), &(ringBuffer[0]), lenBot);
    45c6:	ae 01       	movw	r20, r28
    45c8:	55 27       	eor	r21, r21
    45ca:	b7 01       	movw	r22, r14
    45cc:	c5 01       	movw	r24, r10
    45ce:	80 0f       	add	r24, r16
    45d0:	91 1f       	adc	r25, r17
    45d2:	0e 94 39 34 	call	0x6872	; 0x6872 <memcpy>
			len += lenBot;
    45d6:	d9 0c       	add	r13, r9
		}

		outData[len] = 0;
    45d8:	f5 01       	movw	r30, r10
    45da:	ed 0d       	add	r30, r13
    45dc:	f1 1d       	adc	r31, r1
    45de:	10 82       	st	Z, r1

		// advance the index
		if (isSend) {
			uint8_t sreg = SREG;
    45e0:	9f b7       	in	r25, 0x3f	; 63
		}

		outData[len] = 0;

		// advance the index
		if (isSend) {
    45e2:	cc 20       	and	r12, r12
    45e4:	41 f0       	breq	.+16     	; 0x45f6 <ringbuffer_fw_ringBufferPull+0xe4>
			uint8_t sreg = SREG;
			cli();
    45e6:	f8 94       	cli
			usbRingBufferSendPullIdx += len;
			usbRingBufferSendPullIdx %= bufferSize;
    45e8:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <usbRingBufferSendPullIdx>
    45ec:	8d 0d       	add	r24, r13
    45ee:	8f 77       	andi	r24, 0x7F	; 127
    45f0:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <usbRingBufferSendPullIdx>
    45f4:	07 c0       	rjmp	.+14     	; 0x4604 <ringbuffer_fw_ringBufferPull+0xf2>
			SREG = sreg;

		} else {
			uint8_t sreg = SREG;
			cli();
    45f6:	f8 94       	cli
			usbRingBufferRcvPullIdx += len;
			usbRingBufferRcvPullIdx %= bufferSize;
    45f8:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <usbRingBufferRcvPullIdx>
    45fc:	8d 0d       	add	r24, r13
    45fe:	8f 77       	andi	r24, 0x7F	; 127
    4600:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <usbRingBufferRcvPullIdx>
			SREG = sreg;
    4604:	9f bf       	out	0x3f, r25	; 63
    4606:	05 c0       	rjmp	.+10     	; 0x4612 <ringbuffer_fw_ringBufferPull+0x100>
		}
	} else if (!size) {
    4608:	41 11       	cpse	r20, r1
    460a:	02 c0       	rjmp	.+4      	; 0x4610 <ringbuffer_fw_ringBufferPull+0xfe>
		outData[0] = 0;
    460c:	fb 01       	movw	r30, r22
    460e:	10 82       	st	Z, r1
	return retLen;
}

uint8_t ringbuffer_fw_ringBufferPull(uint8_t isSend, uchar outData[], uint8_t size)
{
	uint8_t len = 0;
    4610:	d1 2c       	mov	r13, r1
		}
	} else if (!size) {
		outData[0] = 0;
	}
	return len;
}
    4612:	8d 2d       	mov	r24, r13
    4614:	df 91       	pop	r29
    4616:	cf 91       	pop	r28
    4618:	1f 91       	pop	r17
    461a:	0f 91       	pop	r16
    461c:	ff 90       	pop	r15
    461e:	ef 90       	pop	r14
    4620:	df 90       	pop	r13
    4622:	cf 90       	pop	r12
    4624:	bf 90       	pop	r11
    4626:	af 90       	pop	r10
    4628:	9f 90       	pop	r9
    462a:	08 95       	ret

0000462c <ringbuffer_fw_getStatusNextMsg>:

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;

	uint8_t sreg = SREG;
    462c:	3f b7       	in	r19, 0x3f	; 63
	cli();
    462e:	f8 94       	cli
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    4630:	88 23       	and	r24, r24
    4632:	29 f0       	breq	.+10     	; 0x463e <ringbuffer_fw_getStatusNextMsg+0x12>
    4634:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <usbRingBufferSendPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4638:	20 91 26 05 	lds	r18, 0x0526	; 0x800526 <usbRingBufferSendPullIdx>
    463c:	04 c0       	rjmp	.+8      	; 0x4646 <ringbuffer_fw_getStatusNextMsg+0x1a>
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;

	uint8_t sreg = SREG;
	cli();
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
    463e:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <usbRingBufferRcvPushIdx>
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
    4642:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <usbRingBufferRcvPullIdx>
	SREG = sreg;
    4646:	3f bf       	out	0x3f, r19	; 63

	if (pullIdx != pushIdx) {
    4648:	29 17       	cp	r18, r25
    464a:	79 f0       	breq	.+30     	; 0x466a <ringbuffer_fw_getStatusNextMsg+0x3e>
		status |= RINGBUFFER_MSG_STATUS_AVAIL;

		/* test for NMEA message */
		uchar* ringBuffer = (isSend ?  usbRingBufferSend : usbRingBufferRcv);
    464c:	81 11       	cpse	r24, r1
    464e:	03 c0       	rjmp	.+6      	; 0x4656 <ringbuffer_fw_getStatusNextMsg+0x2a>
    4650:	87 e8       	ldi	r24, 0x87	; 135
    4652:	92 e0       	ldi	r25, 0x02	; 2
    4654:	02 c0       	rjmp	.+4      	; 0x465a <ringbuffer_fw_getStatusNextMsg+0x2e>
    4656:	87 e0       	ldi	r24, 0x07	; 7
    4658:	93 e0       	ldi	r25, 0x03	; 3
		if (*(ringBuffer + pullIdx) == MSG_PATTERN_NMEA) {	// first character identifies message type
    465a:	fc 01       	movw	r30, r24
    465c:	e2 0f       	add	r30, r18
    465e:	f1 1d       	adc	r31, r1
    4660:	80 81       	ld	r24, Z
    4662:	84 32       	cpi	r24, 0x24	; 36
    4664:	21 f4       	brne	.+8      	; 0x466e <ringbuffer_fw_getStatusNextMsg+0x42>
			status |= RINGBUFFER_MSG_STATUS_IS_NMEA;
    4666:	81 e1       	ldi	r24, 0x11	; 17
    4668:	08 95       	ret
	return len;
}

enum RINGBUFFER_MSG_STATUS_t ringbuffer_fw_getStatusNextMsg(uint8_t isSend)
{
	enum RINGBUFFER_MSG_STATUS_t status = 0;
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	08 95       	ret
	uint8_t pushIdx = (isSend ?  usbRingBufferSendPushIdx : usbRingBufferRcvPushIdx);
	uint8_t pullIdx = (isSend ?  usbRingBufferSendPullIdx : usbRingBufferRcvPullIdx);
	SREG = sreg;

	if (pullIdx != pushIdx) {
		status |= RINGBUFFER_MSG_STATUS_AVAIL;
    466e:	81 e0       	ldi	r24, 0x01	; 1
		if (*(ringBuffer + pullIdx) == MSG_PATTERN_NMEA) {	// first character identifies message type
			status |= RINGBUFFER_MSG_STATUS_IS_NMEA;
		}
	}
	return status;
}
    4670:	08 95       	ret

00004672 <ringbuffer_fw_ringBufferWaitAppend>:
	    usbPoll();
	}
}

uint8_t ringbuffer_fw_ringBufferWaitAppend(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
    4672:	ff 92       	push	r15
    4674:	0f 93       	push	r16
    4676:	1f 93       	push	r17
    4678:	cf 93       	push	r28
    467a:	df 93       	push	r29
    467c:	c8 2f       	mov	r28, r24
    467e:	d6 2f       	mov	r29, r22
    4680:	8a 01       	movw	r16, r20
    4682:	f2 2e       	mov	r15, r18
}

static void ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore(uint8_t isSend)
{
	for (;;) {
		if (ringbuffer_fw_getSemaphore(isSend)) {
    4684:	8c 2f       	mov	r24, r28
    4686:	91 de       	rcall	.-734    	; 0x43aa <ringbuffer_fw_getSemaphore>
    4688:	88 23       	and	r24, r24
    468a:	a9 f0       	breq	.+42     	; 0x46b6 <ringbuffer_fw_ringBufferWaitAppend+0x44>
			uint8_t pushIdx;
			uint8_t pullIdx;

			if (isSend) {
				uint8_t sreg = SREG;
    468c:	2f b7       	in	r18, 0x3f	; 63
	for (;;) {
		if (ringbuffer_fw_getSemaphore(isSend)) {
			uint8_t pushIdx;
			uint8_t pullIdx;

			if (isSend) {
    468e:	cc 23       	and	r28, r28
    4690:	31 f0       	breq	.+12     	; 0x469e <ringbuffer_fw_ringBufferWaitAppend+0x2c>
				uint8_t sreg = SREG;
				cli();
    4692:	f8 94       	cli
				pushIdx = usbRingBufferSendPushIdx;
    4694:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <usbRingBufferSendPushIdx>
				pullIdx = usbRingBufferSendPullIdx;
    4698:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <usbRingBufferSendPullIdx>
    469c:	05 c0       	rjmp	.+10     	; 0x46a8 <ringbuffer_fw_ringBufferWaitAppend+0x36>
				SREG = sreg;

			} else {
				uint8_t sreg = SREG;
				cli();
    469e:	f8 94       	cli
				pushIdx = usbRingBufferRcvPushIdx;
    46a0:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <usbRingBufferRcvPushIdx>
				pullIdx = usbRingBufferRcvPullIdx;
    46a4:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <usbRingBufferRcvPullIdx>
				SREG = sreg;
    46a8:	2f bf       	out	0x3f, r18	; 63
			}

			if (pullIdx == pushIdx) {
    46aa:	98 17       	cp	r25, r24
				// buffer is empty, break loop and hold semaphore
				break;
			}

			ringbuffer_fw_freeSemaphore(isSend);
    46ac:	39 f0       	breq	.+14     	; 0x46bc <ringbuffer_fw_ringBufferWaitAppend+0x4a>

			// give the CPU away for a moment to delay, do not use giveAway() that would make a loop
		    wdt_reset();
		    usbPoll();
    46ae:	8c 2f       	mov	r24, r28
		}

		// give the CPU away for a moment to delay, do not use giveAway() that would make a loop
	    wdt_reset();
    46b0:	8d de       	rcall	.-742    	; 0x43cc <ringbuffer_fw_freeSemaphore>
	    usbPoll();
    46b2:	a8 95       	wdr
    46b4:	da d6       	rcall	.+3508   	; 0x546a <usbPoll>
}

uint8_t ringbuffer_fw_ringBufferWaitAppend(uint8_t isSend, uint8_t isPgm, const uchar inData[], uint8_t len)
{
	ringbuffer_fw_ringBufferWaitFreeAndKeepSemaphore(isSend);
    uint8_t retLen = ringbuffer_fw_ringBufferPush(isSend, isPgm, inData, len);
    46b6:	a8 95       	wdr
    46b8:	d8 d6       	rcall	.+3504   	; 0x546a <usbPoll>
    46ba:	e4 cf       	rjmp	.-56     	; 0x4684 <ringbuffer_fw_ringBufferWaitAppend+0x12>
    46bc:	2f 2d       	mov	r18, r15
    46be:	a8 01       	movw	r20, r16
	ringbuffer_fw_freeSemaphore(isSend);
    46c0:	6d 2f       	mov	r22, r29
    46c2:	8c 2f       	mov	r24, r28
    46c4:	8f de       	rcall	.-738    	; 0x43e4 <ringbuffer_fw_ringBufferPush>
    return retLen;
}
    46c6:	d8 2f       	mov	r29, r24
    46c8:	8c 2f       	mov	r24, r28
    46ca:	80 de       	rcall	.-768    	; 0x43cc <ringbuffer_fw_freeSemaphore>
    46cc:	8d 2f       	mov	r24, r29
    46ce:	df 91       	pop	r29
    46d0:	cf 91       	pop	r28
    46d2:	1f 91       	pop	r17
    46d4:	0f 91       	pop	r16
    46d6:	ff 90       	pop	r15
    46d8:	08 95       	ret

000046da <serial_fw_sendNmea>:
}

uint8_t serial_fw_isTxRunning(void)
{
	return (serialCtxtTxBufferLen > 0) ?  true : false;
}
    46da:	9f b7       	in	r25, 0x3f	; 63
    46dc:	f8 94       	cli
    46de:	e0 ec       	ldi	r30, 0xC0	; 192
    46e0:	f0 e0       	ldi	r31, 0x00	; 0
    46e2:	80 81       	ld	r24, Z
    46e4:	8f 7b       	andi	r24, 0xBF	; 191
    46e6:	80 83       	st	Z, r24
    46e8:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <serialCtxtTxBufferIdx>
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	8e 0f       	add	r24, r30
    46f0:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <serialCtxtTxBufferIdx>
    46f4:	f0 e0       	ldi	r31, 0x00	; 0
    46f6:	e9 53       	subi	r30, 0x39	; 57
    46f8:	fe 4f       	sbci	r31, 0xFE	; 254
    46fa:	80 81       	ld	r24, Z
    46fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    4700:	9f bf       	out	0x3f, r25	; 63
    4702:	e1 ec       	ldi	r30, 0xC1	; 193
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	80 81       	ld	r24, Z
    4708:	80 62       	ori	r24, 0x20	; 32
    470a:	80 83       	st	Z, r24
    470c:	08 95       	ret

0000470e <serial_fw_serRxIsrOn.part.0>:
    470e:	9f b7       	in	r25, 0x3f	; 63
    4710:	f8 94       	cli
    4712:	e1 ec       	ldi	r30, 0xC1	; 193
    4714:	f0 e0       	ldi	r31, 0x00	; 0
    4716:	80 81       	ld	r24, Z
    4718:	80 68       	ori	r24, 0x80	; 128
    471a:	80 83       	st	Z, r24
    471c:	9f bf       	out	0x3f, r25	; 63
    471e:	08 95       	ret

00004720 <serial_fw_setCommBaud>:
    4720:	9c 01       	movw	r18, r24
    4722:	bc 01       	movw	r22, r24
    4724:	76 95       	lsr	r23
    4726:	67 95       	ror	r22
    4728:	cb 01       	movw	r24, r22
    472a:	a0 e0       	ldi	r26, 0x00	; 0
    472c:	b0 e0       	ldi	r27, 0x00	; 0
    472e:	bc 01       	movw	r22, r24
    4730:	cd 01       	movw	r24, r26
    4732:	60 53       	subi	r22, 0x30	; 48
    4734:	7d 4e       	sbci	r23, 0xED	; 237
    4736:	8c 4e       	sbci	r24, 0xEC	; 236
    4738:	9f 4f       	sbci	r25, 0xFF	; 255
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	50 e0       	ldi	r21, 0x00	; 0
    473e:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <__udivmodsi4>
    4742:	da 01       	movw	r26, r20
    4744:	c9 01       	movw	r24, r18
    4746:	01 97       	sbiw	r24, 0x01	; 1
    4748:	a1 09       	sbc	r26, r1
    474a:	b1 09       	sbc	r27, r1
    474c:	89 2f       	mov	r24, r25
    474e:	9a 2f       	mov	r25, r26
    4750:	ab 2f       	mov	r26, r27
    4752:	bb 27       	eor	r27, r27
    4754:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4758:	21 50       	subi	r18, 0x01	; 1
    475a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    475e:	08 95       	ret

00004760 <serial_fw_init>:
    4760:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    4764:	8d 7f       	andi	r24, 0xFD	; 253
    4766:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    476a:	85 b7       	in	r24, 0x35	; 53
    476c:	8f 7e       	andi	r24, 0xEF	; 239
    476e:	85 bf       	out	0x35, r24	; 53
    4770:	58 9a       	sbi	0x0b, 0	; 11
    4772:	63 e0       	ldi	r22, 0x03	; 3
    4774:	8d e8       	ldi	r24, 0x8D	; 141
    4776:	93 e0       	ldi	r25, 0x03	; 3
    4778:	70 dd       	rcall	.-1312   	; 0x425a <memory_fw_readEepromValidBlock>
    477a:	88 23       	and	r24, r24
    477c:	c1 f0       	breq	.+48     	; 0x47ae <serial_fw_init+0x4e>
    477e:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <mainFormatBuffer>
    4782:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <mainFormatBuffer+0x1>
    4786:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <serialCoef_b03_serial_baud+0x1>
    478a:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <serialCoef_b03_serial_baud>
    478e:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <mainFormatBuffer+0x2>
    4792:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <mainFormatBuffer+0x3>
    4796:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <serialCoef_b03_bitsParityStopbits+0x1>
    479a:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <serialCoef_b03_bitsParityStopbits>
    479e:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <mainFormatBuffer+0x4>
    47a2:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <mainFormatBuffer+0x5>
    47a6:	90 93 1d 05 	sts	0x051D, r25	; 0x80051d <serialCoef_b03_gps_comm_mode+0x1>
    47aa:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <serialCoef_b03_gps_comm_mode>
    47ae:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <serialCoef_b03_serial_baud>
    47b2:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <serialCoef_b03_serial_baud+0x1>
    47b6:	b4 df       	rcall	.-152    	; 0x4720 <serial_fw_setCommBaud>
    47b8:	88 e1       	ldi	r24, 0x18	; 24
    47ba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    47be:	20 91 1e 05 	lds	r18, 0x051E	; 0x80051e <serialCoef_b03_bitsParityStopbits>
    47c2:	30 91 1f 05 	lds	r19, 0x051F	; 0x80051f <serialCoef_b03_bitsParityStopbits+0x1>
    47c6:	83 e0       	ldi	r24, 0x03	; 3
    47c8:	82 0f       	add	r24, r18
    47ca:	83 70       	andi	r24, 0x03	; 3
    47cc:	88 0f       	add	r24, r24
    47ce:	93 2f       	mov	r25, r19
    47d0:	90 73       	andi	r25, 0x30	; 48
    47d2:	89 2b       	or	r24, r25
    47d4:	22 27       	eor	r18, r18
    47d6:	33 70       	andi	r19, 0x03	; 3
    47d8:	9f ef       	ldi	r25, 0xFF	; 255
    47da:	93 0f       	add	r25, r19
    47dc:	91 70       	andi	r25, 0x01	; 1
    47de:	99 0f       	add	r25, r25
    47e0:	99 0f       	add	r25, r25
    47e2:	99 0f       	add	r25, r25
    47e4:	89 2b       	or	r24, r25
    47e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    47ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    47ee:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <serialCtxtTxBufferIdx>
    47f2:	8d cf       	rjmp	.-230    	; 0x470e <serial_fw_serRxIsrOn.part.0>

000047f4 <serial_fw_copyAndSendNmea>:
	/* enable DATA REGISTER EMPTY INTERRUPT - the interrupt will arrive after initial UDSR0 loading */
	UART_CTRL |= _BV(UDRIE0);								// this will shoot an interrupt because UDR0 is ready again to be filled (UDRE0 is true)
}

void serial_fw_copyAndSendNmea(uint8_t isPgm, const uchar inData[], uint8_t len)
{
    47f4:	cf 93       	push	r28
	if (len) {
    47f6:	44 23       	and	r20, r20
    47f8:	69 f0       	breq	.+26     	; 0x4814 <serial_fw_copyAndSendNmea+0x20>
    47fa:	c4 2f       	mov	r28, r20
    47fc:	ab 01       	movw	r20, r22
		memory_fw_copyBuffer(isPgm, serialCtxtTxBuffer, inData, len);
    47fe:	2c 2f       	mov	r18, r28
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	67 ec       	ldi	r22, 0xC7	; 199
    4804:	71 e0       	ldi	r23, 0x01	; 1
    4806:	91 dc       	rcall	.-1758   	; 0x412a <memory_fw_copyBuffer>
		serialCtxtTxBufferIdx = 0;
    4808:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <serialCtxtTxBufferIdx>
		serialCtxtTxBufferLen = len;
    480c:	c0 93 1a 05 	sts	0x051A, r28	; 0x80051a <serialCtxtTxBufferLen>
		serial_fw_sendNmea();
    4810:	cf 91       	pop	r28
	}
}
    4812:	63 cf       	rjmp	.-314    	; 0x46da <serial_fw_sendNmea>
    4814:	cf 91       	pop	r28
    4816:	08 95       	ret

00004818 <serial_fw_pullAndSendNmea_havingSemaphore>:

void serial_fw_pullAndSendNmea_havingSemaphore(uint8_t isSend)
{
    4818:	cf 93       	push	r28
	/* check if serial TX buffer is clear and the USART0 is ready for a new character to be sent */
	uint8_t sreg = SREG;
    481a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    481c:	f8 94       	cli
	uint8_t isTxRdy = UCSR0A & _BV(UDRE0);
    481e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	SREG = sreg;
    4822:	2f bf       	out	0x3f, r18	; 63

	if (!serialCtxtTxBufferLen && isTxRdy) {
    4824:	20 91 1a 05 	lds	r18, 0x051A	; 0x80051a <serialCtxtTxBufferLen>
    4828:	21 11       	cpse	r18, r1
    482a:	35 c0       	rjmp	.+106    	; 0x4896 <serial_fw_pullAndSendNmea_havingSemaphore+0x7e>
    482c:	95 ff       	sbrs	r25, 5
    482e:	33 c0       	rjmp	.+102    	; 0x4896 <serial_fw_pullAndSendNmea_havingSemaphore+0x7e>
    4830:	c8 2f       	mov	r28, r24
		/* get message and free semaphore */
		serialCtxtTxBufferLen = ringbuffer_fw_ringBufferPull(isSend, serialCtxtTxBuffer, SERIALCTXT_TX_BUFFER_SIZE - 3);
    4832:	4d e3       	ldi	r20, 0x3D	; 61
    4834:	67 ec       	ldi	r22, 0xC7	; 199
    4836:	71 e0       	ldi	r23, 0x01	; 1
    4838:	6c de       	rcall	.-808    	; 0x4512 <ringbuffer_fw_ringBufferPull>
    483a:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <serialCtxtTxBufferLen>
		ringbuffer_fw_freeSemaphore(isSend);
    483e:	8c 2f       	mov	r24, r28

		/* drop serial TX data if transportation is not activated */
		if (!(main_bf.mainIsSerComm)) {
    4840:	c5 dd       	rcall	.-1142   	; 0x43cc <ringbuffer_fw_freeSemaphore>
    4842:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			serialCtxtTxBufferLen = 0;
    4846:	83 ff       	sbrs	r24, 3
    4848:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <serialCtxtTxBufferLen>
		}

		serialCtxtTxBufferIdx = 0;
    484c:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <serialCtxtTxBufferIdx>
		if (serialCtxtTxBufferLen) {
    4850:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <serialCtxtTxBufferLen>
    4854:	88 23       	and	r24, r24
			if (serialCtxtTxBuffer[--serialCtxtTxBufferLen]) {  // chop off trailing NULL char
    4856:	09 f1       	breq	.+66     	; 0x489a <serial_fw_pullAndSendNmea_havingSemaphore+0x82>
    4858:	ef ef       	ldi	r30, 0xFF	; 255
    485a:	e8 0f       	add	r30, r24
    485c:	e0 93 1a 05 	sts	0x051A, r30	; 0x80051a <serialCtxtTxBufferLen>
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	e9 53       	subi	r30, 0x39	; 57
    4864:	fe 4f       	sbci	r31, 0xFE	; 254
    4866:	90 81       	ld	r25, Z
				serialCtxtTxBufferLen++;						// restore length, if not NULL
    4868:	91 11       	cpse	r25, r1
    486a:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <serialCtxtTxBufferLen>
			}
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\r';	// obligatory NMEA message ends with CR LF
    486e:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <serialCtxtTxBufferLen>
    4872:	ae 2f       	mov	r26, r30
    4874:	b0 e0       	ldi	r27, 0x00	; 0
    4876:	a9 53       	subi	r26, 0x39	; 57
    4878:	be 4f       	sbci	r27, 0xFE	; 254
    487a:	8d e0       	ldi	r24, 0x0D	; 13
			serialCtxtTxBuffer[serialCtxtTxBufferLen++] = '\n';
    487c:	8c 93       	st	X, r24
    487e:	82 e0       	ldi	r24, 0x02	; 2
    4880:	8e 0f       	add	r24, r30
    4882:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <serialCtxtTxBufferLen>
    4886:	ef 5f       	subi	r30, 0xFF	; 255
    4888:	f0 e0       	ldi	r31, 0x00	; 0
    488a:	e9 53       	subi	r30, 0x39	; 57
    488c:	fe 4f       	sbci	r31, 0xFE	; 254

			serial_fw_sendNmea();
    488e:	8a e0       	ldi	r24, 0x0A	; 10
		}

	} else {  // now we are not ready yet, call us later again
		ringbuffer_fw_freeSemaphore(isSend);
	}
}
    4890:	80 83       	st	Z, r24

			serial_fw_sendNmea();
		}

	} else {  // now we are not ready yet, call us later again
		ringbuffer_fw_freeSemaphore(isSend);
    4892:	cf 91       	pop	r28
    4894:	22 cf       	rjmp	.-444    	; 0x46da <serial_fw_sendNmea>
	}
}
    4896:	cf 91       	pop	r28
    4898:	99 cd       	rjmp	.-1230   	; 0x43cc <ringbuffer_fw_freeSemaphore>
    489a:	cf 91       	pop	r28
    489c:	08 95       	ret

0000489e <__vector_18>:

//void serial_ISR_RXC0(void) - __vector_18
ISR(USART_RX_vect, ISR_BLOCK)
{
    489e:	1f 92       	push	r1
    48a0:	0f 92       	push	r0
    48a2:	0f b6       	in	r0, 0x3f	; 63
    48a4:	0f 92       	push	r0
    48a6:	11 24       	eor	r1, r1
    48a8:	2f 93       	push	r18
    48aa:	3f 93       	push	r19
    48ac:	4f 93       	push	r20
    48ae:	5f 93       	push	r21
    48b0:	8f 93       	push	r24
    48b2:	9f 93       	push	r25
    48b4:	af 93       	push	r26
    48b6:	bf 93       	push	r27
    48b8:	cf 93       	push	r28
    48ba:	df 93       	push	r29
    48bc:	ef 93       	push	r30
    48be:	ff 93       	push	r31
	/* read the data byte received */
	uint8_t rxData = UDR0;
    48c0:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	/* since here we can allow global interrupts again */
	sei();
    48c4:	78 94       	sei

	if (!serialCtxtBufferState && (serialCtxtRxBufferLen < (SERIALCTXT_RX_BUFFER_SIZE - 3))) {
    48c6:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <serialCtxtBufferState>
    48ca:	20 91 17 05 	lds	r18, 0x0517	; 0x800517 <serialCtxtNmeaRxHookBufIdx>
    48ce:	81 11       	cpse	r24, r1
    48d0:	48 c0       	rjmp	.+144    	; 0x4962 <__vector_18+0xc4>
    48d2:	30 91 1b 05 	lds	r19, 0x051B	; 0x80051b <serialCtxtRxBufferLen>
    48d6:	35 37       	cpi	r19, 0x75	; 117
    48d8:	08 f0       	brcs	.+2      	; 0x48dc <__vector_18+0x3e>
    48da:	43 c0       	rjmp	.+134    	; 0x4962 <__vector_18+0xc4>
		serialCtxtBufferState = SERIAL_CTXT_BUFFER_STATE_BLOCK;
    48dc:	31 e0       	ldi	r19, 0x01	; 1
    48de:	30 93 18 05 	sts	0x0518, r19	; 0x800518 <serialCtxtBufferState>

		/* if data is at the hook, get it first */
		if (serialCtxtNmeaRxHookBufIdx) {
    48e2:	22 23       	and	r18, r18
    48e4:	c1 f0       	breq	.+48     	; 0x4916 <__vector_18+0x78>
			uint8_t sreg = SREG;
    48e6:	2f b7       	in	r18, 0x3f	; 63
			cli();
    48e8:	f8 94       	cli

			for (int idx = 0; idx < serialCtxtNmeaRxHookBufIdx; ++idx) {
    48ea:	30 91 17 05 	lds	r19, 0x0517	; 0x800517 <serialCtxtNmeaRxHookBufIdx>
    48ee:	40 91 1b 05 	lds	r20, 0x051B	; 0x80051b <serialCtxtRxBufferLen>
    48f2:	a7 e0       	ldi	r26, 0x07	; 7
    48f4:	b2 e0       	ldi	r27, 0x02	; 2
    48f6:	e8 2f       	mov	r30, r24
    48f8:	e4 0f       	add	r30, r20
    48fa:	38 17       	cp	r19, r24
    48fc:	39 f0       	breq	.+14     	; 0x490c <__vector_18+0x6e>
				serialCtxtRxBuffer[serialCtxtRxBufferLen++] = serialCtxtNmeaRxHookBuf[idx];
    48fe:	5d 91       	ld	r21, X+
    4900:	f0 e0       	ldi	r31, 0x00	; 0
    4902:	e1 5f       	subi	r30, 0xF1	; 241
    4904:	fd 4f       	sbci	r31, 0xFD	; 253
    4906:	50 83       	st	Z, r21
    4908:	8f 5f       	subi	r24, 0xFF	; 255
    490a:	f5 cf       	rjmp	.-22     	; 0x48f6 <__vector_18+0x58>
    490c:	e0 93 1b 05 	sts	0x051B, r30	; 0x80051b <serialCtxtRxBufferLen>
			}

			/* hook is processed and cleared */
			serialCtxtNmeaRxHookBufIdx = 0;
    4910:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <serialCtxtNmeaRxHookBufIdx>

			SREG = sreg;
    4914:	2f bf       	out	0x3f, r18	; 63
		}

		/* append data to the buffer */
		serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    4916:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <serialCtxtRxBufferLen>
    491a:	a1 e0       	ldi	r26, 0x01	; 1
    491c:	ae 0f       	add	r26, r30
    491e:	a0 93 1b 05 	sts	0x051B, r26	; 0x80051b <serialCtxtRxBufferLen>
    4922:	ce 2f       	mov	r28, r30
    4924:	d0 e0       	ldi	r29, 0x00	; 0
    4926:	c1 5f       	subi	r28, 0xF1	; 241
    4928:	dd 4f       	sbci	r29, 0xFD	; 253
    492a:	98 83       	st	Y, r25

		if (serialCtxtRxBufferLen >= (SERIALCTXT_RX_BUFFER_SIZE - 3)) {
    492c:	a5 37       	cpi	r26, 0x75	; 117
    492e:	80 f0       	brcs	.+32     	; 0x4950 <__vector_18+0xb2>
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = '\r';
    4930:	b0 e0       	ldi	r27, 0x00	; 0
    4932:	a1 5f       	subi	r26, 0xF1	; 241
    4934:	bd 4f       	sbci	r27, 0xFD	; 253
    4936:	8d e0       	ldi	r24, 0x0D	; 13
    4938:	8c 93       	st	X, r24
			rxData = '\n';
			serialCtxtRxBuffer[serialCtxtRxBufferLen++] = rxData;
    493a:	83 e0       	ldi	r24, 0x03	; 3
    493c:	8e 0f       	add	r24, r30
    493e:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <serialCtxtRxBufferLen>
    4942:	ee 5f       	subi	r30, 0xFE	; 254
    4944:	f0 e0       	ldi	r31, 0x00	; 0
    4946:	e1 5f       	subi	r30, 0xF1	; 241
    4948:	fd 4f       	sbci	r31, 0xFD	; 253
    494a:	8a e0       	ldi	r24, 0x0A	; 10
    494c:	80 83       	st	Z, r24
    494e:	02 c0       	rjmp	.+4      	; 0x4954 <__vector_18+0xb6>
		}

		/* if the end of a NMEA sentence is detected, send this serial RX buffer to the receive (IN) ring buffer */
		if (rxData == '\n') {  // a NMEA sentence stops with:  <sentence...*checksum\r\n>
    4950:	9a 30       	cpi	r25, 0x0A	; 10
    4952:	21 f4       	brne	.+8      	; 0x495c <__vector_18+0xbe>
			/* mark this job to be done in the main context */
			serialCtxtBufferState = SERIAL_CTXT_BUFFER_STATE_SEND;
    4954:	82 e0       	ldi	r24, 0x02	; 2
    4956:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <serialCtxtBufferState>
    495a:	12 c0       	rjmp	.+36     	; 0x4980 <__vector_18+0xe2>

		} else {
			/* append more data */
			serialCtxtBufferState = 0;
    495c:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <serialCtxtBufferState>
    4960:	0f c0       	rjmp	.+30     	; 0x4980 <__vector_18+0xe2>
		}
	} else if (serialCtxtNmeaRxHookBufIdx < SERIALCTXT_NMEA_RX_HOOK_SIZE) {
    4962:	28 30       	cpi	r18, 0x08	; 8
    4964:	68 f4       	brcc	.+26     	; 0x4980 <__vector_18+0xe2>
		uint8_t sreg = SREG;
    4966:	8f b7       	in	r24, 0x3f	; 63
		cli();
    4968:	f8 94       	cli
		serialCtxtNmeaRxHookBuf[serialCtxtNmeaRxHookBufIdx++] = rxData;
    496a:	e0 91 17 05 	lds	r30, 0x0517	; 0x800517 <serialCtxtNmeaRxHookBufIdx>
    496e:	21 e0       	ldi	r18, 0x01	; 1
    4970:	2e 0f       	add	r18, r30
    4972:	20 93 17 05 	sts	0x0517, r18	; 0x800517 <serialCtxtNmeaRxHookBufIdx>
    4976:	f0 e0       	ldi	r31, 0x00	; 0
    4978:	e9 5f       	subi	r30, 0xF9	; 249
    497a:	fd 4f       	sbci	r31, 0xFD	; 253
    497c:	90 83       	st	Z, r25
		SREG = sreg;
    497e:	8f bf       	out	0x3f, r24	; 63
	}
}
    4980:	ff 91       	pop	r31
    4982:	ef 91       	pop	r30
    4984:	df 91       	pop	r29
    4986:	cf 91       	pop	r28
    4988:	bf 91       	pop	r27
    498a:	af 91       	pop	r26
    498c:	9f 91       	pop	r25
    498e:	8f 91       	pop	r24
    4990:	5f 91       	pop	r21
    4992:	4f 91       	pop	r20
    4994:	3f 91       	pop	r19
    4996:	2f 91       	pop	r18
    4998:	0f 90       	pop	r0
    499a:	0f be       	out	0x3f, r0	; 63
    499c:	0f 90       	pop	r0
    499e:	1f 90       	pop	r1
    49a0:	18 95       	reti

000049a2 <__vector_19>:

//void serial_ISR_UDRE0(void) - __vector_19
ISR(USART_UDRE_vect, ISR_BLOCK)
{
    49a2:	1f 92       	push	r1
    49a4:	0f 92       	push	r0
    49a6:	0f b6       	in	r0, 0x3f	; 63
    49a8:	0f 92       	push	r0
    49aa:	11 24       	eor	r1, r1
    49ac:	8f 93       	push	r24
    49ae:	9f 93       	push	r25
    49b0:	ef 93       	push	r30
    49b2:	ff 93       	push	r31
	UCSR0B &= ~(_BV(UDRIE0));								// disable interrupt for register empty
    49b4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    49b8:	8f 7d       	andi	r24, 0xDF	; 223
    49ba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	sei();
    49be:	78 94       	sei

	/* first look if the serial buffer is filled */
	if (serialCtxtTxBufferIdx < serialCtxtTxBufferLen) {
    49c0:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <serialCtxtTxBufferIdx>
    49c4:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <serialCtxtTxBufferLen>
    49c8:	98 17       	cp	r25, r24
    49ca:	98 f4       	brcc	.+38     	; 0x49f2 <__vector_19+0x50>
		cli();
    49cc:	f8 94       	cli
		UDR0 = serialCtxtTxBuffer[serialCtxtTxBufferIdx++];	// UDRE0 becomes cleared
    49ce:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <serialCtxtTxBufferIdx>
    49d2:	81 e0       	ldi	r24, 0x01	; 1
    49d4:	8e 0f       	add	r24, r30
    49d6:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <serialCtxtTxBufferIdx>
    49da:	f0 e0       	ldi	r31, 0x00	; 0
    49dc:	e9 53       	subi	r30, 0x39	; 57
    49de:	fe 4f       	sbci	r31, 0xFE	; 254
    49e0:	80 81       	ld	r24, Z
    49e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		UCSR0B |= _BV(UDRIE0);								// enables interrupt for register empty
    49e6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    49ea:	80 62       	ori	r24, 0x20	; 32
    49ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		sei();
    49f0:	78 94       	sei
	}

	/* then check if job is now done */
	if (serialCtxtTxBufferIdx >= serialCtxtTxBufferLen) {
    49f2:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <serialCtxtTxBufferIdx>
    49f6:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <serialCtxtTxBufferLen>
    49fa:	98 17       	cp	r25, r24
    49fc:	48 f0       	brcs	.+18     	; 0x4a10 <__vector_19+0x6e>
		/* job is done - turn off data register empty interrupt */
		cli();
    49fe:	f8 94       	cli
		UCSR0B &= ~(_BV(UDRIE0));							// disable interrupt for register empty
    4a00:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4a04:	8f 7d       	andi	r24, 0xDF	; 223
    4a06:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		sei();
    4a0a:	78 94       	sei

		/* mark buffer as free */
		serialCtxtTxBufferLen = 0;
    4a0c:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <serialCtxtTxBufferLen>
	}
}
    4a10:	ff 91       	pop	r31
    4a12:	ef 91       	pop	r30
    4a14:	9f 91       	pop	r25
    4a16:	8f 91       	pop	r24
    4a18:	0f 90       	pop	r0
    4a1a:	0f be       	out	0x3f, r0	; 63
    4a1c:	0f 90       	pop	r0
    4a1e:	1f 90       	pop	r1
    4a20:	18 95       	reti

00004a22 <__vector_20>:

//void serial_ISR_TXC0(void) - __vector_20
ISR(USART_TX_vect, ISR_NOBLOCK)
{
    4a22:	78 94       	sei
    4a24:	1f 92       	push	r1
    4a26:	0f 92       	push	r0
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	0f 92       	push	r0
    4a2c:	11 24       	eor	r1, r1
	// not used yet
}
    4a2e:	0f 90       	pop	r0
    4a30:	0f be       	out	0x3f, r0	; 63
    4a32:	0f 90       	pop	r0
    4a34:	1f 90       	pop	r1
    4a36:	18 95       	reti

00004a38 <twi_fw_init>:


void twi_fw_init(void)
{
	/* power up this module */
	PRR &= ~(_BV(PRTWI));
    4a38:	e4 e6       	ldi	r30, 0x64	; 100
    4a3a:	f0 e0       	ldi	r31, 0x00	; 0
    4a3c:	80 81       	ld	r24, Z
    4a3e:	8f 77       	andi	r24, 0x7F	; 127
    4a40:	80 83       	st	Z, r24

	uint8_t sreg = SREG;
    4a42:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4a44:	f8 94       	cli

	// setting IO pins: pull-up on
	TWI_DDR   &= ~((_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM)));	// define SDA and SCL pins as input, as long the TWI alternate port function has not taken over
    4a46:	87 b1       	in	r24, 0x07	; 7
    4a48:	8f 7c       	andi	r24, 0xCF	; 207
    4a4a:	87 b9       	out	0x07, r24	; 7
	TWI_PORT  |=   (_BV(TWI_SDA_PNUM) | _BV(TWI_SCL_PNUM));		// SDA and SCL pull-up
    4a4c:	88 b1       	in	r24, 0x08	; 8
    4a4e:	80 63       	ori	r24, 0x30	; 48
    4a50:	88 b9       	out	0x08, r24	; 8

	// SCL frequency: using 400 kHz for SCL @20 MHz clock
	TWSR = 0; 							 						// prescaler = 1
    4a52:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 17;													// gives 400 kHz @20 MHz clock
    4a56:	81 e1       	ldi	r24, 0x11	; 17
    4a58:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	// TWI interface enabled and interrupt cleared
	TWCR = (_BV(TWINT) | _BV(TWEN));
    4a5c:	84 e8       	ldi	r24, 0x84	; 132
    4a5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	SREG = sreg;
    4a62:	9f bf       	out	0x3f, r25	; 63
    4a64:	08 95       	ret

00004a66 <twi_fw_waitUntilDone>:
		workInQueue();
	}
}

void twi_fw_waitUntilDone(uint8_t extraDelay)
{
    4a66:	cf 93       	push	r28
    4a68:	df 93       	push	r29
    4a6a:	c8 2f       	mov	r28, r24


static void s_delay(void)
{
	wdt_reset();
	if (usbIsUp) {
    4a6c:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <usbIsUp>
	}
}

void twi_fw_waitUntilDone(uint8_t extraDelay)
{
	while (twiState.doStart || twiState.isProcessing) {
    4a70:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4a74:	80 ff       	sbrs	r24, 0
    4a76:	08 c0       	rjmp	.+16     	; 0x4a88 <twi_fw_waitUntilDone+0x22>
#endif


static void s_delay(void)
{
	wdt_reset();
    4a78:	a8 95       	wdr
	if (usbIsUp) {
    4a7a:	99 23       	and	r25, r25
		usbPoll();
		usb_fw_sendInInterrupt();
    4a7c:	c9 f3       	breq	.-14     	; 0x4a70 <twi_fw_waitUntilDone+0xa>
    4a7e:	f5 d4       	rcall	.+2538   	; 0x546a <usbPoll>
		workInQueue();
    4a80:	ab d3       	rcall	.+1878   	; 0x51d8 <usb_fw_sendInInterrupt>
    4a82:	0e 94 36 0b 	call	0x166c	; 0x166c <workInQueue>
	}
}

void twi_fw_waitUntilDone(uint8_t extraDelay)
{
	while (twiState.doStart || twiState.isProcessing) {
    4a86:	f2 cf       	rjmp	.-28     	; 0x4a6c <twi_fw_waitUntilDone+0x6>
    4a88:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4a8c:	81 fd       	sbrc	r24, 1
		s_delay();
	}

	/* Give some more time for the TWI slave to process the data */
	for (int cnt = extraDelay; cnt; --cnt) {
    4a8e:	f4 cf       	rjmp	.-24     	; 0x4a78 <twi_fw_waitUntilDone+0x12>
    4a90:	d0 e0       	ldi	r29, 0x00	; 0
    4a92:	20 97       	sbiw	r28, 0x00	; 0
#endif


static void s_delay(void)
{
	wdt_reset();
    4a94:	59 f0       	breq	.+22     	; 0x4aac <twi_fw_waitUntilDone+0x46>
	if (usbIsUp) {
    4a96:	a8 95       	wdr
    4a98:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <usbIsUp>
		usbPoll();
    4a9c:	88 23       	and	r24, r24
		usb_fw_sendInInterrupt();
    4a9e:	21 f0       	breq	.+8      	; 0x4aa8 <twi_fw_waitUntilDone+0x42>
    4aa0:	e4 d4       	rcall	.+2504   	; 0x546a <usbPoll>
		workInQueue();
    4aa2:	9a d3       	rcall	.+1844   	; 0x51d8 <usb_fw_sendInInterrupt>
    4aa4:	0e 94 36 0b 	call	0x166c	; 0x166c <workInQueue>
	while (twiState.doStart || twiState.isProcessing) {
		s_delay();
	}

	/* Give some more time for the TWI slave to process the data */
	for (int cnt = extraDelay; cnt; --cnt) {
    4aa8:	21 97       	sbiw	r28, 0x01	; 1
		s_delay();
	}
}
    4aaa:	f3 cf       	rjmp	.-26     	; 0x4a92 <twi_fw_waitUntilDone+0x2c>
    4aac:	df 91       	pop	r29
    4aae:	cf 91       	pop	r28
    4ab0:	08 95       	ret

00004ab2 <isr_sendStart>:
	return twiSeq2Data[0];
}

void isr_sendStart(uint8_t sendSignal, uint8_t isRepeatedStart)
{
	uint8_t sreg = SREG;
    4ab2:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4ab4:	f8 94       	cli

	if (((!twiState.isProcessing && twiState.doStart) ||
    4ab6:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
    4aba:	91 fd       	sbrc	r25, 1
    4abc:	04 c0       	rjmp	.+8      	; 0x4ac6 <isr_sendStart+0x14>
    4abe:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
    4ac2:	90 fd       	sbrc	r25, 0
    4ac4:	06 c0       	rjmp	.+12     	; 0x4ad2 <isr_sendStart+0x20>
		 ( twiState.isProcessing && isRepeatedStart)) &&
    4ac6:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
void isr_sendStart(uint8_t sendSignal, uint8_t isRepeatedStart)
{
	uint8_t sreg = SREG;
	cli();

	if (((!twiState.isProcessing && twiState.doStart) ||
    4aca:	91 ff       	sbrs	r25, 1
    4acc:	17 c0       	rjmp	.+46     	; 0x4afc <isr_sendStart+0x4a>
		 ( twiState.isProcessing && isRepeatedStart)) &&
    4ace:	66 23       	and	r22, r22
    4ad0:	a9 f0       	breq	.+42     	; 0x4afc <isr_sendStart+0x4a>
    4ad2:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4ad6:	99 23       	and	r25, r25
    4ad8:	89 f0       	breq	.+34     	; 0x4afc <isr_sendStart+0x4a>
		twiSeq2DataCnt) {

		twiState.isProcessing	= true;
    4ada:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
    4ade:	92 60       	ori	r25, 0x02	; 2
    4ae0:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <twiState+0x1>
		twiState.doStart		= false;
    4ae4:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <twiState+0x1>
    4ae8:	9e 7f       	andi	r25, 0xFE	; 254
    4aea:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <twiState+0x1>
		twiSeq2DataIdx			= 0;
    4aee:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <twiSeq2DataIdx>

		if (sendSignal) {
    4af2:	88 23       	and	r24, r24
    4af4:	19 f0       	breq	.+6      	; 0x4afc <isr_sendStart+0x4a>
			/* send START or REPEATED START */
			TWCR = (_BV(TWINT) | _BV(TWSTA) | _BV(TWEN) | _BV(TWIE));	// start-TWI/rise clock, send START, TWI enabled, TWINT-Interrupt enabled
    4af6:	85 ea       	ldi	r24, 0xA5	; 165
    4af8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		}
	}

	SREG = sreg;
    4afc:	2f bf       	out	0x3f, r18	; 63
    4afe:	08 95       	ret

00004b00 <twi_fw_sendCmdSendData1SendDataVar>:

	twi_fw_sendCmdSendData1SendDataVar(addr, cmd, 2, (uint8_t*) &data);
}

void twi_fw_sendCmdSendData1SendDataVar(uint8_t addr, uint8_t cmd, uint8_t cnt, uint8_t data[])
{
    4b00:	ff 92       	push	r15
    4b02:	0f 93       	push	r16
    4b04:	1f 93       	push	r17
    4b06:	cf 93       	push	r28
    4b08:	df 93       	push	r29
    4b0a:	08 2f       	mov	r16, r24
    4b0c:	f6 2e       	mov	r15, r22
    4b0e:	14 2f       	mov	r17, r20
    4b10:	e9 01       	movw	r28, r18
	int i;
	uint8_t sreg;

	twi_fw_waitUntilDone(addr == TWI_SMART_LCD_ADDR ?  10 : 0);
    4b12:	82 32       	cpi	r24, 0x22	; 34
    4b14:	11 f0       	breq	.+4      	; 0x4b1a <twi_fw_sendCmdSendData1SendDataVar+0x1a>
    4b16:	80 e0       	ldi	r24, 0x00	; 0
    4b18:	01 c0       	rjmp	.+2      	; 0x4b1c <twi_fw_sendCmdSendData1SendDataVar+0x1c>
    4b1a:	8a e0       	ldi	r24, 0x0A	; 10

	sreg = SREG;
    4b1c:	a4 df       	rcall	.-184    	; 0x4a66 <twi_fw_waitUntilDone>
	cli();
    4b1e:	9f b7       	in	r25, 0x3f	; 63
	twiSeq1Adr = addr;
    4b20:	f8 94       	cli
    4b22:	00 93 10 05 	sts	0x0510, r16	; 0x800510 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    4b26:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    4b2a:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4b2e:	81 e0       	ldi	r24, 0x01	; 1
    4b30:	8e 0f       	add	r24, r30
    4b32:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataCnt>
    4b36:	f0 e0       	ldi	r31, 0x00	; 0
    4b38:	e3 5d       	subi	r30, 0xD3	; 211
    4b3a:	fe 4f       	sbci	r31, 0xFE	; 254
	twiState.isRepeatedStart = false;
    4b3c:	f0 82       	st	Z, r15
    4b3e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4b42:	8b 7f       	andi	r24, 0xFB	; 251
    4b44:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>
	for (i = 0; i < cnt; ++i) {
    4b48:	de 01       	movw	r26, r28
    4b4a:	41 2f       	mov	r20, r17
    4b4c:	50 e0       	ldi	r21, 0x00	; 0
    4b4e:	9d 01       	movw	r18, r26
    4b50:	2c 1b       	sub	r18, r28
    4b52:	3d 0b       	sbc	r19, r29
    4b54:	24 17       	cp	r18, r20
    4b56:	35 07       	cpc	r19, r21
		twiSeq2Data[twiSeq2DataCnt++] = data[i];
    4b58:	64 f4       	brge	.+24     	; 0x4b72 <twi_fw_sendCmdSendData1SendDataVar+0x72>
    4b5a:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4b5e:	81 e0       	ldi	r24, 0x01	; 1
    4b60:	8e 0f       	add	r24, r30
    4b62:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataCnt>
    4b66:	f0 e0       	ldi	r31, 0x00	; 0
    4b68:	8d 91       	ld	r24, X+
    4b6a:	e3 5d       	subi	r30, 0xD3	; 211
    4b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    4b6e:	80 83       	st	Z, r24
	}
	twiState.doStart = true;
    4b70:	ee cf       	rjmp	.-36     	; 0x4b4e <twi_fw_sendCmdSendData1SendDataVar+0x4e>
    4b72:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4b76:	81 60       	ori	r24, 0x01	; 1
    4b78:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>
	SREG = sreg;

	isr_sendStart(true, false);
    4b7c:	9f bf       	out	0x3f, r25	; 63
    4b7e:	60 e0       	ldi	r22, 0x00	; 0
}
    4b80:	81 e0       	ldi	r24, 0x01	; 1
    4b82:	df 91       	pop	r29
    4b84:	cf 91       	pop	r28
    4b86:	1f 91       	pop	r17
		twiSeq2Data[twiSeq2DataCnt++] = data[i];
	}
	twiState.doStart = true;
	SREG = sreg;

	isr_sendStart(true, false);
    4b88:	0f 91       	pop	r16
    4b8a:	ff 90       	pop	r15
    4b8c:	92 cf       	rjmp	.-220    	; 0x4ab2 <isr_sendStart>

00004b8e <twi_fw_sendCmdSendData1>:
		s_delay();
	}
}

void twi_fw_sendCmdSendData1(uint8_t addr, uint8_t cmd, uint8_t data1)
{
    4b8e:	cf 93       	push	r28
    4b90:	df 93       	push	r29
    4b92:	1f 92       	push	r1
    4b94:	cd b7       	in	r28, 0x3d	; 61
    4b96:	de b7       	in	r29, 0x3e	; 62
    4b98:	49 83       	std	Y+1, r20	; 0x01
	twi_fw_sendCmdSendData1SendDataVar(addr, cmd, 1, &data1);
    4b9a:	9e 01       	movw	r18, r28
    4b9c:	2f 5f       	subi	r18, 0xFF	; 255
    4b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4ba0:	41 e0       	ldi	r20, 0x01	; 1
    4ba2:	ae df       	rcall	.-164    	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>
}
    4ba4:	0f 90       	pop	r0
    4ba6:	df 91       	pop	r29
    4ba8:	cf 91       	pop	r28
    4baa:	08 95       	ret

00004bac <twi_fw_sendCmdSendData1SendData2>:

void twi_fw_sendCmdSendData1SendData2(uint8_t addr, uint8_t cmd, uint8_t data1, uint8_t data2)
{
    4bac:	cf 93       	push	r28
    4bae:	df 93       	push	r29
    4bb0:	00 d0       	rcall	.+0      	; 0x4bb2 <twi_fw_sendCmdSendData1SendData2+0x6>
    4bb2:	cd b7       	in	r28, 0x3d	; 61
    4bb4:	de b7       	in	r29, 0x3e	; 62
	struct {
		uint8_t data1;
		uint8_t data2;
	} data = { data1, data2 };
    4bb6:	49 83       	std	Y+1, r20	; 0x01
    4bb8:	2a 83       	std	Y+2, r18	; 0x02

	twi_fw_sendCmdSendData1SendDataVar(addr, cmd, 2, (uint8_t*) &data);
    4bba:	9e 01       	movw	r18, r28
    4bbc:	2f 5f       	subi	r18, 0xFF	; 255
    4bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    4bc0:	42 e0       	ldi	r20, 0x02	; 2
    4bc2:	9e df       	rcall	.-196    	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>
}
    4bc4:	0f 90       	pop	r0
    4bc6:	0f 90       	pop	r0
    4bc8:	df 91       	pop	r29
    4bca:	cf 91       	pop	r28
    4bcc:	08 95       	ret

00004bce <twi_fw_sendCmdReadData1>:

	isr_sendStart(true, false);
}

uint8_t twi_fw_sendCmdReadData1(uint8_t addr, uint8_t cmd)
{
    4bce:	cf 93       	push	r28
    4bd0:	df 93       	push	r29
    4bd2:	c8 2f       	mov	r28, r24
    4bd4:	d6 2f       	mov	r29, r22
	uint8_t sreg;

	twi_fw_waitUntilDone(addr == TWI_SMART_LCD_ADDR ?  10 : 0);
    4bd6:	82 32       	cpi	r24, 0x22	; 34
    4bd8:	11 f0       	breq	.+4      	; 0x4bde <twi_fw_sendCmdReadData1+0x10>
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	01 c0       	rjmp	.+2      	; 0x4be0 <twi_fw_sendCmdReadData1+0x12>
    4bde:	8a e0       	ldi	r24, 0x0A	; 10

	sreg = SREG;
    4be0:	42 df       	rcall	.-380    	; 0x4a66 <twi_fw_waitUntilDone>
	cli();
    4be2:	9f b7       	in	r25, 0x3f	; 63
	twiSeq1Adr = addr;
    4be4:	f8 94       	cli
    4be6:	c0 93 10 05 	sts	0x0510, r28	; 0x800510 <twiSeq1Adr>
	twiSeq2DataCnt = 0;
    4bea:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <twiSeq2DataCnt>
	twiSeq2Data[twiSeq2DataCnt++] = cmd;
    4bee:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4bf2:	81 e0       	ldi	r24, 0x01	; 1
    4bf4:	8e 0f       	add	r24, r30
    4bf6:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataCnt>
    4bfa:	f0 e0       	ldi	r31, 0x00	; 0
    4bfc:	e3 5d       	subi	r30, 0xD3	; 211
    4bfe:	fe 4f       	sbci	r31, 0xFE	; 254
	twiState.isRepeatedStart = true;
    4c00:	d0 83       	st	Z, r29
    4c02:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4c06:	84 60       	ori	r24, 0x04	; 4
    4c08:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>
	twiSeq2DataRcvCnt = 1;
    4c0c:	81 e0       	ldi	r24, 0x01	; 1
    4c0e:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <twiSeq2DataRcvCnt>
	twiState.doStart = true;
    4c12:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4c16:	81 60       	ori	r24, 0x01	; 1
    4c18:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>
	SREG = sreg;

	isr_sendStart(true, false);
    4c1c:	9f bf       	out	0x3f, r25	; 63
    4c1e:	60 e0       	ldi	r22, 0x00	; 0
	twi_fw_waitUntilDone(0);
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	47 df       	rcall	.-370    	; 0x4ab2 <isr_sendStart>
    4c24:	80 e0       	ldi	r24, 0x00	; 0

	return twiSeq2Data[0];
    4c26:	1f df       	rcall	.-450    	; 0x4a66 <twi_fw_waitUntilDone>
    4c28:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <twiSeq2Data>
}
    4c2c:	df 91       	pop	r29
    4c2e:	cf 91       	pop	r28
    4c30:	08 95       	ret

00004c32 <isr_sendStop>:
	SREG = sreg;
}

void isr_sendStop(uint8_t sendSignal)
{
	uint8_t sreg = SREG;
    4c32:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4c34:	f8 94       	cli

	if (sendSignal && twiState.isProcessing) {
    4c36:	88 23       	and	r24, r24
    4c38:	39 f0       	breq	.+14     	; 0x4c48 <isr_sendStop+0x16>
    4c3a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4c3e:	81 ff       	sbrs	r24, 1
    4c40:	03 c0       	rjmp	.+6      	; 0x4c48 <isr_sendStop+0x16>
		/* send stop */
		TWCR = (_BV(TWINT) | _BV(TWSTO) | _BV(TWEN) | _BV(TWIE));
    4c42:	85 e9       	ldi	r24, 0x95	; 149
    4c44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}

	twiSeq2DataCnt = 0;
    4c48:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <twiSeq2DataCnt>
	twiState.isProcessing = false;
    4c4c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4c50:	8d 7f       	andi	r24, 0xFD	; 253
    4c52:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>

	SREG = sreg;
    4c56:	9f bf       	out	0x3f, r25	; 63
    4c58:	08 95       	ret

00004c5a <__vector_24>:
/* Forward declaration */
static uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur);

//void twi_ISR_TWI(void) - __vector_24
ISR(TWI_vect, ISR_BLOCK)
{	/* TWI */
    4c5a:	1f 92       	push	r1
    4c5c:	0f 92       	push	r0
    4c5e:	0f b6       	in	r0, 0x3f	; 63
    4c60:	0f 92       	push	r0
    4c62:	11 24       	eor	r1, r1
    4c64:	2f 93       	push	r18
    4c66:	3f 93       	push	r19
    4c68:	4f 93       	push	r20
    4c6a:	5f 93       	push	r21
    4c6c:	6f 93       	push	r22
    4c6e:	7f 93       	push	r23
    4c70:	8f 93       	push	r24
    4c72:	9f 93       	push	r25
    4c74:	af 93       	push	r26
    4c76:	bf 93       	push	r27
    4c78:	cf 93       	push	r28
    4c7a:	ef 93       	push	r30
    4c7c:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    4c7e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4c82:	88 7f       	andi	r24, 0xF8	; 248
	uint8_t twd = TWDR;
    4c84:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    4c88:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);			// TWI interrupt flag reset, TWI enabled and TWINT-Interrupt enabled
}

static uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
	uint8_t twcr_new = twcr_cur & 0b01000101;
    4c8c:	c2 2f       	mov	r28, r18
    4c8e:	c5 74       	andi	r28, 0x45	; 69

	/* publish the state */
	twiState.state = tws;
    4c90:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <twiState>

	switch(tws) {
    4c94:	88 32       	cpi	r24, 0x28	; 40
    4c96:	09 f4       	brne	.+2      	; 0x4c9a <__vector_24+0x40>
    4c98:	6f c0       	rjmp	.+222    	; 0x4d78 <__vector_24+0x11e>
    4c9a:	80 f4       	brcc	.+32     	; 0x4cbc <__vector_24+0x62>
    4c9c:	80 31       	cpi	r24, 0x10	; 16
    4c9e:	f9 f0       	breq	.+62     	; 0x4cde <__vector_24+0x84>
    4ca0:	38 f4       	brcc	.+14     	; 0x4cb0 <__vector_24+0x56>
    4ca2:	88 30       	cpi	r24, 0x08	; 8
    4ca4:	09 f0       	breq	.+2      	; 0x4ca8 <__vector_24+0x4e>
    4ca6:	ac c0       	rjmp	.+344    	; 0x4e00 <__vector_24+0x1a6>
	case TWI_TWSR_START:
		/* MASTER: send SLA - slave WRITE address */
		TWDR = (twiSeq1Adr << 1);  						// I2C device address - write mode after first start
    4ca8:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4cac:	88 0f       	add	r24, r24
    4cae:	40 c0       	rjmp	.+128    	; 0x4d30 <__vector_24+0xd6>
	uint8_t twcr_new = twcr_cur & 0b01000101;

	/* publish the state */
	twiState.state = tws;

	switch(tws) {
    4cb0:	88 31       	cpi	r24, 0x18	; 24
    4cb2:	29 f1       	breq	.+74     	; 0x4cfe <__vector_24+0xa4>
    4cb4:	80 32       	cpi	r24, 0x20	; 32
    4cb6:	09 f4       	brne	.+2      	; 0x4cba <__vector_24+0x60>
    4cb8:	4a c0       	rjmp	.+148    	; 0x4d4e <__vector_24+0xf4>
    4cba:	a2 c0       	rjmp	.+324    	; 0x4e00 <__vector_24+0x1a6>
    4cbc:	88 34       	cpi	r24, 0x48	; 72
    4cbe:	09 f4       	brne	.+2      	; 0x4cc2 <__vector_24+0x68>
    4cc0:	46 c0       	rjmp	.+140    	; 0x4d4e <__vector_24+0xf4>
    4cc2:	30 f4       	brcc	.+12     	; 0x4cd0 <__vector_24+0x76>
    4cc4:	80 33       	cpi	r24, 0x30	; 48
    4cc6:	09 f4       	brne	.+2      	; 0x4cca <__vector_24+0x70>
    4cc8:	9b c0       	rjmp	.+310    	; 0x4e00 <__vector_24+0x1a6>
    4cca:	80 34       	cpi	r24, 0x40	; 64
    4ccc:	c1 f0       	breq	.+48     	; 0x4cfe <__vector_24+0xa4>
    4cce:	98 c0       	rjmp	.+304    	; 0x4e00 <__vector_24+0x1a6>
    4cd0:	80 35       	cpi	r24, 0x50	; 80
    4cd2:	09 f4       	brne	.+2      	; 0x4cd6 <__vector_24+0x7c>
    4cd4:	6c c0       	rjmp	.+216    	; 0x4dae <__vector_24+0x154>
    4cd6:	88 35       	cpi	r24, 0x58	; 88
    4cd8:	09 f4       	brne	.+2      	; 0x4cdc <__vector_24+0x82>
    4cda:	80 c0       	rjmp	.+256    	; 0x4ddc <__vector_24+0x182>
    4cdc:	91 c0       	rjmp	.+290    	; 0x4e00 <__vector_24+0x1a6>
		TWDR = (twiSeq1Adr << 1);  						// I2C device address - write mode after first start
		break;

	case TWI_TWSR_REPEATEDSTART:
		/* MASTER: send SLA - slave address */
		TWDR = (twiSeq1Adr << 1) | 1; 					// I2C device address - read mode after repeated start
    4cde:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4ce2:	88 0f       	add	r24, r24
    4ce4:	81 60       	ori	r24, 0x01	; 1
    4ce6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

		twiState.isRepeatedStart = false;
    4cea:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4cee:	8b 7f       	andi	r24, 0xFB	; 251
    4cf0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twiState+0x1>
		twiSeq2DataCnt = twiSeq2DataRcvCnt;
    4cf4:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <twiSeq2DataRcvCnt>
    4cf8:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twiSeq2DataCnt>
    4cfc:	84 c0       	rjmp	.+264    	; 0x4e06 <__vector_24+0x1ac>
		break;

	case TWI_TWSR_M_SLAW_ADDR_ACK:
	case TWI_TWSR_M_SLAR_ADDR_ACK:
		if (twiSeq1Adr == TWI_MCP23017_ADDR) {
    4cfe:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4d02:	80 32       	cpi	r24, 0x20	; 32
    4d04:	31 f4       	brne	.+12     	; 0x4d12 <__vector_24+0xb8>
			main_bf.mainIsLcdAttached = true;
    4d06:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4d0a:	80 68       	ori	r24, 0x80	; 128
    4d0c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    4d10:	09 c0       	rjmp	.+18     	; 0x4d24 <__vector_24+0xca>
		} else if (twiSeq1Adr == TWI_SMART_LCD_ADDR) {
    4d12:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4d16:	82 32       	cpi	r24, 0x22	; 34
    4d18:	29 f4       	brne	.+10     	; 0x4d24 <__vector_24+0xca>
			main_bf.mainIsSmartAttached = true;
    4d1a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    4d1e:	81 60       	ori	r24, 0x01	; 1
    4d20:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
		}

		if (twiState.state == TWI_TWSR_M_SLAW_ADDR_ACK) {
    4d24:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <twiState>
    4d28:	88 31       	cpi	r24, 0x18	; 24
    4d2a:	29 f4       	brne	.+10     	; 0x4d36 <__vector_24+0xdc>
			/* send command data */
			TWDR = twiSeq2Data[0];							// internal command or address register of the I2C device
    4d2c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <twiSeq2Data>
    4d30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4d34:	68 c0       	rjmp	.+208    	; 0x4e06 <__vector_24+0x1ac>
		} else {
			// no data byte to store, here
			if ((twiSeq2DataIdx + 1) >= twiSeq2DataCnt) {
    4d36:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4d3a:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	01 96       	adiw	r24, 0x01	; 1
    4d42:	50 e0       	ldi	r21, 0x00	; 0
    4d44:	84 17       	cp	r24, r20
    4d46:	95 07       	cpc	r25, r21
    4d48:	0c f4       	brge	.+2      	; 0x4d4c <__vector_24+0xf2>
    4d4a:	46 c0       	rjmp	.+140    	; 0x4dd8 <__vector_24+0x17e>
    4d4c:	42 c0       	rjmp	.+132    	; 0x4dd2 <__vector_24+0x178>
		}
		break;

	case TWI_TWSR_M_SLAW_ADDR_NACK:
	case TWI_TWSR_M_SLAR_ADDR_NACK:
		if (twiSeq1Adr == TWI_MCP23017_ADDR) {
    4d4e:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4d52:	80 32       	cpi	r24, 0x20	; 32
    4d54:	31 f4       	brne	.+12     	; 0x4d62 <__vector_24+0x108>
			main_bf.mainIsLcdAttached = false;
    4d56:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4d5a:	8f 77       	andi	r24, 0x7F	; 127
    4d5c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    4d60:	4f c0       	rjmp	.+158    	; 0x4e00 <__vector_24+0x1a6>
		} else if (twiSeq1Adr == TWI_SMART_LCD_ADDR) {
    4d62:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <twiSeq1Adr>
    4d66:	82 32       	cpi	r24, 0x22	; 34
    4d68:	09 f0       	breq	.+2      	; 0x4d6c <__vector_24+0x112>
    4d6a:	4a c0       	rjmp	.+148    	; 0x4e00 <__vector_24+0x1a6>
			main_bf.mainIsSmartAttached = false;
    4d6c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    4d70:	8e 7f       	andi	r24, 0xFE	; 254
    4d72:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
    4d76:	44 c0       	rjmp	.+136    	; 0x4e00 <__vector_24+0x1a6>
		isr_sendStop(false);
		twcr_new |= _BV(TWSTO);
		break;

	case TWI_TWSR_M_SLAW_DATA_ACK:
		++twiSeq2DataIdx;
    4d78:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4d7c:	8f 5f       	subi	r24, 0xFF	; 255
    4d7e:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <twiSeq2DataIdx>
		if (twiSeq2DataIdx < twiSeq2DataCnt) {
    4d82:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4d86:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4d8a:	98 17       	cp	r25, r24
    4d8c:	38 f4       	brcc	.+14     	; 0x4d9c <__vector_24+0x142>
			/* send data */
			TWDR = twiSeq2Data[twiSeq2DataIdx];
    4d8e:	e0 91 0d 05 	lds	r30, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4d92:	f0 e0       	ldi	r31, 0x00	; 0
    4d94:	e3 5d       	subi	r30, 0xD3	; 211
    4d96:	fe 4f       	sbci	r31, 0xFE	; 254
    4d98:	80 81       	ld	r24, Z
    4d9a:	ca cf       	rjmp	.-108    	; 0x4d30 <__vector_24+0xd6>

		} else {
			if (twiState.isRepeatedStart) {
    4d9c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twiState+0x1>
    4da0:	82 ff       	sbrs	r24, 2
    4da2:	2e c0       	rjmp	.+92     	; 0x4e00 <__vector_24+0x1a6>
				isr_sendStart(false, true);
    4da4:	61 e0       	ldi	r22, 0x01	; 1
    4da6:	80 e0       	ldi	r24, 0x00	; 0
    4da8:	84 de       	rcall	.-760    	; 0x4ab2 <isr_sendStart>
				twcr_new |= _BV(TWSTA);
    4daa:	c0 62       	ori	r28, 0x20	; 32
    4dac:	2c c0       	rjmp	.+88     	; 0x4e06 <__vector_24+0x1ac>
		twcr_new |= _BV(TWSTO);
		break;

	case TWI_TWSR_M_SLAR_DATA_ACK:
		/* receive data */
		twiSeq2Data[twiSeq2DataIdx++]	= TWDR;
    4dae:	e0 91 0d 05 	lds	r30, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4db2:	81 e0       	ldi	r24, 0x01	; 1
    4db4:	8e 0f       	add	r24, r30
    4db6:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <twiSeq2DataIdx>
    4dba:	f0 e0       	ldi	r31, 0x00	; 0
    4dbc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4dc0:	e3 5d       	subi	r30, 0xD3	; 211
    4dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    4dc4:	80 83       	st	Z, r24
		if (twiSeq2DataIdx >= twiSeq2DataCnt) {
    4dc6:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4dca:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4dce:	98 17       	cp	r25, r24
    4dd0:	18 f0       	brcs	.+6      	; 0x4dd8 <__vector_24+0x17e>
			twcr_new &= ~_BV(TWEA);							// NACK next data byte
    4dd2:	c2 2f       	mov	r28, r18
    4dd4:	c5 70       	andi	r28, 0x05	; 5
    4dd6:	17 c0       	rjmp	.+46     	; 0x4e06 <__vector_24+0x1ac>
		} else {
			twcr_new |= _BV(TWEA);							// ACK  next data byte to get further data
    4dd8:	c0 64       	ori	r28, 0x40	; 64
    4dda:	15 c0       	rjmp	.+42     	; 0x4e06 <__vector_24+0x1ac>
		}
		break;

	case TWI_TWSR_M_SLAR_DATA_NACK:
		if (twiSeq2DataIdx < twiSeq2DataCnt) {
    4ddc:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4de0:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twiSeq2DataCnt>
    4de4:	98 17       	cp	r25, r24
    4de6:	60 f4       	brcc	.+24     	; 0x4e00 <__vector_24+0x1a6>
			twiSeq2Data[twiSeq2DataIdx++]	= TWDR;
    4de8:	e0 91 0d 05 	lds	r30, 0x050D	; 0x80050d <twiSeq2DataIdx>
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	8e 0f       	add	r24, r30
    4df0:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <twiSeq2DataIdx>
    4df4:	f0 e0       	ldi	r31, 0x00	; 0
    4df6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    4dfa:	e3 5d       	subi	r30, 0xD3	; 211
    4dfc:	fe 4f       	sbci	r31, 0xFE	; 254
		isr_sendStop(false);
		twcr_new |= _BV(TWSTO);
		break;

	default:
		isr_sendStop(false);
    4dfe:	80 83       	st	Z, r24
    4e00:	80 e0       	ldi	r24, 0x00	; 0
		twcr_new |= _BV(TWSTO);
    4e02:	17 df       	rcall	.-466    	; 0x4c32 <isr_sendStop>
{	/* TWI */
	uint8_t tws = TWSR & (0b11111 << TWS3);
	uint8_t twd = TWDR;
	uint8_t twcr_cur = TWCR;
	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);			// TWI interrupt flag reset, TWI enabled and TWINT-Interrupt enabled
    4e04:	c0 61       	ori	r28, 0x10	; 16
    4e06:	c5 68       	ori	r28, 0x85	; 133
    4e08:	c0 93 bc 00 	sts	0x00BC, r28	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    4e0c:	ff 91       	pop	r31
    4e0e:	ef 91       	pop	r30
    4e10:	cf 91       	pop	r28
    4e12:	bf 91       	pop	r27
    4e14:	af 91       	pop	r26
    4e16:	9f 91       	pop	r25
    4e18:	8f 91       	pop	r24
    4e1a:	7f 91       	pop	r23
    4e1c:	6f 91       	pop	r22
    4e1e:	5f 91       	pop	r21
    4e20:	4f 91       	pop	r20
    4e22:	3f 91       	pop	r19
    4e24:	2f 91       	pop	r18
    4e26:	0f 90       	pop	r0
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	0f 90       	pop	r0
    4e2c:	1f 90       	pop	r1
    4e2e:	18 95       	reti

00004e30 <twi_mcp23017_fw_init>:
	uint8_t clr_data = 0x00;  // clear data
	uint8_t set_data = 0xff;  // set data
	uint8_t conData = _BV(IOCON_SEQOP) | _BV(IOCON_ODR);	// BANK=0, no MIRROR, BYTE mode, do not overwrite INT bits (ODR),

	/* IOCON */
	(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IOCON, conData);
    4e30:	44 e2       	ldi	r20, 0x24	; 36
    4e32:	6a e0       	ldi	r22, 0x0A	; 10
    4e34:	80 e2       	ldi	r24, 0x20	; 32
	twi_fw_waitUntilDone(0);
    4e36:	ab de       	rcall	.-682    	; 0x4b8e <twi_fw_sendCmdSendData1>
    4e38:	80 e0       	ldi	r24, 0x00	; 0

	if (!main_bf.mainIsLcdAttached) {
    4e3a:	15 de       	rcall	.-982    	; 0x4a66 <twi_fw_waitUntilDone>
    4e3c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4e40:	87 ff       	sbrs	r24, 7
	}

	/* GPIO */

	/* GPPU */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPPUA, set_data, set_data);  // pull up all GPIO bits - setting port-A and port-B
    4e42:	28 c0       	rjmp	.+80     	; 0x4e94 <twi_mcp23017_fw_init+0x64>
    4e44:	2f ef       	ldi	r18, 0xFF	; 255
    4e46:	4f ef       	ldi	r20, 0xFF	; 255
    4e48:	6c e0       	ldi	r22, 0x0C	; 12
    4e4a:	80 e2       	ldi	r24, 0x20	; 32

	/* IODIR */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data, clr_data);  // 0=output / 1=input - setting port-A and port-B
    4e4c:	af de       	rcall	.-674    	; 0x4bac <twi_fw_sendCmdSendData1SendData2>
    4e4e:	20 e0       	ldi	r18, 0x00	; 0
    4e50:	4f ef       	ldi	r20, 0xFF	; 255
    4e52:	60 e0       	ldi	r22, 0x00	; 0

	/* IPOL */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IPOLA, clr_data, clr_data);  // no pin inversion - setting port-A and port-B
    4e54:	80 e2       	ldi	r24, 0x20	; 32
    4e56:	aa de       	rcall	.-684    	; 0x4bac <twi_fw_sendCmdSendData1SendData2>
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	40 e0       	ldi	r20, 0x00	; 0

	/* GPIO */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPIOA, clr_data, clr_data);  // all data out cleared - setting port-A and port-B
    4e5c:	62 e0       	ldi	r22, 0x02	; 2
    4e5e:	80 e2       	ldi	r24, 0x20	; 32
    4e60:	a5 de       	rcall	.-694    	; 0x4bac <twi_fw_sendCmdSendData1SendData2>
    4e62:	20 e0       	ldi	r18, 0x00	; 0
    4e64:	40 e0       	ldi	r20, 0x00	; 0

	/* OLAT */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATA, clr_data, clr_data);  // all data cleared - setting port-A and port-B
    4e66:	62 e1       	ldi	r22, 0x12	; 18
    4e68:	80 e2       	ldi	r24, 0x20	; 32
    4e6a:	a0 de       	rcall	.-704    	; 0x4bac <twi_fw_sendCmdSendData1SendData2>
    4e6c:	20 e0       	ldi	r18, 0x00	; 0
    4e6e:	40 e0       	ldi	r20, 0x00	; 0


	/* INTERRUPTS */

	/* GPINTEN */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPINTENA, clr_data, clr_data);  // no INT used - setting port-A and port-B
    4e70:	64 e1       	ldi	r22, 0x14	; 20
    4e72:	80 e2       	ldi	r24, 0x20	; 32
    4e74:	9b de       	rcall	.-714    	; 0x4bac <twi_fw_sendCmdSendData1SendData2>
    4e76:	20 e0       	ldi	r18, 0x00	; 0
    4e78:	40 e0       	ldi	r20, 0x00	; 0

	/* DEFVAL */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_DEFVALA, clr_data, clr_data);  // unused - setting port-A and port-B
    4e7a:	64 e0       	ldi	r22, 0x04	; 4
    4e7c:	80 e2       	ldi	r24, 0x20	; 32
    4e7e:	96 de       	rcall	.-724    	; 0x4bac <twi_fw_sendCmdSendData1SendData2>
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	40 e0       	ldi	r20, 0x00	; 0

	/* INTCON */
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_INTCONA, set_data, set_data);  // unused - setting port-A and port-B
    4e84:	66 e0       	ldi	r22, 0x06	; 6
    4e86:	80 e2       	ldi	r24, 0x20	; 32
    4e88:	91 de       	rcall	.-734    	; 0x4bac <twi_fw_sendCmdSendData1SendData2>
    4e8a:	2f ef       	ldi	r18, 0xFF	; 255
    4e8c:	4f ef       	ldi	r20, 0xFF	; 255
    4e8e:	68 e0       	ldi	r22, 0x08	; 8
    4e90:	80 e2       	ldi	r24, 0x20	; 32
    4e92:	8c ce       	rjmp	.-744    	; 0x4bac <twi_fw_sendCmdSendData1SendData2>
    4e94:	08 95       	ret

00004e96 <twi_mcp23017_fw_setPortA_DirOut>:
void twi_mcp23017_fw_setPortA_DirOut(uint8_t isOut)
{
	uint8_t clr_data = 0x00;  // clear data
	uint8_t set_data = 0xff;  // set data

	if (isOut) {
    4e96:	88 23       	and	r24, r24
    4e98:	11 f0       	breq	.+4      	; 0x4e9e <twi_mcp23017_fw_setPortA_DirOut+0x8>
		(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, clr_data);  // 0=output - setting port-A
    4e9a:	40 e0       	ldi	r20, 0x00	; 0
    4e9c:	01 c0       	rjmp	.+2      	; 0x4ea0 <twi_mcp23017_fw_setPortA_DirOut+0xa>

	} else {
		(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_IODIRA, set_data);  // 1=input  - setting port-A
    4e9e:	4f ef       	ldi	r20, 0xFF	; 255
    4ea0:	60 e0       	ldi	r22, 0x00	; 0
    4ea2:	80 e2       	ldi	r24, 0x20	; 32
    4ea4:	74 ce       	rjmp	.-792    	; 0x4b8e <twi_fw_sendCmdSendData1>

00004ea6 <twi_mcp23017_fw_setPortB>:
	}
}

void twi_mcp23017_fw_setPortB(uint8_t portB)
{
	(void) twi_fw_sendCmdSendData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATB, portB);
    4ea6:	48 2f       	mov	r20, r24
    4ea8:	65 e1       	ldi	r22, 0x15	; 21
    4eaa:	80 e2       	ldi	r24, 0x20	; 32
    4eac:	70 ce       	rjmp	.-800    	; 0x4b8e <twi_fw_sendCmdSendData1>

00004eae <twi_mcp23017_fw_setPortBA>:
}

void twi_mcp23017_fw_setPortBA(uint8_t portB, uint8_t portA)
{
    4eae:	46 2f       	mov	r20, r22
	portB |= (portA & 0x01) << 7;							// XXX defective MCP23017 work-around
    4eb0:	90 e8       	ldi	r25, 0x80	; 128
    4eb2:	69 9f       	mul	r22, r25
    4eb4:	90 01       	movw	r18, r0
    4eb6:	11 24       	eor	r1, r1
    4eb8:	28 2b       	or	r18, r24
	(void) twi_fw_sendCmdSendData1SendData2(TWI_MCP23017_ADDR, TWI_MCP23017_REG_OLATA, portA, portB);
    4eba:	64 e1       	ldi	r22, 0x14	; 20
    4ebc:	80 e2       	ldi	r24, 0x20	; 32
    4ebe:	76 ce       	rjmp	.-788    	; 0x4bac <twi_fw_sendCmdSendData1SendData2>

00004ec0 <twi_mcp23017_fw_readPortA>:
}

uint8_t twi_mcp23017_fw_readPortA(void)
{
	return twi_fw_sendCmdReadData1(TWI_MCP23017_ADDR, TWI_MCP23017_REG_GPIOA);
    4ec0:	62 e1       	ldi	r22, 0x12	; 18
    4ec2:	80 e2       	ldi	r24, 0x20	; 32
    4ec4:	84 ce       	rjmp	.-760    	; 0x4bce <twi_fw_sendCmdReadData1>

00004ec6 <twi_mcp23017_av1624_fw_waitUntilReady>:
	twi_mcp23017_fw_setPortA_DirOut(false);
}
#endif

void twi_mcp23017_av1624_fw_waitUntilReady(void)
{
    4ec6:	1f 93       	push	r17
    4ec8:	cf 93       	push	r28
    4eca:	df 93       	push	r29
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    4ecc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    4ed0:	82 95       	swap	r24
    4ed2:	86 95       	lsr	r24
    4ed4:	87 70       	andi	r24, 0x07	; 7
    4ed6:	81 30       	cpi	r24, 0x01	; 1
    4ed8:	11 f0       	breq	.+4      	; 0x4ede <twi_mcp23017_av1624_fw_waitUntilReady+0x18>
    4eda:	c0 e0       	ldi	r28, 0x00	; 0
    4edc:	01 c0       	rjmp	.+2      	; 0x4ee0 <twi_mcp23017_av1624_fw_waitUntilReady+0x1a>
    4ede:	c8 e0       	ldi	r28, 0x08	; 8

	twi_mcp23017_fw_setPortA_DirOut(false);
    4ee0:	80 e0       	ldi	r24, 0x00	; 0
    4ee2:	d9 df       	rcall	.-78     	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>

	for (;;) {
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    4ee4:	dc 2f       	mov	r29, r28
    4ee6:	d2 60       	ori	r29, 0x02	; 2
		twi_mcp23017_fw_setPortB(0b0011 | lightBF);
    4ee8:	c3 60       	ori	r28, 0x03	; 3
		uint8_t status = twi_mcp23017_fw_readPortA();
    4eea:	8d 2f       	mov	r24, r29
    4eec:	dc df       	rcall	.-72     	; 0x4ea6 <twi_mcp23017_fw_setPortB>
		twi_mcp23017_fw_setPortB(0b0010 | lightBF);
    4eee:	8c 2f       	mov	r24, r28
    4ef0:	da df       	rcall	.-76     	; 0x4ea6 <twi_mcp23017_fw_setPortB>
    4ef2:	e6 df       	rcall	.-52     	; 0x4ec0 <twi_mcp23017_fw_readPortA>

		if (!(status & 0x80)) {
    4ef4:	18 2f       	mov	r17, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4ef6:	8d 2f       	mov	r24, r29
    4ef8:	d6 df       	rcall	.-84     	; 0x4ea6 <twi_mcp23017_fw_setPortB>
    4efa:	17 ff       	sbrs	r17, 7
			break;
		}

		_delay_us(10);
		wdt_reset();
    4efc:	07 c0       	rjmp	.+14     	; 0x4f0c <twi_mcp23017_av1624_fw_waitUntilReady+0x46>
		usbPoll();
    4efe:	82 e4       	ldi	r24, 0x42	; 66
    4f00:	8a 95       	dec	r24
	}
    4f02:	f1 f7       	brne	.-4      	; 0x4f00 <twi_mcp23017_av1624_fw_waitUntilReady+0x3a>
}
    4f04:	00 c0       	rjmp	.+0      	; 0x4f06 <twi_mcp23017_av1624_fw_waitUntilReady+0x40>
    4f06:	a8 95       	wdr
    4f08:	b0 d2       	rcall	.+1376   	; 0x546a <usbPoll>
    4f0a:	ef cf       	rjmp	.-34     	; 0x4eea <twi_mcp23017_av1624_fw_waitUntilReady+0x24>
    4f0c:	df 91       	pop	r29
    4f0e:	cf 91       	pop	r28
    4f10:	1f 91       	pop	r17
    4f12:	08 95       	ret

00004f14 <twi_mcp23017_av1624_fw_init>:
	 * 	PB7		(free)
	 */

	// wait > 30 ms --> done

	if (!(main_bf.mainIsLcdAttached)) {
    4f14:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4f18:	87 ff       	sbrs	r24, 7
	}

	twi_mcp23017_av1624_fw_waitUntilReady();											// within this function the main_bf.mainIsSmartAttached is being set/cleared

	// set interface width to 8bits - (1)
	twi_mcp23017_fw_setPortA_DirOut(true);
    4f1a:	62 c0       	rjmp	.+196    	; 0x4fe0 <twi_mcp23017_av1624_fw_init+0xcc>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f1c:	d4 df       	rcall	.-88     	; 0x4ec6 <twi_mcp23017_av1624_fw_waitUntilReady>
    4f1e:	81 e0       	ldi	r24, 0x01	; 1
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4f20:	ba df       	rcall	.-140    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
    4f22:	6c e3       	ldi	r22, 0x3C	; 60
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f24:	80 e0       	ldi	r24, 0x00	; 0
    4f26:	c3 df       	rcall	.-122    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4f28:	6c e3       	ldi	r22, 0x3C	; 60
	twi_mcp23017_fw_setPortA_DirOut(false);
    4f2a:	81 e0       	ldi	r24, 0x01	; 1
    4f2c:	c0 df       	rcall	.-128    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4f2e:	6c e3       	ldi	r22, 0x3C	; 60
    4f30:	80 e0       	ldi	r24, 0x00	; 0
    4f32:	bd df       	rcall	.-134    	; 0x4eae <twi_mcp23017_fw_setPortBA>

	// > 4.1 µs
	_delay_us(4.1f);

	// set interface width to 8bits - (2)
	twi_mcp23017_fw_setPortA_DirOut(true);
    4f34:	80 e0       	ldi	r24, 0x00	; 0
    4f36:	af df       	rcall	.-162    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f38:	8b e1       	ldi	r24, 0x1B	; 27
    4f3a:	8a 95       	dec	r24
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4f3c:	f1 f7       	brne	.-4      	; 0x4f3a <twi_mcp23017_av1624_fw_init+0x26>
    4f3e:	00 00       	nop
    4f40:	81 e0       	ldi	r24, 0x01	; 1
    4f42:	a9 df       	rcall	.-174    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f44:	6c e3       	ldi	r22, 0x3C	; 60
    4f46:	80 e0       	ldi	r24, 0x00	; 0
    4f48:	b2 df       	rcall	.-156    	; 0x4eae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortA_DirOut(false);
    4f4a:	6c e3       	ldi	r22, 0x3C	; 60
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	af df       	rcall	.-162    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4f50:	6c e3       	ldi	r22, 0x3C	; 60
    4f52:	80 e0       	ldi	r24, 0x00	; 0

	// > 100 µs
	_delay_us(100.0f);

	// set interface width to 8bits - (3)
	twi_mcp23017_fw_setPortA_DirOut(true);
    4f54:	ac df       	rcall	.-168    	; 0x4eae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f56:	80 e0       	ldi	r24, 0x00	; 0
    4f58:	9e df       	rcall	.-196    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
    4f5a:	83 ef       	ldi	r24, 0xF3	; 243
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4f5c:	91 e0       	ldi	r25, 0x01	; 1
    4f5e:	01 97       	sbiw	r24, 0x01	; 1
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f60:	f1 f7       	brne	.-4      	; 0x4f5e <twi_mcp23017_av1624_fw_init+0x4a>

	// set interface width to 8bits - (4)
	twi_mcp23017_av1624_fw_waitUntilReady();
    4f62:	00 c0       	rjmp	.+0      	; 0x4f64 <twi_mcp23017_av1624_fw_init+0x50>
	twi_mcp23017_fw_setPortA_DirOut(true);
    4f64:	00 00       	nop
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f66:	81 e0       	ldi	r24, 0x01	; 1
	twi_mcp23017_fw_setPortBA(0b0001, 0b00111100);
    4f68:	96 df       	rcall	.-212    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
    4f6a:	6c e3       	ldi	r22, 0x3C	; 60
	twi_mcp23017_fw_setPortBA(0b0000, 0b00111100);
    4f6c:	80 e0       	ldi	r24, 0x00	; 0
    4f6e:	9f df       	rcall	.-194    	; 0x4eae <twi_mcp23017_fw_setPortBA>


	// display ON
	twi_mcp23017_av1624_fw_waitUntilReady();
    4f70:	6c e3       	ldi	r22, 0x3C	; 60
	twi_mcp23017_fw_setPortA_DirOut(true);
    4f72:	81 e0       	ldi	r24, 0x01	; 1
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001100);
    4f74:	9c df       	rcall	.-200    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4f76:	6c e3       	ldi	r22, 0x3C	; 60
	twi_mcp23017_fw_setPortBA(0b0001, 0b00001100);
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	99 df       	rcall	.-206    	; 0x4eae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00001100);
    4f7c:	a4 df       	rcall	.-184    	; 0x4ec6 <twi_mcp23017_av1624_fw_waitUntilReady>
    4f7e:	81 e0       	ldi	r24, 0x01	; 1

	// display CLEAR
	twi_mcp23017_av1624_fw_waitUntilReady();
    4f80:	8a df       	rcall	.-236    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortA_DirOut(true);
    4f82:	6c e3       	ldi	r22, 0x3C	; 60
    4f84:	80 e0       	ldi	r24, 0x00	; 0
    4f86:	93 df       	rcall	.-218    	; 0x4eae <twi_mcp23017_fw_setPortBA>
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    4f88:	6c e3       	ldi	r22, 0x3C	; 60
    4f8a:	81 e0       	ldi	r24, 0x01	; 1
    4f8c:	90 df       	rcall	.-224    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4f8e:	6c e3       	ldi	r22, 0x3C	; 60
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000001);
    4f90:	80 e0       	ldi	r24, 0x00	; 0
    4f92:	8d df       	rcall	.-230    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4f94:	98 df       	rcall	.-208    	; 0x4ec6 <twi_mcp23017_av1624_fw_waitUntilReady>
    4f96:	81 e0       	ldi	r24, 0x01	; 1
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000001);
    4f98:	7e df       	rcall	.-260    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
    4f9a:	6c e0       	ldi	r22, 0x0C	; 12
    4f9c:	80 e0       	ldi	r24, 0x00	; 0
    4f9e:	87 df       	rcall	.-242    	; 0x4eae <twi_mcp23017_fw_setPortBA>

	// display Entry Mode Set
	twi_mcp23017_av1624_fw_waitUntilReady();
    4fa0:	6c e0       	ldi	r22, 0x0C	; 12
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
	twi_mcp23017_fw_setPortA_DirOut(true);
    4fa4:	84 df       	rcall	.-248    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4fa6:	6c e0       	ldi	r22, 0x0C	; 12
    4fa8:	80 e0       	ldi	r24, 0x00	; 0
	twi_mcp23017_fw_setPortBA(0b0000, 0b00000110);
    4faa:	81 df       	rcall	.-254    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4fac:	8c df       	rcall	.-232    	; 0x4ec6 <twi_mcp23017_av1624_fw_waitUntilReady>
    4fae:	81 e0       	ldi	r24, 0x01	; 1
    4fb0:	72 df       	rcall	.-284    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
	twi_mcp23017_fw_setPortBA(0b0001, 0b00000110);
    4fb2:	61 e0       	ldi	r22, 0x01	; 1
    4fb4:	80 e0       	ldi	r24, 0x00	; 0
    4fb6:	7b df       	rcall	.-266    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4fb8:	61 e0       	ldi	r22, 0x01	; 1
	twi_mcp23017_fw_setPortBA(0b1000, 0b00000110);
    4fba:	81 e0       	ldi	r24, 0x01	; 1
    4fbc:	78 df       	rcall	.-272    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4fbe:	61 e0       	ldi	r22, 0x01	; 1
    4fc0:	80 e0       	ldi	r24, 0x00	; 0
	twi_mcp23017_fw_setPortA_DirOut(false);
    4fc2:	75 df       	rcall	.-278    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4fc4:	80 df       	rcall	.-256    	; 0x4ec6 <twi_mcp23017_av1624_fw_waitUntilReady>
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	66 df       	rcall	.-308    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
    4fca:	66 e0       	ldi	r22, 0x06	; 6
    4fcc:	80 e0       	ldi	r24, 0x00	; 0
    4fce:	6f df       	rcall	.-290    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4fd0:	66 e0       	ldi	r22, 0x06	; 6
    4fd2:	81 e0       	ldi	r24, 0x01	; 1
    4fd4:	6c df       	rcall	.-296    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4fd6:	66 e0       	ldi	r22, 0x06	; 6
    4fd8:	88 e0       	ldi	r24, 0x08	; 8
    4fda:	69 df       	rcall	.-302    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
    4fde:	5b cf       	rjmp	.-330    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
    4fe0:	08 95       	ret

00004fe2 <twi_mcp23017_av1624_fw_gotoPosition>:
		usbPoll();
	}
}

void twi_mcp23017_av1624_fw_gotoPosition(uint8_t line, uint8_t column)
{
    4fe2:	cf 93       	push	r28
    4fe4:	df 93       	push	r29
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    4fe6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4fea:	92 95       	swap	r25
    4fec:	96 95       	lsr	r25
    4fee:	97 70       	andi	r25, 0x07	; 7
    4ff0:	91 30       	cpi	r25, 0x01	; 1
    4ff2:	11 f0       	breq	.+4      	; 0x4ff8 <twi_mcp23017_av1624_fw_gotoPosition+0x16>
    4ff4:	d0 e0       	ldi	r29, 0x00	; 0
    4ff6:	01 c0       	rjmp	.+2      	; 0x4ffa <twi_mcp23017_av1624_fw_gotoPosition+0x18>
    4ff8:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t ddramAdrCmd = (0x80 | ((line % 2) << 6) | (column % 16));
    4ffa:	28 2f       	mov	r18, r24
    4ffc:	21 70       	andi	r18, 0x01	; 1
    4ffe:	30 e0       	ldi	r19, 0x00	; 0
    5000:	86 e0       	ldi	r24, 0x06	; 6
    5002:	22 0f       	add	r18, r18
    5004:	33 1f       	adc	r19, r19
    5006:	8a 95       	dec	r24
    5008:	e1 f7       	brne	.-8      	; 0x5002 <twi_mcp23017_av1624_fw_gotoPosition+0x20>
    500a:	c6 2f       	mov	r28, r22
    500c:	cf 70       	andi	r28, 0x0F	; 15
    500e:	c0 68       	ori	r28, 0x80	; 128

	twi_mcp23017_av1624_fw_waitUntilReady();

	// set DDRAM address
	twi_mcp23017_fw_setPortA_DirOut(true);
    5010:	c2 2b       	or	r28, r18
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
    5012:	59 df       	rcall	.-334    	; 0x4ec6 <twi_mcp23017_av1624_fw_waitUntilReady>
    5014:	81 e0       	ldi	r24, 0x01	; 1
	twi_mcp23017_fw_setPortBA(0b0001 | lightBF, ddramAdrCmd);
    5016:	3f df       	rcall	.-386    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
    5018:	6c 2f       	mov	r22, r28
    501a:	8d 2f       	mov	r24, r29
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
    501c:	48 df       	rcall	.-368    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    501e:	6c 2f       	mov	r22, r28
    5020:	8d 2f       	mov	r24, r29
	twi_mcp23017_fw_setPortA_DirOut(false);
    5022:	81 60       	ori	r24, 0x01	; 1
}
    5024:	44 df       	rcall	.-376    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    5026:	6c 2f       	mov	r22, r28
	// set DDRAM address
	twi_mcp23017_fw_setPortA_DirOut(true);
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
	twi_mcp23017_fw_setPortBA(0b0001 | lightBF, ddramAdrCmd);
	twi_mcp23017_fw_setPortBA(0b0000 | lightBF, ddramAdrCmd);
	twi_mcp23017_fw_setPortA_DirOut(false);
    5028:	8d 2f       	mov	r24, r29
    502a:	41 df       	rcall	.-382    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	df 91       	pop	r29
    5030:	cf 91       	pop	r28
    5032:	31 cf       	rjmp	.-414    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>

00005034 <twi_mcp23017_av1624_fw_writeString>:
}

void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
    5034:	af 92       	push	r10
    5036:	bf 92       	push	r11
    5038:	cf 92       	push	r12
    503a:	df 92       	push	r13
    503c:	ef 92       	push	r14
    503e:	ff 92       	push	r15
    5040:	0f 93       	push	r16
    5042:	1f 93       	push	r17
    5044:	cf 93       	push	r28
    5046:	df 93       	push	r29
    5048:	6c 01       	movw	r12, r24
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;
    504a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    504e:	82 95       	swap	r24
    5050:	86 95       	lsr	r24
    5052:	87 70       	andi	r24, 0x07	; 7
    5054:	81 30       	cpi	r24, 0x01	; 1
    5056:	11 f0       	breq	.+4      	; 0x505c <twi_mcp23017_av1624_fw_writeString+0x28>
    5058:	c0 e0       	ldi	r28, 0x00	; 0
    505a:	01 c0       	rjmp	.+2      	; 0x505e <twi_mcp23017_av1624_fw_writeString+0x2a>
    505c:	c8 e0       	ldi	r28, 0x08	; 8

	for (int idx = 0; idx < len; ++idx) {
    505e:	76 01       	movw	r14, r12
    5060:	06 2f       	mov	r16, r22
    5062:	10 e0       	ldi	r17, 0x00	; 0

		twi_mcp23017_av1624_fw_waitUntilReady();

		// write data
		twi_mcp23017_fw_setPortA_DirOut(true);
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    5064:	8c 2f       	mov	r24, r28
    5066:	84 60       	ori	r24, 0x04	; 4
    5068:	b8 2e       	mov	r11, r24
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
    506a:	ec 2f       	mov	r30, r28
    506c:	e5 60       	ori	r30, 0x05	; 5
    506e:	ae 2e       	mov	r10, r30

void twi_mcp23017_av1624_fw_writeString(const uint8_t* buffer, uint8_t len)
{
	const uint8_t lightBF = (main_bf.mainLcdLedMode == LCD_LED_MODE_ON) ?  0x08 : 0x00;

	for (int idx = 0; idx < len; ++idx) {
    5070:	c7 01       	movw	r24, r14
    5072:	8c 19       	sub	r24, r12
    5074:	9d 09       	sbc	r25, r13
    5076:	80 17       	cp	r24, r16
    5078:	91 07       	cpc	r25, r17
    507a:	ac f4       	brge	.+42     	; 0x50a6 <twi_mcp23017_av1624_fw_writeString+0x72>
		uint8_t c = buffer[idx];
    507c:	f7 01       	movw	r30, r14
    507e:	d1 91       	ld	r29, Z+
		c = recodeChar(c);

		twi_mcp23017_av1624_fw_waitUntilReady();

		// write data
		twi_mcp23017_fw_setPortA_DirOut(true);
    5080:	7f 01       	movw	r14, r30
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    5082:	21 df       	rcall	.-446    	; 0x4ec6 <twi_mcp23017_av1624_fw_waitUntilReady>
    5084:	81 e0       	ldi	r24, 0x01	; 1
		twi_mcp23017_fw_setPortBA(0b0101 | lightBF, c);
    5086:	07 df       	rcall	.-498    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
    5088:	6d 2f       	mov	r22, r29
    508a:	8b 2d       	mov	r24, r11
		twi_mcp23017_fw_setPortBA(0b0100 | lightBF, c);
    508c:	10 df       	rcall	.-480    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    508e:	6d 2f       	mov	r22, r29
		twi_mcp23017_fw_setPortBA(0b0000 | lightBF, c);
    5090:	8a 2d       	mov	r24, r10
    5092:	0d df       	rcall	.-486    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    5094:	6d 2f       	mov	r22, r29
    5096:	8b 2d       	mov	r24, r11
		twi_mcp23017_fw_setPortA_DirOut(false);
    5098:	0a df       	rcall	.-492    	; 0x4eae <twi_mcp23017_fw_setPortBA>
    509a:	6d 2f       	mov	r22, r29
    509c:	8c 2f       	mov	r24, r28
    509e:	07 df       	rcall	.-498    	; 0x4eae <twi_mcp23017_fw_setPortBA>
	}
}
    50a0:	80 e0       	ldi	r24, 0x00	; 0
    50a2:	f9 de       	rcall	.-526    	; 0x4e96 <twi_mcp23017_fw_setPortA_DirOut>
    50a4:	e5 cf       	rjmp	.-54     	; 0x5070 <twi_mcp23017_av1624_fw_writeString+0x3c>
    50a6:	df 91       	pop	r29
    50a8:	cf 91       	pop	r28
    50aa:	1f 91       	pop	r17
    50ac:	0f 91       	pop	r16
    50ae:	ff 90       	pop	r15
    50b0:	ef 90       	pop	r14
    50b2:	df 90       	pop	r13
    50b4:	cf 90       	pop	r12
    50b6:	bf 90       	pop	r11
    50b8:	af 90       	pop	r10
    50ba:	08 95       	ret

000050bc <twi_smart_lcd_fw_get_version>:
	}
}

uint8_t twi_smart_lcd_fw_get_version(void)
{
	return twi_fw_sendCmdReadData1(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_GET_VER);		// within this function the main_bf.mainIsSmartAttached is being set
    50bc:	61 e0       	ldi	r22, 0x01	; 1
    50be:	82 e2       	ldi	r24, 0x22	; 34
    50c0:	86 cd       	rjmp	.-1268   	; 0x4bce <twi_fw_sendCmdReadData1>

000050c2 <twi_smart_lcd_fw_set_mode>:
}

void twi_smart_lcd_fw_set_mode(uint8_t mode)
{
	mainPrepareBuffer[0] = mode;
    50c2:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <mainPrepareBuffer>
	twi_fw_sendCmdSendData1SendDataVar(TWI_SMART_LCD_ADDR, TWI_SMART_LCD_CMD_SET_MODE, 1, (uint8_t*) &mainPrepareBuffer);
    50c6:	2d e0       	ldi	r18, 0x0D	; 13
    50c8:	34 e0       	ldi	r19, 0x04	; 4
    50ca:	41 e0       	ldi	r20, 0x01	; 1
    50cc:	62 e0       	ldi	r22, 0x02	; 2
    50ce:	82 e2       	ldi	r24, 0x22	; 34
    50d0:	17 cd       	rjmp	.-1490   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

000050d2 <twi_smart_lcd_fw_init>:
extern volatile main_bf_t main_bf;
extern uchar mainPrepareBuffer[MAIN_PREPARE_BUFFER_SIZE];


void twi_smart_lcd_fw_init(void)
{
    50d2:	f4 df       	rcall	.-24     	; 0x50bc <twi_smart_lcd_fw_get_version>
    50d4:	81 31       	cpi	r24, 0x11	; 17
    50d6:	10 f0       	brcs	.+4      	; 0x50dc <twi_smart_lcd_fw_init+0xa>
    50d8:	80 e2       	ldi	r24, 0x20	; 32
    50da:	f3 cf       	rjmp	.-26     	; 0x50c2 <twi_smart_lcd_fw_set_mode>
    50dc:	08 95       	ret

000050de <twi_smart_lcd_fw_set_clkstate_phaseVolt__phaseDeg>:
    50de:	ed e0       	ldi	r30, 0x0D	; 13
    50e0:	f4 e0       	ldi	r31, 0x04	; 4
    50e2:	80 83       	st	Z, r24
    50e4:	61 83       	std	Z+1, r22	; 0x01
    50e6:	72 83       	std	Z+2, r23	; 0x02
    50e8:	43 83       	std	Z+3, r20	; 0x03
    50ea:	54 83       	std	Z+4, r21	; 0x04
    50ec:	9f 01       	movw	r18, r30
    50ee:	45 e0       	ldi	r20, 0x05	; 5
    50f0:	60 e8       	ldi	r22, 0x80	; 128
    50f2:	82 e2       	ldi	r24, 0x22	; 34
    50f4:	05 cd       	rjmp	.-1526   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

000050f6 <twi_smart_lcd_fw_set_date>:
    50f6:	ed e0       	ldi	r30, 0x0D	; 13
    50f8:	f4 e0       	ldi	r31, 0x04	; 4
    50fa:	80 83       	st	Z, r24
    50fc:	91 83       	std	Z+1, r25	; 0x01
    50fe:	62 83       	std	Z+2, r22	; 0x02
    5100:	43 83       	std	Z+3, r20	; 0x03
    5102:	9f 01       	movw	r18, r30
    5104:	44 e0       	ldi	r20, 0x04	; 4
    5106:	61 e8       	ldi	r22, 0x81	; 129
    5108:	82 e2       	ldi	r24, 0x22	; 34
    510a:	fa cc       	rjmp	.-1548   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

0000510c <twi_smart_lcd_fw_set_time>:
    510c:	ed e0       	ldi	r30, 0x0D	; 13
    510e:	f4 e0       	ldi	r31, 0x04	; 4
    5110:	80 83       	st	Z, r24
    5112:	61 83       	std	Z+1, r22	; 0x01
    5114:	42 83       	std	Z+2, r20	; 0x02
    5116:	9f 01       	movw	r18, r30
    5118:	43 e0       	ldi	r20, 0x03	; 3
    511a:	62 e8       	ldi	r22, 0x82	; 130
    511c:	82 e2       	ldi	r24, 0x22	; 34
    511e:	f0 cc       	rjmp	.-1568   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

00005120 <twi_smart_lcd_fw_set_ppb>:
    5120:	ed e0       	ldi	r30, 0x0D	; 13
    5122:	f4 e0       	ldi	r31, 0x04	; 4
    5124:	80 83       	st	Z, r24
    5126:	91 83       	std	Z+1, r25	; 0x01
    5128:	62 83       	std	Z+2, r22	; 0x02
    512a:	73 83       	std	Z+3, r23	; 0x03
    512c:	9f 01       	movw	r18, r30
    512e:	44 e0       	ldi	r20, 0x04	; 4
    5130:	63 e8       	ldi	r22, 0x83	; 131
    5132:	82 e2       	ldi	r24, 0x22	; 34
    5134:	e5 cc       	rjmp	.-1590   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

00005136 <twi_smart_lcd_fw_set_pwm>:
    5136:	ed e0       	ldi	r30, 0x0D	; 13
    5138:	f4 e0       	ldi	r31, 0x04	; 4
    513a:	80 83       	st	Z, r24
    513c:	61 83       	std	Z+1, r22	; 0x01
    513e:	9f 01       	movw	r18, r30
    5140:	42 e0       	ldi	r20, 0x02	; 2
    5142:	64 e8       	ldi	r22, 0x84	; 132
    5144:	82 e2       	ldi	r24, 0x22	; 34
    5146:	dc cc       	rjmp	.-1608   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

00005148 <twi_smart_lcd_fw_set_pv>:
    5148:	ed e0       	ldi	r30, 0x0D	; 13
    514a:	f4 e0       	ldi	r31, 0x04	; 4
    514c:	80 83       	st	Z, r24
    514e:	61 83       	std	Z+1, r22	; 0x01
    5150:	72 83       	std	Z+2, r23	; 0x02
    5152:	9f 01       	movw	r18, r30
    5154:	43 e0       	ldi	r20, 0x03	; 3
    5156:	65 e8       	ldi	r22, 0x85	; 133
    5158:	82 e2       	ldi	r24, 0x22	; 34
    515a:	d2 cc       	rjmp	.-1628   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

0000515c <twi_smart_lcd_fw_set_sat_use>:
    515c:	ed e0       	ldi	r30, 0x0D	; 13
    515e:	f4 e0       	ldi	r31, 0x04	; 4
    5160:	80 83       	st	Z, r24
    5162:	61 83       	std	Z+1, r22	; 0x01
    5164:	42 83       	std	Z+2, r20	; 0x02
    5166:	9f 01       	movw	r18, r30
    5168:	43 e0       	ldi	r20, 0x03	; 3
    516a:	68 e8       	ldi	r22, 0x88	; 136
    516c:	82 e2       	ldi	r24, 0x22	; 34
    516e:	c8 cc       	rjmp	.-1648   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

00005170 <twi_smart_lcd_fw_set_sat_dop>:
    5170:	ed e0       	ldi	r30, 0x0D	; 13
    5172:	f4 e0       	ldi	r31, 0x04	; 4
    5174:	80 83       	st	Z, r24
    5176:	91 83       	std	Z+1, r25	; 0x01
    5178:	9f 01       	movw	r18, r30
    517a:	42 e0       	ldi	r20, 0x02	; 2
    517c:	69 e8       	ldi	r22, 0x89	; 137
    517e:	82 e2       	ldi	r24, 0x22	; 34
    5180:	bf cc       	rjmp	.-1666   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

00005182 <twi_smart_lcd_fw_set_pos_state>:
    5182:	ed e0       	ldi	r30, 0x0D	; 13
    5184:	f4 e0       	ldi	r31, 0x04	; 4
    5186:	80 83       	st	Z, r24
    5188:	61 83       	std	Z+1, r22	; 0x01
    518a:	9f 01       	movw	r18, r30
    518c:	42 e0       	ldi	r20, 0x02	; 2
    518e:	6a e8       	ldi	r22, 0x8A	; 138
    5190:	82 e2       	ldi	r24, 0x22	; 34
    5192:	b6 cc       	rjmp	.-1684   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

00005194 <twi_smart_lcd_fw_set_pos_lat>:
    5194:	ed e0       	ldi	r30, 0x0D	; 13
    5196:	f4 e0       	ldi	r31, 0x04	; 4
    5198:	80 83       	st	Z, r24
    519a:	61 83       	std	Z+1, r22	; 0x01
    519c:	42 83       	std	Z+2, r20	; 0x02
    519e:	23 83       	std	Z+3, r18	; 0x03
    51a0:	34 83       	std	Z+4, r19	; 0x04
    51a2:	9f 01       	movw	r18, r30
    51a4:	45 e0       	ldi	r20, 0x05	; 5
    51a6:	6b e8       	ldi	r22, 0x8B	; 139
    51a8:	82 e2       	ldi	r24, 0x22	; 34
    51aa:	aa cc       	rjmp	.-1708   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

000051ac <twi_smart_lcd_fw_set_pos_lon>:
    51ac:	ed e0       	ldi	r30, 0x0D	; 13
    51ae:	f4 e0       	ldi	r31, 0x04	; 4
    51b0:	80 83       	st	Z, r24
    51b2:	61 83       	std	Z+1, r22	; 0x01
    51b4:	42 83       	std	Z+2, r20	; 0x02
    51b6:	23 83       	std	Z+3, r18	; 0x03
    51b8:	34 83       	std	Z+4, r19	; 0x04
    51ba:	9f 01       	movw	r18, r30
    51bc:	45 e0       	ldi	r20, 0x05	; 5
    51be:	6c e8       	ldi	r22, 0x8C	; 140
    51c0:	82 e2       	ldi	r24, 0x22	; 34
    51c2:	9e cc       	rjmp	.-1732   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

000051c4 <twi_smart_lcd_fw_set_pos_height>:
    51c4:	ed e0       	ldi	r30, 0x0D	; 13
    51c6:	f4 e0       	ldi	r31, 0x04	; 4
    51c8:	80 83       	st	Z, r24
    51ca:	91 83       	std	Z+1, r25	; 0x01
    51cc:	62 83       	std	Z+2, r22	; 0x02
    51ce:	9f 01       	movw	r18, r30
    51d0:	43 e0       	ldi	r20, 0x03	; 3
    51d2:	6d e8       	ldi	r22, 0x8D	; 141
    51d4:	82 e2       	ldi	r24, 0x22	; 34
    51d6:	94 cc       	rjmp	.-1752   	; 0x4b00 <twi_fw_sendCmdSendData1SendDataVar>

000051d8 <usb_fw_sendInInterrupt>:
 */
void usb_fw_sendInInterrupt(void)
{
	static uchar bufferInt[5] = "<INT>";

	if (usbInterruptIsReady()) {
    51d8:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <usbTxStatus1>
    51dc:	84 ff       	sbrs	r24, 4
    51de:	04 c0       	rjmp	.+8      	; 0x51e8 <usb_fw_sendInInterrupt+0x10>
		/* send next packet if a new time-slot is ready to send */
		usbSetInterrupt(bufferInt, sizeof(bufferInt));
    51e0:	65 e0       	ldi	r22, 0x05	; 5
    51e2:	8a e0       	ldi	r24, 0x0A	; 10
    51e4:	91 e0       	ldi	r25, 0x01	; 1
    51e6:	1b c1       	rjmp	.+566    	; 0x541e <usbSetInterrupt>
    51e8:	08 95       	ret

000051ea <usb_fw_init>:
    51ea:	9d d2       	rcall	.+1338   	; 0x5726 <usbInit>
    51ec:	e8 98       	cbi	0x1d, 0	; 29
    51ee:	21 98       	cbi	0x04, 1	; 4
    51f0:	29 98       	cbi	0x05, 1	; 5
    51f2:	8a ef       	ldi	r24, 0xFA	; 250
    51f4:	81 50       	subi	r24, 0x01	; 1
    51f6:	41 f0       	breq	.+16     	; 0x5208 <usb_fw_init+0x1e>
    51f8:	e7 e8       	ldi	r30, 0x87	; 135
    51fa:	f3 e1       	ldi	r31, 0x13	; 19
    51fc:	31 97       	sbiw	r30, 0x01	; 1
    51fe:	f1 f7       	brne	.-4      	; 0x51fc <usb_fw_init+0x12>
    5200:	00 c0       	rjmp	.+0      	; 0x5202 <usb_fw_init+0x18>
    5202:	00 00       	nop
    5204:	a8 95       	wdr
    5206:	f6 cf       	rjmp	.-20     	; 0x51f4 <usb_fw_init+0xa>
    5208:	21 9a       	sbi	0x04, 1	; 4
    520a:	29 9a       	sbi	0x05, 1	; 5
    520c:	e8 9a       	sbi	0x1d, 0	; 29
    520e:	08 95       	ret

00005210 <usbFunctionSetup>:
    5210:	fc 01       	movw	r30, r24
    5212:	80 81       	ld	r24, Z
    5214:	98 2f       	mov	r25, r24
    5216:	90 76       	andi	r25, 0x60	; 96
    5218:	90 34       	cpi	r25, 0x40	; 64
    521a:	59 f5       	brne	.+86     	; 0x5272 <usbFunctionSetup+0x62>
    521c:	8f 71       	andi	r24, 0x1F	; 31
    521e:	49 f5       	brne	.+82     	; 0x5272 <usbFunctionSetup+0x62>
    5220:	81 81       	ldd	r24, Z+1	; 0x01
    5222:	81 11       	cpse	r24, r1
    5224:	0e c0       	rjmp	.+28     	; 0x5242 <usbFunctionSetup+0x32>
    5226:	82 81       	ldd	r24, Z+2	; 0x02
    5228:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <usbCtxtSetupReplyBuffer>
    522c:	83 81       	ldd	r24, Z+3	; 0x03
    522e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <usbCtxtSetupReplyBuffer+0x1>
    5232:	84 81       	ldd	r24, Z+4	; 0x04
    5234:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <usbCtxtSetupReplyBuffer+0x2>
    5238:	85 81       	ldd	r24, Z+5	; 0x05
    523a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <usbCtxtSetupReplyBuffer+0x3>
    523e:	84 e0       	ldi	r24, 0x04	; 4
    5240:	19 c0       	rjmp	.+50     	; 0x5274 <usbFunctionSetup+0x64>
    5242:	82 30       	cpi	r24, 0x02	; 2
    5244:	49 f4       	brne	.+18     	; 0x5258 <usbFunctionSetup+0x48>
    5246:	8f b7       	in	r24, 0x3f	; 63
    5248:	f8 94       	cli
    524a:	26 81       	ldd	r18, Z+6	; 0x06
    524c:	37 81       	ldd	r19, Z+7	; 0x07
    524e:	30 93 15 05 	sts	0x0515, r19	; 0x800515 <cntRcv+0x1>
    5252:	20 93 14 05 	sts	0x0514, r18	; 0x800514 <cntRcv>
    5256:	0a c0       	rjmp	.+20     	; 0x526c <usbFunctionSetup+0x5c>
    5258:	81 30       	cpi	r24, 0x01	; 1
    525a:	59 f4       	brne	.+22     	; 0x5272 <usbFunctionSetup+0x62>
    525c:	8f b7       	in	r24, 0x3f	; 63
    525e:	f8 94       	cli
    5260:	26 81       	ldd	r18, Z+6	; 0x06
    5262:	37 81       	ldd	r19, Z+7	; 0x07
    5264:	30 93 13 05 	sts	0x0513, r19	; 0x800513 <cntSend+0x1>
    5268:	20 93 12 05 	sts	0x0512, r18	; 0x800512 <cntSend>
    526c:	8f bf       	out	0x3f, r24	; 63
    526e:	8f ef       	ldi	r24, 0xFF	; 255
    5270:	01 c0       	rjmp	.+2      	; 0x5274 <usbFunctionSetup+0x64>
    5272:	80 e0       	ldi	r24, 0x00	; 0
    5274:	2f e3       	ldi	r18, 0x3F	; 63
    5276:	31 e0       	ldi	r19, 0x01	; 1
    5278:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <usbMsgPtr+0x1>
    527c:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <usbMsgPtr>
    5280:	08 95       	ret

00005282 <usbFunctionRead>:
    5282:	cf 92       	push	r12
    5284:	df 92       	push	r13
    5286:	ef 92       	push	r14
    5288:	ff 92       	push	r15
    528a:	0f 93       	push	r16
    528c:	1f 93       	push	r17
    528e:	cf 93       	push	r28
    5290:	8c 01       	movw	r16, r24
    5292:	46 2f       	mov	r20, r22
    5294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5298:	84 ff       	sbrs	r24, 4
    529a:	37 c0       	rjmp	.+110    	; 0x530a <usbFunctionRead+0x88>
    529c:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <cntRcv>
    52a0:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <cntRcv+0x1>
    52a4:	89 2b       	or	r24, r25
    52a6:	89 f1       	breq	.+98     	; 0x530a <usbFunctionRead+0x88>
    52a8:	20 91 d7 05 	lds	r18, 0x05D7	; 0x8005d7 <doTestCntr>
    52ac:	30 91 d8 05 	lds	r19, 0x05D8	; 0x8005d8 <doTestCntr+0x1>
    52b0:	c9 01       	movw	r24, r18
    52b2:	68 ee       	ldi	r22, 0xE8	; 232
    52b4:	73 e0       	ldi	r23, 0x03	; 3
    52b6:	35 d6       	rcall	.+3178   	; 0x5f22 <__udivmodhi4>
    52b8:	cb 01       	movw	r24, r22
    52ba:	ea e0       	ldi	r30, 0x0A	; 10
    52bc:	f0 e0       	ldi	r31, 0x00	; 0
    52be:	bf 01       	movw	r22, r30
    52c0:	30 d6       	rcall	.+3168   	; 0x5f22 <__udivmodhi4>
    52c2:	80 5d       	subi	r24, 0xD0	; 208
    52c4:	d8 01       	movw	r26, r16
    52c6:	8c 93       	st	X, r24
    52c8:	c9 01       	movw	r24, r18
    52ca:	64 e6       	ldi	r22, 0x64	; 100
    52cc:	70 e0       	ldi	r23, 0x00	; 0
    52ce:	29 d6       	rcall	.+3154   	; 0x5f22 <__udivmodhi4>
    52d0:	cb 01       	movw	r24, r22
    52d2:	bf 01       	movw	r22, r30
    52d4:	26 d6       	rcall	.+3148   	; 0x5f22 <__udivmodhi4>
    52d6:	80 5d       	subi	r24, 0xD0	; 208
    52d8:	d8 01       	movw	r26, r16
    52da:	11 96       	adiw	r26, 0x01	; 1
    52dc:	8c 93       	st	X, r24
    52de:	c9 01       	movw	r24, r18
    52e0:	bf 01       	movw	r22, r30
    52e2:	1f d6       	rcall	.+3134   	; 0x5f22 <__udivmodhi4>
    52e4:	c8 2f       	mov	r28, r24
    52e6:	cb 01       	movw	r24, r22
    52e8:	bf 01       	movw	r22, r30
    52ea:	1b d6       	rcall	.+3126   	; 0x5f22 <__udivmodhi4>
    52ec:	80 5d       	subi	r24, 0xD0	; 208
    52ee:	f8 01       	movw	r30, r16
    52f0:	82 83       	std	Z+2, r24	; 0x02
    52f2:	2f 5f       	subi	r18, 0xFF	; 255
    52f4:	3f 4f       	sbci	r19, 0xFF	; 255
    52f6:	30 93 d8 05 	sts	0x05D8, r19	; 0x8005d8 <doTestCntr+0x1>
    52fa:	20 93 d7 05 	sts	0x05D7, r18	; 0x8005d7 <doTestCntr>
    52fe:	c0 5d       	subi	r28, 0xD0	; 208
    5300:	c3 83       	std	Z+3, r28	; 0x03
    5302:	8a e3       	ldi	r24, 0x3A	; 58
    5304:	84 83       	std	Z+4, r24	; 0x04
    5306:	c5 e0       	ldi	r28, 0x05	; 5
    5308:	01 c0       	rjmp	.+2      	; 0x530c <usbFunctionRead+0x8a>
    530a:	c0 e0       	ldi	r28, 0x00	; 0
    530c:	cc 2e       	mov	r12, r28
    530e:	d1 2c       	mov	r13, r1
    5310:	64 2f       	mov	r22, r20
    5312:	70 e0       	ldi	r23, 0x00	; 0
    5314:	40 91 14 05 	lds	r20, 0x0514	; 0x800514 <cntRcv>
    5318:	50 91 15 05 	lds	r21, 0x0515	; 0x800515 <cntRcv+0x1>
    531c:	64 17       	cp	r22, r20
    531e:	75 07       	cpc	r23, r21
    5320:	08 f4       	brcc	.+2      	; 0x5324 <usbFunctionRead+0xa2>
    5322:	ab 01       	movw	r20, r22
    5324:	7a 01       	movw	r14, r20
    5326:	ec 18       	sub	r14, r12
    5328:	fd 08       	sbc	r15, r13
    532a:	1e 14       	cp	r1, r14
    532c:	1f 04       	cpc	r1, r15
    532e:	ec f4       	brge	.+58     	; 0x536a <usbFunctionRead+0xe8>
    5330:	80 e0       	ldi	r24, 0x00	; 0
    5332:	3b d8       	rcall	.-3978   	; 0x43aa <ringbuffer_fw_getSemaphore>
    5334:	88 23       	and	r24, r24
    5336:	e1 f3       	breq	.-8      	; 0x5330 <usbFunctionRead+0xae>
    5338:	41 e0       	ldi	r20, 0x01	; 1
    533a:	4e 0d       	add	r20, r14
    533c:	b8 01       	movw	r22, r16
    533e:	6c 0d       	add	r22, r12
    5340:	7d 1d       	adc	r23, r13
    5342:	80 e0       	ldi	r24, 0x00	; 0
    5344:	e6 d8       	rcall	.-3636   	; 0x4512 <ringbuffer_fw_ringBufferPull>
    5346:	18 2f       	mov	r17, r24
    5348:	80 e0       	ldi	r24, 0x00	; 0
    534a:	40 d8       	rcall	.-3968   	; 0x43cc <ringbuffer_fw_freeSemaphore>
    534c:	c1 0e       	add	r12, r17
    534e:	d1 1c       	adc	r13, r1
    5350:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <cntRcv>
    5354:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <cntRcv+0x1>
    5358:	8c 19       	sub	r24, r12
    535a:	9d 09       	sbc	r25, r13
    535c:	90 93 15 05 	sts	0x0515, r25	; 0x800515 <cntRcv+0x1>
    5360:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <cntRcv>
    5364:	8c 2f       	mov	r24, r28
    5366:	81 0f       	add	r24, r17
    5368:	01 c0       	rjmp	.+2      	; 0x536c <usbFunctionRead+0xea>
    536a:	8c 2f       	mov	r24, r28
    536c:	cf 91       	pop	r28
    536e:	1f 91       	pop	r17
    5370:	0f 91       	pop	r16
    5372:	ff 90       	pop	r15
    5374:	ef 90       	pop	r14
    5376:	df 90       	pop	r13
    5378:	cf 90       	pop	r12
    537a:	08 95       	ret

0000537c <usbFunctionWrite>:
    537c:	1f 93       	push	r17
    537e:	cf 93       	push	r28
    5380:	df 93       	push	r29
    5382:	d6 2f       	mov	r29, r22
    5384:	46 2f       	mov	r20, r22
    5386:	50 e0       	ldi	r21, 0x00	; 0
    5388:	20 91 12 05 	lds	r18, 0x0512	; 0x800512 <cntSend>
    538c:	30 91 13 05 	lds	r19, 0x0513	; 0x800513 <cntSend+0x1>
    5390:	42 17       	cp	r20, r18
    5392:	53 07       	cpc	r21, r19
    5394:	c0 f4       	brcc	.+48     	; 0x53c6 <usbFunctionWrite+0x4a>
    5396:	24 1b       	sub	r18, r20
    5398:	35 0b       	sbc	r19, r21
    539a:	30 93 13 05 	sts	0x0513, r19	; 0x800513 <cntSend+0x1>
    539e:	20 93 12 05 	sts	0x0512, r18	; 0x800512 <cntSend>
    53a2:	1f b7       	in	r17, 0x3f	; 63
    53a4:	f8 94       	cli
    53a6:	c0 91 11 05 	lds	r28, 0x0511	; 0x800511 <usbIsrCtxtBufferIdx>
    53aa:	2c 2f       	mov	r18, r28
    53ac:	30 e0       	ldi	r19, 0x00	; 0
    53ae:	bc 01       	movw	r22, r24
    53b0:	c9 01       	movw	r24, r18
    53b2:	89 5b       	subi	r24, 0xB9	; 185
    53b4:	9e 4f       	sbci	r25, 0xFE	; 254
    53b6:	0e 94 39 34 	call	0x6872	; 0x6872 <memcpy>
    53ba:	cd 0f       	add	r28, r29
    53bc:	c0 93 11 05 	sts	0x0511, r28	; 0x800511 <usbIsrCtxtBufferIdx>
    53c0:	1f bf       	out	0x3f, r17	; 63
    53c2:	80 e0       	ldi	r24, 0x00	; 0
    53c4:	28 c0       	rjmp	.+80     	; 0x5416 <usbFunctionWrite+0x9a>
    53c6:	23 2b       	or	r18, r19
    53c8:	a9 f0       	breq	.+42     	; 0x53f4 <usbFunctionWrite+0x78>
    53ca:	1f b7       	in	r17, 0x3f	; 63
    53cc:	f8 94       	cli
    53ce:	c0 91 12 05 	lds	r28, 0x0512	; 0x800512 <cntSend>
    53d2:	50 91 13 05 	lds	r21, 0x0513	; 0x800513 <cntSend+0x1>
    53d6:	d0 91 11 05 	lds	r29, 0x0511	; 0x800511 <usbIsrCtxtBufferIdx>
    53da:	2d 2f       	mov	r18, r29
    53dc:	30 e0       	ldi	r19, 0x00	; 0
    53de:	4c 2f       	mov	r20, r28
    53e0:	bc 01       	movw	r22, r24
    53e2:	c9 01       	movw	r24, r18
    53e4:	89 5b       	subi	r24, 0xB9	; 185
    53e6:	9e 4f       	sbci	r25, 0xFE	; 254
    53e8:	0e 94 39 34 	call	0x6872	; 0x6872 <memcpy>
    53ec:	cd 0f       	add	r28, r29
    53ee:	c0 93 11 05 	sts	0x0511, r28	; 0x800511 <usbIsrCtxtBufferIdx>
    53f2:	1f bf       	out	0x3f, r17	; 63
    53f4:	20 91 11 05 	lds	r18, 0x0511	; 0x800511 <usbIsrCtxtBufferIdx>
    53f8:	47 e4       	ldi	r20, 0x47	; 71
    53fa:	51 e0       	ldi	r21, 0x01	; 1
    53fc:	60 e0       	ldi	r22, 0x00	; 0
    53fe:	81 e0       	ldi	r24, 0x01	; 1
    5400:	38 d9       	rcall	.-3472   	; 0x4672 <ringbuffer_fw_ringBufferWaitAppend>
    5402:	8f b7       	in	r24, 0x3f	; 63
    5404:	f8 94       	cli
    5406:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <cntSend+0x1>
    540a:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <cntSend>
    540e:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <usbIsrCtxtBufferIdx>
    5412:	8f bf       	out	0x3f, r24	; 63
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	df 91       	pop	r29
    5418:	cf 91       	pop	r28
    541a:	1f 91       	pop	r17
    541c:	08 95       	ret

0000541e <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    541e:	cf 93       	push	r28
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
    5420:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <usbTxStatus1>
    5424:	2e 31       	cpi	r18, 0x1E	; 30
    5426:	f9 f0       	breq	.+62     	; 0x5466 <usbSetInterrupt+0x48>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    5428:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <usbTxStatus1>
    542c:	24 ff       	sbrs	r18, 4
    542e:	0b c0       	rjmp	.+22     	; 0x5446 <usbSetInterrupt+0x28>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    5430:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <usbTxStatus1+0x1>
    5434:	28 e8       	ldi	r18, 0x88	; 136
    5436:	23 27       	eor	r18, r19
    5438:	20 93 8e 05 	sts	0x058E, r18	; 0x80058e <usbTxStatus1+0x1>
    543c:	fc 01       	movw	r30, r24
    543e:	af e8       	ldi	r26, 0x8F	; 143
    5440:	b5 e0       	ldi	r27, 0x05	; 5
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    5442:	86 2f       	mov	r24, r22
    5444:	04 c0       	rjmp	.+8      	; 0x544e <usbSetInterrupt+0x30>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    5446:	2a e5       	ldi	r18, 0x5A	; 90
    5448:	20 93 8d 05 	sts	0x058D, r18	; 0x80058d <usbTxStatus1>
    544c:	f7 cf       	rjmp	.-18     	; 0x543c <usbSetInterrupt+0x1e>
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    544e:	91 91       	ld	r25, Z+
    5450:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    5452:	81 50       	subi	r24, 0x01	; 1
    5454:	e1 f7       	brne	.-8      	; 0x544e <usbSetInterrupt+0x30>
    5456:	c6 2f       	mov	r28, r22
    usbCrc16Append(&txStatus->buffer[1], len);
    5458:	8f e8       	ldi	r24, 0x8F	; 143
    545a:	95 e0       	ldi	r25, 0x05	; 5
    545c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    5460:	cc 5f       	subi	r28, 0xFC	; 252
    5462:	c0 93 8d 05 	sts	0x058D, r28	; 0x80058d <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
    5466:	cf 91       	pop	r28
    5468:	08 95       	ret

0000546a <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
    546a:	cf 93       	push	r28
    546c:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
    546e:	60 91 0a 08 	lds	r22, 0x080A	; 0x80080a <usbRxLen>
    5472:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
    5474:	67 fd       	sbrc	r22, 7
    5476:	df c0       	rjmp	.+446    	; 0x5636 <usbPoll+0x1cc>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    5478:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <usbInputBufOffset>
    547c:	cc e0       	ldi	r28, 0x0C	; 12
    547e:	d0 e0       	ldi	r29, 0x00	; 0
    5480:	c8 1b       	sub	r28, r24
    5482:	d1 09       	sbc	r29, r1
    5484:	c2 5f       	subi	r28, 0xF2	; 242
    5486:	d7 4f       	sbci	r29, 0xF7	; 247
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
    5488:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <usbRxToken>
    548c:	8d 32       	cpi	r24, 0x2D	; 45
    548e:	09 f0       	breq	.+2      	; 0x5492 <usbPoll+0x28>
    5490:	c1 c0       	rjmp	.+386    	; 0x5614 <usbPoll+0x1aa>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
    5492:	68 30       	cpi	r22, 0x08	; 8
    5494:	09 f0       	breq	.+2      	; 0x5498 <usbPoll+0x2e>
    5496:	cd c0       	rjmp	.+410    	; 0x5632 <usbPoll+0x1c8>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    5498:	83 ec       	ldi	r24, 0xC3	; 195
    549a:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    549e:	8a e5       	ldi	r24, 0x5A	; 90
    54a0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <usbTxLen>
        usbMsgFlags = 0;
    54a4:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
    54a8:	28 81       	ld	r18, Y
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    54aa:	82 2f       	mov	r24, r18
    54ac:	80 76       	andi	r24, 0x60	; 96
    54ae:	31 f0       	breq	.+12     	; 0x54bc <usbPoll+0x52>
            replyLen = usbFunctionSetup(data);
    54b0:	ce 01       	movw	r24, r28
    54b2:	ae de       	rcall	.-676    	; 0x5210 <usbFunctionSetup>
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
    54b4:	8f 3f       	cpi	r24, 0xFF	; 255
    54b6:	09 f4       	brne	.+2      	; 0x54ba <usbPoll+0x50>
    54b8:	9c c0       	rjmp	.+312    	; 0x55f2 <usbPoll+0x188>
    54ba:	a2 c0       	rjmp	.+324    	; 0x5600 <usbPoll+0x196>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    54bc:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
    54be:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    54c0:	10 92 03 08 	sts	0x0803, r1	; 0x800803 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
    54c4:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    54c6:	81 11       	cpse	r24, r1
    54c8:	13 c0       	rjmp	.+38     	; 0x54f0 <usbPoll+0x86>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
    54ca:	2f 71       	andi	r18, 0x1F	; 31
    54cc:	22 30       	cpi	r18, 0x02	; 2
    54ce:	51 f4       	brne	.+20     	; 0x54e4 <usbPoll+0x7a>
    54d0:	31 38       	cpi	r19, 0x81	; 129
    54d2:	41 f4       	brne	.+16     	; 0x54e4 <usbPoll+0x7a>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
    54d4:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <usbTxStatus1>
    54d8:	81 e0       	ldi	r24, 0x01	; 1
    54da:	9e 31       	cpi	r25, 0x1E	; 30
    54dc:	09 f0       	breq	.+2      	; 0x54e0 <usbPoll+0x76>
    54de:	80 e0       	ldi	r24, 0x00	; 0
    54e0:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <usbTxBuf+0x9>
#endif
        dataPtr[1] = 0;
    54e4:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    54e8:	23 e0       	ldi	r18, 0x03	; 3
    54ea:	38 e0       	ldi	r19, 0x08	; 8
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
    54ec:	82 e0       	ldi	r24, 0x02	; 2
    54ee:	7c c0       	rjmp	.+248    	; 0x55e8 <usbPoll+0x17e>
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
    54f0:	28 2f       	mov	r18, r24
    54f2:	2d 7f       	andi	r18, 0xFD	; 253
    54f4:	21 30       	cpi	r18, 0x01	; 1
    54f6:	81 f4       	brne	.+32     	; 0x5518 <usbPoll+0xae>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
    54f8:	91 11       	cpse	r25, r1
    54fa:	73 c0       	rjmp	.+230    	; 0x55e2 <usbPoll+0x178>
    54fc:	31 38       	cpi	r19, 0x81	; 129
    54fe:	09 f0       	breq	.+2      	; 0x5502 <usbPoll+0x98>
    5500:	70 c0       	rjmp	.+224    	; 0x55e2 <usbPoll+0x178>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
    5502:	81 30       	cpi	r24, 0x01	; 1
    5504:	11 f0       	breq	.+4      	; 0x550a <usbPoll+0xa0>
    5506:	8e e1       	ldi	r24, 0x1E	; 30
    5508:	01 c0       	rjmp	.+2      	; 0x550c <usbPoll+0xa2>
    550a:	8a e5       	ldi	r24, 0x5A	; 90
    550c:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <usbTxStatus1>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    5510:	8b e4       	ldi	r24, 0x4B	; 75
    5512:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <usbTxStatus1+0x1>
    5516:	65 c0       	rjmp	.+202    	; 0x55e2 <usbPoll+0x178>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    5518:	85 30       	cpi	r24, 0x05	; 5
    551a:	19 f4       	brne	.+6      	; 0x5522 <usbPoll+0xb8>
        usbNewDeviceAddr = value;
    551c:	90 93 0b 08 	sts	0x080B, r25	; 0x80080b <usbNewDeviceAddr>
    5520:	60 c0       	rjmp	.+192    	; 0x55e2 <usbPoll+0x178>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    5522:	86 30       	cpi	r24, 0x06	; 6
    5524:	09 f0       	breq	.+2      	; 0x5528 <usbPoll+0xbe>
    5526:	44 c0       	rjmp	.+136    	; 0x55b0 <usbPoll+0x146>
    5528:	8b 81       	ldd	r24, Y+3	; 0x03
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    552a:	81 30       	cpi	r24, 0x01	; 1
    552c:	41 f4       	brne	.+16     	; 0x553e <usbPoll+0xd4>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    552e:	8a ee       	ldi	r24, 0xEA	; 234
    5530:	9c e0       	ldi	r25, 0x0C	; 12
    5532:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    5536:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    553a:	82 e1       	ldi	r24, 0x12	; 18
    553c:	35 c0       	rjmp	.+106    	; 0x55a8 <usbPoll+0x13e>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    553e:	82 30       	cpi	r24, 0x02	; 2
    5540:	41 f4       	brne	.+16     	; 0x5552 <usbPoll+0xe8>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    5542:	81 ed       	ldi	r24, 0xD1	; 209
    5544:	9c e0       	ldi	r25, 0x0C	; 12
    5546:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    554a:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    554e:	89 e1       	ldi	r24, 0x19	; 25
    5550:	2b c0       	rjmp	.+86     	; 0x55a8 <usbPoll+0x13e>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    5552:	83 30       	cpi	r24, 0x03	; 3
    5554:	41 f5       	brne	.+80     	; 0x55a6 <usbPoll+0x13c>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
    5556:	91 11       	cpse	r25, r1
    5558:	08 c0       	rjmp	.+16     	; 0x556a <usbPoll+0x100>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    555a:	84 e4       	ldi	r24, 0x44	; 68
    555c:	9d e0       	ldi	r25, 0x0D	; 13
    555e:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    5562:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    5566:	84 e0       	ldi	r24, 0x04	; 4
    5568:	1f c0       	rjmp	.+62     	; 0x55a8 <usbPoll+0x13e>
        SWITCH_CASE(1)
    556a:	91 30       	cpi	r25, 0x01	; 1
    556c:	41 f4       	brne	.+16     	; 0x557e <usbPoll+0x114>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    556e:	86 e3       	ldi	r24, 0x36	; 54
    5570:	9d e0       	ldi	r25, 0x0D	; 13
    5572:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    5576:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    557a:	8e e0       	ldi	r24, 0x0E	; 14
    557c:	15 c0       	rjmp	.+42     	; 0x55a8 <usbPoll+0x13e>
        SWITCH_CASE(2)
    557e:	92 30       	cpi	r25, 0x02	; 2
    5580:	41 f4       	brne	.+16     	; 0x5592 <usbPoll+0x128>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    5582:	8c e0       	ldi	r24, 0x0C	; 12
    5584:	9d e0       	ldi	r25, 0x0D	; 13
    5586:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    558a:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    558e:	8a e2       	ldi	r24, 0x2A	; 42
    5590:	0b c0       	rjmp	.+22     	; 0x55a8 <usbPoll+0x13e>
        SWITCH_CASE(3)
    5592:	93 30       	cpi	r25, 0x03	; 3
    5594:	41 f4       	brne	.+16     	; 0x55a6 <usbPoll+0x13c>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
    5596:	8c ef       	ldi	r24, 0xFC	; 252
    5598:	9c e0       	ldi	r25, 0x0C	; 12
    559a:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    559e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
    55a2:	80 e1       	ldi	r24, 0x10	; 16
    55a4:	01 c0       	rjmp	.+2      	; 0x55a8 <usbPoll+0x13e>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    55a6:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    55a8:	90 e4       	ldi	r25, 0x40	; 64
    55aa:	90 93 d9 05 	sts	0x05D9, r25	; 0x8005d9 <usbMsgFlags>
    55ae:	28 c0       	rjmp	.+80     	; 0x5600 <usbPoll+0x196>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    55b0:	88 30       	cpi	r24, 0x08	; 8
    55b2:	81 f0       	breq	.+32     	; 0x55d4 <usbPoll+0x16a>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    55b4:	89 30       	cpi	r24, 0x09	; 9
    55b6:	19 f4       	brne	.+6      	; 0x55be <usbPoll+0x154>
        usbConfiguration = value;
    55b8:	90 93 0d 08 	sts	0x080D, r25	; 0x80080d <usbConfiguration>
    55bc:	07 c0       	rjmp	.+14     	; 0x55cc <usbPoll+0x162>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    55be:	8a 30       	cpi	r24, 0x0A	; 10
    55c0:	61 f0       	breq	.+24     	; 0x55da <usbPoll+0x170>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    55c2:	8b 30       	cpi	r24, 0x0B	; 11
    55c4:	71 f4       	brne	.+28     	; 0x55e2 <usbPoll+0x178>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    55c6:	8b e4       	ldi	r24, 0x4B	; 75
    55c8:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <usbTxStatus1+0x1>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    55cc:	8a e5       	ldi	r24, 0x5A	; 90
    55ce:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <usbTxStatus1>
    55d2:	07 c0       	rjmp	.+14     	; 0x55e2 <usbPoll+0x178>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
    55d4:	2d e0       	ldi	r18, 0x0D	; 13
    55d6:	38 e0       	ldi	r19, 0x08	; 8
    55d8:	02 c0       	rjmp	.+4      	; 0x55de <usbPoll+0x174>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    55da:	23 e0       	ldi	r18, 0x03	; 3
    55dc:	38 e0       	ldi	r19, 0x08	; 8
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	03 c0       	rjmp	.+6      	; 0x55e8 <usbPoll+0x17e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
    55e2:	23 e0       	ldi	r18, 0x03	; 3
    55e4:	38 e0       	ldi	r19, 0x08	; 8
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
    55e6:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
    55e8:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <usbMsgPtr+0x1>
    55ec:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <usbMsgPtr>
    55f0:	07 c0       	rjmp	.+14     	; 0x5600 <usbPoll+0x196>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
    55f2:	98 81       	ld	r25, Y
    55f4:	97 fd       	sbrc	r25, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
    55f6:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
    55f8:	90 e8       	ldi	r25, 0x80	; 128
    55fa:	90 93 d9 05 	sts	0x05D9, r25	; 0x8005d9 <usbMsgFlags>
    55fe:	07 c0       	rjmp	.+14     	; 0x560e <usbPoll+0x1a4>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    5600:	9f 81       	ldd	r25, Y+7	; 0x07
    5602:	91 11       	cpse	r25, r1
    5604:	04 c0       	rjmp	.+8      	; 0x560e <usbPoll+0x1a4>
    5606:	9e 81       	ldd	r25, Y+6	; 0x06
    5608:	98 17       	cp	r25, r24
    560a:	08 f4       	brcc	.+2      	; 0x560e <usbPoll+0x1a4>
    560c:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    560e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <usbMsgLen>
    5612:	0f c0       	rjmp	.+30     	; 0x5632 <usbPoll+0x1c8>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    5614:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <usbMsgFlags>
    5618:	87 ff       	sbrs	r24, 7
            uchar rval = usbFunctionWrite(data, len);
    561a:	0b c0       	rjmp	.+22     	; 0x5632 <usbPoll+0x1c8>
    561c:	ce 01       	movw	r24, r28
            if(rval == 0xff){   /* an error occurred */
    561e:	ae de       	rcall	.-676    	; 0x537c <usbFunctionWrite>
    5620:	8f 3f       	cpi	r24, 0xFF	; 255
                usbTxLen = USBPID_STALL;
    5622:	21 f4       	brne	.+8      	; 0x562c <usbPoll+0x1c2>
    5624:	8e e1       	ldi	r24, 0x1E	; 30
    5626:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <usbTxLen>
            }else if(rval != 0){    /* This was the final package */
    562a:	03 c0       	rjmp	.+6      	; 0x5632 <usbPoll+0x1c8>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
    562c:	81 11       	cpse	r24, r1
    562e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    5632:	10 92 0a 08 	sts	0x080A, r1	; 0x80080a <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    5636:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <usbTxLen>
    563a:	84 ff       	sbrs	r24, 4
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    563c:	5c c0       	rjmp	.+184    	; 0x56f6 <usbPoll+0x28c>
    563e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <usbMsgLen>
    5642:	8f 3f       	cpi	r24, 0xFF	; 255
    5644:	09 f4       	brne	.+2      	; 0x5648 <usbPoll+0x1de>
    5646:	57 c0       	rjmp	.+174    	; 0x56f6 <usbPoll+0x28c>
    5648:	c8 2f       	mov	r28, r24
    564a:	89 30       	cpi	r24, 0x09	; 9
    564c:	08 f0       	brcs	.+2      	; 0x5650 <usbPoll+0x1e6>
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    564e:	c8 e0       	ldi	r28, 0x08	; 8
    5650:	8c 1b       	sub	r24, r28
    5652:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    5656:	90 91 fa 07 	lds	r25, 0x07FA	; 0x8007fa <usbTxBuf>
    565a:	88 e8       	ldi	r24, 0x88	; 136
    565c:	89 27       	eor	r24, r25
    565e:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <usbTxBuf>
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    5662:	cc 23       	and	r28, r28
    5664:	09 f4       	brne	.+2      	; 0x5668 <usbPoll+0x1fe>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    5666:	55 c0       	rjmp	.+170    	; 0x5712 <usbPoll+0x2a8>
    5668:	20 91 d9 05 	lds	r18, 0x05D9	; 0x8005d9 <usbMsgFlags>
    566c:	27 ff       	sbrs	r18, 7
            len = usbFunctionRead(data, len);
    566e:	08 c0       	rjmp	.+16     	; 0x5680 <usbPoll+0x216>
    5670:	6c 2f       	mov	r22, r28
    5672:	8b ef       	ldi	r24, 0xFB	; 251
    5674:	97 e0       	ldi	r25, 0x07	; 7
    5676:	05 de       	rcall	.-1014   	; 0x5282 <usbFunctionRead>
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
    5678:	c8 2f       	mov	r28, r24
    567a:	89 30       	cpi	r24, 0x09	; 9
    567c:	b0 f5       	brcc	.+108    	; 0x56ea <usbPoll+0x280>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
    567e:	29 c0       	rjmp	.+82     	; 0x56d2 <usbPoll+0x268>
    5680:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <usbMsgPtr>
    5684:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    5688:	26 ff       	sbrs	r18, 6
    568a:	12 c0       	rjmp	.+36     	; 0x56b0 <usbPoll+0x246>
    568c:	aa ef       	ldi	r26, 0xFA	; 250
    568e:	b7 e0       	ldi	r27, 0x07	; 7
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    5690:	2c 2f       	mov	r18, r28
    5692:	ac 01       	movw	r20, r24
    5694:	4a 5f       	subi	r20, 0xFA	; 250
    5696:	57 40       	sbci	r21, 0x07	; 7
    5698:	fa 01       	movw	r30, r20
    569a:	ea 0f       	add	r30, r26
    569c:	fb 1f       	adc	r31, r27
                    *data++ = c;
    569e:	e4 91       	lpm	r30, Z
    56a0:	11 96       	adiw	r26, 0x01	; 1
    56a2:	ec 93       	st	X, r30
                    r++;
                }while(--i);
    56a4:	11 97       	sbiw	r26, 0x01	; 1
    56a6:	21 50       	subi	r18, 0x01	; 1
    56a8:	11 96       	adiw	r26, 0x01	; 1
    56aa:	21 11       	cpse	r18, r1
    56ac:	f5 cf       	rjmp	.-22     	; 0x5698 <usbPoll+0x22e>
    56ae:	08 c0       	rjmp	.+16     	; 0x56c0 <usbPoll+0x256>
    56b0:	eb ef       	ldi	r30, 0xFB	; 251
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    56b2:	f7 e0       	ldi	r31, 0x07	; 7
    56b4:	dc 01       	movw	r26, r24
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
    56b6:	2c 2f       	mov	r18, r28
    56b8:	3d 91       	ld	r19, X+
                    r++;
                }while(--i);
    56ba:	31 93       	st	Z+, r19
    56bc:	21 50       	subi	r18, 0x01	; 1
    56be:	e1 f7       	brne	.-8      	; 0x56b8 <usbPoll+0x24e>
    56c0:	01 96       	adiw	r24, 0x01	; 1
    56c2:	2f ef       	ldi	r18, 0xFF	; 255
    56c4:	2c 0f       	add	r18, r28
    56c6:	82 0f       	add	r24, r18
            }
            usbMsgPtr = r;
    56c8:	91 1d       	adc	r25, r1
    56ca:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <usbMsgPtr+0x1>
    56ce:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    56d2:	6c 2f       	mov	r22, r28
    56d4:	8b ef       	ldi	r24, 0xFB	; 251
    56d6:	97 e0       	ldi	r25, 0x07	; 7
    56d8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <usbCrc16Append>
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
    56dc:	cc 5f       	subi	r28, 0xFC	; 252
    56de:	cc 30       	cpi	r28, 0x0C	; 12
            usbMsgLen = USB_NO_MSG;
    56e0:	41 f0       	breq	.+16     	; 0x56f2 <usbPoll+0x288>
    56e2:	8f ef       	ldi	r24, 0xFF	; 255
    56e4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <usbMsgLen>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    56e8:	04 c0       	rjmp	.+8      	; 0x56f2 <usbPoll+0x288>
    56ea:	8f ef       	ldi	r24, 0xFF	; 255
    56ec:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <usbMsgLen>
    }
    usbTxLen = len;
    56f0:	ce e1       	ldi	r28, 0x1E	; 30
    56f2:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    56f6:	84 e1       	ldi	r24, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
    56f8:	96 b1       	in	r25, 0x06	; 6
    56fa:	9c 70       	andi	r25, 0x0C	; 12
    56fc:	89 f4       	brne	.+34     	; 0x5720 <usbPoll+0x2b6>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    56fe:	81 50       	subi	r24, 0x01	; 1
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    5700:	d9 f7       	brne	.-10     	; 0x56f8 <usbPoll+0x28e>
    5702:	10 92 0b 08 	sts	0x080B, r1	; 0x80080b <usbNewDeviceAddr>
    usbDeviceAddr = 0;
    5706:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <usbDeviceAddr>
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
    570a:	8a e5       	ldi	r24, 0x5A	; 90
    570c:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <usbTxStatus1>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    5710:	07 c0       	rjmp	.+14     	; 0x5720 <usbPoll+0x2b6>
    5712:	60 e0       	ldi	r22, 0x00	; 0
    5714:	8b ef       	ldi	r24, 0xFB	; 251
    5716:	97 e0       	ldi	r25, 0x07	; 7
    5718:	0e 94 0e 07 	call	0xe1c	; 0xe1c <usbCrc16Append>
        len += 4;           /* length including sync byte */
    571c:	c4 e0       	ldi	r28, 0x04	; 4
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    571e:	e1 cf       	rjmp	.-62     	; 0x56e2 <usbPoll+0x278>
    5720:	df 91       	pop	r29
    5722:	cf 91       	pop	r28
    5724:	08 95       	ret

00005726 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    5726:	e9 e6       	ldi	r30, 0x69	; 105
    5728:	f0 e0       	ldi	r31, 0x00	; 0
    572a:	80 81       	ld	r24, Z
    572c:	83 60       	ori	r24, 0x03	; 3
    572e:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    5730:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
	USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    5732:	ed e8       	ldi	r30, 0x8D	; 141
    5734:	f5 e0       	ldi	r31, 0x05	; 5
    5736:	8b e4       	ldi	r24, 0x4B	; 75
    5738:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    573a:	8a e5       	ldi	r24, 0x5A	; 90
    573c:	80 83       	st	Z, r24
    573e:	08 95       	ret

00005740 <putval>:
    5740:	20 fd       	sbrc	r18, 0
    5742:	09 c0       	rjmp	.+18     	; 0x5756 <putval+0x16>
    5744:	fc 01       	movw	r30, r24
    5746:	23 fd       	sbrc	r18, 3
    5748:	05 c0       	rjmp	.+10     	; 0x5754 <putval+0x14>
    574a:	22 ff       	sbrs	r18, 2
    574c:	02 c0       	rjmp	.+4      	; 0x5752 <putval+0x12>
    574e:	73 83       	std	Z+3, r23	; 0x03
    5750:	62 83       	std	Z+2, r22	; 0x02
    5752:	51 83       	std	Z+1, r21	; 0x01
    5754:	40 83       	st	Z, r20
    5756:	08 95       	ret

00005758 <mulacc>:
    5758:	44 fd       	sbrc	r20, 4
    575a:	17 c0       	rjmp	.+46     	; 0x578a <mulacc+0x32>
    575c:	46 fd       	sbrc	r20, 6
    575e:	17 c0       	rjmp	.+46     	; 0x578e <mulacc+0x36>
    5760:	ab 01       	movw	r20, r22
    5762:	bc 01       	movw	r22, r24
    5764:	da 01       	movw	r26, r20
    5766:	fb 01       	movw	r30, r22
    5768:	aa 0f       	add	r26, r26
    576a:	bb 1f       	adc	r27, r27
    576c:	ee 1f       	adc	r30, r30
    576e:	ff 1f       	adc	r31, r31
    5770:	10 94       	com	r1
    5772:	d1 f7       	brne	.-12     	; 0x5768 <mulacc+0x10>
    5774:	4a 0f       	add	r20, r26
    5776:	5b 1f       	adc	r21, r27
    5778:	6e 1f       	adc	r22, r30
    577a:	7f 1f       	adc	r23, r31
    577c:	cb 01       	movw	r24, r22
    577e:	ba 01       	movw	r22, r20
    5780:	66 0f       	add	r22, r22
    5782:	77 1f       	adc	r23, r23
    5784:	88 1f       	adc	r24, r24
    5786:	99 1f       	adc	r25, r25
    5788:	09 c0       	rjmp	.+18     	; 0x579c <mulacc+0x44>
    578a:	33 e0       	ldi	r19, 0x03	; 3
    578c:	01 c0       	rjmp	.+2      	; 0x5790 <mulacc+0x38>
    578e:	34 e0       	ldi	r19, 0x04	; 4
    5790:	66 0f       	add	r22, r22
    5792:	77 1f       	adc	r23, r23
    5794:	88 1f       	adc	r24, r24
    5796:	99 1f       	adc	r25, r25
    5798:	31 50       	subi	r19, 0x01	; 1
    579a:	d1 f7       	brne	.-12     	; 0x5790 <mulacc+0x38>
    579c:	62 0f       	add	r22, r18
    579e:	71 1d       	adc	r23, r1
    57a0:	81 1d       	adc	r24, r1
    57a2:	91 1d       	adc	r25, r1
    57a4:	08 95       	ret

000057a6 <skip_spaces>:
    57a6:	0f 93       	push	r16
    57a8:	1f 93       	push	r17
    57aa:	cf 93       	push	r28
    57ac:	df 93       	push	r29
    57ae:	8c 01       	movw	r16, r24
    57b0:	c8 01       	movw	r24, r16
    57b2:	0e 94 50 34 	call	0x68a0	; 0x68a0 <fgetc>
    57b6:	ec 01       	movw	r28, r24
    57b8:	97 fd       	sbrc	r25, 7
    57ba:	08 c0       	rjmp	.+16     	; 0x57cc <skip_spaces+0x26>
    57bc:	0e 94 11 34 	call	0x6822	; 0x6822 <isspace>
    57c0:	89 2b       	or	r24, r25
    57c2:	b1 f7       	brne	.-20     	; 0x57b0 <skip_spaces+0xa>
    57c4:	b8 01       	movw	r22, r16
    57c6:	ce 01       	movw	r24, r28
    57c8:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <ungetc>
    57cc:	ce 01       	movw	r24, r28
    57ce:	df 91       	pop	r29
    57d0:	cf 91       	pop	r28
    57d2:	1f 91       	pop	r17
    57d4:	0f 91       	pop	r16
    57d6:	08 95       	ret

000057d8 <conv_int>:
    57d8:	a0 e0       	ldi	r26, 0x00	; 0
    57da:	b0 e0       	ldi	r27, 0x00	; 0
    57dc:	e1 ef       	ldi	r30, 0xF1	; 241
    57de:	fb e2       	ldi	r31, 0x2B	; 43
    57e0:	1b c4       	rjmp	.+2102   	; 0x6018 <__prologue_saves__+0xc>
    57e2:	7c 01       	movw	r14, r24
    57e4:	8b 01       	movw	r16, r22
    57e6:	6a 01       	movw	r12, r20
    57e8:	d2 2f       	mov	r29, r18
    57ea:	0e 94 50 34 	call	0x68a0	; 0x68a0 <fgetc>
    57ee:	9c 01       	movw	r18, r24
    57f0:	33 27       	eor	r19, r19
    57f2:	2b 32       	cpi	r18, 0x2B	; 43
    57f4:	31 05       	cpc	r19, r1
    57f6:	21 f0       	breq	.+8      	; 0x5800 <conv_int+0x28>
    57f8:	2d 32       	cpi	r18, 0x2D	; 45
    57fa:	31 05       	cpc	r19, r1
    57fc:	59 f4       	brne	.+22     	; 0x5814 <conv_int+0x3c>
    57fe:	d0 68       	ori	r29, 0x80	; 128
    5800:	01 50       	subi	r16, 0x01	; 1
    5802:	11 09       	sbc	r17, r1
    5804:	11 f4       	brne	.+4      	; 0x580a <conv_int+0x32>
    5806:	80 e0       	ldi	r24, 0x00	; 0
    5808:	68 c0       	rjmp	.+208    	; 0x58da <conv_int+0x102>
    580a:	c7 01       	movw	r24, r14
    580c:	0e 94 50 34 	call	0x68a0	; 0x68a0 <fgetc>
    5810:	97 fd       	sbrc	r25, 7
    5812:	f9 cf       	rjmp	.-14     	; 0x5806 <conv_int+0x2e>
    5814:	cd 2f       	mov	r28, r29
    5816:	cd 7f       	andi	r28, 0xFD	; 253
    5818:	2d 2f       	mov	r18, r29
    581a:	20 73       	andi	r18, 0x30	; 48
    581c:	19 f5       	brne	.+70     	; 0x5864 <conv_int+0x8c>
    581e:	80 33       	cpi	r24, 0x30	; 48
    5820:	09 f5       	brne	.+66     	; 0x5864 <conv_int+0x8c>
    5822:	58 01       	movw	r10, r16
    5824:	81 e0       	ldi	r24, 0x01	; 1
    5826:	a8 1a       	sub	r10, r24
    5828:	b1 08       	sbc	r11, r1
    582a:	09 f4       	brne	.+2      	; 0x582e <conv_int+0x56>
    582c:	43 c0       	rjmp	.+134    	; 0x58b4 <conv_int+0xdc>
    582e:	c7 01       	movw	r24, r14
    5830:	0e 94 50 34 	call	0x68a0	; 0x68a0 <fgetc>
    5834:	97 fd       	sbrc	r25, 7
    5836:	3e c0       	rjmp	.+124    	; 0x58b4 <conv_int+0xdc>
    5838:	9c 01       	movw	r18, r24
    583a:	2f 7d       	andi	r18, 0xDF	; 223
    583c:	33 27       	eor	r19, r19
    583e:	28 35       	cpi	r18, 0x58	; 88
    5840:	31 05       	cpc	r19, r1
    5842:	51 f4       	brne	.+20     	; 0x5858 <conv_int+0x80>
    5844:	c2 64       	ori	r28, 0x42	; 66
    5846:	02 50       	subi	r16, 0x02	; 2
    5848:	11 09       	sbc	r17, r1
    584a:	a1 f1       	breq	.+104    	; 0x58b4 <conv_int+0xdc>
    584c:	c7 01       	movw	r24, r14
    584e:	0e 94 50 34 	call	0x68a0	; 0x68a0 <fgetc>
    5852:	97 ff       	sbrs	r25, 7
    5854:	07 c0       	rjmp	.+14     	; 0x5864 <conv_int+0x8c>
    5856:	2e c0       	rjmp	.+92     	; 0x58b4 <conv_int+0xdc>
    5858:	d6 ff       	sbrs	r29, 6
    585a:	02 c0       	rjmp	.+4      	; 0x5860 <conv_int+0x88>
    585c:	c2 60       	ori	r28, 0x02	; 2
    585e:	01 c0       	rjmp	.+2      	; 0x5862 <conv_int+0x8a>
    5860:	c2 61       	ori	r28, 0x12	; 18
    5862:	85 01       	movw	r16, r10
    5864:	81 2c       	mov	r8, r1
    5866:	91 2c       	mov	r9, r1
    5868:	54 01       	movw	r10, r8
    586a:	20 ed       	ldi	r18, 0xD0	; 208
    586c:	28 0f       	add	r18, r24
    586e:	28 30       	cpi	r18, 0x08	; 8
    5870:	80 f0       	brcs	.+32     	; 0x5892 <conv_int+0xba>
    5872:	c4 ff       	sbrs	r28, 4
    5874:	04 c0       	rjmp	.+8      	; 0x587e <conv_int+0xa6>
    5876:	b7 01       	movw	r22, r14
    5878:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <ungetc>
    587c:	18 c0       	rjmp	.+48     	; 0x58ae <conv_int+0xd6>
    587e:	2a 30       	cpi	r18, 0x0A	; 10
    5880:	40 f0       	brcs	.+16     	; 0x5892 <conv_int+0xba>
    5882:	c6 ff       	sbrs	r28, 6
    5884:	f8 cf       	rjmp	.-16     	; 0x5876 <conv_int+0x9e>
    5886:	2f 7d       	andi	r18, 0xDF	; 223
    5888:	3f ee       	ldi	r19, 0xEF	; 239
    588a:	32 0f       	add	r19, r18
    588c:	36 30       	cpi	r19, 0x06	; 6
    588e:	98 f7       	brcc	.-26     	; 0x5876 <conv_int+0x9e>
    5890:	27 50       	subi	r18, 0x07	; 7
    5892:	4c 2f       	mov	r20, r28
    5894:	c5 01       	movw	r24, r10
    5896:	b4 01       	movw	r22, r8
    5898:	5f df       	rcall	.-322    	; 0x5758 <mulacc>
    589a:	4b 01       	movw	r8, r22
    589c:	5c 01       	movw	r10, r24
    589e:	c2 60       	ori	r28, 0x02	; 2
    58a0:	01 50       	subi	r16, 0x01	; 1
    58a2:	11 09       	sbc	r17, r1
    58a4:	51 f0       	breq	.+20     	; 0x58ba <conv_int+0xe2>
    58a6:	c7 01       	movw	r24, r14
    58a8:	fb d7       	rcall	.+4086   	; 0x68a0 <fgetc>
    58aa:	97 ff       	sbrs	r25, 7
    58ac:	de cf       	rjmp	.-68     	; 0x586a <conv_int+0x92>
    58ae:	c1 fd       	sbrc	r28, 1
    58b0:	04 c0       	rjmp	.+8      	; 0x58ba <conv_int+0xe2>
    58b2:	a9 cf       	rjmp	.-174    	; 0x5806 <conv_int+0x2e>
    58b4:	81 2c       	mov	r8, r1
    58b6:	91 2c       	mov	r9, r1
    58b8:	54 01       	movw	r10, r8
    58ba:	c7 ff       	sbrs	r28, 7
    58bc:	08 c0       	rjmp	.+16     	; 0x58ce <conv_int+0xf6>
    58be:	b0 94       	com	r11
    58c0:	a0 94       	com	r10
    58c2:	90 94       	com	r9
    58c4:	80 94       	com	r8
    58c6:	81 1c       	adc	r8, r1
    58c8:	91 1c       	adc	r9, r1
    58ca:	a1 1c       	adc	r10, r1
    58cc:	b1 1c       	adc	r11, r1
    58ce:	2c 2f       	mov	r18, r28
    58d0:	b5 01       	movw	r22, r10
    58d2:	a4 01       	movw	r20, r8
    58d4:	c6 01       	movw	r24, r12
    58d6:	34 df       	rcall	.-408    	; 0x5740 <putval>
    58d8:	81 e0       	ldi	r24, 0x01	; 1
    58da:	cd b7       	in	r28, 0x3d	; 61
    58dc:	de b7       	in	r29, 0x3e	; 62
    58de:	ec e0       	ldi	r30, 0x0C	; 12
    58e0:	b7 c3       	rjmp	.+1902   	; 0x6050 <__epilogue_restores__+0xc>

000058e2 <conv_brk>:
    58e2:	a0 e2       	ldi	r26, 0x20	; 32
    58e4:	b0 e0       	ldi	r27, 0x00	; 0
    58e6:	e6 e7       	ldi	r30, 0x76	; 118
    58e8:	fc e2       	ldi	r31, 0x2C	; 44
    58ea:	92 c3       	rjmp	.+1828   	; 0x6010 <__prologue_saves__+0x4>
    58ec:	5c 01       	movw	r10, r24
    58ee:	4b 01       	movw	r8, r22
    58f0:	7a 01       	movw	r14, r20
    58f2:	8e 01       	movw	r16, r28
    58f4:	0f 5f       	subi	r16, 0xFF	; 255
    58f6:	1f 4f       	sbci	r17, 0xFF	; 255
    58f8:	68 01       	movw	r12, r16
    58fa:	80 e2       	ldi	r24, 0x20	; 32
    58fc:	f8 01       	movw	r30, r16
    58fe:	11 92       	st	Z+, r1
    5900:	8a 95       	dec	r24
    5902:	e9 f7       	brne	.-6      	; 0x58fe <conv_brk+0x1c>
    5904:	f5 01       	movw	r30, r10
    5906:	53 80       	ldd	r5, Z+3	; 0x03
    5908:	40 e0       	ldi	r20, 0x00	; 0
    590a:	50 e0       	ldi	r21, 0x00	; 0
    590c:	61 2c       	mov	r6, r1
    590e:	90 e0       	ldi	r25, 0x00	; 0
    5910:	71 2c       	mov	r7, r1
    5912:	a1 e0       	ldi	r26, 0x01	; 1
    5914:	b0 e0       	ldi	r27, 0x00	; 0
    5916:	f9 01       	movw	r30, r18
    5918:	53 fc       	sbrc	r5, 3
    591a:	85 91       	lpm	r24, Z+
    591c:	53 fe       	sbrs	r5, 3
    591e:	81 91       	ld	r24, Z+
    5920:	8f 01       	movw	r16, r30
    5922:	48 2e       	mov	r4, r24
    5924:	9f 01       	movw	r18, r30
    5926:	81 11       	cpse	r24, r1
    5928:	03 c0       	rjmp	.+6      	; 0x5930 <conv_brk+0x4e>
    592a:	80 e0       	ldi	r24, 0x00	; 0
    592c:	90 e0       	ldi	r25, 0x00	; 0
    592e:	94 c0       	rjmp	.+296    	; 0x5a58 <conv_brk+0x176>
    5930:	8e 35       	cpi	r24, 0x5E	; 94
    5932:	19 f4       	brne	.+6      	; 0x593a <conv_brk+0x58>
    5934:	41 15       	cp	r20, r1
    5936:	51 05       	cpc	r21, r1
    5938:	51 f1       	breq	.+84     	; 0x598e <conv_brk+0xac>
    593a:	67 2d       	mov	r22, r7
    593c:	70 e0       	ldi	r23, 0x00	; 0
    593e:	64 17       	cp	r22, r20
    5940:	75 07       	cpc	r23, r21
    5942:	3c f4       	brge	.+14     	; 0x5952 <conv_brk+0x70>
    5944:	8d 35       	cpi	r24, 0x5D	; 93
    5946:	61 f1       	breq	.+88     	; 0x59a0 <conv_brk+0xbe>
    5948:	8d 32       	cpi	r24, 0x2D	; 45
    594a:	19 f4       	brne	.+6      	; 0x5952 <conv_brk+0x70>
    594c:	99 23       	and	r25, r25
    594e:	11 f1       	breq	.+68     	; 0x5994 <conv_brk+0xb2>
    5950:	03 c0       	rjmp	.+6      	; 0x5958 <conv_brk+0x76>
    5952:	99 23       	and	r25, r25
    5954:	09 f4       	brne	.+2      	; 0x5958 <conv_brk+0x76>
    5956:	6b c0       	rjmp	.+214    	; 0x5a2e <conv_brk+0x14c>
    5958:	84 2d       	mov	r24, r4
    595a:	86 95       	lsr	r24
    595c:	86 95       	lsr	r24
    595e:	86 95       	lsr	r24
    5960:	f6 01       	movw	r30, r12
    5962:	e8 0f       	add	r30, r24
    5964:	f1 1d       	adc	r31, r1
    5966:	84 2d       	mov	r24, r4
    5968:	87 70       	andi	r24, 0x07	; 7
    596a:	8d 01       	movw	r16, r26
    596c:	02 c0       	rjmp	.+4      	; 0x5972 <conv_brk+0x90>
    596e:	00 0f       	add	r16, r16
    5970:	11 1f       	adc	r17, r17
    5972:	8a 95       	dec	r24
    5974:	e2 f7       	brpl	.-8      	; 0x596e <conv_brk+0x8c>
    5976:	c8 01       	movw	r24, r16
    5978:	90 81       	ld	r25, Z
    597a:	89 2b       	or	r24, r25
    597c:	80 83       	st	Z, r24
    597e:	64 14       	cp	r6, r4
    5980:	59 f0       	breq	.+22     	; 0x5998 <conv_brk+0xb6>
    5982:	46 14       	cp	r4, r6
    5984:	10 f4       	brcc	.+4      	; 0x598a <conv_brk+0xa8>
    5986:	43 94       	inc	r4
    5988:	e7 cf       	rjmp	.-50     	; 0x5958 <conv_brk+0x76>
    598a:	4a 94       	dec	r4
    598c:	e5 cf       	rjmp	.-54     	; 0x5958 <conv_brk+0x76>
    598e:	77 24       	eor	r7, r7
    5990:	73 94       	inc	r7
    5992:	03 c0       	rjmp	.+6      	; 0x599a <conv_brk+0xb8>
    5994:	91 e0       	ldi	r25, 0x01	; 1
    5996:	01 c0       	rjmp	.+2      	; 0x599a <conv_brk+0xb8>
    5998:	90 e0       	ldi	r25, 0x00	; 0
    599a:	4f 5f       	subi	r20, 0xFF	; 255
    599c:	5f 4f       	sbci	r21, 0xFF	; 255
    599e:	bb cf       	rjmp	.-138    	; 0x5916 <conv_brk+0x34>
    59a0:	99 23       	and	r25, r25
    59a2:	19 f0       	breq	.+6      	; 0x59aa <conv_brk+0xc8>
    59a4:	8e 81       	ldd	r24, Y+6	; 0x06
    59a6:	80 62       	ori	r24, 0x20	; 32
    59a8:	8e 83       	std	Y+6, r24	; 0x06
    59aa:	71 10       	cpse	r7, r1
    59ac:	03 c0       	rjmp	.+6      	; 0x59b4 <conv_brk+0xd2>
    59ae:	77 24       	eor	r7, r7
    59b0:	73 94       	inc	r7
    59b2:	19 c0       	rjmp	.+50     	; 0x59e6 <conv_brk+0x104>
    59b4:	f6 01       	movw	r30, r12
    59b6:	9e 01       	movw	r18, r28
    59b8:	2f 5d       	subi	r18, 0xDF	; 223
    59ba:	3f 4f       	sbci	r19, 0xFF	; 255
    59bc:	80 81       	ld	r24, Z
    59be:	80 95       	com	r24
    59c0:	81 93       	st	Z+, r24
    59c2:	2e 17       	cp	r18, r30
    59c4:	3f 07       	cpc	r19, r31
    59c6:	d1 f7       	brne	.-12     	; 0x59bc <conv_brk+0xda>
    59c8:	f2 cf       	rjmp	.-28     	; 0x59ae <conv_brk+0xcc>
    59ca:	e1 14       	cp	r14, r1
    59cc:	f1 04       	cpc	r15, r1
    59ce:	31 f0       	breq	.+12     	; 0x59dc <conv_brk+0xfa>
    59d0:	f7 01       	movw	r30, r14
    59d2:	80 83       	st	Z, r24
    59d4:	b7 01       	movw	r22, r14
    59d6:	6f 5f       	subi	r22, 0xFF	; 255
    59d8:	7f 4f       	sbci	r23, 0xFF	; 255
    59da:	7b 01       	movw	r14, r22
    59dc:	71 e0       	ldi	r23, 0x01	; 1
    59de:	87 1a       	sub	r8, r23
    59e0:	91 08       	sbc	r9, r1
    59e2:	71 2c       	mov	r7, r1
    59e4:	e9 f0       	breq	.+58     	; 0x5a20 <conv_brk+0x13e>
    59e6:	c5 01       	movw	r24, r10
    59e8:	5b d7       	rcall	.+3766   	; 0x68a0 <fgetc>
    59ea:	97 fd       	sbrc	r25, 7
    59ec:	17 c0       	rjmp	.+46     	; 0x5a1c <conv_brk+0x13a>
    59ee:	fc 01       	movw	r30, r24
    59f0:	ff 27       	eor	r31, r31
    59f2:	23 e0       	ldi	r18, 0x03	; 3
    59f4:	f5 95       	asr	r31
    59f6:	e7 95       	ror	r30
    59f8:	2a 95       	dec	r18
    59fa:	e1 f7       	brne	.-8      	; 0x59f4 <conv_brk+0x112>
    59fc:	ec 0d       	add	r30, r12
    59fe:	fd 1d       	adc	r31, r13
    5a00:	20 81       	ld	r18, Z
    5a02:	30 e0       	ldi	r19, 0x00	; 0
    5a04:	ac 01       	movw	r20, r24
    5a06:	47 70       	andi	r20, 0x07	; 7
    5a08:	55 27       	eor	r21, r21
    5a0a:	02 c0       	rjmp	.+4      	; 0x5a10 <conv_brk+0x12e>
    5a0c:	35 95       	asr	r19
    5a0e:	27 95       	ror	r18
    5a10:	4a 95       	dec	r20
    5a12:	e2 f7       	brpl	.-8      	; 0x5a0c <conv_brk+0x12a>
    5a14:	20 fd       	sbrc	r18, 0
    5a16:	d9 cf       	rjmp	.-78     	; 0x59ca <conv_brk+0xe8>
    5a18:	b5 01       	movw	r22, r10
    5a1a:	e2 d7       	rcall	.+4036   	; 0x69e0 <ungetc>
    5a1c:	71 10       	cpse	r7, r1
    5a1e:	85 cf       	rjmp	.-246    	; 0x592a <conv_brk+0x48>
    5a20:	e1 14       	cp	r14, r1
    5a22:	f1 04       	cpc	r15, r1
    5a24:	11 f0       	breq	.+4      	; 0x5a2a <conv_brk+0x148>
    5a26:	f7 01       	movw	r30, r14
    5a28:	10 82       	st	Z, r1
    5a2a:	c8 01       	movw	r24, r16
    5a2c:	15 c0       	rjmp	.+42     	; 0x5a58 <conv_brk+0x176>
    5a2e:	68 2f       	mov	r22, r24
    5a30:	66 95       	lsr	r22
    5a32:	66 95       	lsr	r22
    5a34:	66 95       	lsr	r22
    5a36:	f6 01       	movw	r30, r12
    5a38:	e6 0f       	add	r30, r22
    5a3a:	f1 1d       	adc	r31, r1
    5a3c:	68 2f       	mov	r22, r24
    5a3e:	67 70       	andi	r22, 0x07	; 7
    5a40:	8d 01       	movw	r16, r26
    5a42:	02 c0       	rjmp	.+4      	; 0x5a48 <conv_brk+0x166>
    5a44:	00 0f       	add	r16, r16
    5a46:	11 1f       	adc	r17, r17
    5a48:	6a 95       	dec	r22
    5a4a:	e2 f7       	brpl	.-8      	; 0x5a44 <conv_brk+0x162>
    5a4c:	b8 01       	movw	r22, r16
    5a4e:	70 81       	ld	r23, Z
    5a50:	67 2b       	or	r22, r23
    5a52:	60 83       	st	Z, r22
    5a54:	68 2e       	mov	r6, r24
    5a56:	a1 cf       	rjmp	.-190    	; 0x599a <conv_brk+0xb8>
    5a58:	a0 96       	adiw	r28, 0x20	; 32
    5a5a:	e0 e1       	ldi	r30, 0x10	; 16
    5a5c:	f5 c2       	rjmp	.+1514   	; 0x6048 <__epilogue_restores__+0x4>

00005a5e <conv_flt>:
    5a5e:	2f 92       	push	r2
    5a60:	3f 92       	push	r3
    5a62:	4f 92       	push	r4
    5a64:	5f 92       	push	r5
    5a66:	6f 92       	push	r6
    5a68:	7f 92       	push	r7
    5a6a:	9f 92       	push	r9
    5a6c:	af 92       	push	r10
    5a6e:	bf 92       	push	r11
    5a70:	cf 92       	push	r12
    5a72:	df 92       	push	r13
    5a74:	ef 92       	push	r14
    5a76:	ff 92       	push	r15
    5a78:	0f 93       	push	r16
    5a7a:	1f 93       	push	r17
    5a7c:	cf 93       	push	r28
    5a7e:	df 93       	push	r29
    5a80:	6c 01       	movw	r12, r24
    5a82:	8b 01       	movw	r16, r22
    5a84:	1a 01       	movw	r2, r20
    5a86:	0c d7       	rcall	.+3608   	; 0x68a0 <fgetc>
    5a88:	ec 01       	movw	r28, r24
    5a8a:	99 27       	eor	r25, r25
    5a8c:	8b 32       	cpi	r24, 0x2B	; 43
    5a8e:	91 05       	cpc	r25, r1
    5a90:	29 f0       	breq	.+10     	; 0x5a9c <conv_flt+0x3e>
    5a92:	8d 97       	sbiw	r24, 0x2d	; 45
    5a94:	79 f4       	brne	.+30     	; 0x5ab4 <conv_flt+0x56>
    5a96:	30 e8       	ldi	r19, 0x80	; 128
    5a98:	93 2e       	mov	r9, r19
    5a9a:	01 c0       	rjmp	.+2      	; 0x5a9e <conv_flt+0x40>
    5a9c:	91 2c       	mov	r9, r1
    5a9e:	01 50       	subi	r16, 0x01	; 1
    5aa0:	11 09       	sbc	r17, r1
    5aa2:	11 f4       	brne	.+4      	; 0x5aa8 <conv_flt+0x4a>
    5aa4:	80 e0       	ldi	r24, 0x00	; 0
    5aa6:	fe c0       	rjmp	.+508    	; 0x5ca4 <conv_flt+0x246>
    5aa8:	c6 01       	movw	r24, r12
    5aaa:	fa d6       	rcall	.+3572   	; 0x68a0 <fgetc>
    5aac:	ec 01       	movw	r28, r24
    5aae:	97 ff       	sbrs	r25, 7
    5ab0:	02 c0       	rjmp	.+4      	; 0x5ab6 <conv_flt+0x58>
    5ab2:	f8 cf       	rjmp	.-16     	; 0x5aa4 <conv_flt+0x46>
    5ab4:	91 2c       	mov	r9, r1
    5ab6:	ce 01       	movw	r24, r28
    5ab8:	bc d6       	rcall	.+3448   	; 0x6832 <tolower>
    5aba:	89 36       	cpi	r24, 0x69	; 105
    5abc:	91 05       	cpc	r25, r1
    5abe:	31 f0       	breq	.+12     	; 0x5acc <conv_flt+0x6e>
    5ac0:	8e 36       	cpi	r24, 0x6E	; 110
    5ac2:	91 05       	cpc	r25, r1
    5ac4:	81 f5       	brne	.+96     	; 0x5b26 <conv_flt+0xc8>
    5ac6:	ca e5       	ldi	r28, 0x5A	; 90
    5ac8:	dd e0       	ldi	r29, 0x0D	; 13
    5aca:	02 c0       	rjmp	.+4      	; 0x5ad0 <conv_flt+0x72>
    5acc:	cd e5       	ldi	r28, 0x5D	; 93
    5ace:	dd e0       	ldi	r29, 0x0D	; 13
    5ad0:	21 96       	adiw	r28, 0x01	; 1
    5ad2:	fe 01       	movw	r30, r28
    5ad4:	31 97       	sbiw	r30, 0x01	; 1
    5ad6:	b4 90       	lpm	r11, Z
    5ad8:	bb 20       	and	r11, r11
    5ada:	b1 f0       	breq	.+44     	; 0x5b08 <conv_flt+0xaa>
    5adc:	01 50       	subi	r16, 0x01	; 1
    5ade:	11 09       	sbc	r17, r1
    5ae0:	79 f0       	breq	.+30     	; 0x5b00 <conv_flt+0xa2>
    5ae2:	c6 01       	movw	r24, r12
    5ae4:	dd d6       	rcall	.+3514   	; 0x68a0 <fgetc>
    5ae6:	7c 01       	movw	r14, r24
    5ae8:	97 fd       	sbrc	r25, 7
    5aea:	0a c0       	rjmp	.+20     	; 0x5b00 <conv_flt+0xa2>
    5aec:	a2 d6       	rcall	.+3396   	; 0x6832 <tolower>
    5aee:	99 27       	eor	r25, r25
    5af0:	eb 2d       	mov	r30, r11
    5af2:	f0 e0       	ldi	r31, 0x00	; 0
    5af4:	8e 17       	cp	r24, r30
    5af6:	9f 07       	cpc	r25, r31
    5af8:	59 f3       	breq	.-42     	; 0x5ad0 <conv_flt+0x72>
    5afa:	b6 01       	movw	r22, r12
    5afc:	c7 01       	movw	r24, r14
    5afe:	70 d7       	rcall	.+3808   	; 0x69e0 <ungetc>
    5b00:	c0 56       	subi	r28, 0x60	; 96
    5b02:	dd 40       	sbci	r29, 0x0D	; 13
    5b04:	79 f6       	brne	.-98     	; 0x5aa4 <conv_flt+0x46>
    5b06:	03 c0       	rjmp	.+6      	; 0x5b0e <conv_flt+0xb0>
    5b08:	cd 55       	subi	r28, 0x5D	; 93
    5b0a:	dd 40       	sbci	r29, 0x0D	; 13
    5b0c:	29 f0       	breq	.+10     	; 0x5b18 <conv_flt+0xba>
    5b0e:	80 e0       	ldi	r24, 0x00	; 0
    5b10:	90 e0       	ldi	r25, 0x00	; 0
    5b12:	a0 e8       	ldi	r26, 0x80	; 128
    5b14:	bf e7       	ldi	r27, 0x7F	; 127
    5b16:	04 c0       	rjmp	.+8      	; 0x5b20 <conv_flt+0xc2>
    5b18:	80 e0       	ldi	r24, 0x00	; 0
    5b1a:	90 e0       	ldi	r25, 0x00	; 0
    5b1c:	a0 ec       	ldi	r26, 0xC0	; 192
    5b1e:	bf e7       	ldi	r27, 0x7F	; 127
    5b20:	bc 01       	movw	r22, r24
    5b22:	cd 01       	movw	r24, r26
    5b24:	af c0       	rjmp	.+350    	; 0x5c84 <conv_flt+0x226>
    5b26:	41 2c       	mov	r4, r1
    5b28:	51 2c       	mov	r5, r1
    5b2a:	32 01       	movw	r6, r4
    5b2c:	e1 2c       	mov	r14, r1
    5b2e:	f1 2c       	mov	r15, r1
    5b30:	2c 2f       	mov	r18, r28
    5b32:	20 53       	subi	r18, 0x30	; 48
    5b34:	2a 30       	cpi	r18, 0x0A	; 10
    5b36:	08 f5       	brcc	.+66     	; 0x5b7a <conv_flt+0x11c>
    5b38:	e9 2d       	mov	r30, r9
    5b3a:	e2 60       	ori	r30, 0x02	; 2
    5b3c:	be 2e       	mov	r11, r30
    5b3e:	89 2d       	mov	r24, r9
    5b40:	88 70       	andi	r24, 0x08	; 8
    5b42:	92 fe       	sbrs	r9, 2
    5b44:	06 c0       	rjmp	.+12     	; 0x5b52 <conv_flt+0xf4>
    5b46:	81 11       	cpse	r24, r1
    5b48:	1f c0       	rjmp	.+62     	; 0x5b88 <conv_flt+0x12a>
    5b4a:	ff ef       	ldi	r31, 0xFF	; 255
    5b4c:	ef 1a       	sub	r14, r31
    5b4e:	ff 0a       	sbc	r15, r31
    5b50:	1b c0       	rjmp	.+54     	; 0x5b88 <conv_flt+0x12a>
    5b52:	88 23       	and	r24, r24
    5b54:	19 f0       	breq	.+6      	; 0x5b5c <conv_flt+0xfe>
    5b56:	81 e0       	ldi	r24, 0x01	; 1
    5b58:	e8 1a       	sub	r14, r24
    5b5a:	f1 08       	sbc	r15, r1
    5b5c:	40 e2       	ldi	r20, 0x20	; 32
    5b5e:	c3 01       	movw	r24, r6
    5b60:	b2 01       	movw	r22, r4
    5b62:	fa dd       	rcall	.-1036   	; 0x5758 <mulacc>
    5b64:	2b 01       	movw	r4, r22
    5b66:	3c 01       	movw	r6, r24
    5b68:	68 39       	cpi	r22, 0x98	; 152
    5b6a:	79 49       	sbci	r23, 0x99	; 153
    5b6c:	89 49       	sbci	r24, 0x99	; 153
    5b6e:	99 41       	sbci	r25, 0x19	; 25
    5b70:	58 f0       	brcs	.+22     	; 0x5b88 <conv_flt+0x12a>
    5b72:	f9 2d       	mov	r31, r9
    5b74:	f6 60       	ori	r31, 0x06	; 6
    5b76:	bf 2e       	mov	r11, r31
    5b78:	07 c0       	rjmp	.+14     	; 0x5b88 <conv_flt+0x12a>
    5b7a:	2e 3f       	cpi	r18, 0xFE	; 254
    5b7c:	81 f4       	brne	.+32     	; 0x5b9e <conv_flt+0x140>
    5b7e:	93 fc       	sbrc	r9, 3
    5b80:	0e c0       	rjmp	.+28     	; 0x5b9e <conv_flt+0x140>
    5b82:	29 2d       	mov	r18, r9
    5b84:	28 60       	ori	r18, 0x08	; 8
    5b86:	b2 2e       	mov	r11, r18
    5b88:	01 50       	subi	r16, 0x01	; 1
    5b8a:	11 09       	sbc	r17, r1
    5b8c:	39 f0       	breq	.+14     	; 0x5b9c <conv_flt+0x13e>
    5b8e:	c6 01       	movw	r24, r12
    5b90:	87 d6       	rcall	.+3342   	; 0x68a0 <fgetc>
    5b92:	ec 01       	movw	r28, r24
    5b94:	9b 2c       	mov	r9, r11
    5b96:	97 ff       	sbrs	r25, 7
    5b98:	cb cf       	rjmp	.-106    	; 0x5b30 <conv_flt+0xd2>
    5b9a:	01 c0       	rjmp	.+2      	; 0x5b9e <conv_flt+0x140>
    5b9c:	9b 2c       	mov	r9, r11
    5b9e:	91 fe       	sbrs	r9, 1
    5ba0:	81 cf       	rjmp	.-254    	; 0x5aa4 <conv_flt+0x46>
    5ba2:	ce 01       	movw	r24, r28
    5ba4:	8f 7d       	andi	r24, 0xDF	; 223
    5ba6:	99 27       	eor	r25, r25
    5ba8:	85 34       	cpi	r24, 0x45	; 69
    5baa:	91 05       	cpc	r25, r1
    5bac:	09 f0       	breq	.+2      	; 0x5bb0 <conv_flt+0x152>
    5bae:	3e c0       	rjmp	.+124    	; 0x5c2c <conv_flt+0x1ce>
    5bb0:	58 01       	movw	r10, r16
    5bb2:	81 e0       	ldi	r24, 0x01	; 1
    5bb4:	a8 1a       	sub	r10, r24
    5bb6:	b1 08       	sbc	r11, r1
    5bb8:	09 f4       	brne	.+2      	; 0x5bbc <conv_flt+0x15e>
    5bba:	74 cf       	rjmp	.-280    	; 0x5aa4 <conv_flt+0x46>
    5bbc:	c6 01       	movw	r24, r12
    5bbe:	70 d6       	rcall	.+3296   	; 0x68a0 <fgetc>
    5bc0:	ec 01       	movw	r28, r24
    5bc2:	97 fd       	sbrc	r25, 7
    5bc4:	6f cf       	rjmp	.-290    	; 0x5aa4 <conv_flt+0x46>
    5bc6:	99 27       	eor	r25, r25
    5bc8:	8b 32       	cpi	r24, 0x2B	; 43
    5bca:	91 05       	cpc	r25, r1
    5bcc:	29 f0       	breq	.+10     	; 0x5bd8 <conv_flt+0x17a>
    5bce:	8d 97       	sbiw	r24, 0x2d	; 45
    5bd0:	61 f4       	brne	.+24     	; 0x5bea <conv_flt+0x18c>
    5bd2:	e9 2d       	mov	r30, r9
    5bd4:	e0 61       	ori	r30, 0x10	; 16
    5bd6:	9e 2e       	mov	r9, r30
    5bd8:	58 01       	movw	r10, r16
    5bda:	f2 e0       	ldi	r31, 0x02	; 2
    5bdc:	af 1a       	sub	r10, r31
    5bde:	b1 08       	sbc	r11, r1
    5be0:	09 f4       	brne	.+2      	; 0x5be4 <conv_flt+0x186>
    5be2:	60 cf       	rjmp	.-320    	; 0x5aa4 <conv_flt+0x46>
    5be4:	c6 01       	movw	r24, r12
    5be6:	5c d6       	rcall	.+3256   	; 0x68a0 <fgetc>
    5be8:	ec 01       	movw	r28, r24
    5bea:	ce 01       	movw	r24, r28
    5bec:	c0 97       	sbiw	r24, 0x30	; 48
    5bee:	0a 97       	sbiw	r24, 0x0a	; 10
    5bf0:	08 f0       	brcs	.+2      	; 0x5bf4 <conv_flt+0x196>
    5bf2:	58 cf       	rjmp	.-336    	; 0x5aa4 <conv_flt+0x46>
    5bf4:	85 01       	movw	r16, r10
    5bf6:	a1 2c       	mov	r10, r1
    5bf8:	b1 2c       	mov	r11, r1
    5bfa:	b5 01       	movw	r22, r10
    5bfc:	bb 0c       	add	r11, r11
    5bfe:	88 0b       	sbc	r24, r24
    5c00:	99 0b       	sbc	r25, r25
    5c02:	2c 2f       	mov	r18, r28
    5c04:	20 53       	subi	r18, 0x30	; 48
    5c06:	40 e2       	ldi	r20, 0x20	; 32
    5c08:	a7 dd       	rcall	.-1202   	; 0x5758 <mulacc>
    5c0a:	5b 01       	movw	r10, r22
    5c0c:	01 50       	subi	r16, 0x01	; 1
    5c0e:	11 09       	sbc	r17, r1
    5c10:	31 f0       	breq	.+12     	; 0x5c1e <conv_flt+0x1c0>
    5c12:	c6 01       	movw	r24, r12
    5c14:	45 d6       	rcall	.+3210   	; 0x68a0 <fgetc>
    5c16:	ec 01       	movw	r28, r24
    5c18:	c0 97       	sbiw	r24, 0x30	; 48
    5c1a:	0a 97       	sbiw	r24, 0x0a	; 10
    5c1c:	70 f3       	brcs	.-36     	; 0x5bfa <conv_flt+0x19c>
    5c1e:	94 fe       	sbrs	r9, 4
    5c20:	03 c0       	rjmp	.+6      	; 0x5c28 <conv_flt+0x1ca>
    5c22:	b1 94       	neg	r11
    5c24:	a1 94       	neg	r10
    5c26:	b1 08       	sbc	r11, r1
    5c28:	ea 0c       	add	r14, r10
    5c2a:	fb 1c       	adc	r15, r11
    5c2c:	01 2b       	or	r16, r17
    5c2e:	29 f0       	breq	.+10     	; 0x5c3a <conv_flt+0x1dc>
    5c30:	d7 fd       	sbrc	r29, 7
    5c32:	03 c0       	rjmp	.+6      	; 0x5c3a <conv_flt+0x1dc>
    5c34:	b6 01       	movw	r22, r12
    5c36:	ce 01       	movw	r24, r28
    5c38:	d3 d6       	rcall	.+3494   	; 0x69e0 <ungetc>
    5c3a:	c3 01       	movw	r24, r6
    5c3c:	b2 01       	movw	r22, r4
    5c3e:	2e d3       	rcall	.+1628   	; 0x629c <__floatunsisf>
    5c40:	f7 fe       	sbrs	r15, 7
    5c42:	06 c0       	rjmp	.+12     	; 0x5c50 <conv_flt+0x1f2>
    5c44:	f1 94       	neg	r15
    5c46:	e1 94       	neg	r14
    5c48:	f1 08       	sbc	r15, r1
    5c4a:	c9 e7       	ldi	r28, 0x79	; 121
    5c4c:	dd e0       	ldi	r29, 0x0D	; 13
    5c4e:	02 c0       	rjmp	.+4      	; 0x5c54 <conv_flt+0x1f6>
    5c50:	c1 e9       	ldi	r28, 0x91	; 145
    5c52:	dd e0       	ldi	r29, 0x0D	; 13
    5c54:	6e 01       	movw	r12, r28
    5c56:	28 e1       	ldi	r18, 0x18	; 24
    5c58:	c2 1a       	sub	r12, r18
    5c5a:	d1 08       	sbc	r13, r1
    5c5c:	00 e2       	ldi	r16, 0x20	; 32
    5c5e:	10 e0       	ldi	r17, 0x00	; 0
    5c60:	e0 16       	cp	r14, r16
    5c62:	f1 06       	cpc	r15, r17
    5c64:	48 f0       	brcs	.+18     	; 0x5c78 <conv_flt+0x21a>
    5c66:	fe 01       	movw	r30, r28
    5c68:	25 91       	lpm	r18, Z+
    5c6a:	35 91       	lpm	r19, Z+
    5c6c:	45 91       	lpm	r20, Z+
    5c6e:	54 91       	lpm	r21, Z
    5c70:	1e d4       	rcall	.+2108   	; 0x64ae <__mulsf3>
    5c72:	e0 1a       	sub	r14, r16
    5c74:	f1 0a       	sbc	r15, r17
    5c76:	f4 cf       	rjmp	.-24     	; 0x5c60 <conv_flt+0x202>
    5c78:	24 97       	sbiw	r28, 0x04	; 4
    5c7a:	16 95       	lsr	r17
    5c7c:	07 95       	ror	r16
    5c7e:	cc 16       	cp	r12, r28
    5c80:	dd 06       	cpc	r13, r29
    5c82:	71 f7       	brne	.-36     	; 0x5c60 <conv_flt+0x202>
    5c84:	97 fe       	sbrs	r9, 7
    5c86:	05 c0       	rjmp	.+10     	; 0x5c92 <conv_flt+0x234>
    5c88:	dc 01       	movw	r26, r24
    5c8a:	cb 01       	movw	r24, r22
    5c8c:	b0 58       	subi	r27, 0x80	; 128
    5c8e:	bc 01       	movw	r22, r24
    5c90:	cd 01       	movw	r24, r26
    5c92:	21 14       	cp	r2, r1
    5c94:	31 04       	cpc	r3, r1
    5c96:	29 f0       	breq	.+10     	; 0x5ca2 <conv_flt+0x244>
    5c98:	f1 01       	movw	r30, r2
    5c9a:	60 83       	st	Z, r22
    5c9c:	71 83       	std	Z+1, r23	; 0x01
    5c9e:	82 83       	std	Z+2, r24	; 0x02
    5ca0:	93 83       	std	Z+3, r25	; 0x03
    5ca2:	81 e0       	ldi	r24, 0x01	; 1
    5ca4:	df 91       	pop	r29
    5ca6:	cf 91       	pop	r28
    5ca8:	1f 91       	pop	r17
    5caa:	0f 91       	pop	r16
    5cac:	ff 90       	pop	r15
    5cae:	ef 90       	pop	r14
    5cb0:	df 90       	pop	r13
    5cb2:	cf 90       	pop	r12
    5cb4:	bf 90       	pop	r11
    5cb6:	af 90       	pop	r10
    5cb8:	9f 90       	pop	r9
    5cba:	7f 90       	pop	r7
    5cbc:	6f 90       	pop	r6
    5cbe:	5f 90       	pop	r5
    5cc0:	4f 90       	pop	r4
    5cc2:	3f 90       	pop	r3
    5cc4:	2f 90       	pop	r2
    5cc6:	08 95       	ret

00005cc8 <vfscanf>:
    5cc8:	a0 e0       	ldi	r26, 0x00	; 0
    5cca:	b0 e0       	ldi	r27, 0x00	; 0
    5ccc:	e9 e6       	ldi	r30, 0x69	; 105
    5cce:	fe e2       	ldi	r31, 0x2E	; 46
    5cd0:	a1 c1       	rjmp	.+834    	; 0x6014 <__prologue_saves__+0x8>
    5cd2:	5c 01       	movw	r10, r24
    5cd4:	eb 01       	movw	r28, r22
    5cd6:	4a 01       	movw	r8, r20
    5cd8:	fc 01       	movw	r30, r24
    5cda:	17 82       	std	Z+7, r1	; 0x07
    5cdc:	16 82       	std	Z+6, r1	; 0x06
    5cde:	61 2c       	mov	r6, r1
    5ce0:	f5 01       	movw	r30, r10
    5ce2:	03 81       	ldd	r16, Z+3	; 0x03
    5ce4:	fe 01       	movw	r30, r28
    5ce6:	03 fd       	sbrc	r16, 3
    5ce8:	85 91       	lpm	r24, Z+
    5cea:	03 ff       	sbrs	r16, 3
    5cec:	81 91       	ld	r24, Z+
    5cee:	18 2f       	mov	r17, r24
    5cf0:	ef 01       	movw	r28, r30
    5cf2:	88 23       	and	r24, r24
    5cf4:	09 f4       	brne	.+2      	; 0x5cf8 <vfscanf+0x30>
    5cf6:	00 c1       	rjmp	.+512    	; 0x5ef8 <vfscanf+0x230>
    5cf8:	90 e0       	ldi	r25, 0x00	; 0
    5cfa:	93 d5       	rcall	.+2854   	; 0x6822 <isspace>
    5cfc:	89 2b       	or	r24, r25
    5cfe:	19 f0       	breq	.+6      	; 0x5d06 <vfscanf+0x3e>
    5d00:	c5 01       	movw	r24, r10
    5d02:	51 dd       	rcall	.-1374   	; 0x57a6 <skip_spaces>
    5d04:	ed cf       	rjmp	.-38     	; 0x5ce0 <vfscanf+0x18>
    5d06:	15 32       	cpi	r17, 0x25	; 37
    5d08:	41 f4       	brne	.+16     	; 0x5d1a <vfscanf+0x52>
    5d0a:	fe 01       	movw	r30, r28
    5d0c:	03 fd       	sbrc	r16, 3
    5d0e:	15 91       	lpm	r17, Z+
    5d10:	03 ff       	sbrs	r16, 3
    5d12:	11 91       	ld	r17, Z+
    5d14:	ef 01       	movw	r28, r30
    5d16:	15 32       	cpi	r17, 0x25	; 37
    5d18:	71 f4       	brne	.+28     	; 0x5d36 <vfscanf+0x6e>
    5d1a:	c5 01       	movw	r24, r10
    5d1c:	c1 d5       	rcall	.+2946   	; 0x68a0 <fgetc>
    5d1e:	97 fd       	sbrc	r25, 7
    5d20:	e9 c0       	rjmp	.+466    	; 0x5ef4 <vfscanf+0x22c>
    5d22:	41 2f       	mov	r20, r17
    5d24:	50 e0       	ldi	r21, 0x00	; 0
    5d26:	9c 01       	movw	r18, r24
    5d28:	33 27       	eor	r19, r19
    5d2a:	24 17       	cp	r18, r20
    5d2c:	35 07       	cpc	r19, r21
    5d2e:	c1 f2       	breq	.-80     	; 0x5ce0 <vfscanf+0x18>
    5d30:	b5 01       	movw	r22, r10
    5d32:	56 d6       	rcall	.+3244   	; 0x69e0 <ungetc>
    5d34:	e1 c0       	rjmp	.+450    	; 0x5ef8 <vfscanf+0x230>
    5d36:	1a 32       	cpi	r17, 0x2A	; 42
    5d38:	41 f4       	brne	.+16     	; 0x5d4a <vfscanf+0x82>
    5d3a:	03 fd       	sbrc	r16, 3
    5d3c:	15 91       	lpm	r17, Z+
    5d3e:	03 ff       	sbrs	r16, 3
    5d40:	11 91       	ld	r17, Z+
    5d42:	ef 01       	movw	r28, r30
    5d44:	77 24       	eor	r7, r7
    5d46:	73 94       	inc	r7
    5d48:	01 c0       	rjmp	.+2      	; 0x5d4c <vfscanf+0x84>
    5d4a:	71 2c       	mov	r7, r1
    5d4c:	e1 2c       	mov	r14, r1
    5d4e:	f1 2c       	mov	r15, r1
    5d50:	20 ed       	ldi	r18, 0xD0	; 208
    5d52:	21 0f       	add	r18, r17
    5d54:	2a 30       	cpi	r18, 0x0A	; 10
    5d56:	80 f4       	brcc	.+32     	; 0x5d78 <vfscanf+0xb0>
    5d58:	f7 2d       	mov	r31, r7
    5d5a:	f2 60       	ori	r31, 0x02	; 2
    5d5c:	7f 2e       	mov	r7, r31
    5d5e:	b7 01       	movw	r22, r14
    5d60:	80 e0       	ldi	r24, 0x00	; 0
    5d62:	90 e0       	ldi	r25, 0x00	; 0
    5d64:	40 e2       	ldi	r20, 0x20	; 32
    5d66:	f8 dc       	rcall	.-1552   	; 0x5758 <mulacc>
    5d68:	7b 01       	movw	r14, r22
    5d6a:	fe 01       	movw	r30, r28
    5d6c:	03 fd       	sbrc	r16, 3
    5d6e:	15 91       	lpm	r17, Z+
    5d70:	03 ff       	sbrs	r16, 3
    5d72:	11 91       	ld	r17, Z+
    5d74:	ef 01       	movw	r28, r30
    5d76:	ec cf       	rjmp	.-40     	; 0x5d50 <vfscanf+0x88>
    5d78:	71 fe       	sbrs	r7, 1
    5d7a:	04 c0       	rjmp	.+8      	; 0x5d84 <vfscanf+0xbc>
    5d7c:	e1 14       	cp	r14, r1
    5d7e:	f1 04       	cpc	r15, r1
    5d80:	21 f4       	brne	.+8      	; 0x5d8a <vfscanf+0xc2>
    5d82:	ba c0       	rjmp	.+372    	; 0x5ef8 <vfscanf+0x230>
    5d84:	ee 24       	eor	r14, r14
    5d86:	ea 94       	dec	r14
    5d88:	fe 2c       	mov	r15, r14
    5d8a:	18 36       	cpi	r17, 0x68	; 104
    5d8c:	19 f0       	breq	.+6      	; 0x5d94 <vfscanf+0xcc>
    5d8e:	1c 36       	cpi	r17, 0x6C	; 108
    5d90:	61 f0       	breq	.+24     	; 0x5daa <vfscanf+0xe2>
    5d92:	14 c0       	rjmp	.+40     	; 0x5dbc <vfscanf+0xf4>
    5d94:	fe 01       	movw	r30, r28
    5d96:	03 fd       	sbrc	r16, 3
    5d98:	15 91       	lpm	r17, Z+
    5d9a:	03 ff       	sbrs	r16, 3
    5d9c:	11 91       	ld	r17, Z+
    5d9e:	ef 01       	movw	r28, r30
    5da0:	18 36       	cpi	r17, 0x68	; 104
    5da2:	61 f4       	brne	.+24     	; 0x5dbc <vfscanf+0xf4>
    5da4:	87 2d       	mov	r24, r7
    5da6:	88 60       	ori	r24, 0x08	; 8
    5da8:	78 2e       	mov	r7, r24
    5daa:	97 2d       	mov	r25, r7
    5dac:	94 60       	ori	r25, 0x04	; 4
    5dae:	79 2e       	mov	r7, r25
    5db0:	fe 01       	movw	r30, r28
    5db2:	03 fd       	sbrc	r16, 3
    5db4:	15 91       	lpm	r17, Z+
    5db6:	03 ff       	sbrs	r16, 3
    5db8:	11 91       	ld	r17, Z+
    5dba:	ef 01       	movw	r28, r30
    5dbc:	11 23       	and	r17, r17
    5dbe:	09 f4       	brne	.+2      	; 0x5dc2 <vfscanf+0xfa>
    5dc0:	9b c0       	rjmp	.+310    	; 0x5ef8 <vfscanf+0x230>
    5dc2:	61 2f       	mov	r22, r17
    5dc4:	70 e0       	ldi	r23, 0x00	; 0
    5dc6:	88 e4       	ldi	r24, 0x48	; 72
    5dc8:	9d e0       	ldi	r25, 0x0D	; 13
    5dca:	3b d5       	rcall	.+2678   	; 0x6842 <strchr_P>
    5dcc:	89 2b       	or	r24, r25
    5dce:	09 f4       	brne	.+2      	; 0x5dd2 <vfscanf+0x10a>
    5dd0:	93 c0       	rjmp	.+294    	; 0x5ef8 <vfscanf+0x230>
    5dd2:	70 fc       	sbrc	r7, 0
    5dd4:	07 c0       	rjmp	.+14     	; 0x5de4 <vfscanf+0x11c>
    5dd6:	f4 01       	movw	r30, r8
    5dd8:	c0 80       	ld	r12, Z
    5dda:	d1 80       	ldd	r13, Z+1	; 0x01
    5ddc:	c4 01       	movw	r24, r8
    5dde:	02 96       	adiw	r24, 0x02	; 2
    5de0:	4c 01       	movw	r8, r24
    5de2:	02 c0       	rjmp	.+4      	; 0x5de8 <vfscanf+0x120>
    5de4:	c1 2c       	mov	r12, r1
    5de6:	d1 2c       	mov	r13, r1
    5de8:	1e 36       	cpi	r17, 0x6E	; 110
    5dea:	49 f4       	brne	.+18     	; 0x5dfe <vfscanf+0x136>
    5dec:	f5 01       	movw	r30, r10
    5dee:	46 81       	ldd	r20, Z+6	; 0x06
    5df0:	57 81       	ldd	r21, Z+7	; 0x07
    5df2:	60 e0       	ldi	r22, 0x00	; 0
    5df4:	70 e0       	ldi	r23, 0x00	; 0
    5df6:	27 2d       	mov	r18, r7
    5df8:	c6 01       	movw	r24, r12
    5dfa:	a2 dc       	rcall	.-1724   	; 0x5740 <putval>
    5dfc:	71 cf       	rjmp	.-286    	; 0x5ce0 <vfscanf+0x18>
    5dfe:	13 36       	cpi	r17, 0x63	; 99
    5e00:	b1 f4       	brne	.+44     	; 0x5e2e <vfscanf+0x166>
    5e02:	71 fc       	sbrc	r7, 1
    5e04:	03 c0       	rjmp	.+6      	; 0x5e0c <vfscanf+0x144>
    5e06:	ee 24       	eor	r14, r14
    5e08:	e3 94       	inc	r14
    5e0a:	f1 2c       	mov	r15, r1
    5e0c:	c5 01       	movw	r24, r10
    5e0e:	48 d5       	rcall	.+2704   	; 0x68a0 <fgetc>
    5e10:	97 fd       	sbrc	r25, 7
    5e12:	70 c0       	rjmp	.+224    	; 0x5ef4 <vfscanf+0x22c>
    5e14:	c1 14       	cp	r12, r1
    5e16:	d1 04       	cpc	r13, r1
    5e18:	29 f0       	breq	.+10     	; 0x5e24 <vfscanf+0x15c>
    5e1a:	f6 01       	movw	r30, r12
    5e1c:	80 83       	st	Z, r24
    5e1e:	c6 01       	movw	r24, r12
    5e20:	01 96       	adiw	r24, 0x01	; 1
    5e22:	6c 01       	movw	r12, r24
    5e24:	91 e0       	ldi	r25, 0x01	; 1
    5e26:	e9 1a       	sub	r14, r25
    5e28:	f1 08       	sbc	r15, r1
    5e2a:	81 f7       	brne	.-32     	; 0x5e0c <vfscanf+0x144>
    5e2c:	5f c0       	rjmp	.+190    	; 0x5eec <vfscanf+0x224>
    5e2e:	1b 35       	cpi	r17, 0x5B	; 91
    5e30:	51 f4       	brne	.+20     	; 0x5e46 <vfscanf+0x17e>
    5e32:	9e 01       	movw	r18, r28
    5e34:	a6 01       	movw	r20, r12
    5e36:	b7 01       	movw	r22, r14
    5e38:	c5 01       	movw	r24, r10
    5e3a:	53 dd       	rcall	.-1370   	; 0x58e2 <conv_brk>
    5e3c:	ec 01       	movw	r28, r24
    5e3e:	89 2b       	or	r24, r25
    5e40:	09 f0       	breq	.+2      	; 0x5e44 <vfscanf+0x17c>
    5e42:	54 c0       	rjmp	.+168    	; 0x5eec <vfscanf+0x224>
    5e44:	4e c0       	rjmp	.+156    	; 0x5ee2 <vfscanf+0x21a>
    5e46:	c5 01       	movw	r24, r10
    5e48:	ae dc       	rcall	.-1700   	; 0x57a6 <skip_spaces>
    5e4a:	97 fd       	sbrc	r25, 7
    5e4c:	53 c0       	rjmp	.+166    	; 0x5ef4 <vfscanf+0x22c>
    5e4e:	1f 36       	cpi	r17, 0x6F	; 111
    5e50:	c9 f1       	breq	.+114    	; 0x5ec4 <vfscanf+0x1fc>
    5e52:	40 f4       	brcc	.+16     	; 0x5e64 <vfscanf+0x19c>
    5e54:	14 36       	cpi	r17, 0x64	; 100
    5e56:	91 f1       	breq	.+100    	; 0x5ebc <vfscanf+0x1f4>
    5e58:	19 36       	cpi	r17, 0x69	; 105
    5e5a:	b9 f1       	breq	.+110    	; 0x5eca <vfscanf+0x202>
    5e5c:	18 35       	cpi	r17, 0x58	; 88
    5e5e:	09 f0       	breq	.+2      	; 0x5e62 <vfscanf+0x19a>
    5e60:	3a c0       	rjmp	.+116    	; 0x5ed6 <vfscanf+0x20e>
    5e62:	28 c0       	rjmp	.+80     	; 0x5eb4 <vfscanf+0x1ec>
    5e64:	13 37       	cpi	r17, 0x73	; 115
    5e66:	a9 f0       	breq	.+42     	; 0x5e92 <vfscanf+0x1ca>
    5e68:	18 f4       	brcc	.+6      	; 0x5e70 <vfscanf+0x1a8>
    5e6a:	10 37       	cpi	r17, 0x70	; 112
    5e6c:	19 f1       	breq	.+70     	; 0x5eb4 <vfscanf+0x1ec>
    5e6e:	33 c0       	rjmp	.+102    	; 0x5ed6 <vfscanf+0x20e>
    5e70:	15 37       	cpi	r17, 0x75	; 117
    5e72:	21 f1       	breq	.+72     	; 0x5ebc <vfscanf+0x1f4>
    5e74:	18 37       	cpi	r17, 0x78	; 120
    5e76:	f1 f0       	breq	.+60     	; 0x5eb4 <vfscanf+0x1ec>
    5e78:	2e c0       	rjmp	.+92     	; 0x5ed6 <vfscanf+0x20e>
    5e7a:	c1 14       	cp	r12, r1
    5e7c:	d1 04       	cpc	r13, r1
    5e7e:	29 f0       	breq	.+10     	; 0x5e8a <vfscanf+0x1c2>
    5e80:	f6 01       	movw	r30, r12
    5e82:	00 83       	st	Z, r16
    5e84:	c6 01       	movw	r24, r12
    5e86:	01 96       	adiw	r24, 0x01	; 1
    5e88:	6c 01       	movw	r12, r24
    5e8a:	91 e0       	ldi	r25, 0x01	; 1
    5e8c:	e9 1a       	sub	r14, r25
    5e8e:	f1 08       	sbc	r15, r1
    5e90:	59 f0       	breq	.+22     	; 0x5ea8 <vfscanf+0x1e0>
    5e92:	c5 01       	movw	r24, r10
    5e94:	05 d5       	rcall	.+2570   	; 0x68a0 <fgetc>
    5e96:	8c 01       	movw	r16, r24
    5e98:	97 fd       	sbrc	r25, 7
    5e9a:	06 c0       	rjmp	.+12     	; 0x5ea8 <vfscanf+0x1e0>
    5e9c:	c2 d4       	rcall	.+2436   	; 0x6822 <isspace>
    5e9e:	89 2b       	or	r24, r25
    5ea0:	61 f3       	breq	.-40     	; 0x5e7a <vfscanf+0x1b2>
    5ea2:	b5 01       	movw	r22, r10
    5ea4:	c8 01       	movw	r24, r16
    5ea6:	9c d5       	rcall	.+2872   	; 0x69e0 <ungetc>
    5ea8:	c1 14       	cp	r12, r1
    5eaa:	d1 04       	cpc	r13, r1
    5eac:	f9 f0       	breq	.+62     	; 0x5eec <vfscanf+0x224>
    5eae:	f6 01       	movw	r30, r12
    5eb0:	10 82       	st	Z, r1
    5eb2:	1c c0       	rjmp	.+56     	; 0x5eec <vfscanf+0x224>
    5eb4:	f7 2d       	mov	r31, r7
    5eb6:	f0 64       	ori	r31, 0x40	; 64
    5eb8:	7f 2e       	mov	r7, r31
    5eba:	07 c0       	rjmp	.+14     	; 0x5eca <vfscanf+0x202>
    5ebc:	87 2d       	mov	r24, r7
    5ebe:	80 62       	ori	r24, 0x20	; 32
    5ec0:	78 2e       	mov	r7, r24
    5ec2:	03 c0       	rjmp	.+6      	; 0x5eca <vfscanf+0x202>
    5ec4:	97 2d       	mov	r25, r7
    5ec6:	90 61       	ori	r25, 0x10	; 16
    5ec8:	79 2e       	mov	r7, r25
    5eca:	27 2d       	mov	r18, r7
    5ecc:	a6 01       	movw	r20, r12
    5ece:	b7 01       	movw	r22, r14
    5ed0:	c5 01       	movw	r24, r10
    5ed2:	82 dc       	rcall	.-1788   	; 0x57d8 <conv_int>
    5ed4:	04 c0       	rjmp	.+8      	; 0x5ede <vfscanf+0x216>
    5ed6:	a6 01       	movw	r20, r12
    5ed8:	b7 01       	movw	r22, r14
    5eda:	c5 01       	movw	r24, r10
    5edc:	c0 dd       	rcall	.-1152   	; 0x5a5e <conv_flt>
    5ede:	81 11       	cpse	r24, r1
    5ee0:	05 c0       	rjmp	.+10     	; 0x5eec <vfscanf+0x224>
    5ee2:	f5 01       	movw	r30, r10
    5ee4:	83 81       	ldd	r24, Z+3	; 0x03
    5ee6:	80 73       	andi	r24, 0x30	; 48
    5ee8:	29 f4       	brne	.+10     	; 0x5ef4 <vfscanf+0x22c>
    5eea:	06 c0       	rjmp	.+12     	; 0x5ef8 <vfscanf+0x230>
    5eec:	70 fc       	sbrc	r7, 0
    5eee:	f8 ce       	rjmp	.-528    	; 0x5ce0 <vfscanf+0x18>
    5ef0:	63 94       	inc	r6
    5ef2:	f6 ce       	rjmp	.-532    	; 0x5ce0 <vfscanf+0x18>
    5ef4:	66 20       	and	r6, r6
    5ef6:	19 f0       	breq	.+6      	; 0x5efe <vfscanf+0x236>
    5ef8:	86 2d       	mov	r24, r6
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	02 c0       	rjmp	.+4      	; 0x5f02 <vfscanf+0x23a>
    5efe:	8f ef       	ldi	r24, 0xFF	; 255
    5f00:	9f ef       	ldi	r25, 0xFF	; 255
    5f02:	cd b7       	in	r28, 0x3d	; 61
    5f04:	de b7       	in	r29, 0x3e	; 62
    5f06:	ee e0       	ldi	r30, 0x0E	; 14
    5f08:	a1 c0       	rjmp	.+322    	; 0x604c <__epilogue_restores__+0x8>

00005f0a <__udivmodqi4>:
    5f0a:	99 1b       	sub	r25, r25
    5f0c:	79 e0       	ldi	r23, 0x09	; 9
    5f0e:	04 c0       	rjmp	.+8      	; 0x5f18 <__udivmodqi4_ep>

00005f10 <__udivmodqi4_loop>:
    5f10:	99 1f       	adc	r25, r25
    5f12:	96 17       	cp	r25, r22
    5f14:	08 f0       	brcs	.+2      	; 0x5f18 <__udivmodqi4_ep>
    5f16:	96 1b       	sub	r25, r22

00005f18 <__udivmodqi4_ep>:
    5f18:	88 1f       	adc	r24, r24
    5f1a:	7a 95       	dec	r23
    5f1c:	c9 f7       	brne	.-14     	; 0x5f10 <__udivmodqi4_loop>
    5f1e:	80 95       	com	r24
    5f20:	08 95       	ret

00005f22 <__udivmodhi4>:
    5f22:	aa 1b       	sub	r26, r26
    5f24:	bb 1b       	sub	r27, r27
    5f26:	51 e1       	ldi	r21, 0x11	; 17
    5f28:	07 c0       	rjmp	.+14     	; 0x5f38 <__udivmodhi4_ep>

00005f2a <__udivmodhi4_loop>:
    5f2a:	aa 1f       	adc	r26, r26
    5f2c:	bb 1f       	adc	r27, r27
    5f2e:	a6 17       	cp	r26, r22
    5f30:	b7 07       	cpc	r27, r23
    5f32:	10 f0       	brcs	.+4      	; 0x5f38 <__udivmodhi4_ep>
    5f34:	a6 1b       	sub	r26, r22
    5f36:	b7 0b       	sbc	r27, r23

00005f38 <__udivmodhi4_ep>:
    5f38:	88 1f       	adc	r24, r24
    5f3a:	99 1f       	adc	r25, r25
    5f3c:	5a 95       	dec	r21
    5f3e:	a9 f7       	brne	.-22     	; 0x5f2a <__udivmodhi4_loop>
    5f40:	80 95       	com	r24
    5f42:	90 95       	com	r25
    5f44:	bc 01       	movw	r22, r24
    5f46:	cd 01       	movw	r24, r26
    5f48:	08 95       	ret

00005f4a <__divmodhi4>:
    5f4a:	97 fb       	bst	r25, 7
    5f4c:	07 2e       	mov	r0, r23
    5f4e:	16 f4       	brtc	.+4      	; 0x5f54 <__divmodhi4+0xa>
    5f50:	00 94       	com	r0
    5f52:	06 d0       	rcall	.+12     	; 0x5f60 <__divmodhi4_neg1>
    5f54:	77 fd       	sbrc	r23, 7
    5f56:	08 d0       	rcall	.+16     	; 0x5f68 <__divmodhi4_neg2>
    5f58:	e4 df       	rcall	.-56     	; 0x5f22 <__udivmodhi4>
    5f5a:	07 fc       	sbrc	r0, 7
    5f5c:	05 d0       	rcall	.+10     	; 0x5f68 <__divmodhi4_neg2>
    5f5e:	3e f4       	brtc	.+14     	; 0x5f6e <__divmodhi4_exit>

00005f60 <__divmodhi4_neg1>:
    5f60:	90 95       	com	r25
    5f62:	81 95       	neg	r24
    5f64:	9f 4f       	sbci	r25, 0xFF	; 255
    5f66:	08 95       	ret

00005f68 <__divmodhi4_neg2>:
    5f68:	70 95       	com	r23
    5f6a:	61 95       	neg	r22
    5f6c:	7f 4f       	sbci	r23, 0xFF	; 255

00005f6e <__divmodhi4_exit>:
    5f6e:	08 95       	ret

00005f70 <__udivmodsi4>:
    5f70:	a1 e2       	ldi	r26, 0x21	; 33
    5f72:	1a 2e       	mov	r1, r26
    5f74:	aa 1b       	sub	r26, r26
    5f76:	bb 1b       	sub	r27, r27
    5f78:	fd 01       	movw	r30, r26
    5f7a:	0d c0       	rjmp	.+26     	; 0x5f96 <__udivmodsi4_ep>

00005f7c <__udivmodsi4_loop>:
    5f7c:	aa 1f       	adc	r26, r26
    5f7e:	bb 1f       	adc	r27, r27
    5f80:	ee 1f       	adc	r30, r30
    5f82:	ff 1f       	adc	r31, r31
    5f84:	a2 17       	cp	r26, r18
    5f86:	b3 07       	cpc	r27, r19
    5f88:	e4 07       	cpc	r30, r20
    5f8a:	f5 07       	cpc	r31, r21
    5f8c:	20 f0       	brcs	.+8      	; 0x5f96 <__udivmodsi4_ep>
    5f8e:	a2 1b       	sub	r26, r18
    5f90:	b3 0b       	sbc	r27, r19
    5f92:	e4 0b       	sbc	r30, r20
    5f94:	f5 0b       	sbc	r31, r21

00005f96 <__udivmodsi4_ep>:
    5f96:	66 1f       	adc	r22, r22
    5f98:	77 1f       	adc	r23, r23
    5f9a:	88 1f       	adc	r24, r24
    5f9c:	99 1f       	adc	r25, r25
    5f9e:	1a 94       	dec	r1
    5fa0:	69 f7       	brne	.-38     	; 0x5f7c <__udivmodsi4_loop>
    5fa2:	60 95       	com	r22
    5fa4:	70 95       	com	r23
    5fa6:	80 95       	com	r24
    5fa8:	90 95       	com	r25
    5faa:	9b 01       	movw	r18, r22
    5fac:	ac 01       	movw	r20, r24
    5fae:	bd 01       	movw	r22, r26
    5fb0:	cf 01       	movw	r24, r30
    5fb2:	08 95       	ret

00005fb4 <__divmodsi4>:
    5fb4:	05 2e       	mov	r0, r21
    5fb6:	97 fb       	bst	r25, 7
    5fb8:	16 f4       	brtc	.+4      	; 0x5fbe <__divmodsi4+0xa>
    5fba:	00 94       	com	r0
    5fbc:	0f d0       	rcall	.+30     	; 0x5fdc <__negsi2>
    5fbe:	57 fd       	sbrc	r21, 7
    5fc0:	05 d0       	rcall	.+10     	; 0x5fcc <__divmodsi4_neg2>
    5fc2:	d6 df       	rcall	.-84     	; 0x5f70 <__udivmodsi4>
    5fc4:	07 fc       	sbrc	r0, 7
    5fc6:	02 d0       	rcall	.+4      	; 0x5fcc <__divmodsi4_neg2>
    5fc8:	46 f4       	brtc	.+16     	; 0x5fda <__divmodsi4_exit>
    5fca:	08 c0       	rjmp	.+16     	; 0x5fdc <__negsi2>

00005fcc <__divmodsi4_neg2>:
    5fcc:	50 95       	com	r21
    5fce:	40 95       	com	r20
    5fd0:	30 95       	com	r19
    5fd2:	21 95       	neg	r18
    5fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd6:	4f 4f       	sbci	r20, 0xFF	; 255
    5fd8:	5f 4f       	sbci	r21, 0xFF	; 255

00005fda <__divmodsi4_exit>:
    5fda:	08 95       	ret

00005fdc <__negsi2>:
    5fdc:	90 95       	com	r25
    5fde:	80 95       	com	r24
    5fe0:	70 95       	com	r23
    5fe2:	61 95       	neg	r22
    5fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    5fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    5fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    5fea:	08 95       	ret

00005fec <__tablejump2__>:
    5fec:	ee 0f       	add	r30, r30
    5fee:	ff 1f       	adc	r31, r31
    5ff0:	05 90       	lpm	r0, Z+
    5ff2:	f4 91       	lpm	r31, Z
    5ff4:	e0 2d       	mov	r30, r0
    5ff6:	09 94       	ijmp

00005ff8 <__muluhisi3>:
    5ff8:	40 d0       	rcall	.+128    	; 0x607a <__umulhisi3>
    5ffa:	a5 9f       	mul	r26, r21
    5ffc:	90 0d       	add	r25, r0
    5ffe:	b4 9f       	mul	r27, r20
    6000:	90 0d       	add	r25, r0
    6002:	a4 9f       	mul	r26, r20
    6004:	80 0d       	add	r24, r0
    6006:	91 1d       	adc	r25, r1
    6008:	11 24       	eor	r1, r1
    600a:	08 95       	ret

0000600c <__prologue_saves__>:
    600c:	2f 92       	push	r2
    600e:	3f 92       	push	r3
    6010:	4f 92       	push	r4
    6012:	5f 92       	push	r5
    6014:	6f 92       	push	r6
    6016:	7f 92       	push	r7
    6018:	8f 92       	push	r8
    601a:	9f 92       	push	r9
    601c:	af 92       	push	r10
    601e:	bf 92       	push	r11
    6020:	cf 92       	push	r12
    6022:	df 92       	push	r13
    6024:	ef 92       	push	r14
    6026:	ff 92       	push	r15
    6028:	0f 93       	push	r16
    602a:	1f 93       	push	r17
    602c:	cf 93       	push	r28
    602e:	df 93       	push	r29
    6030:	cd b7       	in	r28, 0x3d	; 61
    6032:	de b7       	in	r29, 0x3e	; 62
    6034:	ca 1b       	sub	r28, r26
    6036:	db 0b       	sbc	r29, r27
    6038:	0f b6       	in	r0, 0x3f	; 63
    603a:	f8 94       	cli
    603c:	de bf       	out	0x3e, r29	; 62
    603e:	0f be       	out	0x3f, r0	; 63
    6040:	cd bf       	out	0x3d, r28	; 61
    6042:	09 94       	ijmp

00006044 <__epilogue_restores__>:
    6044:	2a 88       	ldd	r2, Y+18	; 0x12
    6046:	39 88       	ldd	r3, Y+17	; 0x11
    6048:	48 88       	ldd	r4, Y+16	; 0x10
    604a:	5f 84       	ldd	r5, Y+15	; 0x0f
    604c:	6e 84       	ldd	r6, Y+14	; 0x0e
    604e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6050:	8c 84       	ldd	r8, Y+12	; 0x0c
    6052:	9b 84       	ldd	r9, Y+11	; 0x0b
    6054:	aa 84       	ldd	r10, Y+10	; 0x0a
    6056:	b9 84       	ldd	r11, Y+9	; 0x09
    6058:	c8 84       	ldd	r12, Y+8	; 0x08
    605a:	df 80       	ldd	r13, Y+7	; 0x07
    605c:	ee 80       	ldd	r14, Y+6	; 0x06
    605e:	fd 80       	ldd	r15, Y+5	; 0x05
    6060:	0c 81       	ldd	r16, Y+4	; 0x04
    6062:	1b 81       	ldd	r17, Y+3	; 0x03
    6064:	aa 81       	ldd	r26, Y+2	; 0x02
    6066:	b9 81       	ldd	r27, Y+1	; 0x01
    6068:	ce 0f       	add	r28, r30
    606a:	d1 1d       	adc	r29, r1
    606c:	0f b6       	in	r0, 0x3f	; 63
    606e:	f8 94       	cli
    6070:	de bf       	out	0x3e, r29	; 62
    6072:	0f be       	out	0x3f, r0	; 63
    6074:	cd bf       	out	0x3d, r28	; 61
    6076:	ed 01       	movw	r28, r26
    6078:	08 95       	ret

0000607a <__umulhisi3>:
    607a:	a2 9f       	mul	r26, r18
    607c:	b0 01       	movw	r22, r0
    607e:	b3 9f       	mul	r27, r19
    6080:	c0 01       	movw	r24, r0
    6082:	a3 9f       	mul	r26, r19
    6084:	70 0d       	add	r23, r0
    6086:	81 1d       	adc	r24, r1
    6088:	11 24       	eor	r1, r1
    608a:	91 1d       	adc	r25, r1
    608c:	b2 9f       	mul	r27, r18
    608e:	70 0d       	add	r23, r0
    6090:	81 1d       	adc	r24, r1
    6092:	11 24       	eor	r1, r1
    6094:	91 1d       	adc	r25, r1
    6096:	08 95       	ret

00006098 <__subsf3>:
    6098:	50 58       	subi	r21, 0x80	; 128

0000609a <__addsf3>:
    609a:	bb 27       	eor	r27, r27
    609c:	aa 27       	eor	r26, r26
    609e:	0e d0       	rcall	.+28     	; 0x60bc <__addsf3x>
    60a0:	b1 c1       	rjmp	.+866    	; 0x6404 <__fp_round>
    60a2:	a2 d1       	rcall	.+836    	; 0x63e8 <__fp_pscA>
    60a4:	30 f0       	brcs	.+12     	; 0x60b2 <__addsf3+0x18>
    60a6:	a7 d1       	rcall	.+846    	; 0x63f6 <__fp_pscB>
    60a8:	20 f0       	brcs	.+8      	; 0x60b2 <__addsf3+0x18>
    60aa:	31 f4       	brne	.+12     	; 0x60b8 <__addsf3+0x1e>
    60ac:	9f 3f       	cpi	r25, 0xFF	; 255
    60ae:	11 f4       	brne	.+4      	; 0x60b4 <__addsf3+0x1a>
    60b0:	1e f4       	brtc	.+6      	; 0x60b8 <__addsf3+0x1e>
    60b2:	97 c1       	rjmp	.+814    	; 0x63e2 <__fp_nan>
    60b4:	0e f4       	brtc	.+2      	; 0x60b8 <__addsf3+0x1e>
    60b6:	e0 95       	com	r30
    60b8:	e7 fb       	bst	r30, 7
    60ba:	64 c1       	rjmp	.+712    	; 0x6384 <__fp_inf>

000060bc <__addsf3x>:
    60bc:	e9 2f       	mov	r30, r25
    60be:	b3 d1       	rcall	.+870    	; 0x6426 <__fp_split3>
    60c0:	80 f3       	brcs	.-32     	; 0x60a2 <__addsf3+0x8>
    60c2:	ba 17       	cp	r27, r26
    60c4:	62 07       	cpc	r22, r18
    60c6:	73 07       	cpc	r23, r19
    60c8:	84 07       	cpc	r24, r20
    60ca:	95 07       	cpc	r25, r21
    60cc:	18 f0       	brcs	.+6      	; 0x60d4 <__addsf3x+0x18>
    60ce:	71 f4       	brne	.+28     	; 0x60ec <__addsf3x+0x30>
    60d0:	9e f5       	brtc	.+102    	; 0x6138 <__addsf3x+0x7c>
    60d2:	e2 c1       	rjmp	.+964    	; 0x6498 <__fp_zero>
    60d4:	0e f4       	brtc	.+2      	; 0x60d8 <__addsf3x+0x1c>
    60d6:	e0 95       	com	r30
    60d8:	0b 2e       	mov	r0, r27
    60da:	ba 2f       	mov	r27, r26
    60dc:	a0 2d       	mov	r26, r0
    60de:	0b 01       	movw	r0, r22
    60e0:	b9 01       	movw	r22, r18
    60e2:	90 01       	movw	r18, r0
    60e4:	0c 01       	movw	r0, r24
    60e6:	ca 01       	movw	r24, r20
    60e8:	a0 01       	movw	r20, r0
    60ea:	11 24       	eor	r1, r1
    60ec:	ff 27       	eor	r31, r31
    60ee:	59 1b       	sub	r21, r25
    60f0:	99 f0       	breq	.+38     	; 0x6118 <__addsf3x+0x5c>
    60f2:	59 3f       	cpi	r21, 0xF9	; 249
    60f4:	50 f4       	brcc	.+20     	; 0x610a <__addsf3x+0x4e>
    60f6:	50 3e       	cpi	r21, 0xE0	; 224
    60f8:	68 f1       	brcs	.+90     	; 0x6154 <__addsf3x+0x98>
    60fa:	1a 16       	cp	r1, r26
    60fc:	f0 40       	sbci	r31, 0x00	; 0
    60fe:	a2 2f       	mov	r26, r18
    6100:	23 2f       	mov	r18, r19
    6102:	34 2f       	mov	r19, r20
    6104:	44 27       	eor	r20, r20
    6106:	58 5f       	subi	r21, 0xF8	; 248
    6108:	f3 cf       	rjmp	.-26     	; 0x60f0 <__addsf3x+0x34>
    610a:	46 95       	lsr	r20
    610c:	37 95       	ror	r19
    610e:	27 95       	ror	r18
    6110:	a7 95       	ror	r26
    6112:	f0 40       	sbci	r31, 0x00	; 0
    6114:	53 95       	inc	r21
    6116:	c9 f7       	brne	.-14     	; 0x610a <__addsf3x+0x4e>
    6118:	7e f4       	brtc	.+30     	; 0x6138 <__addsf3x+0x7c>
    611a:	1f 16       	cp	r1, r31
    611c:	ba 0b       	sbc	r27, r26
    611e:	62 0b       	sbc	r22, r18
    6120:	73 0b       	sbc	r23, r19
    6122:	84 0b       	sbc	r24, r20
    6124:	ba f0       	brmi	.+46     	; 0x6154 <__addsf3x+0x98>
    6126:	91 50       	subi	r25, 0x01	; 1
    6128:	a1 f0       	breq	.+40     	; 0x6152 <__addsf3x+0x96>
    612a:	ff 0f       	add	r31, r31
    612c:	bb 1f       	adc	r27, r27
    612e:	66 1f       	adc	r22, r22
    6130:	77 1f       	adc	r23, r23
    6132:	88 1f       	adc	r24, r24
    6134:	c2 f7       	brpl	.-16     	; 0x6126 <__addsf3x+0x6a>
    6136:	0e c0       	rjmp	.+28     	; 0x6154 <__addsf3x+0x98>
    6138:	ba 0f       	add	r27, r26
    613a:	62 1f       	adc	r22, r18
    613c:	73 1f       	adc	r23, r19
    613e:	84 1f       	adc	r24, r20
    6140:	48 f4       	brcc	.+18     	; 0x6154 <__addsf3x+0x98>
    6142:	87 95       	ror	r24
    6144:	77 95       	ror	r23
    6146:	67 95       	ror	r22
    6148:	b7 95       	ror	r27
    614a:	f7 95       	ror	r31
    614c:	9e 3f       	cpi	r25, 0xFE	; 254
    614e:	08 f0       	brcs	.+2      	; 0x6152 <__addsf3x+0x96>
    6150:	b3 cf       	rjmp	.-154    	; 0x60b8 <__addsf3+0x1e>
    6152:	93 95       	inc	r25
    6154:	88 0f       	add	r24, r24
    6156:	08 f0       	brcs	.+2      	; 0x615a <__addsf3x+0x9e>
    6158:	99 27       	eor	r25, r25
    615a:	ee 0f       	add	r30, r30
    615c:	97 95       	ror	r25
    615e:	87 95       	ror	r24
    6160:	08 95       	ret

00006162 <__cmpsf2>:
    6162:	ec d0       	rcall	.+472    	; 0x633c <__fp_cmp>
    6164:	08 f4       	brcc	.+2      	; 0x6168 <__cmpsf2+0x6>
    6166:	81 e0       	ldi	r24, 0x01	; 1
    6168:	08 95       	ret

0000616a <__divsf3>:
    616a:	0c d0       	rcall	.+24     	; 0x6184 <__divsf3x>
    616c:	4b c1       	rjmp	.+662    	; 0x6404 <__fp_round>
    616e:	43 d1       	rcall	.+646    	; 0x63f6 <__fp_pscB>
    6170:	40 f0       	brcs	.+16     	; 0x6182 <__divsf3+0x18>
    6172:	3a d1       	rcall	.+628    	; 0x63e8 <__fp_pscA>
    6174:	30 f0       	brcs	.+12     	; 0x6182 <__divsf3+0x18>
    6176:	21 f4       	brne	.+8      	; 0x6180 <__divsf3+0x16>
    6178:	5f 3f       	cpi	r21, 0xFF	; 255
    617a:	19 f0       	breq	.+6      	; 0x6182 <__divsf3+0x18>
    617c:	03 c1       	rjmp	.+518    	; 0x6384 <__fp_inf>
    617e:	51 11       	cpse	r21, r1
    6180:	8c c1       	rjmp	.+792    	; 0x649a <__fp_szero>
    6182:	2f c1       	rjmp	.+606    	; 0x63e2 <__fp_nan>

00006184 <__divsf3x>:
    6184:	50 d1       	rcall	.+672    	; 0x6426 <__fp_split3>
    6186:	98 f3       	brcs	.-26     	; 0x616e <__divsf3+0x4>

00006188 <__divsf3_pse>:
    6188:	99 23       	and	r25, r25
    618a:	c9 f3       	breq	.-14     	; 0x617e <__divsf3+0x14>
    618c:	55 23       	and	r21, r21
    618e:	b1 f3       	breq	.-20     	; 0x617c <__divsf3+0x12>
    6190:	95 1b       	sub	r25, r21
    6192:	55 0b       	sbc	r21, r21
    6194:	bb 27       	eor	r27, r27
    6196:	aa 27       	eor	r26, r26
    6198:	62 17       	cp	r22, r18
    619a:	73 07       	cpc	r23, r19
    619c:	84 07       	cpc	r24, r20
    619e:	38 f0       	brcs	.+14     	; 0x61ae <__divsf3_pse+0x26>
    61a0:	9f 5f       	subi	r25, 0xFF	; 255
    61a2:	5f 4f       	sbci	r21, 0xFF	; 255
    61a4:	22 0f       	add	r18, r18
    61a6:	33 1f       	adc	r19, r19
    61a8:	44 1f       	adc	r20, r20
    61aa:	aa 1f       	adc	r26, r26
    61ac:	a9 f3       	breq	.-22     	; 0x6198 <__divsf3_pse+0x10>
    61ae:	33 d0       	rcall	.+102    	; 0x6216 <__divsf3_pse+0x8e>
    61b0:	0e 2e       	mov	r0, r30
    61b2:	3a f0       	brmi	.+14     	; 0x61c2 <__divsf3_pse+0x3a>
    61b4:	e0 e8       	ldi	r30, 0x80	; 128
    61b6:	30 d0       	rcall	.+96     	; 0x6218 <__divsf3_pse+0x90>
    61b8:	91 50       	subi	r25, 0x01	; 1
    61ba:	50 40       	sbci	r21, 0x00	; 0
    61bc:	e6 95       	lsr	r30
    61be:	00 1c       	adc	r0, r0
    61c0:	ca f7       	brpl	.-14     	; 0x61b4 <__divsf3_pse+0x2c>
    61c2:	29 d0       	rcall	.+82     	; 0x6216 <__divsf3_pse+0x8e>
    61c4:	fe 2f       	mov	r31, r30
    61c6:	27 d0       	rcall	.+78     	; 0x6216 <__divsf3_pse+0x8e>
    61c8:	66 0f       	add	r22, r22
    61ca:	77 1f       	adc	r23, r23
    61cc:	88 1f       	adc	r24, r24
    61ce:	bb 1f       	adc	r27, r27
    61d0:	26 17       	cp	r18, r22
    61d2:	37 07       	cpc	r19, r23
    61d4:	48 07       	cpc	r20, r24
    61d6:	ab 07       	cpc	r26, r27
    61d8:	b0 e8       	ldi	r27, 0x80	; 128
    61da:	09 f0       	breq	.+2      	; 0x61de <__divsf3_pse+0x56>
    61dc:	bb 0b       	sbc	r27, r27
    61de:	80 2d       	mov	r24, r0
    61e0:	bf 01       	movw	r22, r30
    61e2:	ff 27       	eor	r31, r31
    61e4:	93 58       	subi	r25, 0x83	; 131
    61e6:	5f 4f       	sbci	r21, 0xFF	; 255
    61e8:	2a f0       	brmi	.+10     	; 0x61f4 <__divsf3_pse+0x6c>
    61ea:	9e 3f       	cpi	r25, 0xFE	; 254
    61ec:	51 05       	cpc	r21, r1
    61ee:	68 f0       	brcs	.+26     	; 0x620a <__divsf3_pse+0x82>
    61f0:	c9 c0       	rjmp	.+402    	; 0x6384 <__fp_inf>
    61f2:	53 c1       	rjmp	.+678    	; 0x649a <__fp_szero>
    61f4:	5f 3f       	cpi	r21, 0xFF	; 255
    61f6:	ec f3       	brlt	.-6      	; 0x61f2 <__divsf3_pse+0x6a>
    61f8:	98 3e       	cpi	r25, 0xE8	; 232
    61fa:	dc f3       	brlt	.-10     	; 0x61f2 <__divsf3_pse+0x6a>
    61fc:	86 95       	lsr	r24
    61fe:	77 95       	ror	r23
    6200:	67 95       	ror	r22
    6202:	b7 95       	ror	r27
    6204:	f7 95       	ror	r31
    6206:	9f 5f       	subi	r25, 0xFF	; 255
    6208:	c9 f7       	brne	.-14     	; 0x61fc <__divsf3_pse+0x74>
    620a:	88 0f       	add	r24, r24
    620c:	91 1d       	adc	r25, r1
    620e:	96 95       	lsr	r25
    6210:	87 95       	ror	r24
    6212:	97 f9       	bld	r25, 7
    6214:	08 95       	ret
    6216:	e1 e0       	ldi	r30, 0x01	; 1
    6218:	66 0f       	add	r22, r22
    621a:	77 1f       	adc	r23, r23
    621c:	88 1f       	adc	r24, r24
    621e:	bb 1f       	adc	r27, r27
    6220:	62 17       	cp	r22, r18
    6222:	73 07       	cpc	r23, r19
    6224:	84 07       	cpc	r24, r20
    6226:	ba 07       	cpc	r27, r26
    6228:	20 f0       	brcs	.+8      	; 0x6232 <__divsf3_pse+0xaa>
    622a:	62 1b       	sub	r22, r18
    622c:	73 0b       	sbc	r23, r19
    622e:	84 0b       	sbc	r24, r20
    6230:	ba 0b       	sbc	r27, r26
    6232:	ee 1f       	adc	r30, r30
    6234:	88 f7       	brcc	.-30     	; 0x6218 <__divsf3_pse+0x90>
    6236:	e0 95       	com	r30
    6238:	08 95       	ret

0000623a <__fixsfsi>:
    623a:	04 d0       	rcall	.+8      	; 0x6244 <__fixunssfsi>
    623c:	68 94       	set
    623e:	b1 11       	cpse	r27, r1
    6240:	2c c1       	rjmp	.+600    	; 0x649a <__fp_szero>
    6242:	08 95       	ret

00006244 <__fixunssfsi>:
    6244:	f8 d0       	rcall	.+496    	; 0x6436 <__fp_splitA>
    6246:	88 f0       	brcs	.+34     	; 0x626a <__fixunssfsi+0x26>
    6248:	9f 57       	subi	r25, 0x7F	; 127
    624a:	90 f0       	brcs	.+36     	; 0x6270 <__fixunssfsi+0x2c>
    624c:	b9 2f       	mov	r27, r25
    624e:	99 27       	eor	r25, r25
    6250:	b7 51       	subi	r27, 0x17	; 23
    6252:	a0 f0       	brcs	.+40     	; 0x627c <__fixunssfsi+0x38>
    6254:	d1 f0       	breq	.+52     	; 0x628a <__fixunssfsi+0x46>
    6256:	66 0f       	add	r22, r22
    6258:	77 1f       	adc	r23, r23
    625a:	88 1f       	adc	r24, r24
    625c:	99 1f       	adc	r25, r25
    625e:	1a f0       	brmi	.+6      	; 0x6266 <__fixunssfsi+0x22>
    6260:	ba 95       	dec	r27
    6262:	c9 f7       	brne	.-14     	; 0x6256 <__fixunssfsi+0x12>
    6264:	12 c0       	rjmp	.+36     	; 0x628a <__fixunssfsi+0x46>
    6266:	b1 30       	cpi	r27, 0x01	; 1
    6268:	81 f0       	breq	.+32     	; 0x628a <__fixunssfsi+0x46>
    626a:	16 d1       	rcall	.+556    	; 0x6498 <__fp_zero>
    626c:	b1 e0       	ldi	r27, 0x01	; 1
    626e:	08 95       	ret
    6270:	13 c1       	rjmp	.+550    	; 0x6498 <__fp_zero>
    6272:	67 2f       	mov	r22, r23
    6274:	78 2f       	mov	r23, r24
    6276:	88 27       	eor	r24, r24
    6278:	b8 5f       	subi	r27, 0xF8	; 248
    627a:	39 f0       	breq	.+14     	; 0x628a <__fixunssfsi+0x46>
    627c:	b9 3f       	cpi	r27, 0xF9	; 249
    627e:	cc f3       	brlt	.-14     	; 0x6272 <__fixunssfsi+0x2e>
    6280:	86 95       	lsr	r24
    6282:	77 95       	ror	r23
    6284:	67 95       	ror	r22
    6286:	b3 95       	inc	r27
    6288:	d9 f7       	brne	.-10     	; 0x6280 <__fixunssfsi+0x3c>
    628a:	3e f4       	brtc	.+14     	; 0x629a <__fixunssfsi+0x56>
    628c:	90 95       	com	r25
    628e:	80 95       	com	r24
    6290:	70 95       	com	r23
    6292:	61 95       	neg	r22
    6294:	7f 4f       	sbci	r23, 0xFF	; 255
    6296:	8f 4f       	sbci	r24, 0xFF	; 255
    6298:	9f 4f       	sbci	r25, 0xFF	; 255
    629a:	08 95       	ret

0000629c <__floatunsisf>:
    629c:	e8 94       	clt
    629e:	09 c0       	rjmp	.+18     	; 0x62b2 <__floatsisf+0x12>

000062a0 <__floatsisf>:
    62a0:	97 fb       	bst	r25, 7
    62a2:	3e f4       	brtc	.+14     	; 0x62b2 <__floatsisf+0x12>
    62a4:	90 95       	com	r25
    62a6:	80 95       	com	r24
    62a8:	70 95       	com	r23
    62aa:	61 95       	neg	r22
    62ac:	7f 4f       	sbci	r23, 0xFF	; 255
    62ae:	8f 4f       	sbci	r24, 0xFF	; 255
    62b0:	9f 4f       	sbci	r25, 0xFF	; 255
    62b2:	99 23       	and	r25, r25
    62b4:	a9 f0       	breq	.+42     	; 0x62e0 <__floatsisf+0x40>
    62b6:	f9 2f       	mov	r31, r25
    62b8:	96 e9       	ldi	r25, 0x96	; 150
    62ba:	bb 27       	eor	r27, r27
    62bc:	93 95       	inc	r25
    62be:	f6 95       	lsr	r31
    62c0:	87 95       	ror	r24
    62c2:	77 95       	ror	r23
    62c4:	67 95       	ror	r22
    62c6:	b7 95       	ror	r27
    62c8:	f1 11       	cpse	r31, r1
    62ca:	f8 cf       	rjmp	.-16     	; 0x62bc <__floatsisf+0x1c>
    62cc:	fa f4       	brpl	.+62     	; 0x630c <__floatsisf+0x6c>
    62ce:	bb 0f       	add	r27, r27
    62d0:	11 f4       	brne	.+4      	; 0x62d6 <__floatsisf+0x36>
    62d2:	60 ff       	sbrs	r22, 0
    62d4:	1b c0       	rjmp	.+54     	; 0x630c <__floatsisf+0x6c>
    62d6:	6f 5f       	subi	r22, 0xFF	; 255
    62d8:	7f 4f       	sbci	r23, 0xFF	; 255
    62da:	8f 4f       	sbci	r24, 0xFF	; 255
    62dc:	9f 4f       	sbci	r25, 0xFF	; 255
    62de:	16 c0       	rjmp	.+44     	; 0x630c <__floatsisf+0x6c>
    62e0:	88 23       	and	r24, r24
    62e2:	11 f0       	breq	.+4      	; 0x62e8 <__floatsisf+0x48>
    62e4:	96 e9       	ldi	r25, 0x96	; 150
    62e6:	11 c0       	rjmp	.+34     	; 0x630a <__floatsisf+0x6a>
    62e8:	77 23       	and	r23, r23
    62ea:	21 f0       	breq	.+8      	; 0x62f4 <__floatsisf+0x54>
    62ec:	9e e8       	ldi	r25, 0x8E	; 142
    62ee:	87 2f       	mov	r24, r23
    62f0:	76 2f       	mov	r23, r22
    62f2:	05 c0       	rjmp	.+10     	; 0x62fe <__floatsisf+0x5e>
    62f4:	66 23       	and	r22, r22
    62f6:	71 f0       	breq	.+28     	; 0x6314 <__floatsisf+0x74>
    62f8:	96 e8       	ldi	r25, 0x86	; 134
    62fa:	86 2f       	mov	r24, r22
    62fc:	70 e0       	ldi	r23, 0x00	; 0
    62fe:	60 e0       	ldi	r22, 0x00	; 0
    6300:	2a f0       	brmi	.+10     	; 0x630c <__floatsisf+0x6c>
    6302:	9a 95       	dec	r25
    6304:	66 0f       	add	r22, r22
    6306:	77 1f       	adc	r23, r23
    6308:	88 1f       	adc	r24, r24
    630a:	da f7       	brpl	.-10     	; 0x6302 <__floatsisf+0x62>
    630c:	88 0f       	add	r24, r24
    630e:	96 95       	lsr	r25
    6310:	87 95       	ror	r24
    6312:	97 f9       	bld	r25, 7
    6314:	08 95       	ret

00006316 <floor>:
    6316:	a9 d0       	rcall	.+338    	; 0x646a <__fp_trunc>
    6318:	80 f0       	brcs	.+32     	; 0x633a <floor+0x24>
    631a:	9f 37       	cpi	r25, 0x7F	; 127
    631c:	40 f4       	brcc	.+16     	; 0x632e <floor+0x18>
    631e:	91 11       	cpse	r25, r1
    6320:	0e f0       	brts	.+2      	; 0x6324 <floor+0xe>
    6322:	bb c0       	rjmp	.+374    	; 0x649a <__fp_szero>
    6324:	60 e0       	ldi	r22, 0x00	; 0
    6326:	70 e0       	ldi	r23, 0x00	; 0
    6328:	80 e8       	ldi	r24, 0x80	; 128
    632a:	9f eb       	ldi	r25, 0xBF	; 191
    632c:	08 95       	ret
    632e:	26 f4       	brtc	.+8      	; 0x6338 <floor+0x22>
    6330:	1b 16       	cp	r1, r27
    6332:	61 1d       	adc	r22, r1
    6334:	71 1d       	adc	r23, r1
    6336:	81 1d       	adc	r24, r1
    6338:	2b c0       	rjmp	.+86     	; 0x6390 <__fp_mintl>
    633a:	45 c0       	rjmp	.+138    	; 0x63c6 <__fp_mpack>

0000633c <__fp_cmp>:
    633c:	99 0f       	add	r25, r25
    633e:	00 08       	sbc	r0, r0
    6340:	55 0f       	add	r21, r21
    6342:	aa 0b       	sbc	r26, r26
    6344:	e0 e8       	ldi	r30, 0x80	; 128
    6346:	fe ef       	ldi	r31, 0xFE	; 254
    6348:	16 16       	cp	r1, r22
    634a:	17 06       	cpc	r1, r23
    634c:	e8 07       	cpc	r30, r24
    634e:	f9 07       	cpc	r31, r25
    6350:	c0 f0       	brcs	.+48     	; 0x6382 <__fp_cmp+0x46>
    6352:	12 16       	cp	r1, r18
    6354:	13 06       	cpc	r1, r19
    6356:	e4 07       	cpc	r30, r20
    6358:	f5 07       	cpc	r31, r21
    635a:	98 f0       	brcs	.+38     	; 0x6382 <__fp_cmp+0x46>
    635c:	62 1b       	sub	r22, r18
    635e:	73 0b       	sbc	r23, r19
    6360:	84 0b       	sbc	r24, r20
    6362:	95 0b       	sbc	r25, r21
    6364:	39 f4       	brne	.+14     	; 0x6374 <__fp_cmp+0x38>
    6366:	0a 26       	eor	r0, r26
    6368:	61 f0       	breq	.+24     	; 0x6382 <__fp_cmp+0x46>
    636a:	23 2b       	or	r18, r19
    636c:	24 2b       	or	r18, r20
    636e:	25 2b       	or	r18, r21
    6370:	21 f4       	brne	.+8      	; 0x637a <__fp_cmp+0x3e>
    6372:	08 95       	ret
    6374:	0a 26       	eor	r0, r26
    6376:	09 f4       	brne	.+2      	; 0x637a <__fp_cmp+0x3e>
    6378:	a1 40       	sbci	r26, 0x01	; 1
    637a:	a6 95       	lsr	r26
    637c:	8f ef       	ldi	r24, 0xFF	; 255
    637e:	81 1d       	adc	r24, r1
    6380:	81 1d       	adc	r24, r1
    6382:	08 95       	ret

00006384 <__fp_inf>:
    6384:	97 f9       	bld	r25, 7
    6386:	9f 67       	ori	r25, 0x7F	; 127
    6388:	80 e8       	ldi	r24, 0x80	; 128
    638a:	70 e0       	ldi	r23, 0x00	; 0
    638c:	60 e0       	ldi	r22, 0x00	; 0
    638e:	08 95       	ret

00006390 <__fp_mintl>:
    6390:	88 23       	and	r24, r24
    6392:	71 f4       	brne	.+28     	; 0x63b0 <__fp_mintl+0x20>
    6394:	77 23       	and	r23, r23
    6396:	21 f0       	breq	.+8      	; 0x63a0 <__fp_mintl+0x10>
    6398:	98 50       	subi	r25, 0x08	; 8
    639a:	87 2b       	or	r24, r23
    639c:	76 2f       	mov	r23, r22
    639e:	07 c0       	rjmp	.+14     	; 0x63ae <__fp_mintl+0x1e>
    63a0:	66 23       	and	r22, r22
    63a2:	11 f4       	brne	.+4      	; 0x63a8 <__fp_mintl+0x18>
    63a4:	99 27       	eor	r25, r25
    63a6:	0d c0       	rjmp	.+26     	; 0x63c2 <__fp_mintl+0x32>
    63a8:	90 51       	subi	r25, 0x10	; 16
    63aa:	86 2b       	or	r24, r22
    63ac:	70 e0       	ldi	r23, 0x00	; 0
    63ae:	60 e0       	ldi	r22, 0x00	; 0
    63b0:	2a f0       	brmi	.+10     	; 0x63bc <__fp_mintl+0x2c>
    63b2:	9a 95       	dec	r25
    63b4:	66 0f       	add	r22, r22
    63b6:	77 1f       	adc	r23, r23
    63b8:	88 1f       	adc	r24, r24
    63ba:	da f7       	brpl	.-10     	; 0x63b2 <__fp_mintl+0x22>
    63bc:	88 0f       	add	r24, r24
    63be:	96 95       	lsr	r25
    63c0:	87 95       	ror	r24
    63c2:	97 f9       	bld	r25, 7
    63c4:	08 95       	ret

000063c6 <__fp_mpack>:
    63c6:	9f 3f       	cpi	r25, 0xFF	; 255
    63c8:	31 f0       	breq	.+12     	; 0x63d6 <__fp_mpack_finite+0xc>

000063ca <__fp_mpack_finite>:
    63ca:	91 50       	subi	r25, 0x01	; 1
    63cc:	20 f4       	brcc	.+8      	; 0x63d6 <__fp_mpack_finite+0xc>
    63ce:	87 95       	ror	r24
    63d0:	77 95       	ror	r23
    63d2:	67 95       	ror	r22
    63d4:	b7 95       	ror	r27
    63d6:	88 0f       	add	r24, r24
    63d8:	91 1d       	adc	r25, r1
    63da:	96 95       	lsr	r25
    63dc:	87 95       	ror	r24
    63de:	97 f9       	bld	r25, 7
    63e0:	08 95       	ret

000063e2 <__fp_nan>:
    63e2:	9f ef       	ldi	r25, 0xFF	; 255
    63e4:	80 ec       	ldi	r24, 0xC0	; 192
    63e6:	08 95       	ret

000063e8 <__fp_pscA>:
    63e8:	00 24       	eor	r0, r0
    63ea:	0a 94       	dec	r0
    63ec:	16 16       	cp	r1, r22
    63ee:	17 06       	cpc	r1, r23
    63f0:	18 06       	cpc	r1, r24
    63f2:	09 06       	cpc	r0, r25
    63f4:	08 95       	ret

000063f6 <__fp_pscB>:
    63f6:	00 24       	eor	r0, r0
    63f8:	0a 94       	dec	r0
    63fa:	12 16       	cp	r1, r18
    63fc:	13 06       	cpc	r1, r19
    63fe:	14 06       	cpc	r1, r20
    6400:	05 06       	cpc	r0, r21
    6402:	08 95       	ret

00006404 <__fp_round>:
    6404:	09 2e       	mov	r0, r25
    6406:	03 94       	inc	r0
    6408:	00 0c       	add	r0, r0
    640a:	11 f4       	brne	.+4      	; 0x6410 <__fp_round+0xc>
    640c:	88 23       	and	r24, r24
    640e:	52 f0       	brmi	.+20     	; 0x6424 <__fp_round+0x20>
    6410:	bb 0f       	add	r27, r27
    6412:	40 f4       	brcc	.+16     	; 0x6424 <__fp_round+0x20>
    6414:	bf 2b       	or	r27, r31
    6416:	11 f4       	brne	.+4      	; 0x641c <__fp_round+0x18>
    6418:	60 ff       	sbrs	r22, 0
    641a:	04 c0       	rjmp	.+8      	; 0x6424 <__fp_round+0x20>
    641c:	6f 5f       	subi	r22, 0xFF	; 255
    641e:	7f 4f       	sbci	r23, 0xFF	; 255
    6420:	8f 4f       	sbci	r24, 0xFF	; 255
    6422:	9f 4f       	sbci	r25, 0xFF	; 255
    6424:	08 95       	ret

00006426 <__fp_split3>:
    6426:	57 fd       	sbrc	r21, 7
    6428:	90 58       	subi	r25, 0x80	; 128
    642a:	44 0f       	add	r20, r20
    642c:	55 1f       	adc	r21, r21
    642e:	59 f0       	breq	.+22     	; 0x6446 <__fp_splitA+0x10>
    6430:	5f 3f       	cpi	r21, 0xFF	; 255
    6432:	71 f0       	breq	.+28     	; 0x6450 <__fp_splitA+0x1a>
    6434:	47 95       	ror	r20

00006436 <__fp_splitA>:
    6436:	88 0f       	add	r24, r24
    6438:	97 fb       	bst	r25, 7
    643a:	99 1f       	adc	r25, r25
    643c:	61 f0       	breq	.+24     	; 0x6456 <__fp_splitA+0x20>
    643e:	9f 3f       	cpi	r25, 0xFF	; 255
    6440:	79 f0       	breq	.+30     	; 0x6460 <__fp_splitA+0x2a>
    6442:	87 95       	ror	r24
    6444:	08 95       	ret
    6446:	12 16       	cp	r1, r18
    6448:	13 06       	cpc	r1, r19
    644a:	14 06       	cpc	r1, r20
    644c:	55 1f       	adc	r21, r21
    644e:	f2 cf       	rjmp	.-28     	; 0x6434 <__fp_split3+0xe>
    6450:	46 95       	lsr	r20
    6452:	f1 df       	rcall	.-30     	; 0x6436 <__fp_splitA>
    6454:	08 c0       	rjmp	.+16     	; 0x6466 <__fp_splitA+0x30>
    6456:	16 16       	cp	r1, r22
    6458:	17 06       	cpc	r1, r23
    645a:	18 06       	cpc	r1, r24
    645c:	99 1f       	adc	r25, r25
    645e:	f1 cf       	rjmp	.-30     	; 0x6442 <__fp_splitA+0xc>
    6460:	86 95       	lsr	r24
    6462:	71 05       	cpc	r23, r1
    6464:	61 05       	cpc	r22, r1
    6466:	08 94       	sec
    6468:	08 95       	ret

0000646a <__fp_trunc>:
    646a:	e5 df       	rcall	.-54     	; 0x6436 <__fp_splitA>
    646c:	a0 f0       	brcs	.+40     	; 0x6496 <__fp_trunc+0x2c>
    646e:	be e7       	ldi	r27, 0x7E	; 126
    6470:	b9 17       	cp	r27, r25
    6472:	88 f4       	brcc	.+34     	; 0x6496 <__fp_trunc+0x2c>
    6474:	bb 27       	eor	r27, r27
    6476:	9f 38       	cpi	r25, 0x8F	; 143
    6478:	60 f4       	brcc	.+24     	; 0x6492 <__fp_trunc+0x28>
    647a:	16 16       	cp	r1, r22
    647c:	b1 1d       	adc	r27, r1
    647e:	67 2f       	mov	r22, r23
    6480:	78 2f       	mov	r23, r24
    6482:	88 27       	eor	r24, r24
    6484:	98 5f       	subi	r25, 0xF8	; 248
    6486:	f7 cf       	rjmp	.-18     	; 0x6476 <__fp_trunc+0xc>
    6488:	86 95       	lsr	r24
    648a:	77 95       	ror	r23
    648c:	67 95       	ror	r22
    648e:	b1 1d       	adc	r27, r1
    6490:	93 95       	inc	r25
    6492:	96 39       	cpi	r25, 0x96	; 150
    6494:	c8 f3       	brcs	.-14     	; 0x6488 <__fp_trunc+0x1e>
    6496:	08 95       	ret

00006498 <__fp_zero>:
    6498:	e8 94       	clt

0000649a <__fp_szero>:
    649a:	bb 27       	eor	r27, r27
    649c:	66 27       	eor	r22, r22
    649e:	77 27       	eor	r23, r23
    64a0:	cb 01       	movw	r24, r22
    64a2:	97 f9       	bld	r25, 7
    64a4:	08 95       	ret

000064a6 <__gesf2>:
    64a6:	4a df       	rcall	.-364    	; 0x633c <__fp_cmp>
    64a8:	08 f4       	brcc	.+2      	; 0x64ac <__gesf2+0x6>
    64aa:	8f ef       	ldi	r24, 0xFF	; 255
    64ac:	08 95       	ret

000064ae <__mulsf3>:
    64ae:	0b d0       	rcall	.+22     	; 0x64c6 <__mulsf3x>
    64b0:	a9 cf       	rjmp	.-174    	; 0x6404 <__fp_round>
    64b2:	9a df       	rcall	.-204    	; 0x63e8 <__fp_pscA>
    64b4:	28 f0       	brcs	.+10     	; 0x64c0 <__mulsf3+0x12>
    64b6:	9f df       	rcall	.-194    	; 0x63f6 <__fp_pscB>
    64b8:	18 f0       	brcs	.+6      	; 0x64c0 <__mulsf3+0x12>
    64ba:	95 23       	and	r25, r21
    64bc:	09 f0       	breq	.+2      	; 0x64c0 <__mulsf3+0x12>
    64be:	62 cf       	rjmp	.-316    	; 0x6384 <__fp_inf>
    64c0:	90 cf       	rjmp	.-224    	; 0x63e2 <__fp_nan>
    64c2:	11 24       	eor	r1, r1
    64c4:	ea cf       	rjmp	.-44     	; 0x649a <__fp_szero>

000064c6 <__mulsf3x>:
    64c6:	af df       	rcall	.-162    	; 0x6426 <__fp_split3>
    64c8:	a0 f3       	brcs	.-24     	; 0x64b2 <__mulsf3+0x4>

000064ca <__mulsf3_pse>:
    64ca:	95 9f       	mul	r25, r21
    64cc:	d1 f3       	breq	.-12     	; 0x64c2 <__mulsf3+0x14>
    64ce:	95 0f       	add	r25, r21
    64d0:	50 e0       	ldi	r21, 0x00	; 0
    64d2:	55 1f       	adc	r21, r21
    64d4:	62 9f       	mul	r22, r18
    64d6:	f0 01       	movw	r30, r0
    64d8:	72 9f       	mul	r23, r18
    64da:	bb 27       	eor	r27, r27
    64dc:	f0 0d       	add	r31, r0
    64de:	b1 1d       	adc	r27, r1
    64e0:	63 9f       	mul	r22, r19
    64e2:	aa 27       	eor	r26, r26
    64e4:	f0 0d       	add	r31, r0
    64e6:	b1 1d       	adc	r27, r1
    64e8:	aa 1f       	adc	r26, r26
    64ea:	64 9f       	mul	r22, r20
    64ec:	66 27       	eor	r22, r22
    64ee:	b0 0d       	add	r27, r0
    64f0:	a1 1d       	adc	r26, r1
    64f2:	66 1f       	adc	r22, r22
    64f4:	82 9f       	mul	r24, r18
    64f6:	22 27       	eor	r18, r18
    64f8:	b0 0d       	add	r27, r0
    64fa:	a1 1d       	adc	r26, r1
    64fc:	62 1f       	adc	r22, r18
    64fe:	73 9f       	mul	r23, r19
    6500:	b0 0d       	add	r27, r0
    6502:	a1 1d       	adc	r26, r1
    6504:	62 1f       	adc	r22, r18
    6506:	83 9f       	mul	r24, r19
    6508:	a0 0d       	add	r26, r0
    650a:	61 1d       	adc	r22, r1
    650c:	22 1f       	adc	r18, r18
    650e:	74 9f       	mul	r23, r20
    6510:	33 27       	eor	r19, r19
    6512:	a0 0d       	add	r26, r0
    6514:	61 1d       	adc	r22, r1
    6516:	23 1f       	adc	r18, r19
    6518:	84 9f       	mul	r24, r20
    651a:	60 0d       	add	r22, r0
    651c:	21 1d       	adc	r18, r1
    651e:	82 2f       	mov	r24, r18
    6520:	76 2f       	mov	r23, r22
    6522:	6a 2f       	mov	r22, r26
    6524:	11 24       	eor	r1, r1
    6526:	9f 57       	subi	r25, 0x7F	; 127
    6528:	50 40       	sbci	r21, 0x00	; 0
    652a:	8a f0       	brmi	.+34     	; 0x654e <__mulsf3_pse+0x84>
    652c:	e1 f0       	breq	.+56     	; 0x6566 <__mulsf3_pse+0x9c>
    652e:	88 23       	and	r24, r24
    6530:	4a f0       	brmi	.+18     	; 0x6544 <__mulsf3_pse+0x7a>
    6532:	ee 0f       	add	r30, r30
    6534:	ff 1f       	adc	r31, r31
    6536:	bb 1f       	adc	r27, r27
    6538:	66 1f       	adc	r22, r22
    653a:	77 1f       	adc	r23, r23
    653c:	88 1f       	adc	r24, r24
    653e:	91 50       	subi	r25, 0x01	; 1
    6540:	50 40       	sbci	r21, 0x00	; 0
    6542:	a9 f7       	brne	.-22     	; 0x652e <__mulsf3_pse+0x64>
    6544:	9e 3f       	cpi	r25, 0xFE	; 254
    6546:	51 05       	cpc	r21, r1
    6548:	70 f0       	brcs	.+28     	; 0x6566 <__mulsf3_pse+0x9c>
    654a:	1c cf       	rjmp	.-456    	; 0x6384 <__fp_inf>
    654c:	a6 cf       	rjmp	.-180    	; 0x649a <__fp_szero>
    654e:	5f 3f       	cpi	r21, 0xFF	; 255
    6550:	ec f3       	brlt	.-6      	; 0x654c <__mulsf3_pse+0x82>
    6552:	98 3e       	cpi	r25, 0xE8	; 232
    6554:	dc f3       	brlt	.-10     	; 0x654c <__mulsf3_pse+0x82>
    6556:	86 95       	lsr	r24
    6558:	77 95       	ror	r23
    655a:	67 95       	ror	r22
    655c:	b7 95       	ror	r27
    655e:	f7 95       	ror	r31
    6560:	e7 95       	ror	r30
    6562:	9f 5f       	subi	r25, 0xFF	; 255
    6564:	c1 f7       	brne	.-16     	; 0x6556 <__mulsf3_pse+0x8c>
    6566:	fe 2b       	or	r31, r30
    6568:	88 0f       	add	r24, r24
    656a:	91 1d       	adc	r25, r1
    656c:	96 95       	lsr	r25
    656e:	87 95       	ror	r24
    6570:	97 f9       	bld	r25, 7
    6572:	08 95       	ret

00006574 <pow>:
    6574:	fa 01       	movw	r30, r20
    6576:	ee 0f       	add	r30, r30
    6578:	ff 1f       	adc	r31, r31
    657a:	30 96       	adiw	r30, 0x00	; 0
    657c:	21 05       	cpc	r18, r1
    657e:	31 05       	cpc	r19, r1
    6580:	99 f1       	breq	.+102    	; 0x65e8 <pow+0x74>
    6582:	61 15       	cp	r22, r1
    6584:	71 05       	cpc	r23, r1
    6586:	61 f4       	brne	.+24     	; 0x65a0 <pow+0x2c>
    6588:	80 38       	cpi	r24, 0x80	; 128
    658a:	bf e3       	ldi	r27, 0x3F	; 63
    658c:	9b 07       	cpc	r25, r27
    658e:	49 f1       	breq	.+82     	; 0x65e2 <pow+0x6e>
    6590:	68 94       	set
    6592:	90 38       	cpi	r25, 0x80	; 128
    6594:	81 05       	cpc	r24, r1
    6596:	61 f0       	breq	.+24     	; 0x65b0 <pow+0x3c>
    6598:	80 38       	cpi	r24, 0x80	; 128
    659a:	bf ef       	ldi	r27, 0xFF	; 255
    659c:	9b 07       	cpc	r25, r27
    659e:	41 f0       	breq	.+16     	; 0x65b0 <pow+0x3c>
    65a0:	99 23       	and	r25, r25
    65a2:	42 f5       	brpl	.+80     	; 0x65f4 <pow+0x80>
    65a4:	ff 3f       	cpi	r31, 0xFF	; 255
    65a6:	e1 05       	cpc	r30, r1
    65a8:	31 05       	cpc	r19, r1
    65aa:	21 05       	cpc	r18, r1
    65ac:	11 f1       	breq	.+68     	; 0x65f2 <pow+0x7e>
    65ae:	e8 94       	clt
    65b0:	08 94       	sec
    65b2:	e7 95       	ror	r30
    65b4:	d9 01       	movw	r26, r18
    65b6:	aa 23       	and	r26, r26
    65b8:	29 f4       	brne	.+10     	; 0x65c4 <pow+0x50>
    65ba:	ab 2f       	mov	r26, r27
    65bc:	be 2f       	mov	r27, r30
    65be:	f8 5f       	subi	r31, 0xF8	; 248
    65c0:	d0 f3       	brcs	.-12     	; 0x65b6 <pow+0x42>
    65c2:	10 c0       	rjmp	.+32     	; 0x65e4 <pow+0x70>
    65c4:	ff 5f       	subi	r31, 0xFF	; 255
    65c6:	70 f4       	brcc	.+28     	; 0x65e4 <pow+0x70>
    65c8:	a6 95       	lsr	r26
    65ca:	e0 f7       	brcc	.-8      	; 0x65c4 <pow+0x50>
    65cc:	f7 39       	cpi	r31, 0x97	; 151
    65ce:	50 f0       	brcs	.+20     	; 0x65e4 <pow+0x70>
    65d0:	19 f0       	breq	.+6      	; 0x65d8 <pow+0x64>
    65d2:	ff 3a       	cpi	r31, 0xAF	; 175
    65d4:	38 f4       	brcc	.+14     	; 0x65e4 <pow+0x70>
    65d6:	9f 77       	andi	r25, 0x7F	; 127
    65d8:	9f 93       	push	r25
    65da:	0c d0       	rcall	.+24     	; 0x65f4 <pow+0x80>
    65dc:	0f 90       	pop	r0
    65de:	07 fc       	sbrc	r0, 7
    65e0:	90 58       	subi	r25, 0x80	; 128
    65e2:	08 95       	ret
    65e4:	3e f0       	brts	.+14     	; 0x65f4 <pow+0x80>
    65e6:	fd ce       	rjmp	.-518    	; 0x63e2 <__fp_nan>
    65e8:	60 e0       	ldi	r22, 0x00	; 0
    65ea:	70 e0       	ldi	r23, 0x00	; 0
    65ec:	80 e8       	ldi	r24, 0x80	; 128
    65ee:	9f e3       	ldi	r25, 0x3F	; 63
    65f0:	08 95       	ret
    65f2:	4f e7       	ldi	r20, 0x7F	; 127
    65f4:	9f 77       	andi	r25, 0x7F	; 127
    65f6:	5f 93       	push	r21
    65f8:	4f 93       	push	r20
    65fa:	3f 93       	push	r19
    65fc:	2f 93       	push	r18
    65fe:	9e d0       	rcall	.+316    	; 0x673c <log>
    6600:	2f 91       	pop	r18
    6602:	3f 91       	pop	r19
    6604:	4f 91       	pop	r20
    6606:	5f 91       	pop	r21
    6608:	52 df       	rcall	.-348    	; 0x64ae <__mulsf3>
    660a:	05 c0       	rjmp	.+10     	; 0x6616 <exp>
    660c:	19 f4       	brne	.+6      	; 0x6614 <pow+0xa0>
    660e:	0e f0       	brts	.+2      	; 0x6612 <pow+0x9e>
    6610:	b9 ce       	rjmp	.-654    	; 0x6384 <__fp_inf>
    6612:	42 cf       	rjmp	.-380    	; 0x6498 <__fp_zero>
    6614:	e6 ce       	rjmp	.-564    	; 0x63e2 <__fp_nan>

00006616 <exp>:
    6616:	0f df       	rcall	.-482    	; 0x6436 <__fp_splitA>
    6618:	c8 f3       	brcs	.-14     	; 0x660c <pow+0x98>
    661a:	96 38       	cpi	r25, 0x86	; 134
    661c:	c0 f7       	brcc	.-16     	; 0x660e <pow+0x9a>
    661e:	07 f8       	bld	r0, 7
    6620:	0f 92       	push	r0
    6622:	e8 94       	clt
    6624:	2b e3       	ldi	r18, 0x3B	; 59
    6626:	3a ea       	ldi	r19, 0xAA	; 170
    6628:	48 eb       	ldi	r20, 0xB8	; 184
    662a:	5f e7       	ldi	r21, 0x7F	; 127
    662c:	4e df       	rcall	.-356    	; 0x64ca <__mulsf3_pse>
    662e:	0f 92       	push	r0
    6630:	0f 92       	push	r0
    6632:	0f 92       	push	r0
    6634:	4d b7       	in	r20, 0x3d	; 61
    6636:	5e b7       	in	r21, 0x3e	; 62
    6638:	0f 92       	push	r0
    663a:	c0 d0       	rcall	.+384    	; 0x67bc <modf>
    663c:	e2 e8       	ldi	r30, 0x82	; 130
    663e:	f0 e0       	ldi	r31, 0x00	; 0
    6640:	16 d0       	rcall	.+44     	; 0x666e <__fp_powser>
    6642:	4f 91       	pop	r20
    6644:	5f 91       	pop	r21
    6646:	ef 91       	pop	r30
    6648:	ff 91       	pop	r31
    664a:	e5 95       	asr	r30
    664c:	ee 1f       	adc	r30, r30
    664e:	ff 1f       	adc	r31, r31
    6650:	49 f0       	breq	.+18     	; 0x6664 <exp+0x4e>
    6652:	fe 57       	subi	r31, 0x7E	; 126
    6654:	e0 68       	ori	r30, 0x80	; 128
    6656:	44 27       	eor	r20, r20
    6658:	ee 0f       	add	r30, r30
    665a:	44 1f       	adc	r20, r20
    665c:	fa 95       	dec	r31
    665e:	e1 f7       	brne	.-8      	; 0x6658 <exp+0x42>
    6660:	41 95       	neg	r20
    6662:	55 0b       	sbc	r21, r21
    6664:	32 d0       	rcall	.+100    	; 0x66ca <ldexp>
    6666:	0f 90       	pop	r0
    6668:	07 fe       	sbrs	r0, 7
    666a:	26 c0       	rjmp	.+76     	; 0x66b8 <inverse>
    666c:	08 95       	ret

0000666e <__fp_powser>:
    666e:	df 93       	push	r29
    6670:	cf 93       	push	r28
    6672:	1f 93       	push	r17
    6674:	0f 93       	push	r16
    6676:	ff 92       	push	r15
    6678:	ef 92       	push	r14
    667a:	df 92       	push	r13
    667c:	7b 01       	movw	r14, r22
    667e:	8c 01       	movw	r16, r24
    6680:	68 94       	set
    6682:	05 c0       	rjmp	.+10     	; 0x668e <__fp_powser+0x20>
    6684:	da 2e       	mov	r13, r26
    6686:	ef 01       	movw	r28, r30
    6688:	1e df       	rcall	.-452    	; 0x64c6 <__mulsf3x>
    668a:	fe 01       	movw	r30, r28
    668c:	e8 94       	clt
    668e:	a5 91       	lpm	r26, Z+
    6690:	25 91       	lpm	r18, Z+
    6692:	35 91       	lpm	r19, Z+
    6694:	45 91       	lpm	r20, Z+
    6696:	55 91       	lpm	r21, Z+
    6698:	ae f3       	brts	.-22     	; 0x6684 <__fp_powser+0x16>
    669a:	ef 01       	movw	r28, r30
    669c:	0f dd       	rcall	.-1506   	; 0x60bc <__addsf3x>
    669e:	fe 01       	movw	r30, r28
    66a0:	97 01       	movw	r18, r14
    66a2:	a8 01       	movw	r20, r16
    66a4:	da 94       	dec	r13
    66a6:	79 f7       	brne	.-34     	; 0x6686 <__fp_powser+0x18>
    66a8:	df 90       	pop	r13
    66aa:	ef 90       	pop	r14
    66ac:	ff 90       	pop	r15
    66ae:	0f 91       	pop	r16
    66b0:	1f 91       	pop	r17
    66b2:	cf 91       	pop	r28
    66b4:	df 91       	pop	r29
    66b6:	08 95       	ret

000066b8 <inverse>:
    66b8:	9b 01       	movw	r18, r22
    66ba:	ac 01       	movw	r20, r24
    66bc:	60 e0       	ldi	r22, 0x00	; 0
    66be:	70 e0       	ldi	r23, 0x00	; 0
    66c0:	80 e8       	ldi	r24, 0x80	; 128
    66c2:	9f e3       	ldi	r25, 0x3F	; 63
    66c4:	52 cd       	rjmp	.-1372   	; 0x616a <__divsf3>
    66c6:	5e ce       	rjmp	.-836    	; 0x6384 <__fp_inf>
    66c8:	7e ce       	rjmp	.-772    	; 0x63c6 <__fp_mpack>

000066ca <ldexp>:
    66ca:	b5 de       	rcall	.-662    	; 0x6436 <__fp_splitA>
    66cc:	e8 f3       	brcs	.-6      	; 0x66c8 <inverse+0x10>
    66ce:	99 23       	and	r25, r25
    66d0:	d9 f3       	breq	.-10     	; 0x66c8 <inverse+0x10>
    66d2:	94 0f       	add	r25, r20
    66d4:	51 1d       	adc	r21, r1
    66d6:	bb f3       	brvs	.-18     	; 0x66c6 <inverse+0xe>
    66d8:	91 50       	subi	r25, 0x01	; 1
    66da:	50 40       	sbci	r21, 0x00	; 0
    66dc:	94 f0       	brlt	.+36     	; 0x6702 <ldexp+0x38>
    66de:	59 f0       	breq	.+22     	; 0x66f6 <ldexp+0x2c>
    66e0:	88 23       	and	r24, r24
    66e2:	32 f0       	brmi	.+12     	; 0x66f0 <ldexp+0x26>
    66e4:	66 0f       	add	r22, r22
    66e6:	77 1f       	adc	r23, r23
    66e8:	88 1f       	adc	r24, r24
    66ea:	91 50       	subi	r25, 0x01	; 1
    66ec:	50 40       	sbci	r21, 0x00	; 0
    66ee:	c1 f7       	brne	.-16     	; 0x66e0 <ldexp+0x16>
    66f0:	9e 3f       	cpi	r25, 0xFE	; 254
    66f2:	51 05       	cpc	r21, r1
    66f4:	44 f7       	brge	.-48     	; 0x66c6 <inverse+0xe>
    66f6:	88 0f       	add	r24, r24
    66f8:	91 1d       	adc	r25, r1
    66fa:	96 95       	lsr	r25
    66fc:	87 95       	ror	r24
    66fe:	97 f9       	bld	r25, 7
    6700:	08 95       	ret
    6702:	5f 3f       	cpi	r21, 0xFF	; 255
    6704:	ac f0       	brlt	.+42     	; 0x6730 <ldexp+0x66>
    6706:	98 3e       	cpi	r25, 0xE8	; 232
    6708:	9c f0       	brlt	.+38     	; 0x6730 <ldexp+0x66>
    670a:	bb 27       	eor	r27, r27
    670c:	86 95       	lsr	r24
    670e:	77 95       	ror	r23
    6710:	67 95       	ror	r22
    6712:	b7 95       	ror	r27
    6714:	08 f4       	brcc	.+2      	; 0x6718 <ldexp+0x4e>
    6716:	b1 60       	ori	r27, 0x01	; 1
    6718:	93 95       	inc	r25
    671a:	c1 f7       	brne	.-16     	; 0x670c <ldexp+0x42>
    671c:	bb 0f       	add	r27, r27
    671e:	58 f7       	brcc	.-42     	; 0x66f6 <ldexp+0x2c>
    6720:	11 f4       	brne	.+4      	; 0x6726 <ldexp+0x5c>
    6722:	60 ff       	sbrs	r22, 0
    6724:	e8 cf       	rjmp	.-48     	; 0x66f6 <ldexp+0x2c>
    6726:	6f 5f       	subi	r22, 0xFF	; 255
    6728:	7f 4f       	sbci	r23, 0xFF	; 255
    672a:	8f 4f       	sbci	r24, 0xFF	; 255
    672c:	9f 4f       	sbci	r25, 0xFF	; 255
    672e:	e3 cf       	rjmp	.-58     	; 0x66f6 <ldexp+0x2c>
    6730:	b4 ce       	rjmp	.-664    	; 0x649a <__fp_szero>
    6732:	0e f0       	brts	.+2      	; 0x6736 <ldexp+0x6c>
    6734:	48 ce       	rjmp	.-880    	; 0x63c6 <__fp_mpack>
    6736:	55 ce       	rjmp	.-854    	; 0x63e2 <__fp_nan>
    6738:	68 94       	set
    673a:	24 ce       	rjmp	.-952    	; 0x6384 <__fp_inf>

0000673c <log>:
    673c:	7c de       	rcall	.-776    	; 0x6436 <__fp_splitA>
    673e:	c8 f3       	brcs	.-14     	; 0x6732 <ldexp+0x68>
    6740:	99 23       	and	r25, r25
    6742:	d1 f3       	breq	.-12     	; 0x6738 <ldexp+0x6e>
    6744:	c6 f3       	brts	.-16     	; 0x6736 <ldexp+0x6c>
    6746:	df 93       	push	r29
    6748:	cf 93       	push	r28
    674a:	1f 93       	push	r17
    674c:	0f 93       	push	r16
    674e:	ff 92       	push	r15
    6750:	c9 2f       	mov	r28, r25
    6752:	dd 27       	eor	r29, r29
    6754:	88 23       	and	r24, r24
    6756:	2a f0       	brmi	.+10     	; 0x6762 <log+0x26>
    6758:	21 97       	sbiw	r28, 0x01	; 1
    675a:	66 0f       	add	r22, r22
    675c:	77 1f       	adc	r23, r23
    675e:	88 1f       	adc	r24, r24
    6760:	da f7       	brpl	.-10     	; 0x6758 <log+0x1c>
    6762:	20 e0       	ldi	r18, 0x00	; 0
    6764:	30 e0       	ldi	r19, 0x00	; 0
    6766:	40 e8       	ldi	r20, 0x80	; 128
    6768:	5f eb       	ldi	r21, 0xBF	; 191
    676a:	9f e3       	ldi	r25, 0x3F	; 63
    676c:	88 39       	cpi	r24, 0x98	; 152
    676e:	20 f0       	brcs	.+8      	; 0x6778 <log+0x3c>
    6770:	80 3e       	cpi	r24, 0xE0	; 224
    6772:	30 f0       	brcs	.+12     	; 0x6780 <log+0x44>
    6774:	21 96       	adiw	r28, 0x01	; 1
    6776:	8f 77       	andi	r24, 0x7F	; 127
    6778:	90 dc       	rcall	.-1760   	; 0x609a <__addsf3>
    677a:	ea ea       	ldi	r30, 0xAA	; 170
    677c:	f0 e0       	ldi	r31, 0x00	; 0
    677e:	03 c0       	rjmp	.+6      	; 0x6786 <log+0x4a>
    6780:	8c dc       	rcall	.-1768   	; 0x609a <__addsf3>
    6782:	e7 ed       	ldi	r30, 0xD7	; 215
    6784:	f0 e0       	ldi	r31, 0x00	; 0
    6786:	73 df       	rcall	.-282    	; 0x666e <__fp_powser>
    6788:	8b 01       	movw	r16, r22
    678a:	be 01       	movw	r22, r28
    678c:	ec 01       	movw	r28, r24
    678e:	fb 2e       	mov	r15, r27
    6790:	6f 57       	subi	r22, 0x7F	; 127
    6792:	71 09       	sbc	r23, r1
    6794:	75 95       	asr	r23
    6796:	77 1f       	adc	r23, r23
    6798:	88 0b       	sbc	r24, r24
    679a:	99 0b       	sbc	r25, r25
    679c:	81 dd       	rcall	.-1278   	; 0x62a0 <__floatsisf>
    679e:	28 e1       	ldi	r18, 0x18	; 24
    67a0:	32 e7       	ldi	r19, 0x72	; 114
    67a2:	41 e3       	ldi	r20, 0x31	; 49
    67a4:	5f e3       	ldi	r21, 0x3F	; 63
    67a6:	8f de       	rcall	.-738    	; 0x64c6 <__mulsf3x>
    67a8:	af 2d       	mov	r26, r15
    67aa:	98 01       	movw	r18, r16
    67ac:	ae 01       	movw	r20, r28
    67ae:	ff 90       	pop	r15
    67b0:	0f 91       	pop	r16
    67b2:	1f 91       	pop	r17
    67b4:	cf 91       	pop	r28
    67b6:	df 91       	pop	r29
    67b8:	81 dc       	rcall	.-1790   	; 0x60bc <__addsf3x>
    67ba:	24 ce       	rjmp	.-952    	; 0x6404 <__fp_round>

000067bc <modf>:
    67bc:	fa 01       	movw	r30, r20
    67be:	dc 01       	movw	r26, r24
    67c0:	aa 0f       	add	r26, r26
    67c2:	bb 1f       	adc	r27, r27
    67c4:	9b 01       	movw	r18, r22
    67c6:	ac 01       	movw	r20, r24
    67c8:	bf 57       	subi	r27, 0x7F	; 127
    67ca:	28 f4       	brcc	.+10     	; 0x67d6 <modf+0x1a>
    67cc:	22 27       	eor	r18, r18
    67ce:	33 27       	eor	r19, r19
    67d0:	44 27       	eor	r20, r20
    67d2:	50 78       	andi	r21, 0x80	; 128
    67d4:	1f c0       	rjmp	.+62     	; 0x6814 <modf+0x58>
    67d6:	b7 51       	subi	r27, 0x17	; 23
    67d8:	88 f4       	brcc	.+34     	; 0x67fc <modf+0x40>
    67da:	ab 2f       	mov	r26, r27
    67dc:	00 24       	eor	r0, r0
    67de:	46 95       	lsr	r20
    67e0:	37 95       	ror	r19
    67e2:	27 95       	ror	r18
    67e4:	01 1c       	adc	r0, r1
    67e6:	a3 95       	inc	r26
    67e8:	d2 f3       	brmi	.-12     	; 0x67de <modf+0x22>
    67ea:	00 20       	and	r0, r0
    67ec:	69 f0       	breq	.+26     	; 0x6808 <modf+0x4c>
    67ee:	22 0f       	add	r18, r18
    67f0:	33 1f       	adc	r19, r19
    67f2:	44 1f       	adc	r20, r20
    67f4:	b3 95       	inc	r27
    67f6:	da f3       	brmi	.-10     	; 0x67ee <modf+0x32>
    67f8:	0d d0       	rcall	.+26     	; 0x6814 <modf+0x58>
    67fa:	4e cc       	rjmp	.-1892   	; 0x6098 <__subsf3>
    67fc:	61 30       	cpi	r22, 0x01	; 1
    67fe:	71 05       	cpc	r23, r1
    6800:	a0 e8       	ldi	r26, 0x80	; 128
    6802:	8a 07       	cpc	r24, r26
    6804:	b9 46       	sbci	r27, 0x69	; 105
    6806:	30 f4       	brcc	.+12     	; 0x6814 <modf+0x58>
    6808:	9b 01       	movw	r18, r22
    680a:	ac 01       	movw	r20, r24
    680c:	66 27       	eor	r22, r22
    680e:	77 27       	eor	r23, r23
    6810:	88 27       	eor	r24, r24
    6812:	90 78       	andi	r25, 0x80	; 128
    6814:	30 96       	adiw	r30, 0x00	; 0
    6816:	21 f0       	breq	.+8      	; 0x6820 <modf+0x64>
    6818:	20 83       	st	Z, r18
    681a:	31 83       	std	Z+1, r19	; 0x01
    681c:	42 83       	std	Z+2, r20	; 0x02
    681e:	53 83       	std	Z+3, r21	; 0x03
    6820:	08 95       	ret

00006822 <isspace>:
    6822:	91 11       	cpse	r25, r1
    6824:	c8 c2       	rjmp	.+1424   	; 0x6db6 <__ctype_isfalse>
    6826:	80 32       	cpi	r24, 0x20	; 32
    6828:	19 f0       	breq	.+6      	; 0x6830 <isspace+0xe>
    682a:	89 50       	subi	r24, 0x09	; 9
    682c:	85 50       	subi	r24, 0x05	; 5
    682e:	d0 f7       	brcc	.-12     	; 0x6824 <isspace+0x2>
    6830:	08 95       	ret

00006832 <tolower>:
    6832:	91 11       	cpse	r25, r1
    6834:	08 95       	ret
    6836:	81 54       	subi	r24, 0x41	; 65
    6838:	8a 51       	subi	r24, 0x1A	; 26
    683a:	08 f4       	brcc	.+2      	; 0x683e <tolower+0xc>
    683c:	80 5e       	subi	r24, 0xE0	; 224
    683e:	85 5a       	subi	r24, 0xA5	; 165
    6840:	08 95       	ret

00006842 <strchr_P>:
    6842:	fc 01       	movw	r30, r24
    6844:	05 90       	lpm	r0, Z+
    6846:	06 16       	cp	r0, r22
    6848:	21 f0       	breq	.+8      	; 0x6852 <strchr_P+0x10>
    684a:	00 20       	and	r0, r0
    684c:	d9 f7       	brne	.-10     	; 0x6844 <strchr_P+0x2>
    684e:	c0 01       	movw	r24, r0
    6850:	08 95       	ret
    6852:	31 97       	sbiw	r30, 0x01	; 1
    6854:	cf 01       	movw	r24, r30
    6856:	08 95       	ret

00006858 <memcmp>:
    6858:	fb 01       	movw	r30, r22
    685a:	dc 01       	movw	r26, r24
    685c:	04 c0       	rjmp	.+8      	; 0x6866 <memcmp+0xe>
    685e:	8d 91       	ld	r24, X+
    6860:	01 90       	ld	r0, Z+
    6862:	80 19       	sub	r24, r0
    6864:	21 f4       	brne	.+8      	; 0x686e <memcmp+0x16>
    6866:	41 50       	subi	r20, 0x01	; 1
    6868:	50 40       	sbci	r21, 0x00	; 0
    686a:	c8 f7       	brcc	.-14     	; 0x685e <memcmp+0x6>
    686c:	88 1b       	sub	r24, r24
    686e:	99 0b       	sbc	r25, r25
    6870:	08 95       	ret

00006872 <memcpy>:
    6872:	fb 01       	movw	r30, r22
    6874:	dc 01       	movw	r26, r24
    6876:	02 c0       	rjmp	.+4      	; 0x687c <memcpy+0xa>
    6878:	01 90       	ld	r0, Z+
    687a:	0d 92       	st	X+, r0
    687c:	41 50       	subi	r20, 0x01	; 1
    687e:	50 40       	sbci	r21, 0x00	; 0
    6880:	d8 f7       	brcc	.-10     	; 0x6878 <memcpy+0x6>
    6882:	08 95       	ret

00006884 <strncmp>:
    6884:	fb 01       	movw	r30, r22
    6886:	dc 01       	movw	r26, r24
    6888:	41 50       	subi	r20, 0x01	; 1
    688a:	50 40       	sbci	r21, 0x00	; 0
    688c:	30 f0       	brcs	.+12     	; 0x689a <strncmp+0x16>
    688e:	8d 91       	ld	r24, X+
    6890:	01 90       	ld	r0, Z+
    6892:	80 19       	sub	r24, r0
    6894:	19 f4       	brne	.+6      	; 0x689c <strncmp+0x18>
    6896:	00 20       	and	r0, r0
    6898:	b9 f7       	brne	.-18     	; 0x6888 <strncmp+0x4>
    689a:	88 1b       	sub	r24, r24
    689c:	99 0b       	sbc	r25, r25
    689e:	08 95       	ret

000068a0 <fgetc>:
    68a0:	cf 93       	push	r28
    68a2:	df 93       	push	r29
    68a4:	ec 01       	movw	r28, r24
    68a6:	2b 81       	ldd	r18, Y+3	; 0x03
    68a8:	20 ff       	sbrs	r18, 0
    68aa:	33 c0       	rjmp	.+102    	; 0x6912 <fgetc+0x72>
    68ac:	26 ff       	sbrs	r18, 6
    68ae:	0a c0       	rjmp	.+20     	; 0x68c4 <fgetc+0x24>
    68b0:	2f 7b       	andi	r18, 0xBF	; 191
    68b2:	2b 83       	std	Y+3, r18	; 0x03
    68b4:	8e 81       	ldd	r24, Y+6	; 0x06
    68b6:	9f 81       	ldd	r25, Y+7	; 0x07
    68b8:	01 96       	adiw	r24, 0x01	; 1
    68ba:	9f 83       	std	Y+7, r25	; 0x07
    68bc:	8e 83       	std	Y+6, r24	; 0x06
    68be:	8a 81       	ldd	r24, Y+2	; 0x02
    68c0:	90 e0       	ldi	r25, 0x00	; 0
    68c2:	29 c0       	rjmp	.+82     	; 0x6916 <fgetc+0x76>
    68c4:	22 ff       	sbrs	r18, 2
    68c6:	0f c0       	rjmp	.+30     	; 0x68e6 <fgetc+0x46>
    68c8:	e8 81       	ld	r30, Y
    68ca:	f9 81       	ldd	r31, Y+1	; 0x01
    68cc:	80 81       	ld	r24, Z
    68ce:	08 2e       	mov	r0, r24
    68d0:	00 0c       	add	r0, r0
    68d2:	99 0b       	sbc	r25, r25
    68d4:	00 97       	sbiw	r24, 0x00	; 0
    68d6:	19 f4       	brne	.+6      	; 0x68de <fgetc+0x3e>
    68d8:	20 62       	ori	r18, 0x20	; 32
    68da:	2b 83       	std	Y+3, r18	; 0x03
    68dc:	1a c0       	rjmp	.+52     	; 0x6912 <fgetc+0x72>
    68de:	31 96       	adiw	r30, 0x01	; 1
    68e0:	f9 83       	std	Y+1, r31	; 0x01
    68e2:	e8 83       	st	Y, r30
    68e4:	0e c0       	rjmp	.+28     	; 0x6902 <fgetc+0x62>
    68e6:	ea 85       	ldd	r30, Y+10	; 0x0a
    68e8:	fb 85       	ldd	r31, Y+11	; 0x0b
    68ea:	09 95       	icall
    68ec:	97 ff       	sbrs	r25, 7
    68ee:	09 c0       	rjmp	.+18     	; 0x6902 <fgetc+0x62>
    68f0:	2b 81       	ldd	r18, Y+3	; 0x03
    68f2:	01 96       	adiw	r24, 0x01	; 1
    68f4:	11 f0       	breq	.+4      	; 0x68fa <fgetc+0x5a>
    68f6:	80 e2       	ldi	r24, 0x20	; 32
    68f8:	01 c0       	rjmp	.+2      	; 0x68fc <fgetc+0x5c>
    68fa:	80 e1       	ldi	r24, 0x10	; 16
    68fc:	82 2b       	or	r24, r18
    68fe:	8b 83       	std	Y+3, r24	; 0x03
    6900:	08 c0       	rjmp	.+16     	; 0x6912 <fgetc+0x72>
    6902:	2e 81       	ldd	r18, Y+6	; 0x06
    6904:	3f 81       	ldd	r19, Y+7	; 0x07
    6906:	2f 5f       	subi	r18, 0xFF	; 255
    6908:	3f 4f       	sbci	r19, 0xFF	; 255
    690a:	3f 83       	std	Y+7, r19	; 0x07
    690c:	2e 83       	std	Y+6, r18	; 0x06
    690e:	99 27       	eor	r25, r25
    6910:	02 c0       	rjmp	.+4      	; 0x6916 <fgetc+0x76>
    6912:	8f ef       	ldi	r24, 0xFF	; 255
    6914:	9f ef       	ldi	r25, 0xFF	; 255
    6916:	df 91       	pop	r29
    6918:	cf 91       	pop	r28
    691a:	08 95       	ret

0000691c <snprintf>:
    691c:	ae e0       	ldi	r26, 0x0E	; 14
    691e:	b0 e0       	ldi	r27, 0x00	; 0
    6920:	e3 e9       	ldi	r30, 0x93	; 147
    6922:	f4 e3       	ldi	r31, 0x34	; 52
    6924:	81 cb       	rjmp	.-2302   	; 0x6028 <__prologue_saves__+0x1c>
    6926:	0d 89       	ldd	r16, Y+21	; 0x15
    6928:	1e 89       	ldd	r17, Y+22	; 0x16
    692a:	8f 89       	ldd	r24, Y+23	; 0x17
    692c:	98 8d       	ldd	r25, Y+24	; 0x18
    692e:	26 e0       	ldi	r18, 0x06	; 6
    6930:	2c 83       	std	Y+4, r18	; 0x04
    6932:	1a 83       	std	Y+2, r17	; 0x02
    6934:	09 83       	std	Y+1, r16	; 0x01
    6936:	97 ff       	sbrs	r25, 7
    6938:	02 c0       	rjmp	.+4      	; 0x693e <snprintf+0x22>
    693a:	80 e0       	ldi	r24, 0x00	; 0
    693c:	90 e8       	ldi	r25, 0x80	; 128
    693e:	01 97       	sbiw	r24, 0x01	; 1
    6940:	9e 83       	std	Y+6, r25	; 0x06
    6942:	8d 83       	std	Y+5, r24	; 0x05
    6944:	ae 01       	movw	r20, r28
    6946:	45 5e       	subi	r20, 0xE5	; 229
    6948:	5f 4f       	sbci	r21, 0xFF	; 255
    694a:	69 8d       	ldd	r22, Y+25	; 0x19
    694c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    694e:	ce 01       	movw	r24, r28
    6950:	01 96       	adiw	r24, 0x01	; 1
    6952:	5f d0       	rcall	.+190    	; 0x6a12 <vfprintf>
    6954:	4d 81       	ldd	r20, Y+5	; 0x05
    6956:	5e 81       	ldd	r21, Y+6	; 0x06
    6958:	57 fd       	sbrc	r21, 7
    695a:	0a c0       	rjmp	.+20     	; 0x6970 <snprintf+0x54>
    695c:	2f 81       	ldd	r18, Y+7	; 0x07
    695e:	38 85       	ldd	r19, Y+8	; 0x08
    6960:	42 17       	cp	r20, r18
    6962:	53 07       	cpc	r21, r19
    6964:	0c f4       	brge	.+2      	; 0x6968 <snprintf+0x4c>
    6966:	9a 01       	movw	r18, r20
    6968:	f8 01       	movw	r30, r16
    696a:	e2 0f       	add	r30, r18
    696c:	f3 1f       	adc	r31, r19
    696e:	10 82       	st	Z, r1
    6970:	2e 96       	adiw	r28, 0x0e	; 14
    6972:	e4 e0       	ldi	r30, 0x04	; 4
    6974:	75 cb       	rjmp	.-2326   	; 0x6060 <__epilogue_restores__+0x1c>

00006976 <sprintf>:
    6976:	ae e0       	ldi	r26, 0x0E	; 14
    6978:	b0 e0       	ldi	r27, 0x00	; 0
    697a:	e0 ec       	ldi	r30, 0xC0	; 192
    697c:	f4 e3       	ldi	r31, 0x34	; 52
    697e:	54 cb       	rjmp	.-2392   	; 0x6028 <__prologue_saves__+0x1c>
    6980:	0d 89       	ldd	r16, Y+21	; 0x15
    6982:	1e 89       	ldd	r17, Y+22	; 0x16
    6984:	86 e0       	ldi	r24, 0x06	; 6
    6986:	8c 83       	std	Y+4, r24	; 0x04
    6988:	1a 83       	std	Y+2, r17	; 0x02
    698a:	09 83       	std	Y+1, r16	; 0x01
    698c:	8f ef       	ldi	r24, 0xFF	; 255
    698e:	9f e7       	ldi	r25, 0x7F	; 127
    6990:	9e 83       	std	Y+6, r25	; 0x06
    6992:	8d 83       	std	Y+5, r24	; 0x05
    6994:	ae 01       	movw	r20, r28
    6996:	47 5e       	subi	r20, 0xE7	; 231
    6998:	5f 4f       	sbci	r21, 0xFF	; 255
    699a:	6f 89       	ldd	r22, Y+23	; 0x17
    699c:	78 8d       	ldd	r23, Y+24	; 0x18
    699e:	ce 01       	movw	r24, r28
    69a0:	01 96       	adiw	r24, 0x01	; 1
    69a2:	37 d0       	rcall	.+110    	; 0x6a12 <vfprintf>
    69a4:	ef 81       	ldd	r30, Y+7	; 0x07
    69a6:	f8 85       	ldd	r31, Y+8	; 0x08
    69a8:	e0 0f       	add	r30, r16
    69aa:	f1 1f       	adc	r31, r17
    69ac:	10 82       	st	Z, r1
    69ae:	2e 96       	adiw	r28, 0x0e	; 14
    69b0:	e4 e0       	ldi	r30, 0x04	; 4
    69b2:	56 cb       	rjmp	.-2388   	; 0x6060 <__epilogue_restores__+0x1c>

000069b4 <sscanf>:
    69b4:	ae e0       	ldi	r26, 0x0E	; 14
    69b6:	b0 e0       	ldi	r27, 0x00	; 0
    69b8:	ef ed       	ldi	r30, 0xDF	; 223
    69ba:	f4 e3       	ldi	r31, 0x34	; 52
    69bc:	37 cb       	rjmp	.-2450   	; 0x602c <__prologue_saves__+0x20>
    69be:	85 e0       	ldi	r24, 0x05	; 5
    69c0:	8c 83       	std	Y+4, r24	; 0x04
    69c2:	8b 89       	ldd	r24, Y+19	; 0x13
    69c4:	9c 89       	ldd	r25, Y+20	; 0x14
    69c6:	9a 83       	std	Y+2, r25	; 0x02
    69c8:	89 83       	std	Y+1, r24	; 0x01
    69ca:	ae 01       	movw	r20, r28
    69cc:	49 5e       	subi	r20, 0xE9	; 233
    69ce:	5f 4f       	sbci	r21, 0xFF	; 255
    69d0:	6d 89       	ldd	r22, Y+21	; 0x15
    69d2:	7e 89       	ldd	r23, Y+22	; 0x16
    69d4:	ce 01       	movw	r24, r28
    69d6:	01 96       	adiw	r24, 0x01	; 1
    69d8:	77 d9       	rcall	.-3346   	; 0x5cc8 <vfscanf>
    69da:	2e 96       	adiw	r28, 0x0e	; 14
    69dc:	e2 e0       	ldi	r30, 0x02	; 2
    69de:	42 cb       	rjmp	.-2428   	; 0x6064 <__epilogue_restores__+0x20>

000069e0 <ungetc>:
    69e0:	fb 01       	movw	r30, r22
    69e2:	23 81       	ldd	r18, Z+3	; 0x03
    69e4:	20 ff       	sbrs	r18, 0
    69e6:	12 c0       	rjmp	.+36     	; 0x6a0c <ungetc+0x2c>
    69e8:	26 fd       	sbrc	r18, 6
    69ea:	10 c0       	rjmp	.+32     	; 0x6a0c <ungetc+0x2c>
    69ec:	8f 3f       	cpi	r24, 0xFF	; 255
    69ee:	3f ef       	ldi	r19, 0xFF	; 255
    69f0:	93 07       	cpc	r25, r19
    69f2:	61 f0       	breq	.+24     	; 0x6a0c <ungetc+0x2c>
    69f4:	82 83       	std	Z+2, r24	; 0x02
    69f6:	2f 7d       	andi	r18, 0xDF	; 223
    69f8:	20 64       	ori	r18, 0x40	; 64
    69fa:	23 83       	std	Z+3, r18	; 0x03
    69fc:	26 81       	ldd	r18, Z+6	; 0x06
    69fe:	37 81       	ldd	r19, Z+7	; 0x07
    6a00:	21 50       	subi	r18, 0x01	; 1
    6a02:	31 09       	sbc	r19, r1
    6a04:	37 83       	std	Z+7, r19	; 0x07
    6a06:	26 83       	std	Z+6, r18	; 0x06
    6a08:	99 27       	eor	r25, r25
    6a0a:	08 95       	ret
    6a0c:	8f ef       	ldi	r24, 0xFF	; 255
    6a0e:	9f ef       	ldi	r25, 0xFF	; 255
    6a10:	08 95       	ret

00006a12 <vfprintf>:
    6a12:	ab e0       	ldi	r26, 0x0B	; 11
    6a14:	b0 e0       	ldi	r27, 0x00	; 0
    6a16:	ee e0       	ldi	r30, 0x0E	; 14
    6a18:	f5 e3       	ldi	r31, 0x35	; 53
    6a1a:	f8 ca       	rjmp	.-2576   	; 0x600c <__prologue_saves__>
    6a1c:	6c 01       	movw	r12, r24
    6a1e:	7b 01       	movw	r14, r22
    6a20:	8a 01       	movw	r16, r20
    6a22:	fc 01       	movw	r30, r24
    6a24:	17 82       	std	Z+7, r1	; 0x07
    6a26:	16 82       	std	Z+6, r1	; 0x06
    6a28:	83 81       	ldd	r24, Z+3	; 0x03
    6a2a:	81 ff       	sbrs	r24, 1
    6a2c:	bf c1       	rjmp	.+894    	; 0x6dac <vfprintf+0x39a>
    6a2e:	ce 01       	movw	r24, r28
    6a30:	01 96       	adiw	r24, 0x01	; 1
    6a32:	3c 01       	movw	r6, r24
    6a34:	f6 01       	movw	r30, r12
    6a36:	93 81       	ldd	r25, Z+3	; 0x03
    6a38:	f7 01       	movw	r30, r14
    6a3a:	93 fd       	sbrc	r25, 3
    6a3c:	85 91       	lpm	r24, Z+
    6a3e:	93 ff       	sbrs	r25, 3
    6a40:	81 91       	ld	r24, Z+
    6a42:	7f 01       	movw	r14, r30
    6a44:	88 23       	and	r24, r24
    6a46:	09 f4       	brne	.+2      	; 0x6a4a <vfprintf+0x38>
    6a48:	ad c1       	rjmp	.+858    	; 0x6da4 <vfprintf+0x392>
    6a4a:	85 32       	cpi	r24, 0x25	; 37
    6a4c:	39 f4       	brne	.+14     	; 0x6a5c <vfprintf+0x4a>
    6a4e:	93 fd       	sbrc	r25, 3
    6a50:	85 91       	lpm	r24, Z+
    6a52:	93 ff       	sbrs	r25, 3
    6a54:	81 91       	ld	r24, Z+
    6a56:	7f 01       	movw	r14, r30
    6a58:	85 32       	cpi	r24, 0x25	; 37
    6a5a:	21 f4       	brne	.+8      	; 0x6a64 <vfprintf+0x52>
    6a5c:	b6 01       	movw	r22, r12
    6a5e:	90 e0       	ldi	r25, 0x00	; 0
    6a60:	c3 d1       	rcall	.+902    	; 0x6de8 <fputc>
    6a62:	e8 cf       	rjmp	.-48     	; 0x6a34 <vfprintf+0x22>
    6a64:	91 2c       	mov	r9, r1
    6a66:	21 2c       	mov	r2, r1
    6a68:	31 2c       	mov	r3, r1
    6a6a:	ff e1       	ldi	r31, 0x1F	; 31
    6a6c:	f3 15       	cp	r31, r3
    6a6e:	d8 f0       	brcs	.+54     	; 0x6aa6 <vfprintf+0x94>
    6a70:	8b 32       	cpi	r24, 0x2B	; 43
    6a72:	79 f0       	breq	.+30     	; 0x6a92 <vfprintf+0x80>
    6a74:	38 f4       	brcc	.+14     	; 0x6a84 <vfprintf+0x72>
    6a76:	80 32       	cpi	r24, 0x20	; 32
    6a78:	79 f0       	breq	.+30     	; 0x6a98 <vfprintf+0x86>
    6a7a:	83 32       	cpi	r24, 0x23	; 35
    6a7c:	a1 f4       	brne	.+40     	; 0x6aa6 <vfprintf+0x94>
    6a7e:	23 2d       	mov	r18, r3
    6a80:	20 61       	ori	r18, 0x10	; 16
    6a82:	1d c0       	rjmp	.+58     	; 0x6abe <vfprintf+0xac>
    6a84:	8d 32       	cpi	r24, 0x2D	; 45
    6a86:	61 f0       	breq	.+24     	; 0x6aa0 <vfprintf+0x8e>
    6a88:	80 33       	cpi	r24, 0x30	; 48
    6a8a:	69 f4       	brne	.+26     	; 0x6aa6 <vfprintf+0x94>
    6a8c:	23 2d       	mov	r18, r3
    6a8e:	21 60       	ori	r18, 0x01	; 1
    6a90:	16 c0       	rjmp	.+44     	; 0x6abe <vfprintf+0xac>
    6a92:	83 2d       	mov	r24, r3
    6a94:	82 60       	ori	r24, 0x02	; 2
    6a96:	38 2e       	mov	r3, r24
    6a98:	e3 2d       	mov	r30, r3
    6a9a:	e4 60       	ori	r30, 0x04	; 4
    6a9c:	3e 2e       	mov	r3, r30
    6a9e:	2a c0       	rjmp	.+84     	; 0x6af4 <vfprintf+0xe2>
    6aa0:	f3 2d       	mov	r31, r3
    6aa2:	f8 60       	ori	r31, 0x08	; 8
    6aa4:	1d c0       	rjmp	.+58     	; 0x6ae0 <vfprintf+0xce>
    6aa6:	37 fc       	sbrc	r3, 7
    6aa8:	2d c0       	rjmp	.+90     	; 0x6b04 <vfprintf+0xf2>
    6aaa:	20 ed       	ldi	r18, 0xD0	; 208
    6aac:	28 0f       	add	r18, r24
    6aae:	2a 30       	cpi	r18, 0x0A	; 10
    6ab0:	40 f0       	brcs	.+16     	; 0x6ac2 <vfprintf+0xb0>
    6ab2:	8e 32       	cpi	r24, 0x2E	; 46
    6ab4:	b9 f4       	brne	.+46     	; 0x6ae4 <vfprintf+0xd2>
    6ab6:	36 fc       	sbrc	r3, 6
    6ab8:	75 c1       	rjmp	.+746    	; 0x6da4 <vfprintf+0x392>
    6aba:	23 2d       	mov	r18, r3
    6abc:	20 64       	ori	r18, 0x40	; 64
    6abe:	32 2e       	mov	r3, r18
    6ac0:	19 c0       	rjmp	.+50     	; 0x6af4 <vfprintf+0xe2>
    6ac2:	36 fe       	sbrs	r3, 6
    6ac4:	06 c0       	rjmp	.+12     	; 0x6ad2 <vfprintf+0xc0>
    6ac6:	8a e0       	ldi	r24, 0x0A	; 10
    6ac8:	98 9e       	mul	r9, r24
    6aca:	20 0d       	add	r18, r0
    6acc:	11 24       	eor	r1, r1
    6ace:	92 2e       	mov	r9, r18
    6ad0:	11 c0       	rjmp	.+34     	; 0x6af4 <vfprintf+0xe2>
    6ad2:	ea e0       	ldi	r30, 0x0A	; 10
    6ad4:	2e 9e       	mul	r2, r30
    6ad6:	20 0d       	add	r18, r0
    6ad8:	11 24       	eor	r1, r1
    6ada:	22 2e       	mov	r2, r18
    6adc:	f3 2d       	mov	r31, r3
    6ade:	f0 62       	ori	r31, 0x20	; 32
    6ae0:	3f 2e       	mov	r3, r31
    6ae2:	08 c0       	rjmp	.+16     	; 0x6af4 <vfprintf+0xe2>
    6ae4:	8c 36       	cpi	r24, 0x6C	; 108
    6ae6:	21 f4       	brne	.+8      	; 0x6af0 <vfprintf+0xde>
    6ae8:	83 2d       	mov	r24, r3
    6aea:	80 68       	ori	r24, 0x80	; 128
    6aec:	38 2e       	mov	r3, r24
    6aee:	02 c0       	rjmp	.+4      	; 0x6af4 <vfprintf+0xe2>
    6af0:	88 36       	cpi	r24, 0x68	; 104
    6af2:	41 f4       	brne	.+16     	; 0x6b04 <vfprintf+0xf2>
    6af4:	f7 01       	movw	r30, r14
    6af6:	93 fd       	sbrc	r25, 3
    6af8:	85 91       	lpm	r24, Z+
    6afa:	93 ff       	sbrs	r25, 3
    6afc:	81 91       	ld	r24, Z+
    6afe:	7f 01       	movw	r14, r30
    6b00:	81 11       	cpse	r24, r1
    6b02:	b3 cf       	rjmp	.-154    	; 0x6a6a <vfprintf+0x58>
    6b04:	98 2f       	mov	r25, r24
    6b06:	9f 7d       	andi	r25, 0xDF	; 223
    6b08:	95 54       	subi	r25, 0x45	; 69
    6b0a:	93 30       	cpi	r25, 0x03	; 3
    6b0c:	28 f4       	brcc	.+10     	; 0x6b18 <vfprintf+0x106>
    6b0e:	0c 5f       	subi	r16, 0xFC	; 252
    6b10:	1f 4f       	sbci	r17, 0xFF	; 255
    6b12:	9f e3       	ldi	r25, 0x3F	; 63
    6b14:	99 83       	std	Y+1, r25	; 0x01
    6b16:	0d c0       	rjmp	.+26     	; 0x6b32 <vfprintf+0x120>
    6b18:	83 36       	cpi	r24, 0x63	; 99
    6b1a:	31 f0       	breq	.+12     	; 0x6b28 <vfprintf+0x116>
    6b1c:	83 37       	cpi	r24, 0x73	; 115
    6b1e:	71 f0       	breq	.+28     	; 0x6b3c <vfprintf+0x12a>
    6b20:	83 35       	cpi	r24, 0x53	; 83
    6b22:	09 f0       	breq	.+2      	; 0x6b26 <vfprintf+0x114>
    6b24:	55 c0       	rjmp	.+170    	; 0x6bd0 <vfprintf+0x1be>
    6b26:	20 c0       	rjmp	.+64     	; 0x6b68 <vfprintf+0x156>
    6b28:	f8 01       	movw	r30, r16
    6b2a:	80 81       	ld	r24, Z
    6b2c:	89 83       	std	Y+1, r24	; 0x01
    6b2e:	0e 5f       	subi	r16, 0xFE	; 254
    6b30:	1f 4f       	sbci	r17, 0xFF	; 255
    6b32:	88 24       	eor	r8, r8
    6b34:	83 94       	inc	r8
    6b36:	91 2c       	mov	r9, r1
    6b38:	53 01       	movw	r10, r6
    6b3a:	12 c0       	rjmp	.+36     	; 0x6b60 <vfprintf+0x14e>
    6b3c:	28 01       	movw	r4, r16
    6b3e:	f2 e0       	ldi	r31, 0x02	; 2
    6b40:	4f 0e       	add	r4, r31
    6b42:	51 1c       	adc	r5, r1
    6b44:	f8 01       	movw	r30, r16
    6b46:	a0 80       	ld	r10, Z
    6b48:	b1 80       	ldd	r11, Z+1	; 0x01
    6b4a:	36 fe       	sbrs	r3, 6
    6b4c:	03 c0       	rjmp	.+6      	; 0x6b54 <vfprintf+0x142>
    6b4e:	69 2d       	mov	r22, r9
    6b50:	70 e0       	ldi	r23, 0x00	; 0
    6b52:	02 c0       	rjmp	.+4      	; 0x6b58 <vfprintf+0x146>
    6b54:	6f ef       	ldi	r22, 0xFF	; 255
    6b56:	7f ef       	ldi	r23, 0xFF	; 255
    6b58:	c5 01       	movw	r24, r10
    6b5a:	3b d1       	rcall	.+630    	; 0x6dd2 <strnlen>
    6b5c:	4c 01       	movw	r8, r24
    6b5e:	82 01       	movw	r16, r4
    6b60:	f3 2d       	mov	r31, r3
    6b62:	ff 77       	andi	r31, 0x7F	; 127
    6b64:	3f 2e       	mov	r3, r31
    6b66:	15 c0       	rjmp	.+42     	; 0x6b92 <vfprintf+0x180>
    6b68:	28 01       	movw	r4, r16
    6b6a:	22 e0       	ldi	r18, 0x02	; 2
    6b6c:	42 0e       	add	r4, r18
    6b6e:	51 1c       	adc	r5, r1
    6b70:	f8 01       	movw	r30, r16
    6b72:	a0 80       	ld	r10, Z
    6b74:	b1 80       	ldd	r11, Z+1	; 0x01
    6b76:	36 fe       	sbrs	r3, 6
    6b78:	03 c0       	rjmp	.+6      	; 0x6b80 <vfprintf+0x16e>
    6b7a:	69 2d       	mov	r22, r9
    6b7c:	70 e0       	ldi	r23, 0x00	; 0
    6b7e:	02 c0       	rjmp	.+4      	; 0x6b84 <vfprintf+0x172>
    6b80:	6f ef       	ldi	r22, 0xFF	; 255
    6b82:	7f ef       	ldi	r23, 0xFF	; 255
    6b84:	c5 01       	movw	r24, r10
    6b86:	1a d1       	rcall	.+564    	; 0x6dbc <strnlen_P>
    6b88:	4c 01       	movw	r8, r24
    6b8a:	f3 2d       	mov	r31, r3
    6b8c:	f0 68       	ori	r31, 0x80	; 128
    6b8e:	3f 2e       	mov	r3, r31
    6b90:	82 01       	movw	r16, r4
    6b92:	33 fc       	sbrc	r3, 3
    6b94:	19 c0       	rjmp	.+50     	; 0x6bc8 <vfprintf+0x1b6>
    6b96:	82 2d       	mov	r24, r2
    6b98:	90 e0       	ldi	r25, 0x00	; 0
    6b9a:	88 16       	cp	r8, r24
    6b9c:	99 06       	cpc	r9, r25
    6b9e:	a0 f4       	brcc	.+40     	; 0x6bc8 <vfprintf+0x1b6>
    6ba0:	b6 01       	movw	r22, r12
    6ba2:	80 e2       	ldi	r24, 0x20	; 32
    6ba4:	90 e0       	ldi	r25, 0x00	; 0
    6ba6:	20 d1       	rcall	.+576    	; 0x6de8 <fputc>
    6ba8:	2a 94       	dec	r2
    6baa:	f5 cf       	rjmp	.-22     	; 0x6b96 <vfprintf+0x184>
    6bac:	f5 01       	movw	r30, r10
    6bae:	37 fc       	sbrc	r3, 7
    6bb0:	85 91       	lpm	r24, Z+
    6bb2:	37 fe       	sbrs	r3, 7
    6bb4:	81 91       	ld	r24, Z+
    6bb6:	5f 01       	movw	r10, r30
    6bb8:	b6 01       	movw	r22, r12
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	15 d1       	rcall	.+554    	; 0x6de8 <fputc>
    6bbe:	21 10       	cpse	r2, r1
    6bc0:	2a 94       	dec	r2
    6bc2:	21 e0       	ldi	r18, 0x01	; 1
    6bc4:	82 1a       	sub	r8, r18
    6bc6:	91 08       	sbc	r9, r1
    6bc8:	81 14       	cp	r8, r1
    6bca:	91 04       	cpc	r9, r1
    6bcc:	79 f7       	brne	.-34     	; 0x6bac <vfprintf+0x19a>
    6bce:	e1 c0       	rjmp	.+450    	; 0x6d92 <vfprintf+0x380>
    6bd0:	84 36       	cpi	r24, 0x64	; 100
    6bd2:	11 f0       	breq	.+4      	; 0x6bd8 <vfprintf+0x1c6>
    6bd4:	89 36       	cpi	r24, 0x69	; 105
    6bd6:	39 f5       	brne	.+78     	; 0x6c26 <vfprintf+0x214>
    6bd8:	f8 01       	movw	r30, r16
    6bda:	37 fe       	sbrs	r3, 7
    6bdc:	07 c0       	rjmp	.+14     	; 0x6bec <vfprintf+0x1da>
    6bde:	60 81       	ld	r22, Z
    6be0:	71 81       	ldd	r23, Z+1	; 0x01
    6be2:	82 81       	ldd	r24, Z+2	; 0x02
    6be4:	93 81       	ldd	r25, Z+3	; 0x03
    6be6:	0c 5f       	subi	r16, 0xFC	; 252
    6be8:	1f 4f       	sbci	r17, 0xFF	; 255
    6bea:	08 c0       	rjmp	.+16     	; 0x6bfc <vfprintf+0x1ea>
    6bec:	60 81       	ld	r22, Z
    6bee:	71 81       	ldd	r23, Z+1	; 0x01
    6bf0:	07 2e       	mov	r0, r23
    6bf2:	00 0c       	add	r0, r0
    6bf4:	88 0b       	sbc	r24, r24
    6bf6:	99 0b       	sbc	r25, r25
    6bf8:	0e 5f       	subi	r16, 0xFE	; 254
    6bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    6bfc:	f3 2d       	mov	r31, r3
    6bfe:	ff 76       	andi	r31, 0x6F	; 111
    6c00:	3f 2e       	mov	r3, r31
    6c02:	97 ff       	sbrs	r25, 7
    6c04:	09 c0       	rjmp	.+18     	; 0x6c18 <vfprintf+0x206>
    6c06:	90 95       	com	r25
    6c08:	80 95       	com	r24
    6c0a:	70 95       	com	r23
    6c0c:	61 95       	neg	r22
    6c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c10:	8f 4f       	sbci	r24, 0xFF	; 255
    6c12:	9f 4f       	sbci	r25, 0xFF	; 255
    6c14:	f0 68       	ori	r31, 0x80	; 128
    6c16:	3f 2e       	mov	r3, r31
    6c18:	2a e0       	ldi	r18, 0x0A	; 10
    6c1a:	30 e0       	ldi	r19, 0x00	; 0
    6c1c:	a3 01       	movw	r20, r6
    6c1e:	20 d1       	rcall	.+576    	; 0x6e60 <__ultoa_invert>
    6c20:	88 2e       	mov	r8, r24
    6c22:	86 18       	sub	r8, r6
    6c24:	44 c0       	rjmp	.+136    	; 0x6cae <vfprintf+0x29c>
    6c26:	85 37       	cpi	r24, 0x75	; 117
    6c28:	31 f4       	brne	.+12     	; 0x6c36 <vfprintf+0x224>
    6c2a:	23 2d       	mov	r18, r3
    6c2c:	2f 7e       	andi	r18, 0xEF	; 239
    6c2e:	b2 2e       	mov	r11, r18
    6c30:	2a e0       	ldi	r18, 0x0A	; 10
    6c32:	30 e0       	ldi	r19, 0x00	; 0
    6c34:	25 c0       	rjmp	.+74     	; 0x6c80 <vfprintf+0x26e>
    6c36:	93 2d       	mov	r25, r3
    6c38:	99 7f       	andi	r25, 0xF9	; 249
    6c3a:	b9 2e       	mov	r11, r25
    6c3c:	8f 36       	cpi	r24, 0x6F	; 111
    6c3e:	c1 f0       	breq	.+48     	; 0x6c70 <vfprintf+0x25e>
    6c40:	18 f4       	brcc	.+6      	; 0x6c48 <vfprintf+0x236>
    6c42:	88 35       	cpi	r24, 0x58	; 88
    6c44:	79 f0       	breq	.+30     	; 0x6c64 <vfprintf+0x252>
    6c46:	ae c0       	rjmp	.+348    	; 0x6da4 <vfprintf+0x392>
    6c48:	80 37       	cpi	r24, 0x70	; 112
    6c4a:	19 f0       	breq	.+6      	; 0x6c52 <vfprintf+0x240>
    6c4c:	88 37       	cpi	r24, 0x78	; 120
    6c4e:	21 f0       	breq	.+8      	; 0x6c58 <vfprintf+0x246>
    6c50:	a9 c0       	rjmp	.+338    	; 0x6da4 <vfprintf+0x392>
    6c52:	e9 2f       	mov	r30, r25
    6c54:	e0 61       	ori	r30, 0x10	; 16
    6c56:	be 2e       	mov	r11, r30
    6c58:	b4 fe       	sbrs	r11, 4
    6c5a:	0d c0       	rjmp	.+26     	; 0x6c76 <vfprintf+0x264>
    6c5c:	fb 2d       	mov	r31, r11
    6c5e:	f4 60       	ori	r31, 0x04	; 4
    6c60:	bf 2e       	mov	r11, r31
    6c62:	09 c0       	rjmp	.+18     	; 0x6c76 <vfprintf+0x264>
    6c64:	34 fe       	sbrs	r3, 4
    6c66:	0a c0       	rjmp	.+20     	; 0x6c7c <vfprintf+0x26a>
    6c68:	29 2f       	mov	r18, r25
    6c6a:	26 60       	ori	r18, 0x06	; 6
    6c6c:	b2 2e       	mov	r11, r18
    6c6e:	06 c0       	rjmp	.+12     	; 0x6c7c <vfprintf+0x26a>
    6c70:	28 e0       	ldi	r18, 0x08	; 8
    6c72:	30 e0       	ldi	r19, 0x00	; 0
    6c74:	05 c0       	rjmp	.+10     	; 0x6c80 <vfprintf+0x26e>
    6c76:	20 e1       	ldi	r18, 0x10	; 16
    6c78:	30 e0       	ldi	r19, 0x00	; 0
    6c7a:	02 c0       	rjmp	.+4      	; 0x6c80 <vfprintf+0x26e>
    6c7c:	20 e1       	ldi	r18, 0x10	; 16
    6c7e:	32 e0       	ldi	r19, 0x02	; 2
    6c80:	f8 01       	movw	r30, r16
    6c82:	b7 fe       	sbrs	r11, 7
    6c84:	07 c0       	rjmp	.+14     	; 0x6c94 <vfprintf+0x282>
    6c86:	60 81       	ld	r22, Z
    6c88:	71 81       	ldd	r23, Z+1	; 0x01
    6c8a:	82 81       	ldd	r24, Z+2	; 0x02
    6c8c:	93 81       	ldd	r25, Z+3	; 0x03
    6c8e:	0c 5f       	subi	r16, 0xFC	; 252
    6c90:	1f 4f       	sbci	r17, 0xFF	; 255
    6c92:	06 c0       	rjmp	.+12     	; 0x6ca0 <vfprintf+0x28e>
    6c94:	60 81       	ld	r22, Z
    6c96:	71 81       	ldd	r23, Z+1	; 0x01
    6c98:	80 e0       	ldi	r24, 0x00	; 0
    6c9a:	90 e0       	ldi	r25, 0x00	; 0
    6c9c:	0e 5f       	subi	r16, 0xFE	; 254
    6c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    6ca0:	a3 01       	movw	r20, r6
    6ca2:	de d0       	rcall	.+444    	; 0x6e60 <__ultoa_invert>
    6ca4:	88 2e       	mov	r8, r24
    6ca6:	86 18       	sub	r8, r6
    6ca8:	fb 2d       	mov	r31, r11
    6caa:	ff 77       	andi	r31, 0x7F	; 127
    6cac:	3f 2e       	mov	r3, r31
    6cae:	36 fe       	sbrs	r3, 6
    6cb0:	0d c0       	rjmp	.+26     	; 0x6ccc <vfprintf+0x2ba>
    6cb2:	23 2d       	mov	r18, r3
    6cb4:	2e 7f       	andi	r18, 0xFE	; 254
    6cb6:	a2 2e       	mov	r10, r18
    6cb8:	89 14       	cp	r8, r9
    6cba:	58 f4       	brcc	.+22     	; 0x6cd2 <vfprintf+0x2c0>
    6cbc:	34 fe       	sbrs	r3, 4
    6cbe:	0b c0       	rjmp	.+22     	; 0x6cd6 <vfprintf+0x2c4>
    6cc0:	32 fc       	sbrc	r3, 2
    6cc2:	09 c0       	rjmp	.+18     	; 0x6cd6 <vfprintf+0x2c4>
    6cc4:	83 2d       	mov	r24, r3
    6cc6:	8e 7e       	andi	r24, 0xEE	; 238
    6cc8:	a8 2e       	mov	r10, r24
    6cca:	05 c0       	rjmp	.+10     	; 0x6cd6 <vfprintf+0x2c4>
    6ccc:	b8 2c       	mov	r11, r8
    6cce:	a3 2c       	mov	r10, r3
    6cd0:	03 c0       	rjmp	.+6      	; 0x6cd8 <vfprintf+0x2c6>
    6cd2:	b8 2c       	mov	r11, r8
    6cd4:	01 c0       	rjmp	.+2      	; 0x6cd8 <vfprintf+0x2c6>
    6cd6:	b9 2c       	mov	r11, r9
    6cd8:	a4 fe       	sbrs	r10, 4
    6cda:	0f c0       	rjmp	.+30     	; 0x6cfa <vfprintf+0x2e8>
    6cdc:	fe 01       	movw	r30, r28
    6cde:	e8 0d       	add	r30, r8
    6ce0:	f1 1d       	adc	r31, r1
    6ce2:	80 81       	ld	r24, Z
    6ce4:	80 33       	cpi	r24, 0x30	; 48
    6ce6:	21 f4       	brne	.+8      	; 0x6cf0 <vfprintf+0x2de>
    6ce8:	9a 2d       	mov	r25, r10
    6cea:	99 7e       	andi	r25, 0xE9	; 233
    6cec:	a9 2e       	mov	r10, r25
    6cee:	09 c0       	rjmp	.+18     	; 0x6d02 <vfprintf+0x2f0>
    6cf0:	a2 fe       	sbrs	r10, 2
    6cf2:	06 c0       	rjmp	.+12     	; 0x6d00 <vfprintf+0x2ee>
    6cf4:	b3 94       	inc	r11
    6cf6:	b3 94       	inc	r11
    6cf8:	04 c0       	rjmp	.+8      	; 0x6d02 <vfprintf+0x2f0>
    6cfa:	8a 2d       	mov	r24, r10
    6cfc:	86 78       	andi	r24, 0x86	; 134
    6cfe:	09 f0       	breq	.+2      	; 0x6d02 <vfprintf+0x2f0>
    6d00:	b3 94       	inc	r11
    6d02:	a3 fc       	sbrc	r10, 3
    6d04:	10 c0       	rjmp	.+32     	; 0x6d26 <vfprintf+0x314>
    6d06:	a0 fe       	sbrs	r10, 0
    6d08:	06 c0       	rjmp	.+12     	; 0x6d16 <vfprintf+0x304>
    6d0a:	b2 14       	cp	r11, r2
    6d0c:	80 f4       	brcc	.+32     	; 0x6d2e <vfprintf+0x31c>
    6d0e:	28 0c       	add	r2, r8
    6d10:	92 2c       	mov	r9, r2
    6d12:	9b 18       	sub	r9, r11
    6d14:	0d c0       	rjmp	.+26     	; 0x6d30 <vfprintf+0x31e>
    6d16:	b2 14       	cp	r11, r2
    6d18:	58 f4       	brcc	.+22     	; 0x6d30 <vfprintf+0x31e>
    6d1a:	b6 01       	movw	r22, r12
    6d1c:	80 e2       	ldi	r24, 0x20	; 32
    6d1e:	90 e0       	ldi	r25, 0x00	; 0
    6d20:	63 d0       	rcall	.+198    	; 0x6de8 <fputc>
    6d22:	b3 94       	inc	r11
    6d24:	f8 cf       	rjmp	.-16     	; 0x6d16 <vfprintf+0x304>
    6d26:	b2 14       	cp	r11, r2
    6d28:	18 f4       	brcc	.+6      	; 0x6d30 <vfprintf+0x31e>
    6d2a:	2b 18       	sub	r2, r11
    6d2c:	02 c0       	rjmp	.+4      	; 0x6d32 <vfprintf+0x320>
    6d2e:	98 2c       	mov	r9, r8
    6d30:	21 2c       	mov	r2, r1
    6d32:	a4 fe       	sbrs	r10, 4
    6d34:	0f c0       	rjmp	.+30     	; 0x6d54 <vfprintf+0x342>
    6d36:	b6 01       	movw	r22, r12
    6d38:	80 e3       	ldi	r24, 0x30	; 48
    6d3a:	90 e0       	ldi	r25, 0x00	; 0
    6d3c:	55 d0       	rcall	.+170    	; 0x6de8 <fputc>
    6d3e:	a2 fe       	sbrs	r10, 2
    6d40:	16 c0       	rjmp	.+44     	; 0x6d6e <vfprintf+0x35c>
    6d42:	a1 fc       	sbrc	r10, 1
    6d44:	03 c0       	rjmp	.+6      	; 0x6d4c <vfprintf+0x33a>
    6d46:	88 e7       	ldi	r24, 0x78	; 120
    6d48:	90 e0       	ldi	r25, 0x00	; 0
    6d4a:	02 c0       	rjmp	.+4      	; 0x6d50 <vfprintf+0x33e>
    6d4c:	88 e5       	ldi	r24, 0x58	; 88
    6d4e:	90 e0       	ldi	r25, 0x00	; 0
    6d50:	b6 01       	movw	r22, r12
    6d52:	0c c0       	rjmp	.+24     	; 0x6d6c <vfprintf+0x35a>
    6d54:	8a 2d       	mov	r24, r10
    6d56:	86 78       	andi	r24, 0x86	; 134
    6d58:	51 f0       	breq	.+20     	; 0x6d6e <vfprintf+0x35c>
    6d5a:	a1 fe       	sbrs	r10, 1
    6d5c:	02 c0       	rjmp	.+4      	; 0x6d62 <vfprintf+0x350>
    6d5e:	8b e2       	ldi	r24, 0x2B	; 43
    6d60:	01 c0       	rjmp	.+2      	; 0x6d64 <vfprintf+0x352>
    6d62:	80 e2       	ldi	r24, 0x20	; 32
    6d64:	a7 fc       	sbrc	r10, 7
    6d66:	8d e2       	ldi	r24, 0x2D	; 45
    6d68:	b6 01       	movw	r22, r12
    6d6a:	90 e0       	ldi	r25, 0x00	; 0
    6d6c:	3d d0       	rcall	.+122    	; 0x6de8 <fputc>
    6d6e:	89 14       	cp	r8, r9
    6d70:	30 f4       	brcc	.+12     	; 0x6d7e <vfprintf+0x36c>
    6d72:	b6 01       	movw	r22, r12
    6d74:	80 e3       	ldi	r24, 0x30	; 48
    6d76:	90 e0       	ldi	r25, 0x00	; 0
    6d78:	37 d0       	rcall	.+110    	; 0x6de8 <fputc>
    6d7a:	9a 94       	dec	r9
    6d7c:	f8 cf       	rjmp	.-16     	; 0x6d6e <vfprintf+0x35c>
    6d7e:	8a 94       	dec	r8
    6d80:	f3 01       	movw	r30, r6
    6d82:	e8 0d       	add	r30, r8
    6d84:	f1 1d       	adc	r31, r1
    6d86:	80 81       	ld	r24, Z
    6d88:	b6 01       	movw	r22, r12
    6d8a:	90 e0       	ldi	r25, 0x00	; 0
    6d8c:	2d d0       	rcall	.+90     	; 0x6de8 <fputc>
    6d8e:	81 10       	cpse	r8, r1
    6d90:	f6 cf       	rjmp	.-20     	; 0x6d7e <vfprintf+0x36c>
    6d92:	22 20       	and	r2, r2
    6d94:	09 f4       	brne	.+2      	; 0x6d98 <vfprintf+0x386>
    6d96:	4e ce       	rjmp	.-868    	; 0x6a34 <vfprintf+0x22>
    6d98:	b6 01       	movw	r22, r12
    6d9a:	80 e2       	ldi	r24, 0x20	; 32
    6d9c:	90 e0       	ldi	r25, 0x00	; 0
    6d9e:	24 d0       	rcall	.+72     	; 0x6de8 <fputc>
    6da0:	2a 94       	dec	r2
    6da2:	f7 cf       	rjmp	.-18     	; 0x6d92 <vfprintf+0x380>
    6da4:	f6 01       	movw	r30, r12
    6da6:	86 81       	ldd	r24, Z+6	; 0x06
    6da8:	97 81       	ldd	r25, Z+7	; 0x07
    6daa:	02 c0       	rjmp	.+4      	; 0x6db0 <vfprintf+0x39e>
    6dac:	8f ef       	ldi	r24, 0xFF	; 255
    6dae:	9f ef       	ldi	r25, 0xFF	; 255
    6db0:	2b 96       	adiw	r28, 0x0b	; 11
    6db2:	e2 e1       	ldi	r30, 0x12	; 18
    6db4:	47 c9       	rjmp	.-3442   	; 0x6044 <__epilogue_restores__>

00006db6 <__ctype_isfalse>:
    6db6:	99 27       	eor	r25, r25
    6db8:	88 27       	eor	r24, r24

00006dba <__ctype_istrue>:
    6dba:	08 95       	ret

00006dbc <strnlen_P>:
    6dbc:	fc 01       	movw	r30, r24
    6dbe:	05 90       	lpm	r0, Z+
    6dc0:	61 50       	subi	r22, 0x01	; 1
    6dc2:	70 40       	sbci	r23, 0x00	; 0
    6dc4:	01 10       	cpse	r0, r1
    6dc6:	d8 f7       	brcc	.-10     	; 0x6dbe <strnlen_P+0x2>
    6dc8:	80 95       	com	r24
    6dca:	90 95       	com	r25
    6dcc:	8e 0f       	add	r24, r30
    6dce:	9f 1f       	adc	r25, r31
    6dd0:	08 95       	ret

00006dd2 <strnlen>:
    6dd2:	fc 01       	movw	r30, r24
    6dd4:	61 50       	subi	r22, 0x01	; 1
    6dd6:	70 40       	sbci	r23, 0x00	; 0
    6dd8:	01 90       	ld	r0, Z+
    6dda:	01 10       	cpse	r0, r1
    6ddc:	d8 f7       	brcc	.-10     	; 0x6dd4 <strnlen+0x2>
    6dde:	80 95       	com	r24
    6de0:	90 95       	com	r25
    6de2:	8e 0f       	add	r24, r30
    6de4:	9f 1f       	adc	r25, r31
    6de6:	08 95       	ret

00006de8 <fputc>:
    6de8:	0f 93       	push	r16
    6dea:	1f 93       	push	r17
    6dec:	cf 93       	push	r28
    6dee:	df 93       	push	r29
    6df0:	fb 01       	movw	r30, r22
    6df2:	23 81       	ldd	r18, Z+3	; 0x03
    6df4:	21 fd       	sbrc	r18, 1
    6df6:	03 c0       	rjmp	.+6      	; 0x6dfe <fputc+0x16>
    6df8:	8f ef       	ldi	r24, 0xFF	; 255
    6dfa:	9f ef       	ldi	r25, 0xFF	; 255
    6dfc:	2c c0       	rjmp	.+88     	; 0x6e56 <fputc+0x6e>
    6dfe:	22 ff       	sbrs	r18, 2
    6e00:	16 c0       	rjmp	.+44     	; 0x6e2e <fputc+0x46>
    6e02:	46 81       	ldd	r20, Z+6	; 0x06
    6e04:	57 81       	ldd	r21, Z+7	; 0x07
    6e06:	24 81       	ldd	r18, Z+4	; 0x04
    6e08:	35 81       	ldd	r19, Z+5	; 0x05
    6e0a:	42 17       	cp	r20, r18
    6e0c:	53 07       	cpc	r21, r19
    6e0e:	44 f4       	brge	.+16     	; 0x6e20 <fputc+0x38>
    6e10:	a0 81       	ld	r26, Z
    6e12:	b1 81       	ldd	r27, Z+1	; 0x01
    6e14:	9d 01       	movw	r18, r26
    6e16:	2f 5f       	subi	r18, 0xFF	; 255
    6e18:	3f 4f       	sbci	r19, 0xFF	; 255
    6e1a:	31 83       	std	Z+1, r19	; 0x01
    6e1c:	20 83       	st	Z, r18
    6e1e:	8c 93       	st	X, r24
    6e20:	26 81       	ldd	r18, Z+6	; 0x06
    6e22:	37 81       	ldd	r19, Z+7	; 0x07
    6e24:	2f 5f       	subi	r18, 0xFF	; 255
    6e26:	3f 4f       	sbci	r19, 0xFF	; 255
    6e28:	37 83       	std	Z+7, r19	; 0x07
    6e2a:	26 83       	std	Z+6, r18	; 0x06
    6e2c:	14 c0       	rjmp	.+40     	; 0x6e56 <fputc+0x6e>
    6e2e:	8b 01       	movw	r16, r22
    6e30:	ec 01       	movw	r28, r24
    6e32:	fb 01       	movw	r30, r22
    6e34:	00 84       	ldd	r0, Z+8	; 0x08
    6e36:	f1 85       	ldd	r31, Z+9	; 0x09
    6e38:	e0 2d       	mov	r30, r0
    6e3a:	09 95       	icall
    6e3c:	89 2b       	or	r24, r25
    6e3e:	e1 f6       	brne	.-72     	; 0x6df8 <fputc+0x10>
    6e40:	d8 01       	movw	r26, r16
    6e42:	16 96       	adiw	r26, 0x06	; 6
    6e44:	8d 91       	ld	r24, X+
    6e46:	9c 91       	ld	r25, X
    6e48:	17 97       	sbiw	r26, 0x07	; 7
    6e4a:	01 96       	adiw	r24, 0x01	; 1
    6e4c:	17 96       	adiw	r26, 0x07	; 7
    6e4e:	9c 93       	st	X, r25
    6e50:	8e 93       	st	-X, r24
    6e52:	16 97       	sbiw	r26, 0x06	; 6
    6e54:	ce 01       	movw	r24, r28
    6e56:	df 91       	pop	r29
    6e58:	cf 91       	pop	r28
    6e5a:	1f 91       	pop	r17
    6e5c:	0f 91       	pop	r16
    6e5e:	08 95       	ret

00006e60 <__ultoa_invert>:
    6e60:	fa 01       	movw	r30, r20
    6e62:	aa 27       	eor	r26, r26
    6e64:	28 30       	cpi	r18, 0x08	; 8
    6e66:	51 f1       	breq	.+84     	; 0x6ebc <__ultoa_invert+0x5c>
    6e68:	20 31       	cpi	r18, 0x10	; 16
    6e6a:	81 f1       	breq	.+96     	; 0x6ecc <__ultoa_invert+0x6c>
    6e6c:	e8 94       	clt
    6e6e:	6f 93       	push	r22
    6e70:	6e 7f       	andi	r22, 0xFE	; 254
    6e72:	6e 5f       	subi	r22, 0xFE	; 254
    6e74:	7f 4f       	sbci	r23, 0xFF	; 255
    6e76:	8f 4f       	sbci	r24, 0xFF	; 255
    6e78:	9f 4f       	sbci	r25, 0xFF	; 255
    6e7a:	af 4f       	sbci	r26, 0xFF	; 255
    6e7c:	b1 e0       	ldi	r27, 0x01	; 1
    6e7e:	3e d0       	rcall	.+124    	; 0x6efc <__ultoa_invert+0x9c>
    6e80:	b4 e0       	ldi	r27, 0x04	; 4
    6e82:	3c d0       	rcall	.+120    	; 0x6efc <__ultoa_invert+0x9c>
    6e84:	67 0f       	add	r22, r23
    6e86:	78 1f       	adc	r23, r24
    6e88:	89 1f       	adc	r24, r25
    6e8a:	9a 1f       	adc	r25, r26
    6e8c:	a1 1d       	adc	r26, r1
    6e8e:	68 0f       	add	r22, r24
    6e90:	79 1f       	adc	r23, r25
    6e92:	8a 1f       	adc	r24, r26
    6e94:	91 1d       	adc	r25, r1
    6e96:	a1 1d       	adc	r26, r1
    6e98:	6a 0f       	add	r22, r26
    6e9a:	71 1d       	adc	r23, r1
    6e9c:	81 1d       	adc	r24, r1
    6e9e:	91 1d       	adc	r25, r1
    6ea0:	a1 1d       	adc	r26, r1
    6ea2:	20 d0       	rcall	.+64     	; 0x6ee4 <__ultoa_invert+0x84>
    6ea4:	09 f4       	brne	.+2      	; 0x6ea8 <__ultoa_invert+0x48>
    6ea6:	68 94       	set
    6ea8:	3f 91       	pop	r19
    6eaa:	2a e0       	ldi	r18, 0x0A	; 10
    6eac:	26 9f       	mul	r18, r22
    6eae:	11 24       	eor	r1, r1
    6eb0:	30 19       	sub	r19, r0
    6eb2:	30 5d       	subi	r19, 0xD0	; 208
    6eb4:	31 93       	st	Z+, r19
    6eb6:	de f6       	brtc	.-74     	; 0x6e6e <__ultoa_invert+0xe>
    6eb8:	cf 01       	movw	r24, r30
    6eba:	08 95       	ret
    6ebc:	46 2f       	mov	r20, r22
    6ebe:	47 70       	andi	r20, 0x07	; 7
    6ec0:	40 5d       	subi	r20, 0xD0	; 208
    6ec2:	41 93       	st	Z+, r20
    6ec4:	b3 e0       	ldi	r27, 0x03	; 3
    6ec6:	0f d0       	rcall	.+30     	; 0x6ee6 <__ultoa_invert+0x86>
    6ec8:	c9 f7       	brne	.-14     	; 0x6ebc <__ultoa_invert+0x5c>
    6eca:	f6 cf       	rjmp	.-20     	; 0x6eb8 <__ultoa_invert+0x58>
    6ecc:	46 2f       	mov	r20, r22
    6ece:	4f 70       	andi	r20, 0x0F	; 15
    6ed0:	40 5d       	subi	r20, 0xD0	; 208
    6ed2:	4a 33       	cpi	r20, 0x3A	; 58
    6ed4:	18 f0       	brcs	.+6      	; 0x6edc <__ultoa_invert+0x7c>
    6ed6:	49 5d       	subi	r20, 0xD9	; 217
    6ed8:	31 fd       	sbrc	r19, 1
    6eda:	40 52       	subi	r20, 0x20	; 32
    6edc:	41 93       	st	Z+, r20
    6ede:	02 d0       	rcall	.+4      	; 0x6ee4 <__ultoa_invert+0x84>
    6ee0:	a9 f7       	brne	.-22     	; 0x6ecc <__ultoa_invert+0x6c>
    6ee2:	ea cf       	rjmp	.-44     	; 0x6eb8 <__ultoa_invert+0x58>
    6ee4:	b4 e0       	ldi	r27, 0x04	; 4
    6ee6:	a6 95       	lsr	r26
    6ee8:	97 95       	ror	r25
    6eea:	87 95       	ror	r24
    6eec:	77 95       	ror	r23
    6eee:	67 95       	ror	r22
    6ef0:	ba 95       	dec	r27
    6ef2:	c9 f7       	brne	.-14     	; 0x6ee6 <__ultoa_invert+0x86>
    6ef4:	00 97       	sbiw	r24, 0x00	; 0
    6ef6:	61 05       	cpc	r22, r1
    6ef8:	71 05       	cpc	r23, r1
    6efa:	08 95       	ret
    6efc:	9b 01       	movw	r18, r22
    6efe:	ac 01       	movw	r20, r24
    6f00:	0a 2e       	mov	r0, r26
    6f02:	06 94       	lsr	r0
    6f04:	57 95       	ror	r21
    6f06:	47 95       	ror	r20
    6f08:	37 95       	ror	r19
    6f0a:	27 95       	ror	r18
    6f0c:	ba 95       	dec	r27
    6f0e:	c9 f7       	brne	.-14     	; 0x6f02 <__ultoa_invert+0xa2>
    6f10:	62 0f       	add	r22, r18
    6f12:	73 1f       	adc	r23, r19
    6f14:	84 1f       	adc	r24, r20
    6f16:	95 1f       	adc	r25, r21
    6f18:	a0 1d       	adc	r26, r0
    6f1a:	08 95       	ret

00006f1c <eeprom_read_byte>:
    6f1c:	f9 99       	sbic	0x1f, 1	; 31
    6f1e:	fe cf       	rjmp	.-4      	; 0x6f1c <eeprom_read_byte>
    6f20:	92 bd       	out	0x22, r25	; 34
    6f22:	81 bd       	out	0x21, r24	; 33
    6f24:	f8 9a       	sbi	0x1f, 0	; 31
    6f26:	99 27       	eor	r25, r25
    6f28:	80 b5       	in	r24, 0x20	; 32
    6f2a:	08 95       	ret

00006f2c <eeprom_write_byte>:
    6f2c:	26 2f       	mov	r18, r22

00006f2e <eeprom_write_r18>:
    6f2e:	f9 99       	sbic	0x1f, 1	; 31
    6f30:	fe cf       	rjmp	.-4      	; 0x6f2e <eeprom_write_r18>
    6f32:	1f ba       	out	0x1f, r1	; 31
    6f34:	92 bd       	out	0x22, r25	; 34
    6f36:	81 bd       	out	0x21, r24	; 33
    6f38:	20 bd       	out	0x20, r18	; 32
    6f3a:	0f b6       	in	r0, 0x3f	; 63
    6f3c:	f8 94       	cli
    6f3e:	fa 9a       	sbi	0x1f, 2	; 31
    6f40:	f9 9a       	sbi	0x1f, 1	; 31
    6f42:	0f be       	out	0x3f, r0	; 63
    6f44:	01 96       	adiw	r24, 0x01	; 1
    6f46:	08 95       	ret

00006f48 <_exit>:
    6f48:	f8 94       	cli

00006f4a <__stop_program>:
    6f4a:	ff cf       	rjmp	.-2      	; 0x6f4a <__stop_program>
